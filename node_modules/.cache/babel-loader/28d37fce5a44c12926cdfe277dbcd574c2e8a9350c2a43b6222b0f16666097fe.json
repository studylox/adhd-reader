{"ast":null,"code":"var _jsxFileName = \"D:\\\\adhd-read-helper\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 添加全局事件跟踪对象\nwindow.eventTracker = window.eventTracker || {\n  mouseFollowHandlers: []\n};\n\n// 自动阅读器全局对象\nwindow.autoReader = {\n  charPositions: [],\n  intervalId: null,\n  currentIndex: 0,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false,\n  cleanup: null\n};\n\n// 创建统一的全局命名空间，确保在页面切换后仍然保持状态\nwindow.rhythmReader = window.rhythmReader || {\n  active: false,\n  speed: 150,\n  pagesRead: 0,\n  intervalId: null\n};\n\n// 立即执行函数确保全局命名空间在所有代码之前初始化\n(function initializeGlobalNamespace() {\n  // 确保全局对象始终存在\n  if (!window.rhythmReader) {\n    window.rhythmReader = {\n      active: false,\n      speed: 150,\n      pagesRead: 0,\n      intervalId: null\n    };\n  }\n  console.log(\"节奏阅读全局命名空间已初始化\");\n})();\n\n// 节奏阅读模式 - 手动翻页安全版\n(function () {\n  console.log(\"节奏阅读模式 - 手动翻页安全版初始化\");\n\n  // 配置参数\n  const minSpeed = 30;\n  const maxSpeed = 400;\n  const speedStep = 10;\n\n  // 状态变量\n  let charElements = [];\n  let currentIndex = 0;\n  let readIndices = new Set();\n\n  // 安全访问全局对象的辅助函数\n  const safeGetRhythmReader = function () {\n    if (!window.rhythmReader) {\n      console.warn(\"rhythmReader未初始化，重新创建\");\n      window.rhythmReader = {\n        active: false,\n        speed: 150,\n        pagesRead: 0,\n        intervalId: null\n      };\n    }\n    return window.rhythmReader;\n  };\n\n  // 安全设置状态的辅助函数\n  const safeSetActive = function (isActive) {\n    const reader = safeGetRhythmReader();\n    reader.active = isActive;\n  };\n\n  // 安全获取状态的辅助函数\n  const safeGetActive = function () {\n    const reader = safeGetRhythmReader();\n    return reader.active;\n  };\n\n  // 安全操作间隔定时器的辅助函数\n  const safeClearInterval = function () {\n    const reader = safeGetRhythmReader();\n    if (reader.intervalId) {\n      clearInterval(reader.intervalId);\n      reader.intervalId = null;\n    }\n  };\n  const safeSetInterval = function (callback, delay) {\n    const reader = safeGetRhythmReader();\n    safeClearInterval();\n    reader.intervalId = setInterval(callback, delay);\n  };\n\n  // 查找下一页按钮 - 仅用于手动翻页时的辅助\n  const findNextPageButton = function () {\n    const selectors = ['.next-page', '.next', '#next', '[aria-label=\"下一页\"]', '[aria-label=\"Next\"]'];\n    for (const selector of selectors) {\n      try {\n        const buttons = document.querySelectorAll(selector);\n        for (const btn of buttons) {\n          if (btn.offsetParent !== null) {\n            return btn;\n          }\n        }\n      } catch (e) {}\n    }\n    const allButtons = document.querySelectorAll('button, a, div[role=\"button\"]');\n    for (const btn of allButtons) {\n      const text = (btn.textContent || '').trim().toLowerCase();\n      if (text === '下一页' || text === 'next' || text === '>' || text === '→') {\n        if (btn.offsetParent !== null) {\n          return btn;\n        }\n      }\n    }\n    return null;\n  };\n\n  // 改进的清理函数\n  const cleanup = function () {\n    console.log(\"执行清理...\");\n\n    // 安全清理定时器\n    safeClearInterval();\n    try {\n      document.querySelectorAll('.rhythm-char').forEach(span => {\n        if (span.parentNode) {\n          span.parentNode.replaceChild(document.createTextNode(span.textContent), span);\n        }\n      });\n    } catch (e) {\n      console.error(\"清理文本失败:\", e);\n    }\n    charElements = [];\n    currentIndex = 0;\n    readIndices = new Set();\n\n    // 安全设置活动状态\n    safeSetActive(false);\n\n    // 清理所有UI元素\n    const elementsToRemove = ['rhythm-control-panel', 'rhythm-speed-controller', 'rhythm-page-complete', 'rhythm-message'];\n    elementsToRemove.forEach(id => {\n      const element = document.getElementById(id);\n      if (element) element.remove();\n    });\n  };\n\n  // 消息显示函数\n  const showMessage = function (message, duration = 3000) {\n    console.log(message);\n\n    // 移除旧消息\n    const oldMsg = document.getElementById('rhythm-message');\n    if (oldMsg) oldMsg.remove();\n    const msgElement = document.createElement('div');\n    msgElement.id = 'rhythm-message';\n    msgElement.textContent = message;\n    msgElement.style.cssText = `\n      position: fixed;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      background: rgba(0,0,0,0.8);\n      color: white;\n      padding: 15px 20px;\n      border-radius: 5px;\n      z-index: 9999999;\n      font-size: 16px;\n      max-width: 80%;\n      text-align: center;\n    `;\n    document.body.appendChild(msgElement);\n    setTimeout(() => {\n      if (msgElement.parentNode) {\n        msgElement.remove();\n      }\n    }, duration);\n  };\n\n  // 页面读完通知\n  const showPageCompleteNotification = function () {\n    // 移除之前的通知\n    const oldNotice = document.getElementById('rhythm-page-complete');\n    if (oldNotice) oldNotice.remove();\n\n    // 创建通知\n    const notice = document.createElement('div');\n    notice.id = 'rhythm-page-complete';\n    notice.style.cssText = `\n      position: fixed;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      background: rgba(0, 0, 0, 0.8);\n      color: white;\n      padding: 20px 30px;\n      border-radius: 8px;\n      z-index: 9999999;\n      font-size: 16px;\n      text-align: center;\n      box-shadow: 0 4px 10px rgba(0,0,0,0.3);\n    `;\n\n    // 通知内容\n    const message = document.createElement('div');\n    message.innerHTML = '<strong>当前页面已读完</strong>';\n    notice.appendChild(message);\n    document.body.appendChild(notice);\n\n    // 5秒后自动移除通知\n    setTimeout(() => {\n      if (notice.parentNode) {\n        notice.remove();\n      }\n    }, 5000);\n\n    // 自动尝试翻页\n    try {\n      const nextButton = findNextPageButton();\n      if (nextButton) {\n        // 安全增加页数\n        const reader = safeGetRhythmReader();\n        reader.pagesRead = (reader.pagesRead || 0) + 1;\n        nextButton.click();\n\n        // 延迟后提示用户重新启动阅读\n        setTimeout(() => {\n          showMessage(\"页面已翻至下一页，点击\\\"开始阅读\\\"继续\", 5000);\n        }, 1000);\n      }\n    } catch (err) {\n      console.error(\"翻页失败:\", err);\n    }\n  };\n\n  // 检查元素是否在视口中\n  const isInViewport = function (element) {\n    const rect = element.getBoundingClientRect();\n    return rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth);\n  };\n\n  // 更新显示\n  const updateDisplay = function () {\n    charElements.forEach((span, index) => {\n      if (index === currentIndex) {\n        span.style.color = 'green';\n        span.style.fontWeight = 'bold';\n      } else if (readIndices.has(index)) {\n        span.style.color = ''; // 恢复正常颜色\n      } else {\n        span.style.color = 'rgba(200,200,200,0.3)';\n      }\n    });\n  };\n\n  // 下一个字符\n  const nextChar = function () {\n    // 安全检查活动状态\n    if (!safeGetActive() || !charElements.length) return;\n    readIndices.add(currentIndex);\n    currentIndex++;\n    if (currentIndex >= charElements.length) {\n      // 停止当前阅读\n      safeClearInterval();\n\n      // 显示页面读完提示\n      showPageCompleteNotification();\n      return;\n    }\n    updateDisplay();\n\n    // 确保当前字符可见\n    const currentChar = charElements[currentIndex];\n    if (currentChar && !isInViewport(currentChar)) {\n      currentChar.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center'\n      });\n    }\n  };\n\n  // 开始阅读功能\n  const startReading = function () {\n    console.log(\"启动节奏阅读...\");\n\n    // 清理之前的实例\n    cleanup();\n\n    // 查找内容容器\n    const container = document.querySelector('.pdf-content') || document.querySelector('[class*=\"pdf\"]') || document.querySelector('article') || document.querySelector('main') || document.body;\n\n    // 查找文本节点\n    const textNodes = [];\n    const findText = function (element) {\n      for (let i = 0; i < element.childNodes.length; i++) {\n        const node = element.childNodes[i];\n        if (node.nodeType === 3 && node.nodeValue.trim() !== '') {\n          textNodes.push(node);\n        } else if (node.nodeType === 1 && !['SCRIPT', 'STYLE', 'BUTTON', 'INPUT', 'SELECT', 'NOSCRIPT'].includes(node.tagName)) {\n          findText(node);\n        }\n      }\n    };\n    findText(container);\n    if (textNodes.length === 0) {\n      showMessage(\"错误: 未找到文本内容\");\n      return;\n    }\n\n    // 处理文本节点\n    try {\n      textNodes.forEach(node => {\n        if (!node.nodeValue || !node.parentNode) return;\n        const text = node.nodeValue;\n        const fragment = document.createDocumentFragment();\n        for (let i = 0; i < text.length; i++) {\n          const span = document.createElement('span');\n          span.textContent = text[i];\n          span.className = 'rhythm-char';\n          span.dataset.index = charElements.length;\n          fragment.appendChild(span);\n          charElements.push(span);\n        }\n        node.parentNode.replaceChild(fragment, node);\n      });\n    } catch (e) {\n      console.error(\"处理文本失败:\", e);\n      showMessage(\"生成节奏阅读效果失败\");\n      return;\n    }\n    if (charElements.length === 0) {\n      showMessage(\"未找到可读内容\");\n      return;\n    }\n\n    // 安全设置活动状态\n    safeSetActive(true);\n    currentIndex = 0;\n    updateDisplay();\n\n    // 安全设置定时器\n    const reader = safeGetRhythmReader();\n    safeSetInterval(nextChar, reader.speed);\n\n    // 创建控制面板\n    createControlPanel();\n  };\n\n  // 创建控制面板\n  const createControlPanel = function () {\n    // 检查是否已存在\n    let existingPanel = document.getElementById('rhythm-speed-controller');\n    if (existingPanel) existingPanel.remove();\n\n    // 创建容器\n    const container = document.createElement('div');\n    container.id = 'rhythm-speed-controller';\n    container.style.cssText = `\n      position: fixed;\n      top: 10px;\n      right: 10px;\n      background: rgba(255,255,255,0.9);\n      padding: 10px;\n      border-radius: 5px;\n      box-shadow: 0 2px 8px rgba(0,0,0,0.2);\n      z-index: 9999999;\n      display: flex;\n      flex-direction: column;\n      font-family: Arial, sans-serif;\n    `;\n\n    // 标题\n    const title = document.createElement('div');\n    title.textContent = '节奏阅读控制';\n    title.style.cssText = `\n      font-weight: bold;\n      margin-bottom: 8px;\n      text-align: center;\n    `;\n    container.appendChild(title);\n\n    // 安全获取速度\n    const reader = safeGetRhythmReader();\n\n    // 速度显示\n    const speedDisplay = document.createElement('div');\n    speedDisplay.textContent = `速度: ${reader.speed}ms`;\n    speedDisplay.id = 'rhythm-speed-display';\n    speedDisplay.style.cssText = `\n      margin-bottom: 8px;\n      text-align: center;\n      font-size: 14px;\n    `;\n    container.appendChild(speedDisplay);\n\n    // 速度滑块\n    const slider = document.createElement('input');\n    slider.type = 'range';\n    slider.min = minSpeed.toString();\n    slider.max = maxSpeed.toString();\n    slider.step = speedStep.toString();\n    slider.value = reader.speed.toString();\n    slider.style.width = '100%';\n    slider.oninput = function () {\n      try {\n        const newSpeed = parseInt(this.value);\n        // 安全更新速度\n        const reader = safeGetRhythmReader();\n        reader.speed = newSpeed;\n        speedDisplay.textContent = `速度: ${newSpeed}ms`;\n\n        // 安全重置定时器\n        if (reader.intervalId) {\n          safeClearInterval();\n          safeSetInterval(nextChar, newSpeed);\n        }\n      } catch (err) {\n        console.error(\"速度调整失败:\", err);\n      }\n    };\n    container.appendChild(slider);\n\n    // 按钮容器\n    const buttonContainer = document.createElement('div');\n    buttonContainer.style.cssText = `\n      display: flex;\n      justify-content: space-between;\n      margin-top: 8px;\n    `;\n\n    // 暂停/继续按钮\n    const pauseButton = document.createElement('button');\n    pauseButton.textContent = '暂停';\n    pauseButton.style.cssText = `\n      flex: 1;\n      margin-right: 5px;\n      padding: 5px;\n      cursor: pointer;\n    `;\n    pauseButton.onclick = function () {\n      try {\n        const reader = safeGetRhythmReader();\n        if (reader.intervalId) {\n          safeClearInterval();\n          this.textContent = '继续';\n        } else {\n          safeSetInterval(nextChar, reader.speed);\n          this.textContent = '暂停';\n        }\n      } catch (err) {\n        console.error(\"暂停/继续失败:\", err);\n      }\n    };\n    buttonContainer.appendChild(pauseButton);\n\n    // 停止按钮\n    const stopButton = document.createElement('button');\n    stopButton.textContent = '停止';\n    stopButton.style.cssText = `\n      flex: 1;\n      margin-left: 5px;\n      padding: 5px;\n      cursor: pointer;\n    `;\n    stopButton.onclick = cleanup;\n    buttonContainer.appendChild(stopButton);\n    container.appendChild(buttonContainer);\n    document.body.appendChild(container);\n  };\n\n  // 添加启动按钮\n  const addStartButton = function () {\n    // 检查是否已存在\n    let existingButton = document.getElementById('rhythm-start-button');\n    if (existingButton) existingButton.remove();\n    const button = document.createElement('button');\n    button.id = 'rhythm-start-button';\n    button.textContent = '开始节奏阅读';\n    button.style.cssText = `\n      position: fixed;\n      top: 10px;\n      right: 10px;\n      z-index: 999999;\n      background: #4CAF50;\n      color: white;\n      padding: 8px 12px;\n      border: none;\n      border-radius: 4px;\n      font-size: 14px;\n      cursor: pointer;\n      box-shadow: 0 2px 5px rgba(0,0,0,0.2);\n    `;\n    button.onclick = startReading;\n    document.body.appendChild(button);\n  };\n\n  // 初始化\n  const initialize = function () {\n    console.log(\"初始化节奏阅读组件...\");\n\n    // 确保全局对象初始化\n    safeGetRhythmReader();\n\n    // 页面加载后添加启动按钮\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', addStartButton);\n    } else {\n      addStartButton();\n    }\n\n    // 提供API接口\n    window.rhythmReader.start = startReading;\n    window.rhythmReader.stop = cleanup;\n    window.rhythmReader.updateSpeed = function (newSpeed) {\n      try {\n        const reader = safeGetRhythmReader();\n        reader.speed = newSpeed;\n\n        // 更新速度显示\n        const display = document.getElementById('rhythm-speed-display');\n        if (display) display.textContent = `速度: ${newSpeed}ms`;\n\n        // 更新定时器\n        if (reader.intervalId) {\n          safeClearInterval();\n          safeSetInterval(nextChar, newSpeed);\n        }\n        return true;\n      } catch (err) {\n        console.error(\"更新速度失败:\", err);\n        return false;\n      }\n    };\n  };\n\n  // 执行初始化\n  initialize();\n  console.log(\"节奏阅读模式初始化完成 - 安全手动翻页版\");\n})();\n\n// 定义一个全局函数用于从应用代码中启动节奏阅读\nwindow.activateRhythmReadingMode = function () {\n  console.log(\"尝试从应用代码中启动节奏阅读模式\");\n  if (window.rhythmReader) {\n    if (window.rhythmReader.active) {\n      console.log(\"节奏阅读模式已经在运行\");\n    } else {\n      window.rhythmReader.start();\n    }\n  } else {\n    console.error(\"节奏阅读模式未初始化\");\n    alert(\"无法启动节奏阅读模式：组件未初始化\");\n  }\n};\n\n// 更新初始化函数\nconst initializeRhythmReading = () => {\n  // 不再自动初始化，而是等待用户选择\n  console.log(\"节奏阅读模式准备就绪，等待用户选择\");\n};\n\n// 更新启动函数\nconst startRhythmReading = () => {\n  if (window.rhythmReader && typeof window.rhythmReader.start === 'function') {\n    window.rhythmReader.start();\n  }\n};\n\n// 节奏阅读模式 - 自动翻页版\n(function () {\n  console.log(\"节奏阅读模式 - 自动翻页版初始化\");\n\n  // 状态变量\n  let isActive = false;\n  let intervalId = null;\n  let charElements = [];\n  let currentIndex = 0;\n  let readIndices = new Set();\n\n  // 进度监控 - 记录已读页数\n  let pagesRead = 0;\n\n  // 查找下一页按钮的帮助函数\n  const findNextPageButton = function () {\n    // 常见的选择器\n    const selectors = ['.next-page', '.next', '#next', '[aria-label=\"下一页\"]', '[aria-label=\"Next\"]', 'button:contains(\"下一页\")', 'button:contains(\"Next\")'];\n    for (const selector of selectors) {\n      try {\n        const buttons = document.querySelectorAll(selector);\n        for (const btn of buttons) {\n          if (btn.offsetParent !== null) {\n            // 确保按钮可见\n            return btn;\n          }\n        }\n      } catch (e) {}\n    }\n\n    // 如果通过选择器找不到，尝试通过文本内容查找\n    const allButtons = document.querySelectorAll('button, a, div[role=\"button\"]');\n    for (const btn of allButtons) {\n      const text = (btn.textContent || '').trim().toLowerCase();\n      if (text === '下一页' || text === 'next' || text === '>' || text === '→') {\n        if (btn.offsetParent !== null) {\n          return btn;\n        }\n      }\n    }\n    return null;\n  };\n\n  // 自动翻页函数\n  const autoTurnPage = function () {\n    console.log(\"尝试自动翻页...\");\n\n    // 找到下一页按钮\n    const nextButton = findNextPageButton();\n    if (!nextButton) {\n      console.log(\"未找到下一页按钮\");\n      showMessage(\"已读完当前页，但未找到下一页按钮\");\n      return;\n    }\n\n    // 暂停当前阅读\n    if (intervalId) {\n      clearInterval(intervalId);\n      intervalId = null;\n    }\n\n    // 增加已读页数\n    pagesRead++;\n    console.log(`已读完第 ${pagesRead} 页，点击下一页按钮`);\n\n    // 模拟点击下一页按钮\n    nextButton.click();\n\n    // 监听DOM变化，等待新页面加载\n    const observer = new MutationObserver(mutations => {\n      // 检查新内容是否已加载\n      const contentAdded = mutations.some(mutation => mutation.type === 'childList' && mutation.addedNodes.length > 0);\n      if (contentAdded) {\n        console.log(\"检测到新内容已加载\");\n        // 停止观察\n        observer.disconnect();\n\n        // 延迟一下，确保新页面完全加载\n        setTimeout(() => {\n          // 重新启动节奏阅读模式\n          console.log(\"在新页面上重新启动节奏阅读模式\");\n          startReading();\n        }, 800);\n      }\n    });\n\n    // 开始观察文档变化\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  };\n\n  // 清理函数\n  const cleanup = function () {\n    console.log(\"执行清理...\");\n    if (intervalId) {\n      clearInterval(intervalId);\n      intervalId = null;\n    }\n    try {\n      document.querySelectorAll('.rhythm-char').forEach(span => {\n        if (span.parentNode) {\n          span.parentNode.replaceChild(document.createTextNode(span.textContent), span);\n        }\n      });\n    } catch (e) {\n      console.error(\"清理文本失败:\", e);\n    }\n    charElements = [];\n    currentIndex = 0;\n    readIndices = new Set();\n    isActive = false;\n    pagesRead = 0;\n    const button = document.getElementById('rhythm-control-button');\n    if (button) button.remove();\n  };\n\n  // 简单通知\n  const showMessage = function (message) {\n    console.log(message);\n    alert(message);\n  };\n\n  // 添加控制按钮\n  const addButton = function () {\n    const existingButton = document.getElementById('rhythm-control-button');\n    if (existingButton) existingButton.remove();\n    const button = document.createElement('button');\n    button.id = 'rhythm-control-button';\n    button.textContent = '暂停节奏阅读';\n    button.style.cssText = `\n      position: fixed;\n      bottom: 20px;\n      right: 20px;\n      z-index: 999999;\n      background: #4CAF50;\n      color: white;\n      padding: 10px 15px;\n      border: none;\n      border-radius: 5px;\n      font-size: 16px;\n      font-weight: bold;\n      cursor: pointer;\n    `;\n    button.onclick = function () {\n      if (intervalId) {\n        // 暂停\n        if (intervalId) {\n          clearInterval(intervalId);\n          intervalId = null;\n        }\n        button.textContent = '继续节奏阅读';\n        button.style.background = '#2196F3';\n      } else {\n        // 继续\n        intervalId = setInterval(nextChar, 300);\n        button.textContent = '暂停节奏阅读';\n        button.style.background = '#4CAF50';\n      }\n    };\n    document.body.appendChild(button);\n    return button;\n  };\n\n  // 启动阅读\n  const startReading = function () {\n    console.log(\"启动节奏阅读...\");\n\n    // 清理之前的实例\n    cleanup();\n\n    // 查找内容容器\n    const container = document.querySelector('.pdf-content') || document.querySelector('[class*=\"pdf\"]') || document.querySelector('article') || document.querySelector('main') || document.body;\n\n    // 查找所有文本节点\n    const textNodes = [];\n    const findText = function (element) {\n      for (let i = 0; i < element.childNodes.length; i++) {\n        const node = element.childNodes[i];\n        if (node.nodeType === 3 && node.nodeValue.trim() !== '') {\n          textNodes.push(node);\n        } else if (node.nodeType === 1 && !['SCRIPT', 'STYLE', 'BUTTON', 'INPUT', 'SELECT', 'NOSCRIPT'].includes(node.tagName)) {\n          findText(node);\n        }\n      }\n    };\n    findText(container);\n    if (textNodes.length === 0) {\n      showMessage(\"错误: 未找到文本内容\");\n      return;\n    }\n\n    // 处理文本节点\n    try {\n      textNodes.forEach(node => {\n        if (!node.nodeValue || !node.parentNode) return;\n        const text = node.nodeValue;\n        const fragment = document.createDocumentFragment();\n        for (let i = 0; i < text.length; i++) {\n          const span = document.createElement('span');\n          span.textContent = text[i];\n          span.className = 'rhythm-char';\n          span.dataset.index = charElements.length;\n          fragment.appendChild(span);\n          charElements.push(span);\n        }\n        node.parentNode.replaceChild(fragment, node);\n      });\n    } catch (e) {\n      console.error(\"处理文本失败:\", e);\n      showMessage(\"生成节奏阅读效果失败\");\n      return;\n    }\n    if (charElements.length === 0) {\n      showMessage(\"未找到可读内容\");\n      return;\n    }\n\n    // 激活状态\n    isActive = true;\n    currentIndex = 0;\n\n    // 更新显示\n    updateDisplay();\n\n    // 开始阅读\n    intervalId = setInterval(nextChar, 300);\n    addButton();\n  };\n\n  // 更新显示\n  const updateDisplay = function () {\n    charElements.forEach((span, index) => {\n      if (index === currentIndex) {\n        span.style.color = 'green';\n        span.style.fontWeight = 'bold';\n      } else if (readIndices.has(index)) {\n        span.style.color = 'white';\n      } else {\n        span.style.color = 'rgba(200,200,200,0.3)';\n      }\n    });\n  };\n\n  // 下一个字符\n  const nextChar = function () {\n    if (!isActive || !charElements.length) return;\n    readIndices.add(currentIndex);\n    currentIndex++;\n    if (currentIndex >= charElements.length) {\n      // 当前页已读完\n      if (intervalId) {\n        clearInterval(intervalId);\n        intervalId = null;\n      }\n      console.log(\"当前页已读完，尝试翻页\");\n      autoTurnPage(); // 尝试自动翻页\n      return;\n    }\n    updateDisplay();\n  };\n\n  // 处理模式切换\n  const handleModeChange = function (mode) {\n    console.log(\"模式更改为:\", mode);\n    if (mode !== 'rhythm' && mode !== 'rhythmReading' && isActive) {\n      cleanup();\n    }\n  };\n\n  // 重写模式切换函数\n  const originalFunction = window.readingModeChanged;\n  window.readingModeChanged = function (mode) {\n    if (typeof originalFunction === 'function') {\n      try {\n        originalFunction(mode);\n      } catch (e) {}\n    }\n    handleModeChange(mode);\n  };\n\n  // 初始化\n  const initialize = function () {\n    console.log(\"初始化节奏阅读组件...\");\n  };\n\n  // 等待DOM加载完成\n  document.addEventListener('DOMContentLoaded', initialize);\n\n  // 暴露全局API\n  window.manualStartRhythmReading = startReading;\n  console.log(\"节奏阅读模式初始化完成 - 自动翻页版\");\n})();\nconst App = () => {\n  _s();\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  const [isTableOfContents, setIsTableOfContents] = useState(false);\n\n  // 实现缺失的函数\n  // 应用深色背景\n  const applyDarkBackground = () => {\n    document.body.classList.add('dark-background');\n\n    // 添加必要的CSS样式\n    if (!document.getElementById('dark-background-style')) {\n      const style = document.createElement('style');\n      style.id = 'dark-background-style';\n      style.textContent = `\n        .dark-background {\n          background-color: #000 !important;\n        }\n        .dark-background .sidebar {\n          background: linear-gradient(145deg, #4834d4, #341f9e) !important;\n        }\n        .dark-background .page-content {\n          background-color: #000 !important;\n        }\n        .dark-background .main-content {\n          background-color: #000 !important;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 恢复正常背景\n  const restoreDarkBackground = () => {\n    document.body.classList.remove('dark-background');\n  };\n\n  // 添加裸眼3D样式\n  const addNakedEye3DStyles = () => {\n    if (!document.getElementById('naked-eye-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'naked-eye-3d-style';\n      style.textContent = `\n        .naked-eye-3d-container {\n          position: relative;\n          perspective: 800px;\n          width: 100%;\n        }\n        \n        .naked-eye-3d-text {\n          display: inline-block;\n          animation: float 3s ease-in-out infinite;\n          text-shadow: 0 0 5px rgba(255,255,255,0.3);\n          padding: 0 4px;\n          color: white;\n          filter: drop-shadow(0 0 5px rgba(120, 220, 255, 0.6));\n        }\n        \n        @keyframes float {\n          0% { transform: translateZ(0px); }\n          50% { transform: translateZ(20px); }\n          100% { transform: translateZ(0px); }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 添加舒适3D样式\n  const addComfortable3DStyles = () => {\n    if (!document.getElementById('comfortable-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'comfortable-3d-style';\n      style.textContent = `\n        .emboss-3d-text {\n          color: #fff;\n          text-shadow: \n            1px 1px 1px rgba(0,0,0,0.5),\n            -1px -1px 1px rgba(255,255,255,0.5);\n          letter-spacing: 1.5px;\n          font-weight: 500;\n        }\n        \n        .float-3d-text {\n          display: inline-block;\n          transform-style: preserve-3d;\n          transform: perspective(500px) translateZ(10px);\n          text-shadow: 0 2px 5px rgba(0,0,0,0.5);\n        }\n        \n        .gradient-3d-text {\n          display: inline-block;\n          background: linear-gradient(to bottom, #fff, #aaa);\n          -webkit-background-clip: text;\n          -webkit-text-fill-color: transparent;\n          text-shadow: 0 2px 4px rgba(0,0,0,0.3);\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 添加闪读样式\n  const addFlashReadingStyles = () => {\n    if (!document.getElementById('flash-reading-style')) {\n      const style = document.createElement('style');\n      style.id = 'flash-reading-style';\n      style.textContent = `\n        .flash-reading-container {\n          position: relative;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          z-index: 1000;\n          padding: 20px;\n        }\n        \n        .flash-reading-display-wrapper {\n          position: relative;\n          margin: 40px 0;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        \n        .flash-reading-display {\n          font-size: 36px;\n          font-weight: bold;\n          text-align: center;\n          color: white;\n          min-height: 80px;\n          max-width: 90%;\n          padding: 20px 40px;\n          position: relative; /* 允许绝对定位的覆盖层 */\n          z-index: 2;\n        }\n        \n        .flash-reading-cover {\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(128, 128, 128, 0.6); /* 灰色遮罩 */\n          border-radius: 8px;\n          z-index: 1; /* 确保在文本后面 */\n        }\n        \n        .flash-reading-controls {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          gap: 20px;\n          margin-bottom: 20px;\n          width: 100%;\n        }\n        \n        .flash-reading-buttons {\n          display: flex;\n          gap: 10px;\n          flex-wrap: wrap;\n          justify-content: center;\n        }\n        \n        .flash-reading-speed {\n          display: flex;\n          align-items: center;\n          color: white;\n          width: 80%;\n          max-width: 400px;\n          gap: 10px;\n        }\n        \n        .flash-reading-slider {\n          flex: 1;\n          height: 8px;\n          appearance: none;\n          background: #555;\n          border-radius: 4px;\n          outline: none;\n        }\n        \n        .flash-reading-slider::-webkit-slider-thumb {\n          appearance: none;\n          width: 20px;\n          height: 20px;\n          border-radius: 50%;\n          background: #6c5ce7;\n          cursor: pointer;\n        }\n        \n        .flash-reading-btn {\n          padding: 10px 20px;\n          border: none;\n          border-radius: 4px;\n          background-color: #6c5ce7;\n          color: white;\n          font-size: 16px;\n          cursor: pointer;\n          transition: background-color 0.2s;\n        }\n        \n        .flash-reading-btn:hover {\n          background-color: #5344c0;\n        }\n        \n        .flash-reading-btn:disabled {\n          background-color: #aaa;\n          cursor: not-allowed;\n        }\n        \n        .flash-reading-progress {\n          color: white;\n          font-size: 14px;\n          margin-top: 10px;\n        }\n        .flash-reading-speed-note {\n          font-size: 12px;\n          color: #ccc;\n          margin-left: 5px;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 初始化闪读模式\n  const initializeFlashReading = () => {\n    // 添加样式\n    addFlashReadingStyles();\n    const sentences = window.flashReadingSentences;\n    if (!sentences || !Array.isArray(sentences) || sentences.length === 0) {\n      console.error('闪读模式: 未找到句子数据');\n      return;\n    }\n\n    // 获取全局UI元素\n    const display = document.getElementById('flash-reading-display');\n    const speedSlider = document.getElementById('flash-reading-speed');\n    const speedValue = document.getElementById('flash-reading-speed-value');\n    const playButton = document.getElementById('flash-reading-play');\n    const pauseButton = document.getElementById('flash-reading-pause');\n    const stopButton = document.getElementById('flash-reading-stop');\n    const prevButton = document.getElementById('flash-reading-prev-sentence');\n    const nextButton = document.getElementById('flash-reading-next-sentence');\n    const progress = document.getElementById('flash-reading-progress');\n    const cover = document.querySelector('.flash-reading-cover');\n    if (!display || !speedSlider || !speedValue || !playButton || !pauseButton || !stopButton || !prevButton || !nextButton || !progress || !cover) {\n      console.error('闪读模式: 未找到UI元素');\n      return;\n    }\n\n    // 创建闪读控制器\n    window.flashReader = {\n      sentences: sentences,\n      currentIndex: 0,\n      interval: null,\n      speed: parseInt(speedSlider.value),\n      isPlaying: false,\n      // 开始闪读\n      start() {\n        if (this.interval) {\n          clearInterval(this.interval);\n        }\n        this.isPlaying = true;\n        playButton.disabled = true;\n        pauseButton.disabled = false;\n        progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n\n        // 显示当前句子\n        this.displayCurrentSentence();\n\n        // 设置闪读间隔\n        this.interval = setInterval(() => {\n          this.currentIndex++;\n          if (this.currentIndex >= this.sentences.length) {\n            this.stop();\n            display.textContent = '阅读完成';\n            return;\n          }\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }, this.speed);\n      },\n      // 显示当前句子\n      displayCurrentSentence() {\n        if (this.currentIndex < this.sentences.length) {\n          const currentSentence = this.sentences[this.currentIndex];\n          display.textContent = currentSentence;\n          display.style.color = 'white'; // 确保文本为白色\n\n          // 调整背景以适应内容\n          setTimeout(() => {\n            const displayRect = display.getBoundingClientRect();\n            // 确保覆盖层完全包裹文本\n            cover.style.width = `${displayRect.width}px`;\n            cover.style.height = `${displayRect.height}px`;\n          }, 10);\n        }\n      },\n      // 暂停闪读\n      pause() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n      },\n      // 停止闪读\n      stop() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        this.currentIndex = 0;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n        display.textContent = '准备开始';\n        progress.textContent = `进度：0 / ${this.sentences.length}`; // 重置进度\n      },\n      // 更新速度\n      updateSpeed(newSpeed) {\n        this.speed = newSpeed;\n        speedValue.textContent = `${newSpeed} ms`;\n\n        // 保存速度设置到本地存储\n        localStorage.setItem('flash-reading-speed', newSpeed);\n\n        // 如果正在播放，重新开始以应用新速度\n        if (this.isPlaying) {\n          clearInterval(this.interval);\n          this.start(); // 直接调用start方法重新开始\n        }\n      },\n      // 返回上一句\n      prevSentence() {\n        if (this.currentIndex > 0) {\n          this.currentIndex--;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n      // 跳到下一句\n      nextSentence() {\n        if (this.currentIndex < this.sentences.length - 1) {\n          this.currentIndex++;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n      // 清理资源\n      cleanup() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        this.currentIndex = 0;\n      }\n    };\n\n    // 添加事件监听器\n    playButton.addEventListener('click', () => {\n      window.flashReader.start();\n    });\n    pauseButton.addEventListener('click', () => {\n      window.flashReader.pause();\n    });\n    stopButton.addEventListener('click', () => {\n      window.flashReader.stop();\n    });\n    speedSlider.addEventListener('input', e => {\n      const newSpeed = parseInt(e.target.value);\n      window.flashReader.updateSpeed(newSpeed);\n    });\n    prevButton.addEventListener('click', () => {\n      window.flashReader.prevSentence();\n    });\n    nextButton.addEventListener('click', () => {\n      window.flashReader.nextSentence();\n    });\n\n    // 初始化\n    const savedSpeed = localStorage.getItem('flash-reading-speed');\n    const initialSpeed = savedSpeed ? parseInt(savedSpeed) : 1000;\n    speedSlider.value = initialSpeed;\n    window.flashReader.updateSpeed(initialSpeed);\n    console.log('闪读模式已初始化，共 ' + sentences.length + ' 个句子');\n  };\n\n  // 创建闪读内容\n  const createFlashReadingContent = text => {\n    return `<div class=\"flash-reading-content\">\n      <p>${text}</p>\n    </div>`;\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 格式化文本用于鼠标跟随\n  const formatTextForMouseFollow = text => {\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个单词添加span，以便于添加高亮效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"follow-word\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\" data-follow=\"true\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用静态高亮\n  const applyStaticHighlight = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为单词随机添加颜色高亮\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      let lastColor = null;\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n          return;\n        }\n\n        // 随机决定是否高亮和使用哪种颜色\n        if (Math.random() < 0.7) {\n          let color;\n          if (lastColor === 'red') {\n            color = 'blue';\n          } else if (lastColor === 'blue') {\n            color = 'red';\n          } else {\n            color = Math.random() < 0.5 ? 'red' : 'blue';\n          }\n          lastColor = color;\n          processedParagraph += `<span class=\"highlight-word ${color}\">${word}</span>`;\n        } else {\n          processedParagraph += word;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用裸眼3D效果\n  const applyNakedEye3dEffect = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content naked-eye-3d-container\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个词添加3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"naked-eye-3d-text\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用舒适3D效果\n  const applyComfortable3dEffect = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个词随机应用不同的3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          processedParagraph += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 初始化裸眼3D\n  const initializeNakedEye3D = () => {\n    // 为裸眼3D文本添加动画\n    const textElements = document.querySelectorAll('.naked-eye-3d-text');\n    textElements.forEach((element, index) => {\n      // 添加随机延迟，使动画错开\n      const delay = Math.random() * 2;\n      element.style.animationDelay = `${delay}s`;\n    });\n  };\n\n  // 添加鼠标跟随监听器\n  const addMouseFollowListeners = () => {\n    // 获取内容容器\n    const contentArea = document.querySelector('.mouse-follow-content');\n    if (!contentArea) {\n      console.error('未找到鼠标跟随内容区域');\n      return;\n    }\n\n    // 上一个高亮的行\n    let lastHighlightedLine = null;\n\n    // 监听鼠标移动 - 精确的行检测\n    const mouseMoveHandler = e => {\n      // 获取鼠标位置\n      const mouseY = e.clientY;\n\n      // 获取所有行\n      const allLines = contentArea.querySelectorAll('.follow-line');\n      let foundLine = null;\n      let minDistance = Infinity;\n\n      // 寻找鼠标所在的精确行\n      allLines.forEach(line => {\n        const rect = line.getBoundingClientRect();\n        const lineCenter = rect.top + rect.height / 2;\n        const distance = Math.abs(mouseY - lineCenter);\n\n        // 如果鼠标在行范围内，计算到行中心的距离\n        if (mouseY >= rect.top && mouseY <= rect.bottom) {\n          if (distance < minDistance) {\n            minDistance = distance;\n            foundLine = line;\n          }\n        }\n      });\n\n      // 更新高亮状态\n      if (lastHighlightedLine && lastHighlightedLine !== foundLine) {\n        // 移除旧高亮\n        lastHighlightedLine.classList.remove('highlighted');\n      }\n      if (foundLine) {\n        // 添加新高亮\n        foundLine.classList.add('highlighted');\n        lastHighlightedLine = foundLine;\n\n        // 调试输出\n        console.log('当前高亮行:', foundLine.textContent.substring(0, 30) + '...');\n      } else if (lastHighlightedLine) {\n        // 如果没有找到新行，且有上一个高亮行，移除它\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n\n    // 鼠标离开处理\n    const mouseLeaveHandler = () => {\n      // 清除当前高亮\n      if (lastHighlightedLine) {\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n\n    // 存储处理函数引用\n    window.eventTracker = window.eventTracker || {\n      mouseFollowHandlers: []\n    };\n    window.eventTracker.mouseFollowHandlers.push({\n      element: contentArea,\n      event: 'mousemove',\n      handler: mouseMoveHandler\n    }, {\n      element: contentArea,\n      event: 'mouseleave',\n      handler: mouseLeaveHandler\n    });\n\n    // 添加事件监听器\n    contentArea.addEventListener('mousemove', mouseMoveHandler);\n    contentArea.addEventListener('mouseleave', mouseLeaveHandler);\n    console.log('改进的鼠标跟随监听器已初始化');\n  };\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n  }, []);\n\n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async file => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n\n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n\n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n\n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({\n        scale: 1.0\n      });\n\n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async textContent => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n\n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n\n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n\n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    const lines = [...lineMap.values()];\n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    return hasTocKeywords || hasPageNumberPatterns || shortLineRatio > 0.7 && numberLineRatio > 0.3;\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n\n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n\n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n\n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n\n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = text => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    return result;\n  };\n\n  // 处理内容页面 - 按句子划分段落\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n\n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 按句子划分内容（句号、问号、感叹号等作为分隔符）\n      const sentences = splitIntoSentences(extractedText);\n\n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch (mode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          // 使用ADHD友好的静态高亮处理\n          console.log('应用ADHD友好的静态高亮模式');\n          processedContent = formatSimpleHighlightedText(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'rhythm':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          processedContent = createFlashReadingContentFromSentences(sentences);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n      setContent(processedContent);\n\n      // 如果是静态高亮模式，添加延时验证检查\n      if (mode === 'static') {\n        setTimeout(() => {\n          const contentArea = document.querySelector('.adhd-highlight-mode');\n          if (contentArea) {\n            console.log('静态高亮模式元素存在');\n            const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n            console.log(`找到 ${paragraphs.length} 个段落`);\n\n            // 检查样式是否正确应用\n            if (paragraphs.length > 0) {\n              const firstPara = paragraphs[0];\n              const styles = window.getComputedStyle(firstPara);\n              console.log('段落应用的样式:', {\n                color: styles.color,\n                backgroundColor: styles.backgroundColor,\n                fontFamily: styles.fontFamily,\n                fontSize: styles.fontSize\n              });\n            }\n          }\n        }, 200);\n      }\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 将文本分割成句子\n  const splitIntoSentences = text => {\n    // 匹配句号、问号、感叹号后跟空格或结束的模式\n    // 支持中英文标点符号\n    const sentenceRegex = /([.!?。！？；;]+\\s*)/g;\n\n    // 分割文本成句子\n    const sentences = [];\n    let lastIndex = 0;\n    let match;\n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const sentence = text.substring(lastIndex, endIndex).trim();\n\n      // 避免添加空句子\n      if (sentence) {\n        sentences.push(sentence);\n      }\n      lastIndex = endIndex;\n    }\n\n    // 处理最后一部分（如果没有以句号等结尾）\n    if (lastIndex < text.length) {\n      const lastSentence = text.substring(lastIndex).trim();\n      if (lastSentence) {\n        sentences.push(lastSentence);\n      }\n    }\n    return sentences;\n  };\n\n  // 专门为闪读模式分割文本，以任意标点符号为分隔点\n  const splitIntoFlashReadingSegments = text => {\n    // 匹配任意标点符号包括中英文标点\n    const sentenceRegex = /([,.!?:;，。！？：；、]+\\s*)/g;\n\n    // 分割文本成短句\n    const segments = [];\n    let lastIndex = 0;\n    let match;\n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const segment = text.substring(lastIndex, endIndex).trim();\n\n      // 避免添加空段落\n      if (segment) {\n        segments.push(segment);\n      }\n      lastIndex = endIndex;\n    }\n\n    // 处理最后一部分（如果没有以标点符号结尾）\n    if (lastIndex < text.length) {\n      const lastSegment = text.substring(lastIndex).trim();\n      if (lastSegment) {\n        segments.push(lastSegment);\n      }\n    }\n    return segments;\n  };\n\n  // 格式化句子为HTML\n  const formatSentencesToHtml = sentences => {\n    let html = '<div class=\"pdf-content\">';\n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${sentence}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为句子应用静态高亮\n  const applyStaticHighlightToSentences = sentences => {\n    let html = '<div class=\"pdf-content adhd-content\">';\n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n\n      // 简单地为句子添加特定样式的class\n      html += `<p class=\"pdf-paragraph adhd-sentence\">${sentence}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为鼠标跟随模式格式化句子\n  const formatSentencesForMouseFollow = sentences => {\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    sentences.forEach((sentence, index) => {\n      if (sentence.trim() === '') return;\n\n      // 每个句子作为独立行，使用div而不是p标签\n      html += `<div class=\"follow-line\" data-line=\"${index}\" data-sentence=\"${sentence.substring(0, 20)}...\" style=\"color: inherit;\">${sentence}</div>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为舒适3D模式格式化句子\n  const applyComfortable3dEffectToSentences = sentences => {\n    let html = '<div class=\"pdf-content\">';\n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n\n      // 为每个词随机应用不同的3D效果\n      const words = sentence.split(/(\\s+)/);\n      let processedSentence = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedSentence += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          processedSentence += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedSentence}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为闪读模式创建内容\n  const createFlashReadingContentFromSentences = sentences => {\n    // 储存句子到全局变量，用于后续显示\n    window.flashReadingSentences = sentences;\n\n    // 返回闪读界面的HTML结构\n    return `\n      <div class=\"flash-reading-container\">\n        <div class=\"flash-reading-controls\">\n          <div class=\"flash-reading-buttons\">\n            <button id=\"flash-reading-prev-sentence\" class=\"flash-reading-btn\">上一句</button>\n            <button id=\"flash-reading-play\" class=\"flash-reading-btn\">开始</button>\n            <button id=\"flash-reading-pause\" class=\"flash-reading-btn\" disabled>暂停</button>\n            <button id=\"flash-reading-stop\" class=\"flash-reading-btn\">停止</button>\n            <button id=\"flash-reading-next-sentence\" class=\"flash-reading-btn\">下一句</button>\n          </div>\n          <div class=\"flash-reading-speed\">\n            <span>速度：</span>\n            <input type=\"range\" id=\"flash-reading-speed\" min=\"300\" max=\"1700\" step=\"50\" value=\"1000\" class=\"flash-reading-slider\">\n            <span id=\"flash-reading-speed-value\">1000 ms</span>\n            <span class=\"flash-reading-speed-note\">（数值越小，切换越快）</span>\n          </div>\n          <div class=\"flash-reading-progress\">\n            <span id=\"flash-reading-progress\">进度：0 / ${sentences.length}</span>\n          </div>\n        </div>\n        <div class=\"flash-reading-display-wrapper\">\n          <div class=\"flash-reading-cover\"></div> <!-- 这里是闪卡 -->\n          <div id=\"flash-reading-display\" class=\"flash-reading-display\">准备开始</div>\n        </div>\n      </div>`;\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async file => {\n    try {\n      const text = await file.text();\n\n      // 根据阅读模式选择不同的处理方式\n      let processedContent = '';\n      if (readingMode === 'flash-reading') {\n        // 闪读模式下使用特定的分割函数\n        const segments = splitIntoFlashReadingSegments(text);\n        processedContent = createFlashReadingContentFromSentences(segments);\n\n        // 初始化闪读模式\n        setTimeout(() => {\n          initializeFlashReading();\n        }, 100);\n      } else {\n        // 其他模式使用默认的分割方式\n        const sentences = splitIntoSentences(text);\n        switch (readingMode) {\n          case 'normal':\n            processedContent = formatSentencesToHtml(sentences);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlightToSentences(sentences);\n            break;\n          case 'follow-mouse':\n            processedContent = formatSentencesForMouseFollow(sentences);\n            break;\n          case 'comfortable-3d':\n            processedContent = applyComfortable3dEffectToSentences(sentences);\n            break;\n          default:\n            processedContent = formatSentencesToHtml(sentences);\n        }\n      }\n\n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n\n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setContent('<div class=\"error-message\">TXT文件处理失败</div>');\n    }\n  };\n\n  // 处理Markdown文件\n  const handleMarkdownFile = async file => {\n    try {\n      const text = await file.text();\n\n      // 使用marked库转换markdown为HTML\n      let html = '';\n      try {\n        if (window.marked) {\n          html = window.marked.parse(text);\n        } else {\n          // 如果没有marked库，简单地拆分为段落\n          html = `<div>${text.split(\"\\n\\n\").map(p => `<p>${p}</p>`).join(\"\")}</div>`;\n        }\n      } catch (parseError) {\n        console.error('Markdown解析错误:', parseError);\n        html = `<div>${text}</div>`;\n      }\n\n      // 提取纯文本内容\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = html;\n      const plainText = tempDiv.textContent || tempDiv.innerText || '';\n\n      // 分割文本为句子\n      const sentences = splitIntoSentences(plainText);\n\n      // 根据当前阅读模式处理内容\n      let processedContent = '';\n      switch (readingMode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlightToSentences(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          // 使用特定的闪读分割函数重新处理文本\n          const segments = splitIntoFlashReadingSegments(plainText);\n          processedContent = createFlashReadingContentFromSentences(segments);\n\n          // 初始化闪读模式\n          setTimeout(() => {\n            initializeFlashReading();\n          }, 100);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n\n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n\n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('Markdown处理错误:', error);\n      setContent('<div class=\"error-message\">Markdown文件处理失败</div>');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async e => {\n    const uploadedFile = e.target.files[0];\n    if (!uploadedFile) return;\n    setLoading(true);\n    setFileName(uploadedFile.name);\n    try {\n      if (uploadedFile.type === 'application/pdf') {\n        await handlePdfFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/plain' || uploadedFile.name.endsWith('.txt')) {\n        await handleTxtFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/markdown' || uploadedFile.name.endsWith('.md')) {\n        await handleMarkdownFile(uploadedFile);\n      } else {\n        setContent('<div class=\"error-message\">不支持的文件格式</div>');\n      }\n    } catch (error) {\n      console.error('处理文件时出错:', error);\n      setContent('<div class=\"error-message\">处理文件时出错</div>');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = container => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n\n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n\n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n\n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width / 2,\n            // 水平中心\n            y: rect.bottom,\n            // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n\n    // 过滤无效位置并排序\n    return positions.filter(p => p.char.trim() !== '').sort((a, b) => {\n      // 先按行排序，同行按列排序\n      const yDiff = a.y - b.y;\n      if (Math.abs(yDiff) > 5) {\n        // 5px阈值判断是否同一行\n        return yDiff;\n      }\n      return a.x - b.x;\n    });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n\n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - containerVisibleHeight / 2;\n\n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - window.innerHeight / 2;\n\n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n\n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n\n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length ||\n      // 已到末尾\n      positions[nextIndex].char.trim() === '' ||\n      // 下一个是空白\n      positions[nextIndex].y > charPosition.y + 5) {\n        // 下一个在新行\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n\n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n\n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || current.y > prev.y + 5) {\n        // 有明显换行\n        break;\n      }\n      start--;\n    }\n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n\n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n\n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (window.autoReader.charPositions.length === 0) {\n      if (window.currentPage < window.totalPages) {\n        window.changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 重置索引到开头\n    window.autoReader.currentIndex = 0;\n\n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n\n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n\n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none';\n      highlight.style.zIndex = '998';\n      contentContainer.appendChild(highlight);\n    }\n\n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n\n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20;\n\n    // 尝试获取实际行高\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(window.autoReader.charPositions[i].y - window.autoReader.charPositions[i - 1].y);\n        if (yDiff > 5) {\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n\n    // 记录上次滚动的位置\n    let lastScrolledY = -1;\n    const scrollSafeZone = lineHeight * 2.5;\n\n    // 设置字符大小的估计值\n    let charWidth = 20;\n    let charHeight = lineHeight * 0.8;\n\n    // 尝试估计字符宽度\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        if (window.autoReader.charPositions[i].x !== window.autoReader.charPositions[i - 1].x) {\n          const xDiff = Math.abs(window.autoReader.charPositions[i].x - window.autoReader.charPositions[i - 1].x);\n          if (xDiff > 0 && xDiff < 50) {\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    window.autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (window.autoReader.currentIndex < window.autoReader.charPositions.length && ((_window$autoReader$ch = window.autoReader.charPositions[window.autoReader.currentIndex]) === null || _window$autoReader$ch === void 0 ? void 0 : _window$autoReader$ch.char.trim()) === '') {\n        var _window$autoReader$ch;\n        window.autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (window.autoReader.currentIndex >= window.autoReader.charPositions.length) {\n        if (window.currentPage < window.totalPages) {\n          window.changePage(1);\n          clearInterval(window.autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n      const pos = window.autoReader.charPositions[window.autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      if (cursor && highlight) {\n        const contentRect = contentContainer.getBoundingClientRect();\n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        highlight.style.left = `${relativeX - charWidth / 2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n\n        // 滚动处理\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          if (isContainerScrollable) {\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = relativeY;\n            }\n          } else {\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      window.autoReader.currentIndex++;\n    }, window.autoReader.speed);\n\n    // 在停止自动阅读时清除所有高亮\n    window.autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n\n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n\n      // 调用清理函数\n      if (window.autoReader.cleanup) {\n        window.autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n\n    // 重置翻页状态\n    window.autoReader.isPageChanging = false;\n\n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n\n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n\n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n\n    // 收集字符位置\n    window.autoReader.charPositions = getAllCharacterPositions(content);\n\n    // 如果当前页没有内容，尝试翻页\n    if (window.autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !window.autoReader.isPageChanging) {\n        window.autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async e => {\n    const newMode = e.target.value;\n    const prevMode = readingMode;\n    console.log(`切换阅读模式: 从 ${prevMode} 到 ${newMode}`);\n\n    // 更新状态\n    setReadingMode(newMode);\n\n    // 如果有PDF文档和当前页，重新处理当前页内容\n    if (pdfDocument && currentPage > 0) {\n      try {\n        console.log('重新处理当前页面内容');\n        const page = await pdfDocument.getPage(currentPage);\n\n        // 不使用任何额外处理，直接使用最原始的方式重新加载页面\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n\n        // 根据当前模式设置内容\n        if (newMode === 'static') {\n          // 静态高亮模式 - 使用改进的句子处理\n          const html = formatSimpleHighlightedText(sentences);\n          console.log('设置静态高亮内容');\n          setContent(html);\n\n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n            if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n\n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n\n                // 验证文字颜色\n                if (styles.color === 'rgb(51, 51, 51)' || styles.color === '#333333') {\n                  console.log('文字颜色正确应用');\n                } else {\n                  console.warn('文字颜色可能未正确应用:', styles.color);\n                }\n              }\n            } else {\n              console.error('未找到静态高亮模式内容区域');\n            }\n          }, 200);\n        } else if (newMode === 'flash-reading') {\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n\n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n\n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n        } else {\n          // 其他模式保持不变\n          const handler = getContentHandlerForMode(newMode);\n          const processedContent = handler(sentences);\n          setContent(processedContent);\n        }\n      } catch (error) {\n        console.error('应用阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 首先确保移除鼠标跟随监听器\n    removeMouseFollowListeners();\n\n    // 清理节奏阅读器\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n\n    // 清理闪读器\n    if (window.flashReader) {\n      window.flashReader.cleanup();\n    }\n\n    // 清理舒适3D效果\n    const comfortable3DElements = document.querySelectorAll('.emboss-3d-text, .float-3d-text, .gradient-3d-text');\n    comfortable3DElements.forEach(el => el.remove());\n\n    // 清理闪读模式元素\n    const flashReadingElements = document.querySelectorAll('.flash-reading-container, .flash-reading-display, .flash-reading-controls');\n    flashReadingElements.forEach(el => el.remove());\n\n    // 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll('.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line, .rhythm-char');\n    highlights.forEach(el => {\n      if (el.parentNode) el.parentNode.removeChild(el);\n    });\n\n    // 彻底替换内容区域以移除所有事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      var _contentArea$querySel;\n      // 先保存底部翻页控件\n      const bottomPagination = contentArea.querySelector('.bottom-pagination');\n\n      // 深度克隆内容，但不克隆事件监听器\n      const contentHTML = ((_contentArea$querySel = contentArea.querySelector('div[dangerouslySetInnerHTML]')) === null || _contentArea$querySel === void 0 ? void 0 : _contentArea$querySel.innerHTML) || '';\n      const newContentArea = contentArea.cloneNode(false);\n\n      // 创建新的内容容器\n      const newContentContainer = document.createElement('div');\n      newContentContainer.innerHTML = contentHTML;\n      newContentArea.appendChild(newContentContainer);\n\n      // 如果有底部翻页控件，重新添加\n      if (bottomPagination && totalPages > 0) {\n        const newBottomPagination = bottomPagination.cloneNode(true);\n        // 重新绑定事件\n        const prevBtn = newBottomPagination.querySelector('.page-btn:first-child');\n        const nextBtn = newBottomPagination.querySelector('.page-btn:last-child');\n        if (prevBtn) prevBtn.onclick = () => changePage(-1);\n        if (nextBtn) nextBtn.onclick = () => changePage(1);\n        newContentArea.appendChild(newBottomPagination);\n      }\n      if (contentArea.parentNode) {\n        contentArea.parentNode.replaceChild(newContentArea, contentArea);\n      }\n    }\n\n    // 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 移除所有特殊标记和样式\n      paragraph.removeAttribute('data-follow');\n      paragraph.removeAttribute('style');\n\n      // 清理特殊span标签\n      paragraph.innerHTML = paragraph.innerHTML.replace(/<span class=\"text-line\"[^>]*>/g, '').replace(/<span class=\"rhythm-char\"[^>]*>/g, '').replace(/<span class=\"line-highlight[^\"]*\"[^>]*>/g, '').replace(/<span class=\"mouse-highlight[^\"]*\"[^>]*>/g, '').replace(/<\\/span>/g, '');\n    });\n\n    // 移除特殊UI元素\n    const elementsToRemove = ['rhythm-speed-slider', 'rhythm-notification'];\n    elementsToRemove.forEach(id => {\n      const element = document.getElementById(id);\n      if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    });\n\n    // 移除暗色背景\n    document.body.classList.remove('dark-background');\n\n    // 清理闪读模式\n    if (window.flashReader && typeof window.flashReader.cleanup === 'function') {\n      window.flashReader.cleanup();\n    }\n  };\n  const handleAutoScroll = () => {\n    window.autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = e => {\n    if (readingMode !== 'follow-mouse') return;\n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    const rect = contentArea.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    clearAllHighlights();\n    const paragraphs = contentArea.querySelectorAll('p');\n    paragraphs.forEach(paragraph => {\n      const paragraphRect = paragraph.getBoundingClientRect();\n      const paragraphX = paragraphRect.left - rect.left;\n      const paragraphY = paragraphRect.top - rect.top;\n      if (y >= paragraphY && y <= paragraphY + paragraphRect.height) {\n        const words = paragraph.querySelectorAll('span');\n        words.forEach(word => {\n          const wordRect = word.getBoundingClientRect();\n          const wordX = wordRect.left - rect.left;\n          if (x >= wordX && x <= wordX + wordRect.width) {\n            word.classList.add('highlight');\n          }\n        });\n      }\n    });\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 专门用于移除鼠标跟随事件的函数\n  const removeMouseFollowListeners = () => {\n    // 移除记录的所有监听器\n    if (window.eventTracker && window.eventTracker.mouseFollowHandlers) {\n      window.eventTracker.mouseFollowHandlers.forEach(({\n        element,\n        event,\n        handler\n      }) => {\n        if (element && element.removeEventListener) {\n          element.removeEventListener(event, handler);\n        }\n      });\n      window.eventTracker.mouseFollowHandlers = [];\n    }\n\n    // 为安全起见，尝试从document和内容区域移除通用处理函数\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    }\n    document.removeEventListener('mousemove', handleMouseMove);\n\n    // 清除所有当前高亮\n    clearAllHighlights();\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n\n    // 添加底部翻页控件样式\n    const bottomPaginationStyles = document.createElement('style');\n    bottomPaginationStyles.id = 'bottom-pagination-styles';\n    bottomPaginationStyles.innerHTML = `\n      .bottom-pagination {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        padding: 20px 0 30px;\n        margin-top: 30px;\n        width: 100%;\n        background-color: transparent;\n        border-radius: 5px;\n      }\n\n      .bottom-pagination .page-btn {\n        background-color: #6c5ce7;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        padding: 8px 15px;\n        margin: 0 10px;\n        cursor: pointer;\n        font-size: 14px;\n        transition: background-color 0.2s ease;\n      }\n\n      .bottom-pagination .page-btn:hover {\n        background-color: #4834d4;\n      }\n\n      .bottom-pagination .page-btn:disabled {\n        background-color: #aaa;\n        cursor: not-allowed;\n      }\n\n      .bottom-pagination .page-info {\n        font-size: 14px;\n        margin: 0 10px;\n      }\n    `;\n    document.head.appendChild(bottomPaginationStyles);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n    addComfortable3DStyles();\n\n    // 添加鼠标跟随模式的样式\n    const mouseFollowStyle = document.createElement('style');\n    mouseFollowStyle.id = 'intelligent-mouse-follow-style';\n    mouseFollowStyle.textContent = `\n      /* 基础样式 */\n      .mouse-follow-content {\n        position: relative;\n        line-height: 1.8;\n      }\n      \n      .mouse-follow-content .follow-line {\n        position: relative;\n        padding: 8px 16px;\n        margin: 4px 0;\n        border-radius: 6px;\n        transition: all 0.2s ease;\n        display: block;\n        min-height: 1.8em;\n        white-space: normal;\n        word-wrap: break-word;\n        text-indent: 2em;\n      }\n      \n      /* 高亮状态 */\n      .follow-line.highlighted {\n        background-color: #ffa500 !important; /* 橙色背景 */\n        color: #ffffff !important; /* 白色文字 */\n        font-weight: bold !important;\n        font-size: 1.1em; /* 稍微调小字号 */\n        transform: translateX(5px);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n      }\n      \n      \n      /* 平滑过渡效果 */\n      .follow-line {\n        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n      }\n      \n      /* 行间距优化 */\n      .mouse-follow-content .follow-line + .follow-line {\n        margin-top: 4px;\n      }\n      \n      /* 添加行指示器 */\n      .follow-line::before {\n        content: '';\n        position: absolute;\n        left: 0;\n        top: 0;\n        bottom: 0;\n        width: 3px;\n        background: linear-gradient(to bottom, transparent, rgba(255, 255, 255, 0.5), transparent);\n        opacity: 0;\n        transition: opacity 0.2s ease;\n      }\n      \n      .follow-line.highlighted::before {\n        opacity: 1;\n      }\n    `;\n    document.head.appendChild(mouseFollowStyle);\n\n    // 创建深色背景下的ADHD友好高亮样式\n    const style = document.createElement('style');\n    style.id = 'adhd-friendly-highlight-style';\n    style.textContent = `\n      /* ADHD友好的高亮样式 - 适配深色背景 */\n      .adhd-highlight-mode {\n        line-height: 1.8;\n        padding: 20px;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph {\n        margin-bottom: 1.2em;\n        background-color: transparent;\n        padding: 12px 15px;\n        border-radius: 6px;\n        border-left: 3px solid rgba(255, 255, 255, 0.2);\n        transition: all 0.3s ease;\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover {\n        transform: translateX(5px);\n        border-left-color: rgba(255, 255, 255, 0.4);\n      }\n      \n      /* 加粗样式 - 白色加粗 */\n      .adhd-bold {\n        font-weight: 700;\n        color: #ffffff;\n        letter-spacing: 0.02em;\n        font-size: 1.1em;\n        text-shadow: 0 0 1px rgba(255, 255, 255, 0.2);\n      }\n      \n      /* 彩色样式 - 使用鲜明的蓝色 */\n      .adhd-colored {\n        color: #6c5ce7;\n        font-weight: 500;\n        font-size: 1.05em;\n        text-shadow: 0 0 1px rgba(108, 92, 231, 0.2);\n      }\n      \n      /* 正常样式 - 普通白色 */\n      .adhd-normal {\n        color: rgba(255, 255, 255, 0.8);\n        font-size: 1em;\n      }\n\n      /* 添加平滑过渡效果 */\n      .adhd-bold, .adhd-colored, .adhd-normal {\n        transition: all 0.2s ease;\n      }\n\n      /* 悬停效果 */\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-bold {\n        color: #ffffff;\n        text-shadow: 0 0 2px rgba(255, 255, 255, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-colored {\n        color: #8a7ff7;\n        text-shadow: 0 0 2px rgba(138, 127, 247, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-normal {\n        color: rgba(255, 255, 255, 0.9);\n      }\n\n      /* 添加段落间距的视觉引导 */\n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph {\n        margin-top: 1.5em;\n        position: relative;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph::before {\n        content: '';\n        position: absolute;\n        top: -0.75em;\n        left: 0;\n        right: 0;\n        height: 1px;\n        background: linear-gradient(\n          to right,\n          transparent,\n          rgba(255, 255, 255, 0.1),\n          transparent\n        );\n      }\n    `;\n    document.head.appendChild(style);\n\n    // 添加基础鼠标跟随样式\n    const mouseFollowPageStyle = document.createElement('style');\n    mouseFollowPageStyle.id = 'basic-mouse-follow-style';\n    mouseFollowPageStyle.textContent = `\n      .follow-line {\n        padding: 8px 12px;\n        margin: 4px 0;\n        border-radius: 4px;\n        transition: background-color 0.2s ease;\n      }\n      .follow-line.highlighted {\n        background-color: #ffa500;\n        color: #000080;\n        font-weight: bold;\n      }\n    `;\n    document.head.appendChild(mouseFollowPageStyle);\n    return () => {\n      const existingStyle = document.getElementById('adhd-friendly-highlight-style');\n      if (existingStyle) existingStyle.remove();\n      const existingMouseFollowStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (existingMouseFollowStyle) existingMouseFollowStyle.remove();\n      const existingBasicMouseFollowStyle = document.getElementById('basic-mouse-follow-style');\n      if (existingBasicMouseFollowStyle) existingBasicMouseFollowStyle.remove();\n      mouseFollowPageStyle.remove();\n    };\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 清理旧监听器\n    removeMouseFollowListeners();\n\n    // 添加新监听器\n    setTimeout(() => {\n      addMouseFollowListeners();\n\n      // 添加调试辅助 - 显示行边界\n      const contentArea = document.querySelector('.mouse-follow-content');\n      if (contentArea) {\n        const lines = contentArea.querySelectorAll('.follow-line');\n        console.log(`初始化鼠标跟随模式，共 ${lines.length} 行`);\n\n        // 可选：启用可视化调试\n        if (false) {\n          // 设置为true可以启用可视化调试\n          lines.forEach((line, index) => {\n            line.style.border = '1px dashed #888';\n            line.setAttribute('title', `行 ${index + 1}`);\n          });\n        }\n\n        // 验证行高亮效果\n        const firstLine = lines[0];\n        if (firstLine) {\n          console.log('行样式验证:', {\n            padding: window.getComputedStyle(firstLine).padding,\n            margin: window.getComputedStyle(firstLine).margin,\n            fontSize: window.getComputedStyle(firstLine).fontSize,\n            lineHeight: window.getComputedStyle(firstLine).lineHeight\n          });\n        }\n      }\n    }, 100);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = delta => {\n    window.autoReader.speed = Math.max(100, window.autoReader.speed + delta);\n    if (window.autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async delta => {\n    // 添加安全检查，确保rhythmReader对象存在\n    if (typeof window.rhythmReader === 'undefined') {\n      window.rhythmReader = {\n        active: false,\n        speed: 150,\n        pagesRead: 0,\n        intervalId: null\n      };\n      console.log(\"重新初始化rhythmReader对象\");\n    }\n\n    // 如果正在进行节奏阅读，先停止\n    if (window.rhythmReader && window.rhythmReader.active) {\n      if (typeof window.rhythmReader.stop === 'function') {\n        window.rhythmReader.stop();\n      } else {\n        // 如果stop函数不存在，尝试手动清理\n        if (window.rhythmReader.intervalId) {\n          clearInterval(window.rhythmReader.intervalId);\n          window.rhythmReader.intervalId = null;\n        }\n        window.rhythmReader.active = false;\n      }\n    }\n\n    // 继续原有的changePage逻辑\n    console.log(`翻页请求: 当前页 ${currentPage}, 增量 ${delta}`);\n    const newPage = currentPage + delta;\n    if (newPage < 1 || newPage > totalPages) {\n      console.log('无效页码，不执行翻页');\n      return;\n    }\n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n    const wasFlashReading = readingMode === 'flash-reading' && window.flashReader && window.flashReader.isPlaying;\n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    if (wasFlashReading && window.flashReader) {\n      window.flashReader.cleanup();\n    }\n\n    // 更新页码\n    setCurrentPage(newPage);\n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n\n      // 检查是否为目录页\n      const textContent = await page.getTextContent();\n      const isToc = await detectIfTocPage(textContent);\n      setIsTableOfContents(isToc);\n      if (isToc) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, page.getViewport({\n          scale: 1.0\n        }));\n      } else {\n        // 处理正文页面 - 根据当前阅读模式处理\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n\n        // 根据当前模式设置内容\n        if (readingMode === 'static') {\n          console.log('翻页后应用静态高亮模式');\n          const processedContent = formatSimpleHighlightedText(sentences);\n          setContent(processedContent);\n\n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n            if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n\n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n              }\n            }\n          }, 200);\n        } else if (readingMode === 'flash-reading') {\n          // 如果是闪读模式，则需要特殊处理\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n\n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n\n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n          return; // 已处理，直接返回\n        } else {\n          // 其他模式使用原处理函数\n          await processContentPage(page, readingMode);\n        }\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n    } catch (error) {\n      console.error('页面切换错误:', error);\n    }\n  };\n\n  // ADHD友好的静态高亮处理函数\n  const formatSimpleHighlightedText = sentences => {\n    console.log('开始处理ADHD友好的静态高亮文本，句子数量:', sentences.length);\n    let html = '<div class=\"pdf-content adhd-highlight-mode\">';\n    sentences.forEach((sentence, sentenceIndex) => {\n      if (!sentence || sentence.trim() === '') {\n        console.log(`跳过空句子，索引: ${sentenceIndex}`);\n        return;\n      }\n\n      // 清理和规范化文本\n      const cleanText = sentence.trim().replace(/\\s+/g, ' ') // 规范化空白字符\n      .replace(/&/g, '&amp;') // 转义特殊字符\n      .replace(/</g, '&lt;').replace(/>/g, '&gt;');\n\n      // 处理句子中的单词，为它们添加不同样式\n      const words = cleanText.split(/(\\s+)/);\n      let formattedSentence = '';\n      words.forEach((word, wordIndex) => {\n        if (word.trim() === '') {\n          // 保留空格\n          formattedSentence += word;\n        } else {\n          // 根据位置应用不同的样式类\n          // 三种交替样式: 加粗、彩色、正常\n          const styleClass = wordIndex % 3 === 0 ? 'adhd-bold' : wordIndex % 3 === 1 ? 'adhd-colored' : 'adhd-normal';\n          formattedSentence += `<span class=\"${styleClass}\">${word}</span>`;\n        }\n      });\n      console.log(`处理句子 ${sentenceIndex + 1}:`, cleanText.substring(0, 50) + '...');\n      html += `<p class=\"pdf-paragraph\">${formattedSentence}</p>`;\n    });\n    html += '</div>';\n\n    // 调试输出\n    console.log('生成的ADHD友好静态高亮HTML:', html.substring(0, 200) + '...');\n    return html;\n  };\n\n  // 根据阅读模式获取相应的内容处理函数\n  const getContentHandlerForMode = mode => {\n    switch (mode) {\n      case 'normal':\n        return formatSentencesToHtml;\n      case 'static':\n        return applyStaticHighlightToSentences;\n      case 'follow-mouse':\n        return formatSentencesForMouseFollow;\n      case 'comfortable-3d':\n        return applyComfortable3dEffectToSentences;\n      case 'flash-reading':\n        return sentences => {\n          // 闪读模式使用专门的分割函数重新处理文本\n          return createFlashReadingContentFromSentences(sentences);\n        };\n      default:\n        return formatSentencesToHtml;\n    }\n  };\n\n  // 监听阅读模式和当前页面的变化\n  useEffect(() => {\n    if (readingMode === 'mouse-follow' && currentPage && !isTableOfContents) {\n      // 移除之前的样式\n      const oldStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (oldStyle) {\n        oldStyle.remove();\n      }\n\n      // 添加基础鼠标跟随样式\n      const followModeStyle = document.createElement('style');\n      followModeStyle.id = 'basic-mouse-follow-style';\n      followModeStyle.textContent = `\n        .follow-line {\n          padding: 8px 12px;\n          margin: 4px 0;\n          border-radius: 4px;\n          transition: background-color 0.2s ease;\n        }\n        .follow-line.highlighted {\n          background-color: #ffa500;\n          color: #000080;\n        font-weight: bold;\n        }\n      `;\n      document.head.appendChild(followModeStyle);\n\n      // 处理当前页面内容\n      const page = pdfDocument.getPage(currentPage);\n      const textContent = page.getTextContent();\n      const sentences = textContent.items.map(item => item.str).join(' ').split(/[。！？]/).filter(s => s.trim());\n\n      // 应用基础鼠标跟随格式化\n      setContent(formatSentencesForMouseFollow(sentences));\n\n      // 添加鼠标跟随监听器\n      setTimeout(() => {\n        addMouseFollowListeners();\n      }, 100);\n      return () => {\n        followModeStyle.remove();\n      };\n    }\n  }, [readingMode, currentPage, pdfDocument]);\n\n  // 添加全局节奏阅读速度控制器\n  (function () {\n    console.log(\"初始化全局节奏阅读速度控制器\");\n\n    // 配置参数和状态变量\n    let readingSpeed = 150; // 默认速度改为150ms，更快\n\n    // 创建独立的速度滑块UI\n    function createRhythmSpeedSlider() {\n      console.log(\"创建节奏阅读速度控制器...\");\n\n      // 先检查是否已存在\n      let existingSlider = document.getElementById('rhythm-speed-slider-container');\n      if (existingSlider) existingSlider.remove();\n\n      // 创建容器\n      const container = document.createElement('div');\n      container.id = 'rhythm-speed-slider-container';\n      container.style.cssText = `\n        position: fixed;\n        top: 50px;\n        right: 10px;\n        background: rgba(0, 0, 0, 0.5);\n        padding: 5px;\n        z-index: 9999999;\n        display: flex;\n        flex-direction: column;\n        width: 60px;\n        border-radius: 4px;\n      `;\n\n      // 添加标签\n      const label = document.createElement('div');\n      label.textContent = readingSpeed + \"ms\";\n      label.id = 'rhythm-speed-label';\n      label.style.cssText = `\n        color: white;\n        font-size: 12px;\n        font-weight: bold;\n        margin-bottom: 5px;\n        text-align: center;\n      `;\n      container.appendChild(label);\n\n      // 添加滑块\n      const slider = document.createElement('input');\n      slider.type = 'range';\n      slider.min = '30';\n      slider.max = '400';\n      slider.step = '10';\n      slider.value = readingSpeed;\n      slider.style.cssText = `\n        width: 150px;\n        height: 20px;\n        transform: rotate(90deg);\n        transform-origin: left center;\n        margin: 70px 0 0 -45px;\n      `;\n\n      // 滑块事件\n      slider.oninput = function () {\n        readingSpeed = parseInt(this.value);\n        label.textContent = readingSpeed + \"ms\";\n        console.log(\"节奏阅读速度已调整为:\", readingSpeed);\n\n        // 尝试使用全局节奏阅读控制接口\n        if (window.rhythmReading && typeof window.rhythmReading.updateSpeed === 'function') {\n          window.rhythmReading.updateSpeed(readingSpeed);\n          return;\n        }\n\n        // 如果全局接口不可用，使用备用方法\n        // 更新全局变量中的速度值\n        window.rhythmReadingSpeed = readingSpeed;\n\n        // 查找当前活动的节奏阅读实例并更新速度\n        const updateActiveRhythmReader = function () {\n          // 不直接引用intervalId和nextChar变量\n          /* 原代码会导致错误\n          if (typeof intervalId !== 'undefined' && intervalId) {\n            clearInterval(intervalId);\n            intervalId = setInterval(nextChar, readingSpeed);\n            console.log(\"已更新节奏阅读模式速度\");\n          }\n          */\n\n          // 如果是自动翻页版本的节奏阅读\n          if (window.rhythmReader && typeof window.rhythmReader.updateSpeed === 'function') {\n            window.rhythmReader.updateSpeed(readingSpeed);\n            console.log(\"已更新rhythmReader速度\");\n          }\n\n          // 查找全局作用域中的其他intervalId实例\n          for (let key in window) {\n            if (key.includes('rhythm') && key.includes('Interval') && window[key]) {\n              try {\n                clearInterval(window[key]);\n                // 不直接引用nextChar变量\n                if (typeof window['nextChar'] === 'function') {\n                  window[key] = setInterval(window['nextChar'], readingSpeed);\n                } else if (typeof window['advanceChar'] === 'function') {\n                  window[key] = setInterval(window['advanceChar'], readingSpeed);\n                } else if (typeof window['moveToNextChar'] === 'function') {\n                  window[key] = setInterval(window['moveToNextChar'], readingSpeed);\n                } else {\n                  console.log(`找到interval ${key} 但未找到对应的nextChar函数`);\n                  continue;\n                }\n                console.log(\"已更新\", key, \"的速度\");\n              } catch (e) {\n                console.error(\"更新\", key, \"速度失败\", e);\n              }\n            }\n          }\n        };\n        updateActiveRhythmReader();\n      };\n      container.appendChild(slider);\n      document.body.appendChild(container);\n      console.log(\"节奏阅读速度控制器已添加到DOM！\");\n      return container;\n    }\n\n    // 页面加载完成后添加滑块\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', function () {\n        setTimeout(createRhythmSpeedSlider, 1000);\n      });\n    } else {\n      setTimeout(createRhythmSpeedSlider, 1000);\n    }\n\n    // 暴露给全局，供其他脚本使用\n    window.createRhythmSpeedSlider = createRhythmSpeedSlider;\n    window.rhythmReadingSpeed = readingSpeed;\n  })();\n\n  // 纯手动节奏阅读模式 - 双按钮版\n  (function () {\n    // 避免重复初始化\n    if (window.simpleRhythmReaderActive) {\n      console.log(\"节奏阅读模式已经在运行中\");\n      return;\n    }\n    console.log(\"初始化纯手动节奏阅读模式 - 双按钮版\");\n\n    // 局部变量，避免全局污染\n    let active = false;\n    let readingSpeed = 150; // 默认速度\n    let charElements = [];\n    let currentIndex = 0;\n    let readIndices = new Set();\n    let intervalId = null;\n\n    // 创建读完提示\n    function showCompletionMessage() {\n      // 停止阅读\n      if (intervalId) {\n        clearInterval(intervalId);\n        intervalId = null;\n      }\n      const message = document.createElement('div');\n      message.style.cssText = `\n        position: fixed;\n        bottom: 20px;\n        left: 50%;\n        transform: translateX(-50%);\n        background: #333;\n        color: white;\n        padding: 10px 20px;\n        border-radius: 4px;\n        font-size: 16px;\n        z-index: 999999;\n      `;\n      message.textContent = \"本页已读完，请手动翻页后点击右上角'开始阅读'继续\";\n      document.body.appendChild(message);\n      setTimeout(() => {\n        if (message.parentNode) {\n          message.parentNode.removeChild(message);\n        }\n      }, 5000);\n    }\n\n    // 更新字符显示\n    function updateDisplay() {\n      charElements.forEach((span, index) => {\n        if (index === currentIndex) {\n          span.style.color = 'green';\n          span.style.fontWeight = 'bold';\n        } else if (readIndices.has(index)) {\n          span.style.color = '';\n        } else {\n          span.style.color = 'rgba(200,200,200,0.3)';\n        }\n      });\n    }\n\n    // 字符处理函数\n    function processNextChar() {\n      if (!active || !charElements.length) return;\n      readIndices.add(currentIndex);\n      currentIndex++;\n      if (currentIndex >= charElements.length) {\n        active = false;\n        showCompletionMessage();\n        return;\n      }\n      updateDisplay();\n\n      // 确保当前字符在视图内\n      const currentChar = charElements[currentIndex];\n      if (currentChar) {\n        const rect = currentChar.getBoundingClientRect();\n        if (rect.top < 0 || rect.bottom > window.innerHeight) {\n          currentChar.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center'\n          });\n        }\n      }\n    }\n\n    // 清理函数\n    function cleanup() {\n      if (intervalId) {\n        clearInterval(intervalId);\n        intervalId = null;\n      }\n      active = false;\n      try {\n        // 恢复原始文本\n        document.querySelectorAll('.rhythm-char').forEach(span => {\n          if (span.parentNode) {\n            span.parentNode.replaceChild(document.createTextNode(span.textContent), span);\n          }\n        });\n      } catch (e) {\n        console.error(\"清理失败:\", e);\n      }\n\n      // 清理控制面板\n      const controller = document.getElementById('rhythm-reader-control');\n      if (controller) controller.remove();\n\n      // 清理速度控制器\n      const speedSlider = document.getElementById('rhythm-speed-slider-container');\n      if (speedSlider) speedSlider.remove();\n      charElements = [];\n      currentIndex = 0;\n      readIndices.clear();\n\n      // 重置全局标识\n      window.simpleRhythmReaderActive = false;\n    }\n\n    // 启动阅读\n    function startReading() {\n      // 清理之前的状态\n      cleanup();\n\n      // 设置标识\n      window.simpleRhythmReaderActive = true;\n\n      // 查找文本内容\n      const textNodes = [];\n      const container = document.querySelector('article') || document.querySelector('main') || document.body;\n      function findTextNodes(element) {\n        if (!element) return;\n        for (let i = 0; i < element.childNodes.length; i++) {\n          const node = element.childNodes[i];\n          if (node.nodeType === 3 && node.textContent.trim()) {\n            textNodes.push(node);\n          } else if (node.nodeType === 1 && !['SCRIPT', 'STYLE', 'NOSCRIPT', 'BUTTON', 'INPUT'].includes(node.tagName)) {\n            findTextNodes(node);\n          }\n        }\n      }\n      findTextNodes(container);\n      if (!textNodes.length) {\n        alert(\"未找到文本内容！\");\n        return;\n      }\n\n      // 处理文本节点\n      textNodes.forEach(node => {\n        if (!node.textContent.trim() || !node.parentNode) return;\n        const fragment = document.createDocumentFragment();\n        const text = node.textContent;\n        for (let i = 0; i < text.length; i++) {\n          const char = text[i];\n          const span = document.createElement('span');\n          span.className = 'rhythm-char';\n          span.textContent = char;\n          fragment.appendChild(span);\n          charElements.push(span);\n        }\n        node.parentNode.replaceChild(fragment, node);\n      });\n      if (!charElements.length) {\n        alert(\"处理文本失败！\");\n        return;\n      }\n\n      // 开始阅读\n      active = true;\n      currentIndex = 0;\n      updateDisplay();\n      intervalId = setInterval(processNextChar, readingSpeed);\n    }\n\n    // 初始化\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', () => {\n        startReading();\n      });\n    } else {\n      startReading();\n    }\n  })();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3846,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3845,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reading-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u9605\\u8BFB\\u6A21\\u5F0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3850,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"reading-mode-select\",\n          value: readingMode,\n          onChange: handleReadingModeChange,\n          className: \"mode-select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"normal\",\n            children: \"\\u666E\\u901A\\u6A21\\u5F0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3857,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"static\",\n            children: \"\\u9759\\u6001\\u9AD8\\u4EAE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3858,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"follow-mouse\",\n            children: \"\\u9F20\\u6807\\u8DDF\\u968F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3859,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"rhythm\",\n            children: \"\\u8282\\u594F\\u9605\\u8BFB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3860,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"flash-reading\",\n            children: \"\\u95EA\\u8BFB\\u6A21\\u5F0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3861,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 3851,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3849,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".pdf,.txt,.md\",\n          hidden: true,\n          id: \"file-upload\",\n          onChange: handleFileUpload,\n          ref: fileRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3866,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"upload-btn\",\n          onClick: () => fileRef.current.click(),\n          children: \"\\u4E0A\\u4F20\\u6587\\u4EF6 (.pdf/.txt/.md)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3874,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3865,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 3844,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toolbar\",\n        children: fileName && /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"filename\",\n          children: fileName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3885,\n          columnNumber: 24\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3884,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-content\",\n        ref: readerContainerRef,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: content\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3890,\n          columnNumber: 13\n        }, this), totalPages > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bottom-pagination\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => changePage(-1),\n            disabled: currentPage <= 1,\n            className: \"page-btn\",\n            children: \"\\u4E0A\\u4E00\\u9875\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3894,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"page-info\",\n            children: [\"\\u7B2C \", currentPage, \" / \", totalPages, \" \\u9875\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 3901,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => changePage(1),\n            disabled: currentPage >= totalPages,\n            className: \"page-btn\",\n            children: \"\\u4E0B\\u4E00\\u9875\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3904,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 3893,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3889,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 3883,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 3843,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"x5N0itQI0gqtA84jt63lPsdPeRI=\");\n_c = App;\nexport default App;\n\n// 添加全局访问点，用于节奏阅读速度控制\n(function setupRhythmReadingGlobals() {\n  // 检查文档是否已加载\n  const whenDocumentReady = fn => {\n    if (document.readyState !== 'loading') {\n      fn();\n    } else {\n      document.addEventListener('DOMContentLoaded', fn);\n    }\n  };\n  whenDocumentReady(() => {\n    // 创建全局命名空间\n    window.rhythmReading = window.rhythmReading || {};\n\n    // 尝试查找节奏阅读的nextChar函数和intervalId\n    let foundNextChar = false;\n\n    // 设置全局监听，捕获所有setInterval调用\n    const originalSetInterval = window.setInterval;\n    window.setInterval = function (fn, delay) {\n      const intervalId = originalSetInterval.apply(this, arguments);\n\n      // 检测是否为节奏阅读相关的interval\n      if (fn.toString().includes('nextChar') || fn.toString().includes('readIndices') || fn.toString().includes('currentIndex++')) {\n        console.log(\"捕获到节奏阅读interval:\", intervalId);\n        window.rhythmReading.activeIntervalId = intervalId;\n        window.rhythmReading.nextCharFn = fn;\n        window.rhythmReading.currentDelay = delay;\n        foundNextChar = true;\n      }\n      return intervalId;\n    };\n\n    // 暴露更新速度的函数\n    window.rhythmReading.updateSpeed = function (newSpeed) {\n      if (window.rhythmReading.activeIntervalId) {\n        clearInterval(window.rhythmReading.activeIntervalId);\n        if (window.rhythmReading.nextCharFn) {\n          window.rhythmReading.activeIntervalId = setInterval(window.rhythmReading.nextCharFn, newSpeed);\n          window.rhythmReading.currentDelay = newSpeed;\n          console.log(\"节奏阅读速度已更新为:\", newSpeed);\n          return true;\n        }\n      }\n\n      // 如果找不到活动的interval，尝试遍历所有可能的节奏阅读实例\n      for (let key in window) {\n        if (key.toLowerCase().includes('rhythm') && window[key]) {\n          // 如果是对象且有updateSpeed方法\n          if (typeof window[key] === 'object' && typeof window[key].updateSpeed === 'function') {\n            try {\n              window[key].updateSpeed(newSpeed);\n              console.log(\"已更新\", key, \"的速度\");\n              return true;\n            } catch (e) {\n              console.error(\"更新\", key, \"速度失败\", e);\n            }\n          }\n        }\n      }\n      console.warn(\"未找到活动的节奏阅读实例\");\n      return false;\n    };\n    console.log(\"节奏阅读全局控制已设置\");\n  });\n})();\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","pdfjsLib","pdfjsViewer","marked","pdfjs","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","window","currentPage","totalPages","changePage","eventTracker","mouseFollowHandlers","autoReader","charPositions","intervalId","currentIndex","speed","pageContainer","isScrolling","isPageChanging","cleanup","rhythmReader","active","pagesRead","initializeGlobalNamespace","console","log","minSpeed","maxSpeed","speedStep","charElements","readIndices","Set","safeGetRhythmReader","warn","safeSetActive","isActive","reader","safeGetActive","safeClearInterval","clearInterval","safeSetInterval","callback","delay","setInterval","findNextPageButton","selectors","selector","buttons","document","querySelectorAll","btn","offsetParent","e","allButtons","text","textContent","trim","toLowerCase","forEach","span","parentNode","replaceChild","createTextNode","error","elementsToRemove","id","element","getElementById","remove","showMessage","message","duration","oldMsg","msgElement","createElement","style","cssText","body","appendChild","setTimeout","showPageCompleteNotification","oldNotice","notice","innerHTML","nextButton","click","err","isInViewport","rect","getBoundingClientRect","top","left","bottom","innerHeight","documentElement","clientHeight","right","innerWidth","clientWidth","updateDisplay","index","color","fontWeight","has","nextChar","length","add","currentChar","scrollIntoView","behavior","block","startReading","container","querySelector","textNodes","findText","i","childNodes","node","nodeType","nodeValue","push","includes","tagName","fragment","createDocumentFragment","className","dataset","createControlPanel","existingPanel","title","speedDisplay","slider","type","min","toString","max","step","value","width","oninput","newSpeed","parseInt","buttonContainer","pauseButton","onclick","stopButton","addStartButton","existingButton","button","initialize","readyState","addEventListener","start","stop","updateSpeed","display","activateRhythmReadingMode","alert","initializeRhythmReading","startRhythmReading","autoTurnPage","observer","MutationObserver","mutations","contentAdded","some","mutation","addedNodes","disconnect","observe","childList","subtree","addButton","background","handleModeChange","mode","originalFunction","readingModeChanged","manualStartRhythmReading","App","_s","pages","setPages","setCurrentPage","setTotalPages","fileName","setFileName","loading","setLoading","fileRef","file","setFile","pdfInstance","setPdfInstance","extractedTextPages","setExtractedTextPages","readingMode","setReadingMode","posMode","setPosMode","markdownContent","setMarkdownContent","readerContainerRef","content","setContent","pdfDocument","setPdfDocument","isTableOfContents","setIsTableOfContents","applyDarkBackground","classList","head","restoreDarkBackground","addNakedEye3DStyles","addComfortable3DStyles","addFlashReadingStyles","initializeFlashReading","sentences","flashReadingSentences","Array","isArray","speedSlider","speedValue","playButton","prevButton","progress","cover","flashReader","interval","isPlaying","disabled","displayCurrentSentence","currentSentence","displayRect","height","pause","localStorage","setItem","prevSentence","nextSentence","target","savedSpeed","getItem","initialSpeed","createFlashReadingContent","formatTextToHtml","paragraphs","split","html","paragraph","formatTextForMouseFollow","words","processedParagraph","word","applyStaticHighlight","lastColor","Math","random","applyNakedEye3dEffect","applyComfortable3dEffect","effectTypes","effectClass","floor","initializeNakedEye3D","textElements","animationDelay","addMouseFollowListeners","contentArea","lastHighlightedLine","mouseMoveHandler","mouseY","clientY","allLines","foundLine","minDistance","Infinity","line","lineCenter","distance","abs","substring","mouseLeaveHandler","event","handler","initializeMouseFollow","handlePdfFile","fileURL","URL","createObjectURL","loadingTask","getDocument","pdf","promise","numPages","extractAndProcessPage","pageNum","page","getPage","getTextContent","viewport","getViewport","scale","detectIfTocPage","processTocPage","processContentPage","textItems","items","fullText","map","item","str","join","hasTocKeywords","test","hasPageNumberPatterns","shortLinesCount","linesWithNumbersCount","lineMap","Map","yKey","round","transform","set","get","lines","values","lineText","shortLineRatio","numberLineRatio","htmlContent","x","y","fontSize","sqrt","fontName","spacedText","getTextNodeAtPosition","nodes","Node","TEXT_NODE","range","createRange","selectNodeContents","rects","getClientRects","j","ELEMENT_NODE","found","processTextWithHighlight","result","extractedText","replace","splitIntoSentences","processedContent","formatSentencesToHtml","formatSimpleHighlightedText","formatSentencesForMouseFollow","applyComfortable3dEffectToSentences","createFlashReadingContentFromSentences","firstPara","styles","getComputedStyle","backgroundColor","fontFamily","sentenceRegex","lastIndex","match","exec","endIndex","sentence","lastSentence","splitIntoFlashReadingSegments","segments","segment","lastSegment","applyStaticHighlightToSentences","processedSentence","handleTxtFile","name","handleMarkdownFile","parse","p","parseError","tempDiv","plainText","innerText","handleFileUpload","uploadedFile","files","endsWith","getAllCharacterPositions","walker","createTreeWalker","NodeFilter","SHOW_TEXT","positions","nextNode","currentNode","setStart","setEnd","char","filter","sort","a","b","yDiff","scrollElementToCenter","elementY","isContainerScrollable","scrollHeight","overflowY","targetScrollTop","containerVisibleHeight","scrollTo","absoluteElementY","createReaderCursor","cursor","isSentenceEnd","charPosition","sentenceEndMarks","nextIndex","findSentenceStart","prev","current","isInVisibleArea","threshold","visibleTop","scrollTop","visibleBottom","topThreshold","bottomThreshold","scrollY","startAutoReader","contentContainer","position","highlight","borderRadius","pointerEvents","zIndex","lineHeight","lastScrolledY","scrollSafeZone","charWidth","charHeight","xDiff","_window$autoReader$ch","stopAutoReader","pos","contentRect","relativeX","relativeY","isInRecentlyScrolledArea","needsScroll","scrollAmount","scrollBy","absoluteY","initializeAutoReader","handleReadingModeChange","newMode","prevMode","getContentHandlerForMode","cleanupDOM","removeMouseFollowListeners","comfortable3DElements","el","flashReadingElements","highlights","removeChild","_contentArea$querySel","bottomPagination","contentHTML","newContentArea","cloneNode","newContentContainer","newBottomPagination","prevBtn","nextBtn","removeAttribute","handleAutoScroll","updateCursorPosition","force","handleMouseMove","clientX","clearAllHighlights","paragraphRect","paragraphX","paragraphY","wordRect","wordX","removeEventListener","addAutoReaderStyles","bottomPaginationStyles","mouseFollowStyle","mouseFollowPageStyle","existingStyle","existingMouseFollowStyle","existingBasicMouseFollowStyle","border","setAttribute","firstLine","padding","margin","adjustSpeed","delta","newPage","wasRhythmReading","rhythmReaderGlobal","wasFlashReading","isToc","sentenceIndex","cleanText","formattedSentence","wordIndex","styleClass","oldStyle","followModeStyle","s","readingSpeed","createRhythmSpeedSlider","existingSlider","label","rhythmReading","rhythmReadingSpeed","updateActiveRhythmReader","key","simpleRhythmReaderActive","showCompletionMessage","processNextChar","controller","clear","findTextNodes","children","_jsxFileName","lineNumber","columnNumber","onChange","accept","hidden","ref","onClick","dangerouslySetInnerHTML","__html","_c","setupRhythmReadingGlobals","whenDocumentReady","fn","foundNextChar","originalSetInterval","apply","arguments","activeIntervalId","nextCharFn","currentDelay","$RefreshReg$"],"sources":["D:/adhd-read-helper/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 添加全局事件跟踪对象\nwindow.eventTracker = window.eventTracker || {\n  mouseFollowHandlers: []\n};\n\n// 自动阅读器全局对象\nwindow.autoReader = {\n  charPositions: [],\n  intervalId: null,\n  currentIndex: 0,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false,\n  cleanup: null\n};\n\n// 创建统一的全局命名空间，确保在页面切换后仍然保持状态\nwindow.rhythmReader = window.rhythmReader || {\n  active: false,\n  speed: 150,\n  pagesRead: 0,\n  intervalId: null\n};\n\n// 立即执行函数确保全局命名空间在所有代码之前初始化\n(function initializeGlobalNamespace() {\n  // 确保全局对象始终存在\n  if (!window.rhythmReader) {\n    window.rhythmReader = {\n      active: false,\n      speed: 150,\n      pagesRead: 0,\n      intervalId: null\n    };\n  }\n  console.log(\"节奏阅读全局命名空间已初始化\");\n})();\n\n// 节奏阅读模式 - 手动翻页安全版\n(function() {\n  console.log(\"节奏阅读模式 - 手动翻页安全版初始化\");\n  \n  // 配置参数\n  const minSpeed = 30;\n  const maxSpeed = 400;\n  const speedStep = 10;\n  \n  // 状态变量\n  let charElements = [];\n  let currentIndex = 0;\n  let readIndices = new Set();\n  \n  // 安全访问全局对象的辅助函数\n  const safeGetRhythmReader = function() {\n    if (!window.rhythmReader) {\n      console.warn(\"rhythmReader未初始化，重新创建\");\n      window.rhythmReader = {\n        active: false,\n        speed: 150,\n        pagesRead: 0,\n        intervalId: null\n      };\n    }\n    return window.rhythmReader;\n  };\n  \n  // 安全设置状态的辅助函数\n  const safeSetActive = function(isActive) {\n    const reader = safeGetRhythmReader();\n    reader.active = isActive;\n  };\n  \n  // 安全获取状态的辅助函数\n  const safeGetActive = function() {\n    const reader = safeGetRhythmReader();\n    return reader.active;\n  };\n  \n  // 安全操作间隔定时器的辅助函数\n  const safeClearInterval = function() {\n    const reader = safeGetRhythmReader();\n    if (reader.intervalId) {\n      clearInterval(reader.intervalId);\n      reader.intervalId = null;\n    }\n  };\n  \n  const safeSetInterval = function(callback, delay) {\n    const reader = safeGetRhythmReader();\n    safeClearInterval();\n    reader.intervalId = setInterval(callback, delay);\n  };\n  \n  // 查找下一页按钮 - 仅用于手动翻页时的辅助\n  const findNextPageButton = function() {\n    const selectors = [\n      '.next-page',\n      '.next',\n      '#next',\n      '[aria-label=\"下一页\"]',\n      '[aria-label=\"Next\"]'\n    ];\n    \n    for (const selector of selectors) {\n      try {\n        const buttons = document.querySelectorAll(selector);\n        for (const btn of buttons) {\n          if (btn.offsetParent !== null) {\n            return btn;\n          }\n        }\n      } catch(e) {}\n    }\n    \n    const allButtons = document.querySelectorAll('button, a, div[role=\"button\"]');\n    for (const btn of allButtons) {\n      const text = (btn.textContent || '').trim().toLowerCase();\n      if (text === '下一页' || text === 'next' || text === '>' || text === '→') {\n        if (btn.offsetParent !== null) {\n          return btn;\n        }\n      }\n    }\n    \n      return null;\n  };\n  \n  // 改进的清理函数\n  const cleanup = function() {\n    console.log(\"执行清理...\");\n    \n    // 安全清理定时器\n    safeClearInterval();\n    \n    try {\n      document.querySelectorAll('.rhythm-char').forEach(span => {\n        if (span.parentNode) {\n          span.parentNode.replaceChild(document.createTextNode(span.textContent), span);\n        }\n      });\n    } catch(e) {\n      console.error(\"清理文本失败:\", e);\n    }\n    \n    charElements = [];\n    currentIndex = 0;\n    readIndices = new Set();\n    \n    // 安全设置活动状态\n    safeSetActive(false);\n    \n    // 清理所有UI元素\n    const elementsToRemove = [\n      'rhythm-control-panel',\n      'rhythm-speed-controller',\n      'rhythm-page-complete',\n      'rhythm-message'\n    ];\n    \n    elementsToRemove.forEach(id => {\n      const element = document.getElementById(id);\n      if (element) element.remove();\n    });\n  };\n  \n  // 消息显示函数\n  const showMessage = function(message, duration = 3000) {\n    console.log(message);\n    \n    // 移除旧消息\n    const oldMsg = document.getElementById('rhythm-message');\n    if (oldMsg) oldMsg.remove();\n    \n    const msgElement = document.createElement('div');\n    msgElement.id = 'rhythm-message';\n    msgElement.textContent = message;\n    msgElement.style.cssText = `\n      position: fixed;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      background: rgba(0,0,0,0.8);\n      color: white;\n      padding: 15px 20px;\n      border-radius: 5px;\n      z-index: 9999999;\n      font-size: 16px;\n      max-width: 80%;\n      text-align: center;\n    `;\n    \n    document.body.appendChild(msgElement);\n    \n    setTimeout(() => {\n      if (msgElement.parentNode) {\n        msgElement.remove();\n      }\n    }, duration);\n  };\n  \n  // 页面读完通知\n  const showPageCompleteNotification = function() {\n    // 移除之前的通知\n    const oldNotice = document.getElementById('rhythm-page-complete');\n    if (oldNotice) oldNotice.remove();\n    \n    // 创建通知\n    const notice = document.createElement('div');\n    notice.id = 'rhythm-page-complete';\n    notice.style.cssText = `\n      position: fixed;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      background: rgba(0, 0, 0, 0.8);\n      color: white;\n      padding: 20px 30px;\n      border-radius: 8px;\n      z-index: 9999999;\n      font-size: 16px;\n      text-align: center;\n      box-shadow: 0 4px 10px rgba(0,0,0,0.3);\n    `;\n    \n    // 通知内容\n    const message = document.createElement('div');\n    message.innerHTML = '<strong>当前页面已读完</strong>';\n    notice.appendChild(message);\n    \n    document.body.appendChild(notice);\n    \n    // 5秒后自动移除通知\n    setTimeout(() => {\n      if (notice.parentNode) {\n        notice.remove();\n      }\n    }, 5000);\n    \n    // 自动尝试翻页\n    try {\n      const nextButton = findNextPageButton();\n      if (nextButton) {\n        // 安全增加页数\n        const reader = safeGetRhythmReader();\n        reader.pagesRead = (reader.pagesRead || 0) + 1;\n        \n        nextButton.click();\n        \n        // 延迟后提示用户重新启动阅读\n        setTimeout(() => {\n          showMessage(\"页面已翻至下一页，点击\\\"开始阅读\\\"继续\", 5000);\n        }, 1000);\n      }\n    } catch (err) {\n      console.error(\"翻页失败:\", err);\n    }\n  };\n  \n  // 检查元素是否在视口中\n  const isInViewport = function(element) {\n    const rect = element.getBoundingClientRect();\n    return (\n      rect.top >= 0 &&\n      rect.left >= 0 &&\n      rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n      rect.right <= (window.innerWidth || document.documentElement.clientWidth)\n    );\n  };\n  \n  // 更新显示\n  const updateDisplay = function() {\n    charElements.forEach((span, index) => {\n      if (index === currentIndex) {\n        span.style.color = 'green';\n        span.style.fontWeight = 'bold';\n      } else if (readIndices.has(index)) {\n        span.style.color = '';  // 恢复正常颜色\n      } else {\n        span.style.color = 'rgba(200,200,200,0.3)';\n      }\n    });\n  };\n  \n  // 下一个字符\n  const nextChar = function() {\n    // 安全检查活动状态\n    if (!safeGetActive() || !charElements.length) return;\n    \n    readIndices.add(currentIndex);\n    \n    currentIndex++;\n    if (currentIndex >= charElements.length) {\n      // 停止当前阅读\n      safeClearInterval();\n      \n      // 显示页面读完提示\n      showPageCompleteNotification();\n      return;\n    }\n    \n    updateDisplay();\n    \n    // 确保当前字符可见\n    const currentChar = charElements[currentIndex];\n    if (currentChar && !isInViewport(currentChar)) {\n      currentChar.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center'\n      });\n    }\n  };\n  \n  // 开始阅读功能\n  const startReading = function() {\n    console.log(\"启动节奏阅读...\");\n    \n    // 清理之前的实例\n    cleanup();\n    \n    // 查找内容容器\n    const container = document.querySelector('.pdf-content') || \n                      document.querySelector('[class*=\"pdf\"]') || \n                      document.querySelector('article') || \n                      document.querySelector('main') || \n                      document.body;\n    \n    // 查找文本节点\n    const textNodes = [];\n    const findText = function(element) {\n      for (let i = 0; i < element.childNodes.length; i++) {\n        const node = element.childNodes[i];\n        if (node.nodeType === 3 && node.nodeValue.trim() !== '') {\n          textNodes.push(node);\n        } else if (node.nodeType === 1 && \n                  !['SCRIPT', 'STYLE', 'BUTTON', 'INPUT', 'SELECT', 'NOSCRIPT'].includes(node.tagName)) {\n          findText(node);\n        }\n      }\n    };\n    findText(container);\n    \n    if (textNodes.length === 0) {\n      showMessage(\"错误: 未找到文本内容\");\n      return;\n    }\n    \n    // 处理文本节点\n    try {\n    textNodes.forEach(node => {\n        if (!node.nodeValue || !node.parentNode) return;\n      \n        const text = node.nodeValue;\n      const fragment = document.createDocumentFragment();\n      \n      for (let i = 0; i < text.length; i++) {\n        const span = document.createElement('span');\n          span.textContent = text[i];\n        span.className = 'rhythm-char';\n          span.dataset.index = charElements.length;\n        \n        fragment.appendChild(span);\n          charElements.push(span);\n      }\n      \n        node.parentNode.replaceChild(fragment, node);\n      });\n    } catch(e) {\n      console.error(\"处理文本失败:\", e);\n      showMessage(\"生成节奏阅读效果失败\");\n      return;\n    }\n    \n    if (charElements.length === 0) {\n      showMessage(\"未找到可读内容\");\n      return;\n    }\n    \n    // 安全设置活动状态\n    safeSetActive(true);\n    currentIndex = 0;\n    \n    updateDisplay();\n    \n    // 安全设置定时器\n    const reader = safeGetRhythmReader();\n    safeSetInterval(nextChar, reader.speed);\n    \n    // 创建控制面板\n    createControlPanel();\n  };\n  \n  // 创建控制面板\n  const createControlPanel = function() {\n    // 检查是否已存在\n    let existingPanel = document.getElementById('rhythm-speed-controller');\n    if (existingPanel) existingPanel.remove();\n    \n    // 创建容器\n    const container = document.createElement('div');\n    container.id = 'rhythm-speed-controller';\n    container.style.cssText = `\n      position: fixed;\n      top: 10px;\n      right: 10px;\n      background: rgba(255,255,255,0.9);\n      padding: 10px;\n      border-radius: 5px;\n      box-shadow: 0 2px 8px rgba(0,0,0,0.2);\n      z-index: 9999999;\n      display: flex;\n      flex-direction: column;\n      font-family: Arial, sans-serif;\n    `;\n    \n    // 标题\n    const title = document.createElement('div');\n    title.textContent = '节奏阅读控制';\n    title.style.cssText = `\n      font-weight: bold;\n      margin-bottom: 8px;\n      text-align: center;\n    `;\n    container.appendChild(title);\n    \n    // 安全获取速度\n    const reader = safeGetRhythmReader();\n    \n    // 速度显示\n    const speedDisplay = document.createElement('div');\n    speedDisplay.textContent = `速度: ${reader.speed}ms`;\n    speedDisplay.id = 'rhythm-speed-display';\n    speedDisplay.style.cssText = `\n      margin-bottom: 8px;\n      text-align: center;\n      font-size: 14px;\n    `;\n    container.appendChild(speedDisplay);\n    \n    // 速度滑块\n    const slider = document.createElement('input');\n    slider.type = 'range';\n    slider.min = minSpeed.toString();\n    slider.max = maxSpeed.toString();\n    slider.step = speedStep.toString();\n    slider.value = reader.speed.toString();\n    slider.style.width = '100%';\n    \n    slider.oninput = function() {\n      try {\n        const newSpeed = parseInt(this.value);\n        // 安全更新速度\n        const reader = safeGetRhythmReader();\n        reader.speed = newSpeed;\n        \n        speedDisplay.textContent = `速度: ${newSpeed}ms`;\n        \n        // 安全重置定时器\n        if (reader.intervalId) {\n          safeClearInterval();\n          safeSetInterval(nextChar, newSpeed);\n        }\n      } catch (err) {\n        console.error(\"速度调整失败:\", err);\n      }\n    };\n    container.appendChild(slider);\n    \n    // 按钮容器\n    const buttonContainer = document.createElement('div');\n    buttonContainer.style.cssText = `\n      display: flex;\n      justify-content: space-between;\n      margin-top: 8px;\n    `;\n    \n    // 暂停/继续按钮\n    const pauseButton = document.createElement('button');\n    pauseButton.textContent = '暂停';\n    pauseButton.style.cssText = `\n      flex: 1;\n      margin-right: 5px;\n      padding: 5px;\n      cursor: pointer;\n    `;\n    \n    pauseButton.onclick = function() {\n      try {\n        const reader = safeGetRhythmReader();\n        if (reader.intervalId) {\n          safeClearInterval();\n          this.textContent = '继续';\n      } else {\n          safeSetInterval(nextChar, reader.speed);\n          this.textContent = '暂停';\n        }\n      } catch (err) {\n        console.error(\"暂停/继续失败:\", err);\n      }\n    };\n    buttonContainer.appendChild(pauseButton);\n    \n    // 停止按钮\n    const stopButton = document.createElement('button');\n    stopButton.textContent = '停止';\n    stopButton.style.cssText = `\n      flex: 1;\n      margin-left: 5px;\n      padding: 5px;\n      cursor: pointer;\n    `;\n    \n    stopButton.onclick = cleanup;\n    buttonContainer.appendChild(stopButton);\n    \n    container.appendChild(buttonContainer);\n    document.body.appendChild(container);\n  };\n  \n  // 添加启动按钮\n  const addStartButton = function() {\n    // 检查是否已存在\n    let existingButton = document.getElementById('rhythm-start-button');\n    if (existingButton) existingButton.remove();\n    \n    const button = document.createElement('button');\n    button.id = 'rhythm-start-button';\n    button.textContent = '开始节奏阅读';\n    button.style.cssText = `\n      position: fixed;\n      top: 10px;\n      right: 10px;\n      z-index: 999999;\n      background: #4CAF50;\n      color: white;\n      padding: 8px 12px;\n      border: none;\n      border-radius: 4px;\n      font-size: 14px;\n      cursor: pointer;\n      box-shadow: 0 2px 5px rgba(0,0,0,0.2);\n    `;\n    \n    button.onclick = startReading;\n    document.body.appendChild(button);\n  };\n  \n  // 初始化\n  const initialize = function() {\n    console.log(\"初始化节奏阅读组件...\");\n    \n    // 确保全局对象初始化\n    safeGetRhythmReader();\n    \n    // 页面加载后添加启动按钮\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', addStartButton);\n    } else {\n      addStartButton();\n    }\n    \n    // 提供API接口\n    window.rhythmReader.start = startReading;\n    window.rhythmReader.stop = cleanup;\n    window.rhythmReader.updateSpeed = function(newSpeed) {\n      try {\n        const reader = safeGetRhythmReader();\n        reader.speed = newSpeed;\n        \n        // 更新速度显示\n        const display = document.getElementById('rhythm-speed-display');\n        if (display) display.textContent = `速度: ${newSpeed}ms`;\n        \n        // 更新定时器\n        if (reader.intervalId) {\n          safeClearInterval();\n          safeSetInterval(nextChar, newSpeed);\n        }\n        \n        return true;\n      } catch (err) {\n        console.error(\"更新速度失败:\", err);\n        return false;\n      }\n    };\n  };\n  \n  // 执行初始化\n  initialize();\n  \n  console.log(\"节奏阅读模式初始化完成 - 安全手动翻页版\");\n})();\n\n// 定义一个全局函数用于从应用代码中启动节奏阅读\nwindow.activateRhythmReadingMode = function() {\n  console.log(\"尝试从应用代码中启动节奏阅读模式\");\n  if (window.rhythmReader) {\n    if (window.rhythmReader.active) {\n      console.log(\"节奏阅读模式已经在运行\");\n        } else {\n      window.rhythmReader.start();\n    }\n  } else {\n    console.error(\"节奏阅读模式未初始化\");\n    alert(\"无法启动节奏阅读模式：组件未初始化\");\n  }\n};\n\n// 更新初始化函数\nconst initializeRhythmReading = () => {\n  // 不再自动初始化，而是等待用户选择\n  console.log(\"节奏阅读模式准备就绪，等待用户选择\");\n};\n\n// 更新启动函数\nconst startRhythmReading = () => {\n  if (window.rhythmReader && typeof window.rhythmReader.start === 'function') {\n    window.rhythmReader.start();\n  }\n};\n\n// 节奏阅读模式 - 自动翻页版\n(function() {\n  console.log(\"节奏阅读模式 - 自动翻页版初始化\");\n  \n  // 状态变量\n  let isActive = false;\n  let intervalId = null;\n  let charElements = [];\n  let currentIndex = 0;\n  let readIndices = new Set();\n  \n  // 进度监控 - 记录已读页数\n  let pagesRead = 0;\n  \n  // 查找下一页按钮的帮助函数\n  const findNextPageButton = function() {\n    // 常见的选择器\n    const selectors = [\n      '.next-page',\n      '.next',\n      '#next',\n      '[aria-label=\"下一页\"]',\n      '[aria-label=\"Next\"]',\n      'button:contains(\"下一页\")', \n      'button:contains(\"Next\")'\n    ];\n    \n    for (const selector of selectors) {\n      try {\n        const buttons = document.querySelectorAll(selector);\n        for (const btn of buttons) {\n          if (btn.offsetParent !== null) { // 确保按钮可见\n            return btn;\n          }\n        }\n      } catch(e) {}\n    }\n    \n    // 如果通过选择器找不到，尝试通过文本内容查找\n    const allButtons = document.querySelectorAll('button, a, div[role=\"button\"]');\n    for (const btn of allButtons) {\n      const text = (btn.textContent || '').trim().toLowerCase();\n      if (text === '下一页' || text === 'next' || text === '>' || text === '→') {\n        if (btn.offsetParent !== null) {\n          return btn;\n        }\n      }\n    }\n    \n    return null;\n  };\n  \n  // 自动翻页函数\n  const autoTurnPage = function() {\n    console.log(\"尝试自动翻页...\");\n    \n    // 找到下一页按钮\n    const nextButton = findNextPageButton();\n    \n    if (!nextButton) {\n      console.log(\"未找到下一页按钮\");\n      showMessage(\"已读完当前页，但未找到下一页按钮\");\n        return;\n      }\n    \n    // 暂停当前阅读\n    if (intervalId) {\n      clearInterval(intervalId);\n      intervalId = null;\n    }\n    \n    // 增加已读页数\n    pagesRead++;\n    console.log(`已读完第 ${pagesRead} 页，点击下一页按钮`);\n    \n    // 模拟点击下一页按钮\n    nextButton.click();\n    \n    // 监听DOM变化，等待新页面加载\n    const observer = new MutationObserver((mutations) => {\n      // 检查新内容是否已加载\n      const contentAdded = mutations.some(mutation => \n        mutation.type === 'childList' && mutation.addedNodes.length > 0\n      );\n      \n      if (contentAdded) {\n        console.log(\"检测到新内容已加载\");\n        // 停止观察\n        observer.disconnect();\n        \n        // 延迟一下，确保新页面完全加载\n        setTimeout(() => {\n          // 重新启动节奏阅读模式\n          console.log(\"在新页面上重新启动节奏阅读模式\");\n          startReading();\n        }, 800);\n      }\n    });\n    \n    // 开始观察文档变化\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  };\n  \n  // 清理函数\n  const cleanup = function() {\n    console.log(\"执行清理...\");\n    \n    if (intervalId) {\n      clearInterval(intervalId);\n      intervalId = null;\n    }\n    \n    try {\n      document.querySelectorAll('.rhythm-char').forEach(span => {\n        if (span.parentNode) {\n          span.parentNode.replaceChild(document.createTextNode(span.textContent), span);\n        }\n      });\n    } catch(e) {\n      console.error(\"清理文本失败:\", e);\n    }\n    \n    charElements = [];\n    currentIndex = 0;\n    readIndices = new Set();\n    isActive = false;\n    pagesRead = 0;\n    \n    const button = document.getElementById('rhythm-control-button');\n    if (button) button.remove();\n  };\n  \n  // 简单通知\n  const showMessage = function(message) {\n    console.log(message);\n    alert(message);\n  };\n  \n  // 添加控制按钮\n  const addButton = function() {\n    const existingButton = document.getElementById('rhythm-control-button');\n    if (existingButton) existingButton.remove();\n    \n    const button = document.createElement('button');\n    button.id = 'rhythm-control-button';\n    button.textContent = '暂停节奏阅读';\n    button.style.cssText = `\n      position: fixed;\n      bottom: 20px;\n      right: 20px;\n      z-index: 999999;\n      background: #4CAF50;\n      color: white;\n      padding: 10px 15px;\n      border: none;\n      border-radius: 5px;\n      font-size: 16px;\n      font-weight: bold;\n      cursor: pointer;\n    `;\n    \n    button.onclick = function() {\n      if (intervalId) {\n        // 暂停\n        if (intervalId) {\n          clearInterval(intervalId);\n          intervalId = null;\n        }\n        button.textContent = '继续节奏阅读';\n        button.style.background = '#2196F3';\n        } else {\n        // 继续\n        intervalId = setInterval(nextChar, 300);\n        button.textContent = '暂停节奏阅读';\n        button.style.background = '#4CAF50';\n      }\n    };\n    \n    document.body.appendChild(button);\n    return button;\n  };\n  \n  // 启动阅读\n  const startReading = function() {\n    console.log(\"启动节奏阅读...\");\n    \n    // 清理之前的实例\n    cleanup();\n    \n    // 查找内容容器\n    const container = document.querySelector('.pdf-content') || \n                      document.querySelector('[class*=\"pdf\"]') || \n                      document.querySelector('article') || \n                      document.querySelector('main') || \n                      document.body;\n    \n    // 查找所有文本节点\n    const textNodes = [];\n    const findText = function(element) {\n      for (let i = 0; i < element.childNodes.length; i++) {\n        const node = element.childNodes[i];\n        if (node.nodeType === 3 && node.nodeValue.trim() !== '') {\n          textNodes.push(node);\n        } else if (node.nodeType === 1 && \n                  !['SCRIPT', 'STYLE', 'BUTTON', 'INPUT', 'SELECT', 'NOSCRIPT'].includes(node.tagName)) {\n          findText(node);\n        }\n      }\n    };\n    findText(container);\n    \n    if (textNodes.length === 0) {\n      showMessage(\"错误: 未找到文本内容\");\n      return;\n    }\n    \n    // 处理文本节点\n    try {\n      textNodes.forEach(node => {\n        if (!node.nodeValue || !node.parentNode) return;\n        \n        const text = node.nodeValue;\n        const fragment = document.createDocumentFragment();\n        \n        for (let i = 0; i < text.length; i++) {\n          const span = document.createElement('span');\n          span.textContent = text[i];\n          span.className = 'rhythm-char';\n          span.dataset.index = charElements.length;\n          \n          fragment.appendChild(span);\n          charElements.push(span);\n        }\n        \n        node.parentNode.replaceChild(fragment, node);\n      });\n    } catch(e) {\n      console.error(\"处理文本失败:\", e);\n      showMessage(\"生成节奏阅读效果失败\");\n      return;\n    }\n    \n    if (charElements.length === 0) {\n      showMessage(\"未找到可读内容\");\n      return;\n    }\n    \n    // 激活状态\n    isActive = true;\n    currentIndex = 0;\n    \n    // 更新显示\n    updateDisplay();\n    \n    // 开始阅读\n    intervalId = setInterval(nextChar, 300);\n    \n    addButton();\n  };\n  \n  // 更新显示\n  const updateDisplay = function() {\n    charElements.forEach((span, index) => {\n      if (index === currentIndex) {\n        span.style.color = 'green';\n        span.style.fontWeight = 'bold';\n      } else if (readIndices.has(index)) {\n        span.style.color = 'white';\n      } else {\n        span.style.color = 'rgba(200,200,200,0.3)';\n      }\n    });\n  };\n  \n  // 下一个字符\n  const nextChar = function() {\n    if (!isActive || !charElements.length) return;\n    \n    readIndices.add(currentIndex);\n    \n    currentIndex++;\n    if (currentIndex >= charElements.length) {\n      // 当前页已读完\n      if (intervalId) {\n        clearInterval(intervalId);\n        intervalId = null;\n      }\n      console.log(\"当前页已读完，尝试翻页\");\n      autoTurnPage(); // 尝试自动翻页\n        return;\n      }\n    \n    updateDisplay();\n  };\n  \n  // 处理模式切换\n  const handleModeChange = function(mode) {\n    console.log(\"模式更改为:\", mode);\n    \n    if (mode !== 'rhythm' && mode !== 'rhythmReading' && isActive) {\n      cleanup();\n    }\n  };\n  \n  // 重写模式切换函数\n  const originalFunction = window.readingModeChanged;\n  window.readingModeChanged = function(mode) {\n    if (typeof originalFunction === 'function') {\n      try {\n        originalFunction(mode);\n      } catch(e) {}\n    }\n    \n    handleModeChange(mode);\n  };\n  \n  // 初始化\n  const initialize = function() {\n    console.log(\"初始化节奏阅读组件...\");\n  };\n  \n  // 等待DOM加载完成\n  document.addEventListener('DOMContentLoaded', initialize);\n  \n  // 暴露全局API\n  window.manualStartRhythmReading = startReading;\n  \n  console.log(\"节奏阅读模式初始化完成 - 自动翻页版\");\n})();\n\nconst App = () => {\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  const [isTableOfContents, setIsTableOfContents] = useState(false);\n  \n  // 实现缺失的函数\n  // 应用深色背景\n  const applyDarkBackground = () => {\n    document.body.classList.add('dark-background');\n    \n    // 添加必要的CSS样式\n    if (!document.getElementById('dark-background-style')) {\n      const style = document.createElement('style');\n      style.id = 'dark-background-style';\n      style.textContent = `\n        .dark-background {\n          background-color: #000 !important;\n        }\n        .dark-background .sidebar {\n          background: linear-gradient(145deg, #4834d4, #341f9e) !important;\n        }\n        .dark-background .page-content {\n          background-color: #000 !important;\n        }\n        .dark-background .main-content {\n          background-color: #000 !important;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 恢复正常背景\n  const restoreDarkBackground = () => {\n    document.body.classList.remove('dark-background');\n  };\n  \n  // 添加裸眼3D样式\n  const addNakedEye3DStyles = () => {\n    if (!document.getElementById('naked-eye-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'naked-eye-3d-style';\n      style.textContent = `\n        .naked-eye-3d-container {\n          position: relative;\n          perspective: 800px;\n          width: 100%;\n        }\n        \n        .naked-eye-3d-text {\n          display: inline-block;\n          animation: float 3s ease-in-out infinite;\n          text-shadow: 0 0 5px rgba(255,255,255,0.3);\n          padding: 0 4px;\n          color: white;\n          filter: drop-shadow(0 0 5px rgba(120, 220, 255, 0.6));\n        }\n        \n        @keyframes float {\n          0% { transform: translateZ(0px); }\n          50% { transform: translateZ(20px); }\n          100% { transform: translateZ(0px); }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 添加舒适3D样式\n  const addComfortable3DStyles = () => {\n    if (!document.getElementById('comfortable-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'comfortable-3d-style';\n      style.textContent = `\n        .emboss-3d-text {\n          color: #fff;\n          text-shadow: \n            1px 1px 1px rgba(0,0,0,0.5),\n            -1px -1px 1px rgba(255,255,255,0.5);\n          letter-spacing: 1.5px;\n          font-weight: 500;\n        }\n        \n        .float-3d-text {\n          display: inline-block;\n          transform-style: preserve-3d;\n          transform: perspective(500px) translateZ(10px);\n          text-shadow: 0 2px 5px rgba(0,0,0,0.5);\n        }\n        \n        .gradient-3d-text {\n          display: inline-block;\n          background: linear-gradient(to bottom, #fff, #aaa);\n          -webkit-background-clip: text;\n          -webkit-text-fill-color: transparent;\n          text-shadow: 0 2px 4px rgba(0,0,0,0.3);\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 添加闪读样式\n  const addFlashReadingStyles = () => {\n    if (!document.getElementById('flash-reading-style')) {\n      const style = document.createElement('style');\n      style.id = 'flash-reading-style';\n      style.textContent = `\n        .flash-reading-container {\n          position: relative;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          z-index: 1000;\n          padding: 20px;\n        }\n        \n        .flash-reading-display-wrapper {\n          position: relative;\n          margin: 40px 0;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        \n        .flash-reading-display {\n          font-size: 36px;\n          font-weight: bold;\n          text-align: center;\n          color: white;\n          min-height: 80px;\n          max-width: 90%;\n          padding: 20px 40px;\n          position: relative; /* 允许绝对定位的覆盖层 */\n          z-index: 2;\n        }\n        \n        .flash-reading-cover {\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(128, 128, 128, 0.6); /* 灰色遮罩 */\n          border-radius: 8px;\n          z-index: 1; /* 确保在文本后面 */\n        }\n        \n        .flash-reading-controls {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          gap: 20px;\n          margin-bottom: 20px;\n          width: 100%;\n        }\n        \n        .flash-reading-buttons {\n          display: flex;\n          gap: 10px;\n          flex-wrap: wrap;\n          justify-content: center;\n        }\n        \n        .flash-reading-speed {\n          display: flex;\n          align-items: center;\n          color: white;\n          width: 80%;\n          max-width: 400px;\n          gap: 10px;\n        }\n        \n        .flash-reading-slider {\n          flex: 1;\n          height: 8px;\n          appearance: none;\n          background: #555;\n          border-radius: 4px;\n          outline: none;\n        }\n        \n        .flash-reading-slider::-webkit-slider-thumb {\n          appearance: none;\n          width: 20px;\n          height: 20px;\n          border-radius: 50%;\n          background: #6c5ce7;\n          cursor: pointer;\n        }\n        \n        .flash-reading-btn {\n          padding: 10px 20px;\n          border: none;\n          border-radius: 4px;\n          background-color: #6c5ce7;\n          color: white;\n          font-size: 16px;\n          cursor: pointer;\n          transition: background-color 0.2s;\n        }\n        \n        .flash-reading-btn:hover {\n          background-color: #5344c0;\n        }\n        \n        .flash-reading-btn:disabled {\n          background-color: #aaa;\n          cursor: not-allowed;\n        }\n        \n        .flash-reading-progress {\n          color: white;\n          font-size: 14px;\n          margin-top: 10px;\n        }\n        .flash-reading-speed-note {\n          font-size: 12px;\n          color: #ccc;\n          margin-left: 5px;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 初始化闪读模式\n  const initializeFlashReading = () => {\n    // 添加样式\n    addFlashReadingStyles();\n    \n    const sentences = window.flashReadingSentences;\n    if (!sentences || !Array.isArray(sentences) || sentences.length === 0) {\n      console.error('闪读模式: 未找到句子数据');\n        return;\n      }\n    \n    // 获取全局UI元素\n    const display = document.getElementById('flash-reading-display');\n    const speedSlider = document.getElementById('flash-reading-speed');\n    const speedValue = document.getElementById('flash-reading-speed-value');\n    const playButton = document.getElementById('flash-reading-play');\n    const pauseButton = document.getElementById('flash-reading-pause');\n    const stopButton = document.getElementById('flash-reading-stop');\n    const prevButton = document.getElementById('flash-reading-prev-sentence');\n    const nextButton = document.getElementById('flash-reading-next-sentence');\n    const progress = document.getElementById('flash-reading-progress');\n    const cover = document.querySelector('.flash-reading-cover');\n    \n    if (!display || !speedSlider || !speedValue || !playButton || !pauseButton || !stopButton || !prevButton || !nextButton || !progress || !cover) {\n      console.error('闪读模式: 未找到UI元素');\n        return;\n      }\n\n    // 创建闪读控制器\n    window.flashReader = {\n      sentences: sentences,\n      currentIndex: 0,\n      interval: null,\n      speed: parseInt(speedSlider.value),\n      isPlaying: false,\n      \n      // 开始闪读\n      start() {\n        if (this.interval) {\n          clearInterval(this.interval);\n        }\n        \n        this.isPlaying = true;\n        playButton.disabled = true;\n        pauseButton.disabled = false;\n        progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        \n        // 显示当前句子\n        this.displayCurrentSentence();\n        \n        // 设置闪读间隔\n        this.interval = setInterval(() => {\n          this.currentIndex++;\n          \n          if (this.currentIndex >= this.sentences.length) {\n            this.stop();\n            display.textContent = '阅读完成';\n            return;\n          }\n          \n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }, this.speed);\n      },\n      \n      // 显示当前句子\n      displayCurrentSentence() {\n        if (this.currentIndex < this.sentences.length) {\n          const currentSentence = this.sentences[this.currentIndex];\n          display.textContent = currentSentence;\n          display.style.color = 'white'; // 确保文本为白色\n          \n          // 调整背景以适应内容\n          setTimeout(() => {\n            const displayRect = display.getBoundingClientRect();\n            // 确保覆盖层完全包裹文本\n            cover.style.width = `${displayRect.width}px`;\n            cover.style.height = `${displayRect.height}px`;\n          }, 10);\n        }\n      },\n      \n      // 暂停闪读\n      pause() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        \n        this.isPlaying = false;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n      },\n      \n      // 停止闪读\n      stop() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        \n        this.isPlaying = false;\n        this.currentIndex = 0;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n        \n        display.textContent = '准备开始';\n        progress.textContent = `进度：0 / ${this.sentences.length}`; // 重置进度\n      },\n      \n      // 更新速度\n      updateSpeed(newSpeed) {\n        this.speed = newSpeed;\n        speedValue.textContent = `${newSpeed} ms`;\n        \n        // 保存速度设置到本地存储\n        localStorage.setItem('flash-reading-speed', newSpeed);\n        \n        // 如果正在播放，重新开始以应用新速度\n        if (this.isPlaying) {\n          clearInterval(this.interval);\n          this.start(); // 直接调用start方法重新开始\n        }\n      },\n\n      // 返回上一句\n      prevSentence() {\n        if (this.currentIndex > 0) {\n          this.currentIndex--;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n\n      // 跳到下一句\n      nextSentence() {\n        if (this.currentIndex < this.sentences.length - 1) {\n          this.currentIndex++;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n\n      // 清理资源\n      cleanup() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        this.currentIndex = 0;\n      }\n    };\n    \n    // 添加事件监听器\n    playButton.addEventListener('click', () => {\n      window.flashReader.start();\n    });\n    \n    pauseButton.addEventListener('click', () => {\n      window.flashReader.pause();\n    });\n    \n    stopButton.addEventListener('click', () => {\n      window.flashReader.stop();\n    });\n    \n    speedSlider.addEventListener('input', (e) => {\n      const newSpeed = parseInt(e.target.value);\n      window.flashReader.updateSpeed(newSpeed);\n    });\n\n    prevButton.addEventListener('click', () => {\n      window.flashReader.prevSentence();\n    });\n\n    nextButton.addEventListener('click', () => {\n      window.flashReader.nextSentence();\n    });\n    \n    // 初始化\n    const savedSpeed = localStorage.getItem('flash-reading-speed');\n    const initialSpeed = savedSpeed ? parseInt(savedSpeed) : 1000;\n    speedSlider.value = initialSpeed;\n    window.flashReader.updateSpeed(initialSpeed);\n    \n    console.log('闪读模式已初始化，共 ' + sentences.length + ' 个句子');\n  };\n  \n  // 创建闪读内容\n  const createFlashReadingContent = (text) => {\n    return `<div class=\"flash-reading-content\">\n      <p>${text}</p>\n    </div>`;\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 格式化文本用于鼠标跟随\n  const formatTextForMouseFollow = (text) => {\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个单词添加span，以便于添加高亮效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"follow-word\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\" data-follow=\"true\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用静态高亮\n  const applyStaticHighlight = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为单词随机添加颜色高亮\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      let lastColor = null;\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n          return;\n        }\n        \n        // 随机决定是否高亮和使用哪种颜色\n        if (Math.random() < 0.7) {\n          let color;\n          if (lastColor === 'red') {\n            color = 'blue';\n          } else if (lastColor === 'blue') {\n            color = 'red';\n  } else {\n            color = Math.random() < 0.5 ? 'red' : 'blue';\n          }\n          lastColor = color;\n          \n          processedParagraph += `<span class=\"highlight-word ${color}\">${word}</span>`;\n        } else {\n          processedParagraph += word;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用裸眼3D效果\n  const applyNakedEye3dEffect = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content naked-eye-3d-container\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个词添加3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"naked-eye-3d-text\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用舒适3D效果\n  const applyComfortable3dEffect = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个词随机应用不同的3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n  } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          \n          processedParagraph += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 初始化裸眼3D\n  const initializeNakedEye3D = () => {\n    // 为裸眼3D文本添加动画\n    const textElements = document.querySelectorAll('.naked-eye-3d-text');\n    textElements.forEach((element, index) => {\n      // 添加随机延迟，使动画错开\n      const delay = Math.random() * 2;\n      element.style.animationDelay = `${delay}s`;\n    });\n  };\n\n  // 添加鼠标跟随监听器\n  const addMouseFollowListeners = () => {\n    // 获取内容容器\n    const contentArea = document.querySelector('.mouse-follow-content');\n    if (!contentArea) {\n      console.error('未找到鼠标跟随内容区域');\n      return;\n    }\n    \n    // 上一个高亮的行\n    let lastHighlightedLine = null;\n    \n    // 监听鼠标移动 - 精确的行检测\n    const mouseMoveHandler = (e) => {\n      // 获取鼠标位置\n      const mouseY = e.clientY;\n      \n      // 获取所有行\n      const allLines = contentArea.querySelectorAll('.follow-line');\n      let foundLine = null;\n      let minDistance = Infinity;\n      \n      // 寻找鼠标所在的精确行\n      allLines.forEach(line => {\n        const rect = line.getBoundingClientRect();\n        const lineCenter = rect.top + rect.height / 2;\n        const distance = Math.abs(mouseY - lineCenter);\n        \n        // 如果鼠标在行范围内，计算到行中心的距离\n        if (mouseY >= rect.top && mouseY <= rect.bottom) {\n          if (distance < minDistance) {\n            minDistance = distance;\n            foundLine = line;\n        }\n      }\n    });\n    \n      // 更新高亮状态\n      if (lastHighlightedLine && lastHighlightedLine !== foundLine) {\n        // 移除旧高亮\n        lastHighlightedLine.classList.remove('highlighted');\n      }\n      \n      if (foundLine) {\n        // 添加新高亮\n        foundLine.classList.add('highlighted');\n        lastHighlightedLine = foundLine;\n        \n        // 调试输出\n        console.log('当前高亮行:', foundLine.textContent.substring(0, 30) + '...');\n      } else if (lastHighlightedLine) {\n        // 如果没有找到新行，且有上一个高亮行，移除它\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n    \n    // 鼠标离开处理\n    const mouseLeaveHandler = () => {\n      // 清除当前高亮\n      if (lastHighlightedLine) {\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n    \n    // 存储处理函数引用\n    window.eventTracker = window.eventTracker || { mouseFollowHandlers: [] };\n    window.eventTracker.mouseFollowHandlers.push(\n      { element: contentArea, event: 'mousemove', handler: mouseMoveHandler },\n      { element: contentArea, event: 'mouseleave', handler: mouseLeaveHandler }\n    );\n    \n    // 添加事件监听器\n    contentArea.addEventListener('mousemove', mouseMoveHandler);\n    contentArea.addEventListener('mouseleave', mouseLeaveHandler);\n    \n    console.log('改进的鼠标跟随监听器已初始化');\n  };\n  \n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n  }, []);\n  \n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async (file) => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      \n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n      \n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n      \n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n  \n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({ scale: 1.0 });\n      \n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      \n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      \n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async (textContent) => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n    \n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n    \n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n    \n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    \n    const lines = [...lineMap.values()];\n    \n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    \n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    \n    return hasTocKeywords || hasPageNumberPatterns || (shortLineRatio > 0.7 && numberLineRatio > 0.3);\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n    \n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    \n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n      \n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n      \n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n      \n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    \n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && \n              x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = (text) => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    \n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      \n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        \n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    \n    return result;\n  };\n\n  // 处理内容页面 - 按句子划分段落\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      \n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n      // 按句子划分内容（句号、问号、感叹号等作为分隔符）\n      const sentences = splitIntoSentences(extractedText);\n      \n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch(mode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          // 使用ADHD友好的静态高亮处理\n          console.log('应用ADHD友好的静态高亮模式');\n          processedContent = formatSimpleHighlightedText(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'rhythm':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          processedContent = createFlashReadingContentFromSentences(sentences);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n      \n      setContent(processedContent);\n      \n      // 如果是静态高亮模式，添加延时验证检查\n      if (mode === 'static') {\n        setTimeout(() => {\n          const contentArea = document.querySelector('.adhd-highlight-mode');\n          if (contentArea) {\n            console.log('静态高亮模式元素存在');\n            const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n            console.log(`找到 ${paragraphs.length} 个段落`);\n            \n            // 检查样式是否正确应用\n            if (paragraphs.length > 0) {\n              const firstPara = paragraphs[0];\n              const styles = window.getComputedStyle(firstPara);\n              console.log('段落应用的样式:', {\n                color: styles.color,\n                backgroundColor: styles.backgroundColor,\n                fontFamily: styles.fontFamily,\n                fontSize: styles.fontSize\n              });\n            }\n          }\n        }, 200);\n      }\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 将文本分割成句子\n  const splitIntoSentences = (text) => {\n    // 匹配句号、问号、感叹号后跟空格或结束的模式\n    // 支持中英文标点符号\n    const sentenceRegex = /([.!?。！？；;]+\\s*)/g;\n    \n    // 分割文本成句子\n    const sentences = [];\n    let lastIndex = 0;\n    let match;\n    \n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const sentence = text.substring(lastIndex, endIndex).trim();\n      \n      // 避免添加空句子\n      if (sentence) {\n        sentences.push(sentence);\n      }\n      \n      lastIndex = endIndex;\n    }\n    \n    // 处理最后一部分（如果没有以句号等结尾）\n    if (lastIndex < text.length) {\n      const lastSentence = text.substring(lastIndex).trim();\n      if (lastSentence) {\n        sentences.push(lastSentence);\n      }\n    }\n    \n    return sentences;\n  };\n\n  // 专门为闪读模式分割文本，以任意标点符号为分隔点\n  const splitIntoFlashReadingSegments = (text) => {\n    // 匹配任意标点符号包括中英文标点\n    const sentenceRegex = /([,.!?:;，。！？：；、]+\\s*)/g;\n    \n    // 分割文本成短句\n    const segments = [];\n    let lastIndex = 0;\n    let match;\n    \n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const segment = text.substring(lastIndex, endIndex).trim();\n      \n      // 避免添加空段落\n      if (segment) {\n        segments.push(segment);\n      }\n      \n      lastIndex = endIndex;\n    }\n    \n    // 处理最后一部分（如果没有以标点符号结尾）\n    if (lastIndex < text.length) {\n      const lastSegment = text.substring(lastIndex).trim();\n      if (lastSegment) {\n        segments.push(lastSegment);\n      }\n    }\n    \n    return segments;\n  };\n\n  // 格式化句子为HTML\n  const formatSentencesToHtml = (sentences) => {\n    let html = '<div class=\"pdf-content\">';\n    \n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${sentence}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为句子应用静态高亮\n  const applyStaticHighlightToSentences = (sentences) => {\n    let html = '<div class=\"pdf-content adhd-content\">';\n    \n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      \n      // 简单地为句子添加特定样式的class\n      html += `<p class=\"pdf-paragraph adhd-sentence\">${sentence}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为鼠标跟随模式格式化句子\n  const formatSentencesForMouseFollow = (sentences) => {\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    sentences.forEach((sentence, index) => {\n      if (sentence.trim() === '') return;\n      \n      // 每个句子作为独立行，使用div而不是p标签\n      html += `<div class=\"follow-line\" data-line=\"${index}\" data-sentence=\"${sentence.substring(0, 20)}...\" style=\"color: inherit;\">${sentence}</div>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为舒适3D模式格式化句子\n  const applyComfortable3dEffectToSentences = (sentences) => {\n    let html = '<div class=\"pdf-content\">';\n    \n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      \n      // 为每个词随机应用不同的3D效果\n      const words = sentence.split(/(\\s+)/);\n      let processedSentence = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedSentence += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          \n          processedSentence += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedSentence}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为闪读模式创建内容\n  const createFlashReadingContentFromSentences = (sentences) => {\n    // 储存句子到全局变量，用于后续显示\n    window.flashReadingSentences = sentences;\n\n    // 返回闪读界面的HTML结构\n    return `\n      <div class=\"flash-reading-container\">\n        <div class=\"flash-reading-controls\">\n          <div class=\"flash-reading-buttons\">\n            <button id=\"flash-reading-prev-sentence\" class=\"flash-reading-btn\">上一句</button>\n            <button id=\"flash-reading-play\" class=\"flash-reading-btn\">开始</button>\n            <button id=\"flash-reading-pause\" class=\"flash-reading-btn\" disabled>暂停</button>\n            <button id=\"flash-reading-stop\" class=\"flash-reading-btn\">停止</button>\n            <button id=\"flash-reading-next-sentence\" class=\"flash-reading-btn\">下一句</button>\n          </div>\n          <div class=\"flash-reading-speed\">\n            <span>速度：</span>\n            <input type=\"range\" id=\"flash-reading-speed\" min=\"300\" max=\"1700\" step=\"50\" value=\"1000\" class=\"flash-reading-slider\">\n            <span id=\"flash-reading-speed-value\">1000 ms</span>\n            <span class=\"flash-reading-speed-note\">（数值越小，切换越快）</span>\n          </div>\n          <div class=\"flash-reading-progress\">\n            <span id=\"flash-reading-progress\">进度：0 / ${sentences.length}</span>\n          </div>\n        </div>\n        <div class=\"flash-reading-display-wrapper\">\n          <div class=\"flash-reading-cover\"></div> <!-- 这里是闪卡 -->\n          <div id=\"flash-reading-display\" class=\"flash-reading-display\">准备开始</div>\n        </div>\n      </div>`;\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async (file) => {\n    try {\n      const text = await file.text();\n      \n      // 根据阅读模式选择不同的处理方式\n      let processedContent = '';\n      \n      if (readingMode === 'flash-reading') {\n        // 闪读模式下使用特定的分割函数\n        const segments = splitIntoFlashReadingSegments(text);\n        processedContent = createFlashReadingContentFromSentences(segments);\n        \n        // 初始化闪读模式\n        setTimeout(() => {\n          initializeFlashReading();\n        }, 100);\n      } else {\n        // 其他模式使用默认的分割方式\n        const sentences = splitIntoSentences(text);\n        \n        switch(readingMode) {\n          case 'normal':\n            processedContent = formatSentencesToHtml(sentences);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlightToSentences(sentences);\n            break;\n          case 'follow-mouse':\n            processedContent = formatSentencesForMouseFollow(sentences);\n            break;\n          case 'comfortable-3d':\n            processedContent = applyComfortable3dEffectToSentences(sentences);\n            break;\n          default:\n            processedContent = formatSentencesToHtml(sentences);\n        }\n      }\n      \n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n      \n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setContent('<div class=\"error-message\">TXT文件处理失败</div>');\n    }\n  };\n\n  // 处理Markdown文件\n  const handleMarkdownFile = async (file) => {\n    try {\n      const text = await file.text();\n      \n      // 使用marked库转换markdown为HTML\n      let html = '';\n      try {\n        if (window.marked) {\n          html = window.marked.parse(text);\n        } else {\n          // 如果没有marked库，简单地拆分为段落\n          html = `<div>${text.split(\"\\n\\n\").map(p => `<p>${p}</p>`).join(\"\")}</div>`;\n        }\n      } catch (parseError) {\n        console.error('Markdown解析错误:', parseError);\n        html = `<div>${text}</div>`;\n      }\n      \n      // 提取纯文本内容\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = html;\n      const plainText = tempDiv.textContent || tempDiv.innerText || '';\n      \n      // 分割文本为句子\n      const sentences = splitIntoSentences(plainText);\n      \n      // 根据当前阅读模式处理内容\n      let processedContent = '';\n      switch(readingMode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlightToSentences(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          // 使用特定的闪读分割函数重新处理文本\n          const segments = splitIntoFlashReadingSegments(plainText);\n          processedContent = createFlashReadingContentFromSentences(segments);\n          \n          // 初始化闪读模式\n          setTimeout(() => {\n            initializeFlashReading();\n          }, 100);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n      \n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n      \n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('Markdown处理错误:', error);\n      setContent('<div class=\"error-message\">Markdown文件处理失败</div>');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async (e) => {\n    const uploadedFile = e.target.files[0];\n    if (!uploadedFile) return;\n    \n    setLoading(true);\n    setFileName(uploadedFile.name);\n    \n    try {\n      if (uploadedFile.type === 'application/pdf') {\n        await handlePdfFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/plain' || uploadedFile.name.endsWith('.txt')) {\n        await handleTxtFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/markdown' || uploadedFile.name.endsWith('.md')) {\n        await handleMarkdownFile(uploadedFile);\n    } else {\n        setContent('<div class=\"error-message\">不支持的文件格式</div>');\n      }\n    } catch (error) {\n      console.error('处理文件时出错:', error);\n      setContent('<div class=\"error-message\">处理文件时出错</div>');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = (container) => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    \n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n      \n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n      \n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          \n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n          \n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width/2,  // 水平中心\n            y: rect.bottom,               // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n    \n    // 过滤无效位置并排序\n    return positions\n      .filter(p => p.char.trim() !== '')\n      .sort((a, b) => {\n        // 先按行排序，同行按列排序\n        const yDiff = a.y - b.y;\n        if (Math.abs(yDiff) > 5) { // 5px阈值判断是否同一行\n          return yDiff;\n        }\n        return a.x - b.x;\n      });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    \n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - (containerVisibleHeight / 2);\n      \n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - (window.innerHeight / 2);\n      \n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    \n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n    \n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    \n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n    \n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length || // 已到末尾\n          positions[nextIndex].char.trim() === '' || // 下一个是空白\n          positions[nextIndex].y > charPosition.y + 5) { // 下一个在新行\n        return true;\n      }\n    }\n    \n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n    \n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n      \n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || \n          current.y > prev.y + 5) { // 有明显换行\n        break;\n      }\n      \n      start--;\n    }\n    \n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n      \n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      \n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n      \n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      \n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (window.autoReader.charPositions.length === 0) {\n      if (window.currentPage < window.totalPages) {\n        window.changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 重置索引到开头\n    window.autoReader.currentIndex = 0;\n    \n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    \n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n    \n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n    \n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none';\n      highlight.style.zIndex = '998';\n      contentContainer.appendChild(highlight);\n    }\n    \n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight &&\n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n    \n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20;\n    \n    // 尝试获取实际行高\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(window.autoReader.charPositions[i].y - window.autoReader.charPositions[i-1].y);\n        if (yDiff > 5) {\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n    \n    // 记录上次滚动的位置\n    let lastScrolledY = -1;\n    const scrollSafeZone = lineHeight * 2.5;\n    \n    // 设置字符大小的估计值\n    let charWidth = 20;\n    let charHeight = lineHeight * 0.8;\n    \n    // 尝试估计字符宽度\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        if (window.autoReader.charPositions[i].x !== window.autoReader.charPositions[i-1].x) {\n          const xDiff = Math.abs(window.autoReader.charPositions[i].x - window.autoReader.charPositions[i-1].x);\n          if (xDiff > 0 && xDiff < 50) {\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    \n    window.autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (window.autoReader.currentIndex < window.autoReader.charPositions.length && \n             window.autoReader.charPositions[window.autoReader.currentIndex]?.char.trim() === '') {\n        window.autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (window.autoReader.currentIndex >= window.autoReader.charPositions.length) {\n        if (window.currentPage < window.totalPages) {\n          window.changePage(1);\n          clearInterval(window.autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n\n      const pos = window.autoReader.charPositions[window.autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      \n      if (cursor && highlight) {\n        const contentRect = contentContainer.getBoundingClientRect();\n        \n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        \n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        \n        highlight.style.left = `${relativeX - charWidth/2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n        \n        // 滚动处理\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        \n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          \n          if (isContainerScrollable) {\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n            \n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            \n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = relativeY;\n            }\n          } else {\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n            \n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            \n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      \n      window.autoReader.currentIndex++;\n      \n    }, window.autoReader.speed);\n    \n    // 在停止自动阅读时清除所有高亮\n    window.autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n      \n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n      \n      // 调用清理函数\n      if (window.autoReader.cleanup) {\n        window.autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n    \n    // 重置翻页状态\n    window.autoReader.isPageChanging = false;\n    \n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n    \n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n    \n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n    \n    // 收集字符位置\n    window.autoReader.charPositions = getAllCharacterPositions(content);\n    \n    // 如果当前页没有内容，尝试翻页\n    if (window.autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !window.autoReader.isPageChanging) {\n        window.autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async (e) => {\n    const newMode = e.target.value;\n    const prevMode = readingMode;\n    \n    console.log(`切换阅读模式: 从 ${prevMode} 到 ${newMode}`);\n    \n    // 更新状态\n    setReadingMode(newMode);\n    \n    // 如果有PDF文档和当前页，重新处理当前页内容\n    if (pdfDocument && currentPage > 0) {\n      try {\n        console.log('重新处理当前页面内容');\n        const page = await pdfDocument.getPage(currentPage);\n        \n        // 不使用任何额外处理，直接使用最原始的方式重新加载页面\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n        \n        // 根据当前模式设置内容\n        if (newMode === 'static') {\n          // 静态高亮模式 - 使用改进的句子处理\n          const html = formatSimpleHighlightedText(sentences);\n          console.log('设置静态高亮内容');\n          setContent(html);\n          \n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n        if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n              \n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n                \n                // 验证文字颜色\n                if (styles.color === 'rgb(51, 51, 51)' || styles.color === '#333333') {\n                  console.log('文字颜色正确应用');\n                } else {\n                  console.warn('文字颜色可能未正确应用:', styles.color);\n                }\n              }\n            } else {\n              console.error('未找到静态高亮模式内容区域');\n            }\n          }, 200);\n        } else if (newMode === 'flash-reading') {\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n            \n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n            \n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n            \n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n        } else {\n          // 其他模式保持不变\n          const handler = getContentHandlerForMode(newMode);\n          const processedContent = handler(sentences);\n          setContent(processedContent);\n        }\n      } catch (error) {\n        console.error('应用阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 首先确保移除鼠标跟随监听器\n    removeMouseFollowListeners();\n    \n    // 清理节奏阅读器\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    \n    // 清理闪读器\n    if (window.flashReader) {\n      window.flashReader.cleanup();\n    }\n    \n    // 清理舒适3D效果\n    const comfortable3DElements = document.querySelectorAll('.emboss-3d-text, .float-3d-text, .gradient-3d-text');\n    comfortable3DElements.forEach(el => el.remove());\n    \n    // 清理闪读模式元素\n    const flashReadingElements = document.querySelectorAll('.flash-reading-container, .flash-reading-display, .flash-reading-controls');\n    flashReadingElements.forEach(el => el.remove());\n    \n    // 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll(\n      '.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line, .rhythm-char'\n    );\n    highlights.forEach(el => {\n      if (el.parentNode) el.parentNode.removeChild(el);\n    });\n    \n    // 彻底替换内容区域以移除所有事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 先保存底部翻页控件\n      const bottomPagination = contentArea.querySelector('.bottom-pagination');\n      \n      // 深度克隆内容，但不克隆事件监听器\n      const contentHTML = contentArea.querySelector('div[dangerouslySetInnerHTML]')?.innerHTML || '';\n      const newContentArea = contentArea.cloneNode(false);\n      \n      // 创建新的内容容器\n      const newContentContainer = document.createElement('div');\n      newContentContainer.innerHTML = contentHTML;\n      newContentArea.appendChild(newContentContainer);\n      \n      // 如果有底部翻页控件，重新添加\n      if (bottomPagination && totalPages > 0) {\n        const newBottomPagination = bottomPagination.cloneNode(true);\n        // 重新绑定事件\n        const prevBtn = newBottomPagination.querySelector('.page-btn:first-child');\n        const nextBtn = newBottomPagination.querySelector('.page-btn:last-child');\n        if (prevBtn) prevBtn.onclick = () => changePage(-1);\n        if (nextBtn) nextBtn.onclick = () => changePage(1);\n        newContentArea.appendChild(newBottomPagination);\n      }\n      \n      if (contentArea.parentNode) {\n        contentArea.parentNode.replaceChild(newContentArea, contentArea);\n      }\n    }\n    \n    // 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 移除所有特殊标记和样式\n      paragraph.removeAttribute('data-follow');\n      paragraph.removeAttribute('style');\n      \n      // 清理特殊span标签\n      paragraph.innerHTML = paragraph.innerHTML\n        .replace(/<span class=\"text-line\"[^>]*>/g, '')\n        .replace(/<span class=\"rhythm-char\"[^>]*>/g, '')\n        .replace(/<span class=\"line-highlight[^\"]*\"[^>]*>/g, '')\n        .replace(/<span class=\"mouse-highlight[^\"]*\"[^>]*>/g, '')\n        .replace(/<\\/span>/g, '');\n    });\n    \n    // 移除特殊UI元素\n    const elementsToRemove = [\n      'rhythm-speed-slider',\n      'rhythm-notification'\n    ];\n    \n    elementsToRemove.forEach(id => {\n      const element = document.getElementById(id);\n      if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    });\n    \n    // 移除暗色背景\n    document.body.classList.remove('dark-background');\n    \n    // 清理闪读模式\n    if (window.flashReader && typeof window.flashReader.cleanup === 'function') {\n      window.flashReader.cleanup();\n    }\n  };\n\n  const handleAutoScroll = () => {\n    window.autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = (e) => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    \n    const rect = contentArea.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    \n    clearAllHighlights();\n    \n    const paragraphs = contentArea.querySelectorAll('p');\n    paragraphs.forEach(paragraph => {\n      const paragraphRect = paragraph.getBoundingClientRect();\n      const paragraphX = paragraphRect.left - rect.left;\n      const paragraphY = paragraphRect.top - rect.top;\n      \n      if (y >= paragraphY && y <= paragraphY + paragraphRect.height) {\n        const words = paragraph.querySelectorAll('span');\n        words.forEach(word => {\n          const wordRect = word.getBoundingClientRect();\n          const wordX = wordRect.left - rect.left;\n          \n          if (x >= wordX && x <= wordX + wordRect.width) {\n            word.classList.add('highlight');\n          }\n        });\n      }\n    });\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 专门用于移除鼠标跟随事件的函数\n  const removeMouseFollowListeners = () => {\n    // 移除记录的所有监听器\n    if (window.eventTracker && window.eventTracker.mouseFollowHandlers) {\n      window.eventTracker.mouseFollowHandlers.forEach(({element, event, handler}) => {\n        if (element && element.removeEventListener) {\n          element.removeEventListener(event, handler);\n        }\n      });\n      window.eventTracker.mouseFollowHandlers = [];\n    }\n    \n    // 为安全起见，尝试从document和内容区域移除通用处理函数\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    }\n    \n    document.removeEventListener('mousemove', handleMouseMove);\n    \n    // 清除所有当前高亮\n    clearAllHighlights();\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n    \n    // 添加底部翻页控件样式\n    const bottomPaginationStyles = document.createElement('style');\n    bottomPaginationStyles.id = 'bottom-pagination-styles';\n    bottomPaginationStyles.innerHTML = `\n      .bottom-pagination {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        padding: 20px 0 30px;\n        margin-top: 30px;\n        width: 100%;\n        background-color: transparent;\n        border-radius: 5px;\n      }\n\n      .bottom-pagination .page-btn {\n        background-color: #6c5ce7;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        padding: 8px 15px;\n        margin: 0 10px;\n        cursor: pointer;\n        font-size: 14px;\n        transition: background-color 0.2s ease;\n      }\n\n      .bottom-pagination .page-btn:hover {\n        background-color: #4834d4;\n      }\n\n      .bottom-pagination .page-btn:disabled {\n        background-color: #aaa;\n        cursor: not-allowed;\n      }\n\n      .bottom-pagination .page-info {\n        font-size: 14px;\n        margin: 0 10px;\n      }\n    `;\n    document.head.appendChild(bottomPaginationStyles);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n    addComfortable3DStyles();\n    \n    // 添加鼠标跟随模式的样式\n    const mouseFollowStyle = document.createElement('style');\n    mouseFollowStyle.id = 'intelligent-mouse-follow-style';\n    mouseFollowStyle.textContent = `\n      /* 基础样式 */\n      .mouse-follow-content {\n        position: relative;\n        line-height: 1.8;\n      }\n      \n      .mouse-follow-content .follow-line {\n        position: relative;\n        padding: 8px 16px;\n        margin: 4px 0;\n        border-radius: 6px;\n        transition: all 0.2s ease;\n        display: block;\n        min-height: 1.8em;\n        white-space: normal;\n        word-wrap: break-word;\n        text-indent: 2em;\n      }\n      \n      /* 高亮状态 */\n      .follow-line.highlighted {\n        background-color: #ffa500 !important; /* 橙色背景 */\n        color: #ffffff !important; /* 白色文字 */\n        font-weight: bold !important;\n        font-size: 1.1em; /* 稍微调小字号 */\n        transform: translateX(5px);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n      }\n      \n      \n      /* 平滑过渡效果 */\n      .follow-line {\n        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n      }\n      \n      /* 行间距优化 */\n      .mouse-follow-content .follow-line + .follow-line {\n        margin-top: 4px;\n      }\n      \n      /* 添加行指示器 */\n      .follow-line::before {\n        content: '';\n        position: absolute;\n        left: 0;\n        top: 0;\n        bottom: 0;\n        width: 3px;\n        background: linear-gradient(to bottom, transparent, rgba(255, 255, 255, 0.5), transparent);\n        opacity: 0;\n        transition: opacity 0.2s ease;\n      }\n      \n      .follow-line.highlighted::before {\n        opacity: 1;\n      }\n    `;\n    document.head.appendChild(mouseFollowStyle);\n    \n    // 创建深色背景下的ADHD友好高亮样式\n    const style = document.createElement('style');\n    style.id = 'adhd-friendly-highlight-style';\n    style.textContent = `\n      /* ADHD友好的高亮样式 - 适配深色背景 */\n      .adhd-highlight-mode {\n        line-height: 1.8;\n        padding: 20px;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph {\n        margin-bottom: 1.2em;\n        background-color: transparent;\n        padding: 12px 15px;\n        border-radius: 6px;\n        border-left: 3px solid rgba(255, 255, 255, 0.2);\n        transition: all 0.3s ease;\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover {\n        transform: translateX(5px);\n        border-left-color: rgba(255, 255, 255, 0.4);\n      }\n      \n      /* 加粗样式 - 白色加粗 */\n      .adhd-bold {\n        font-weight: 700;\n        color: #ffffff;\n        letter-spacing: 0.02em;\n        font-size: 1.1em;\n        text-shadow: 0 0 1px rgba(255, 255, 255, 0.2);\n      }\n      \n      /* 彩色样式 - 使用鲜明的蓝色 */\n      .adhd-colored {\n        color: #6c5ce7;\n        font-weight: 500;\n        font-size: 1.05em;\n        text-shadow: 0 0 1px rgba(108, 92, 231, 0.2);\n      }\n      \n      /* 正常样式 - 普通白色 */\n      .adhd-normal {\n        color: rgba(255, 255, 255, 0.8);\n        font-size: 1em;\n      }\n\n      /* 添加平滑过渡效果 */\n      .adhd-bold, .adhd-colored, .adhd-normal {\n        transition: all 0.2s ease;\n      }\n\n      /* 悬停效果 */\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-bold {\n        color: #ffffff;\n        text-shadow: 0 0 2px rgba(255, 255, 255, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-colored {\n        color: #8a7ff7;\n        text-shadow: 0 0 2px rgba(138, 127, 247, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-normal {\n        color: rgba(255, 255, 255, 0.9);\n      }\n\n      /* 添加段落间距的视觉引导 */\n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph {\n        margin-top: 1.5em;\n        position: relative;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph::before {\n        content: '';\n        position: absolute;\n        top: -0.75em;\n        left: 0;\n        right: 0;\n        height: 1px;\n        background: linear-gradient(\n          to right,\n          transparent,\n          rgba(255, 255, 255, 0.1),\n          transparent\n        );\n      }\n    `;\n    document.head.appendChild(style);\n    \n    // 添加基础鼠标跟随样式\n    const mouseFollowPageStyle = document.createElement('style');\n    mouseFollowPageStyle.id = 'basic-mouse-follow-style';\n    mouseFollowPageStyle.textContent = `\n      .follow-line {\n        padding: 8px 12px;\n        margin: 4px 0;\n        border-radius: 4px;\n        transition: background-color 0.2s ease;\n      }\n      .follow-line.highlighted {\n        background-color: #ffa500;\n        color: #000080;\n        font-weight: bold;\n      }\n    `;\n    document.head.appendChild(mouseFollowPageStyle);\n    \n    return () => {\n      const existingStyle = document.getElementById('adhd-friendly-highlight-style');\n      if (existingStyle) existingStyle.remove();\n      \n      const existingMouseFollowStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (existingMouseFollowStyle) existingMouseFollowStyle.remove();\n      \n      const existingBasicMouseFollowStyle = document.getElementById('basic-mouse-follow-style');\n      if (existingBasicMouseFollowStyle) existingBasicMouseFollowStyle.remove();\n      \n      mouseFollowPageStyle.remove();\n    };\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 清理旧监听器\n    removeMouseFollowListeners();\n    \n    // 添加新监听器\n    setTimeout(() => {\n      addMouseFollowListeners();\n      \n      // 添加调试辅助 - 显示行边界\n      const contentArea = document.querySelector('.mouse-follow-content');\n      if (contentArea) {\n        const lines = contentArea.querySelectorAll('.follow-line');\n        console.log(`初始化鼠标跟随模式，共 ${lines.length} 行`);\n        \n        // 可选：启用可视化调试\n        if (false) { // 设置为true可以启用可视化调试\n          lines.forEach((line, index) => {\n            line.style.border = '1px dashed #888';\n            line.setAttribute('title', `行 ${index+1}`);\n          });\n        }\n        \n        // 验证行高亮效果\n        const firstLine = lines[0];\n        if (firstLine) {\n          console.log('行样式验证:', {\n            padding: window.getComputedStyle(firstLine).padding,\n            margin: window.getComputedStyle(firstLine).margin,\n            fontSize: window.getComputedStyle(firstLine).fontSize,\n            lineHeight: window.getComputedStyle(firstLine).lineHeight\n          });\n        }\n      }\n    }, 100);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = (delta) => {\n    window.autoReader.speed = Math.max(100, window.autoReader.speed + delta);\n    \n    if (window.autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async (delta) => {\n    // 添加安全检查，确保rhythmReader对象存在\n    if (typeof window.rhythmReader === 'undefined') {\n      window.rhythmReader = {\n        active: false,\n        speed: 150,\n        pagesRead: 0,\n        intervalId: null\n      };\n      console.log(\"重新初始化rhythmReader对象\");\n    }\n    \n    // 如果正在进行节奏阅读，先停止\n    if (window.rhythmReader && window.rhythmReader.active) {\n      if (typeof window.rhythmReader.stop === 'function') {\n        window.rhythmReader.stop();\n      } else {\n        // 如果stop函数不存在，尝试手动清理\n        if (window.rhythmReader.intervalId) {\n          clearInterval(window.rhythmReader.intervalId);\n          window.rhythmReader.intervalId = null;\n        }\n        window.rhythmReader.active = false;\n      }\n    }\n    \n    // 继续原有的changePage逻辑\n    console.log(`翻页请求: 当前页 ${currentPage}, 增量 ${delta}`);\n    const newPage = currentPage + delta;\n    \n    if (newPage < 1 || newPage > totalPages) {\n      console.log('无效页码，不执行翻页');\n          return;\n        }\n    \n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n    const wasFlashReading = readingMode === 'flash-reading' && window.flashReader && window.flashReader.isPlaying;\n    \n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    \n    if (wasFlashReading && window.flashReader) {\n      window.flashReader.cleanup();\n    }\n    \n    // 更新页码\n    setCurrentPage(newPage);\n    \n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n      \n      // 检查是否为目录页\n      const textContent = await page.getTextContent();\n      const isToc = await detectIfTocPage(textContent);\n      setIsTableOfContents(isToc);\n      \n      if (isToc) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, page.getViewport({ scale: 1.0 }));\n      } else {\n        // 处理正文页面 - 根据当前阅读模式处理\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n        \n        // 根据当前模式设置内容\n        if (readingMode === 'static') {\n          console.log('翻页后应用静态高亮模式');\n          const processedContent = formatSimpleHighlightedText(sentences);\n          setContent(processedContent);\n          \n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n            if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n              \n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n              }\n            }\n          }, 200);\n        } else if (readingMode === 'flash-reading') {\n          // 如果是闪读模式，则需要特殊处理\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n            \n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n            \n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n            \n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n          return; // 已处理，直接返回\n        } else {\n          // 其他模式使用原处理函数\n          await processContentPage(page, readingMode);\n        }\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n          setTimeout(() => {\n          addMouseFollowListeners();\n          }, 50);\n      }\n    } catch (error) {\n      console.error('页面切换错误:', error);\n    }\n  };\n\n  // ADHD友好的静态高亮处理函数\n  const formatSimpleHighlightedText = (sentences) => {\n    console.log('开始处理ADHD友好的静态高亮文本，句子数量:', sentences.length);\n    \n    let html = '<div class=\"pdf-content adhd-highlight-mode\">';\n    \n    sentences.forEach((sentence, sentenceIndex) => {\n      if (!sentence || sentence.trim() === '') {\n        console.log(`跳过空句子，索引: ${sentenceIndex}`);\n      return;\n    }\n    \n      // 清理和规范化文本\n      const cleanText = sentence\n        .trim()\n        .replace(/\\s+/g, ' ')  // 规范化空白字符\n        .replace(/&/g, '&amp;')  // 转义特殊字符\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n      \n      // 处理句子中的单词，为它们添加不同样式\n      const words = cleanText.split(/(\\s+)/);\n      let formattedSentence = '';\n      \n      words.forEach((word, wordIndex) => {\n        if (word.trim() === '') {\n          // 保留空格\n          formattedSentence += word;\n      } else {\n          // 根据位置应用不同的样式类\n          // 三种交替样式: 加粗、彩色、正常\n          const styleClass = wordIndex % 3 === 0 ? 'adhd-bold' : \n                           wordIndex % 3 === 1 ? 'adhd-colored' : 'adhd-normal';\n          \n          formattedSentence += `<span class=\"${styleClass}\">${word}</span>`;\n        }\n      });\n      \n      console.log(`处理句子 ${sentenceIndex + 1}:`, cleanText.substring(0, 50) + '...');\n      html += `<p class=\"pdf-paragraph\">${formattedSentence}</p>`;\n    });\n    \n    html += '</div>';\n    \n    // 调试输出\n    console.log('生成的ADHD友好静态高亮HTML:', html.substring(0, 200) + '...');\n    \n    return html;\n  };\n\n  // 根据阅读模式获取相应的内容处理函数\n  const getContentHandlerForMode = (mode) => {\n    switch(mode) {\n      case 'normal': return formatSentencesToHtml;\n      case 'static': return applyStaticHighlightToSentences;\n      case 'follow-mouse': return formatSentencesForMouseFollow;\n      case 'comfortable-3d': return applyComfortable3dEffectToSentences;\n      case 'flash-reading': \n        return (sentences) => {\n          // 闪读模式使用专门的分割函数重新处理文本\n          return createFlashReadingContentFromSentences(sentences);\n        };\n      default: return formatSentencesToHtml;\n    }\n  };\n\n  // 监听阅读模式和当前页面的变化\n  useEffect(() => {\n    if (readingMode === 'mouse-follow' && currentPage && !isTableOfContents) {\n      // 移除之前的样式\n      const oldStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (oldStyle) {\n        oldStyle.remove();\n      }\n      \n      // 添加基础鼠标跟随样式\n      const followModeStyle = document.createElement('style');\n      followModeStyle.id = 'basic-mouse-follow-style';\n      followModeStyle.textContent = `\n        .follow-line {\n          padding: 8px 12px;\n          margin: 4px 0;\n          border-radius: 4px;\n          transition: background-color 0.2s ease;\n        }\n        .follow-line.highlighted {\n          background-color: #ffa500;\n          color: #000080;\n        font-weight: bold;\n        }\n      `;\n      document.head.appendChild(followModeStyle);\n      \n      // 处理当前页面内容\n      const page = pdfDocument.getPage(currentPage);\n      const textContent = page.getTextContent();\n      const sentences = textContent.items\n        .map(item => item.str)\n        .join(' ')\n        .split(/[。！？]/)\n        .filter(s => s.trim());\n      \n      // 应用基础鼠标跟随格式化\n      setContent(formatSentencesForMouseFollow(sentences));\n      \n      // 添加鼠标跟随监听器\n      setTimeout(() => {\n        addMouseFollowListeners();\n      }, 100);\n      \n      return () => {\n        followModeStyle.remove();\n      };\n    }\n  }, [readingMode, currentPage, pdfDocument]);\n\n  // 添加全局节奏阅读速度控制器\n  (function() {\n    console.log(\"初始化全局节奏阅读速度控制器\");\n\n    // 配置参数和状态变量\n    let readingSpeed = 150; // 默认速度改为150ms，更快\n    \n    // 创建独立的速度滑块UI\n    function createRhythmSpeedSlider() {\n      console.log(\"创建节奏阅读速度控制器...\");\n      \n      // 先检查是否已存在\n      let existingSlider = document.getElementById('rhythm-speed-slider-container');\n      if (existingSlider) existingSlider.remove();\n      \n      // 创建容器\n      const container = document.createElement('div');\n      container.id = 'rhythm-speed-slider-container';\n      container.style.cssText = `\n        position: fixed;\n        top: 50px;\n        right: 10px;\n        background: rgba(0, 0, 0, 0.5);\n        padding: 5px;\n        z-index: 9999999;\n        display: flex;\n        flex-direction: column;\n        width: 60px;\n        border-radius: 4px;\n      `;\n      \n      // 添加标签\n      const label = document.createElement('div');\n      label.textContent = readingSpeed + \"ms\";\n      label.id = 'rhythm-speed-label';\n      label.style.cssText = `\n        color: white;\n        font-size: 12px;\n        font-weight: bold;\n        margin-bottom: 5px;\n        text-align: center;\n      `;\n      container.appendChild(label);\n      \n      // 添加滑块\n      const slider = document.createElement('input');\n      slider.type = 'range';\n      slider.min = '30';\n      slider.max = '400';\n      slider.step = '10';\n      slider.value = readingSpeed;\n      slider.style.cssText = `\n        width: 150px;\n        height: 20px;\n        transform: rotate(90deg);\n        transform-origin: left center;\n        margin: 70px 0 0 -45px;\n      `;\n      \n      // 滑块事件\n      slider.oninput = function() {\n        readingSpeed = parseInt(this.value);\n        label.textContent = readingSpeed + \"ms\";\n        \n        console.log(\"节奏阅读速度已调整为:\", readingSpeed);\n        \n        // 尝试使用全局节奏阅读控制接口\n        if (window.rhythmReading && typeof window.rhythmReading.updateSpeed === 'function') {\n          window.rhythmReading.updateSpeed(readingSpeed);\n          return;\n        }\n        \n        // 如果全局接口不可用，使用备用方法\n        // 更新全局变量中的速度值\n        window.rhythmReadingSpeed = readingSpeed;\n        \n        // 查找当前活动的节奏阅读实例并更新速度\n        const updateActiveRhythmReader = function() {\n          // 不直接引用intervalId和nextChar变量\n          /* 原代码会导致错误\n          if (typeof intervalId !== 'undefined' && intervalId) {\n            clearInterval(intervalId);\n            intervalId = setInterval(nextChar, readingSpeed);\n            console.log(\"已更新节奏阅读模式速度\");\n          }\n          */\n          \n          // 如果是自动翻页版本的节奏阅读\n          if (window.rhythmReader && typeof window.rhythmReader.updateSpeed === 'function') {\n            window.rhythmReader.updateSpeed(readingSpeed);\n            console.log(\"已更新rhythmReader速度\");\n          }\n          \n          // 查找全局作用域中的其他intervalId实例\n          for (let key in window) {\n            if (key.includes('rhythm') && key.includes('Interval') && window[key]) {\n              try {\n                clearInterval(window[key]);\n                // 不直接引用nextChar变量\n                if (typeof window['nextChar'] === 'function') {\n                  window[key] = setInterval(window['nextChar'], readingSpeed);\n                } else if (typeof window['advanceChar'] === 'function') {\n                  window[key] = setInterval(window['advanceChar'], readingSpeed);\n                } else if (typeof window['moveToNextChar'] === 'function') {\n                  window[key] = setInterval(window['moveToNextChar'], readingSpeed);\n                } else {\n                  console.log(`找到interval ${key} 但未找到对应的nextChar函数`);\n                  continue;\n                }\n                console.log(\"已更新\", key, \"的速度\");\n              } catch(e) {\n                console.error(\"更新\", key, \"速度失败\", e);\n              }\n            }\n          }\n        };\n        \n        updateActiveRhythmReader();\n      };\n      \n      container.appendChild(slider);\n      document.body.appendChild(container);\n      console.log(\"节奏阅读速度控制器已添加到DOM！\");\n      return container;\n    }\n    \n    // 页面加载完成后添加滑块\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', function() {\n        setTimeout(createRhythmSpeedSlider, 1000);\n      });\n    } else {\n      setTimeout(createRhythmSpeedSlider, 1000);\n    }\n    \n    // 暴露给全局，供其他脚本使用\n    window.createRhythmSpeedSlider = createRhythmSpeedSlider;\n    window.rhythmReadingSpeed = readingSpeed;\n  })();\n\n  // 纯手动节奏阅读模式 - 双按钮版\n  (function() {\n    // 避免重复初始化\n    if (window.simpleRhythmReaderActive) {\n      console.log(\"节奏阅读模式已经在运行中\");\n      return;\n    }\n    \n    console.log(\"初始化纯手动节奏阅读模式 - 双按钮版\");\n    \n    // 局部变量，避免全局污染\n    let active = false;\n    let readingSpeed = 150; // 默认速度\n    let charElements = [];\n    let currentIndex = 0;\n    let readIndices = new Set();\n    let intervalId = null;\n    \n    // 创建读完提示\n    function showCompletionMessage() {\n      // 停止阅读\n      if (intervalId) {\n        clearInterval(intervalId);\n        intervalId = null;\n      }\n      \n      const message = document.createElement('div');\n      message.style.cssText = `\n        position: fixed;\n        bottom: 20px;\n        left: 50%;\n        transform: translateX(-50%);\n        background: #333;\n        color: white;\n        padding: 10px 20px;\n        border-radius: 4px;\n        font-size: 16px;\n        z-index: 999999;\n      `;\n      message.textContent = \"本页已读完，请手动翻页后点击右上角'开始阅读'继续\";\n      document.body.appendChild(message);\n      \n      setTimeout(() => {\n        if (message.parentNode) {\n          message.parentNode.removeChild(message);\n        }\n      }, 5000);\n    }\n    \n    // 更新字符显示\n    function updateDisplay() {\n      charElements.forEach((span, index) => {\n        if (index === currentIndex) {\n          span.style.color = 'green';\n          span.style.fontWeight = 'bold';\n        } else if (readIndices.has(index)) {\n          span.style.color = '';\n        } else {\n          span.style.color = 'rgba(200,200,200,0.3)';\n        }\n      });\n    }\n    \n    // 字符处理函数\n    function processNextChar() {\n      if (!active || !charElements.length) return;\n      \n      readIndices.add(currentIndex);\n      \n      currentIndex++;\n      if (currentIndex >= charElements.length) {\n        active = false;\n        showCompletionMessage();\n        return;\n      }\n      \n      updateDisplay();\n      \n      // 确保当前字符在视图内\n      const currentChar = charElements[currentIndex];\n      if (currentChar) {\n        const rect = currentChar.getBoundingClientRect();\n        if (rect.top < 0 || rect.bottom > window.innerHeight) {\n          currentChar.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center'\n          });\n        }\n      }\n    }\n    \n    // 清理函数\n    function cleanup() {\n      if (intervalId) {\n        clearInterval(intervalId);\n        intervalId = null;\n      }\n      \n      active = false;\n      \n      try {\n        // 恢复原始文本\n        document.querySelectorAll('.rhythm-char').forEach(span => {\n          if (span.parentNode) {\n            span.parentNode.replaceChild(document.createTextNode(span.textContent), span);\n          }\n        });\n      } catch(e) {\n        console.error(\"清理失败:\", e);\n      }\n      \n      // 清理控制面板\n      const controller = document.getElementById('rhythm-reader-control');\n      if (controller) controller.remove();\n      \n      // 清理速度控制器\n      const speedSlider = document.getElementById('rhythm-speed-slider-container');\n      if (speedSlider) speedSlider.remove();\n      \n      charElements = [];\n      currentIndex = 0;\n      readIndices.clear();\n      \n      // 重置全局标识\n      window.simpleRhythmReaderActive = false;\n    }\n    \n    // 启动阅读\n    function startReading() {\n      // 清理之前的状态\n      cleanup();\n      \n      // 设置标识\n      window.simpleRhythmReaderActive = true;\n      \n      // 查找文本内容\n      const textNodes = [];\n      const container = document.querySelector('article') || \n                        document.querySelector('main') || \n                        document.body;\n      \n      function findTextNodes(element) {\n        if (!element) return;\n        \n        for (let i = 0; i < element.childNodes.length; i++) {\n          const node = element.childNodes[i];\n          if (node.nodeType === 3 && node.textContent.trim()) {\n            textNodes.push(node);\n          } else if (node.nodeType === 1 && \n                    !['SCRIPT', 'STYLE', 'NOSCRIPT', 'BUTTON', 'INPUT'].includes(node.tagName)) {\n            findTextNodes(node);\n          }\n        }\n      }\n      \n      findTextNodes(container);\n      \n      if (!textNodes.length) {\n        alert(\"未找到文本内容！\");\n        return;\n      }\n      \n      // 处理文本节点\n      textNodes.forEach(node => {\n        if (!node.textContent.trim() || !node.parentNode) return;\n        \n        const fragment = document.createDocumentFragment();\n        const text = node.textContent;\n        \n        for (let i = 0; i < text.length; i++) {\n          const char = text[i];\n          const span = document.createElement('span');\n          span.className = 'rhythm-char';\n          span.textContent = char;\n          fragment.appendChild(span);\n          charElements.push(span);\n        }\n        \n        node.parentNode.replaceChild(fragment, node);\n      });\n      \n      if (!charElements.length) {\n        alert(\"处理文本失败！\");\n        return;\n      }\n      \n      // 开始阅读\n      active = true;\n      currentIndex = 0;\n      updateDisplay();\n      intervalId = setInterval(processNextChar, readingSpeed);\n    }\n    \n    // 初始化\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', () => {\n        startReading();\n      });\n    } else {\n      startReading();\n    }\n  })();\n\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        <div className=\"logo\">\n          <h2>ADHD阅读助手</h2>\n        </div>\n        \n        <div className=\"reading-controls\">\n          <h3>阅读模式</h3>\n          <select \n            id=\"reading-mode-select\" \n            value={readingMode} \n            onChange={handleReadingModeChange}\n            className=\"mode-select\"\n          >\n            <option value=\"normal\">普通模式</option>\n            <option value=\"static\">静态高亮</option>\n            <option value=\"follow-mouse\">鼠标跟随</option>\n            <option value=\"rhythm\">节奏阅读</option>\n            <option value=\"flash-reading\">闪读模式</option>\n          </select>\n        </div>\n        \n        <div className=\"upload-section\">\n          <input\n            type=\"file\"\n            accept=\".pdf,.txt,.md\" \n            hidden\n            id=\"file-upload\"\n            onChange={handleFileUpload}\n            ref={fileRef}\n          />\n          <button \n            className=\"upload-btn\"\n            onClick={() => fileRef.current.click()}\n          >\n            上传文件 (.pdf/.txt/.md)\n          </button>\n      </div>\n          </div>\n          \n      <div className=\"main-content\">\n        <div className=\"toolbar\">\n          {fileName && <h3 className=\"filename\">{fileName}</h3>}\n          {/* 移除了原有翻页控件 */}\n            </div>\n          \n        <div className=\"page-content\" ref={readerContainerRef}>\n            <div dangerouslySetInnerHTML={{ __html: content }} />\n          \n          {totalPages > 0 && (\n            <div className=\"bottom-pagination\">\n              <button \n                onClick={() => changePage(-1)} \n                disabled={currentPage <= 1}\n                className=\"page-btn\"\n              >\n                上一页\n              </button>\n            <span className=\"page-info\">\n                第 {currentPage} / {totalPages} 页\n              </span>\n              <button \n                onClick={() => changePage(1)} \n                disabled={currentPage >= totalPages}\n                className=\"page-btn\"\n              >\n                下一页\n              </button>\n          </div>\n        )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App; \n\n// 添加全局访问点，用于节奏阅读速度控制\n(function setupRhythmReadingGlobals() {\n  // 检查文档是否已加载\n  const whenDocumentReady = (fn) => {\n    if (document.readyState !== 'loading') {\n      fn();\n      } else {\n      document.addEventListener('DOMContentLoaded', fn);\n    }\n  };\n  \n  whenDocumentReady(() => {\n    // 创建全局命名空间\n    window.rhythmReading = window.rhythmReading || {};\n    \n    // 尝试查找节奏阅读的nextChar函数和intervalId\n    let foundNextChar = false;\n    \n    // 设置全局监听，捕获所有setInterval调用\n    const originalSetInterval = window.setInterval;\n    window.setInterval = function(fn, delay) {\n      const intervalId = originalSetInterval.apply(this, arguments);\n      \n      // 检测是否为节奏阅读相关的interval\n      if (fn.toString().includes('nextChar') || \n          fn.toString().includes('readIndices') || \n          fn.toString().includes('currentIndex++')) {\n        console.log(\"捕获到节奏阅读interval:\", intervalId);\n        window.rhythmReading.activeIntervalId = intervalId;\n        window.rhythmReading.nextCharFn = fn;\n        window.rhythmReading.currentDelay = delay;\n        foundNextChar = true;\n      }\n      \n      return intervalId;\n    };\n    \n    // 暴露更新速度的函数\n    window.rhythmReading.updateSpeed = function(newSpeed) {\n      if (window.rhythmReading.activeIntervalId) {\n        clearInterval(window.rhythmReading.activeIntervalId);\n        if (window.rhythmReading.nextCharFn) {\n          window.rhythmReading.activeIntervalId = \n            setInterval(window.rhythmReading.nextCharFn, newSpeed);\n          window.rhythmReading.currentDelay = newSpeed;\n          console.log(\"节奏阅读速度已更新为:\", newSpeed);\n          return true;\n        }\n      }\n      \n      // 如果找不到活动的interval，尝试遍历所有可能的节奏阅读实例\n      for (let key in window) {\n        if (key.toLowerCase().includes('rhythm') && window[key]) {\n          // 如果是对象且有updateSpeed方法\n          if (typeof window[key] === 'object' && typeof window[key].updateSpeed === 'function') {\n            try {\n              window[key].updateSpeed(newSpeed);\n              console.log(\"已更新\", key, \"的速度\");\n              return true;\n            } catch(e) {\n              console.error(\"更新\", key, \"速度失败\", e);\n            }\n          }\n        }\n      }\n      \n      console.warn(\"未找到活动的节奏阅读实例\");\n      return false;\n    };\n    \n    console.log(\"节奏阅读全局控制已设置\");\n  });\n})(); \n"],"mappings":"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AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDP,QAAQ,CAACoK,IAAI,CAACtI,WAAW,CAAC+Z,gBAAgB,CAAC;;IAE3C;IACA,MAAMla,KAAK,GAAG3B,QAAQ,CAAC0B,aAAa,CAAC,OAAO,CAAC;IAC7CC,KAAK,CAACV,EAAE,GAAG,+BAA+B;IAC1CU,KAAK,CAACpB,WAAW,GAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDP,QAAQ,CAACoK,IAAI,CAACtI,WAAW,CAACH,KAAK,CAAC;;IAEhC;IACA,MAAMma,oBAAoB,GAAG9b,QAAQ,CAAC0B,aAAa,CAAC,OAAO,CAAC;IAC5Doa,oBAAoB,CAAC7a,EAAE,GAAG,0BAA0B;IACpD6a,oBAAoB,CAACvb,WAAW,GAAG;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDP,QAAQ,CAACoK,IAAI,CAACtI,WAAW,CAACga,oBAAoB,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}