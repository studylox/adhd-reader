{"ast":null,"code":"var _jsxFileName = \"D:\\\\adhd-read-helper\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 新增全局变量\nlet autoReader = {\n  currentIndex: 0,\n  charPositions: [],\n  intervalId: null,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false\n};\n\n// 节奏阅读模式\nconst rhythmReader = {\n  active: false,\n  intervalId: null,\n  speed: 300,\n  currentIndex: 0,\n  readIndices: new Set(),\n  charElements: [],\n  // 存储字符元素的引用\n  waitingForNextPage: false,\n  // 新增：标记是否正在等待下一页\n  pageObserver: null // 新增：页面变化观察器\n};\n\n// 模拟NLP词性标注功能（实际应用中建议使用专业NLP库如nlp.js或调用API）\nconst tagPartsOfSpeech = text => {\n  // 定义所有标点符号\n  const punctuationMarks = ['，', '。', '！', '？', '；', '：', '（', '）', '【', '】', '《', '》', '〈', '〉', '…', '—', '～', '·', ',', '.', '!', '?', ';', ':', '(', ')', '[', ']', '{', '}', '-', '...', '..'];\n\n  // 将文本按标点符号分割，保留标点符号\n  const segments = text.split(new RegExp(`([${punctuationMarks.map(mark => '\\\\' + mark).join('')}])`));\n  let result = '';\n  let colorIndex = 0; // 0: 红色, 1: 蓝色, 2: 黑色\n  let currentText = '';\n  segments.forEach((segment, index) => {\n    // 跳过空字符串和纯空格\n    if (!segment || /^\\s+$/.test(segment)) {\n      result += segment;\n      return;\n    }\n\n    // 检查是否是标点符号\n    const isPunctuation = punctuationMarks.includes(segment);\n\n    // 根据索引选择颜色\n    let color;\n    switch (colorIndex) {\n      case 0:\n        color = 'red';\n        break;\n      case 1:\n        color = 'blue';\n        break;\n      case 2:\n        color = 'black';\n        break;\n      default:\n        color = 'black';\n    }\n\n    // 将当前文本和标点符号放在同一个颜色块中\n    if (isPunctuation) {\n      // 如果有累积的文本，先添加文本\n      if (currentText) {\n        result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n        currentText = '';\n      }\n      // 添加标点符号\n      result += `<span class=\"highlight-word ${color}\">${segment}</span>`;\n      // 切换颜色\n      colorIndex = (colorIndex + 1) % 3;\n    } else {\n      // 累积文本\n      currentText += segment;\n    }\n  });\n\n  // 处理最后可能剩余的文本\n  if (currentText) {\n    const color = colorIndex === 0 ? 'red' : colorIndex === 1 ? 'blue' : 'black';\n    result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n  }\n  return result;\n};\nconst App = () => {\n  _s();\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const autoReadGuideRef = useRef(null);\n  const autoReadIntervalRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n\n  // 新增自动阅读器状态\n  const [autoReaderState, setAutoReaderState] = useState({\n    currentIndex: 0,\n    charPositions: [],\n    intervalId: null,\n    speed: 300,\n    pageContainer: null,\n    isUserScrolling: false,\n    scrollTimeout: null,\n    contentLoaded: false\n  });\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n    return () => {\n      // 清理自动阅读定时器\n      if (autoReadIntervalRef.current) {\n        clearInterval(autoReadIntervalRef.current);\n      }\n    };\n  }, []);\n\n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async file => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n\n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n\n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n\n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({\n        scale: 1.0\n      });\n\n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async textContent => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n\n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n\n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n\n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    const lines = [...lineMap.values()];\n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    return hasTocKeywords || hasPageNumberPatterns || shortLineRatio > 0.7 && numberLineRatio > 0.3;\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n\n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n\n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n\n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n\n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = text => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    return result;\n  };\n\n  // 修改processContentPage函数\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n\n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch (mode) {\n        case 'normal':\n          // 普通模式 - 简单分段显示\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'static':\n          // 静态高亮模式 - 应用词性标注和颜色高亮\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'follow-mouse':\n          // 鼠标跟随高亮模式 - 分段落但不预先高亮，由鼠标事件触发高亮\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      setContent(processedContent);\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async file => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain') {\n      handleTxtFile(file);\n    } else {\n      alert('请上传PDF或TXT文件');\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = container => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n\n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n\n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n\n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width / 2,\n            // 水平中心\n            y: rect.bottom,\n            // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n\n    // 过滤无效位置并排序\n    return positions.filter(p => p.char.trim() !== '').sort((a, b) => {\n      // 先按行排序，同行按列排序\n      const yDiff = a.y - b.y;\n      if (Math.abs(yDiff) > 5) {\n        // 5px阈值判断是否同一行\n        return yDiff;\n      }\n      return a.x - b.x;\n    });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n\n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - containerVisibleHeight / 2;\n\n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - window.innerHeight / 2;\n\n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n\n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n\n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length ||\n      // 已到末尾\n      positions[nextIndex].char.trim() === '' ||\n      // 下一个是空白\n      positions[nextIndex].y > charPosition.y + 5) {\n        // 下一个在新行\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n\n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n\n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || current.y > prev.y + 5) {\n        // 有明显换行\n        break;\n      }\n      start--;\n    }\n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n\n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n\n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages) {\n        changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 重置索引到开头\n    autoReader.currentIndex = 0;\n\n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n\n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n\n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none'; // 不干扰鼠标事件\n      highlight.style.zIndex = '998'; // 确保在光标下层\n      contentContainer.appendChild(highlight);\n    }\n\n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n\n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20; // 默认估计值\n\n    // 尝试获取实际行高\n    if (autoReader.charPositions.length > 1) {\n      // 查找两个垂直位置不同的相邻字符\n      for (let i = 1; i < autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(autoReader.charPositions[i].y - autoReader.charPositions[i - 1].y);\n        if (yDiff > 5) {\n          // 认为有垂直距离差的是不同行\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n\n    // 记录上次滚动的位置，避免在同一区域重复滚动\n    let lastScrolledY = -1;\n    // 设置滚动安全区域（像素）\n    const scrollSafeZone = lineHeight * 2.5; // 增加安全区域适应2行滚动\n\n    // 设置字符大小的估计值（用于高亮）\n    let charWidth = 20; // 默认估计值\n    let charHeight = lineHeight * 0.8; // 设为行高的80%，看起来更自然\n\n    // 尝试估计字符宽度\n    if (autoReader.charPositions.length > 1) {\n      for (let i = 1; i < autoReader.charPositions.length; i++) {\n        if (autoReader.charPositions[i].x !== autoReader.charPositions[i - 1].x) {\n          const xDiff = Math.abs(autoReader.charPositions[i].x - autoReader.charPositions[i - 1].x);\n          if (xDiff > 0 && xDiff < 50) {\n            // 合理的字符宽度范围\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (autoReader.currentIndex < autoReader.charPositions.length && ((_autoReader$charPosit = autoReader.charPositions[autoReader.currentIndex]) === null || _autoReader$charPosit === void 0 ? void 0 : _autoReader$charPosit.char.trim()) === '') {\n        var _autoReader$charPosit;\n        autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (autoReader.currentIndex >= autoReader.charPositions.length) {\n        if (currentPage < totalPages) {\n          changePage(1);\n          clearInterval(autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n      const pos = autoReader.charPositions[autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      if (cursor && highlight) {\n        // 获取容器的位置\n        const contentRect = contentContainer.getBoundingClientRect();\n\n        // 计算光标相对于容器的坐标\n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n\n        // 更新光标位置为相对容器的坐标\n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n\n        // 更新高亮位置和大小\n        highlight.style.left = `${relativeX - charWidth / 2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n\n        // ===== 仅在需要时滚动2行高度 =====\n\n        // 检查是否已经在相近位置滚动过（避免同一区域重复滚动）\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          if (isContainerScrollable) {\n            // 容器滚动情况\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n\n            // 如果超出底部可见区域\n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2; // 滚动2行高度\n            }\n            // 如果超出顶部可见区域\n            else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2; // 向上滚动2行高度\n            }\n\n            // 仅在需要滚动时执行一次滚动\n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              // 记录此次滚动位置\n              lastScrolledY = relativeY;\n            }\n          } else {\n            // 窗口滚动情况\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n\n            // 如果超出底部可见区域\n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2; // 滚动2行高度\n            }\n            // 如果超出顶部可见区域\n            else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2; // 向上滚动2行高度\n            }\n\n            // 仅在需要滚动时执行一次滚动\n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              // 记录此次滚动位置\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      autoReader.currentIndex++;\n    }, autoReader.speed);\n\n    // 在停止自动阅读时清除所有高亮\n    autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n\n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (autoReader.intervalId) {\n      clearInterval(autoReader.intervalId);\n      autoReader.intervalId = null;\n\n      // 调用清理函数\n      if (autoReader.cleanup) {\n        autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n\n    // 重置翻页状态\n    autoReader.isPageChanging = false;\n\n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n\n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n\n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n\n    // 收集字符位置\n    autoReader.charPositions = getAllCharacterPositions(content);\n\n    // 如果当前页没有内容，尝试翻页\n    if (autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !autoReader.isPageChanging) {\n        autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async e => {\n    const newMode = e.target.value;\n\n    // 停止当前可能正在运行的自动阅读和节奏阅读\n    stopAutoReader();\n    stopRhythmReading();\n\n    // 清理旧模式\n    cleanupDOM();\n\n    // 更新状态\n    setReadingMode(newMode);\n\n    // 应用新模式\n    if (pdfDocument && currentPage > 0) {\n      try {\n        const page = await pdfDocument.getPage(currentPage);\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        let processedContent = '';\n\n        // 应用对应模式的文本处理\n        switch (newMode) {\n          case 'follow-mouse':\n            processedContent = formatTextForMouseFollow(extractedText);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlight(extractedText);\n            break;\n          case 'auto-reader':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          case 'rhythm':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          default:\n            processedContent = formatTextToHtml(extractedText);\n        }\n        const contentArea = document.querySelector('.page-content');\n        if (contentArea) {\n          contentArea.textContent = '';\n          contentArea.innerHTML = processedContent;\n\n          // 滚动到页面顶部\n          window.scrollTo(0, 0);\n          if (contentArea.scrollTo) {\n            contentArea.scrollTo(0, 0);\n          }\n\n          // 立即初始化对应模式\n          if (newMode === 'auto-reader') {\n            setTimeout(initializeAutoReader, 50);\n          } else if (newMode === 'follow-mouse') {\n            setTimeout(initializeMouseFollow, 50);\n          } else if (newMode === 'rhythm') {\n            setTimeout(startRhythmReading, 50);\n          }\n        }\n      } catch (error) {\n        console.error('应用新阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 1. 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll('.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line');\n    highlights.forEach(el => el.remove());\n\n    // 2. 移除事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 克隆内容区域以彻底移除所有事件监听器\n      const cleanContent = contentArea.cloneNode(false);\n      cleanContent.innerHTML = contentArea.innerHTML;\n      contentArea.parentNode.replaceChild(cleanContent, contentArea);\n    }\n\n    // 3. 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 创建新段落并保留基本结构\n      const newParagraph = document.createElement('p');\n      newParagraph.className = 'pdf-paragraph';\n      newParagraph.innerHTML = paragraph.innerHTML.replace(/<span class=\"text-line\">/g, '').replace(/<\\/span>/g, '');\n\n      // 移除特殊属性\n      newParagraph.removeAttribute('data-follow');\n      newParagraph.removeAttribute('style');\n      if (paragraph.parentNode) {\n        paragraph.parentNode.replaceChild(newParagraph, paragraph);\n      }\n    });\n\n    // 4. 清理自动阅读器\n    stopAutoReader();\n  };\n  const handleAutoScroll = () => {\n    autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = e => {\n    if (readingMode !== 'follow-mouse') return;\n\n    // 清除所有现有高亮\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n    const mouseTarget = document.elementFromPoint(e.clientX, e.clientY);\n    if (mouseTarget && (mouseTarget.classList.contains('pdf-paragraph') || mouseTarget.tagName === 'P' || mouseTarget.tagName === 'SPAN')) {\n      const targetParagraph = mouseTarget.closest('.pdf-paragraph');\n      if (!targetParagraph) return;\n\n      // 获取段落文本节点\n      const textNode = getTextNodeAtPosition(targetParagraph, e.clientX, e.clientY);\n      if (!textNode) return;\n\n      // 获取精确的行位置和尺寸\n      const range = document.createRange();\n      range.selectNodeContents(textNode);\n      const rects = range.getClientRects();\n\n      // 找到鼠标所在的具体行\n      let targetRect = null;\n      for (let i = 0; i < rects.length; i++) {\n        const rect = rects[i];\n        if (e.clientY >= rect.top && e.clientY <= rect.bottom) {\n          targetRect = rect;\n          break;\n        }\n      }\n      if (targetRect) {\n        // 创建高亮元素\n        const lineHighlight = document.createElement('div');\n        lineHighlight.className = 'line-highlight mouse-highlight';\n\n        // 计算相对于段落的位置\n        const paragraphRect = targetParagraph.getBoundingClientRect();\n        const top = targetRect.top - paragraphRect.top;\n        const left = targetRect.left - paragraphRect.left;\n\n        // 设置高亮样式\n        lineHighlight.style.position = 'absolute';\n        lineHighlight.style.left = `${left}px`;\n        lineHighlight.style.top = `${top}px`;\n        lineHighlight.style.width = `${targetRect.width}px`;\n        lineHighlight.style.height = `${targetRect.height}px`;\n        lineHighlight.style.pointerEvents = 'none';\n        lineHighlight.style.backgroundColor = 'rgba(255, 165, 0, 0.3)';\n        lineHighlight.style.borderRadius = '4px';\n        lineHighlight.style.boxShadow = '0 0 8px rgba(255, 165, 0, 0.5)';\n        lineHighlight.style.zIndex = '5';\n        lineHighlight.style.transition = 'all 0.1s ease';\n\n        // 确保段落有相对定位\n        targetParagraph.style.position = 'relative';\n        targetParagraph.appendChild(lineHighlight);\n      }\n    }\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 新增延迟补偿\n    setTimeout(() => {\n      addMouseFollowListeners();\n\n      // 强制触发重排\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        void contentArea.offsetHeight;\n\n        // 模拟鼠标移动事件\n        const fakeEvent = new MouseEvent('mousemove', {\n          clientX: window.innerWidth / 2,\n          clientY: window.innerHeight / 2,\n          bubbles: true\n        });\n        contentArea.dispatchEvent(fakeEvent);\n      }\n    }, 50);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = delta => {\n    autoReader.speed = Math.max(100, autoReader.speed + delta);\n    setAutoReaderState(prev => ({\n      ...prev,\n      speed: autoReader.speed\n    }));\n    if (autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async delta => {\n    const newPage = currentPage + delta;\n    if (newPage < 1 || newPage > totalPages) return;\n    const wasAutoReading = readingMode === 'auto-reader' && autoReader.intervalId;\n\n    // 如果正在自动阅读，先停止\n    if (wasAutoReading) {\n      clearInterval(autoReader.intervalId);\n      autoReader.intervalId = null;\n    }\n\n    // 更新页码\n    setCurrentPage(newPage);\n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 按当前阅读模式处理内容\n      let processedContent = '';\n      switch (readingMode) {\n        case 'follow-mouse':\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'auto-reader':\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n\n      // 更新页面内容\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        contentArea.textContent = '';\n        contentArea.innerHTML = processedContent;\n\n        // 滚动到页面顶部\n        window.scrollTo(0, 0);\n        if (contentArea.scrollTo) {\n          contentArea.scrollTo(0, 0);\n        }\n\n        // 如果之前在自动阅读，重新启动自动阅读\n        if (readingMode === 'auto-reader') {\n          // 重置翻页状态\n          autoReader.isPageChanging = false;\n\n          // 延迟一小段时间再初始化，确保DOM已更新\n          setTimeout(initializeAutoReader, 200);\n        } else if (readingMode === 'follow-mouse') {\n          setTimeout(initializeMouseFollow, 50);\n        }\n      }\n    } catch (error) {\n      console.error('翻页失败:', error);\n      // 重置翻页状态以防止卡住\n      autoReader.isPageChanging = false;\n    }\n  };\n\n  // 修改后的监听器设置函数\n  const addMouseFollowListeners = () => {\n    if (readingMode !== 'follow-mouse') return;\n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n\n    // 清理旧的监听器\n    contentArea.removeEventListener('mousemove', handleMouseMove);\n    contentArea.removeEventListener('mouseleave', clearAllHighlights);\n\n    // 添加新的监听器\n    contentArea.addEventListener('mousemove', handleMouseMove);\n    contentArea.addEventListener('mouseleave', clearAllHighlights);\n\n    // 确保所有段落都有正确的样式\n    document.querySelectorAll('.pdf-paragraph').forEach(p => {\n      p.style.position = 'relative';\n      p.style.lineHeight = '1.5';\n    });\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = text => {\n    // 分段\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n\n    // 创建HTML内容\n    let htmlContent = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      htmlContent += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 应用静态高亮\n  const applyStaticHighlight = text => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    let htmlContent = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      // 新增强制清理逻辑\n      const cleanParagraph = paragraph.replace(/<span class=\"text-line\">/g, '').replace(/<\\/span>/g, '');\n      const highlightedText = processTextWithHighlight(cleanParagraph);\n      htmlContent += `<p class=\"pdf-paragraph\">${highlightedText}</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 格式化文本用于鼠标跟随高亮模式\n  const formatTextForMouseFollow = text => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    let htmlContent = '<div class=\"pdf-content mouse-follow-content\">';\n    paragraphs.forEach(paragraph => {\n      // 将段落分割成行\n      const lines = paragraph.split('\\n').filter(line => line.trim());\n      htmlContent += `<p class=\"pdf-paragraph\" data-follow=\"true\" style=\"position: relative; line-height: 1.5;\">`;\n      lines.forEach((line, i) => {\n        // 每行用span包裹\n        htmlContent += `<span class=\"text-line\" style=\"display: block;\">${line}</span>`;\n      });\n      htmlContent += `</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 强制初始化字符位置（这是关键步骤！）\n  function forceInitReader() {\n    console.log(\"强制初始化阅读器...\");\n\n    // 1. 如果autoReader或charPositions不存在，创建它们\n    if (typeof autoReader === 'undefined') {\n      window.autoReader = {\n        charPositions: [],\n        intervalId: null,\n        currentIndex: 0,\n        speed: 30\n      };\n    }\n\n    // 2. 如果没有字符位置数据，尝试触发它的创建\n    if (!autoReader.charPositions || autoReader.charPositions.length === 0) {\n      console.log(\"未找到字符位置数据，尝试强制创建...\");\n\n      // 直接使用scanTextPositionsSimple函数\n      scanTextPositionsSimple();\n    }\n    return autoReader.charPositions && autoReader.charPositions.length > 0;\n  }\n\n  // 简单的文本位置扫描函数\n  function scanTextPositionsSimple() {\n    console.log(\"使用简单文本扫描...\");\n    autoReader.charPositions = [];\n    const contentElement = document.querySelector('.page-content');\n    if (!contentElement) {\n      console.error(\"找不到内容容器\");\n      return;\n    }\n\n    // 递归处理文本节点\n    function processTextNodes(element) {\n      if (element.nodeType === Node.TEXT_NODE) {\n        const text = element.textContent;\n        if (!text || text.trim() === '') return;\n\n        // 获取元素的位置信息\n        const range = document.createRange();\n\n        // 为每个字符创建一个独立的范围\n        for (let i = 0; i < text.length; i++) {\n          try {\n            range.setStart(element, i);\n            range.setEnd(element, i + 1);\n            const rect = range.getBoundingClientRect();\n            if (rect.width > 0 && rect.height > 0) {\n              autoReader.charPositions.push({\n                char: text[i],\n                x: rect.left + rect.width / 2,\n                y: rect.top + rect.height / 2,\n                element: element.parentElement\n              });\n            }\n          } catch (e) {\n            console.warn(\"无法处理字符\", e);\n          }\n        }\n      } else if (element.nodeType === Node.ELEMENT_NODE) {\n        // 递归处理子元素\n        for (const child of element.childNodes) {\n          processTextNodes(child);\n        }\n      }\n    }\n    processTextNodes(contentElement);\n    console.log(\"扫描完成，找到字符数量:\", autoReader.charPositions.length);\n  }\n\n  // 启动节奏阅读\n  function startRhythmReading() {\n    console.log(\"启动节奏阅读模式\");\n\n    // 停止已有的阅读活动\n    stopRhythmReading();\n\n    // 初始化文本（将文本节点拆分成单个字符的span）\n    if (!initializeTextNodes()) {\n      alert(\"无法初始化文本节点\");\n      return;\n    }\n\n    // 设置为活动状态\n    rhythmReader.active = true;\n    rhythmReader.currentIndex = 0;\n    rhythmReader.readIndices.clear();\n\n    // 添加速度滑块\n    addSpeedSlider();\n\n    // 更新颜色\n    updateTextColors();\n\n    // 滚动到开始位置\n    scrollToCurrentChar();\n\n    // 设置阅读间隔\n    rhythmReader.intervalId = setInterval(moveToNextChar, rhythmReader.speed);\n\n    // 设置页面变化观察器 - 这是关键改进\n    setupPageChangeObserver();\n  }\n\n  // 设置页面变化观察器\n  function setupPageChangeObserver() {\n    // 如果已经有观察器，先移除\n    if (rhythmReader.pageObserver) {\n      rhythmReader.pageObserver.disconnect();\n    }\n\n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n\n    // 创建一个观察器，监视内容变化\n    rhythmReader.pageObserver = new MutationObserver(mutations => {\n      // 如果正在等待下一页，检查是否已加载新内容\n      if (rhythmReader.waitingForNextPage) {\n        console.log(\"检测到页面内容变化\");\n\n        // 延迟一小段时间，确保页面完全渲染\n        setTimeout(() => {\n          console.log(\"尝试在新页面上重启节奏阅读\");\n\n          // 标记不再等待\n          rhythmReader.waitingForNextPage = false;\n\n          // 启动节奏阅读\n          startRhythmReading();\n        }, 300);\n      }\n    });\n\n    // 开始观察内容变化\n    rhythmReader.pageObserver.observe(contentContainer, {\n      childList: true,\n      subtree: true,\n      characterData: true\n    });\n  }\n\n  // 移动到下一个字符 - 修改翻页处理逻辑\n  function moveToNextChar() {\n    // 将当前字符标记为已读\n    rhythmReader.readIndices.add(rhythmReader.currentIndex);\n\n    // 移动到下一个非空白字符\n    do {\n      rhythmReader.currentIndex++;\n\n      // 检查是否到达末尾\n      if (rhythmReader.currentIndex >= rhythmReader.charElements.length) {\n        if (typeof currentPage !== 'undefined' && typeof totalPages !== 'undefined' && currentPage < totalPages && typeof changePage === 'function') {\n          console.log(\"已到达页尾，准备切换到下一页\");\n\n          // 标记正在等待下一页\n          rhythmReader.waitingForNextPage = true;\n\n          // 停止当前页面的节奏阅读，但不删除按钮和观察器\n          if (rhythmReader.intervalId) {\n            clearInterval(rhythmReader.intervalId);\n            rhythmReader.intervalId = null;\n          }\n\n          // 清除当前页的字符元素\n          clearCharElements();\n\n          // 切换到下一页\n          changePage(1);\n\n          // 添加一个备用计时器，以防观察器失效\n          setTimeout(() => {\n            if (rhythmReader.waitingForNextPage) {\n              console.log(\"备用计时器激活：重启节奏阅读\");\n              rhythmReader.waitingForNextPage = false;\n              startRhythmReading();\n            }\n          }, 1500);\n          return;\n        } else {\n          stopRhythmReading();\n        }\n        return;\n      }\n    } while (rhythmReader.charElements[rhythmReader.currentIndex].dataset.whitespace === 'true');\n\n    // 更新颜色\n    updateTextColors();\n\n    // 滚动到当前字符\n    scrollToCurrentChar();\n  }\n\n  // 清除字符元素 (但不恢复原文本)\n  function clearCharElements() {\n    rhythmReader.charElements = [];\n    rhythmReader.readIndices.clear();\n  }\n\n  // 停止节奏阅读 - 完全停止包括删除观察器\n  function stopRhythmReading() {\n    if (rhythmReader.intervalId) {\n      clearInterval(rhythmReader.intervalId);\n      rhythmReader.intervalId = null;\n    }\n\n    // 移除页面观察器\n    if (rhythmReader.pageObserver) {\n      rhythmReader.pageObserver.disconnect();\n      rhythmReader.pageObserver = null;\n    }\n    rhythmReader.active = false;\n    rhythmReader.waitingForNextPage = false;\n\n    // 恢复原始文本样式\n    restoreOriginalText();\n\n    // 移除速度滑块\n    const slider = document.getElementById('rhythm-speed-slider');\n    if (slider) slider.remove();\n  }\n\n  // 恢复原始文本\n  function restoreOriginalText() {\n    // 获取所有已创建的字符span\n    const charSpans = document.querySelectorAll('.rhythm-char');\n\n    // 按父节点分组\n    const parentNodeMap = new Map();\n    charSpans.forEach(span => {\n      const parent = span.parentNode;\n      if (!parent) return;\n      if (!parentNodeMap.has(parent)) {\n        parentNodeMap.set(parent, []);\n      }\n      parentNodeMap.get(parent).push(span);\n    });\n\n    // 对每个父节点，将连续的字符span合并回文本节点\n    parentNodeMap.forEach((spans, parent) => {\n      // 排序spans确保顺序正确\n      spans.sort((a, b) => {\n        const indexA = parseInt(a.dataset.rhythmIndex || '0');\n        const indexB = parseInt(b.dataset.rhythmIndex || '0');\n        return indexA - indexB;\n      });\n\n      // 根据连续性分组\n      const groups = [];\n      let currentGroup = spans.length > 0 ? [spans[0]] : [];\n      for (let i = 1; i < spans.length; i++) {\n        const prevIndex = parseInt(spans[i - 1].dataset.rhythmIndex || '0');\n        const currentIndex = parseInt(spans[i].dataset.rhythmIndex || '0');\n        if (currentIndex === prevIndex + 1 && spans[i].previousSibling === spans[i - 1]) {\n          currentGroup.push(spans[i]);\n        } else {\n          groups.push(currentGroup);\n          currentGroup = [spans[i]];\n        }\n      }\n      if (currentGroup.length > 0) {\n        groups.push(currentGroup);\n      }\n\n      // 对每个连续组替换为文本节点\n      groups.forEach(group => {\n        if (group.length === 0) return;\n        const text = group.map(span => span.textContent).join('');\n        const textNode = document.createTextNode(text);\n\n        // 替换第一个span，然后移除其余的\n        parent.replaceChild(textNode, group[0]);\n        for (let i = 1; i < group.length; i++) {\n          if (group[i].parentNode === parent) {\n            parent.removeChild(group[i]);\n          }\n        }\n      });\n    });\n\n    // 清除字符元素数组\n    rhythmReader.charElements = [];\n  }\n\n  // 添加速度滑块\n  function addSpeedSlider() {\n    let slider = document.getElementById('rhythm-speed-slider');\n    if (slider) return;\n    const container = document.createElement('div');\n    container.id = 'rhythm-speed-slider';\n    container.style.position = 'fixed';\n    container.style.bottom = '20px';\n    container.style.left = '50%';\n    container.style.transform = 'translateX(-50%)';\n    container.style.backgroundColor = 'white';\n    container.style.padding = '10px';\n    container.style.borderRadius = '5px';\n    container.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';\n    container.style.zIndex = '10000';\n    container.style.display = 'flex';\n    container.style.alignItems = 'center';\n    const label = document.createElement('label');\n    label.textContent = '阅读速度: ';\n    label.style.marginRight = '8px';\n    container.appendChild(label);\n    const input = document.createElement('input');\n    input.type = 'range';\n    input.min = '50';\n    input.max = '1000';\n    input.step = '50';\n    input.value = rhythmReader.speed;\n    input.style.width = '200px';\n    const valueDisplay = document.createElement('span');\n    valueDisplay.textContent = `${rhythmReader.speed}ms`;\n    valueDisplay.style.marginLeft = '8px';\n    valueDisplay.style.minWidth = '60px';\n    input.addEventListener('input', function () {\n      const newSpeed = parseInt(this.value);\n      rhythmReader.speed = newSpeed;\n      valueDisplay.textContent = `${newSpeed}ms`;\n      if (rhythmReader.intervalId) {\n        clearInterval(rhythmReader.intervalId);\n        rhythmReader.intervalId = setInterval(moveToNextChar, newSpeed);\n      }\n    });\n    container.appendChild(input);\n    container.appendChild(valueDisplay);\n    document.body.appendChild(container);\n  }\n\n  // 添加节奏阅读按钮\n  function addRhythmReadingButton() {\n    if (document.getElementById('rhythm-reading-button')) {\n      document.getElementById('rhythm-reading-button').remove();\n    }\n    const button = document.createElement('button');\n    button.id = 'rhythm-reading-button';\n    button.textContent = '节奏阅读';\n    button.style.position = 'fixed';\n    button.style.top = '20px';\n    button.style.right = '20px';\n    button.style.padding = '8px 16px';\n    button.style.backgroundColor = '#4CAF50';\n    button.style.color = 'white';\n    button.style.border = 'none';\n    button.style.borderRadius = '4px';\n    button.style.cursor = 'pointer';\n    button.style.zIndex = '10000';\n    button.style.fontSize = '16px';\n    button.addEventListener('click', function () {\n      if (rhythmReader.active) {\n        stopRhythmReading();\n        this.textContent = '节奏阅读';\n        this.style.backgroundColor = '#4CAF50';\n      } else {\n        startRhythmReading();\n        this.textContent = '停止节奏阅读';\n        this.style.backgroundColor = '#f44336';\n      }\n    });\n    document.body.appendChild(button);\n  }\n\n  // 执行函数，添加按钮\n  addRhythmReadingButton();\n\n  // 初始化文本节点（将文本分解为单独的字符span）\n  function initializeTextNodes() {\n    // 重置字符元素数组\n    rhythmReader.charElements = [];\n\n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return false;\n\n    // 查找所有文本节点并处理\n    const textNodes = [];\n    findTextNodes(contentContainer, textNodes);\n    if (textNodes.length === 0) {\n      console.error(\"未找到文本节点\");\n      return false;\n    }\n    console.log(`找到 ${textNodes.length} 个文本节点`);\n\n    // 为每个文本节点创建字符span\n    textNodes.forEach(node => {\n      const text = node.nodeValue;\n      if (!text || text.trim() === '') return;\n\n      // 创建文档片段来存放字符span\n      const fragment = document.createDocumentFragment();\n\n      // 获取父元素计算样式以保持一致性\n      const parentStyles = window.getComputedStyle(node.parentNode);\n\n      // 为每个字符创建span\n      for (let i = 0; i < text.length; i++) {\n        const char = text[i];\n        const span = document.createElement('span');\n        span.textContent = char;\n        span.className = 'rhythm-char';\n        span.dataset.rhythmIndex = rhythmReader.charElements.length;\n\n        // 如果是空白字符，添加一个标志\n        if (char.trim() === '') {\n          span.dataset.whitespace = 'true';\n        }\n\n        // 保持原始样式，重要：不设置任何背景\n        span.style.display = 'inline';\n        span.style.margin = '0';\n        span.style.padding = '0';\n        span.style.border = 'none';\n        span.style.backgroundColor = 'transparent';\n        fragment.appendChild(span);\n        rhythmReader.charElements.push(span);\n      }\n\n      // 替换原始节点\n      if (node.parentNode) {\n        node.parentNode.replaceChild(fragment, node);\n      }\n    });\n    console.log(`总共创建了 ${rhythmReader.charElements.length} 个字符span`);\n    return rhythmReader.charElements.length > 0;\n  }\n\n  // 递归查找所有文本节点\n  function findTextNodes(element, textNodes) {\n    // 处理子节点\n    for (let i = 0; i < element.childNodes.length; i++) {\n      const node = element.childNodes[i];\n\n      // 如果是文本节点且有内容\n      if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() !== '') {\n        textNodes.push(node);\n      }\n      // 如果是元素节点，递归处理\n      else if (node.nodeType === Node.ELEMENT_NODE) {\n        // 跳过读者UI元素\n        if (node.id === 'rhythm-speed-slider' || node.id === 'rhythm-reading-button' || node.className === 'rhythm-char') {\n          continue;\n        }\n        findTextNodes(node, textNodes);\n      }\n    }\n  }\n\n  // 更新文本颜色 - 修正后的颜色方案\n  function updateTextColors() {\n    // 更新所有字符的颜色\n    rhythmReader.charElements.forEach((span, index) => {\n      // 确定颜色\n      let color;\n      let fontWeight = 'inherit';\n      if (index === rhythmReader.currentIndex) {\n        color = '#00aa00'; // 当前阅读的字 - 绿色\n        fontWeight = 'bold';\n      } else if (index === rhythmReader.currentIndex + 1 || index === rhythmReader.currentIndex + 2) {\n        color = '#aaaaaa'; // 接下来两个字 - 淡灰色\n      } else if (rhythmReader.readIndices.has(index)) {\n        color = '#ffffff'; // 已读字符 - 白色（表示已读）\n      } else {\n        color = 'rgba(160, 160, 160, 0.25)'; // 未读字符 - 非常淡的灰色（可见但不明显）\n      }\n      span.style.color = color;\n      span.style.fontWeight = fontWeight;\n\n      // 确保没有背景\n      span.style.backgroundColor = 'transparent';\n      span.style.background = 'none';\n    });\n  }\n\n  // 滚动到当前字符\n  function scrollToCurrentChar() {\n    const span = rhythmReader.charElements[rhythmReader.currentIndex];\n    if (!span) return;\n    const rect = span.getBoundingClientRect();\n    const contentContainer = document.querySelector('.page-content');\n\n    // 估计行高\n    const lineHeight = parseInt(window.getComputedStyle(span).lineHeight) || Math.max(20, rect.height * 1.5);\n\n    // 确定滚动容器\n    const isContainerScrollable = contentContainer && contentContainer.scrollHeight > contentContainer.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n    if (isContainerScrollable) {\n      // 容器滚动\n      const containerRect = contentContainer.getBoundingClientRect();\n      const relativeTop = rect.top - containerRect.top + contentContainer.scrollTop;\n      const visibleTop = contentContainer.scrollTop;\n      const visibleBottom = visibleTop + contentContainer.clientHeight;\n      if (relativeTop < visibleTop + lineHeight || relativeTop > visibleBottom - lineHeight) {\n        contentContainer.scrollBy({\n          top: lineHeight * 2 * (relativeTop > visibleBottom - lineHeight ? 1 : -1),\n          behavior: 'smooth'\n        });\n      }\n    } else {\n      // 窗口滚动\n      const viewportTop = window.scrollY;\n      const viewportBottom = viewportTop + window.innerHeight;\n      const absoluteTop = rect.top + window.scrollY;\n      if (absoluteTop < viewportTop + lineHeight || absoluteTop > viewportBottom - lineHeight) {\n        window.scrollBy({\n          top: lineHeight * 2 * (absoluteTop > viewportBottom - lineHeight ? 1 : -1),\n          behavior: 'smooth'\n        });\n      }\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1834,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1833,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"upload-btn\",\n        children: [\"\\u9009\\u62E9\\u6587\\u4EF6\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".pdf,.txt\",\n          onChange: handleFileUpload,\n          style: {\n            display: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1838,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1836,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1832,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1848,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mode-selector\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: readingMode,\n              onChange: handleReadingModeChange,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"normal\",\n                children: \"\\u666E\\u901A\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1852,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"static\",\n                children: \"\\u9759\\u6001\\u9AD8\\u4EAE\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1853,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"follow-mouse\",\n                children: \"\\u9F20\\u6807\\u8DDF\\u968F\\u9AD8\\u4EAE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1854,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"auto-reader\",\n                children: \"\\u81EA\\u52A8\\u9605\\u8BFB\\u5668\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1855,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"rhythm\",\n                children: \"\\u8282\\u594F\\u9605\\u8BFB\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1856,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1851,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1850,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mode-selector\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: posMode,\n              onChange: e => setPosMode(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"none\",\n                children: \"\\u65E0\\u8BCD\\u6027\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1861,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"noun\",\n                children: \"\\u540D\\u8BCD\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1862,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"all\",\n                children: \"\\u5168\\u8BCD\\u6027\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1863,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1860,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1859,\n            columnNumber: 13\n          }, this), readingMode === 'auto-reader' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"speed-control\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => adjustSpeed(-100),\n              children: \"-\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1868,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [autoReaderState.speed, \"ms\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1869,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => adjustSpeed(100),\n              children: \"+\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1870,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1867,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1849,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1847,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-content\",\n        children: content ? /*#__PURE__*/_jsxDEV(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: content\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1877,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-state\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u8BF7\\u4E0A\\u4F20PDF\\u6216TXT\\u6587\\u4EF6\\u5F00\\u59CB\\u9605\\u8BFB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1880,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1879,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1875,\n        columnNumber: 9\n      }, this), content && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"page-btn prev\",\n          onClick: () => changePage(-1),\n          disabled: currentPage === 1,\n          children: \"\\u4E0A\\u4E00\\u9875\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1886,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"page-info\",\n          children: [\"\\u7B2C \", currentPage, \" \\u9875 / \\u5171 \", totalPages, \" \\u9875\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1889,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"page-btn next\",\n          onClick: () => changePage(1),\n          disabled: currentPage === totalPages,\n          children: \"\\u4E0B\\u4E00\\u9875\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1892,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1885,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1846,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1831,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"FdIIE1mY5AAmB921foSmrxDLqNQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","pdfjsLib","pdfjsViewer","marked","pdfjs","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","autoReader","currentIndex","charPositions","intervalId","speed","pageContainer","isScrolling","currentPage","isPageChanging","rhythmReader","active","readIndices","Set","charElements","waitingForNextPage","pageObserver","tagPartsOfSpeech","text","punctuationMarks","segments","split","RegExp","map","mark","join","result","colorIndex","currentText","forEach","segment","index","test","isPunctuation","includes","color","App","_s","pages","setPages","setCurrentPage","totalPages","setTotalPages","fileName","setFileName","loading","setLoading","fileRef","file","setFile","pdfInstance","setPdfInstance","extractedTextPages","setExtractedTextPages","readingMode","setReadingMode","posMode","setPosMode","markdownContent","setMarkdownContent","readerContainerRef","autoReadGuideRef","autoReadIntervalRef","content","setContent","pdfDocument","setPdfDocument","autoReaderState","setAutoReaderState","isUserScrolling","scrollTimeout","contentLoaded","current","clearInterval","setTimeout","initializeMouseFollow","handlePdfFile","fileURL","URL","createObjectURL","loadingTask","getDocument","pdf","promise","numPages","extractAndProcessPage","console","log","error","alert","pageNum","page","getPage","textContent","getTextContent","viewport","getViewport","scale","isTableOfContents","detectIfTocPage","processTocPage","processContentPage","addMouseFollowListeners","textItems","items","fullText","item","str","hasTocKeywords","hasPageNumberPatterns","shortLinesCount","linesWithNumbersCount","lineMap","Map","yKey","Math","round","transform","has","set","get","push","lines","values","line","lineText","length","shortLineRatio","numberLineRatio","htmlContent","x","y","height","fontSize","sqrt","fontWeight","fontName","toLowerCase","spacedText","getTextNodeAtPosition","element","nodes","childNodes","i","node","nodeType","Node","TEXT_NODE","range","document","createRange","selectNodeContents","rects","getClientRects","j","rect","top","bottom","left","right","ELEMENT_NODE","found","processTextWithHighlight","words","lastColor","word","random","mode","extractedText","replace","trim","processedContent","formatTextToHtml","applyStaticHighlight","formatTextForMouseFollow","handleTxtFile","pageTexts","paragraph","fontFamily","handleFileUpload","e","target","files","type","getAllCharacterPositions","container","walker","createTreeWalker","NodeFilter","SHOW_TEXT","positions","nextNode","currentNode","setStart","setEnd","getBoundingClientRect","width","char","warn","filter","p","sort","a","b","yDiff","abs","scrollElementToCenter","elementY","isContainerScrollable","scrollHeight","clientHeight","window","getComputedStyle","overflowY","targetScrollTop","containerVisibleHeight","scrollTo","max","behavior","absoluteElementY","innerHeight","createReaderCursor","cursor","createElement","id","style","cssText","getElementById","head","appendChild","isSentenceEnd","charPosition","sentenceEndMarks","nextIndex","findSentenceStart","start","prev","isInVisibleArea","threshold","visibleTop","scrollTop","visibleBottom","topThreshold","bottomThreshold","scrollY","startAutoReader","changePage","contentContainer","querySelector","position","highlight","backgroundColor","borderRadius","pointerEvents","zIndex","lineHeight","lastScrolledY","scrollSafeZone","charWidth","charHeight","xDiff","setInterval","_autoReader$charPosit","stopAutoReader","pos","contentRect","relativeX","relativeY","isInRecentlyScrolledArea","needsScroll","scrollAmount","scrollBy","absoluteY","cleanup","remove","initializeAutoReader","handleReadingModeChange","newMode","value","stopRhythmReading","cleanupDOM","contentArea","innerHTML","startRhythmReading","highlights","querySelectorAll","el","cleanContent","cloneNode","parentNode","replaceChild","paragraphs","newParagraph","className","removeAttribute","handleAutoScroll","updateCursorPosition","force","handleMouseMove","mouseTarget","elementFromPoint","clientX","clientY","classList","contains","tagName","targetParagraph","closest","textNode","targetRect","lineHighlight","paragraphRect","boxShadow","transition","clearAllHighlights","addAutoReaderStyles","offsetHeight","fakeEvent","MouseEvent","innerWidth","bubbles","dispatchEvent","adjustSpeed","delta","newPage","wasAutoReading","removeEventListener","addEventListener","cleanParagraph","highlightedText","forceInitReader","scanTextPositionsSimple","contentElement","processTextNodes","parentElement","child","initializeTextNodes","clear","addSpeedSlider","updateTextColors","scrollToCurrentChar","moveToNextChar","setupPageChangeObserver","disconnect","MutationObserver","mutations","observe","childList","subtree","characterData","add","clearCharElements","dataset","whitespace","restoreOriginalText","slider","charSpans","parentNodeMap","span","parent","spans","indexA","parseInt","rhythmIndex","indexB","groups","currentGroup","prevIndex","previousSibling","group","createTextNode","removeChild","padding","display","alignItems","label","marginRight","input","min","step","valueDisplay","marginLeft","minWidth","newSpeed","body","addRhythmReadingButton","button","border","textNodes","findTextNodes","nodeValue","fragment","createDocumentFragment","parentStyles","margin","background","containerRect","relativeTop","viewportTop","viewportBottom","absoluteTop","children","_jsxFileName","lineNumber","columnNumber","accept","onChange","onClick","dangerouslySetInnerHTML","__html","disabled","_c","$RefreshReg$"],"sources":["D:/adhd-read-helper/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 新增全局变量\nlet autoReader = {\n  currentIndex: 0,\n  charPositions: [],\n  intervalId: null,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false\n};\n\n// 节奏阅读模式\nconst rhythmReader = {\n  active: false,\n  intervalId: null,\n  speed: 300,\n  currentIndex: 0,\n  readIndices: new Set(),\n  charElements: [], // 存储字符元素的引用\n  waitingForNextPage: false, // 新增：标记是否正在等待下一页\n  pageObserver: null // 新增：页面变化观察器\n};\n\n// 模拟NLP词性标注功能（实际应用中建议使用专业NLP库如nlp.js或调用API）\nconst tagPartsOfSpeech = (text) => {\n  // 定义所有标点符号\n  const punctuationMarks = [\n    '，', '。', '！', '？', '；', '：', '（', '）', '【', '】', '《', '》', '〈', '〉', '…', '—', '～', '·',\n    ',', '.', '!', '?', ';', ':', '(', ')', '[', ']', '{', '}', '-', '...', '..'\n  ];\n  \n  // 将文本按标点符号分割，保留标点符号\n  const segments = text.split(new RegExp(`([${punctuationMarks.map(mark => '\\\\' + mark).join('')}])`));\n  let result = '';\n  let colorIndex = 0; // 0: 红色, 1: 蓝色, 2: 黑色\n  let currentText = '';\n  \n  segments.forEach((segment, index) => {\n    // 跳过空字符串和纯空格\n    if (!segment || /^\\s+$/.test(segment)) {\n      result += segment;\n      return;\n    }\n    \n    // 检查是否是标点符号\n    const isPunctuation = punctuationMarks.includes(segment);\n    \n    // 根据索引选择颜色\n    let color;\n    switch (colorIndex) {\n      case 0:\n        color = 'red';\n        break;\n      case 1:\n        color = 'blue';\n        break;\n      case 2:\n        color = 'black';\n        break;\n      default:\n        color = 'black';\n    }\n    \n    // 将当前文本和标点符号放在同一个颜色块中\n    if (isPunctuation) {\n      // 如果有累积的文本，先添加文本\n      if (currentText) {\n        result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n        currentText = '';\n      }\n      // 添加标点符号\n      result += `<span class=\"highlight-word ${color}\">${segment}</span>`;\n      // 切换颜色\n      colorIndex = (colorIndex + 1) % 3;\n    } else {\n      // 累积文本\n      currentText += segment;\n    }\n  });\n  \n  // 处理最后可能剩余的文本\n  if (currentText) {\n    const color = colorIndex === 0 ? 'red' : colorIndex === 1 ? 'blue' : 'black';\n    result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n  }\n  \n  return result;\n};\n\nconst App = () => {\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const autoReadGuideRef = useRef(null);\n  const autoReadIntervalRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  \n  // 新增自动阅读器状态\n  const [autoReaderState, setAutoReaderState] = useState({\n    currentIndex: 0,\n    charPositions: [],\n    intervalId: null,\n    speed: 300,\n    pageContainer: null,\n    isUserScrolling: false,\n    scrollTimeout: null,\n    contentLoaded: false\n  });\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n    \n    return () => {\n      // 清理自动阅读定时器\n      if (autoReadIntervalRef.current) {\n        clearInterval(autoReadIntervalRef.current);\n      }\n    };\n  }, []);\n  \n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async (file) => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      \n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n      \n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n      \n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n  \n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({ scale: 1.0 });\n      \n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      \n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      \n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async (textContent) => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n    \n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n    \n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n    \n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    \n    const lines = [...lineMap.values()];\n    \n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    \n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    \n    return hasTocKeywords || hasPageNumberPatterns || (shortLineRatio > 0.7 && numberLineRatio > 0.3);\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n    \n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    \n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n      \n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n      \n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n      \n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    \n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && \n              x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = (text) => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    \n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      \n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        \n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    \n    return result;\n  };\n\n  // 修改processContentPage函数\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      \n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch(mode) {\n        case 'normal':\n          // 普通模式 - 简单分段显示\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'static':\n          // 静态高亮模式 - 应用词性标注和颜色高亮\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'follow-mouse':\n          // 鼠标跟随高亮模式 - 分段落但不预先高亮，由鼠标事件触发高亮\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      \n      setContent(processedContent);\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async (file) => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n    \n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain') {\n      handleTxtFile(file);\n    } else {\n      alert('请上传PDF或TXT文件');\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = (container) => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    \n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n      \n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n      \n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          \n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n          \n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width/2,  // 水平中心\n            y: rect.bottom,               // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n    \n    // 过滤无效位置并排序\n    return positions\n      .filter(p => p.char.trim() !== '')\n      .sort((a, b) => {\n        // 先按行排序，同行按列排序\n        const yDiff = a.y - b.y;\n        if (Math.abs(yDiff) > 5) { // 5px阈值判断是否同一行\n          return yDiff;\n        }\n        return a.x - b.x;\n      });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    \n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - (containerVisibleHeight / 2);\n      \n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - (window.innerHeight / 2);\n      \n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    \n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n    \n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    \n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n    \n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length || // 已到末尾\n          positions[nextIndex].char.trim() === '' || // 下一个是空白\n          positions[nextIndex].y > charPosition.y + 5) { // 下一个在新行\n        return true;\n      }\n    }\n    \n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n    \n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n      \n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || \n          current.y > prev.y + 5) { // 有明显换行\n        break;\n      }\n      \n      start--;\n    }\n    \n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n      \n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      \n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n      \n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      \n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages) {\n        changePage(1);\n        return;\n      }\n        return;\n      }\n      \n    // 重置索引到开头\n    autoReader.currentIndex = 0;\n    \n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    \n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n    \n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n    \n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none'; // 不干扰鼠标事件\n      highlight.style.zIndex = '998'; // 确保在光标下层\n      contentContainer.appendChild(highlight);\n    }\n    \n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight &&\n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n    \n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20; // 默认估计值\n    \n    // 尝试获取实际行高\n    if (autoReader.charPositions.length > 1) {\n      // 查找两个垂直位置不同的相邻字符\n      for (let i = 1; i < autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(autoReader.charPositions[i].y - autoReader.charPositions[i-1].y);\n        if (yDiff > 5) { // 认为有垂直距离差的是不同行\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n    \n    // 记录上次滚动的位置，避免在同一区域重复滚动\n    let lastScrolledY = -1;\n    // 设置滚动安全区域（像素）\n    const scrollSafeZone = lineHeight * 2.5; // 增加安全区域适应2行滚动\n    \n    // 设置字符大小的估计值（用于高亮）\n    let charWidth = 20; // 默认估计值\n    let charHeight = lineHeight * 0.8; // 设为行高的80%，看起来更自然\n    \n    // 尝试估计字符宽度\n    if (autoReader.charPositions.length > 1) {\n      for (let i = 1; i < autoReader.charPositions.length; i++) {\n        if (autoReader.charPositions[i].x !== autoReader.charPositions[i-1].x) {\n          const xDiff = Math.abs(autoReader.charPositions[i].x - autoReader.charPositions[i-1].x);\n          if (xDiff > 0 && xDiff < 50) { // 合理的字符宽度范围\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    \n    autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (autoReader.currentIndex < autoReader.charPositions.length && \n             autoReader.charPositions[autoReader.currentIndex]?.char.trim() === '') {\n        autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (autoReader.currentIndex >= autoReader.charPositions.length) {\n        if (currentPage < totalPages) {\n          changePage(1);\n          clearInterval(autoReader.intervalId);\n    } else {\n          stopAutoReader();\n        }\n        return;\n      }\n\n      const pos = autoReader.charPositions[autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      \n      if (cursor && highlight) {\n        // 获取容器的位置\n        const contentRect = contentContainer.getBoundingClientRect();\n        \n        // 计算光标相对于容器的坐标\n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        \n        // 更新光标位置为相对容器的坐标\n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        \n        // 更新高亮位置和大小\n        highlight.style.left = `${relativeX - charWidth/2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n        \n        // ===== 仅在需要时滚动2行高度 =====\n        \n        // 检查是否已经在相近位置滚动过（避免同一区域重复滚动）\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        \n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          \n          if (isContainerScrollable) {\n            // 容器滚动情况\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n            \n            // 如果超出底部可见区域\n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2; // 滚动2行高度\n            }\n            // 如果超出顶部可见区域\n            else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2; // 向上滚动2行高度\n            }\n            \n            // 仅在需要滚动时执行一次滚动\n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              // 记录此次滚动位置\n              lastScrolledY = relativeY;\n            }\n          } else {\n            // 窗口滚动情况\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n            \n            // 如果超出底部可见区域\n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2; // 滚动2行高度\n            }\n            // 如果超出顶部可见区域\n            else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2; // 向上滚动2行高度\n            }\n            \n            // 仅在需要滚动时执行一次滚动\n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              // 记录此次滚动位置\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      \n      autoReader.currentIndex++;\n      \n    }, autoReader.speed);\n    \n    // 在停止自动阅读时清除所有高亮\n    autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n      \n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (autoReader.intervalId) {\n      clearInterval(autoReader.intervalId);\n      autoReader.intervalId = null;\n      \n      // 调用清理函数\n      if (autoReader.cleanup) {\n        autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n    \n    // 重置翻页状态\n    autoReader.isPageChanging = false;\n    \n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n    \n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n    \n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n    \n    // 收集字符位置\n    autoReader.charPositions = getAllCharacterPositions(content);\n    \n    // 如果当前页没有内容，尝试翻页\n    if (autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !autoReader.isPageChanging) {\n        autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async (e) => {\n    const newMode = e.target.value;\n    \n    // 停止当前可能正在运行的自动阅读和节奏阅读\n    stopAutoReader();\n    stopRhythmReading();\n    \n    // 清理旧模式\n    cleanupDOM();\n    \n    // 更新状态\n    setReadingMode(newMode);\n    \n    // 应用新模式\n    if (pdfDocument && currentPage > 0) {\n      try {\n        const page = await pdfDocument.getPage(currentPage);\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        let processedContent = '';\n        \n        // 应用对应模式的文本处理\n        switch(newMode) {\n          case 'follow-mouse':\n            processedContent = formatTextForMouseFollow(extractedText);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlight(extractedText);\n            break;\n          case 'auto-reader':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          case 'rhythm':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          default:\n            processedContent = formatTextToHtml(extractedText);\n        }\n        \n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n          contentArea.textContent = '';\n          contentArea.innerHTML = processedContent;\n          \n          // 滚动到页面顶部\n          window.scrollTo(0, 0);\n          if (contentArea.scrollTo) {\n            contentArea.scrollTo(0, 0);\n          }\n          \n          // 立即初始化对应模式\n          if (newMode === 'auto-reader') {\n            setTimeout(initializeAutoReader, 50);\n          } else if (newMode === 'follow-mouse') {\n            setTimeout(initializeMouseFollow, 50);\n          } else if (newMode === 'rhythm') {\n            setTimeout(startRhythmReading, 50);\n          }\n        }\n      } catch (error) {\n        console.error('应用新阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 1. 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll(\n      '.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line'\n    );\n    highlights.forEach(el => el.remove());\n    \n    // 2. 移除事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 克隆内容区域以彻底移除所有事件监听器\n      const cleanContent = contentArea.cloneNode(false);\n      cleanContent.innerHTML = contentArea.innerHTML;\n      contentArea.parentNode.replaceChild(cleanContent, contentArea);\n    }\n    \n    // 3. 重置段落结构\n      const paragraphs = document.querySelectorAll('.pdf-paragraph');\n      paragraphs.forEach(paragraph => {\n      // 创建新段落并保留基本结构\n      const newParagraph = document.createElement('p');\n      newParagraph.className = 'pdf-paragraph';\n      newParagraph.innerHTML = paragraph.innerHTML\n        .replace(/<span class=\"text-line\">/g, '')\n        .replace(/<\\/span>/g, '');\n      \n      // 移除特殊属性\n      newParagraph.removeAttribute('data-follow');\n      newParagraph.removeAttribute('style');\n      \n        if (paragraph.parentNode) {\n          paragraph.parentNode.replaceChild(newParagraph, paragraph);\n        }\n      });\n      \n    // 4. 清理自动阅读器\n    stopAutoReader();\n  };\n\n  const handleAutoScroll = () => {\n    autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = (e) => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    // 清除所有现有高亮\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n    \n    const mouseTarget = document.elementFromPoint(e.clientX, e.clientY);\n    \n    if (mouseTarget && \n       (mouseTarget.classList.contains('pdf-paragraph') || \n        mouseTarget.tagName === 'P' || \n        mouseTarget.tagName === 'SPAN')) {\n      \n      const targetParagraph = mouseTarget.closest('.pdf-paragraph');\n      if (!targetParagraph) return;\n      \n      // 获取段落文本节点\n      const textNode = getTextNodeAtPosition(targetParagraph, e.clientX, e.clientY);\n      if (!textNode) return;\n      \n      // 获取精确的行位置和尺寸\n      const range = document.createRange();\n      range.selectNodeContents(textNode);\n      const rects = range.getClientRects();\n      \n      // 找到鼠标所在的具体行\n      let targetRect = null;\n      for (let i = 0; i < rects.length; i++) {\n        const rect = rects[i];\n        if (e.clientY >= rect.top && e.clientY <= rect.bottom) {\n          targetRect = rect;\n          break;\n        }\n      }\n      \n      if (targetRect) {\n        // 创建高亮元素\n        const lineHighlight = document.createElement('div');\n        lineHighlight.className = 'line-highlight mouse-highlight';\n        \n        // 计算相对于段落的位置\n        const paragraphRect = targetParagraph.getBoundingClientRect();\n        const top = targetRect.top - paragraphRect.top;\n        const left = targetRect.left - paragraphRect.left;\n        \n        // 设置高亮样式\n        lineHighlight.style.position = 'absolute';\n        lineHighlight.style.left = `${left}px`;\n        lineHighlight.style.top = `${top}px`;\n        lineHighlight.style.width = `${targetRect.width}px`;\n        lineHighlight.style.height = `${targetRect.height}px`;\n        lineHighlight.style.pointerEvents = 'none';\n        lineHighlight.style.backgroundColor = 'rgba(255, 165, 0, 0.3)';\n        lineHighlight.style.borderRadius = '4px';\n        lineHighlight.style.boxShadow = '0 0 8px rgba(255, 165, 0, 0.5)';\n        lineHighlight.style.zIndex = '5';\n        lineHighlight.style.transition = 'all 0.1s ease';\n        \n        // 确保段落有相对定位\n          targetParagraph.style.position = 'relative';\n        targetParagraph.appendChild(lineHighlight);\n      }\n    }\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 新增延迟补偿\n    setTimeout(() => {\n      addMouseFollowListeners();\n      \n      // 强制触发重排\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        void contentArea.offsetHeight;\n        \n        // 模拟鼠标移动事件\n        const fakeEvent = new MouseEvent('mousemove', {\n          clientX: window.innerWidth / 2,\n          clientY: window.innerHeight / 2,\n          bubbles: true\n        });\n        contentArea.dispatchEvent(fakeEvent);\n      }\n    }, 50);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = (delta) => {\n    autoReader.speed = Math.max(100, autoReader.speed + delta);\n    setAutoReaderState(prev => ({ ...prev, speed: autoReader.speed }));\n    \n    if (autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async (delta) => {\n    const newPage = currentPage + delta;\n    \n    if (newPage < 1 || newPage > totalPages) return;\n    \n    const wasAutoReading = readingMode === 'auto-reader' && autoReader.intervalId;\n    \n    // 如果正在自动阅读，先停止\n    if (wasAutoReading) {\n      clearInterval(autoReader.intervalId);\n      autoReader.intervalId = null;\n    }\n    \n    // 更新页码\n    setCurrentPage(newPage);\n    \n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n      // 按当前阅读模式处理内容\n      let processedContent = '';\n      switch(readingMode) {\n        case 'follow-mouse':\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'auto-reader':\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      \n      // 更新页面内容\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        contentArea.textContent = '';\n        contentArea.innerHTML = processedContent;\n        \n        // 滚动到页面顶部\n        window.scrollTo(0, 0);\n        if (contentArea.scrollTo) {\n          contentArea.scrollTo(0, 0);\n        }\n        \n        // 如果之前在自动阅读，重新启动自动阅读\n        if (readingMode === 'auto-reader') {\n          // 重置翻页状态\n          autoReader.isPageChanging = false;\n          \n          // 延迟一小段时间再初始化，确保DOM已更新\n          setTimeout(initializeAutoReader, 200);\n        } else if (readingMode === 'follow-mouse') {\n          setTimeout(initializeMouseFollow, 50);\n        }\n      }\n    } catch (error) {\n      console.error('翻页失败:', error);\n      // 重置翻页状态以防止卡住\n      autoReader.isPageChanging = false;\n    }\n  };\n\n  // 修改后的监听器设置函数\n  const addMouseFollowListeners = () => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    \n    // 清理旧的监听器\n    contentArea.removeEventListener('mousemove', handleMouseMove);\n    contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    \n    // 添加新的监听器\n    contentArea.addEventListener('mousemove', handleMouseMove);\n    contentArea.addEventListener('mouseleave', clearAllHighlights);\n    \n    // 确保所有段落都有正确的样式\n    document.querySelectorAll('.pdf-paragraph').forEach(p => {\n      p.style.position = 'relative';\n      p.style.lineHeight = '1.5';\n    });\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = (text) => {\n    // 分段\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    // 创建HTML内容\n    let htmlContent = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      htmlContent += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 应用静态高亮\n  const applyStaticHighlight = (text) => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    let htmlContent = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      // 新增强制清理逻辑\n      const cleanParagraph = paragraph\n        .replace(/<span class=\"text-line\">/g, '')\n        .replace(/<\\/span>/g, '');\n      \n      const highlightedText = processTextWithHighlight(cleanParagraph);\n      htmlContent += `<p class=\"pdf-paragraph\">${highlightedText}</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 格式化文本用于鼠标跟随高亮模式\n  const formatTextForMouseFollow = (text) => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    let htmlContent = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      // 将段落分割成行\n      const lines = paragraph.split('\\n').filter(line => line.trim());\n      htmlContent += `<p class=\"pdf-paragraph\" data-follow=\"true\" style=\"position: relative; line-height: 1.5;\">`;\n      \n      lines.forEach((line, i) => {\n        // 每行用span包裹\n        htmlContent += `<span class=\"text-line\" style=\"display: block;\">${line}</span>`;\n      });\n      \n      htmlContent += `</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 强制初始化字符位置（这是关键步骤！）\n  function forceInitReader() {\n    console.log(\"强制初始化阅读器...\");\n    \n    // 1. 如果autoReader或charPositions不存在，创建它们\n    if (typeof autoReader === 'undefined') {\n      window.autoReader = {\n        charPositions: [],\n        intervalId: null,\n        currentIndex: 0,\n        speed: 30\n      };\n    }\n    \n    // 2. 如果没有字符位置数据，尝试触发它的创建\n    if (!autoReader.charPositions || autoReader.charPositions.length === 0) {\n      console.log(\"未找到字符位置数据，尝试强制创建...\");\n      \n      // 直接使用scanTextPositionsSimple函数\n      scanTextPositionsSimple();\n    }\n    \n    return autoReader.charPositions && autoReader.charPositions.length > 0;\n  }\n\n  // 简单的文本位置扫描函数\n  function scanTextPositionsSimple() {\n    console.log(\"使用简单文本扫描...\");\n    \n    autoReader.charPositions = [];\n    const contentElement = document.querySelector('.page-content');\n    if (!contentElement) {\n      console.error(\"找不到内容容器\");\n      return;\n    }\n    \n    // 递归处理文本节点\n    function processTextNodes(element) {\n      if (element.nodeType === Node.TEXT_NODE) {\n        const text = element.textContent;\n        if (!text || text.trim() === '') return;\n        \n        // 获取元素的位置信息\n        const range = document.createRange();\n        \n        // 为每个字符创建一个独立的范围\n        for (let i = 0; i < text.length; i++) {\n          try {\n            range.setStart(element, i);\n            range.setEnd(element, i + 1);\n            \n            const rect = range.getBoundingClientRect();\n            if (rect.width > 0 && rect.height > 0) {\n              autoReader.charPositions.push({\n                char: text[i],\n                x: rect.left + rect.width/2,\n                y: rect.top + rect.height/2,\n                element: element.parentElement\n              });\n            }\n          } catch (e) {\n            console.warn(\"无法处理字符\", e);\n          }\n        }\n      } else if (element.nodeType === Node.ELEMENT_NODE) {\n        // 递归处理子元素\n        for (const child of element.childNodes) {\n          processTextNodes(child);\n        }\n      }\n    }\n    \n    processTextNodes(contentElement);\n    console.log(\"扫描完成，找到字符数量:\", autoReader.charPositions.length);\n  }\n\n  // 启动节奏阅读\n  function startRhythmReading() {\n    console.log(\"启动节奏阅读模式\");\n    \n    // 停止已有的阅读活动\n    stopRhythmReading();\n    \n    // 初始化文本（将文本节点拆分成单个字符的span）\n    if (!initializeTextNodes()) {\n      alert(\"无法初始化文本节点\");\n      return;\n    }\n    \n    // 设置为活动状态\n    rhythmReader.active = true;\n    rhythmReader.currentIndex = 0;\n    rhythmReader.readIndices.clear();\n    \n    // 添加速度滑块\n    addSpeedSlider();\n    \n    // 更新颜色\n    updateTextColors();\n    \n    // 滚动到开始位置\n    scrollToCurrentChar();\n    \n    // 设置阅读间隔\n    rhythmReader.intervalId = setInterval(moveToNextChar, rhythmReader.speed);\n    \n    // 设置页面变化观察器 - 这是关键改进\n    setupPageChangeObserver();\n  }\n\n  // 设置页面变化观察器\n  function setupPageChangeObserver() {\n    // 如果已经有观察器，先移除\n    if (rhythmReader.pageObserver) {\n      rhythmReader.pageObserver.disconnect();\n    }\n    \n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    \n    // 创建一个观察器，监视内容变化\n    rhythmReader.pageObserver = new MutationObserver((mutations) => {\n      // 如果正在等待下一页，检查是否已加载新内容\n      if (rhythmReader.waitingForNextPage) {\n        console.log(\"检测到页面内容变化\");\n        \n        // 延迟一小段时间，确保页面完全渲染\n        setTimeout(() => {\n          console.log(\"尝试在新页面上重启节奏阅读\");\n          \n          // 标记不再等待\n          rhythmReader.waitingForNextPage = false;\n          \n          // 启动节奏阅读\n          startRhythmReading();\n        }, 300);\n      }\n    });\n    \n    // 开始观察内容变化\n    rhythmReader.pageObserver.observe(contentContainer, {\n      childList: true,\n      subtree: true,\n      characterData: true\n    });\n  }\n\n  // 移动到下一个字符 - 修改翻页处理逻辑\n  function moveToNextChar() {\n    // 将当前字符标记为已读\n    rhythmReader.readIndices.add(rhythmReader.currentIndex);\n    \n    // 移动到下一个非空白字符\n    do {\n      rhythmReader.currentIndex++;\n      \n      // 检查是否到达末尾\n      if (rhythmReader.currentIndex >= rhythmReader.charElements.length) {\n        if (typeof currentPage !== 'undefined' && typeof totalPages !== 'undefined' && \n            currentPage < totalPages && typeof changePage === 'function') {\n          \n          console.log(\"已到达页尾，准备切换到下一页\");\n          \n          // 标记正在等待下一页\n          rhythmReader.waitingForNextPage = true;\n          \n          // 停止当前页面的节奏阅读，但不删除按钮和观察器\n          if (rhythmReader.intervalId) {\n            clearInterval(rhythmReader.intervalId);\n            rhythmReader.intervalId = null;\n          }\n          \n          // 清除当前页的字符元素\n          clearCharElements();\n          \n          // 切换到下一页\n          changePage(1);\n          \n          // 添加一个备用计时器，以防观察器失效\n          setTimeout(() => {\n            if (rhythmReader.waitingForNextPage) {\n              console.log(\"备用计时器激活：重启节奏阅读\");\n              rhythmReader.waitingForNextPage = false;\n              startRhythmReading();\n            }\n          }, 1500);\n          \n          return;\n        } else {\n          stopRhythmReading();\n        }\n        return;\n      }\n    } while (\n      rhythmReader.charElements[rhythmReader.currentIndex].dataset.whitespace === 'true'\n    );\n    \n    // 更新颜色\n    updateTextColors();\n    \n    // 滚动到当前字符\n    scrollToCurrentChar();\n  }\n\n  // 清除字符元素 (但不恢复原文本)\n  function clearCharElements() {\n    rhythmReader.charElements = [];\n    rhythmReader.readIndices.clear();\n  }\n\n  // 停止节奏阅读 - 完全停止包括删除观察器\n  function stopRhythmReading() {\n    if (rhythmReader.intervalId) {\n      clearInterval(rhythmReader.intervalId);\n      rhythmReader.intervalId = null;\n    }\n    \n    // 移除页面观察器\n    if (rhythmReader.pageObserver) {\n      rhythmReader.pageObserver.disconnect();\n      rhythmReader.pageObserver = null;\n    }\n    \n    rhythmReader.active = false;\n    rhythmReader.waitingForNextPage = false;\n    \n    // 恢复原始文本样式\n    restoreOriginalText();\n    \n    // 移除速度滑块\n    const slider = document.getElementById('rhythm-speed-slider');\n    if (slider) slider.remove();\n  }\n\n  // 恢复原始文本\n  function restoreOriginalText() {\n    // 获取所有已创建的字符span\n    const charSpans = document.querySelectorAll('.rhythm-char');\n    \n    // 按父节点分组\n    const parentNodeMap = new Map();\n    \n    charSpans.forEach(span => {\n      const parent = span.parentNode;\n      if (!parent) return;\n      \n      if (!parentNodeMap.has(parent)) {\n        parentNodeMap.set(parent, []);\n      }\n      parentNodeMap.get(parent).push(span);\n    });\n    \n    // 对每个父节点，将连续的字符span合并回文本节点\n    parentNodeMap.forEach((spans, parent) => {\n      // 排序spans确保顺序正确\n      spans.sort((a, b) => {\n        const indexA = parseInt(a.dataset.rhythmIndex || '0');\n        const indexB = parseInt(b.dataset.rhythmIndex || '0');\n        return indexA - indexB;\n      });\n      \n      // 根据连续性分组\n      const groups = [];\n      let currentGroup = spans.length > 0 ? [spans[0]] : [];\n      \n      for (let i = 1; i < spans.length; i++) {\n        const prevIndex = parseInt(spans[i-1].dataset.rhythmIndex || '0');\n        const currentIndex = parseInt(spans[i].dataset.rhythmIndex || '0');\n        \n        if (currentIndex === prevIndex + 1 && spans[i].previousSibling === spans[i-1]) {\n          currentGroup.push(spans[i]);\n        } else {\n          groups.push(currentGroup);\n          currentGroup = [spans[i]];\n        }\n      }\n      if (currentGroup.length > 0) {\n        groups.push(currentGroup);\n      }\n      \n      // 对每个连续组替换为文本节点\n      groups.forEach(group => {\n        if (group.length === 0) return;\n        \n        const text = group.map(span => span.textContent).join('');\n        const textNode = document.createTextNode(text);\n        \n        // 替换第一个span，然后移除其余的\n        parent.replaceChild(textNode, group[0]);\n        for (let i = 1; i < group.length; i++) {\n          if (group[i].parentNode === parent) {\n            parent.removeChild(group[i]);\n          }\n        }\n      });\n    });\n    \n    // 清除字符元素数组\n    rhythmReader.charElements = [];\n  }\n\n  // 添加速度滑块\n  function addSpeedSlider() {\n    let slider = document.getElementById('rhythm-speed-slider');\n    if (slider) return;\n    \n    const container = document.createElement('div');\n    container.id = 'rhythm-speed-slider';\n    container.style.position = 'fixed';\n    container.style.bottom = '20px';\n    container.style.left = '50%';\n    container.style.transform = 'translateX(-50%)';\n    container.style.backgroundColor = 'white';\n    container.style.padding = '10px';\n    container.style.borderRadius = '5px';\n    container.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';\n    container.style.zIndex = '10000';\n    container.style.display = 'flex';\n    container.style.alignItems = 'center';\n    \n    const label = document.createElement('label');\n    label.textContent = '阅读速度: ';\n    label.style.marginRight = '8px';\n    container.appendChild(label);\n    \n    const input = document.createElement('input');\n    input.type = 'range';\n    input.min = '50';\n    input.max = '1000';\n    input.step = '50';\n    input.value = rhythmReader.speed;\n    input.style.width = '200px';\n    \n    const valueDisplay = document.createElement('span');\n    valueDisplay.textContent = `${rhythmReader.speed}ms`;\n    valueDisplay.style.marginLeft = '8px';\n    valueDisplay.style.minWidth = '60px';\n    \n    input.addEventListener('input', function() {\n      const newSpeed = parseInt(this.value);\n      rhythmReader.speed = newSpeed;\n      valueDisplay.textContent = `${newSpeed}ms`;\n      \n      if (rhythmReader.intervalId) {\n        clearInterval(rhythmReader.intervalId);\n        rhythmReader.intervalId = setInterval(moveToNextChar, newSpeed);\n      }\n    });\n    \n    container.appendChild(input);\n    container.appendChild(valueDisplay);\n    document.body.appendChild(container);\n  }\n\n  // 添加节奏阅读按钮\n  function addRhythmReadingButton() {\n    if (document.getElementById('rhythm-reading-button')) {\n      document.getElementById('rhythm-reading-button').remove();\n    }\n    \n    const button = document.createElement('button');\n    button.id = 'rhythm-reading-button';\n    button.textContent = '节奏阅读';\n    button.style.position = 'fixed';\n    button.style.top = '20px';\n    button.style.right = '20px';\n    button.style.padding = '8px 16px';\n    button.style.backgroundColor = '#4CAF50';\n    button.style.color = 'white';\n    button.style.border = 'none';\n    button.style.borderRadius = '4px';\n    button.style.cursor = 'pointer';\n    button.style.zIndex = '10000';\n    button.style.fontSize = '16px';\n    \n    button.addEventListener('click', function() {\n      if (rhythmReader.active) {\n        stopRhythmReading();\n        this.textContent = '节奏阅读';\n        this.style.backgroundColor = '#4CAF50';\n      } else {\n        startRhythmReading();\n        this.textContent = '停止节奏阅读';\n        this.style.backgroundColor = '#f44336';\n      }\n    });\n    \n    document.body.appendChild(button);\n  }\n\n  // 执行函数，添加按钮\n  addRhythmReadingButton();\n\n  // 初始化文本节点（将文本分解为单独的字符span）\n  function initializeTextNodes() {\n    // 重置字符元素数组\n    rhythmReader.charElements = [];\n    \n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return false;\n    \n    // 查找所有文本节点并处理\n    const textNodes = [];\n    findTextNodes(contentContainer, textNodes);\n    \n    if (textNodes.length === 0) {\n      console.error(\"未找到文本节点\");\n      return false;\n    }\n    \n    console.log(`找到 ${textNodes.length} 个文本节点`);\n    \n    // 为每个文本节点创建字符span\n    textNodes.forEach(node => {\n      const text = node.nodeValue;\n      if (!text || text.trim() === '') return;\n      \n      // 创建文档片段来存放字符span\n      const fragment = document.createDocumentFragment();\n      \n      // 获取父元素计算样式以保持一致性\n      const parentStyles = window.getComputedStyle(node.parentNode);\n      \n      // 为每个字符创建span\n      for (let i = 0; i < text.length; i++) {\n        const char = text[i];\n        const span = document.createElement('span');\n        span.textContent = char;\n        span.className = 'rhythm-char';\n        span.dataset.rhythmIndex = rhythmReader.charElements.length;\n        \n        // 如果是空白字符，添加一个标志\n        if (char.trim() === '') {\n          span.dataset.whitespace = 'true';\n        }\n        \n        // 保持原始样式，重要：不设置任何背景\n        span.style.display = 'inline';\n        span.style.margin = '0';\n        span.style.padding = '0';\n        span.style.border = 'none';\n        span.style.backgroundColor = 'transparent';\n        \n        fragment.appendChild(span);\n        rhythmReader.charElements.push(span);\n      }\n      \n      // 替换原始节点\n      if (node.parentNode) {\n        node.parentNode.replaceChild(fragment, node);\n      }\n    });\n    \n    console.log(`总共创建了 ${rhythmReader.charElements.length} 个字符span`);\n    return rhythmReader.charElements.length > 0;\n  }\n\n  // 递归查找所有文本节点\n  function findTextNodes(element, textNodes) {\n    // 处理子节点\n    for (let i = 0; i < element.childNodes.length; i++) {\n      const node = element.childNodes[i];\n      \n      // 如果是文本节点且有内容\n      if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() !== '') {\n        textNodes.push(node);\n      } \n      // 如果是元素节点，递归处理\n      else if (node.nodeType === Node.ELEMENT_NODE) {\n        // 跳过读者UI元素\n        if (node.id === 'rhythm-speed-slider' || \n            node.id === 'rhythm-reading-button' ||\n            node.className === 'rhythm-char') {\n          continue;\n        }\n        findTextNodes(node, textNodes);\n      }\n    }\n  }\n\n  // 更新文本颜色 - 修正后的颜色方案\n  function updateTextColors() {\n    // 更新所有字符的颜色\n    rhythmReader.charElements.forEach((span, index) => {\n      // 确定颜色\n      let color;\n      let fontWeight = 'inherit';\n      \n      if (index === rhythmReader.currentIndex) {\n        color = '#00aa00'; // 当前阅读的字 - 绿色\n        fontWeight = 'bold';\n      } else if (index === rhythmReader.currentIndex + 1 || index === rhythmReader.currentIndex + 2) {\n        color = '#aaaaaa'; // 接下来两个字 - 淡灰色\n      } else if (rhythmReader.readIndices.has(index)) {\n        color = '#ffffff'; // 已读字符 - 白色（表示已读）\n      } else {\n        color = 'rgba(160, 160, 160, 0.25)'; // 未读字符 - 非常淡的灰色（可见但不明显）\n      }\n      \n      span.style.color = color;\n      span.style.fontWeight = fontWeight;\n      \n      // 确保没有背景\n      span.style.backgroundColor = 'transparent';\n      span.style.background = 'none';\n    });\n  }\n\n  // 滚动到当前字符\n  function scrollToCurrentChar() {\n    const span = rhythmReader.charElements[rhythmReader.currentIndex];\n    if (!span) return;\n    \n    const rect = span.getBoundingClientRect();\n    const contentContainer = document.querySelector('.page-content');\n    \n    // 估计行高\n    const lineHeight = parseInt(window.getComputedStyle(span).lineHeight) || \n                       Math.max(20, rect.height * 1.5);\n    \n    // 确定滚动容器\n    const isContainerScrollable = contentContainer && \n      contentContainer.scrollHeight > contentContainer.clientHeight &&\n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n    \n    if (isContainerScrollable) {\n      // 容器滚动\n      const containerRect = contentContainer.getBoundingClientRect();\n      const relativeTop = rect.top - containerRect.top + contentContainer.scrollTop;\n      \n      const visibleTop = contentContainer.scrollTop;\n      const visibleBottom = visibleTop + contentContainer.clientHeight;\n      \n      if (relativeTop < visibleTop + lineHeight || relativeTop > visibleBottom - lineHeight) {\n        contentContainer.scrollBy({\n          top: lineHeight * 2 * (relativeTop > visibleBottom - lineHeight ? 1 : -1),\n          behavior: 'smooth'\n        });\n      }\n    } else {\n      // 窗口滚动\n      const viewportTop = window.scrollY;\n      const viewportBottom = viewportTop + window.innerHeight;\n      const absoluteTop = rect.top + window.scrollY;\n      \n      if (absoluteTop < viewportTop + lineHeight || absoluteTop > viewportBottom - lineHeight) {\n        window.scrollBy({\n          top: lineHeight * 2 * (absoluteTop > viewportBottom - lineHeight ? 1 : -1),\n          behavior: 'smooth'\n        });\n      }\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        <div className=\"logo\">\n          <h2>ADHD阅读助手</h2>\n        </div>\n        <label className=\"upload-btn\">\n          选择文件\n          <input\n            type=\"file\"\n            accept=\".pdf,.txt\"\n            onChange={handleFileUpload}\n            style={{ display: 'none' }}\n          />\n        </label>\n      </div>\n      <div className=\"main-content\">\n        <div className=\"header\">\n          <h1>ADHD阅读助手</h1>\n          <div className=\"controls\">\n            <div className=\"mode-selector\">\n              <select value={readingMode} onChange={handleReadingModeChange}>\n                <option value=\"normal\">普通模式</option>\n                <option value=\"static\">静态高亮模式</option>\n                <option value=\"follow-mouse\">鼠标跟随高亮</option>\n                <option value=\"auto-reader\">自动阅读器</option>\n                <option value=\"rhythm\">节奏阅读模式</option>\n              </select>\n            </div>\n            <div className=\"mode-selector\">\n              <select value={posMode} onChange={(e) => setPosMode(e.target.value)}>\n                <option value=\"none\">无词性标注</option>\n                <option value=\"noun\">名词标注</option>\n                <option value=\"all\">全词性标注</option>\n              </select>\n            </div>\n            {readingMode === 'auto-reader' && (\n              <div className=\"speed-control\">\n                <button onClick={() => adjustSpeed(-100)}>-</button>\n                <span>{autoReaderState.speed}ms</span>\n                <button onClick={() => adjustSpeed(100)}>+</button>\n              </div>\n            )}\n          </div>\n        </div>\n        <div className=\"page-content\">\n          {content ? (\n            <div dangerouslySetInnerHTML={{ __html: content }} />\n          ) : (\n            <div className=\"empty-state\">\n              <p>请上传PDF或TXT文件开始阅读</p>\n            </div>\n          )}\n        </div>\n        {content && (\n          <div className=\"nav-buttons\">\n            <button className=\"page-btn prev\" onClick={() => changePage(-1)} disabled={currentPage === 1}>\n              上一页\n            </button>\n            <span className=\"page-info\">\n              第 {currentPage} 页 / 共 {totalPages} 页\n            </span>\n            <button className=\"page-btn next\" onClick={() => changePage(1)} disabled={currentPage === totalPages}>\n              下一页\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}