{"ast":null,"code":"var _jsxFileName = \"D:\\\\adhd-read-helper\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 添加全局事件跟踪对象\nwindow.eventTracker = window.eventTracker || {\n  mouseFollowHandlers: []\n};\n\n// 自动阅读器全局对象\nwindow.autoReader = {\n  charPositions: [],\n  intervalId: null,\n  currentIndex: 0,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false,\n  cleanup: null\n};\n\n// 添加新的节奏阅读模式代码\n// 全局变量，确保在页面切换后仍然保持状态\nwindow.rhythmReaderGlobal = window.rhythmReaderGlobal || {\n  active: false,\n  speed: 300\n};\n\n// 节奏阅读模式 - 调试启动流程版\n(function () {\n  console.log(\"节奏阅读模式初始化中...\");\n\n  // 停止任何现有实例\n  if (window.rhythmReader && window.rhythmReader.stop) {\n    window.rhythmReader.stop();\n  }\n\n  // UI通知函数\n  const showNotification = function (message, type = 'info') {\n    console.log(\"[通知]\", message, type);\n\n    // 移除已有的通知\n    const existingNotification = document.getElementById('rhythm-notification');\n    if (existingNotification) {\n      existingNotification.remove();\n    }\n\n    // 创建通知元素\n    const notification = document.createElement('div');\n    notification.id = 'rhythm-notification';\n\n    // 根据类型设置颜色\n    const bgColor = type === 'info' ? '#3498db' : type === 'success' ? '#2ecc71' : type === 'warning' ? '#f1c40f' : '#e74c3c';\n\n    // 使用内联样式确保不被覆盖\n    notification.innerHTML = `\n      <div style=\"\n        position: fixed;\n        top: 20px;\n        left: 50%;\n        transform: translateX(-50%);\n        background-color: ${bgColor};\n        color: white;\n        padding: 12px 24px;\n        border-radius: 4px;\n        box-shadow: 0 3px 10px rgba(0,0,0,0.3);\n        z-index: 999999;\n        font-size: 16px;\n        font-weight: bold;\n        text-align: center;\n        min-width: 200px;\n        pointer-events: none;\n        transition: opacity 0.3s;\n        opacity: 1;\n      \">${message}</div>\n    `;\n    document.body.appendChild(notification);\n\n    // 自动隐藏\n    setTimeout(() => {\n      if (notification.parentNode) {\n        notification.style.opacity = '0';\n        setTimeout(() => notification.remove(), 300);\n      }\n    }, 2500);\n  };\n\n  // 节奏阅读功能\n  const rhythmReader = {\n    active: false,\n    intervalId: null,\n    speed: 300,\n    currentIndex: 0,\n    readIndices: new Set(),\n    charElements: [],\n    // 启动节奏阅读\n    start: function () {\n      console.log(\"【RhythmReader.start】函数被调用\");\n\n      // 已经启动则不重复操作\n      if (this.active) {\n        console.log(\"【RhythmReader.start】已激活，跳过\");\n        return;\n      }\n      console.log(\"【RhythmReader.start】正在启动...\");\n\n      // 显示即将启动的通知\n      showNotification(\"正在启动节奏阅读模式...\", \"info\");\n\n      // 设置为活动状态\n      this.active = true;\n\n      // 初始化文本 - 这里是关键改进部分\n      console.log(\"【RhythmReader.start】调用 initializeTextNodes...\");\n      if (!this.initializeTextNodes()) {\n        console.error(\"【RhythmReader.start】initializeTextNodes 返回 false\");\n        this.active = false;\n        showNotification(\"无法启动：未找到合适的阅读内容\", \"error\");\n        return; // 明确返回，阻止后续操作\n      }\n\n      // 如果成功初始化\n      console.log(\"【RhythmReader.start】文本初始化成功\");\n      showNotification(\"节奏阅读模式已开启\", \"success\");\n\n      // 重置阅读位置\n      this.currentIndex = 0;\n      this.readIndices.clear();\n\n      // 添加速度滑块\n      this.addSpeedSlider();\n\n      // 更新颜色\n      this.updateTextColors();\n\n      // 滚动到开始位置\n      this.scrollToCurrentChar();\n\n      // 设置阅读间隔\n      this.intervalId = setInterval(() => this.moveToNextChar(), this.speed);\n      console.log(\"【RhythmReader.start】启动完成，定时器已设置\");\n    },\n    // 停止节奏阅读\n    stop: function () {\n      if (!this.active) return;\n      console.log(\"【RhythmReader.stop】函数被调用\");\n\n      // 只有在停止时才显示关闭通知\n      showNotification(\"节奏阅读模式已关闭\", \"info\");\n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n        console.log(\"【RhythmReader.stop】定时器已清除\");\n      }\n      this.active = false;\n\n      // 恢复原始文本\n      this.restoreOriginalText();\n\n      // 移除速度滑块\n      const slider = document.getElementById('rhythm-speed-slider');\n      if (slider) slider.remove();\n      console.log(\"【RhythmReader.stop】已完全停止\");\n    },\n    // 初始化文本节点 - 添加详细日志\n    initializeTextNodes: function () {\n      console.log(\"【initializeTextNodes】开始查找文本节点...\");\n      // 重置字符元素数组\n      this.charElements = [];\n\n      // 尝试找到主要阅读区域容器\n      const contentSelectors = [\n      // PDF特定选择器 - 优先检查\n      '.pdf-content', '.pdf-container', '.page-content', '.pdf-paragraph', '.pdf-text', '.pdf-line',\n      // 通用内容选择器\n      'article', '.article', '.post', '.content', '.post-content', '.article-content', '.entry-content', '.main-content', '.reading-content', '.book-content', '.chapter-content', '#content', '#main-content', '#article-content', '[role=\"main\"]', 'main'];\n      let contentContainer = null;\n      console.log(\"【initializeTextNodes】正在尝试选择器列表...\");\n\n      // 尝试找到阅读区域容器\n      for (const selector of contentSelectors) {\n        const elements = document.querySelectorAll(selector);\n        console.log(`【initializeTextNodes】选择器 ${selector} 找到 ${elements.length} 个元素`);\n        for (const element of elements) {\n          // 确认元素可见且有内容\n          if (element.offsetParent !== null) {\n            const textLength = element.textContent.trim().length;\n            console.log(`【initializeTextNodes】检查元素: ${selector}, 文本长度: ${textLength}`);\n            if (textLength > 50) {\n              // 至少有一定量的文本\n              contentContainer = element;\n              console.log(`【initializeTextNodes】找到阅读区域: ${selector}, 内容长度: ${textLength}`);\n              break;\n            }\n          }\n        }\n        if (contentContainer) break;\n      }\n\n      // 特别检查PDF段落元素\n      if (!contentContainer) {\n        console.log(\"【initializeTextNodes】未找到明确的阅读区域，尝试直接查找PDF段落\");\n        const pdfParagraphs = document.querySelectorAll('.pdf-paragraph');\n        if (pdfParagraphs && pdfParagraphs.length > 0) {\n          console.log(`【initializeTextNodes】找到 ${pdfParagraphs.length} 个PDF段落元素`);\n          // 使用第一个段落的父元素作为内容容器\n          contentContainer = pdfParagraphs[0].parentElement;\n\n          // 从段落元素中提取内容\n          for (const paragraph of pdfParagraphs) {\n            if (paragraph.textContent.trim().length > 0) {\n              console.log(`【initializeTextNodes】处理PDF段落: ${paragraph.textContent.substring(0, 30)}...`);\n\n              // 创建文本节点\n              const text = paragraph.textContent;\n              const fragment = document.createDocumentFragment();\n\n              // 为每个字符创建span\n              for (let i = 0; i < text.length; i++) {\n                const char = text[i];\n                const span = document.createElement('span');\n                span.textContent = char;\n                span.className = 'rhythm-char';\n                span.dataset.rhythmIndex = this.charElements.length;\n                if (char.trim() === '') {\n                  span.dataset.whitespace = 'true';\n                }\n                span.style.cssText = `\n                  display: inline;\n                  margin: 0;\n                  padding: 0;\n                  border: none;\n                  background-color: transparent;\n                `;\n                fragment.appendChild(span);\n                this.charElements.push(span);\n              }\n\n              // 清空段落原有内容并添加处理后的span元素\n              while (paragraph.firstChild) {\n                paragraph.removeChild(paragraph.firstChild);\n              }\n              paragraph.appendChild(fragment);\n            }\n          }\n          if (this.charElements.length > 0) {\n            console.log(`【initializeTextNodes】从PDF段落创建了 ${this.charElements.length} 个字符span`);\n            return true;\n          }\n        }\n      }\n\n      // 如果没有找到内容\n      if (!contentContainer) {\n        console.error(\"【initializeTextNodes】未找到内容容器!\");\n        // 尝试查看页面上的文本节点情况\n        const allTextNodes = document.createTreeWalker(document.body, NodeFilter.SHOW_TEXT).filter(node => node.textContent && node.textContent.trim().length > 10);\n        console.log(`【initializeTextNodes】页面上有 ${allTextNodes.length} 个长度>10的文本节点`);\n\n        // 使用body作为最后的回退选项\n        console.log(\"【initializeTextNodes】使用 document.body 作为回退\");\n        contentContainer = document.body;\n      }\n\n      // 查找文本节点并处理\n      const textNodes = [];\n      console.log(`【initializeTextNodes】正在从选定容器中查找文本节点`);\n      const walker = document.createTreeWalker(contentContainer, NodeFilter.SHOW_TEXT, {\n        acceptNode: function (node) {\n          // 排除空文本\n          if (node.nodeValue.trim() === '') return NodeFilter.FILTER_REJECT;\n          const parent = node.parentElement;\n          if (!parent) return NodeFilter.FILTER_REJECT;\n\n          // 排除不可见的元素\n          const style = window.getComputedStyle(parent);\n          if (style.display === 'none' || style.visibility === 'hidden') {\n            return NodeFilter.FILTER_REJECT;\n          }\n\n          // 排除UI元素\n          const tagName = parent.tagName.toLowerCase();\n          if (['button', 'input', 'select', 'option', 'textarea'].includes(tagName)) {\n            return NodeFilter.FILTER_REJECT;\n          }\n\n          // 排除导航元素\n          if (['nav', 'header', 'footer'].includes(tagName)) {\n            return NodeFilter.FILTER_REJECT;\n          }\n          return NodeFilter.FILTER_ACCEPT;\n        }\n      });\n      while (walker.nextNode()) {\n        textNodes.push(walker.currentNode);\n      }\n      console.log(`【initializeTextNodes】找到 ${textNodes.length} 个文本节点`);\n      if (textNodes.length === 0) {\n        console.error(\"【initializeTextNodes】未找到任何文本节点!\");\n        return false;\n      }\n\n      // 为每个文本节点创建字符span\n      let processedCount = 0;\n      textNodes.forEach((node, nodeIndex) => {\n        const text = node.nodeValue;\n        if (!text || text.trim() === '') return;\n        if (nodeIndex < 5) {\n          console.log(`【initializeTextNodes】处理文本节点 ${nodeIndex + 1}: \"${text.substring(0, 30)}${text.length > 30 ? '...' : ''}\"`);\n        }\n\n        // 创建文档片段来存放字符span\n        const fragment = document.createDocumentFragment();\n\n        // 为每个字符创建span\n        for (let i = 0; i < text.length; i++) {\n          const char = text[i];\n          const span = document.createElement('span');\n          span.textContent = char;\n          span.className = 'rhythm-char';\n          span.dataset.rhythmIndex = this.charElements.length;\n\n          // 如果是空白字符，添加一个标志\n          if (char.trim() === '') {\n            span.dataset.whitespace = 'true';\n          }\n\n          // 设置样式\n          span.style.cssText = `\n            display: inline;\n            margin: 0;\n            padding: 0;\n            border: none;\n            background-color: transparent;\n          `;\n          fragment.appendChild(span);\n          this.charElements.push(span);\n        }\n\n        // 替换原始节点\n        if (node.parentNode) {\n          node.parentNode.replaceChild(fragment, node);\n          processedCount++;\n        }\n      });\n      console.log(`【initializeTextNodes】成功处理了 ${processedCount}/${textNodes.length} 个文本节点`);\n      console.log(`【initializeTextNodes】总共创建了 ${this.charElements.length} 个字符span`);\n      return this.charElements.length > 0;\n    },\n    updateTextColors: function () {\n      if (this.charElements.length === 0) {\n        console.log(\"【updateTextColors】没有字符元素，跳过\");\n        return;\n      }\n      console.log(`【updateTextColors】正在更新 ${this.charElements.length} 个字符的颜色`);\n      this.charElements.forEach((span, index) => {\n        // 确定颜色\n        let color;\n        let fontWeight = 'inherit';\n        if (index === this.currentIndex) {\n          color = '#00aa00'; // 当前阅读的字 - 绿色\n          fontWeight = 'bold';\n        } else if (index === this.currentIndex + 1 || index === this.currentIndex + 2) {\n          color = '#aaaaaa'; // 接下来两个字 - 淡灰色\n        } else if (this.readIndices.has(index)) {\n          color = '#ffffff'; // 已读字符 - 白色（表示已读）\n        } else {\n          color = 'rgba(160, 160, 160, 0.25)'; // 未读字符 - 非常淡的灰色\n        }\n        try {\n          span.style.color = color;\n          span.style.fontWeight = fontWeight;\n        } catch (e) {\n          console.error(`【updateTextColors】更新样式出错: ${e.message}`);\n        }\n      });\n    },\n    moveToNextChar: function () {\n      if (!this.active || this.charElements.length === 0) {\n        console.log(\"【moveToNextChar】不活跃或无字符元素，跳过\");\n        return;\n      }\n\n      // 将当前字符标记为已读\n      this.readIndices.add(this.currentIndex);\n\n      // 移动到下一个非空白字符\n      let skippedWhitespace = 0;\n      do {\n        this.currentIndex++;\n\n        // 检查是否到达末尾\n        if (this.currentIndex >= this.charElements.length) {\n          console.log(\"【moveToNextChar】已到达末尾\");\n          showNotification(\"已到达文章末尾\", \"info\");\n          this.stop();\n          return;\n        }\n\n        // 计算跳过的空白字符\n        if (this.charElements[this.currentIndex] && this.charElements[this.currentIndex].dataset.whitespace === 'true') {\n          skippedWhitespace++;\n        }\n      } while (this.currentIndex < this.charElements.length && this.charElements[this.currentIndex] && this.charElements[this.currentIndex].dataset.whitespace === 'true');\n      if (skippedWhitespace > 0) {\n        console.log(`【moveToNextChar】跳过了 ${skippedWhitespace} 个空白字符`);\n      }\n\n      // 更新颜色\n      this.updateTextColors();\n\n      // 滚动到当前字符\n      this.scrollToCurrentChar();\n    },\n    scrollToCurrentChar: function () {\n      const span = this.charElements[this.currentIndex];\n      if (!span) {\n        console.error(\"【scrollToCurrentChar】当前字符元素不存在\");\n        return;\n      }\n      try {\n        const rect = span.getBoundingClientRect();\n        console.log(`【scrollToCurrentChar】当前字符位置: top=${rect.top}, left=${rect.left}`);\n\n        // 窗口滚动\n        const viewportHeight = window.innerHeight;\n        const idealPosition = viewportHeight * 0.4; // 屏幕40%的位置\n\n        window.scrollTo({\n          top: window.scrollY + rect.top - idealPosition,\n          behavior: 'smooth'\n        });\n      } catch (e) {\n        console.error(`【scrollToCurrentChar】滚动出错: ${e.message}`);\n      }\n    },\n    addSpeedSlider: function () {\n      let slider = document.getElementById('rhythm-speed-slider');\n      if (slider) slider.remove();\n      console.log(\"【addSpeedSlider】创建速度控制滑块\");\n      const container = document.createElement('div');\n      container.id = 'rhythm-speed-slider';\n      container.style.cssText = `\n        position: fixed;\n        top: 70px;\n        right: 20px;\n        background-color: rgba(0, 0, 0, 0.7);\n        padding: 10px;\n        border-radius: 5px;\n        box-shadow: 0 2px 5px rgba(0,0,0,0.2);\n        z-index: 10000;\n        display: flex;\n        align-items: center;\n        max-width: 300px;\n        color: white;\n      `;\n      const label = document.createElement('label');\n      label.textContent = '速度: ';\n      label.style.marginRight = '8px';\n      container.appendChild(label);\n      const input = document.createElement('input');\n      input.type = 'range';\n      input.min = '50';\n      input.max = '800';\n      input.step = '50';\n      input.value = this.speed;\n      input.style.width = '120px';\n      const valueDisplay = document.createElement('span');\n      valueDisplay.textContent = `${this.speed}ms`;\n      valueDisplay.style.marginLeft = '8px';\n      valueDisplay.style.minWidth = '60px';\n      const self = this;\n      input.addEventListener('input', function () {\n        const newSpeed = parseInt(this.value);\n        self.speed = newSpeed;\n        valueDisplay.textContent = `${newSpeed}ms`;\n        if (self.intervalId) {\n          clearInterval(self.intervalId);\n          self.intervalId = setInterval(() => self.moveToNextChar(), newSpeed);\n          console.log(`【addSpeedSlider】速度已调整为 ${newSpeed}ms`);\n        }\n      });\n      container.appendChild(input);\n      container.appendChild(valueDisplay);\n      document.body.appendChild(container);\n    },\n    restoreOriginalText: function () {\n      console.log(\"【restoreOriginalText】开始恢复原始文本\");\n      const charSpans = document.querySelectorAll('.rhythm-char');\n      console.log(`【restoreOriginalText】找到 ${charSpans.length} 个字符span`);\n      if (charSpans.length === 0) return;\n\n      // 按父节点分组\n      const parentNodeMap = new Map();\n      charSpans.forEach(span => {\n        const parent = span.parentNode;\n        if (!parent) return;\n        if (!parentNodeMap.has(parent)) {\n          parentNodeMap.set(parent, []);\n        }\n        parentNodeMap.get(parent).push(span);\n      });\n      console.log(`【restoreOriginalText】找到 ${parentNodeMap.size} 个父节点`);\n\n      // 对每个父节点，将连续的字符span合并回文本节点\n      let successCount = 0;\n      parentNodeMap.forEach((spans, parent) => {\n        if (spans.length === 0) return;\n        try {\n          const text = spans.map(span => span.textContent).join('');\n          const textNode = document.createTextNode(text);\n          if (spans[0].parentNode === parent) {\n            parent.replaceChild(textNode, spans[0]);\n            for (let i = 1; i < spans.length; i++) {\n              if (spans[i].parentNode === parent) {\n                parent.removeChild(spans[i]);\n              }\n            }\n            successCount++;\n          }\n        } catch (e) {\n          console.error(`【restoreOriginalText】恢复文本时出错: ${e.message}`);\n        }\n      });\n      console.log(`【restoreOriginalText】成功恢复了 ${successCount}/${parentNodeMap.size} 个文本节点`);\n\n      // 清除字符元素数组\n      this.charElements = [];\n    }\n  };\n\n  // 监听模式切换\n  const originalReadingModeChanged = window.readingModeChanged;\n  window.readingModeChanged = function (mode) {\n    console.log(`【readingModeChanged】阅读模式变更为: ${mode}`);\n    if (rhythmReader.active) {\n      console.log(\"【readingModeChanged】检测到节奏阅读正在运行，停止中...\");\n      rhythmReader.stop();\n    }\n\n    // 调用原始函数\n    if (typeof originalReadingModeChanged === 'function') {\n      try {\n        console.log(\"【readingModeChanged】调用原始模式切换函数\");\n        originalReadingModeChanged(mode);\n      } catch (e) {\n        console.error(`【readingModeChanged】原始模式切换函数出错: ${e.message}`);\n      }\n    }\n\n    // 只有当选择了节奏阅读模式时才启动\n    if (mode === 'rhythm' || mode === 'rhythmReading') {\n      console.log(\"【readingModeChanged】检测到节奏阅读模式被选择\");\n      showNotification(\"正在启动节奏阅读模式...\", \"info\");\n\n      // 确保在UI更新后启动\n      setTimeout(() => {\n        console.log(\"【readingModeChanged】延时执行启动...\");\n        rhythmReader.start();\n      }, 100);\n    }\n  };\n\n  // 监听选择器变化\n  const setupModeListeners = function () {\n    const selectors = document.querySelectorAll('select, .dropdown');\n    console.log(`【setupModeListeners】找到 ${selectors.length} 个选择器元素`);\n    selectors.forEach((selector, index) => {\n      console.log(`【setupModeListeners】监听选择器 #${index + 1}: ${selector.id || selector.className || 'unknown'}`);\n      selector.addEventListener('change', function (e) {\n        const value = this.value || '';\n        console.log(`【setupModeListeners】选择器 #${index + 1} 变化为: ${value}`);\n        if (value.includes('rhythm') || value.includes('节奏')) {\n          console.log(`【setupModeListeners】检测到节奏阅读模式被选择`);\n          showNotification(\"节奏阅读模式已选择\", \"info\");\n          setTimeout(() => {\n            console.log(`【setupModeListeners】延时启动节奏阅读`);\n            rhythmReader.start();\n          }, 100);\n        }\n      });\n    });\n  };\n\n  // 将对象暴露到全局\n  window.rhythmReader = rhythmReader;\n  console.log(\"【初始化】rhythmReader 对象已挂载到全局\");\n\n  // 初始化监听\n  setupModeListeners();\n\n  // 检查当前已选模式\n  setTimeout(function () {\n    console.log(\"【初始化】检查当前是否已选择节奏阅读模式\");\n    try {\n      // 检查活动元素\n      const activeElements = document.querySelectorAll('.active, .selected, [data-active=\"true\"]');\n      console.log(`【初始化】找到 ${activeElements.length} 个激活状态的元素`);\n      for (const el of activeElements) {\n        const mode = el.dataset.mode || el.id || el.className || '';\n        console.log(`【初始化】检查元素: ${mode}`);\n        if (mode.includes('rhythm')) {\n          console.log(\"【初始化】检测到当前已是节奏阅读模式\");\n          showNotification(\"检测到节奏阅读模式已激活\", \"info\");\n          rhythmReader.start();\n          return;\n        }\n      }\n\n      // 检查选择器\n      const selectors = document.querySelectorAll('select');\n      console.log(`【初始化】找到 ${selectors.length} 个选择器元素`);\n      for (const select of selectors) {\n        if (select.value && select.value.includes('rhythm')) {\n          console.log(`【初始化】检测到选择器值为: ${select.value}`);\n          showNotification(\"检测到节奏阅读模式已选择\", \"info\");\n          rhythmReader.start();\n          return;\n        }\n      }\n      console.log(\"【初始化】未检测到节奏阅读模式已选择\");\n    } catch (e) {\n      console.error(`【初始化】检查当前模式时出错: ${e.message}`);\n    }\n  }, 500);\n  console.log(\"节奏阅读模式初始化完成，等待用户选择\");\n\n  // 添加测试函数便于调试\n  window.testRhythmReaderStart = function () {\n    console.log(\"【测试】手动调用 rhythmReader.start()\");\n    rhythmReader.start();\n  };\n})();\n\n// 定义一个全局函数用于从应用代码中启动节奏阅读\nwindow.activateRhythmReadingMode = function () {\n  console.log(\"尝试从应用代码中启动节奏阅读模式\");\n  if (window.rhythmReader) {\n    if (window.rhythmReader.active) {\n      console.log(\"节奏阅读模式已经在运行\");\n    } else {\n      window.rhythmReader.start();\n    }\n  } else {\n    console.error(\"节奏阅读模式未初始化\");\n    alert(\"无法启动节奏阅读模式：组件未初始化\");\n  }\n};\n\n// 更新初始化函数\nconst initializeRhythmReading = () => {\n  // 不再自动初始化，而是等待用户选择\n  console.log(\"节奏阅读模式准备就绪，等待用户选择\");\n};\n\n// 更新启动函数\nconst startRhythmReading = () => {\n  if (window.rhythmReader && typeof window.rhythmReader.start === 'function') {\n    window.rhythmReader.start();\n  }\n};\nconst App = () => {\n  _s();\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  const [isTableOfContents, setIsTableOfContents] = useState(false);\n\n  // 实现缺失的函数\n  // 应用深色背景\n  const applyDarkBackground = () => {\n    document.body.classList.add('dark-background');\n\n    // 添加必要的CSS样式\n    if (!document.getElementById('dark-background-style')) {\n      const style = document.createElement('style');\n      style.id = 'dark-background-style';\n      style.textContent = `\n        .dark-background {\n          background-color: #000 !important;\n        }\n        .dark-background .sidebar {\n          background: linear-gradient(145deg, #4834d4, #341f9e) !important;\n        }\n        .dark-background .page-content {\n          background-color: #000 !important;\n        }\n        .dark-background .main-content {\n          background-color: #000 !important;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 恢复正常背景\n  const restoreDarkBackground = () => {\n    document.body.classList.remove('dark-background');\n  };\n\n  // 添加裸眼3D样式\n  const addNakedEye3DStyles = () => {\n    if (!document.getElementById('naked-eye-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'naked-eye-3d-style';\n      style.textContent = `\n        .naked-eye-3d-container {\n          position: relative;\n          perspective: 800px;\n          width: 100%;\n        }\n        \n        .naked-eye-3d-text {\n          display: inline-block;\n          animation: float 3s ease-in-out infinite;\n          text-shadow: 0 0 5px rgba(255,255,255,0.3);\n          padding: 0 4px;\n          color: white;\n          filter: drop-shadow(0 0 5px rgba(120, 220, 255, 0.6));\n        }\n        \n        @keyframes float {\n          0% { transform: translateZ(0px); }\n          50% { transform: translateZ(20px); }\n          100% { transform: translateZ(0px); }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 添加舒适3D样式\n  const addComfortable3DStyles = () => {\n    if (!document.getElementById('comfortable-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'comfortable-3d-style';\n      style.textContent = `\n        .emboss-3d-text {\n          color: #fff;\n          text-shadow: \n            1px 1px 1px rgba(0,0,0,0.5),\n            -1px -1px 1px rgba(255,255,255,0.5);\n          letter-spacing: 1.5px;\n          font-weight: 500;\n        }\n        \n        .float-3d-text {\n          display: inline-block;\n          transform-style: preserve-3d;\n          transform: perspective(500px) translateZ(10px);\n          text-shadow: 0 2px 5px rgba(0,0,0,0.5);\n        }\n        \n        .gradient-3d-text {\n          display: inline-block;\n          background: linear-gradient(to bottom, #fff, #aaa);\n          -webkit-background-clip: text;\n          -webkit-text-fill-color: transparent;\n          text-shadow: 0 2px 4px rgba(0,0,0,0.3);\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 添加闪读样式\n  const addFlashReadingStyles = () => {\n    if (!document.getElementById('flash-reading-style')) {\n      const style = document.createElement('style');\n      style.id = 'flash-reading-style';\n      style.textContent = `\n        .flash-reading-container {\n          position: relative;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          z-index: 1000;\n          padding: 20px;\n        }\n        \n        .flash-reading-display-wrapper {\n          position: relative;\n          margin: 40px 0;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        \n        .flash-reading-display {\n          font-size: 36px;\n          font-weight: bold;\n          text-align: center;\n          color: white;\n          min-height: 80px;\n          max-width: 90%;\n          padding: 20px 40px;\n          position: relative; /* 允许绝对定位的覆盖层 */\n          z-index: 2;\n        }\n        \n        .flash-reading-cover {\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(128, 128, 128, 0.6); /* 灰色遮罩 */\n          border-radius: 8px;\n          z-index: 1; /* 确保在文本后面 */\n        }\n        \n        .flash-reading-controls {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          gap: 20px;\n          margin-bottom: 20px;\n          width: 100%;\n        }\n        \n        .flash-reading-buttons {\n          display: flex;\n          gap: 10px;\n          flex-wrap: wrap;\n          justify-content: center;\n        }\n        \n        .flash-reading-speed {\n          display: flex;\n          align-items: center;\n          color: white;\n          width: 80%;\n          max-width: 400px;\n          gap: 10px;\n        }\n        \n        .flash-reading-slider {\n          flex: 1;\n          height: 8px;\n          appearance: none;\n          background: #555;\n          border-radius: 4px;\n          outline: none;\n        }\n        \n        .flash-reading-slider::-webkit-slider-thumb {\n          appearance: none;\n          width: 20px;\n          height: 20px;\n          border-radius: 50%;\n          background: #6c5ce7;\n          cursor: pointer;\n        }\n        \n        .flash-reading-btn {\n          padding: 10px 20px;\n          border: none;\n          border-radius: 4px;\n          background-color: #6c5ce7;\n          color: white;\n          font-size: 16px;\n          cursor: pointer;\n          transition: background-color 0.2s;\n        }\n        \n        .flash-reading-btn:hover {\n          background-color: #5344c0;\n        }\n        \n        .flash-reading-btn:disabled {\n          background-color: #aaa;\n          cursor: not-allowed;\n        }\n        \n        .flash-reading-progress {\n          color: white;\n          font-size: 14px;\n          margin-top: 10px;\n        }\n        .flash-reading-speed-note {\n          font-size: 12px;\n          color: #ccc;\n          margin-left: 5px;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 初始化闪读模式\n  const initializeFlashReading = () => {\n    // 添加样式\n    addFlashReadingStyles();\n    const sentences = window.flashReadingSentences;\n    if (!sentences || !Array.isArray(sentences) || sentences.length === 0) {\n      console.error('闪读模式: 未找到句子数据');\n      return;\n    }\n\n    // 获取全局UI元素\n    const display = document.getElementById('flash-reading-display');\n    const speedSlider = document.getElementById('flash-reading-speed');\n    const speedValue = document.getElementById('flash-reading-speed-value');\n    const playButton = document.getElementById('flash-reading-play');\n    const pauseButton = document.getElementById('flash-reading-pause');\n    const stopButton = document.getElementById('flash-reading-stop');\n    const prevButton = document.getElementById('flash-reading-prev-sentence');\n    const nextButton = document.getElementById('flash-reading-next-sentence');\n    const progress = document.getElementById('flash-reading-progress');\n    const cover = document.querySelector('.flash-reading-cover');\n    if (!display || !speedSlider || !speedValue || !playButton || !pauseButton || !stopButton || !prevButton || !nextButton || !progress || !cover) {\n      console.error('闪读模式: 未找到UI元素');\n      return;\n    }\n\n    // 创建闪读控制器\n    window.flashReader = {\n      sentences: sentences,\n      currentIndex: 0,\n      interval: null,\n      speed: parseInt(speedSlider.value),\n      isPlaying: false,\n      // 开始闪读\n      start() {\n        if (this.interval) {\n          clearInterval(this.interval);\n        }\n        this.isPlaying = true;\n        playButton.disabled = true;\n        pauseButton.disabled = false;\n        progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n\n        // 显示当前句子\n        this.displayCurrentSentence();\n\n        // 设置闪读间隔\n        this.interval = setInterval(() => {\n          this.currentIndex++;\n          if (this.currentIndex >= this.sentences.length) {\n            this.stop();\n            display.textContent = '阅读完成';\n            return;\n          }\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }, this.speed);\n      },\n      // 显示当前句子\n      displayCurrentSentence() {\n        if (this.currentIndex < this.sentences.length) {\n          const currentSentence = this.sentences[this.currentIndex];\n          display.textContent = currentSentence;\n          display.style.color = 'white'; // 确保文本为白色\n\n          // 调整背景以适应内容\n          setTimeout(() => {\n            const displayRect = display.getBoundingClientRect();\n            // 确保覆盖层完全包裹文本\n            cover.style.width = `${displayRect.width}px`;\n            cover.style.height = `${displayRect.height}px`;\n          }, 10);\n        }\n      },\n      // 暂停闪读\n      pause() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n      },\n      // 停止闪读\n      stop() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        this.currentIndex = 0;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n        display.textContent = '准备开始';\n        progress.textContent = `进度：0 / ${this.sentences.length}`; // 重置进度\n      },\n      // 更新速度\n      updateSpeed(newSpeed) {\n        this.speed = newSpeed;\n        speedValue.textContent = `${newSpeed} ms`;\n\n        // 保存速度设置到本地存储\n        localStorage.setItem('flash-reading-speed', newSpeed);\n\n        // 如果正在播放，重新开始以应用新速度\n        if (this.isPlaying) {\n          clearInterval(this.interval);\n          this.start(); // 直接调用start方法重新开始\n        }\n      },\n      // 返回上一句\n      prevSentence() {\n        if (this.currentIndex > 0) {\n          this.currentIndex--;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n      // 跳到下一句\n      nextSentence() {\n        if (this.currentIndex < this.sentences.length - 1) {\n          this.currentIndex++;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n      // 清理资源\n      cleanup() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        this.currentIndex = 0;\n      }\n    };\n\n    // 添加事件监听器\n    playButton.addEventListener('click', () => {\n      window.flashReader.start();\n    });\n    pauseButton.addEventListener('click', () => {\n      window.flashReader.pause();\n    });\n    stopButton.addEventListener('click', () => {\n      window.flashReader.stop();\n    });\n    speedSlider.addEventListener('input', e => {\n      const newSpeed = parseInt(e.target.value);\n      window.flashReader.updateSpeed(newSpeed);\n    });\n    prevButton.addEventListener('click', () => {\n      window.flashReader.prevSentence();\n    });\n    nextButton.addEventListener('click', () => {\n      window.flashReader.nextSentence();\n    });\n\n    // 初始化\n    const savedSpeed = localStorage.getItem('flash-reading-speed');\n    const initialSpeed = savedSpeed ? parseInt(savedSpeed) : 1000;\n    speedSlider.value = initialSpeed;\n    window.flashReader.updateSpeed(initialSpeed);\n    console.log('闪读模式已初始化，共 ' + sentences.length + ' 个句子');\n  };\n\n  // 创建闪读内容\n  const createFlashReadingContent = text => {\n    return `<div class=\"flash-reading-content\">\n      <p>${text}</p>\n    </div>`;\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 格式化文本用于鼠标跟随\n  const formatTextForMouseFollow = text => {\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个单词添加span，以便于添加高亮效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"follow-word\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\" data-follow=\"true\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用静态高亮\n  const applyStaticHighlight = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为单词随机添加颜色高亮\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      let lastColor = null;\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n          return;\n        }\n\n        // 随机决定是否高亮和使用哪种颜色\n        if (Math.random() < 0.7) {\n          let color;\n          if (lastColor === 'red') {\n            color = 'blue';\n          } else if (lastColor === 'blue') {\n            color = 'red';\n          } else {\n            color = Math.random() < 0.5 ? 'red' : 'blue';\n          }\n          lastColor = color;\n          processedParagraph += `<span class=\"highlight-word ${color}\">${word}</span>`;\n        } else {\n          processedParagraph += word;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用裸眼3D效果\n  const applyNakedEye3dEffect = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content naked-eye-3d-container\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个词添加3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"naked-eye-3d-text\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用舒适3D效果\n  const applyComfortable3dEffect = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个词随机应用不同的3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          processedParagraph += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 初始化裸眼3D\n  const initializeNakedEye3D = () => {\n    // 为裸眼3D文本添加动画\n    const textElements = document.querySelectorAll('.naked-eye-3d-text');\n    textElements.forEach((element, index) => {\n      // 添加随机延迟，使动画错开\n      const delay = Math.random() * 2;\n      element.style.animationDelay = `${delay}s`;\n    });\n  };\n\n  // 添加鼠标跟随监听器\n  const addMouseFollowListeners = () => {\n    // 获取内容容器\n    const contentArea = document.querySelector('.mouse-follow-content');\n    if (!contentArea) {\n      console.error('未找到鼠标跟随内容区域');\n      return;\n    }\n\n    // 上一个高亮的行\n    let lastHighlightedLine = null;\n\n    // 监听鼠标移动 - 精确的行检测\n    const mouseMoveHandler = e => {\n      // 获取鼠标位置\n      const mouseY = e.clientY;\n\n      // 获取所有行\n      const allLines = contentArea.querySelectorAll('.follow-line');\n      let foundLine = null;\n      let minDistance = Infinity;\n\n      // 寻找鼠标所在的精确行\n      allLines.forEach(line => {\n        const rect = line.getBoundingClientRect();\n        const lineCenter = rect.top + rect.height / 2;\n        const distance = Math.abs(mouseY - lineCenter);\n\n        // 如果鼠标在行范围内，计算到行中心的距离\n        if (mouseY >= rect.top && mouseY <= rect.bottom) {\n          if (distance < minDistance) {\n            minDistance = distance;\n            foundLine = line;\n          }\n        }\n      });\n\n      // 更新高亮状态\n      if (lastHighlightedLine && lastHighlightedLine !== foundLine) {\n        // 移除旧高亮\n        lastHighlightedLine.classList.remove('highlighted');\n      }\n      if (foundLine) {\n        // 添加新高亮\n        foundLine.classList.add('highlighted');\n        lastHighlightedLine = foundLine;\n\n        // 调试输出\n        console.log('当前高亮行:', foundLine.textContent.substring(0, 30) + '...');\n      } else if (lastHighlightedLine) {\n        // 如果没有找到新行，且有上一个高亮行，移除它\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n\n    // 鼠标离开处理\n    const mouseLeaveHandler = () => {\n      // 清除当前高亮\n      if (lastHighlightedLine) {\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n\n    // 存储处理函数引用\n    window.eventTracker = window.eventTracker || {\n      mouseFollowHandlers: []\n    };\n    window.eventTracker.mouseFollowHandlers.push({\n      element: contentArea,\n      event: 'mousemove',\n      handler: mouseMoveHandler\n    }, {\n      element: contentArea,\n      event: 'mouseleave',\n      handler: mouseLeaveHandler\n    });\n\n    // 添加事件监听器\n    contentArea.addEventListener('mousemove', mouseMoveHandler);\n    contentArea.addEventListener('mouseleave', mouseLeaveHandler);\n    console.log('改进的鼠标跟随监听器已初始化');\n  };\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n  }, []);\n\n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async file => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n\n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n\n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n\n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({\n        scale: 1.0\n      });\n\n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async textContent => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n\n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n\n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n\n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    const lines = [...lineMap.values()];\n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    return hasTocKeywords || hasPageNumberPatterns || shortLineRatio > 0.7 && numberLineRatio > 0.3;\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n\n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n\n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n\n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n\n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = text => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    return result;\n  };\n\n  // 处理内容页面 - 按句子划分段落\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n\n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 按句子划分内容（句号、问号、感叹号等作为分隔符）\n      const sentences = splitIntoSentences(extractedText);\n\n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch (mode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          // 使用ADHD友好的静态高亮处理\n          console.log('应用ADHD友好的静态高亮模式');\n          processedContent = formatSimpleHighlightedText(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'rhythm':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          processedContent = createFlashReadingContentFromSentences(sentences);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n      setContent(processedContent);\n\n      // 如果是静态高亮模式，添加延时验证检查\n      if (mode === 'static') {\n        setTimeout(() => {\n          const contentArea = document.querySelector('.adhd-highlight-mode');\n          if (contentArea) {\n            console.log('静态高亮模式元素存在');\n            const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n            console.log(`找到 ${paragraphs.length} 个段落`);\n\n            // 检查样式是否正确应用\n            if (paragraphs.length > 0) {\n              const firstPara = paragraphs[0];\n              const styles = window.getComputedStyle(firstPara);\n              console.log('段落应用的样式:', {\n                color: styles.color,\n                backgroundColor: styles.backgroundColor,\n                fontFamily: styles.fontFamily,\n                fontSize: styles.fontSize\n              });\n            }\n          }\n        }, 200);\n      }\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 将文本分割成句子\n  const splitIntoSentences = text => {\n    // 匹配句号、问号、感叹号后跟空格或结束的模式\n    // 支持中英文标点符号\n    const sentenceRegex = /([.!?。！？；;]+\\s*)/g;\n\n    // 分割文本成句子\n    const sentences = [];\n    let lastIndex = 0;\n    let match;\n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const sentence = text.substring(lastIndex, endIndex).trim();\n\n      // 避免添加空句子\n      if (sentence) {\n        sentences.push(sentence);\n      }\n      lastIndex = endIndex;\n    }\n\n    // 处理最后一部分（如果没有以句号等结尾）\n    if (lastIndex < text.length) {\n      const lastSentence = text.substring(lastIndex).trim();\n      if (lastSentence) {\n        sentences.push(lastSentence);\n      }\n    }\n    return sentences;\n  };\n\n  // 专门为闪读模式分割文本，以任意标点符号为分隔点\n  const splitIntoFlashReadingSegments = text => {\n    // 匹配任意标点符号包括中英文标点\n    const sentenceRegex = /([,.!?:;，。！？：；、]+\\s*)/g;\n\n    // 分割文本成短句\n    const segments = [];\n    let lastIndex = 0;\n    let match;\n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const segment = text.substring(lastIndex, endIndex).trim();\n\n      // 避免添加空段落\n      if (segment) {\n        segments.push(segment);\n      }\n      lastIndex = endIndex;\n    }\n\n    // 处理最后一部分（如果没有以标点符号结尾）\n    if (lastIndex < text.length) {\n      const lastSegment = text.substring(lastIndex).trim();\n      if (lastSegment) {\n        segments.push(lastSegment);\n      }\n    }\n    return segments;\n  };\n\n  // 格式化句子为HTML\n  const formatSentencesToHtml = sentences => {\n    let html = '<div class=\"pdf-content\">';\n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${sentence}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为句子应用静态高亮\n  const applyStaticHighlightToSentences = sentences => {\n    let html = '<div class=\"pdf-content adhd-content\">';\n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n\n      // 简单地为句子添加特定样式的class\n      html += `<p class=\"pdf-paragraph adhd-sentence\">${sentence}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为鼠标跟随模式格式化句子\n  const formatSentencesForMouseFollow = sentences => {\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    sentences.forEach((sentence, index) => {\n      if (sentence.trim() === '') return;\n\n      // 每个句子作为独立行，使用div而不是p标签\n      html += `<div class=\"follow-line\" data-line=\"${index}\" data-sentence=\"${sentence.substring(0, 20)}...\" style=\"color: inherit;\">${sentence}</div>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为舒适3D模式格式化句子\n  const applyComfortable3dEffectToSentences = sentences => {\n    let html = '<div class=\"pdf-content\">';\n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n\n      // 为每个词随机应用不同的3D效果\n      const words = sentence.split(/(\\s+)/);\n      let processedSentence = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedSentence += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          processedSentence += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedSentence}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为闪读模式创建内容\n  const createFlashReadingContentFromSentences = sentences => {\n    // 储存句子到全局变量，用于后续显示\n    window.flashReadingSentences = sentences;\n\n    // 返回闪读界面的HTML结构\n    return `\n      <div class=\"flash-reading-container\">\n        <div class=\"flash-reading-controls\">\n          <div class=\"flash-reading-buttons\">\n            <button id=\"flash-reading-prev-sentence\" class=\"flash-reading-btn\">上一句</button>\n            <button id=\"flash-reading-play\" class=\"flash-reading-btn\">开始</button>\n            <button id=\"flash-reading-pause\" class=\"flash-reading-btn\" disabled>暂停</button>\n            <button id=\"flash-reading-stop\" class=\"flash-reading-btn\">停止</button>\n            <button id=\"flash-reading-next-sentence\" class=\"flash-reading-btn\">下一句</button>\n          </div>\n          <div class=\"flash-reading-speed\">\n            <span>速度：</span>\n            <input type=\"range\" id=\"flash-reading-speed\" min=\"300\" max=\"1700\" step=\"50\" value=\"1000\" class=\"flash-reading-slider\">\n            <span id=\"flash-reading-speed-value\">1000 ms</span>\n            <span class=\"flash-reading-speed-note\">（数值越小，切换越快）</span>\n          </div>\n          <div class=\"flash-reading-progress\">\n            <span id=\"flash-reading-progress\">进度：0 / ${sentences.length}</span>\n          </div>\n        </div>\n        <div class=\"flash-reading-display-wrapper\">\n          <div class=\"flash-reading-cover\"></div> <!-- 这里是闪卡 -->\n          <div id=\"flash-reading-display\" class=\"flash-reading-display\">准备开始</div>\n        </div>\n      </div>`;\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async file => {\n    try {\n      const text = await file.text();\n\n      // 根据阅读模式选择不同的处理方式\n      let processedContent = '';\n      if (readingMode === 'flash-reading') {\n        // 闪读模式下使用特定的分割函数\n        const segments = splitIntoFlashReadingSegments(text);\n        processedContent = createFlashReadingContentFromSentences(segments);\n\n        // 初始化闪读模式\n        setTimeout(() => {\n          initializeFlashReading();\n        }, 100);\n      } else {\n        // 其他模式使用默认的分割方式\n        const sentences = splitIntoSentences(text);\n        switch (readingMode) {\n          case 'normal':\n            processedContent = formatSentencesToHtml(sentences);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlightToSentences(sentences);\n            break;\n          case 'follow-mouse':\n            processedContent = formatSentencesForMouseFollow(sentences);\n            break;\n          case 'comfortable-3d':\n            processedContent = applyComfortable3dEffectToSentences(sentences);\n            break;\n          default:\n            processedContent = formatSentencesToHtml(sentences);\n        }\n      }\n\n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n\n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setContent('<div class=\"error-message\">TXT文件处理失败</div>');\n    }\n  };\n\n  // 处理Markdown文件\n  const handleMarkdownFile = async file => {\n    try {\n      const text = await file.text();\n\n      // 使用marked库转换markdown为HTML\n      let html = '';\n      try {\n        if (window.marked) {\n          html = window.marked.parse(text);\n        } else {\n          // 如果没有marked库，简单地拆分为段落\n          html = `<div>${text.split(\"\\n\\n\").map(p => `<p>${p}</p>`).join(\"\")}</div>`;\n        }\n      } catch (parseError) {\n        console.error('Markdown解析错误:', parseError);\n        html = `<div>${text}</div>`;\n      }\n\n      // 提取纯文本内容\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = html;\n      const plainText = tempDiv.textContent || tempDiv.innerText || '';\n\n      // 分割文本为句子\n      const sentences = splitIntoSentences(plainText);\n\n      // 根据当前阅读模式处理内容\n      let processedContent = '';\n      switch (readingMode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlightToSentences(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          // 使用特定的闪读分割函数重新处理文本\n          const segments = splitIntoFlashReadingSegments(plainText);\n          processedContent = createFlashReadingContentFromSentences(segments);\n\n          // 初始化闪读模式\n          setTimeout(() => {\n            initializeFlashReading();\n          }, 100);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n\n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n\n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('Markdown处理错误:', error);\n      setContent('<div class=\"error-message\">Markdown文件处理失败</div>');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async e => {\n    const uploadedFile = e.target.files[0];\n    if (!uploadedFile) return;\n    setLoading(true);\n    setFileName(uploadedFile.name);\n    try {\n      if (uploadedFile.type === 'application/pdf') {\n        await handlePdfFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/plain' || uploadedFile.name.endsWith('.txt')) {\n        await handleTxtFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/markdown' || uploadedFile.name.endsWith('.md')) {\n        await handleMarkdownFile(uploadedFile);\n      } else {\n        setContent('<div class=\"error-message\">不支持的文件格式</div>');\n      }\n    } catch (error) {\n      console.error('处理文件时出错:', error);\n      setContent('<div class=\"error-message\">处理文件时出错</div>');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = container => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n\n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n\n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n\n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width / 2,\n            // 水平中心\n            y: rect.bottom,\n            // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n\n    // 过滤无效位置并排序\n    return positions.filter(p => p.char.trim() !== '').sort((a, b) => {\n      // 先按行排序，同行按列排序\n      const yDiff = a.y - b.y;\n      if (Math.abs(yDiff) > 5) {\n        // 5px阈值判断是否同一行\n        return yDiff;\n      }\n      return a.x - b.x;\n    });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n\n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - containerVisibleHeight / 2;\n\n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - window.innerHeight / 2;\n\n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n\n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n\n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length ||\n      // 已到末尾\n      positions[nextIndex].char.trim() === '' ||\n      // 下一个是空白\n      positions[nextIndex].y > charPosition.y + 5) {\n        // 下一个在新行\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n\n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n\n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || current.y > prev.y + 5) {\n        // 有明显换行\n        break;\n      }\n      start--;\n    }\n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n\n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n\n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (window.autoReader.charPositions.length === 0) {\n      if (window.currentPage < window.totalPages) {\n        window.changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 重置索引到开头\n    window.autoReader.currentIndex = 0;\n\n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n\n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n\n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none';\n      highlight.style.zIndex = '998';\n      contentContainer.appendChild(highlight);\n    }\n\n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n\n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20;\n\n    // 尝试获取实际行高\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(window.autoReader.charPositions[i].y - window.autoReader.charPositions[i - 1].y);\n        if (yDiff > 5) {\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n\n    // 记录上次滚动的位置\n    let lastScrolledY = -1;\n    const scrollSafeZone = lineHeight * 2.5;\n\n    // 设置字符大小的估计值\n    let charWidth = 20;\n    let charHeight = lineHeight * 0.8;\n\n    // 尝试估计字符宽度\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        if (window.autoReader.charPositions[i].x !== window.autoReader.charPositions[i - 1].x) {\n          const xDiff = Math.abs(window.autoReader.charPositions[i].x - window.autoReader.charPositions[i - 1].x);\n          if (xDiff > 0 && xDiff < 50) {\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    window.autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (window.autoReader.currentIndex < window.autoReader.charPositions.length && ((_window$autoReader$ch = window.autoReader.charPositions[window.autoReader.currentIndex]) === null || _window$autoReader$ch === void 0 ? void 0 : _window$autoReader$ch.char.trim()) === '') {\n        var _window$autoReader$ch;\n        window.autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (window.autoReader.currentIndex >= window.autoReader.charPositions.length) {\n        if (window.currentPage < window.totalPages) {\n          window.changePage(1);\n          clearInterval(window.autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n      const pos = window.autoReader.charPositions[window.autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      if (cursor && highlight) {\n        const contentRect = contentContainer.getBoundingClientRect();\n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        highlight.style.left = `${relativeX - charWidth / 2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n\n        // 滚动处理\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          if (isContainerScrollable) {\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = relativeY;\n            }\n          } else {\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      window.autoReader.currentIndex++;\n    }, window.autoReader.speed);\n\n    // 在停止自动阅读时清除所有高亮\n    window.autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n\n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n\n      // 调用清理函数\n      if (window.autoReader.cleanup) {\n        window.autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n\n    // 重置翻页状态\n    window.autoReader.isPageChanging = false;\n\n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n\n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n\n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n\n    // 收集字符位置\n    window.autoReader.charPositions = getAllCharacterPositions(content);\n\n    // 如果当前页没有内容，尝试翻页\n    if (window.autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !window.autoReader.isPageChanging) {\n        window.autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async e => {\n    const newMode = e.target.value;\n    const prevMode = readingMode;\n    console.log(`切换阅读模式: 从 ${prevMode} 到 ${newMode}`);\n\n    // 更新状态\n    setReadingMode(newMode);\n\n    // 如果有PDF文档和当前页，重新处理当前页内容\n    if (pdfDocument && currentPage > 0) {\n      try {\n        console.log('重新处理当前页面内容');\n        const page = await pdfDocument.getPage(currentPage);\n\n        // 不使用任何额外处理，直接使用最原始的方式重新加载页面\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n\n        // 根据当前模式设置内容\n        if (newMode === 'static') {\n          // 静态高亮模式 - 使用改进的句子处理\n          const html = formatSimpleHighlightedText(sentences);\n          console.log('设置静态高亮内容');\n          setContent(html);\n\n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n            if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n\n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n\n                // 验证文字颜色\n                if (styles.color === 'rgb(51, 51, 51)' || styles.color === '#333333') {\n                  console.log('文字颜色正确应用');\n                } else {\n                  console.warn('文字颜色可能未正确应用:', styles.color);\n                }\n              }\n            } else {\n              console.error('未找到静态高亮模式内容区域');\n            }\n          }, 200);\n        } else if (newMode === 'flash-reading') {\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n\n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n\n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n        } else {\n          // 其他模式保持不变\n          const handler = getContentHandlerForMode(newMode);\n          const processedContent = handler(sentences);\n          setContent(processedContent);\n        }\n      } catch (error) {\n        console.error('应用阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 首先确保移除鼠标跟随监听器\n    removeMouseFollowListeners();\n\n    // 清理节奏阅读器\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n\n    // 清理闪读器\n    if (window.flashReader) {\n      window.flashReader.cleanup();\n    }\n\n    // 清理舒适3D效果\n    const comfortable3DElements = document.querySelectorAll('.emboss-3d-text, .float-3d-text, .gradient-3d-text');\n    comfortable3DElements.forEach(el => el.remove());\n\n    // 清理闪读模式元素\n    const flashReadingElements = document.querySelectorAll('.flash-reading-container, .flash-reading-display, .flash-reading-controls');\n    flashReadingElements.forEach(el => el.remove());\n\n    // 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll('.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line, .rhythm-char');\n    highlights.forEach(el => {\n      if (el.parentNode) el.parentNode.removeChild(el);\n    });\n\n    // 彻底替换内容区域以移除所有事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      var _contentArea$querySel;\n      // 先保存底部翻页控件\n      const bottomPagination = contentArea.querySelector('.bottom-pagination');\n\n      // 深度克隆内容，但不克隆事件监听器\n      const contentHTML = ((_contentArea$querySel = contentArea.querySelector('div[dangerouslySetInnerHTML]')) === null || _contentArea$querySel === void 0 ? void 0 : _contentArea$querySel.innerHTML) || '';\n      const newContentArea = contentArea.cloneNode(false);\n\n      // 创建新的内容容器\n      const newContentContainer = document.createElement('div');\n      newContentContainer.innerHTML = contentHTML;\n      newContentArea.appendChild(newContentContainer);\n\n      // 如果有底部翻页控件，重新添加\n      if (bottomPagination && totalPages > 0) {\n        const newBottomPagination = bottomPagination.cloneNode(true);\n        // 重新绑定事件\n        const prevBtn = newBottomPagination.querySelector('.page-btn:first-child');\n        const nextBtn = newBottomPagination.querySelector('.page-btn:last-child');\n        if (prevBtn) prevBtn.onclick = () => changePage(-1);\n        if (nextBtn) nextBtn.onclick = () => changePage(1);\n        newContentArea.appendChild(newBottomPagination);\n      }\n      if (contentArea.parentNode) {\n        contentArea.parentNode.replaceChild(newContentArea, contentArea);\n      }\n    }\n\n    // 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 移除所有特殊标记和样式\n      paragraph.removeAttribute('data-follow');\n      paragraph.removeAttribute('style');\n\n      // 清理特殊span标签\n      paragraph.innerHTML = paragraph.innerHTML.replace(/<span class=\"text-line\"[^>]*>/g, '').replace(/<span class=\"rhythm-char\"[^>]*>/g, '').replace(/<span class=\"line-highlight[^\"]*\"[^>]*>/g, '').replace(/<span class=\"mouse-highlight[^\"]*\"[^>]*>/g, '').replace(/<\\/span>/g, '');\n    });\n\n    // 移除特殊UI元素\n    const elementsToRemove = ['rhythm-speed-slider', 'rhythm-notification'];\n    elementsToRemove.forEach(id => {\n      const element = document.getElementById(id);\n      if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    });\n\n    // 移除暗色背景\n    document.body.classList.remove('dark-background');\n\n    // 清理闪读模式\n    if (window.flashReader && typeof window.flashReader.cleanup === 'function') {\n      window.flashReader.cleanup();\n    }\n  };\n  const handleAutoScroll = () => {\n    window.autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = e => {\n    if (readingMode !== 'follow-mouse') return;\n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    const rect = contentArea.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    clearAllHighlights();\n    const paragraphs = contentArea.querySelectorAll('p');\n    paragraphs.forEach(paragraph => {\n      const paragraphRect = paragraph.getBoundingClientRect();\n      const paragraphX = paragraphRect.left - rect.left;\n      const paragraphY = paragraphRect.top - rect.top;\n      if (y >= paragraphY && y <= paragraphY + paragraphRect.height) {\n        const words = paragraph.querySelectorAll('span');\n        words.forEach(word => {\n          const wordRect = word.getBoundingClientRect();\n          const wordX = wordRect.left - rect.left;\n          if (x >= wordX && x <= wordX + wordRect.width) {\n            word.classList.add('highlight');\n          }\n        });\n      }\n    });\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 专门用于移除鼠标跟随事件的函数\n  const removeMouseFollowListeners = () => {\n    // 移除记录的所有监听器\n    if (window.eventTracker && window.eventTracker.mouseFollowHandlers) {\n      window.eventTracker.mouseFollowHandlers.forEach(({\n        element,\n        event,\n        handler\n      }) => {\n        if (element && element.removeEventListener) {\n          element.removeEventListener(event, handler);\n        }\n      });\n      window.eventTracker.mouseFollowHandlers = [];\n    }\n\n    // 为安全起见，尝试从document和内容区域移除通用处理函数\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    }\n    document.removeEventListener('mousemove', handleMouseMove);\n\n    // 清除所有当前高亮\n    clearAllHighlights();\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n\n    // 添加底部翻页控件样式\n    const bottomPaginationStyles = document.createElement('style');\n    bottomPaginationStyles.id = 'bottom-pagination-styles';\n    bottomPaginationStyles.innerHTML = `\n      .bottom-pagination {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        padding: 20px 0 30px;\n        margin-top: 30px;\n        width: 100%;\n        background-color: transparent;\n        border-radius: 5px;\n      }\n\n      .bottom-pagination .page-btn {\n        background-color: #6c5ce7;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        padding: 8px 15px;\n        margin: 0 10px;\n        cursor: pointer;\n        font-size: 14px;\n        transition: background-color 0.2s ease;\n      }\n\n      .bottom-pagination .page-btn:hover {\n        background-color: #4834d4;\n      }\n\n      .bottom-pagination .page-btn:disabled {\n        background-color: #aaa;\n        cursor: not-allowed;\n      }\n\n      .bottom-pagination .page-info {\n        font-size: 14px;\n        margin: 0 10px;\n      }\n    `;\n    document.head.appendChild(bottomPaginationStyles);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n    addComfortable3DStyles();\n\n    // 添加鼠标跟随模式的样式\n    const mouseFollowStyle = document.createElement('style');\n    mouseFollowStyle.id = 'intelligent-mouse-follow-style';\n    mouseFollowStyle.textContent = `\n      /* 基础样式 */\n      .mouse-follow-content {\n        position: relative;\n        line-height: 1.8;\n      }\n      \n      .mouse-follow-content .follow-line {\n        position: relative;\n        padding: 8px 16px;\n        margin: 4px 0;\n        border-radius: 6px;\n        transition: all 0.2s ease;\n        display: block;\n        min-height: 1.8em;\n        white-space: normal;\n        word-wrap: break-word;\n        text-indent: 2em;\n      }\n      \n      /* 高亮状态 */\n      .follow-line.highlighted {\n        background-color: #ffa500 !important; /* 橙色背景 */\n        color: #ffffff !important; /* 白色文字 */\n        font-weight: bold !important;\n        font-size: 1.1em; /* 稍微调小字号 */\n        transform: translateX(5px);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n      }\n      \n      \n      /* 平滑过渡效果 */\n      .follow-line {\n        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n      }\n      \n      /* 行间距优化 */\n      .mouse-follow-content .follow-line + .follow-line {\n        margin-top: 4px;\n      }\n      \n      /* 添加行指示器 */\n      .follow-line::before {\n        content: '';\n        position: absolute;\n        left: 0;\n        top: 0;\n        bottom: 0;\n        width: 3px;\n        background: linear-gradient(to bottom, transparent, rgba(255, 255, 255, 0.5), transparent);\n        opacity: 0;\n        transition: opacity 0.2s ease;\n      }\n      \n      .follow-line.highlighted::before {\n        opacity: 1;\n      }\n    `;\n    document.head.appendChild(mouseFollowStyle);\n\n    // 创建深色背景下的ADHD友好高亮样式\n    const style = document.createElement('style');\n    style.id = 'adhd-friendly-highlight-style';\n    style.textContent = `\n      /* ADHD友好的高亮样式 - 适配深色背景 */\n      .adhd-highlight-mode {\n        line-height: 1.8;\n        padding: 20px;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph {\n        margin-bottom: 1.2em;\n        background-color: transparent;\n        padding: 12px 15px;\n        border-radius: 6px;\n        border-left: 3px solid rgba(255, 255, 255, 0.2);\n        transition: all 0.3s ease;\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover {\n        transform: translateX(5px);\n        border-left-color: rgba(255, 255, 255, 0.4);\n      }\n      \n      /* 加粗样式 - 白色加粗 */\n      .adhd-bold {\n        font-weight: 700;\n        color: #ffffff;\n        letter-spacing: 0.02em;\n        font-size: 1.1em;\n        text-shadow: 0 0 1px rgba(255, 255, 255, 0.2);\n      }\n      \n      /* 彩色样式 - 使用鲜明的蓝色 */\n      .adhd-colored {\n        color: #6c5ce7;\n        font-weight: 500;\n        font-size: 1.05em;\n        text-shadow: 0 0 1px rgba(108, 92, 231, 0.2);\n      }\n      \n      /* 正常样式 - 普通白色 */\n      .adhd-normal {\n        color: rgba(255, 255, 255, 0.8);\n        font-size: 1em;\n      }\n\n      /* 添加平滑过渡效果 */\n      .adhd-bold, .adhd-colored, .adhd-normal {\n        transition: all 0.2s ease;\n      }\n\n      /* 悬停效果 */\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-bold {\n        color: #ffffff;\n        text-shadow: 0 0 2px rgba(255, 255, 255, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-colored {\n        color: #8a7ff7;\n        text-shadow: 0 0 2px rgba(138, 127, 247, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-normal {\n        color: rgba(255, 255, 255, 0.9);\n      }\n\n      /* 添加段落间距的视觉引导 */\n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph {\n        margin-top: 1.5em;\n        position: relative;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph::before {\n        content: '';\n        position: absolute;\n        top: -0.75em;\n        left: 0;\n        right: 0;\n        height: 1px;\n        background: linear-gradient(\n          to right,\n          transparent,\n          rgba(255, 255, 255, 0.1),\n          transparent\n        );\n      }\n    `;\n    document.head.appendChild(style);\n\n    // 添加基础鼠标跟随样式\n    const mouseFollowPageStyle = document.createElement('style');\n    mouseFollowPageStyle.id = 'basic-mouse-follow-style';\n    mouseFollowPageStyle.textContent = `\n      .follow-line {\n        padding: 8px 12px;\n        margin: 4px 0;\n        border-radius: 4px;\n        transition: background-color 0.2s ease;\n      }\n      .follow-line.highlighted {\n        background-color: #ffa500;\n        color: #000080;\n        font-weight: bold;\n      }\n    `;\n    document.head.appendChild(mouseFollowPageStyle);\n    return () => {\n      const existingStyle = document.getElementById('adhd-friendly-highlight-style');\n      if (existingStyle) existingStyle.remove();\n      const existingMouseFollowStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (existingMouseFollowStyle) existingMouseFollowStyle.remove();\n      const existingBasicMouseFollowStyle = document.getElementById('basic-mouse-follow-style');\n      if (existingBasicMouseFollowStyle) existingBasicMouseFollowStyle.remove();\n      mouseFollowPageStyle.remove();\n    };\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 清理旧监听器\n    removeMouseFollowListeners();\n\n    // 添加新监听器\n    setTimeout(() => {\n      addMouseFollowListeners();\n\n      // 添加调试辅助 - 显示行边界\n      const contentArea = document.querySelector('.mouse-follow-content');\n      if (contentArea) {\n        const lines = contentArea.querySelectorAll('.follow-line');\n        console.log(`初始化鼠标跟随模式，共 ${lines.length} 行`);\n\n        // 可选：启用可视化调试\n        if (false) {\n          // 设置为true可以启用可视化调试\n          lines.forEach((line, index) => {\n            line.style.border = '1px dashed #888';\n            line.setAttribute('title', `行 ${index + 1}`);\n          });\n        }\n\n        // 验证行高亮效果\n        const firstLine = lines[0];\n        if (firstLine) {\n          console.log('行样式验证:', {\n            padding: window.getComputedStyle(firstLine).padding,\n            margin: window.getComputedStyle(firstLine).margin,\n            fontSize: window.getComputedStyle(firstLine).fontSize,\n            lineHeight: window.getComputedStyle(firstLine).lineHeight\n          });\n        }\n      }\n    }, 100);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = delta => {\n    window.autoReader.speed = Math.max(100, window.autoReader.speed + delta);\n    if (window.autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async delta => {\n    console.log(`翻页请求: 当前页 ${currentPage}, 增量 ${delta}`);\n    const newPage = currentPage + delta;\n    if (newPage < 1 || newPage > totalPages) {\n      console.log('无效页码，不执行翻页');\n      return;\n    }\n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n    const wasFlashReading = readingMode === 'flash-reading' && window.flashReader && window.flashReader.isPlaying;\n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    if (wasFlashReading && window.flashReader) {\n      window.flashReader.cleanup();\n    }\n\n    // 更新页码\n    setCurrentPage(newPage);\n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n\n      // 检查是否为目录页\n      const textContent = await page.getTextContent();\n      const isToc = await detectIfTocPage(textContent);\n      setIsTableOfContents(isToc);\n      if (isToc) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, page.getViewport({\n          scale: 1.0\n        }));\n      } else {\n        // 处理正文页面 - 根据当前阅读模式处理\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n\n        // 根据当前模式设置内容\n        if (readingMode === 'static') {\n          console.log('翻页后应用静态高亮模式');\n          const processedContent = formatSimpleHighlightedText(sentences);\n          setContent(processedContent);\n\n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n            if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n\n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n              }\n            }\n          }, 200);\n        } else if (readingMode === 'flash-reading') {\n          // 如果是闪读模式，则需要特殊处理\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n\n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n\n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n          return; // 已处理，直接返回\n        } else {\n          // 其他模式使用原处理函数\n          await processContentPage(page, readingMode);\n        }\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n    } catch (error) {\n      console.error('页面切换错误:', error);\n    }\n  };\n\n  // ADHD友好的静态高亮处理函数\n  const formatSimpleHighlightedText = sentences => {\n    console.log('开始处理ADHD友好的静态高亮文本，句子数量:', sentences.length);\n    let html = '<div class=\"pdf-content adhd-highlight-mode\">';\n    sentences.forEach((sentence, sentenceIndex) => {\n      if (!sentence || sentence.trim() === '') {\n        console.log(`跳过空句子，索引: ${sentenceIndex}`);\n        return;\n      }\n\n      // 清理和规范化文本\n      const cleanText = sentence.trim().replace(/\\s+/g, ' ') // 规范化空白字符\n      .replace(/&/g, '&amp;') // 转义特殊字符\n      .replace(/</g, '&lt;').replace(/>/g, '&gt;');\n\n      // 处理句子中的单词，为它们添加不同样式\n      const words = cleanText.split(/(\\s+)/);\n      let formattedSentence = '';\n      words.forEach((word, wordIndex) => {\n        if (word.trim() === '') {\n          // 保留空格\n          formattedSentence += word;\n        } else {\n          // 根据位置应用不同的样式类\n          // 三种交替样式: 加粗、彩色、正常\n          const styleClass = wordIndex % 3 === 0 ? 'adhd-bold' : wordIndex % 3 === 1 ? 'adhd-colored' : 'adhd-normal';\n          formattedSentence += `<span class=\"${styleClass}\">${word}</span>`;\n        }\n      });\n      console.log(`处理句子 ${sentenceIndex + 1}:`, cleanText.substring(0, 50) + '...');\n      html += `<p class=\"pdf-paragraph\">${formattedSentence}</p>`;\n    });\n    html += '</div>';\n\n    // 调试输出\n    console.log('生成的ADHD友好静态高亮HTML:', html.substring(0, 200) + '...');\n    return html;\n  };\n\n  // 根据阅读模式获取相应的内容处理函数\n  const getContentHandlerForMode = mode => {\n    switch (mode) {\n      case 'normal':\n        return formatSentencesToHtml;\n      case 'static':\n        return applyStaticHighlightToSentences;\n      case 'follow-mouse':\n        return formatSentencesForMouseFollow;\n      case 'comfortable-3d':\n        return applyComfortable3dEffectToSentences;\n      case 'flash-reading':\n        return sentences => {\n          // 闪读模式使用专门的分割函数重新处理文本\n          return createFlashReadingContentFromSentences(sentences);\n        };\n      default:\n        return formatSentencesToHtml;\n    }\n  };\n\n  // 监听阅读模式和当前页面的变化\n  useEffect(() => {\n    if (readingMode === 'mouse-follow' && currentPage && !isTableOfContents) {\n      // 移除之前的样式\n      const oldStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (oldStyle) {\n        oldStyle.remove();\n      }\n\n      // 添加基础鼠标跟随样式\n      const followModeStyle = document.createElement('style');\n      followModeStyle.id = 'basic-mouse-follow-style';\n      followModeStyle.textContent = `\n        .follow-line {\n          padding: 8px 12px;\n          margin: 4px 0;\n          border-radius: 4px;\n          transition: background-color 0.2s ease;\n        }\n        .follow-line.highlighted {\n          background-color: #ffa500;\n          color: #000080;\n          font-weight: bold;\n        }\n      `;\n      document.head.appendChild(followModeStyle);\n\n      // 处理当前页面内容\n      const page = pdfDocument.getPage(currentPage);\n      const textContent = page.getTextContent();\n      const sentences = textContent.items.map(item => item.str).join(' ').split(/[。！？]/).filter(s => s.trim());\n\n      // 应用基础鼠标跟随格式化\n      setContent(formatSentencesForMouseFollow(sentences));\n\n      // 添加鼠标跟随监听器\n      setTimeout(() => {\n        addMouseFollowListeners();\n      }, 100);\n      return () => {\n        followModeStyle.remove();\n      };\n    }\n  }, [readingMode, currentPage, pdfDocument]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3269,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3268,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reading-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u9605\\u8BFB\\u6A21\\u5F0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3273,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"reading-mode-select\",\n          value: readingMode,\n          onChange: handleReadingModeChange,\n          className: \"mode-select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"normal\",\n            children: \"\\u666E\\u901A\\u6A21\\u5F0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3280,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"static\",\n            children: \"\\u9759\\u6001\\u9AD8\\u4EAE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3281,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"follow-mouse\",\n            children: \"\\u9F20\\u6807\\u8DDF\\u968F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3282,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"rhythm\",\n            children: \"\\u8282\\u594F\\u9605\\u8BFB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3283,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"flash-reading\",\n            children: \"\\u95EA\\u8BFB\\u6A21\\u5F0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3284,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 3274,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3272,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".pdf,.txt,.md\",\n          hidden: true,\n          id: \"file-upload\",\n          onChange: handleFileUpload,\n          ref: fileRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3289,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"upload-btn\",\n          onClick: () => fileRef.current.click(),\n          children: \"\\u4E0A\\u4F20\\u6587\\u4EF6 (.pdf/.txt/.md)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3297,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3288,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 3267,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toolbar\",\n        children: fileName && /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"filename\",\n          children: fileName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3308,\n          columnNumber: 24\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3307,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-content\",\n        ref: readerContainerRef,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: content\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3313,\n          columnNumber: 13\n        }, this), totalPages > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bottom-pagination\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => changePage(-1),\n            disabled: currentPage <= 1,\n            className: \"page-btn\",\n            children: \"\\u4E0A\\u4E00\\u9875\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3317,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"page-info\",\n            children: [\"\\u7B2C \", currentPage, \" / \", totalPages, \" \\u9875\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 3324,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => changePage(1),\n            disabled: currentPage >= totalPages,\n            className: \"page-btn\",\n            children: \"\\u4E0B\\u4E00\\u9875\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3327,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 3316,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3312,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 3306,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 3266,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"x5N0itQI0gqtA84jt63lPsdPeRI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","pdfjsLib","pdfjsViewer","marked","pdfjs","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","window","currentPage","totalPages","changePage","eventTracker","mouseFollowHandlers","autoReader","charPositions","intervalId","currentIndex","speed","pageContainer","isScrolling","isPageChanging","cleanup","rhythmReaderGlobal","active","console","log","rhythmReader","stop","showNotification","message","type","existingNotification","document","getElementById","remove","notification","createElement","id","bgColor","innerHTML","body","appendChild","setTimeout","parentNode","style","opacity","readIndices","Set","charElements","start","initializeTextNodes","error","clear","addSpeedSlider","updateTextColors","scrollToCurrentChar","setInterval","moveToNextChar","clearInterval","restoreOriginalText","slider","contentSelectors","contentContainer","selector","elements","querySelectorAll","length","element","offsetParent","textLength","textContent","trim","pdfParagraphs","parentElement","paragraph","substring","text","fragment","createDocumentFragment","i","char","span","className","dataset","rhythmIndex","whitespace","cssText","push","firstChild","removeChild","allTextNodes","createTreeWalker","NodeFilter","SHOW_TEXT","filter","node","textNodes","walker","acceptNode","nodeValue","FILTER_REJECT","parent","getComputedStyle","display","visibility","tagName","toLowerCase","includes","FILTER_ACCEPT","nextNode","currentNode","processedCount","forEach","nodeIndex","replaceChild","index","color","fontWeight","has","e","add","skippedWhitespace","rect","getBoundingClientRect","top","left","viewportHeight","innerHeight","idealPosition","scrollTo","scrollY","behavior","container","label","marginRight","input","min","max","step","value","width","valueDisplay","marginLeft","minWidth","self","addEventListener","newSpeed","parseInt","charSpans","parentNodeMap","Map","set","get","size","successCount","spans","map","join","textNode","createTextNode","originalReadingModeChanged","readingModeChanged","mode","setupModeListeners","selectors","activeElements","el","select","testRhythmReaderStart","activateRhythmReadingMode","alert","initializeRhythmReading","startRhythmReading","App","_s","pages","setPages","setCurrentPage","setTotalPages","fileName","setFileName","loading","setLoading","fileRef","file","setFile","pdfInstance","setPdfInstance","extractedTextPages","setExtractedTextPages","readingMode","setReadingMode","posMode","setPosMode","markdownContent","setMarkdownContent","readerContainerRef","content","setContent","pdfDocument","setPdfDocument","isTableOfContents","setIsTableOfContents","applyDarkBackground","classList","head","restoreDarkBackground","addNakedEye3DStyles","addComfortable3DStyles","addFlashReadingStyles","initializeFlashReading","sentences","flashReadingSentences","Array","isArray","speedSlider","speedValue","playButton","pauseButton","stopButton","prevButton","nextButton","progress","cover","querySelector","flashReader","interval","isPlaying","disabled","displayCurrentSentence","currentSentence","displayRect","height","pause","updateSpeed","localStorage","setItem","prevSentence","nextSentence","target","savedSpeed","getItem","initialSpeed","createFlashReadingContent","formatTextToHtml","paragraphs","split","html","formatTextForMouseFollow","words","processedParagraph","word","applyStaticHighlight","lastColor","Math","random","applyNakedEye3dEffect","applyComfortable3dEffect","effectTypes","effectClass","floor","initializeNakedEye3D","textElements","delay","animationDelay","addMouseFollowListeners","contentArea","lastHighlightedLine","mouseMoveHandler","mouseY","clientY","allLines","foundLine","minDistance","Infinity","line","lineCenter","distance","abs","bottom","mouseLeaveHandler","event","handler","initializeMouseFollow","handlePdfFile","fileURL","URL","createObjectURL","loadingTask","getDocument","pdf","promise","numPages","extractAndProcessPage","pageNum","page","getPage","getTextContent","viewport","getViewport","scale","detectIfTocPage","processTocPage","processContentPage","textItems","items","fullText","item","str","hasTocKeywords","test","hasPageNumberPatterns","shortLinesCount","linesWithNumbersCount","lineMap","yKey","round","transform","lines","values","lineText","shortLineRatio","numberLineRatio","htmlContent","x","y","fontSize","sqrt","fontName","spacedText","getTextNodeAtPosition","nodes","childNodes","nodeType","Node","TEXT_NODE","range","createRange","selectNodeContents","rects","getClientRects","j","right","ELEMENT_NODE","found","processTextWithHighlight","result","extractedText","replace","splitIntoSentences","processedContent","formatSentencesToHtml","formatSimpleHighlightedText","formatSentencesForMouseFollow","applyComfortable3dEffectToSentences","createFlashReadingContentFromSentences","firstPara","styles","backgroundColor","fontFamily","sentenceRegex","lastIndex","match","exec","endIndex","sentence","lastSentence","splitIntoFlashReadingSegments","segments","segment","lastSegment","applyStaticHighlightToSentences","processedSentence","handleTxtFile","name","handleMarkdownFile","parse","p","parseError","tempDiv","plainText","innerText","handleFileUpload","uploadedFile","files","endsWith","getAllCharacterPositions","positions","setStart","setEnd","warn","sort","a","b","yDiff","scrollElementToCenter","elementY","isContainerScrollable","scrollHeight","clientHeight","overflowY","targetScrollTop","containerVisibleHeight","absoluteElementY","createReaderCursor","cursor","isSentenceEnd","charPosition","sentenceEndMarks","nextIndex","findSentenceStart","prev","current","isInVisibleArea","threshold","visibleTop","scrollTop","visibleBottom","topThreshold","bottomThreshold","startAutoReader","position","highlight","borderRadius","pointerEvents","zIndex","lineHeight","lastScrolledY","scrollSafeZone","charWidth","charHeight","xDiff","_window$autoReader$ch","stopAutoReader","pos","contentRect","relativeX","relativeY","isInRecentlyScrolledArea","needsScroll","scrollAmount","scrollBy","absoluteY","initializeAutoReader","handleReadingModeChange","newMode","prevMode","getContentHandlerForMode","cleanupDOM","removeMouseFollowListeners","comfortable3DElements","flashReadingElements","highlights","_contentArea$querySel","bottomPagination","contentHTML","newContentArea","cloneNode","newContentContainer","newBottomPagination","prevBtn","nextBtn","onclick","removeAttribute","elementsToRemove","handleAutoScroll","updateCursorPosition","force","handleMouseMove","clientX","clearAllHighlights","paragraphRect","paragraphX","paragraphY","wordRect","wordX","removeEventListener","addAutoReaderStyles","bottomPaginationStyles","mouseFollowStyle","mouseFollowPageStyle","existingStyle","existingMouseFollowStyle","existingBasicMouseFollowStyle","border","setAttribute","firstLine","padding","margin","adjustSpeed","delta","newPage","wasRhythmReading","wasFlashReading","isToc","sentenceIndex","cleanText","formattedSentence","wordIndex","styleClass","oldStyle","followModeStyle","s","children","_jsxFileName","lineNumber","columnNumber","onChange","accept","hidden","ref","onClick","click","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["D:/adhd-read-helper/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 添加全局事件跟踪对象\nwindow.eventTracker = window.eventTracker || {\n  mouseFollowHandlers: []\n};\n\n// 自动阅读器全局对象\nwindow.autoReader = {\n  charPositions: [],\n  intervalId: null,\n  currentIndex: 0,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false,\n  cleanup: null\n};\n\n// 添加新的节奏阅读模式代码\n// 全局变量，确保在页面切换后仍然保持状态\nwindow.rhythmReaderGlobal = window.rhythmReaderGlobal || {\n  active: false,\n  speed: 300\n};\n\n// 节奏阅读模式 - 调试启动流程版\n(function() {\n  console.log(\"节奏阅读模式初始化中...\");\n  \n  // 停止任何现有实例\n  if (window.rhythmReader && window.rhythmReader.stop) {\n    window.rhythmReader.stop();\n  }\n  \n  // UI通知函数\n  const showNotification = function(message, type = 'info') {\n    console.log(\"[通知]\", message, type);\n    \n    // 移除已有的通知\n    const existingNotification = document.getElementById('rhythm-notification');\n    if (existingNotification) {\n      existingNotification.remove();\n    }\n    \n    // 创建通知元素\n    const notification = document.createElement('div');\n    notification.id = 'rhythm-notification';\n    \n    // 根据类型设置颜色\n    const bgColor = type === 'info' ? '#3498db' : \n                    type === 'success' ? '#2ecc71' : \n                    type === 'warning' ? '#f1c40f' : '#e74c3c';\n    \n    // 使用内联样式确保不被覆盖\n    notification.innerHTML = `\n      <div style=\"\n        position: fixed;\n        top: 20px;\n        left: 50%;\n        transform: translateX(-50%);\n        background-color: ${bgColor};\n        color: white;\n        padding: 12px 24px;\n        border-radius: 4px;\n        box-shadow: 0 3px 10px rgba(0,0,0,0.3);\n        z-index: 999999;\n        font-size: 16px;\n        font-weight: bold;\n        text-align: center;\n        min-width: 200px;\n        pointer-events: none;\n        transition: opacity 0.3s;\n        opacity: 1;\n      \">${message}</div>\n    `;\n    \n    document.body.appendChild(notification);\n    \n    // 自动隐藏\n    setTimeout(() => {\n      if (notification.parentNode) {\n        notification.style.opacity = '0';\n        setTimeout(() => notification.remove(), 300);\n      }\n    }, 2500);\n  };\n  \n  // 节奏阅读功能\n  const rhythmReader = {\n    active: false,\n    intervalId: null,\n    speed: 300,\n    currentIndex: 0,\n    readIndices: new Set(),\n    charElements: [],\n    \n    // 启动节奏阅读\n    start: function() {\n      console.log(\"【RhythmReader.start】函数被调用\");\n      \n      // 已经启动则不重复操作\n      if (this.active) {\n        console.log(\"【RhythmReader.start】已激活，跳过\");\n        return;\n      }\n      \n      console.log(\"【RhythmReader.start】正在启动...\");\n      \n      // 显示即将启动的通知\n      showNotification(\"正在启动节奏阅读模式...\", \"info\");\n      \n      // 设置为活动状态\n      this.active = true;\n      \n      // 初始化文本 - 这里是关键改进部分\n      console.log(\"【RhythmReader.start】调用 initializeTextNodes...\");\n      if (!this.initializeTextNodes()) {\n        console.error(\"【RhythmReader.start】initializeTextNodes 返回 false\");\n        this.active = false;\n        showNotification(\"无法启动：未找到合适的阅读内容\", \"error\");\n        return; // 明确返回，阻止后续操作\n      }\n      \n      // 如果成功初始化\n      console.log(\"【RhythmReader.start】文本初始化成功\");\n      showNotification(\"节奏阅读模式已开启\", \"success\");\n      \n      // 重置阅读位置\n      this.currentIndex = 0;\n      this.readIndices.clear();\n      \n      // 添加速度滑块\n      this.addSpeedSlider();\n      \n      // 更新颜色\n      this.updateTextColors();\n      \n      // 滚动到开始位置\n      this.scrollToCurrentChar();\n      \n      // 设置阅读间隔\n      this.intervalId = setInterval(() => this.moveToNextChar(), this.speed);\n      console.log(\"【RhythmReader.start】启动完成，定时器已设置\");\n    },\n    \n    // 停止节奏阅读\n    stop: function() {\n      if (!this.active) return;\n      \n      console.log(\"【RhythmReader.stop】函数被调用\");\n      \n      // 只有在停止时才显示关闭通知\n      showNotification(\"节奏阅读模式已关闭\", \"info\");\n      \n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n        console.log(\"【RhythmReader.stop】定时器已清除\");\n      }\n      \n      this.active = false;\n      \n      // 恢复原始文本\n      this.restoreOriginalText();\n      \n      // 移除速度滑块\n      const slider = document.getElementById('rhythm-speed-slider');\n      if (slider) slider.remove();\n      \n      console.log(\"【RhythmReader.stop】已完全停止\");\n    },\n    \n    // 初始化文本节点 - 添加详细日志\n    initializeTextNodes: function() {\n      console.log(\"【initializeTextNodes】开始查找文本节点...\");\n      // 重置字符元素数组\n      this.charElements = [];\n      \n      // 尝试找到主要阅读区域容器\n      const contentSelectors = [\n        // PDF特定选择器 - 优先检查\n        '.pdf-content', '.pdf-container', '.page-content', \n        '.pdf-paragraph', '.pdf-text', '.pdf-line',\n        // 通用内容选择器\n        'article', '.article', '.post', '.content', '.post-content', \n        '.article-content', '.entry-content', '.main-content',\n        '.reading-content', '.book-content', '.chapter-content',\n        '#content', '#main-content', '#article-content',\n        '[role=\"main\"]', 'main'\n      ];\n      \n      let contentContainer = null;\n      console.log(\"【initializeTextNodes】正在尝试选择器列表...\");\n      \n      // 尝试找到阅读区域容器\n      for (const selector of contentSelectors) {\n        const elements = document.querySelectorAll(selector);\n        console.log(`【initializeTextNodes】选择器 ${selector} 找到 ${elements.length} 个元素`);\n        \n        for (const element of elements) {\n          // 确认元素可见且有内容\n          if (element.offsetParent !== null) {\n            const textLength = element.textContent.trim().length;\n            console.log(`【initializeTextNodes】检查元素: ${selector}, 文本长度: ${textLength}`);\n            \n            if (textLength > 50) { // 至少有一定量的文本\n              contentContainer = element;\n              console.log(`【initializeTextNodes】找到阅读区域: ${selector}, 内容长度: ${textLength}`);\n              break;\n            }\n          }\n        }\n        \n        if (contentContainer) break;\n      }\n      \n      // 特别检查PDF段落元素\n      if (!contentContainer) {\n        console.log(\"【initializeTextNodes】未找到明确的阅读区域，尝试直接查找PDF段落\");\n        const pdfParagraphs = document.querySelectorAll('.pdf-paragraph');\n        \n        if (pdfParagraphs && pdfParagraphs.length > 0) {\n          console.log(`【initializeTextNodes】找到 ${pdfParagraphs.length} 个PDF段落元素`);\n          // 使用第一个段落的父元素作为内容容器\n          contentContainer = pdfParagraphs[0].parentElement;\n          \n          // 从段落元素中提取内容\n          for (const paragraph of pdfParagraphs) {\n            if (paragraph.textContent.trim().length > 0) {\n              console.log(`【initializeTextNodes】处理PDF段落: ${paragraph.textContent.substring(0, 30)}...`);\n              \n              // 创建文本节点\n              const text = paragraph.textContent;\n              const fragment = document.createDocumentFragment();\n              \n              // 为每个字符创建span\n              for (let i = 0; i < text.length; i++) {\n                const char = text[i];\n                const span = document.createElement('span');\n                span.textContent = char;\n                span.className = 'rhythm-char';\n                span.dataset.rhythmIndex = this.charElements.length;\n                \n                if (char.trim() === '') {\n                  span.dataset.whitespace = 'true';\n                }\n                \n                span.style.cssText = `\n                  display: inline;\n                  margin: 0;\n                  padding: 0;\n                  border: none;\n                  background-color: transparent;\n                `;\n                \n                fragment.appendChild(span);\n                this.charElements.push(span);\n              }\n              \n              // 清空段落原有内容并添加处理后的span元素\n              while (paragraph.firstChild) {\n                paragraph.removeChild(paragraph.firstChild);\n              }\n              paragraph.appendChild(fragment);\n            }\n          }\n          \n          if (this.charElements.length > 0) {\n            console.log(`【initializeTextNodes】从PDF段落创建了 ${this.charElements.length} 个字符span`);\n            return true;\n          }\n        }\n      }\n      \n      // 如果没有找到内容\n      if (!contentContainer) {\n        console.error(\"【initializeTextNodes】未找到内容容器!\");\n        // 尝试查看页面上的文本节点情况\n        const allTextNodes = document.createTreeWalker(document.body, NodeFilter.SHOW_TEXT).filter(node => \n            node.textContent && node.textContent.trim().length > 10);\n        console.log(`【initializeTextNodes】页面上有 ${allTextNodes.length} 个长度>10的文本节点`);\n        \n        // 使用body作为最后的回退选项\n        console.log(\"【initializeTextNodes】使用 document.body 作为回退\");\n        contentContainer = document.body;\n      }\n      \n      // 查找文本节点并处理\n      const textNodes = [];\n      console.log(`【initializeTextNodes】正在从选定容器中查找文本节点`);\n      \n      const walker = document.createTreeWalker(\n        contentContainer,\n        NodeFilter.SHOW_TEXT,\n        {\n          acceptNode: function(node) {\n            // 排除空文本\n            if (node.nodeValue.trim() === '') return NodeFilter.FILTER_REJECT;\n            \n            const parent = node.parentElement;\n            if (!parent) return NodeFilter.FILTER_REJECT;\n            \n            // 排除不可见的元素\n            const style = window.getComputedStyle(parent);\n            if (style.display === 'none' || style.visibility === 'hidden') {\n              return NodeFilter.FILTER_REJECT;\n            }\n            \n            // 排除UI元素\n            const tagName = parent.tagName.toLowerCase();\n            if (['button', 'input', 'select', 'option', 'textarea'].includes(tagName)) {\n              return NodeFilter.FILTER_REJECT;\n            }\n            \n            // 排除导航元素\n            if (['nav', 'header', 'footer'].includes(tagName)) {\n              return NodeFilter.FILTER_REJECT;\n            }\n            \n            return NodeFilter.FILTER_ACCEPT;\n          }\n        }\n      );\n      \n      while (walker.nextNode()) {\n        textNodes.push(walker.currentNode);\n      }\n      \n      console.log(`【initializeTextNodes】找到 ${textNodes.length} 个文本节点`);\n      \n      if (textNodes.length === 0) {\n        console.error(\"【initializeTextNodes】未找到任何文本节点!\");\n        return false;\n      }\n      \n      // 为每个文本节点创建字符span\n      let processedCount = 0;\n      textNodes.forEach((node, nodeIndex) => {\n        const text = node.nodeValue;\n        if (!text || text.trim() === '') return;\n        \n        if (nodeIndex < 5) {\n          console.log(`【initializeTextNodes】处理文本节点 ${nodeIndex+1}: \"${text.substring(0, 30)}${text.length > 30 ? '...' : ''}\"`);\n        }\n        \n        // 创建文档片段来存放字符span\n        const fragment = document.createDocumentFragment();\n        \n        // 为每个字符创建span\n        for (let i = 0; i < text.length; i++) {\n          const char = text[i];\n          const span = document.createElement('span');\n          span.textContent = char;\n          span.className = 'rhythm-char';\n          span.dataset.rhythmIndex = this.charElements.length;\n          \n          // 如果是空白字符，添加一个标志\n          if (char.trim() === '') {\n            span.dataset.whitespace = 'true';\n          }\n          \n          // 设置样式\n          span.style.cssText = `\n            display: inline;\n            margin: 0;\n            padding: 0;\n            border: none;\n            background-color: transparent;\n          `;\n          \n          fragment.appendChild(span);\n          this.charElements.push(span);\n        }\n        \n        // 替换原始节点\n        if (node.parentNode) {\n          node.parentNode.replaceChild(fragment, node);\n          processedCount++;\n        }\n      });\n      \n      console.log(`【initializeTextNodes】成功处理了 ${processedCount}/${textNodes.length} 个文本节点`);\n      console.log(`【initializeTextNodes】总共创建了 ${this.charElements.length} 个字符span`);\n      \n      return this.charElements.length > 0;\n    },\n    \n    updateTextColors: function() {\n      if (this.charElements.length === 0) {\n        console.log(\"【updateTextColors】没有字符元素，跳过\");\n        return;\n      }\n      \n      console.log(`【updateTextColors】正在更新 ${this.charElements.length} 个字符的颜色`);\n      \n      this.charElements.forEach((span, index) => {\n        // 确定颜色\n        let color;\n        let fontWeight = 'inherit';\n        \n        if (index === this.currentIndex) {\n          color = '#00aa00'; // 当前阅读的字 - 绿色\n          fontWeight = 'bold';\n        } else if (index === this.currentIndex + 1 || index === this.currentIndex + 2) {\n          color = '#aaaaaa'; // 接下来两个字 - 淡灰色\n        } else if (this.readIndices.has(index)) {\n          color = '#ffffff'; // 已读字符 - 白色（表示已读）\n        } else {\n          color = 'rgba(160, 160, 160, 0.25)'; // 未读字符 - 非常淡的灰色\n        }\n        \n        try {\n          span.style.color = color;\n          span.style.fontWeight = fontWeight;\n        } catch (e) {\n          console.error(`【updateTextColors】更新样式出错: ${e.message}`);\n        }\n      });\n    },\n    \n    moveToNextChar: function() {\n      if (!this.active || this.charElements.length === 0) {\n        console.log(\"【moveToNextChar】不活跃或无字符元素，跳过\");\n        return;\n      }\n      \n      // 将当前字符标记为已读\n      this.readIndices.add(this.currentIndex);\n      \n      // 移动到下一个非空白字符\n      let skippedWhitespace = 0;\n      do {\n        this.currentIndex++;\n        \n        // 检查是否到达末尾\n        if (this.currentIndex >= this.charElements.length) {\n          console.log(\"【moveToNextChar】已到达末尾\");\n          showNotification(\"已到达文章末尾\", \"info\");\n          this.stop();\n          return;\n        }\n        \n        // 计算跳过的空白字符\n        if (this.charElements[this.currentIndex] && \n            this.charElements[this.currentIndex].dataset.whitespace === 'true') {\n          skippedWhitespace++;\n        }\n        \n      } while (\n        this.currentIndex < this.charElements.length && \n        this.charElements[this.currentIndex] && \n        this.charElements[this.currentIndex].dataset.whitespace === 'true'\n      );\n      \n      if (skippedWhitespace > 0) {\n        console.log(`【moveToNextChar】跳过了 ${skippedWhitespace} 个空白字符`);\n      }\n      \n      // 更新颜色\n      this.updateTextColors();\n      \n      // 滚动到当前字符\n      this.scrollToCurrentChar();\n    },\n    \n    scrollToCurrentChar: function() {\n      const span = this.charElements[this.currentIndex];\n      \n      if (!span) {\n        console.error(\"【scrollToCurrentChar】当前字符元素不存在\");\n        return;\n      }\n      \n      try {\n        const rect = span.getBoundingClientRect();\n        console.log(`【scrollToCurrentChar】当前字符位置: top=${rect.top}, left=${rect.left}`);\n        \n        // 窗口滚动\n        const viewportHeight = window.innerHeight;\n        const idealPosition = viewportHeight * 0.4; // 屏幕40%的位置\n        \n        window.scrollTo({\n          top: window.scrollY + rect.top - idealPosition,\n          behavior: 'smooth'\n        });\n      } catch (e) {\n        console.error(`【scrollToCurrentChar】滚动出错: ${e.message}`);\n      }\n    },\n    \n    addSpeedSlider: function() {\n      let slider = document.getElementById('rhythm-speed-slider');\n      if (slider) slider.remove();\n      \n      console.log(\"【addSpeedSlider】创建速度控制滑块\");\n      \n      const container = document.createElement('div');\n      container.id = 'rhythm-speed-slider';\n      container.style.cssText = `\n        position: fixed;\n        top: 70px;\n        right: 20px;\n        background-color: rgba(0, 0, 0, 0.7);\n        padding: 10px;\n        border-radius: 5px;\n        box-shadow: 0 2px 5px rgba(0,0,0,0.2);\n        z-index: 10000;\n        display: flex;\n        align-items: center;\n        max-width: 300px;\n        color: white;\n      `;\n      \n      const label = document.createElement('label');\n      label.textContent = '速度: ';\n      label.style.marginRight = '8px';\n      container.appendChild(label);\n      \n      const input = document.createElement('input');\n      input.type = 'range';\n      input.min = '50';\n      input.max = '800';\n      input.step = '50';\n      input.value = this.speed;\n      input.style.width = '120px';\n      \n      const valueDisplay = document.createElement('span');\n      valueDisplay.textContent = `${this.speed}ms`;\n      valueDisplay.style.marginLeft = '8px';\n      valueDisplay.style.minWidth = '60px';\n      \n      const self = this;\n      input.addEventListener('input', function() {\n        const newSpeed = parseInt(this.value);\n        self.speed = newSpeed;\n        valueDisplay.textContent = `${newSpeed}ms`;\n        \n        if (self.intervalId) {\n          clearInterval(self.intervalId);\n          self.intervalId = setInterval(() => self.moveToNextChar(), newSpeed);\n          console.log(`【addSpeedSlider】速度已调整为 ${newSpeed}ms`);\n        }\n      });\n      \n      container.appendChild(input);\n      container.appendChild(valueDisplay);\n      document.body.appendChild(container);\n    },\n    \n    restoreOriginalText: function() {\n      console.log(\"【restoreOriginalText】开始恢复原始文本\");\n      \n      const charSpans = document.querySelectorAll('.rhythm-char');\n      console.log(`【restoreOriginalText】找到 ${charSpans.length} 个字符span`);\n      \n      if (charSpans.length === 0) return;\n      \n      // 按父节点分组\n      const parentNodeMap = new Map();\n      \n      charSpans.forEach(span => {\n        const parent = span.parentNode;\n        if (!parent) return;\n        \n        if (!parentNodeMap.has(parent)) {\n          parentNodeMap.set(parent, []);\n        }\n        parentNodeMap.get(parent).push(span);\n      });\n      \n      console.log(`【restoreOriginalText】找到 ${parentNodeMap.size} 个父节点`);\n      \n      // 对每个父节点，将连续的字符span合并回文本节点\n      let successCount = 0;\n      parentNodeMap.forEach((spans, parent) => {\n        if (spans.length === 0) return;\n        \n        try {\n          const text = spans.map(span => span.textContent).join('');\n          const textNode = document.createTextNode(text);\n          \n          if (spans[0].parentNode === parent) {\n            parent.replaceChild(textNode, spans[0]);\n            \n            for (let i = 1; i < spans.length; i++) {\n              if (spans[i].parentNode === parent) {\n                parent.removeChild(spans[i]);\n              }\n            }\n            \n            successCount++;\n          }\n        } catch (e) {\n          console.error(`【restoreOriginalText】恢复文本时出错: ${e.message}`);\n        }\n      });\n      \n      console.log(`【restoreOriginalText】成功恢复了 ${successCount}/${parentNodeMap.size} 个文本节点`);\n      \n      // 清除字符元素数组\n      this.charElements = [];\n    }\n  };\n\n  // 监听模式切换\n  const originalReadingModeChanged = window.readingModeChanged;\n  \n  window.readingModeChanged = function(mode) {\n    console.log(`【readingModeChanged】阅读模式变更为: ${mode}`);\n    \n    if (rhythmReader.active) {\n      console.log(\"【readingModeChanged】检测到节奏阅读正在运行，停止中...\");\n      rhythmReader.stop();\n    }\n    \n    // 调用原始函数\n    if (typeof originalReadingModeChanged === 'function') {\n      try {\n        console.log(\"【readingModeChanged】调用原始模式切换函数\");\n        originalReadingModeChanged(mode);\n      } catch(e) {\n        console.error(`【readingModeChanged】原始模式切换函数出错: ${e.message}`);\n      }\n    }\n    \n    // 只有当选择了节奏阅读模式时才启动\n    if (mode === 'rhythm' || mode === 'rhythmReading') {\n      console.log(\"【readingModeChanged】检测到节奏阅读模式被选择\");\n      showNotification(\"正在启动节奏阅读模式...\", \"info\");\n      \n      // 确保在UI更新后启动\n      setTimeout(() => {\n        console.log(\"【readingModeChanged】延时执行启动...\");\n        rhythmReader.start();\n      }, 100);\n    }\n  };\n  \n  // 监听选择器变化\n  const setupModeListeners = function() {\n    const selectors = document.querySelectorAll('select, .dropdown');\n    console.log(`【setupModeListeners】找到 ${selectors.length} 个选择器元素`);\n    \n    selectors.forEach((selector, index) => {\n      console.log(`【setupModeListeners】监听选择器 #${index+1}: ${selector.id || selector.className || 'unknown'}`);\n      \n      selector.addEventListener('change', function(e) {\n        const value = this.value || '';\n        console.log(`【setupModeListeners】选择器 #${index+1} 变化为: ${value}`);\n        \n        if (value.includes('rhythm') || value.includes('节奏')) {\n          console.log(`【setupModeListeners】检测到节奏阅读模式被选择`);\n          showNotification(\"节奏阅读模式已选择\", \"info\");\n          \n          setTimeout(() => {\n            console.log(`【setupModeListeners】延时启动节奏阅读`);\n            rhythmReader.start();\n          }, 100);\n        }\n      });\n    });\n  };\n  \n  // 将对象暴露到全局\n  window.rhythmReader = rhythmReader;\n  console.log(\"【初始化】rhythmReader 对象已挂载到全局\");\n  \n  // 初始化监听\n  setupModeListeners();\n  \n  // 检查当前已选模式\n  setTimeout(function() {\n    console.log(\"【初始化】检查当前是否已选择节奏阅读模式\");\n    \n    try {\n      // 检查活动元素\n      const activeElements = document.querySelectorAll('.active, .selected, [data-active=\"true\"]');\n      console.log(`【初始化】找到 ${activeElements.length} 个激活状态的元素`);\n      \n      for (const el of activeElements) {\n        const mode = el.dataset.mode || el.id || el.className || '';\n        console.log(`【初始化】检查元素: ${mode}`);\n        \n        if (mode.includes('rhythm')) {\n          console.log(\"【初始化】检测到当前已是节奏阅读模式\");\n          showNotification(\"检测到节奏阅读模式已激活\", \"info\");\n          rhythmReader.start();\n          return;\n        }\n      }\n      \n      // 检查选择器\n      const selectors = document.querySelectorAll('select');\n      console.log(`【初始化】找到 ${selectors.length} 个选择器元素`);\n      \n      for (const select of selectors) {\n        if (select.value && select.value.includes('rhythm')) {\n          console.log(`【初始化】检测到选择器值为: ${select.value}`);\n          showNotification(\"检测到节奏阅读模式已选择\", \"info\");\n          rhythmReader.start();\n          return;\n        }\n      }\n      \n      console.log(\"【初始化】未检测到节奏阅读模式已选择\");\n    } catch (e) {\n      console.error(`【初始化】检查当前模式时出错: ${e.message}`);\n    }\n  }, 500);\n  \n  console.log(\"节奏阅读模式初始化完成，等待用户选择\");\n  \n  // 添加测试函数便于调试\n  window.testRhythmReaderStart = function() {\n    console.log(\"【测试】手动调用 rhythmReader.start()\");\n    rhythmReader.start();\n  };\n})();\n\n// 定义一个全局函数用于从应用代码中启动节奏阅读\nwindow.activateRhythmReadingMode = function() {\n  console.log(\"尝试从应用代码中启动节奏阅读模式\");\n  if (window.rhythmReader) {\n    if (window.rhythmReader.active) {\n      console.log(\"节奏阅读模式已经在运行\");\n    } else {\n      window.rhythmReader.start();\n    }\n  } else {\n    console.error(\"节奏阅读模式未初始化\");\n    alert(\"无法启动节奏阅读模式：组件未初始化\");\n  }\n};\n\n// 更新初始化函数\nconst initializeRhythmReading = () => {\n  // 不再自动初始化，而是等待用户选择\n  console.log(\"节奏阅读模式准备就绪，等待用户选择\");\n};\n\n// 更新启动函数\nconst startRhythmReading = () => {\n  if (window.rhythmReader && typeof window.rhythmReader.start === 'function') {\n    window.rhythmReader.start();\n  }\n};\n\nconst App = () => {\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  const [isTableOfContents, setIsTableOfContents] = useState(false);\n  \n  // 实现缺失的函数\n  // 应用深色背景\n  const applyDarkBackground = () => {\n    document.body.classList.add('dark-background');\n    \n    // 添加必要的CSS样式\n    if (!document.getElementById('dark-background-style')) {\n      const style = document.createElement('style');\n      style.id = 'dark-background-style';\n      style.textContent = `\n        .dark-background {\n          background-color: #000 !important;\n        }\n        .dark-background .sidebar {\n          background: linear-gradient(145deg, #4834d4, #341f9e) !important;\n        }\n        .dark-background .page-content {\n          background-color: #000 !important;\n        }\n        .dark-background .main-content {\n          background-color: #000 !important;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 恢复正常背景\n  const restoreDarkBackground = () => {\n    document.body.classList.remove('dark-background');\n  };\n  \n  // 添加裸眼3D样式\n  const addNakedEye3DStyles = () => {\n    if (!document.getElementById('naked-eye-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'naked-eye-3d-style';\n      style.textContent = `\n        .naked-eye-3d-container {\n          position: relative;\n          perspective: 800px;\n          width: 100%;\n        }\n        \n        .naked-eye-3d-text {\n          display: inline-block;\n          animation: float 3s ease-in-out infinite;\n          text-shadow: 0 0 5px rgba(255,255,255,0.3);\n          padding: 0 4px;\n          color: white;\n          filter: drop-shadow(0 0 5px rgba(120, 220, 255, 0.6));\n        }\n        \n        @keyframes float {\n          0% { transform: translateZ(0px); }\n          50% { transform: translateZ(20px); }\n          100% { transform: translateZ(0px); }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 添加舒适3D样式\n  const addComfortable3DStyles = () => {\n    if (!document.getElementById('comfortable-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'comfortable-3d-style';\n      style.textContent = `\n        .emboss-3d-text {\n          color: #fff;\n          text-shadow: \n            1px 1px 1px rgba(0,0,0,0.5),\n            -1px -1px 1px rgba(255,255,255,0.5);\n          letter-spacing: 1.5px;\n          font-weight: 500;\n        }\n        \n        .float-3d-text {\n          display: inline-block;\n          transform-style: preserve-3d;\n          transform: perspective(500px) translateZ(10px);\n          text-shadow: 0 2px 5px rgba(0,0,0,0.5);\n        }\n        \n        .gradient-3d-text {\n          display: inline-block;\n          background: linear-gradient(to bottom, #fff, #aaa);\n          -webkit-background-clip: text;\n          -webkit-text-fill-color: transparent;\n          text-shadow: 0 2px 4px rgba(0,0,0,0.3);\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 添加闪读样式\n  const addFlashReadingStyles = () => {\n    if (!document.getElementById('flash-reading-style')) {\n      const style = document.createElement('style');\n      style.id = 'flash-reading-style';\n      style.textContent = `\n        .flash-reading-container {\n          position: relative;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          z-index: 1000;\n          padding: 20px;\n        }\n        \n        .flash-reading-display-wrapper {\n          position: relative;\n          margin: 40px 0;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        \n        .flash-reading-display {\n          font-size: 36px;\n          font-weight: bold;\n          text-align: center;\n          color: white;\n          min-height: 80px;\n          max-width: 90%;\n          padding: 20px 40px;\n          position: relative; /* 允许绝对定位的覆盖层 */\n          z-index: 2;\n        }\n        \n        .flash-reading-cover {\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(128, 128, 128, 0.6); /* 灰色遮罩 */\n          border-radius: 8px;\n          z-index: 1; /* 确保在文本后面 */\n        }\n        \n        .flash-reading-controls {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          gap: 20px;\n          margin-bottom: 20px;\n          width: 100%;\n        }\n        \n        .flash-reading-buttons {\n          display: flex;\n          gap: 10px;\n          flex-wrap: wrap;\n          justify-content: center;\n        }\n        \n        .flash-reading-speed {\n          display: flex;\n          align-items: center;\n          color: white;\n          width: 80%;\n          max-width: 400px;\n          gap: 10px;\n        }\n        \n        .flash-reading-slider {\n          flex: 1;\n          height: 8px;\n          appearance: none;\n          background: #555;\n          border-radius: 4px;\n          outline: none;\n        }\n        \n        .flash-reading-slider::-webkit-slider-thumb {\n          appearance: none;\n          width: 20px;\n          height: 20px;\n          border-radius: 50%;\n          background: #6c5ce7;\n          cursor: pointer;\n        }\n        \n        .flash-reading-btn {\n          padding: 10px 20px;\n          border: none;\n          border-radius: 4px;\n          background-color: #6c5ce7;\n          color: white;\n          font-size: 16px;\n          cursor: pointer;\n          transition: background-color 0.2s;\n        }\n        \n        .flash-reading-btn:hover {\n          background-color: #5344c0;\n        }\n        \n        .flash-reading-btn:disabled {\n          background-color: #aaa;\n          cursor: not-allowed;\n        }\n        \n        .flash-reading-progress {\n          color: white;\n          font-size: 14px;\n          margin-top: 10px;\n        }\n        .flash-reading-speed-note {\n          font-size: 12px;\n          color: #ccc;\n          margin-left: 5px;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 初始化闪读模式\n  const initializeFlashReading = () => {\n    // 添加样式\n    addFlashReadingStyles();\n    \n    const sentences = window.flashReadingSentences;\n    if (!sentences || !Array.isArray(sentences) || sentences.length === 0) {\n      console.error('闪读模式: 未找到句子数据');\n      return;\n    }\n    \n    // 获取全局UI元素\n    const display = document.getElementById('flash-reading-display');\n    const speedSlider = document.getElementById('flash-reading-speed');\n    const speedValue = document.getElementById('flash-reading-speed-value');\n    const playButton = document.getElementById('flash-reading-play');\n    const pauseButton = document.getElementById('flash-reading-pause');\n    const stopButton = document.getElementById('flash-reading-stop');\n    const prevButton = document.getElementById('flash-reading-prev-sentence');\n    const nextButton = document.getElementById('flash-reading-next-sentence');\n    const progress = document.getElementById('flash-reading-progress');\n    const cover = document.querySelector('.flash-reading-cover');\n    \n    if (!display || !speedSlider || !speedValue || !playButton || !pauseButton || !stopButton || !prevButton || !nextButton || !progress || !cover) {\n      console.error('闪读模式: 未找到UI元素');\n      return;\n    }\n    \n    // 创建闪读控制器\n    window.flashReader = {\n      sentences: sentences,\n      currentIndex: 0,\n      interval: null,\n      speed: parseInt(speedSlider.value),\n      isPlaying: false,\n      \n      // 开始闪读\n      start() {\n        if (this.interval) {\n          clearInterval(this.interval);\n        }\n        \n        this.isPlaying = true;\n        playButton.disabled = true;\n        pauseButton.disabled = false;\n        progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        \n        // 显示当前句子\n        this.displayCurrentSentence();\n        \n        // 设置闪读间隔\n        this.interval = setInterval(() => {\n          this.currentIndex++;\n          \n          if (this.currentIndex >= this.sentences.length) {\n            this.stop();\n            display.textContent = '阅读完成';\n            return;\n          }\n          \n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }, this.speed);\n      },\n      \n      // 显示当前句子\n      displayCurrentSentence() {\n        if (this.currentIndex < this.sentences.length) {\n          const currentSentence = this.sentences[this.currentIndex];\n          display.textContent = currentSentence;\n          display.style.color = 'white'; // 确保文本为白色\n          \n          // 调整背景以适应内容\n          setTimeout(() => {\n            const displayRect = display.getBoundingClientRect();\n            // 确保覆盖层完全包裹文本\n            cover.style.width = `${displayRect.width}px`;\n            cover.style.height = `${displayRect.height}px`;\n          }, 10);\n        }\n      },\n      \n      // 暂停闪读\n      pause() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        \n        this.isPlaying = false;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n      },\n      \n      // 停止闪读\n      stop() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        \n        this.isPlaying = false;\n        this.currentIndex = 0;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n        \n        display.textContent = '准备开始';\n        progress.textContent = `进度：0 / ${this.sentences.length}`; // 重置进度\n      },\n      \n      // 更新速度\n      updateSpeed(newSpeed) {\n        this.speed = newSpeed;\n        speedValue.textContent = `${newSpeed} ms`;\n        \n        // 保存速度设置到本地存储\n        localStorage.setItem('flash-reading-speed', newSpeed);\n        \n        // 如果正在播放，重新开始以应用新速度\n        if (this.isPlaying) {\n          clearInterval(this.interval);\n          this.start(); // 直接调用start方法重新开始\n        }\n      },\n\n      // 返回上一句\n      prevSentence() {\n        if (this.currentIndex > 0) {\n          this.currentIndex--;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n\n      // 跳到下一句\n      nextSentence() {\n        if (this.currentIndex < this.sentences.length - 1) {\n          this.currentIndex++;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n\n      // 清理资源\n      cleanup() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        this.currentIndex = 0;\n      }\n    };\n    \n    // 添加事件监听器\n    playButton.addEventListener('click', () => {\n      window.flashReader.start();\n    });\n    \n    pauseButton.addEventListener('click', () => {\n      window.flashReader.pause();\n    });\n    \n    stopButton.addEventListener('click', () => {\n      window.flashReader.stop();\n    });\n    \n    speedSlider.addEventListener('input', (e) => {\n      const newSpeed = parseInt(e.target.value);\n      window.flashReader.updateSpeed(newSpeed);\n    });\n\n    prevButton.addEventListener('click', () => {\n      window.flashReader.prevSentence();\n    });\n\n    nextButton.addEventListener('click', () => {\n      window.flashReader.nextSentence();\n    });\n    \n    // 初始化\n    const savedSpeed = localStorage.getItem('flash-reading-speed');\n    const initialSpeed = savedSpeed ? parseInt(savedSpeed) : 1000;\n    speedSlider.value = initialSpeed;\n    window.flashReader.updateSpeed(initialSpeed);\n    \n    console.log('闪读模式已初始化，共 ' + sentences.length + ' 个句子');\n  };\n  \n  // 创建闪读内容\n  const createFlashReadingContent = (text) => {\n    return `<div class=\"flash-reading-content\">\n      <p>${text}</p>\n    </div>`;\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 格式化文本用于鼠标跟随\n  const formatTextForMouseFollow = (text) => {\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个单词添加span，以便于添加高亮效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"follow-word\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\" data-follow=\"true\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用静态高亮\n  const applyStaticHighlight = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为单词随机添加颜色高亮\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      let lastColor = null;\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n          return;\n        }\n        \n        // 随机决定是否高亮和使用哪种颜色\n        if (Math.random() < 0.7) {\n          let color;\n          if (lastColor === 'red') {\n            color = 'blue';\n          } else if (lastColor === 'blue') {\n            color = 'red';\n          } else {\n            color = Math.random() < 0.5 ? 'red' : 'blue';\n          }\n          lastColor = color;\n          \n          processedParagraph += `<span class=\"highlight-word ${color}\">${word}</span>`;\n        } else {\n          processedParagraph += word;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用裸眼3D效果\n  const applyNakedEye3dEffect = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content naked-eye-3d-container\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个词添加3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"naked-eye-3d-text\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用舒适3D效果\n  const applyComfortable3dEffect = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个词随机应用不同的3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n  } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          \n          processedParagraph += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 初始化裸眼3D\n  const initializeNakedEye3D = () => {\n    // 为裸眼3D文本添加动画\n    const textElements = document.querySelectorAll('.naked-eye-3d-text');\n    textElements.forEach((element, index) => {\n      // 添加随机延迟，使动画错开\n      const delay = Math.random() * 2;\n      element.style.animationDelay = `${delay}s`;\n    });\n  };\n\n  // 添加鼠标跟随监听器\n  const addMouseFollowListeners = () => {\n    // 获取内容容器\n    const contentArea = document.querySelector('.mouse-follow-content');\n    if (!contentArea) {\n      console.error('未找到鼠标跟随内容区域');\n      return;\n    }\n    \n    // 上一个高亮的行\n    let lastHighlightedLine = null;\n    \n    // 监听鼠标移动 - 精确的行检测\n    const mouseMoveHandler = (e) => {\n      // 获取鼠标位置\n      const mouseY = e.clientY;\n      \n      // 获取所有行\n      const allLines = contentArea.querySelectorAll('.follow-line');\n      let foundLine = null;\n      let minDistance = Infinity;\n      \n      // 寻找鼠标所在的精确行\n      allLines.forEach(line => {\n        const rect = line.getBoundingClientRect();\n        const lineCenter = rect.top + rect.height / 2;\n        const distance = Math.abs(mouseY - lineCenter);\n        \n        // 如果鼠标在行范围内，计算到行中心的距离\n        if (mouseY >= rect.top && mouseY <= rect.bottom) {\n          if (distance < minDistance) {\n            minDistance = distance;\n            foundLine = line;\n        }\n      }\n    });\n    \n      // 更新高亮状态\n      if (lastHighlightedLine && lastHighlightedLine !== foundLine) {\n        // 移除旧高亮\n        lastHighlightedLine.classList.remove('highlighted');\n      }\n      \n      if (foundLine) {\n        // 添加新高亮\n        foundLine.classList.add('highlighted');\n        lastHighlightedLine = foundLine;\n        \n        // 调试输出\n        console.log('当前高亮行:', foundLine.textContent.substring(0, 30) + '...');\n      } else if (lastHighlightedLine) {\n        // 如果没有找到新行，且有上一个高亮行，移除它\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n    \n    // 鼠标离开处理\n    const mouseLeaveHandler = () => {\n      // 清除当前高亮\n      if (lastHighlightedLine) {\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n    \n    // 存储处理函数引用\n    window.eventTracker = window.eventTracker || { mouseFollowHandlers: [] };\n    window.eventTracker.mouseFollowHandlers.push(\n      { element: contentArea, event: 'mousemove', handler: mouseMoveHandler },\n      { element: contentArea, event: 'mouseleave', handler: mouseLeaveHandler }\n    );\n    \n    // 添加事件监听器\n    contentArea.addEventListener('mousemove', mouseMoveHandler);\n    contentArea.addEventListener('mouseleave', mouseLeaveHandler);\n    \n    console.log('改进的鼠标跟随监听器已初始化');\n  };\n  \n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n  }, []);\n  \n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async (file) => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      \n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n      \n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n      \n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n  \n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({ scale: 1.0 });\n      \n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      \n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      \n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async (textContent) => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n    \n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n    \n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n    \n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    \n    const lines = [...lineMap.values()];\n    \n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    \n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    \n    return hasTocKeywords || hasPageNumberPatterns || (shortLineRatio > 0.7 && numberLineRatio > 0.3);\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n    \n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    \n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n      \n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n      \n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n      \n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    \n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && \n              x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = (text) => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    \n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      \n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        \n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    \n    return result;\n  };\n\n  // 处理内容页面 - 按句子划分段落\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      \n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n      // 按句子划分内容（句号、问号、感叹号等作为分隔符）\n      const sentences = splitIntoSentences(extractedText);\n      \n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch(mode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          // 使用ADHD友好的静态高亮处理\n          console.log('应用ADHD友好的静态高亮模式');\n          processedContent = formatSimpleHighlightedText(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'rhythm':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          processedContent = createFlashReadingContentFromSentences(sentences);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n      \n      setContent(processedContent);\n      \n      // 如果是静态高亮模式，添加延时验证检查\n      if (mode === 'static') {\n        setTimeout(() => {\n          const contentArea = document.querySelector('.adhd-highlight-mode');\n          if (contentArea) {\n            console.log('静态高亮模式元素存在');\n            const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n            console.log(`找到 ${paragraphs.length} 个段落`);\n            \n            // 检查样式是否正确应用\n            if (paragraphs.length > 0) {\n              const firstPara = paragraphs[0];\n              const styles = window.getComputedStyle(firstPara);\n              console.log('段落应用的样式:', {\n                color: styles.color,\n                backgroundColor: styles.backgroundColor,\n                fontFamily: styles.fontFamily,\n                fontSize: styles.fontSize\n              });\n            }\n          }\n        }, 200);\n      }\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 将文本分割成句子\n  const splitIntoSentences = (text) => {\n    // 匹配句号、问号、感叹号后跟空格或结束的模式\n    // 支持中英文标点符号\n    const sentenceRegex = /([.!?。！？；;]+\\s*)/g;\n    \n    // 分割文本成句子\n    const sentences = [];\n    let lastIndex = 0;\n    let match;\n    \n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const sentence = text.substring(lastIndex, endIndex).trim();\n      \n      // 避免添加空句子\n      if (sentence) {\n        sentences.push(sentence);\n      }\n      \n      lastIndex = endIndex;\n    }\n    \n    // 处理最后一部分（如果没有以句号等结尾）\n    if (lastIndex < text.length) {\n      const lastSentence = text.substring(lastIndex).trim();\n      if (lastSentence) {\n        sentences.push(lastSentence);\n      }\n    }\n    \n    return sentences;\n  };\n\n  // 专门为闪读模式分割文本，以任意标点符号为分隔点\n  const splitIntoFlashReadingSegments = (text) => {\n    // 匹配任意标点符号包括中英文标点\n    const sentenceRegex = /([,.!?:;，。！？：；、]+\\s*)/g;\n    \n    // 分割文本成短句\n    const segments = [];\n    let lastIndex = 0;\n    let match;\n    \n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const segment = text.substring(lastIndex, endIndex).trim();\n      \n      // 避免添加空段落\n      if (segment) {\n        segments.push(segment);\n      }\n      \n      lastIndex = endIndex;\n    }\n    \n    // 处理最后一部分（如果没有以标点符号结尾）\n    if (lastIndex < text.length) {\n      const lastSegment = text.substring(lastIndex).trim();\n      if (lastSegment) {\n        segments.push(lastSegment);\n      }\n    }\n    \n    return segments;\n  };\n\n  // 格式化句子为HTML\n  const formatSentencesToHtml = (sentences) => {\n    let html = '<div class=\"pdf-content\">';\n    \n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${sentence}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为句子应用静态高亮\n  const applyStaticHighlightToSentences = (sentences) => {\n    let html = '<div class=\"pdf-content adhd-content\">';\n    \n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      \n      // 简单地为句子添加特定样式的class\n      html += `<p class=\"pdf-paragraph adhd-sentence\">${sentence}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为鼠标跟随模式格式化句子\n  const formatSentencesForMouseFollow = (sentences) => {\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    sentences.forEach((sentence, index) => {\n      if (sentence.trim() === '') return;\n      \n      // 每个句子作为独立行，使用div而不是p标签\n      html += `<div class=\"follow-line\" data-line=\"${index}\" data-sentence=\"${sentence.substring(0, 20)}...\" style=\"color: inherit;\">${sentence}</div>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为舒适3D模式格式化句子\n  const applyComfortable3dEffectToSentences = (sentences) => {\n    let html = '<div class=\"pdf-content\">';\n    \n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      \n      // 为每个词随机应用不同的3D效果\n      const words = sentence.split(/(\\s+)/);\n      let processedSentence = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedSentence += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          \n          processedSentence += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedSentence}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为闪读模式创建内容\n  const createFlashReadingContentFromSentences = (sentences) => {\n    // 储存句子到全局变量，用于后续显示\n    window.flashReadingSentences = sentences;\n\n    // 返回闪读界面的HTML结构\n    return `\n      <div class=\"flash-reading-container\">\n        <div class=\"flash-reading-controls\">\n          <div class=\"flash-reading-buttons\">\n            <button id=\"flash-reading-prev-sentence\" class=\"flash-reading-btn\">上一句</button>\n            <button id=\"flash-reading-play\" class=\"flash-reading-btn\">开始</button>\n            <button id=\"flash-reading-pause\" class=\"flash-reading-btn\" disabled>暂停</button>\n            <button id=\"flash-reading-stop\" class=\"flash-reading-btn\">停止</button>\n            <button id=\"flash-reading-next-sentence\" class=\"flash-reading-btn\">下一句</button>\n          </div>\n          <div class=\"flash-reading-speed\">\n            <span>速度：</span>\n            <input type=\"range\" id=\"flash-reading-speed\" min=\"300\" max=\"1700\" step=\"50\" value=\"1000\" class=\"flash-reading-slider\">\n            <span id=\"flash-reading-speed-value\">1000 ms</span>\n            <span class=\"flash-reading-speed-note\">（数值越小，切换越快）</span>\n          </div>\n          <div class=\"flash-reading-progress\">\n            <span id=\"flash-reading-progress\">进度：0 / ${sentences.length}</span>\n          </div>\n        </div>\n        <div class=\"flash-reading-display-wrapper\">\n          <div class=\"flash-reading-cover\"></div> <!-- 这里是闪卡 -->\n          <div id=\"flash-reading-display\" class=\"flash-reading-display\">准备开始</div>\n        </div>\n      </div>`;\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async (file) => {\n    try {\n      const text = await file.text();\n      \n      // 根据阅读模式选择不同的处理方式\n      let processedContent = '';\n      \n      if (readingMode === 'flash-reading') {\n        // 闪读模式下使用特定的分割函数\n        const segments = splitIntoFlashReadingSegments(text);\n        processedContent = createFlashReadingContentFromSentences(segments);\n        \n        // 初始化闪读模式\n        setTimeout(() => {\n          initializeFlashReading();\n        }, 100);\n      } else {\n        // 其他模式使用默认的分割方式\n        const sentences = splitIntoSentences(text);\n        \n        switch(readingMode) {\n          case 'normal':\n            processedContent = formatSentencesToHtml(sentences);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlightToSentences(sentences);\n            break;\n          case 'follow-mouse':\n            processedContent = formatSentencesForMouseFollow(sentences);\n            break;\n          case 'comfortable-3d':\n            processedContent = applyComfortable3dEffectToSentences(sentences);\n            break;\n          default:\n            processedContent = formatSentencesToHtml(sentences);\n        }\n      }\n      \n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n      \n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setContent('<div class=\"error-message\">TXT文件处理失败</div>');\n    }\n  };\n\n  // 处理Markdown文件\n  const handleMarkdownFile = async (file) => {\n    try {\n      const text = await file.text();\n      \n      // 使用marked库转换markdown为HTML\n      let html = '';\n      try {\n        if (window.marked) {\n          html = window.marked.parse(text);\n        } else {\n          // 如果没有marked库，简单地拆分为段落\n          html = `<div>${text.split(\"\\n\\n\").map(p => `<p>${p}</p>`).join(\"\")}</div>`;\n        }\n      } catch (parseError) {\n        console.error('Markdown解析错误:', parseError);\n        html = `<div>${text}</div>`;\n      }\n      \n      // 提取纯文本内容\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = html;\n      const plainText = tempDiv.textContent || tempDiv.innerText || '';\n      \n      // 分割文本为句子\n      const sentences = splitIntoSentences(plainText);\n      \n      // 根据当前阅读模式处理内容\n      let processedContent = '';\n      switch(readingMode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlightToSentences(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          // 使用特定的闪读分割函数重新处理文本\n          const segments = splitIntoFlashReadingSegments(plainText);\n          processedContent = createFlashReadingContentFromSentences(segments);\n          \n          // 初始化闪读模式\n          setTimeout(() => {\n            initializeFlashReading();\n          }, 100);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n      \n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n      \n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('Markdown处理错误:', error);\n      setContent('<div class=\"error-message\">Markdown文件处理失败</div>');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async (e) => {\n    const uploadedFile = e.target.files[0];\n    if (!uploadedFile) return;\n    \n    setLoading(true);\n    setFileName(uploadedFile.name);\n    \n    try {\n      if (uploadedFile.type === 'application/pdf') {\n        await handlePdfFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/plain' || uploadedFile.name.endsWith('.txt')) {\n        await handleTxtFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/markdown' || uploadedFile.name.endsWith('.md')) {\n        await handleMarkdownFile(uploadedFile);\n    } else {\n        setContent('<div class=\"error-message\">不支持的文件格式</div>');\n      }\n    } catch (error) {\n      console.error('处理文件时出错:', error);\n      setContent('<div class=\"error-message\">处理文件时出错</div>');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = (container) => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    \n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n      \n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n      \n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          \n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n          \n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width/2,  // 水平中心\n            y: rect.bottom,               // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n    \n    // 过滤无效位置并排序\n    return positions\n      .filter(p => p.char.trim() !== '')\n      .sort((a, b) => {\n        // 先按行排序，同行按列排序\n        const yDiff = a.y - b.y;\n        if (Math.abs(yDiff) > 5) { // 5px阈值判断是否同一行\n          return yDiff;\n        }\n        return a.x - b.x;\n      });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    \n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - (containerVisibleHeight / 2);\n      \n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - (window.innerHeight / 2);\n      \n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    \n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n    \n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    \n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n    \n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length || // 已到末尾\n          positions[nextIndex].char.trim() === '' || // 下一个是空白\n          positions[nextIndex].y > charPosition.y + 5) { // 下一个在新行\n        return true;\n      }\n    }\n    \n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n    \n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n      \n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || \n          current.y > prev.y + 5) { // 有明显换行\n        break;\n      }\n      \n      start--;\n    }\n    \n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n      \n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      \n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n      \n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      \n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (window.autoReader.charPositions.length === 0) {\n      if (window.currentPage < window.totalPages) {\n        window.changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 重置索引到开头\n    window.autoReader.currentIndex = 0;\n    \n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    \n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n    \n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n    \n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none';\n      highlight.style.zIndex = '998';\n      contentContainer.appendChild(highlight);\n    }\n    \n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight &&\n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n    \n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20;\n    \n    // 尝试获取实际行高\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(window.autoReader.charPositions[i].y - window.autoReader.charPositions[i-1].y);\n        if (yDiff > 5) {\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n    \n    // 记录上次滚动的位置\n    let lastScrolledY = -1;\n    const scrollSafeZone = lineHeight * 2.5;\n    \n    // 设置字符大小的估计值\n    let charWidth = 20;\n    let charHeight = lineHeight * 0.8;\n    \n    // 尝试估计字符宽度\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        if (window.autoReader.charPositions[i].x !== window.autoReader.charPositions[i-1].x) {\n          const xDiff = Math.abs(window.autoReader.charPositions[i].x - window.autoReader.charPositions[i-1].x);\n          if (xDiff > 0 && xDiff < 50) {\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    \n    window.autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (window.autoReader.currentIndex < window.autoReader.charPositions.length && \n             window.autoReader.charPositions[window.autoReader.currentIndex]?.char.trim() === '') {\n        window.autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (window.autoReader.currentIndex >= window.autoReader.charPositions.length) {\n        if (window.currentPage < window.totalPages) {\n          window.changePage(1);\n          clearInterval(window.autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n\n      const pos = window.autoReader.charPositions[window.autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      \n      if (cursor && highlight) {\n        const contentRect = contentContainer.getBoundingClientRect();\n        \n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        \n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        \n        highlight.style.left = `${relativeX - charWidth/2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n        \n        // 滚动处理\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        \n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          \n          if (isContainerScrollable) {\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n            \n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            \n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = relativeY;\n            }\n          } else {\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n            \n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            \n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      \n      window.autoReader.currentIndex++;\n      \n    }, window.autoReader.speed);\n    \n    // 在停止自动阅读时清除所有高亮\n    window.autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n      \n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n      \n      // 调用清理函数\n      if (window.autoReader.cleanup) {\n        window.autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n    \n    // 重置翻页状态\n    window.autoReader.isPageChanging = false;\n    \n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n    \n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n    \n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n    \n    // 收集字符位置\n    window.autoReader.charPositions = getAllCharacterPositions(content);\n    \n    // 如果当前页没有内容，尝试翻页\n    if (window.autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !window.autoReader.isPageChanging) {\n        window.autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async (e) => {\n    const newMode = e.target.value;\n    const prevMode = readingMode;\n    \n    console.log(`切换阅读模式: 从 ${prevMode} 到 ${newMode}`);\n    \n    // 更新状态\n    setReadingMode(newMode);\n    \n    // 如果有PDF文档和当前页，重新处理当前页内容\n    if (pdfDocument && currentPage > 0) {\n      try {\n        console.log('重新处理当前页面内容');\n        const page = await pdfDocument.getPage(currentPage);\n        \n        // 不使用任何额外处理，直接使用最原始的方式重新加载页面\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n        \n        // 根据当前模式设置内容\n        if (newMode === 'static') {\n          // 静态高亮模式 - 使用改进的句子处理\n          const html = formatSimpleHighlightedText(sentences);\n          console.log('设置静态高亮内容');\n          setContent(html);\n          \n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n        if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n              \n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n                \n                // 验证文字颜色\n                if (styles.color === 'rgb(51, 51, 51)' || styles.color === '#333333') {\n                  console.log('文字颜色正确应用');\n                } else {\n                  console.warn('文字颜色可能未正确应用:', styles.color);\n                }\n              }\n            } else {\n              console.error('未找到静态高亮模式内容区域');\n            }\n          }, 200);\n        } else if (newMode === 'flash-reading') {\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n            \n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n            \n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n            \n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n        } else {\n          // 其他模式保持不变\n          const handler = getContentHandlerForMode(newMode);\n          const processedContent = handler(sentences);\n          setContent(processedContent);\n        }\n      } catch (error) {\n        console.error('应用阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 首先确保移除鼠标跟随监听器\n    removeMouseFollowListeners();\n    \n    // 清理节奏阅读器\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    \n    // 清理闪读器\n    if (window.flashReader) {\n      window.flashReader.cleanup();\n    }\n    \n    // 清理舒适3D效果\n    const comfortable3DElements = document.querySelectorAll('.emboss-3d-text, .float-3d-text, .gradient-3d-text');\n    comfortable3DElements.forEach(el => el.remove());\n    \n    // 清理闪读模式元素\n    const flashReadingElements = document.querySelectorAll('.flash-reading-container, .flash-reading-display, .flash-reading-controls');\n    flashReadingElements.forEach(el => el.remove());\n    \n    // 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll(\n      '.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line, .rhythm-char'\n    );\n    highlights.forEach(el => {\n      if (el.parentNode) el.parentNode.removeChild(el);\n    });\n    \n    // 彻底替换内容区域以移除所有事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 先保存底部翻页控件\n      const bottomPagination = contentArea.querySelector('.bottom-pagination');\n      \n      // 深度克隆内容，但不克隆事件监听器\n      const contentHTML = contentArea.querySelector('div[dangerouslySetInnerHTML]')?.innerHTML || '';\n      const newContentArea = contentArea.cloneNode(false);\n      \n      // 创建新的内容容器\n      const newContentContainer = document.createElement('div');\n      newContentContainer.innerHTML = contentHTML;\n      newContentArea.appendChild(newContentContainer);\n      \n      // 如果有底部翻页控件，重新添加\n      if (bottomPagination && totalPages > 0) {\n        const newBottomPagination = bottomPagination.cloneNode(true);\n        // 重新绑定事件\n        const prevBtn = newBottomPagination.querySelector('.page-btn:first-child');\n        const nextBtn = newBottomPagination.querySelector('.page-btn:last-child');\n        if (prevBtn) prevBtn.onclick = () => changePage(-1);\n        if (nextBtn) nextBtn.onclick = () => changePage(1);\n        newContentArea.appendChild(newBottomPagination);\n      }\n      \n      if (contentArea.parentNode) {\n        contentArea.parentNode.replaceChild(newContentArea, contentArea);\n      }\n    }\n    \n    // 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 移除所有特殊标记和样式\n      paragraph.removeAttribute('data-follow');\n      paragraph.removeAttribute('style');\n      \n      // 清理特殊span标签\n      paragraph.innerHTML = paragraph.innerHTML\n        .replace(/<span class=\"text-line\"[^>]*>/g, '')\n        .replace(/<span class=\"rhythm-char\"[^>]*>/g, '')\n        .replace(/<span class=\"line-highlight[^\"]*\"[^>]*>/g, '')\n        .replace(/<span class=\"mouse-highlight[^\"]*\"[^>]*>/g, '')\n        .replace(/<\\/span>/g, '');\n    });\n    \n    // 移除特殊UI元素\n    const elementsToRemove = [\n      'rhythm-speed-slider',\n      'rhythm-notification'\n    ];\n    \n    elementsToRemove.forEach(id => {\n      const element = document.getElementById(id);\n      if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    });\n    \n    // 移除暗色背景\n    document.body.classList.remove('dark-background');\n    \n    // 清理闪读模式\n    if (window.flashReader && typeof window.flashReader.cleanup === 'function') {\n      window.flashReader.cleanup();\n    }\n  };\n\n  const handleAutoScroll = () => {\n    window.autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = (e) => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    \n    const rect = contentArea.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    \n    clearAllHighlights();\n    \n    const paragraphs = contentArea.querySelectorAll('p');\n    paragraphs.forEach(paragraph => {\n      const paragraphRect = paragraph.getBoundingClientRect();\n      const paragraphX = paragraphRect.left - rect.left;\n      const paragraphY = paragraphRect.top - rect.top;\n      \n      if (y >= paragraphY && y <= paragraphY + paragraphRect.height) {\n        const words = paragraph.querySelectorAll('span');\n        words.forEach(word => {\n          const wordRect = word.getBoundingClientRect();\n          const wordX = wordRect.left - rect.left;\n          \n          if (x >= wordX && x <= wordX + wordRect.width) {\n            word.classList.add('highlight');\n          }\n        });\n      }\n    });\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 专门用于移除鼠标跟随事件的函数\n  const removeMouseFollowListeners = () => {\n    // 移除记录的所有监听器\n    if (window.eventTracker && window.eventTracker.mouseFollowHandlers) {\n      window.eventTracker.mouseFollowHandlers.forEach(({element, event, handler}) => {\n        if (element && element.removeEventListener) {\n          element.removeEventListener(event, handler);\n        }\n      });\n      window.eventTracker.mouseFollowHandlers = [];\n    }\n    \n    // 为安全起见，尝试从document和内容区域移除通用处理函数\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    }\n    \n    document.removeEventListener('mousemove', handleMouseMove);\n    \n    // 清除所有当前高亮\n    clearAllHighlights();\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n    \n    // 添加底部翻页控件样式\n    const bottomPaginationStyles = document.createElement('style');\n    bottomPaginationStyles.id = 'bottom-pagination-styles';\n    bottomPaginationStyles.innerHTML = `\n      .bottom-pagination {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        padding: 20px 0 30px;\n        margin-top: 30px;\n        width: 100%;\n        background-color: transparent;\n        border-radius: 5px;\n      }\n\n      .bottom-pagination .page-btn {\n        background-color: #6c5ce7;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        padding: 8px 15px;\n        margin: 0 10px;\n        cursor: pointer;\n        font-size: 14px;\n        transition: background-color 0.2s ease;\n      }\n\n      .bottom-pagination .page-btn:hover {\n        background-color: #4834d4;\n      }\n\n      .bottom-pagination .page-btn:disabled {\n        background-color: #aaa;\n        cursor: not-allowed;\n      }\n\n      .bottom-pagination .page-info {\n        font-size: 14px;\n        margin: 0 10px;\n      }\n    `;\n    document.head.appendChild(bottomPaginationStyles);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n    addComfortable3DStyles();\n    \n    // 添加鼠标跟随模式的样式\n    const mouseFollowStyle = document.createElement('style');\n    mouseFollowStyle.id = 'intelligent-mouse-follow-style';\n    mouseFollowStyle.textContent = `\n      /* 基础样式 */\n      .mouse-follow-content {\n        position: relative;\n        line-height: 1.8;\n      }\n      \n      .mouse-follow-content .follow-line {\n        position: relative;\n        padding: 8px 16px;\n        margin: 4px 0;\n        border-radius: 6px;\n        transition: all 0.2s ease;\n        display: block;\n        min-height: 1.8em;\n        white-space: normal;\n        word-wrap: break-word;\n        text-indent: 2em;\n      }\n      \n      /* 高亮状态 */\n      .follow-line.highlighted {\n        background-color: #ffa500 !important; /* 橙色背景 */\n        color: #ffffff !important; /* 白色文字 */\n        font-weight: bold !important;\n        font-size: 1.1em; /* 稍微调小字号 */\n        transform: translateX(5px);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n      }\n      \n      \n      /* 平滑过渡效果 */\n      .follow-line {\n        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n      }\n      \n      /* 行间距优化 */\n      .mouse-follow-content .follow-line + .follow-line {\n        margin-top: 4px;\n      }\n      \n      /* 添加行指示器 */\n      .follow-line::before {\n        content: '';\n        position: absolute;\n        left: 0;\n        top: 0;\n        bottom: 0;\n        width: 3px;\n        background: linear-gradient(to bottom, transparent, rgba(255, 255, 255, 0.5), transparent);\n        opacity: 0;\n        transition: opacity 0.2s ease;\n      }\n      \n      .follow-line.highlighted::before {\n        opacity: 1;\n      }\n    `;\n    document.head.appendChild(mouseFollowStyle);\n    \n    // 创建深色背景下的ADHD友好高亮样式\n    const style = document.createElement('style');\n    style.id = 'adhd-friendly-highlight-style';\n    style.textContent = `\n      /* ADHD友好的高亮样式 - 适配深色背景 */\n      .adhd-highlight-mode {\n        line-height: 1.8;\n        padding: 20px;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph {\n        margin-bottom: 1.2em;\n        background-color: transparent;\n        padding: 12px 15px;\n        border-radius: 6px;\n        border-left: 3px solid rgba(255, 255, 255, 0.2);\n        transition: all 0.3s ease;\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover {\n        transform: translateX(5px);\n        border-left-color: rgba(255, 255, 255, 0.4);\n      }\n      \n      /* 加粗样式 - 白色加粗 */\n      .adhd-bold {\n        font-weight: 700;\n        color: #ffffff;\n        letter-spacing: 0.02em;\n        font-size: 1.1em;\n        text-shadow: 0 0 1px rgba(255, 255, 255, 0.2);\n      }\n      \n      /* 彩色样式 - 使用鲜明的蓝色 */\n      .adhd-colored {\n        color: #6c5ce7;\n        font-weight: 500;\n        font-size: 1.05em;\n        text-shadow: 0 0 1px rgba(108, 92, 231, 0.2);\n      }\n      \n      /* 正常样式 - 普通白色 */\n      .adhd-normal {\n        color: rgba(255, 255, 255, 0.8);\n        font-size: 1em;\n      }\n\n      /* 添加平滑过渡效果 */\n      .adhd-bold, .adhd-colored, .adhd-normal {\n        transition: all 0.2s ease;\n      }\n\n      /* 悬停效果 */\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-bold {\n        color: #ffffff;\n        text-shadow: 0 0 2px rgba(255, 255, 255, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-colored {\n        color: #8a7ff7;\n        text-shadow: 0 0 2px rgba(138, 127, 247, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-normal {\n        color: rgba(255, 255, 255, 0.9);\n      }\n\n      /* 添加段落间距的视觉引导 */\n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph {\n        margin-top: 1.5em;\n        position: relative;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph::before {\n        content: '';\n        position: absolute;\n        top: -0.75em;\n        left: 0;\n        right: 0;\n        height: 1px;\n        background: linear-gradient(\n          to right,\n          transparent,\n          rgba(255, 255, 255, 0.1),\n          transparent\n        );\n      }\n    `;\n    document.head.appendChild(style);\n    \n    // 添加基础鼠标跟随样式\n    const mouseFollowPageStyle = document.createElement('style');\n    mouseFollowPageStyle.id = 'basic-mouse-follow-style';\n    mouseFollowPageStyle.textContent = `\n      .follow-line {\n        padding: 8px 12px;\n        margin: 4px 0;\n        border-radius: 4px;\n        transition: background-color 0.2s ease;\n      }\n      .follow-line.highlighted {\n        background-color: #ffa500;\n        color: #000080;\n        font-weight: bold;\n      }\n    `;\n    document.head.appendChild(mouseFollowPageStyle);\n    \n    return () => {\n      const existingStyle = document.getElementById('adhd-friendly-highlight-style');\n      if (existingStyle) existingStyle.remove();\n      \n      const existingMouseFollowStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (existingMouseFollowStyle) existingMouseFollowStyle.remove();\n      \n      const existingBasicMouseFollowStyle = document.getElementById('basic-mouse-follow-style');\n      if (existingBasicMouseFollowStyle) existingBasicMouseFollowStyle.remove();\n      \n      mouseFollowPageStyle.remove();\n    };\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 清理旧监听器\n    removeMouseFollowListeners();\n    \n    // 添加新监听器\n    setTimeout(() => {\n      addMouseFollowListeners();\n      \n      // 添加调试辅助 - 显示行边界\n      const contentArea = document.querySelector('.mouse-follow-content');\n      if (contentArea) {\n        const lines = contentArea.querySelectorAll('.follow-line');\n        console.log(`初始化鼠标跟随模式，共 ${lines.length} 行`);\n        \n        // 可选：启用可视化调试\n        if (false) { // 设置为true可以启用可视化调试\n          lines.forEach((line, index) => {\n            line.style.border = '1px dashed #888';\n            line.setAttribute('title', `行 ${index+1}`);\n          });\n        }\n        \n        // 验证行高亮效果\n        const firstLine = lines[0];\n        if (firstLine) {\n          console.log('行样式验证:', {\n            padding: window.getComputedStyle(firstLine).padding,\n            margin: window.getComputedStyle(firstLine).margin,\n            fontSize: window.getComputedStyle(firstLine).fontSize,\n            lineHeight: window.getComputedStyle(firstLine).lineHeight\n          });\n        }\n      }\n    }, 100);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = (delta) => {\n    window.autoReader.speed = Math.max(100, window.autoReader.speed + delta);\n    \n    if (window.autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async (delta) => {\n    console.log(`翻页请求: 当前页 ${currentPage}, 增量 ${delta}`);\n    const newPage = currentPage + delta;\n    \n    if (newPage < 1 || newPage > totalPages) {\n      console.log('无效页码，不执行翻页');\n          return;\n        }\n        \n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n    const wasFlashReading = readingMode === 'flash-reading' && window.flashReader && window.flashReader.isPlaying;\n    \n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    \n    if (wasFlashReading && window.flashReader) {\n      window.flashReader.cleanup();\n    }\n    \n    // 更新页码\n    setCurrentPage(newPage);\n    \n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n      \n      // 检查是否为目录页\n      const textContent = await page.getTextContent();\n      const isToc = await detectIfTocPage(textContent);\n      setIsTableOfContents(isToc);\n      \n      if (isToc) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, page.getViewport({ scale: 1.0 }));\n      } else {\n        // 处理正文页面 - 根据当前阅读模式处理\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n        \n        // 根据当前模式设置内容\n        if (readingMode === 'static') {\n          console.log('翻页后应用静态高亮模式');\n          const processedContent = formatSimpleHighlightedText(sentences);\n          setContent(processedContent);\n          \n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n            if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n              \n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n              }\n            }\n          }, 200);\n        } else if (readingMode === 'flash-reading') {\n          // 如果是闪读模式，则需要特殊处理\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n            \n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n            \n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n            \n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n          return; // 已处理，直接返回\n        } else {\n          // 其他模式使用原处理函数\n          await processContentPage(page, readingMode);\n        }\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n    } catch (error) {\n      console.error('页面切换错误:', error);\n    }\n  };\n\n  // ADHD友好的静态高亮处理函数\n  const formatSimpleHighlightedText = (sentences) => {\n    console.log('开始处理ADHD友好的静态高亮文本，句子数量:', sentences.length);\n    \n    let html = '<div class=\"pdf-content adhd-highlight-mode\">';\n    \n    sentences.forEach((sentence, sentenceIndex) => {\n      if (!sentence || sentence.trim() === '') {\n        console.log(`跳过空句子，索引: ${sentenceIndex}`);\n      return;\n    }\n    \n      // 清理和规范化文本\n      const cleanText = sentence\n        .trim()\n        .replace(/\\s+/g, ' ')  // 规范化空白字符\n        .replace(/&/g, '&amp;')  // 转义特殊字符\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n      \n      // 处理句子中的单词，为它们添加不同样式\n      const words = cleanText.split(/(\\s+)/);\n      let formattedSentence = '';\n      \n      words.forEach((word, wordIndex) => {\n        if (word.trim() === '') {\n          // 保留空格\n          formattedSentence += word;\n      } else {\n          // 根据位置应用不同的样式类\n          // 三种交替样式: 加粗、彩色、正常\n          const styleClass = wordIndex % 3 === 0 ? 'adhd-bold' : \n                           wordIndex % 3 === 1 ? 'adhd-colored' : 'adhd-normal';\n          \n          formattedSentence += `<span class=\"${styleClass}\">${word}</span>`;\n        }\n      });\n      \n      console.log(`处理句子 ${sentenceIndex + 1}:`, cleanText.substring(0, 50) + '...');\n      html += `<p class=\"pdf-paragraph\">${formattedSentence}</p>`;\n    });\n    \n    html += '</div>';\n    \n    // 调试输出\n    console.log('生成的ADHD友好静态高亮HTML:', html.substring(0, 200) + '...');\n    \n    return html;\n  };\n\n  // 根据阅读模式获取相应的内容处理函数\n  const getContentHandlerForMode = (mode) => {\n    switch(mode) {\n      case 'normal': return formatSentencesToHtml;\n      case 'static': return applyStaticHighlightToSentences;\n      case 'follow-mouse': return formatSentencesForMouseFollow;\n      case 'comfortable-3d': return applyComfortable3dEffectToSentences;\n      case 'flash-reading': \n        return (sentences) => {\n          // 闪读模式使用专门的分割函数重新处理文本\n          return createFlashReadingContentFromSentences(sentences);\n        };\n      default: return formatSentencesToHtml;\n    }\n  };\n\n  // 监听阅读模式和当前页面的变化\n  useEffect(() => {\n    if (readingMode === 'mouse-follow' && currentPage && !isTableOfContents) {\n      // 移除之前的样式\n      const oldStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (oldStyle) {\n        oldStyle.remove();\n      }\n      \n      // 添加基础鼠标跟随样式\n      const followModeStyle = document.createElement('style');\n      followModeStyle.id = 'basic-mouse-follow-style';\n      followModeStyle.textContent = `\n        .follow-line {\n          padding: 8px 12px;\n          margin: 4px 0;\n          border-radius: 4px;\n          transition: background-color 0.2s ease;\n        }\n        .follow-line.highlighted {\n          background-color: #ffa500;\n          color: #000080;\n          font-weight: bold;\n        }\n      `;\n      document.head.appendChild(followModeStyle);\n      \n      // 处理当前页面内容\n      const page = pdfDocument.getPage(currentPage);\n      const textContent = page.getTextContent();\n      const sentences = textContent.items\n        .map(item => item.str)\n        .join(' ')\n        .split(/[。！？]/)\n        .filter(s => s.trim());\n      \n      // 应用基础鼠标跟随格式化\n      setContent(formatSentencesForMouseFollow(sentences));\n      \n      // 添加鼠标跟随监听器\n      setTimeout(() => {\n        addMouseFollowListeners();\n      }, 100);\n      \n      return () => {\n        followModeStyle.remove();\n      };\n    }\n  }, [readingMode, currentPage, pdfDocument]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        <div className=\"logo\">\n          <h2>ADHD阅读助手</h2>\n        </div>\n        \n        <div className=\"reading-controls\">\n          <h3>阅读模式</h3>\n          <select \n            id=\"reading-mode-select\" \n            value={readingMode} \n            onChange={handleReadingModeChange}\n            className=\"mode-select\"\n          >\n            <option value=\"normal\">普通模式</option>\n            <option value=\"static\">静态高亮</option>\n            <option value=\"follow-mouse\">鼠标跟随</option>\n            <option value=\"rhythm\">节奏阅读</option>\n            <option value=\"flash-reading\">闪读模式</option>\n          </select>\n        </div>\n        \n        <div className=\"upload-section\">\n          <input\n            type=\"file\"\n            accept=\".pdf,.txt,.md\" \n            hidden\n            id=\"file-upload\"\n            onChange={handleFileUpload}\n            ref={fileRef}\n          />\n          <button \n            className=\"upload-btn\"\n            onClick={() => fileRef.current.click()}\n          >\n            上传文件 (.pdf/.txt/.md)\n          </button>\n      </div>\n            </div>\n      \n      <div className=\"main-content\">\n        <div className=\"toolbar\">\n          {fileName && <h3 className=\"filename\">{fileName}</h3>}\n          {/* 移除了原有翻页控件 */}\n            </div>\n        \n        <div className=\"page-content\" ref={readerContainerRef}>\n            <div dangerouslySetInnerHTML={{ __html: content }} />\n          \n          {totalPages > 0 && (\n            <div className=\"bottom-pagination\">\n              <button \n                onClick={() => changePage(-1)} \n                disabled={currentPage <= 1}\n                className=\"page-btn\"\n              >\n                上一页\n              </button>\n            <span className=\"page-info\">\n                第 {currentPage} / {totalPages} 页\n              </span>\n              <button \n                onClick={() => changePage(1)} \n                disabled={currentPage >= totalPages}\n                className=\"page-btn\"\n              >\n                下一页\n              </button>\n          </div>\n        )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App; \n"],"mappings":"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AE,GAAG,qBAAqB;MAChCO,KAAK,CAAC0B,WAAW,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;MACDtC,QAAQ,CAAC6K,IAAI,CAACpK,WAAW,CAACG,KAAK,CAAC;IAClC;EACF,CAAC;;EAED;EACA,MAAMsK,sBAAsB,GAAGA,CAAA,KAAM;IACnC;IACAD,qBAAqB,CAAC,CAAC;IAEvB,MAAME,SAAS,GAAG5M,MAAM,CAAC6M,qBAAqB;IAC9C,IAAI,CAACD,SAAS,IAAI,CAACE,KAAK,CAACC,OAAO,CAACH,SAAS,CAAC,IAAIA,SAAS,CAACjJ,MAAM,KAAK,CAAC,EAAE;MACrE1C,OAAO,CAAC2B,KAAK,CAAC,eAAe,CAAC;MAC9B;IACF;;IAEA;IACA,MAAMoD,OAAO,GAAGvE,QAAQ,CAACC,cAAc,CAAC,uBAAuB,CAAC;IAChE,MAAMsL,WAAW,GAAGvL,QAAQ,CAACC,cAAc,CAAC,qBAAqB,CAAC;IAClE,MAAMuL,UAAU,GAAGxL,QAAQ,CAACC,cAAc,CAAC,2BAA2B,CAAC;IACvE,MAAMwL,UAAU,GAAGzL,QAAQ,CAACC,cAAc,CAAC,oBAAoB,CAAC;IAChE,MAAMyL,WAAW,GAAG1L,QAAQ,CAACC,cAAc,CAAC,qBAAqB,CAAC;IAClE,MAAM0L,UAAU,GAAG3L,QAAQ,CAACC,cAAc,CAAC,oBAAoB,CAAC;IAChE,MAAM2L,UAAU,GAAG5L,QAAQ,CAACC,cAAc,CAAC,6BAA6B,CAAC;IACzE,MAAM4L,UAAU,GAAG7L,QAAQ,CAACC,cAAc,CAAC,6BAA6B,CAAC;IACzE,MAAM6L,QAAQ,GAAG9L,QAAQ,CAACC,cAAc,CAAC,wBAAwB,CAAC;IAClE,MAAM8L,KAAK,GAAG/L,QAAQ,CAACgM,aAAa,CAAC,sBAAsB,CAAC;IAE5D,IAAI,CAACzH,OAAO,IAAI,CAACgH,WAAW,IAAI,CAACC,UAAU,IAAI,CAACC,UAAU,IAAI,CAACC,WAAW,IAAI,CAACC,UAAU,IAAI,CAACC,UAAU,IAAI,CAACC,UAAU,IAAI,CAACC,QAAQ,IAAI,CAACC,KAAK,EAAE;MAC9IvM,OAAO,CAAC2B,KAAK,CAAC,eAAe,CAAC;MAC9B;IACF;;IAEA;IACA5C,MAAM,CAAC0N,WAAW,GAAG;MACnBd,SAAS,EAAEA,SAAS;MACpBnM,YAAY,EAAE,CAAC;MACfkN,QAAQ,EAAE,IAAI;MACdjN,KAAK,EAAEkI,QAAQ,CAACoE,WAAW,CAAC5E,KAAK,CAAC;MAClCwF,SAAS,EAAE,KAAK;MAEhB;MACAlL,KAAKA,CAAA,EAAG;QACN,IAAI,IAAI,CAACiL,QAAQ,EAAE;UACjBxK,aAAa,CAAC,IAAI,CAACwK,QAAQ,CAAC;QAC9B;QAEA,IAAI,CAACC,SAAS,GAAG,IAAI;QACrBV,UAAU,CAACW,QAAQ,GAAG,IAAI;QAC1BV,WAAW,CAACU,QAAQ,GAAG,KAAK;QAC5BN,QAAQ,CAACxJ,WAAW,GAAG,MAAM,IAAI,CAACtD,YAAY,GAAG,CAAC,MAAM,IAAI,CAACmM,SAAS,CAACjJ,MAAM,EAAE;;QAE/E;QACA,IAAI,CAACmK,sBAAsB,CAAC,CAAC;;QAE7B;QACA,IAAI,CAACH,QAAQ,GAAG1K,WAAW,CAAC,MAAM;UAChC,IAAI,CAACxC,YAAY,EAAE;UAEnB,IAAI,IAAI,CAACA,YAAY,IAAI,IAAI,CAACmM,SAAS,CAACjJ,MAAM,EAAE;YAC9C,IAAI,CAACvC,IAAI,CAAC,CAAC;YACX4E,OAAO,CAACjC,WAAW,GAAG,MAAM;YAC5B;UACF;UAEA,IAAI,CAAC+J,sBAAsB,CAAC,CAAC;UAC7BP,QAAQ,CAACxJ,WAAW,GAAG,MAAM,IAAI,CAACtD,YAAY,GAAG,CAAC,MAAM,IAAI,CAACmM,SAAS,CAACjJ,MAAM,EAAE;QACjF,CAAC,EAAE,IAAI,CAACjD,KAAK,CAAC;MAChB,CAAC;MAED;MACAoN,sBAAsBA,CAAA,EAAG;QACvB,IAAI,IAAI,CAACrN,YAAY,GAAG,IAAI,CAACmM,SAAS,CAACjJ,MAAM,EAAE;UAC7C,MAAMoK,eAAe,GAAG,IAAI,CAACnB,SAAS,CAAC,IAAI,CAACnM,YAAY,CAAC;UACzDuF,OAAO,CAACjC,WAAW,GAAGgK,eAAe;UACrC/H,OAAO,CAAC3D,KAAK,CAACwE,KAAK,GAAG,OAAO,CAAC,CAAC;;UAE/B;UACA1E,UAAU,CAAC,MAAM;YACf,MAAM6L,WAAW,GAAGhI,OAAO,CAACoB,qBAAqB,CAAC,CAAC;YACnD;YACAoG,KAAK,CAACnL,KAAK,CAACgG,KAAK,GAAG,GAAG2F,WAAW,CAAC3F,KAAK,IAAI;YAC5CmF,KAAK,CAACnL,KAAK,CAAC4L,MAAM,GAAG,GAAGD,WAAW,CAACC,MAAM,IAAI;UAChD,CAAC,EAAE,EAAE,CAAC;QACR;MACF,CAAC;MAED;MACAC,KAAKA,CAAA,EAAG;QACN,IAAI,IAAI,CAACP,QAAQ,EAAE;UACjBxK,aAAa,CAAC,IAAI,CAACwK,QAAQ,CAAC;UAC5B,IAAI,CAACA,QAAQ,GAAG,IAAI;QACtB;QAEA,IAAI,CAACC,SAAS,GAAG,KAAK;QACtBV,UAAU,CAACW,QAAQ,GAAG,KAAK;QAC3BV,WAAW,CAACU,QAAQ,GAAG,IAAI;MAC7B,CAAC;MAED;MACAzM,IAAIA,CAAA,EAAG;QACL,IAAI,IAAI,CAACuM,QAAQ,EAAE;UACjBxK,aAAa,CAAC,IAAI,CAACwK,QAAQ,CAAC;UAC5B,IAAI,CAACA,QAAQ,GAAG,IAAI;QACtB;QAEA,IAAI,CAACC,SAAS,GAAG,KAAK;QACtB,IAAI,CAACnN,YAAY,GAAG,CAAC;QACrByM,UAAU,CAACW,QAAQ,GAAG,KAAK;QAC3BV,WAAW,CAACU,QAAQ,GAAG,IAAI;QAE3B7H,OAAO,CAACjC,WAAW,GAAG,MAAM;QAC5BwJ,QAAQ,CAACxJ,WAAW,GAAG,UAAU,IAAI,CAAC6I,SAAS,CAACjJ,MAAM,EAAE,CAAC,CAAC;MAC5D,CAAC;MAED;MACAwK,WAAWA,CAACxF,QAAQ,EAAE;QACpB,IAAI,CAACjI,KAAK,GAAGiI,QAAQ;QACrBsE,UAAU,CAAClJ,WAAW,GAAG,GAAG4E,QAAQ,KAAK;;QAEzC;QACAyF,YAAY,CAACC,OAAO,CAAC,qBAAqB,EAAE1F,QAAQ,CAAC;;QAErD;QACA,IAAI,IAAI,CAACiF,SAAS,EAAE;UAClBzK,aAAa,CAAC,IAAI,CAACwK,QAAQ,CAAC;UAC5B,IAAI,CAACjL,KAAK,CAAC,CAAC,CAAC,CAAC;QAChB;MACF,CAAC;MAED;MACA4L,YAAYA,CAAA,EAAG;QACb,IAAI,IAAI,CAAC7N,YAAY,GAAG,CAAC,EAAE;UACzB,IAAI,CAACA,YAAY,EAAE;UACnB,IAAI,CAACqN,sBAAsB,CAAC,CAAC;UAC7BP,QAAQ,CAACxJ,WAAW,GAAG,MAAM,IAAI,CAACtD,YAAY,GAAG,CAAC,MAAM,IAAI,CAACmM,SAAS,CAACjJ,MAAM,EAAE;QACjF;MACF,CAAC;MAED;MACA4K,YAAYA,CAAA,EAAG;QACb,IAAI,IAAI,CAAC9N,YAAY,GAAG,IAAI,CAACmM,SAAS,CAACjJ,MAAM,GAAG,CAAC,EAAE;UACjD,IAAI,CAAClD,YAAY,EAAE;UACnB,IAAI,CAACqN,sBAAsB,CAAC,CAAC;UAC7BP,QAAQ,CAACxJ,WAAW,GAAG,MAAM,IAAI,CAACtD,YAAY,GAAG,CAAC,MAAM,IAAI,CAACmM,SAAS,CAACjJ,MAAM,EAAE;QACjF;MACF,CAAC;MAED;MACA7C,OAAOA,CAAA,EAAG;QACR,IAAI,IAAI,CAAC6M,QAAQ,EAAE;UACjBxK,aAAa,CAAC,IAAI,CAACwK,QAAQ,CAAC;UAC5B,IAAI,CAACA,QAAQ,GAAG,IAAI;QACtB;QACA,IAAI,CAACC,SAAS,GAAG,KAAK;QACtB,IAAI,CAACnN,YAAY,GAAG,CAAC;MACvB;IACF,CAAC;;IAED;IACAyM,UAAU,CAACxE,gBAAgB,CAAC,OAAO,EAAE,MAAM;MACzC1I,MAAM,CAAC0N,WAAW,CAAChL,KAAK,CAAC,CAAC;IAC5B,CAAC,CAAC;IAEFyK,WAAW,CAACzE,gBAAgB,CAAC,OAAO,EAAE,MAAM;MAC1C1I,MAAM,CAAC0N,WAAW,CAACQ,KAAK,CAAC,CAAC;IAC5B,CAAC,CAAC;IAEFd,UAAU,CAAC1E,gBAAgB,CAAC,OAAO,EAAE,MAAM;MACzC1I,MAAM,CAAC0N,WAAW,CAACtM,IAAI,CAAC,CAAC;IAC3B,CAAC,CAAC;IAEF4L,WAAW,CAACtE,gBAAgB,CAAC,OAAO,EAAG1B,CAAC,IAAK;MAC3C,MAAM2B,QAAQ,GAAGC,QAAQ,CAAC5B,CAAC,CAACwH,MAAM,CAACpG,KAAK,CAAC;MACzCpI,MAAM,CAAC0N,WAAW,CAACS,WAAW,CAACxF,QAAQ,CAAC;IAC1C,CAAC,CAAC;IAEF0E,UAAU,CAAC3E,gBAAgB,CAAC,OAAO,EAAE,MAAM;MACzC1I,MAAM,CAAC0N,WAAW,CAACY,YAAY,CAAC,CAAC;IACnC,CAAC,CAAC;IAEFhB,UAAU,CAAC5E,gBAAgB,CAAC,OAAO,EAAE,MAAM;MACzC1I,MAAM,CAAC0N,WAAW,CAACa,YAAY,CAAC,CAAC;IACnC,CAAC,CAAC;;IAEF;IACA,MAAME,UAAU,GAAGL,YAAY,CAACM,OAAO,CAAC,qBAAqB,CAAC;IAC9D,MAAMC,YAAY,GAAGF,UAAU,GAAG7F,QAAQ,CAAC6F,UAAU,CAAC,GAAG,IAAI;IAC7DzB,WAAW,CAAC5E,KAAK,GAAGuG,YAAY;IAChC3O,MAAM,CAAC0N,WAAW,CAACS,WAAW,CAACQ,YAAY,CAAC;IAE5C1N,OAAO,CAACC,GAAG,CAAC,aAAa,GAAG0L,SAAS,CAACjJ,MAAM,GAAG,MAAM,CAAC;EACxD,CAAC;;EAED;EACA,MAAMiL,yBAAyB,GAAIvK,IAAI,IAAK;IAC1C,OAAO;AACX,WAAWA,IAAI;AACf,WAAW;EACT,CAAC;;EAED;EACA,MAAMwK,gBAAgB,GAAIxK,IAAI,IAAK;IACjC;IACA,MAAMyK,UAAU,GAAGzK,IAAI,CAAC0K,KAAK,CAAC,YAAY,CAAC;IAC3C,IAAIC,IAAI,GAAG,2BAA2B;IAEtCF,UAAU,CAACrI,OAAO,CAACtC,SAAS,IAAI;MAC9B,IAAIA,SAAS,CAACH,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAC7BgL,IAAI,IAAI,4BAA4B7K,SAAS,MAAM;IACrD,CAAC,CAAC;IAEF6K,IAAI,IAAI,QAAQ;IAChB,OAAOA,IAAI;EACb,CAAC;;EAED;EACA,MAAMC,wBAAwB,GAAI5K,IAAI,IAAK;IACzC,MAAMyK,UAAU,GAAGzK,IAAI,CAAC0K,KAAK,CAAC,YAAY,CAAC;IAC3C,IAAIC,IAAI,GAAG,gDAAgD;IAE3DF,UAAU,CAACrI,OAAO,CAACtC,SAAS,IAAI;MAC9B,IAAIA,SAAS,CAACH,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;;MAE7B;MACA,MAAMkL,KAAK,GAAG/K,SAAS,CAAC4K,KAAK,CAAC,OAAO,CAAC;MACtC,IAAII,kBAAkB,GAAG,EAAE;MAE3BD,KAAK,CAACzI,OAAO,CAAC2I,IAAI,IAAI;QACpB,IAAIA,IAAI,CAACpL,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;UACtBmL,kBAAkB,IAAIC,IAAI;QAC5B,CAAC,MAAM;UACLD,kBAAkB,IAAI,6BAA6BC,IAAI,SAAS;QAClE;MACF,CAAC,CAAC;MAEFJ,IAAI,IAAI,+CAA+CG,kBAAkB,MAAM;IACjF,CAAC,CAAC;IAEFH,IAAI,IAAI,QAAQ;IAChB,OAAOA,IAAI;EACb,CAAC;;EAED;EACA,MAAMK,oBAAoB,GAAIhL,IAAI,IAAK;IACrC;IACA,MAAMyK,UAAU,GAAGzK,IAAI,CAAC0K,KAAK,CAAC,YAAY,CAAC;IAC3C,IAAIC,IAAI,GAAG,2BAA2B;IAEtCF,UAAU,CAACrI,OAAO,CAACtC,SAAS,IAAI;MAC9B,IAAIA,SAAS,CAACH,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;;MAE7B;MACA,MAAMkL,KAAK,GAAG/K,SAAS,CAAC4K,KAAK,CAAC,OAAO,CAAC;MACtC,IAAII,kBAAkB,GAAG,EAAE;MAC3B,IAAIG,SAAS,GAAG,IAAI;MAEpBJ,KAAK,CAACzI,OAAO,CAAC2I,IAAI,IAAI;QACpB,IAAIA,IAAI,CAACpL,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;UACtBmL,kBAAkB,IAAIC,IAAI;UAC1B;QACF;;QAEA;QACA,IAAIG,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,EAAE;UACvB,IAAI3I,KAAK;UACT,IAAIyI,SAAS,KAAK,KAAK,EAAE;YACvBzI,KAAK,GAAG,MAAM;UAChB,CAAC,MAAM,IAAIyI,SAAS,KAAK,MAAM,EAAE;YAC/BzI,KAAK,GAAG,KAAK;UACf,CAAC,MAAM;YACLA,KAAK,GAAG0I,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,MAAM;UAC9C;UACAF,SAAS,GAAGzI,KAAK;UAEjBsI,kBAAkB,IAAI,+BAA+BtI,KAAK,KAAKuI,IAAI,SAAS;QAC9E,CAAC,MAAM;UACLD,kBAAkB,IAAIC,IAAI;QAC5B;MACF,CAAC,CAAC;MAEFJ,IAAI,IAAI,4BAA4BG,kBAAkB,MAAM;IAC9D,CAAC,CAAC;IAEFH,IAAI,IAAI,QAAQ;IAChB,OAAOA,IAAI;EACb,CAAC;;EAED;EACA,MAAMS,qBAAqB,GAAIpL,IAAI,IAAK;IACtC;IACA,MAAMyK,UAAU,GAAGzK,IAAI,CAAC0K,KAAK,CAAC,YAAY,CAAC;IAC3C,IAAIC,IAAI,GAAG,kDAAkD;IAE7DF,UAAU,CAACrI,OAAO,CAACtC,SAAS,IAAI;MAC9B,IAAIA,SAAS,CAACH,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;;MAE7B;MACA,MAAMkL,KAAK,GAAG/K,SAAS,CAAC4K,KAAK,CAAC,OAAO,CAAC;MACtC,IAAII,kBAAkB,GAAG,EAAE;MAE3BD,KAAK,CAACzI,OAAO,CAAC2I,IAAI,IAAI;QACpB,IAAIA,IAAI,CAACpL,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;UACtBmL,kBAAkB,IAAIC,IAAI;QAC5B,CAAC,MAAM;UACLD,kBAAkB,IAAI,mCAAmCC,IAAI,SAAS;QACxE;MACF,CAAC,CAAC;MAEFJ,IAAI,IAAI,4BAA4BG,kBAAkB,MAAM;IAC9D,CAAC,CAAC;IAEFH,IAAI,IAAI,QAAQ;IAChB,OAAOA,IAAI;EACb,CAAC;;EAED;EACA,MAAMU,wBAAwB,GAAIrL,IAAI,IAAK;IACzC;IACA,MAAMyK,UAAU,GAAGzK,IAAI,CAAC0K,KAAK,CAAC,YAAY,CAAC;IAC3C,IAAIC,IAAI,GAAG,2BAA2B;IAEtCF,UAAU,CAACrI,OAAO,CAACtC,SAAS,IAAI;MAC9B,IAAIA,SAAS,CAACH,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;;MAE7B;MACA,MAAMkL,KAAK,GAAG/K,SAAS,CAAC4K,KAAK,CAAC,OAAO,CAAC;MACtC,IAAII,kBAAkB,GAAG,EAAE;MAE3BD,KAAK,CAACzI,OAAO,CAAC2I,IAAI,IAAI;QACpB,IAAIA,IAAI,CAACpL,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;UACtBmL,kBAAkB,IAAIC,IAAI;QAClC,CAAC,MAAM;UACC;UACA,MAAMO,WAAW,GAAG,CAAC,gBAAgB,EAAE,eAAe,EAAE,kBAAkB,CAAC;UAC3E,MAAMC,WAAW,GAAGD,WAAW,CAACJ,IAAI,CAACM,KAAK,CAACN,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGG,WAAW,CAAChM,MAAM,CAAC,CAAC;UAE/EwL,kBAAkB,IAAI,gBAAgBS,WAAW,KAAKR,IAAI,SAAS;QACrE;MACF,CAAC,CAAC;MAEFJ,IAAI,IAAI,4BAA4BG,kBAAkB,MAAM;IAC9D,CAAC,CAAC;IAEFH,IAAI,IAAI,QAAQ;IAChB,OAAOA,IAAI;EACb,CAAC;;EAED;EACA,MAAMc,oBAAoB,GAAGA,CAAA,KAAM;IACjC;IACA,MAAMC,YAAY,GAAGtO,QAAQ,CAACiC,gBAAgB,CAAC,oBAAoB,CAAC;IACpEqM,YAAY,CAACtJ,OAAO,CAAC,CAAC7C,OAAO,EAAEgD,KAAK,KAAK;MACvC;MACA,MAAMoJ,KAAK,GAAGT,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC;MAC/B5L,OAAO,CAACvB,KAAK,CAAC4N,cAAc,GAAG,GAAGD,KAAK,GAAG;IAC5C,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAME,uBAAuB,GAAGA,CAAA,KAAM;IACpC;IACA,MAAMC,WAAW,GAAG1O,QAAQ,CAACgM,aAAa,CAAC,uBAAuB,CAAC;IACnE,IAAI,CAAC0C,WAAW,EAAE;MAChBlP,OAAO,CAAC2B,KAAK,CAAC,aAAa,CAAC;MAC5B;IACF;;IAEA;IACA,IAAIwN,mBAAmB,GAAG,IAAI;;IAE9B;IACA,MAAMC,gBAAgB,GAAIrJ,CAAC,IAAK;MAC9B;MACA,MAAMsJ,MAAM,GAAGtJ,CAAC,CAACuJ,OAAO;;MAExB;MACA,MAAMC,QAAQ,GAAGL,WAAW,CAACzM,gBAAgB,CAAC,cAAc,CAAC;MAC7D,IAAI+M,SAAS,GAAG,IAAI;MACpB,IAAIC,WAAW,GAAGC,QAAQ;;MAE1B;MACAH,QAAQ,CAAC/J,OAAO,CAACmK,IAAI,IAAI;QACvB,MAAMzJ,IAAI,GAAGyJ,IAAI,CAACxJ,qBAAqB,CAAC,CAAC;QACzC,MAAMyJ,UAAU,GAAG1J,IAAI,CAACE,GAAG,GAAGF,IAAI,CAAC8G,MAAM,GAAG,CAAC;QAC7C,MAAM6C,QAAQ,GAAGvB,IAAI,CAACwB,GAAG,CAACT,MAAM,GAAGO,UAAU,CAAC;;QAE9C;QACA,IAAIP,MAAM,IAAInJ,IAAI,CAACE,GAAG,IAAIiJ,MAAM,IAAInJ,IAAI,CAAC6J,MAAM,EAAE;UAC/C,IAAIF,QAAQ,GAAGJ,WAAW,EAAE;YAC1BA,WAAW,GAAGI,QAAQ;YACtBL,SAAS,GAAGG,IAAI;UACpB;QACF;MACF,CAAC,CAAC;;MAEA;MACA,IAAIR,mBAAmB,IAAIA,mBAAmB,KAAKK,SAAS,EAAE;QAC5D;QACAL,mBAAmB,CAAC/D,SAAS,CAAC1K,MAAM,CAAC,aAAa,CAAC;MACrD;MAEA,IAAI8O,SAAS,EAAE;QACb;QACAA,SAAS,CAACpE,SAAS,CAACpF,GAAG,CAAC,aAAa,CAAC;QACtCmJ,mBAAmB,GAAGK,SAAS;;QAE/B;QACAxP,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEuP,SAAS,CAAC1M,WAAW,CAACK,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;MACvE,CAAC,MAAM,IAAIgM,mBAAmB,EAAE;QAC9B;QACAA,mBAAmB,CAAC/D,SAAS,CAAC1K,MAAM,CAAC,aAAa,CAAC;QACnDyO,mBAAmB,GAAG,IAAI;MAC5B;IACF,CAAC;;IAED;IACA,MAAMa,iBAAiB,GAAGA,CAAA,KAAM;MAC9B;MACA,IAAIb,mBAAmB,EAAE;QACvBA,mBAAmB,CAAC/D,SAAS,CAAC1K,MAAM,CAAC,aAAa,CAAC;QACnDyO,mBAAmB,GAAG,IAAI;MAC5B;IACF,CAAC;;IAED;IACApQ,MAAM,CAACI,YAAY,GAAGJ,MAAM,CAACI,YAAY,IAAI;MAAEC,mBAAmB,EAAE;IAAG,CAAC;IACxEL,MAAM,CAACI,YAAY,CAACC,mBAAmB,CAAC2E,IAAI,CAC1C;MAAEpB,OAAO,EAAEuM,WAAW;MAAEe,KAAK,EAAE,WAAW;MAAEC,OAAO,EAAEd;IAAiB,CAAC,EACvE;MAAEzM,OAAO,EAAEuM,WAAW;MAAEe,KAAK,EAAE,YAAY;MAAEC,OAAO,EAAEF;IAAkB,CAC1E,CAAC;;IAED;IACAd,WAAW,CAACzH,gBAAgB,CAAC,WAAW,EAAE2H,gBAAgB,CAAC;IAC3DF,WAAW,CAACzH,gBAAgB,CAAC,YAAY,EAAEuI,iBAAiB,CAAC;IAE7DhQ,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;EAC/B,CAAC;;EAED;EACA5B,SAAS,CAAC,MAAM;IACdC,QAAQ,CAACM,mBAAmB,CAACC,SAAS,GAAG,iDAAiDP,QAAQ,CAACQ,OAAO,oBAAoB;EAChI,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAT,SAAS,CAAC,MAAM;IACd,IAAIiM,WAAW,KAAK,cAAc,EAAE;MAClC;MACApJ,UAAU,CAAC,MAAM;QACfiP,qBAAqB,CAAC,CAAC;MACzB,CAAC,EAAE,EAAE,CAAC;IACR;EACF,CAAC,EAAE,CAAC7F,WAAW,EAAEI,eAAe,CAAC,CAAC;;EAElC;EACA,MAAM0F,aAAa,GAAG,MAAOpG,IAAI,IAAK;IACpC,IAAI;MACF,MAAMqG,OAAO,GAAGC,GAAG,CAACC,eAAe,CAACvG,IAAI,CAAC;MACzC,MAAMwG,WAAW,GAAGlS,QAAQ,CAACmS,WAAW,CAACJ,OAAO,CAAC;MACjD,MAAMK,GAAG,GAAG,MAAMF,WAAW,CAACG,OAAO;MAErC3F,cAAc,CAAC0F,GAAG,CAAC;MACnBhH,aAAa,CAACgH,GAAG,CAACE,QAAQ,CAAC;MAC3BnH,cAAc,CAAC,CAAC,CAAC;;MAEjB;MACA,MAAMoH,qBAAqB,CAACH,GAAG,EAAE,CAAC,CAAC;;MAEnC;MACA1Q,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEyQ,GAAG,CAACE,QAAQ,CAAC;IAC1C,CAAC,CAAC,OAAOjP,KAAK,EAAE;MACd3B,OAAO,CAAC2B,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;MACjCuH,KAAK,CAAC,iBAAiB,CAAC;IAC1B;EACF,CAAC;;EAED;EACA,MAAM2H,qBAAqB,GAAG,MAAAA,CAAOH,GAAG,EAAEI,OAAO,KAAK;IACpD,IAAI;MACF,MAAMC,IAAI,GAAG,MAAML,GAAG,CAACM,OAAO,CAACF,OAAO,CAAC;MACvC,MAAMhO,WAAW,GAAG,MAAMiO,IAAI,CAACE,cAAc,CAAC,CAAC;MAC/C,MAAMC,QAAQ,GAAGH,IAAI,CAACI,WAAW,CAAC;QAAEC,KAAK,EAAE;MAAI,CAAC,CAAC;;MAEjD;MACA,MAAMnG,iBAAiB,GAAG,MAAMoG,eAAe,CAACvO,WAAW,CAAC;MAE5D,IAAImI,iBAAiB,EAAE;QACrB;QACA,MAAMqG,cAAc,CAACxO,WAAW,EAAEoO,QAAQ,CAAC;MAC7C,CAAC,MAAM;QACL;QACA,MAAMK,kBAAkB,CAACR,IAAI,EAAEzG,WAAW,CAAC;MAC7C;;MAEA;MACA,IAAIA,WAAW,KAAK,cAAc,EAAE;QAClCpJ,UAAU,CAAC,MAAM;UACf+N,uBAAuB,CAAC,CAAC;QAC3B,CAAC,EAAE,EAAE,CAAC;MACR;MAEA,OAAO,IAAI,CAAC,CAAC;IACf,CAAC,CAAC,OAAOtN,KAAK,EAAE;MACd3B,OAAO,CAAC2B,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;MACnCmJ,UAAU,CAAC,sBAAsB,CAAC;MAClC,OAAO,KAAK;IACd;EACF,CAAC;;EAED;EACA,MAAMuG,eAAe,GAAG,MAAOvO,WAAW,IAAK;IAC7C,MAAM0O,SAAS,GAAG1O,WAAW,CAAC2O,KAAK;IACnC,IAAIC,QAAQ,GAAGF,SAAS,CAACpJ,GAAG,CAACuJ,IAAI,IAAIA,IAAI,CAACC,GAAG,CAAC,CAACvJ,IAAI,CAAC,EAAE,CAAC;;IAEvD;IACA;IACA;IACA;IACA,MAAMwJ,cAAc,GAAG,uBAAuB,CAACC,IAAI,CAACJ,QAAQ,CAAC;IAC7D,MAAMK,qBAAqB,GAAG,oBAAoB,CAACD,IAAI,CAACJ,QAAQ,CAAC;;IAEjE;IACA,IAAIM,eAAe,GAAG,CAAC;IACvB,IAAIC,qBAAqB,GAAG,CAAC;;IAE7B;IACA,MAAMC,OAAO,GAAG,IAAIpK,GAAG,CAAC,CAAC;IACzB0J,SAAS,CAAChM,OAAO,CAACmM,IAAI,IAAI;MACxB,MAAMQ,IAAI,GAAG7D,IAAI,CAAC8D,KAAK,CAACT,IAAI,CAACU,SAAS,CAAC,CAAC,CAAC,CAAC;MAC1C,IAAI,CAACH,OAAO,CAACpM,GAAG,CAACqM,IAAI,CAAC,EAAE;QACtBD,OAAO,CAACnK,GAAG,CAACoK,IAAI,EAAE,EAAE,CAAC;MACvB;MACAD,OAAO,CAAClK,GAAG,CAACmK,IAAI,CAAC,CAACpO,IAAI,CAAC4N,IAAI,CAAC;IAC9B,CAAC,CAAC;IAEF,MAAMW,KAAK,GAAG,CAAC,GAAGJ,OAAO,CAACK,MAAM,CAAC,CAAC,CAAC;IAEnCD,KAAK,CAAC9M,OAAO,CAACmK,IAAI,IAAI;MACpB,MAAM6C,QAAQ,GAAG7C,IAAI,CAACvH,GAAG,CAACuJ,IAAI,IAAIA,IAAI,CAACC,GAAG,CAAC,CAACvJ,IAAI,CAAC,EAAE,CAAC;MACpD,IAAImK,QAAQ,CAAC9P,MAAM,GAAG,EAAE,EAAEsP,eAAe,EAAE;MAC3C,IAAI,MAAM,CAACF,IAAI,CAACU,QAAQ,CAAC,EAAEP,qBAAqB,EAAE;IACpD,CAAC,CAAC;IAEF,MAAMQ,cAAc,GAAGT,eAAe,GAAGM,KAAK,CAAC5P,MAAM;IACrD,MAAMgQ,eAAe,GAAGT,qBAAqB,GAAGK,KAAK,CAAC5P,MAAM;IAE5D,OAAOmP,cAAc,IAAIE,qBAAqB,IAAKU,cAAc,GAAG,GAAG,IAAIC,eAAe,GAAG,GAAI;EACnG,CAAC;;EAED;EACA,MAAMpB,cAAc,GAAG,MAAAA,CAAOxO,WAAW,EAAEoO,QAAQ,KAAK;IACtD,MAAMM,SAAS,GAAG1O,WAAW,CAAC2O,KAAK;;IAEnC;IACA,IAAIkB,WAAW,GAAG,4BAA4B;IAE9CnB,SAAS,CAAChM,OAAO,CAACmM,IAAI,IAAI;MACxB;MACA,MAAMiB,CAAC,GAAGjB,IAAI,CAACU,SAAS,CAAC,CAAC,CAAC;MAC3B,MAAMQ,CAAC,GAAG3B,QAAQ,CAAClE,MAAM,GAAG2E,IAAI,CAACU,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;;MAE/C;MACA,MAAMS,QAAQ,GAAGxE,IAAI,CAACyE,IAAI,CAACpB,IAAI,CAACU,SAAS,CAAC,CAAC,CAAC,GAAGV,IAAI,CAACU,SAAS,CAAC,CAAC,CAAC,GAAGV,IAAI,CAACU,SAAS,CAAC,CAAC,CAAC,GAAGV,IAAI,CAACU,SAAS,CAAC,CAAC,CAAC,CAAC;MACzG,MAAMxM,UAAU,GAAG8L,IAAI,CAACqB,QAAQ,IAAIrB,IAAI,CAACqB,QAAQ,CAAC9N,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,MAAM,CAAC,GAAG,MAAM,GAAG,QAAQ;;MAEpG;MACA,MAAM8N,UAAU,GAAGtB,IAAI,CAACC,GAAG,CAAC9D,KAAK,CAAC,EAAE,CAAC,CAACzF,IAAI,CAAC,QAAQ,CAAC;;MAEpD;MACAsK,WAAW,IAAI;AACrB;AACA,gBAAgBC,CAAC;AACjB,eAAeC,CAAC;AAChB,qBAAqBC,QAAQ;AAC7B,uBAAuBjN,UAAU;AACjC;AACA;AACA;AACA;AACA,UAAUoN,UAAU,SAAS;IACzB,CAAC,CAAC;IAEFN,WAAW,IAAI,QAAQ;IACvB7H,UAAU,CAAC6H,WAAW,CAAC;EACzB,CAAC;;EAED;EACA,MAAMO,qBAAqB,GAAGA,CAACvQ,OAAO,EAAEiQ,CAAC,EAAEC,CAAC,KAAK;IAC/C,MAAMM,KAAK,GAAGxQ,OAAO,CAACyQ,UAAU;IAChC,KAAK,IAAI7P,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4P,KAAK,CAACzQ,MAAM,EAAEa,CAAC,EAAE,EAAE;MACrC,MAAMgB,IAAI,GAAG4O,KAAK,CAAC5P,CAAC,CAAC;MACrB,IAAIgB,IAAI,CAAC8O,QAAQ,KAAKC,IAAI,CAACC,SAAS,EAAE;QACpC,MAAMC,KAAK,GAAGhT,QAAQ,CAACiT,WAAW,CAAC,CAAC;QACpCD,KAAK,CAACE,kBAAkB,CAACnP,IAAI,CAAC;QAC9B,MAAMoP,KAAK,GAAGH,KAAK,CAACI,cAAc,CAAC,CAAC;QACpC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACjR,MAAM,EAAEmR,CAAC,EAAE,EAAE;UACrC,MAAM3N,IAAI,GAAGyN,KAAK,CAACE,CAAC,CAAC;UACrB,IAAIhB,CAAC,IAAI3M,IAAI,CAACE,GAAG,IAAIyM,CAAC,IAAI3M,IAAI,CAAC6J,MAAM,IACjC6C,CAAC,IAAI1M,IAAI,CAACG,IAAI,IAAIuM,CAAC,IAAI1M,IAAI,CAAC4N,KAAK,EAAE;YACrC,OAAOvP,IAAI;UACb;QACF;MACF,CAAC,MAAM,IAAIA,IAAI,CAAC8O,QAAQ,KAAKC,IAAI,CAACS,YAAY,EAAE;QAC9C,MAAMC,KAAK,GAAGd,qBAAqB,CAAC3O,IAAI,EAAEqO,CAAC,EAAEC,CAAC,CAAC;QAC/C,IAAImB,KAAK,EAAE,OAAOA,KAAK;MACzB;IACF;IACA,OAAO,IAAI;EACb,CAAC;;EAED;EACA,MAAMC,wBAAwB,GAAI7Q,IAAI,IAAK;IACzC;IACA,MAAM6K,KAAK,GAAG7K,IAAI,CAAC0K,KAAK,CAAC,iBAAiB,CAAC;IAC3C,IAAIoG,MAAM,GAAG,EAAE;IACf,IAAI7F,SAAS,GAAG,IAAI;IAEpBJ,KAAK,CAACzI,OAAO,CAAC2I,IAAI,IAAI;MACpB,IAAI,CAACA,IAAI,IAAI,OAAO,CAAC2D,IAAI,CAAC3D,IAAI,CAAC,EAAE;QAC/B+F,MAAM,IAAI/F,IAAI;QACd;MACF;MAEA,IAAIG,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,EAAE;QACvB,IAAI3I,KAAK;QACT,IAAIyI,SAAS,KAAK,KAAK,EAAE;UACvBzI,KAAK,GAAG,MAAM;QAChB,CAAC,MAAM,IAAIyI,SAAS,KAAK,MAAM,EAAE;UAC/BzI,KAAK,GAAG,KAAK;QACf,CAAC,MAAM;UACLA,KAAK,GAAG0I,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,MAAM;QAC9C;QACAF,SAAS,GAAGzI,KAAK;QAEjBsO,MAAM,IAAI,+BAA+BtO,KAAK,KAAKuI,IAAI,SAAS;MAClE,CAAC,MAAM;QACL+F,MAAM,IAAI/F,IAAI;MAChB;IACF,CAAC,CAAC;IAEF,OAAO+F,MAAM;EACf,CAAC;;EAED;EACA,MAAM3C,kBAAkB,GAAG,MAAAA,CAAOR,IAAI,EAAErI,IAAI,KAAK;IAC/C,IAAI;MACF,MAAM5F,WAAW,GAAG,MAAMiO,IAAI,CAACE,cAAc,CAAC,CAAC;MAC/C,MAAMO,SAAS,GAAG1O,WAAW,CAAC2O,KAAK;MACnC,IAAI0C,aAAa,GAAG3C,SAAS,CAACpJ,GAAG,CAACuJ,IAAI,IAAIA,IAAI,CAACC,GAAG,CAAC,CAACvJ,IAAI,CAAC,GAAG,CAAC;;MAE7D;MACA8L,aAAa,GAAGA,aAAa,CAACC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAACrR,IAAI,CAAC,CAAC;;MAEzD;MACA,MAAM4I,SAAS,GAAG0I,kBAAkB,CAACF,aAAa,CAAC;;MAEnD;MACA,IAAIG,gBAAgB,GAAG,EAAE;MACzB,QAAO5L,IAAI;QACT,KAAK,QAAQ;UACX4L,gBAAgB,GAAGC,qBAAqB,CAAC5I,SAAS,CAAC;UACnD;QACF,KAAK,QAAQ;UACX;UACA3L,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;UAC9BqU,gBAAgB,GAAGE,2BAA2B,CAAC7I,SAAS,CAAC;UACzD;QACF,KAAK,cAAc;UACjB2I,gBAAgB,GAAGG,6BAA6B,CAAC9I,SAAS,CAAC;UAC3D;QACF,KAAK,QAAQ;UACX2I,gBAAgB,GAAGC,qBAAqB,CAAC5I,SAAS,CAAC;UACnD;QACF,KAAK,gBAAgB;UACnB2I,gBAAgB,GAAGI,mCAAmC,CAAC/I,SAAS,CAAC;UACjE;QACF,KAAK,eAAe;UAClB2I,gBAAgB,GAAGK,sCAAsC,CAAChJ,SAAS,CAAC;UACpE;QACF;UACE2I,gBAAgB,GAAGC,qBAAqB,CAAC5I,SAAS,CAAC;MACvD;MAEAb,UAAU,CAACwJ,gBAAgB,CAAC;;MAE5B;MACA,IAAI5L,IAAI,KAAK,QAAQ,EAAE;QACrBxH,UAAU,CAAC,MAAM;UACf,MAAMgO,WAAW,GAAG1O,QAAQ,CAACgM,aAAa,CAAC,sBAAsB,CAAC;UAClE,IAAI0C,WAAW,EAAE;YACflP,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;YACzB,MAAM4N,UAAU,GAAGqB,WAAW,CAACzM,gBAAgB,CAAC,gBAAgB,CAAC;YACjEzC,OAAO,CAACC,GAAG,CAAC,MAAM4N,UAAU,CAACnL,MAAM,MAAM,CAAC;;YAE1C;YACA,IAAImL,UAAU,CAACnL,MAAM,GAAG,CAAC,EAAE;cACzB,MAAMkS,SAAS,GAAG/G,UAAU,CAAC,CAAC,CAAC;cAC/B,MAAMgH,MAAM,GAAG9V,MAAM,CAAC+F,gBAAgB,CAAC8P,SAAS,CAAC;cACjD5U,OAAO,CAACC,GAAG,CAAC,UAAU,EAAE;gBACtB2F,KAAK,EAAEiP,MAAM,CAACjP,KAAK;gBACnBkP,eAAe,EAAED,MAAM,CAACC,eAAe;gBACvCC,UAAU,EAAEF,MAAM,CAACE,UAAU;gBAC7BjC,QAAQ,EAAE+B,MAAM,CAAC/B;cACnB,CAAC,CAAC;YACJ;UACF;QACF,CAAC,EAAE,GAAG,CAAC;MACT;IACF,CAAC,CAAC,OAAOnR,KAAK,EAAE;MACd3B,OAAO,CAAC2B,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;MAClCmJ,UAAU,CAAC,sBAAsB,CAAC;IACpC;EACF,CAAC;;EAED;EACA,MAAMuJ,kBAAkB,GAAIjR,IAAI,IAAK;IACnC;IACA;IACA,MAAM4R,aAAa,GAAG,mBAAmB;;IAEzC;IACA,MAAMrJ,SAAS,GAAG,EAAE;IACpB,IAAIsJ,SAAS,GAAG,CAAC;IACjB,IAAIC,KAAK;IAET,OAAO,CAACA,KAAK,GAAGF,aAAa,CAACG,IAAI,CAAC/R,IAAI,CAAC,MAAM,IAAI,EAAE;MAClD,MAAMgS,QAAQ,GAAGF,KAAK,CAACvP,KAAK,GAAGuP,KAAK,CAAC,CAAC,CAAC,CAACxS,MAAM;MAC9C,MAAM2S,QAAQ,GAAGjS,IAAI,CAACD,SAAS,CAAC8R,SAAS,EAAEG,QAAQ,CAAC,CAACrS,IAAI,CAAC,CAAC;;MAE3D;MACA,IAAIsS,QAAQ,EAAE;QACZ1J,SAAS,CAAC5H,IAAI,CAACsR,QAAQ,CAAC;MAC1B;MAEAJ,SAAS,GAAGG,QAAQ;IACtB;;IAEA;IACA,IAAIH,SAAS,GAAG7R,IAAI,CAACV,MAAM,EAAE;MAC3B,MAAM4S,YAAY,GAAGlS,IAAI,CAACD,SAAS,CAAC8R,SAAS,CAAC,CAAClS,IAAI,CAAC,CAAC;MACrD,IAAIuS,YAAY,EAAE;QAChB3J,SAAS,CAAC5H,IAAI,CAACuR,YAAY,CAAC;MAC9B;IACF;IAEA,OAAO3J,SAAS;EAClB,CAAC;;EAED;EACA,MAAM4J,6BAA6B,GAAInS,IAAI,IAAK;IAC9C;IACA,MAAM4R,aAAa,GAAG,wBAAwB;;IAE9C;IACA,MAAMQ,QAAQ,GAAG,EAAE;IACnB,IAAIP,SAAS,GAAG,CAAC;IACjB,IAAIC,KAAK;IAET,OAAO,CAACA,KAAK,GAAGF,aAAa,CAACG,IAAI,CAAC/R,IAAI,CAAC,MAAM,IAAI,EAAE;MAClD,MAAMgS,QAAQ,GAAGF,KAAK,CAACvP,KAAK,GAAGuP,KAAK,CAAC,CAAC,CAAC,CAACxS,MAAM;MAC9C,MAAM+S,OAAO,GAAGrS,IAAI,CAACD,SAAS,CAAC8R,SAAS,EAAEG,QAAQ,CAAC,CAACrS,IAAI,CAAC,CAAC;;MAE1D;MACA,IAAI0S,OAAO,EAAE;QACXD,QAAQ,CAACzR,IAAI,CAAC0R,OAAO,CAAC;MACxB;MAEAR,SAAS,GAAGG,QAAQ;IACtB;;IAEA;IACA,IAAIH,SAAS,GAAG7R,IAAI,CAACV,MAAM,EAAE;MAC3B,MAAMgT,WAAW,GAAGtS,IAAI,CAACD,SAAS,CAAC8R,SAAS,CAAC,CAAClS,IAAI,CAAC,CAAC;MACpD,IAAI2S,WAAW,EAAE;QACfF,QAAQ,CAACzR,IAAI,CAAC2R,WAAW,CAAC;MAC5B;IACF;IAEA,OAAOF,QAAQ;EACjB,CAAC;;EAED;EACA,MAAMjB,qBAAqB,GAAI5I,SAAS,IAAK;IAC3C,IAAIoC,IAAI,GAAG,2BAA2B;IAEtCpC,SAAS,CAACnG,OAAO,CAAC6P,QAAQ,IAAI;MAC5B,IAAIA,QAAQ,CAACtS,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAC5BgL,IAAI,IAAI,4BAA4BsH,QAAQ,MAAM;IACpD,CAAC,CAAC;IAEFtH,IAAI,IAAI,QAAQ;IAChB,OAAOA,IAAI;EACb,CAAC;;EAED;EACA,MAAM4H,+BAA+B,GAAIhK,SAAS,IAAK;IACrD,IAAIoC,IAAI,GAAG,wCAAwC;IAEnDpC,SAAS,CAACnG,OAAO,CAAC6P,QAAQ,IAAI;MAC5B,IAAIA,QAAQ,CAACtS,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;;MAE5B;MACAgL,IAAI,IAAI,0CAA0CsH,QAAQ,MAAM;IAClE,CAAC,CAAC;IAEFtH,IAAI,IAAI,QAAQ;IAChB,OAAOA,IAAI;EACb,CAAC;;EAED;EACA,MAAM0G,6BAA6B,GAAI9I,SAAS,IAAK;IACnD,IAAIoC,IAAI,GAAG,gDAAgD;IAE3DpC,SAAS,CAACnG,OAAO,CAAC,CAAC6P,QAAQ,EAAE1P,KAAK,KAAK;MACrC,IAAI0P,QAAQ,CAACtS,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;;MAE5B;MACAgL,IAAI,IAAI,uCAAuCpI,KAAK,oBAAoB0P,QAAQ,CAAClS,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,gCAAgCkS,QAAQ,QAAQ;IACnJ,CAAC,CAAC;IAEFtH,IAAI,IAAI,QAAQ;IAChB,OAAOA,IAAI;EACb,CAAC;;EAED;EACA,MAAM2G,mCAAmC,GAAI/I,SAAS,IAAK;IACzD,IAAIoC,IAAI,GAAG,2BAA2B;IAEtCpC,SAAS,CAACnG,OAAO,CAAC6P,QAAQ,IAAI;MAC5B,IAAIA,QAAQ,CAACtS,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;;MAE5B;MACA,MAAMkL,KAAK,GAAGoH,QAAQ,CAACvH,KAAK,CAAC,OAAO,CAAC;MACrC,IAAI8H,iBAAiB,GAAG,EAAE;MAE1B3H,KAAK,CAACzI,OAAO,CAAC2I,IAAI,IAAI;QACpB,IAAIA,IAAI,CAACpL,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;UACtB6S,iBAAiB,IAAIzH,IAAI;QAC3B,CAAC,MAAM;UACL;UACA,MAAMO,WAAW,GAAG,CAAC,gBAAgB,EAAE,eAAe,EAAE,kBAAkB,CAAC;UAC3E,MAAMC,WAAW,GAAGD,WAAW,CAACJ,IAAI,CAACM,KAAK,CAACN,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGG,WAAW,CAAChM,MAAM,CAAC,CAAC;UAE/EkT,iBAAiB,IAAI,gBAAgBjH,WAAW,KAAKR,IAAI,SAAS;QACpE;MACF,CAAC,CAAC;MAEFJ,IAAI,IAAI,4BAA4B6H,iBAAiB,MAAM;IAC7D,CAAC,CAAC;IAEF7H,IAAI,IAAI,QAAQ;IAChB,OAAOA,IAAI;EACb,CAAC;;EAED;EACA,MAAM4G,sCAAsC,GAAIhJ,SAAS,IAAK;IAC5D;IACA5M,MAAM,CAAC6M,qBAAqB,GAAGD,SAAS;;IAExC;IACA,OAAO;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuDA,SAAS,CAACjJ,MAAM;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;EACX,CAAC;;EAED;EACA,MAAMmT,aAAa,GAAG,MAAO7L,IAAI,IAAK;IACpC,IAAI;MACF,MAAM5G,IAAI,GAAG,MAAM4G,IAAI,CAAC5G,IAAI,CAAC,CAAC;;MAE9B;MACA,IAAIkR,gBAAgB,GAAG,EAAE;MAEzB,IAAIhK,WAAW,KAAK,eAAe,EAAE;QACnC;QACA,MAAMkL,QAAQ,GAAGD,6BAA6B,CAACnS,IAAI,CAAC;QACpDkR,gBAAgB,GAAGK,sCAAsC,CAACa,QAAQ,CAAC;;QAEnE;QACAtU,UAAU,CAAC,MAAM;UACfwK,sBAAsB,CAAC,CAAC;QAC1B,CAAC,EAAE,GAAG,CAAC;MACT,CAAC,MAAM;QACL;QACA,MAAMC,SAAS,GAAG0I,kBAAkB,CAACjR,IAAI,CAAC;QAE1C,QAAOkH,WAAW;UAChB,KAAK,QAAQ;YACXgK,gBAAgB,GAAGC,qBAAqB,CAAC5I,SAAS,CAAC;YACnD;UACF,KAAK,QAAQ;YACX2I,gBAAgB,GAAGqB,+BAA+B,CAAChK,SAAS,CAAC;YAC7D;UACF,KAAK,cAAc;YACjB2I,gBAAgB,GAAGG,6BAA6B,CAAC9I,SAAS,CAAC;YAC3D;UACF,KAAK,gBAAgB;YACnB2I,gBAAgB,GAAGI,mCAAmC,CAAC/I,SAAS,CAAC;YACjE;UACF;YACE2I,gBAAgB,GAAGC,qBAAqB,CAAC5I,SAAS,CAAC;QACvD;MACF;;MAEA;MACAb,UAAU,CAACwJ,gBAAgB,CAAC;MAC5B1K,WAAW,CAACI,IAAI,CAAC8L,IAAI,CAAC;;MAEtB;MACApM,aAAa,CAAC,CAAC,CAAC;MAChBD,cAAc,CAAC,CAAC,CAAC;IACnB,CAAC,CAAC,OAAO9H,KAAK,EAAE;MACd3B,OAAO,CAAC2B,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;MAChCmJ,UAAU,CAAC,4CAA4C,CAAC;IAC1D;EACF,CAAC;;EAED;EACA,MAAMiL,kBAAkB,GAAG,MAAO/L,IAAI,IAAK;IACzC,IAAI;MACF,MAAM5G,IAAI,GAAG,MAAM4G,IAAI,CAAC5G,IAAI,CAAC,CAAC;;MAE9B;MACA,IAAI2K,IAAI,GAAG,EAAE;MACb,IAAI;QACF,IAAIhP,MAAM,CAACP,MAAM,EAAE;UACjBuP,IAAI,GAAGhP,MAAM,CAACP,MAAM,CAACwX,KAAK,CAAC5S,IAAI,CAAC;QAClC,CAAC,MAAM;UACL;UACA2K,IAAI,GAAG,QAAQ3K,IAAI,CAAC0K,KAAK,CAAC,MAAM,CAAC,CAAC1F,GAAG,CAAC6N,CAAC,IAAI,MAAMA,CAAC,MAAM,CAAC,CAAC5N,IAAI,CAAC,EAAE,CAAC,QAAQ;QAC5E;MACF,CAAC,CAAC,OAAO6N,UAAU,EAAE;QACnBlW,OAAO,CAAC2B,KAAK,CAAC,eAAe,EAAEuU,UAAU,CAAC;QAC1CnI,IAAI,GAAG,QAAQ3K,IAAI,QAAQ;MAC7B;;MAEA;MACA,MAAM+S,OAAO,GAAG3V,QAAQ,CAACI,aAAa,CAAC,KAAK,CAAC;MAC7CuV,OAAO,CAACpV,SAAS,GAAGgN,IAAI;MACxB,MAAMqI,SAAS,GAAGD,OAAO,CAACrT,WAAW,IAAIqT,OAAO,CAACE,SAAS,IAAI,EAAE;;MAEhE;MACA,MAAM1K,SAAS,GAAG0I,kBAAkB,CAAC+B,SAAS,CAAC;;MAE/C;MACA,IAAI9B,gBAAgB,GAAG,EAAE;MACzB,QAAOhK,WAAW;QAChB,KAAK,QAAQ;UACXgK,gBAAgB,GAAGC,qBAAqB,CAAC5I,SAAS,CAAC;UACnD;QACF,KAAK,QAAQ;UACX2I,gBAAgB,GAAGqB,+BAA+B,CAAChK,SAAS,CAAC;UAC7D;QACF,KAAK,cAAc;UACjB2I,gBAAgB,GAAGG,6BAA6B,CAAC9I,SAAS,CAAC;UAC3D;QACF,KAAK,gBAAgB;UACnB2I,gBAAgB,GAAGI,mCAAmC,CAAC/I,SAAS,CAAC;UACjE;QACF,KAAK,eAAe;UAClB;UACA,MAAM6J,QAAQ,GAAGD,6BAA6B,CAACa,SAAS,CAAC;UACzD9B,gBAAgB,GAAGK,sCAAsC,CAACa,QAAQ,CAAC;;UAEnE;UACAtU,UAAU,CAAC,MAAM;YACfwK,sBAAsB,CAAC,CAAC;UAC1B,CAAC,EAAE,GAAG,CAAC;UACP;QACF;UACE4I,gBAAgB,GAAGC,qBAAqB,CAAC5I,SAAS,CAAC;MACvD;;MAEA;MACAb,UAAU,CAACwJ,gBAAgB,CAAC;MAC5B1K,WAAW,CAACI,IAAI,CAAC8L,IAAI,CAAC;;MAEtB;MACApM,aAAa,CAAC,CAAC,CAAC;MAChBD,cAAc,CAAC,CAAC,CAAC;IACnB,CAAC,CAAC,OAAO9H,KAAK,EAAE;MACd3B,OAAO,CAAC2B,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrCmJ,UAAU,CAAC,iDAAiD,CAAC;IAC/D;EACF,CAAC;;EAED;EACA,MAAMwL,gBAAgB,GAAG,MAAOvQ,CAAC,IAAK;IACpC,MAAMwQ,YAAY,GAAGxQ,CAAC,CAACwH,MAAM,CAACiJ,KAAK,CAAC,CAAC,CAAC;IACtC,IAAI,CAACD,YAAY,EAAE;IAEnBzM,UAAU,CAAC,IAAI,CAAC;IAChBF,WAAW,CAAC2M,YAAY,CAACT,IAAI,CAAC;IAE9B,IAAI;MACF,IAAIS,YAAY,CAACjW,IAAI,KAAK,iBAAiB,EAAE;QAC3C,MAAM8P,aAAa,CAACmG,YAAY,CAAC;MACnC,CAAC,MAAM,IAAIA,YAAY,CAACjW,IAAI,KAAK,YAAY,IAAIiW,YAAY,CAACT,IAAI,CAACW,QAAQ,CAAC,MAAM,CAAC,EAAE;QACnF,MAAMZ,aAAa,CAACU,YAAY,CAAC;MACnC,CAAC,MAAM,IAAIA,YAAY,CAACjW,IAAI,KAAK,eAAe,IAAIiW,YAAY,CAACT,IAAI,CAACW,QAAQ,CAAC,KAAK,CAAC,EAAE;QACrF,MAAMV,kBAAkB,CAACQ,YAAY,CAAC;MAC1C,CAAC,MAAM;QACHzL,UAAU,CAAC,2CAA2C,CAAC;MACzD;IACF,CAAC,CAAC,OAAOnJ,KAAK,EAAE;MACd3B,OAAO,CAAC2B,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;MAChCmJ,UAAU,CAAC,0CAA0C,CAAC;IACxD,CAAC,SAAS;MACRhB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAM4M,wBAAwB,GAAI9P,SAAS,IAAK;IAC9C,MAAMnC,MAAM,GAAGjE,QAAQ,CAAC2D,gBAAgB,CAACyC,SAAS,EAAExC,UAAU,CAACC,SAAS,CAAC;IACzE,MAAMsS,SAAS,GAAG,EAAE;IAEpB,OAAOlS,MAAM,CAACY,QAAQ,CAAC,CAAC,EAAE;MACxB,MAAMd,IAAI,GAAGE,MAAM,CAACa,WAAW;MAC/B,MAAMlC,IAAI,GAAGmB,IAAI,CAACzB,WAAW;;MAE7B;MACA,IAAI,CAACM,IAAI,CAACL,IAAI,CAAC,CAAC,EAAE;;MAElB;MACA,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,CAACV,MAAM,EAAEa,CAAC,EAAE,EAAE;QACpC,IAAI;UACF,MAAMiQ,KAAK,GAAGhT,QAAQ,CAACiT,WAAW,CAAC,CAAC;UACpCD,KAAK,CAACoD,QAAQ,CAACrS,IAAI,EAAEhB,CAAC,CAAC;UACvBiQ,KAAK,CAACqD,MAAM,CAACtS,IAAI,EAAEhB,CAAC,GAAG,CAAC,CAAC;UAEzB,MAAM2C,IAAI,GAAGsN,KAAK,CAACrN,qBAAqB,CAAC,CAAC;UAC1C,IAAID,IAAI,CAACkB,KAAK,KAAK,CAAC,IAAIlB,IAAI,CAAC8G,MAAM,KAAK,CAAC,EAAE;;UAE3C;UACA2J,SAAS,CAAC5S,IAAI,CAAC;YACb6O,CAAC,EAAE1M,IAAI,CAACG,IAAI,GAAGH,IAAI,CAACkB,KAAK,GAAC,CAAC;YAAG;YAC9ByL,CAAC,EAAE3M,IAAI,CAAC6J,MAAM;YAAgB;YAC9BvM,IAAI,EAAEJ,IAAI,CAACG,CAAC;UACd,CAAC,CAAC;QACJ,CAAC,CAAC,OAAO5B,KAAK,EAAE;UACd3B,OAAO,CAAC8W,IAAI,CAAC,YAAY,EAAEnV,KAAK,CAAC;UACjC;QACF;MACF;IACF;;IAEA;IACA,OAAOgV,SAAS,CACbrS,MAAM,CAAC2R,CAAC,IAAIA,CAAC,CAACzS,IAAI,CAACT,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC,CACjCgU,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MACd;MACA,MAAMC,KAAK,GAAGF,CAAC,CAACnE,CAAC,GAAGoE,CAAC,CAACpE,CAAC;MACvB,IAAIvE,IAAI,CAACwB,GAAG,CAACoH,KAAK,CAAC,GAAG,CAAC,EAAE;QAAE;QACzB,OAAOA,KAAK;MACd;MACA,OAAOF,CAAC,CAACpE,CAAC,GAAGqE,CAAC,CAACrE,CAAC;IAClB,CAAC,CAAC;EACN,CAAC;;EAED;EACA,MAAMuE,qBAAqB,GAAGA,CAACC,QAAQ,EAAExQ,SAAS,KAAK;IACrD;IACA,MAAMyQ,qBAAqB,GAAGzQ,SAAS,CAAC0Q,YAAY,GAAG1Q,SAAS,CAAC2Q,YAAY,IAC3E,CAAC,MAAM,EAAE,QAAQ,EAAE,SAAS,CAAC,CAACpS,QAAQ,CAACpG,MAAM,CAAC+F,gBAAgB,CAAC8B,SAAS,CAAC,CAAC4Q,SAAS,CAAC;;IAEtF;IACA,IAAIC,eAAe;IAEnB,IAAIJ,qBAAqB,EAAE;MACzB;MACA,MAAMK,sBAAsB,GAAG9Q,SAAS,CAAC2Q,YAAY;MACrDE,eAAe,GAAGL,QAAQ,GAAIM,sBAAsB,GAAG,CAAE;;MAEzD;MACA9Q,SAAS,CAACH,QAAQ,CAAC;QACjBL,GAAG,EAAEkI,IAAI,CAACrH,GAAG,CAAC,CAAC,EAAEwQ,eAAe,CAAC;QAAE;QACnC9Q,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ,CAAC,MAAM;MACL;MACA,MAAMgR,gBAAgB,GAAGP,QAAQ,GAAGxQ,SAAS,CAACT,qBAAqB,CAAC,CAAC,CAACC,GAAG;MACzEqR,eAAe,GAAGE,gBAAgB,GAAI5Y,MAAM,CAACwH,WAAW,GAAG,CAAE;;MAE7D;MACAxH,MAAM,CAAC0H,QAAQ,CAAC;QACdL,GAAG,EAAEkI,IAAI,CAACrH,GAAG,CAAC,CAAC,EAAEwQ,eAAe,CAAC;QAAE;QACnC9Q,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ;IAEA,OAAO8Q,eAAe;EACxB,CAAC;;EAED;EACA,MAAMG,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,MAAMC,MAAM,GAAGrX,QAAQ,CAACI,aAAa,CAAC,KAAK,CAAC;IAC5CiX,MAAM,CAAChX,EAAE,GAAG,oBAAoB;IAChCgX,MAAM,CAACzW,KAAK,CAAC0C,OAAO,GAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;IAED;IACA,IAAI,CAACtD,QAAQ,CAACC,cAAc,CAAC,yBAAyB,CAAC,EAAE;MACvD,MAAMW,KAAK,GAAGZ,QAAQ,CAACI,aAAa,CAAC,OAAO,CAAC;MAC7CQ,KAAK,CAACP,EAAE,GAAG,yBAAyB;MACpCO,KAAK,CAAC0B,WAAW,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA,OAAO;MACDtC,QAAQ,CAAC6K,IAAI,CAACpK,WAAW,CAACG,KAAK,CAAC;IAClC;IAEA,OAAOyW,MAAM;EACf,CAAC;;EAED;EACA,MAAMC,aAAa,GAAGA,CAACC,YAAY,EAAEpB,SAAS,EAAEhR,KAAK,KAAK;IACxD;IACA,MAAMqS,gBAAgB,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;;IAEjE;IACA,IAAIA,gBAAgB,CAAC7S,QAAQ,CAAC4S,YAAY,CAACvU,IAAI,CAAC,EAAE;MAChD;MACA,MAAMyU,SAAS,GAAGtS,KAAK,GAAG,CAAC;MAC3B,IAAIsS,SAAS,IAAItB,SAAS,CAACjU,MAAM;MAAI;MACjCiU,SAAS,CAACsB,SAAS,CAAC,CAACzU,IAAI,CAACT,IAAI,CAAC,CAAC,KAAK,EAAE;MAAI;MAC3C4T,SAAS,CAACsB,SAAS,CAAC,CAACpF,CAAC,GAAGkF,YAAY,CAAClF,CAAC,GAAG,CAAC,EAAE;QAAE;QACjD,OAAO,IAAI;MACb;IACF;IAEA,OAAO,KAAK;EACd,CAAC;;EAED;EACA,MAAMqF,iBAAiB,GAAGA,CAACvB,SAAS,EAAEnX,YAAY,KAAK;IACrD,IAAIiC,KAAK,GAAGjC,YAAY;;IAExB;IACA,OAAOiC,KAAK,GAAG,CAAC,EAAE;MAChB,MAAM0W,IAAI,GAAGxB,SAAS,CAAClV,KAAK,GAAG,CAAC,CAAC;MACjC,MAAM2W,OAAO,GAAGzB,SAAS,CAAClV,KAAK,CAAC;;MAEhC;MACA,IAAIqW,aAAa,CAACK,IAAI,EAAExB,SAAS,EAAElV,KAAK,GAAG,CAAC,CAAC,IACzC2W,OAAO,CAACvF,CAAC,GAAGsF,IAAI,CAACtF,CAAC,GAAG,CAAC,EAAE;QAAE;QAC5B;MACF;MAEApR,KAAK,EAAE;IACT;IAEA,OAAOA,KAAK;EACd,CAAC;;EAED;EACA,MAAM4W,eAAe,GAAGA,CAACjB,QAAQ,EAAExQ,SAAS,EAAE0R,SAAS,GAAG,GAAG,KAAK;IAChE;IACA,MAAMjB,qBAAqB,GAAGzQ,SAAS,CAAC0Q,YAAY,GAAG1Q,SAAS,CAAC2Q,YAAY,IAC3E,CAAC,MAAM,EAAE,QAAQ,EAAE,SAAS,CAAC,CAACpS,QAAQ,CAACpG,MAAM,CAAC+F,gBAAgB,CAAC8B,SAAS,CAAC,CAAC4Q,SAAS,CAAC;IAEtF,IAAIH,qBAAqB,EAAE;MACzB;MACA,MAAMkB,UAAU,GAAG3R,SAAS,CAAC4R,SAAS;MACtC,MAAMC,aAAa,GAAGF,UAAU,GAAG3R,SAAS,CAAC2Q,YAAY;;MAEzD;MACA,MAAMmB,YAAY,GAAGH,UAAU,GAAG3R,SAAS,CAAC2Q,YAAY,GAAGe,SAAS;MACpE,MAAMK,eAAe,GAAGF,aAAa,GAAG7R,SAAS,CAAC2Q,YAAY,GAAGe,SAAS;MAE1E,OAAOlB,QAAQ,IAAIsB,YAAY,IAAItB,QAAQ,IAAIuB,eAAe;IAChE,CAAC,MAAM;MACL;MACA,MAAMhB,gBAAgB,GAAGP,QAAQ,GAAGxQ,SAAS,CAACT,qBAAqB,CAAC,CAAC,CAACC,GAAG;MACzE,MAAMmS,UAAU,GAAGxZ,MAAM,CAAC2H,OAAO;MACjC,MAAM+R,aAAa,GAAGF,UAAU,GAAGxZ,MAAM,CAACwH,WAAW;;MAErD;MACA,MAAMmS,YAAY,GAAGH,UAAU,GAAGxZ,MAAM,CAACwH,WAAW,GAAG+R,SAAS;MAChE,MAAMK,eAAe,GAAGF,aAAa,GAAG1Z,MAAM,CAACwH,WAAW,GAAG+R,SAAS;MAEtE,OAAOX,gBAAgB,IAAIe,YAAY,IAAIf,gBAAgB,IAAIgB,eAAe;IAChF;EACF,CAAC;;EAED;EACA,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAI7Z,MAAM,CAACM,UAAU,CAACC,aAAa,CAACoD,MAAM,KAAK,CAAC,EAAE;MAChD,IAAI3D,MAAM,CAACC,WAAW,GAAGD,MAAM,CAACE,UAAU,EAAE;QAC1CF,MAAM,CAACG,UAAU,CAAC,CAAC,CAAC;QACpB;MACF;MACA;IACF;;IAEA;IACAH,MAAM,CAACM,UAAU,CAACG,YAAY,GAAG,CAAC;;IAElC;IACA,MAAM8C,gBAAgB,GAAG9B,QAAQ,CAACgM,aAAa,CAAC,eAAe,CAAC;IAChE,IAAI,CAAClK,gBAAgB,EAAE;IAEvB,IAAIvD,MAAM,CAAC+F,gBAAgB,CAACxC,gBAAgB,CAAC,CAACuW,QAAQ,KAAK,QAAQ,EAAE;MACnEvW,gBAAgB,CAAClB,KAAK,CAACyX,QAAQ,GAAG,UAAU;IAC9C;;IAEA;IACA,IAAIhB,MAAM,GAAGrX,QAAQ,CAACC,cAAc,CAAC,oBAAoB,CAAC;IAC1D,IAAI,CAACoX,MAAM,EAAE;MACXA,MAAM,GAAGD,kBAAkB,CAAC,CAAC;MAC7BtV,gBAAgB,CAACrB,WAAW,CAAC4W,MAAM,CAAC;IACtC;;IAEA;IACA,IAAIiB,SAAS,GAAGtY,QAAQ,CAACC,cAAc,CAAC,uBAAuB,CAAC;IAChE,IAAI,CAACqY,SAAS,EAAE;MACdA,SAAS,GAAGtY,QAAQ,CAACI,aAAa,CAAC,KAAK,CAAC;MACzCkY,SAAS,CAACjY,EAAE,GAAG,uBAAuB;MACtCiY,SAAS,CAAC1X,KAAK,CAACyX,QAAQ,GAAG,UAAU;MACrCC,SAAS,CAAC1X,KAAK,CAAC0T,eAAe,GAAG,sBAAsB;MACxDgE,SAAS,CAAC1X,KAAK,CAAC2X,YAAY,GAAG,KAAK;MACpCD,SAAS,CAAC1X,KAAK,CAAC4X,aAAa,GAAG,MAAM;MACtCF,SAAS,CAAC1X,KAAK,CAAC6X,MAAM,GAAG,KAAK;MAC9B3W,gBAAgB,CAACrB,WAAW,CAAC6X,SAAS,CAAC;IACzC;;IAEA;IACA,MAAMzB,qBAAqB,GAAG/U,gBAAgB,CAACgV,YAAY,GAAGhV,gBAAgB,CAACiV,YAAY,IACzF,CAAC,MAAM,EAAE,QAAQ,EAAE,SAAS,CAAC,CAACpS,QAAQ,CAACpG,MAAM,CAAC+F,gBAAgB,CAACxC,gBAAgB,CAAC,CAACkV,SAAS,CAAC;;IAE7F;IACA,IAAI0B,UAAU,GAAG,EAAE;;IAEnB;IACA,IAAIna,MAAM,CAACM,UAAU,CAACC,aAAa,CAACoD,MAAM,GAAG,CAAC,EAAE;MAC9C,KAAK,IAAIa,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxE,MAAM,CAACM,UAAU,CAACC,aAAa,CAACoD,MAAM,EAAEa,CAAC,EAAE,EAAE;QAC/D,MAAM2T,KAAK,GAAG5I,IAAI,CAACwB,GAAG,CAAC/Q,MAAM,CAACM,UAAU,CAACC,aAAa,CAACiE,CAAC,CAAC,CAACsP,CAAC,GAAG9T,MAAM,CAACM,UAAU,CAACC,aAAa,CAACiE,CAAC,GAAC,CAAC,CAAC,CAACsP,CAAC,CAAC;QACrG,IAAIqE,KAAK,GAAG,CAAC,EAAE;UACbgC,UAAU,GAAGhC,KAAK;UAClB;QACF;MACF;IACF;;IAEA;IACA,IAAIiC,aAAa,GAAG,CAAC,CAAC;IACtB,MAAMC,cAAc,GAAGF,UAAU,GAAG,GAAG;;IAEvC;IACA,IAAIG,SAAS,GAAG,EAAE;IAClB,IAAIC,UAAU,GAAGJ,UAAU,GAAG,GAAG;;IAEjC;IACA,IAAIna,MAAM,CAACM,UAAU,CAACC,aAAa,CAACoD,MAAM,GAAG,CAAC,EAAE;MAC9C,KAAK,IAAIa,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxE,MAAM,CAACM,UAAU,CAACC,aAAa,CAACoD,MAAM,EAAEa,CAAC,EAAE,EAAE;QAC/D,IAAIxE,MAAM,CAACM,UAAU,CAACC,aAAa,CAACiE,CAAC,CAAC,CAACqP,CAAC,KAAK7T,MAAM,CAACM,UAAU,CAACC,aAAa,CAACiE,CAAC,GAAC,CAAC,CAAC,CAACqP,CAAC,EAAE;UACnF,MAAM2G,KAAK,GAAGjL,IAAI,CAACwB,GAAG,CAAC/Q,MAAM,CAACM,UAAU,CAACC,aAAa,CAACiE,CAAC,CAAC,CAACqP,CAAC,GAAG7T,MAAM,CAACM,UAAU,CAACC,aAAa,CAACiE,CAAC,GAAC,CAAC,CAAC,CAACqP,CAAC,CAAC;UACrG,IAAI2G,KAAK,GAAG,CAAC,IAAIA,KAAK,GAAG,EAAE,EAAE;YAC3BF,SAAS,GAAGE,KAAK;YACjB;UACF;QACF;MACF;IACF;IAEAxa,MAAM,CAACM,UAAU,CAACE,UAAU,GAAGyC,WAAW,CAAC,MAAM;MAC/C;MACA,OAAOjD,MAAM,CAACM,UAAU,CAACG,YAAY,GAAGT,MAAM,CAACM,UAAU,CAACC,aAAa,CAACoD,MAAM,IACvE,EAAA8W,qBAAA,GAAAza,MAAM,CAACM,UAAU,CAACC,aAAa,CAACP,MAAM,CAACM,UAAU,CAACG,YAAY,CAAC,cAAAga,qBAAA,uBAA/DA,qBAAA,CAAiEhW,IAAI,CAACT,IAAI,CAAC,CAAC,MAAK,EAAE,EAAE;QAAA,IAAAyW,qBAAA;QAC1Fza,MAAM,CAACM,UAAU,CAACG,YAAY,EAAE;MAClC;;MAEA;MACA,IAAIT,MAAM,CAACM,UAAU,CAACG,YAAY,IAAIT,MAAM,CAACM,UAAU,CAACC,aAAa,CAACoD,MAAM,EAAE;QAC5E,IAAI3D,MAAM,CAACC,WAAW,GAAGD,MAAM,CAACE,UAAU,EAAE;UAC1CF,MAAM,CAACG,UAAU,CAAC,CAAC,CAAC;UACpBgD,aAAa,CAACnD,MAAM,CAACM,UAAU,CAACE,UAAU,CAAC;QAC7C,CAAC,MAAM;UACLka,cAAc,CAAC,CAAC;QAClB;QACA;MACF;MAEA,MAAMC,GAAG,GAAG3a,MAAM,CAACM,UAAU,CAACC,aAAa,CAACP,MAAM,CAACM,UAAU,CAACG,YAAY,CAAC;MAC3EqY,MAAM,GAAGrX,QAAQ,CAACC,cAAc,CAAC,oBAAoB,CAAC;MACtDqY,SAAS,GAAGtY,QAAQ,CAACC,cAAc,CAAC,uBAAuB,CAAC;MAE5D,IAAIoX,MAAM,IAAIiB,SAAS,EAAE;QACvB,MAAMa,WAAW,GAAGrX,gBAAgB,CAAC6D,qBAAqB,CAAC,CAAC;QAE5D,MAAMyT,SAAS,GAAGF,GAAG,CAAC9G,CAAC,GAAG+G,WAAW,CAACtT,IAAI;QAC1C,MAAMwT,SAAS,GAAGH,GAAG,CAAC7G,CAAC,GAAG8G,WAAW,CAACvT,GAAG,GAAG9D,gBAAgB,CAACkW,SAAS;QAEtEX,MAAM,CAACzW,KAAK,CAACiF,IAAI,GAAG,GAAGuT,SAAS,IAAI;QACpC/B,MAAM,CAACzW,KAAK,CAACgF,GAAG,GAAG,GAAGyT,SAAS,GAAGvX,gBAAgB,CAACkW,SAAS,IAAI;QAEhEM,SAAS,CAAC1X,KAAK,CAACiF,IAAI,GAAG,GAAGuT,SAAS,GAAGP,SAAS,GAAC,CAAC,IAAI;QACrDP,SAAS,CAAC1X,KAAK,CAACgF,GAAG,GAAG,GAAGyT,SAAS,GAAGvX,gBAAgB,CAACkW,SAAS,GAAGc,UAAU,IAAI;QAChFR,SAAS,CAAC1X,KAAK,CAACgG,KAAK,GAAG,GAAGiS,SAAS,IAAI;QACxCP,SAAS,CAAC1X,KAAK,CAAC4L,MAAM,GAAG,GAAGsM,UAAU,IAAI;;QAE1C;QACA,MAAMQ,wBAAwB,GAAGxL,IAAI,CAACwB,GAAG,CAAC+J,SAAS,GAAGV,aAAa,CAAC,GAAGC,cAAc;QAErF,IAAI,CAACU,wBAAwB,EAAE;UAC7B,IAAIC,WAAW,GAAG,KAAK;UACvB,IAAIC,YAAY,GAAG,CAAC;UAEpB,IAAI3C,qBAAqB,EAAE;YACzB,MAAMkB,UAAU,GAAGjW,gBAAgB,CAACkW,SAAS;YAC7C,MAAMC,aAAa,GAAGF,UAAU,GAAGjW,gBAAgB,CAACiV,YAAY;YAEhE,IAAIsC,SAAS,GAAGpB,aAAa,GAAGS,UAAU,EAAE;cAC1Ca,WAAW,GAAG,IAAI;cAClBC,YAAY,GAAGd,UAAU,GAAG,CAAC;YAC/B,CAAC,MAAM,IAAIW,SAAS,GAAGtB,UAAU,GAAGW,UAAU,EAAE;cAC9Ca,WAAW,GAAG,IAAI;cAClBC,YAAY,GAAG,CAACd,UAAU,GAAG,CAAC;YAChC;YAEA,IAAIa,WAAW,EAAE;cACfzX,gBAAgB,CAAC2X,QAAQ,CAAC;gBACxB7T,GAAG,EAAE4T,YAAY;gBACjBrT,QAAQ,EAAE;cACZ,CAAC,CAAC;cACFwS,aAAa,GAAGU,SAAS;YAC3B;UACF,CAAC,MAAM;YACL,MAAMK,SAAS,GAAGR,GAAG,CAAC7G,CAAC;YACvB,MAAM0F,UAAU,GAAGxZ,MAAM,CAAC2H,OAAO;YACjC,MAAM+R,aAAa,GAAGF,UAAU,GAAGxZ,MAAM,CAACwH,WAAW;YAErD,IAAI2T,SAAS,GAAGzB,aAAa,GAAGS,UAAU,EAAE;cAC1Ca,WAAW,GAAG,IAAI;cAClBC,YAAY,GAAGd,UAAU,GAAG,CAAC;YAC/B,CAAC,MAAM,IAAIgB,SAAS,GAAG3B,UAAU,GAAGW,UAAU,EAAE;cAC9Ca,WAAW,GAAG,IAAI;cAClBC,YAAY,GAAG,CAACd,UAAU,GAAG,CAAC;YAChC;YAEA,IAAIa,WAAW,EAAE;cACfhb,MAAM,CAACkb,QAAQ,CAAC;gBACd7T,GAAG,EAAE4T,YAAY;gBACjBrT,QAAQ,EAAE;cACZ,CAAC,CAAC;cACFwS,aAAa,GAAGe,SAAS;YAC3B;UACF;QACF;MACF;MAEAnb,MAAM,CAACM,UAAU,CAACG,YAAY,EAAE;IAElC,CAAC,EAAET,MAAM,CAACM,UAAU,CAACI,KAAK,CAAC;;IAE3B;IACAV,MAAM,CAACM,UAAU,CAACQ,OAAO,GAAG,MAAM;MAChC;MACA,MAAMiZ,SAAS,GAAGtY,QAAQ,CAACC,cAAc,CAAC,uBAAuB,CAAC;MAClE,IAAIqY,SAAS,EAAE;QACbA,SAAS,CAACpY,MAAM,CAAC,CAAC;MACpB;;MAEA;MACA,MAAMmX,MAAM,GAAGrX,QAAQ,CAACC,cAAc,CAAC,oBAAoB,CAAC;MAC5D,IAAIoX,MAAM,EAAE;QACVA,MAAM,CAACnX,MAAM,CAAC,CAAC;MACjB;IACF,CAAC;EACH,CAAC;;EAED;EACA,MAAM+Y,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAI1a,MAAM,CAACM,UAAU,CAACE,UAAU,EAAE;MAChC2C,aAAa,CAACnD,MAAM,CAACM,UAAU,CAACE,UAAU,CAAC;MAC3CR,MAAM,CAACM,UAAU,CAACE,UAAU,GAAG,IAAI;;MAEnC;MACA,IAAIR,MAAM,CAACM,UAAU,CAACQ,OAAO,EAAE;QAC7Bd,MAAM,CAACM,UAAU,CAACQ,OAAO,CAAC,CAAC;MAC7B;IACF;EACF,CAAC;;EAED;EACA,MAAMsa,oBAAoB,GAAGA,CAAA,KAAM;IACjC;IACAV,cAAc,CAAC,CAAC;;IAEhB;IACA1a,MAAM,CAACM,UAAU,CAACO,cAAc,GAAG,KAAK;;IAExC;IACA,MAAMiL,OAAO,GAAGrK,QAAQ,CAACgM,aAAa,CAAC,eAAe,CAAC;IACvD,IAAI,CAAC3B,OAAO,EAAE;;IAEd;IACA,IAAIA,OAAO,CAACpE,QAAQ,EAAE;MACpBoE,OAAO,CAACpE,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;IACxB;;IAEA;IACA,IAAI1H,MAAM,CAAC+F,gBAAgB,CAAC+F,OAAO,CAAC,CAACgO,QAAQ,KAAK,QAAQ,EAAE;MAC1DhO,OAAO,CAACzJ,KAAK,CAACyX,QAAQ,GAAG,UAAU;IACrC;;IAEA;IACA9Z,MAAM,CAACM,UAAU,CAACC,aAAa,GAAGoX,wBAAwB,CAAC7L,OAAO,CAAC;;IAEnE;IACA,IAAI9L,MAAM,CAACM,UAAU,CAACC,aAAa,CAACoD,MAAM,KAAK,CAAC,EAAE;MAChD,IAAI1D,WAAW,GAAGC,UAAU,IAAI,CAACF,MAAM,CAACM,UAAU,CAACO,cAAc,EAAE;QACjEb,MAAM,CAACM,UAAU,CAACO,cAAc,GAAG,IAAI;QACvCV,UAAU,CAAC,CAAC,CAAC;QACb;MACF;MACA;IACF;;IAEA;IACA0Z,eAAe,CAAC,CAAC;EACnB,CAAC;;EAED;EACA,MAAMwB,uBAAuB,GAAG,MAAOrU,CAAC,IAAK;IAC3C,MAAMsU,OAAO,GAAGtU,CAAC,CAACwH,MAAM,CAACpG,KAAK;IAC9B,MAAMmT,QAAQ,GAAGhQ,WAAW;IAE5BtK,OAAO,CAACC,GAAG,CAAC,aAAaqa,QAAQ,MAAMD,OAAO,EAAE,CAAC;;IAEjD;IACA9P,cAAc,CAAC8P,OAAO,CAAC;;IAEvB;IACA,IAAItP,WAAW,IAAI/L,WAAW,GAAG,CAAC,EAAE;MAClC,IAAI;QACFgB,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;QACzB,MAAM8Q,IAAI,GAAG,MAAMhG,WAAW,CAACiG,OAAO,CAAChS,WAAW,CAAC;;QAEnD;QACA,MAAM8D,WAAW,GAAG,MAAMiO,IAAI,CAACE,cAAc,CAAC,CAAC;QAC/C,MAAMO,SAAS,GAAG1O,WAAW,CAAC2O,KAAK;QACnC,IAAI0C,aAAa,GAAG3C,SAAS,CAACpJ,GAAG,CAACuJ,IAAI,IAAIA,IAAI,CAACC,GAAG,CAAC,CAACvJ,IAAI,CAAC,GAAG,CAAC;QAC7D8L,aAAa,GAAGA,aAAa,CAACC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAACrR,IAAI,CAAC,CAAC;;QAEzD;QACA,MAAM4I,SAAS,GAAG0I,kBAAkB,CAACF,aAAa,CAAC;;QAEnD;QACA,IAAIkG,OAAO,KAAK,QAAQ,EAAE;UACxB;UACA,MAAMtM,IAAI,GAAGyG,2BAA2B,CAAC7I,SAAS,CAAC;UACnD3L,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;UACvB6K,UAAU,CAACiD,IAAI,CAAC;;UAEhB;UACA7M,UAAU,CAAC,MAAM;YACf,MAAMgO,WAAW,GAAG1O,QAAQ,CAACgM,aAAa,CAAC,sBAAsB,CAAC;YACtE,IAAI0C,WAAW,EAAE;cACXlP,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;cACzB,MAAM4N,UAAU,GAAGqB,WAAW,CAACzM,gBAAgB,CAAC,gBAAgB,CAAC;cACjEzC,OAAO,CAACC,GAAG,CAAC,MAAM4N,UAAU,CAACnL,MAAM,MAAM,CAAC;;cAE1C;cACA,IAAImL,UAAU,CAACnL,MAAM,GAAG,CAAC,EAAE;gBACzB,MAAMkS,SAAS,GAAG/G,UAAU,CAAC,CAAC,CAAC;gBAC/B,MAAMgH,MAAM,GAAG9V,MAAM,CAAC+F,gBAAgB,CAAC8P,SAAS,CAAC;gBACjD5U,OAAO,CAACC,GAAG,CAAC,UAAU,EAAE;kBACtB2F,KAAK,EAAEiP,MAAM,CAACjP,KAAK;kBACnBkP,eAAe,EAAED,MAAM,CAACC,eAAe;kBACvCC,UAAU,EAAEF,MAAM,CAACE,UAAU;kBAC7BjC,QAAQ,EAAE+B,MAAM,CAAC/B;gBACnB,CAAC,CAAC;;gBAEF;gBACA,IAAI+B,MAAM,CAACjP,KAAK,KAAK,iBAAiB,IAAIiP,MAAM,CAACjP,KAAK,KAAK,SAAS,EAAE;kBACpE5F,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;gBACzB,CAAC,MAAM;kBACLD,OAAO,CAAC8W,IAAI,CAAC,cAAc,EAAEjC,MAAM,CAACjP,KAAK,CAAC;gBAC5C;cACF;YACF,CAAC,MAAM;cACL5F,OAAO,CAAC2B,KAAK,CAAC,eAAe,CAAC;YAChC;UACF,CAAC,EAAE,GAAG,CAAC;QACT,CAAC,MAAM,IAAI0Y,OAAO,KAAK,eAAe,EAAE;UACtC,IAAI;YACF,MAAMtJ,IAAI,GAAG,MAAMhG,WAAW,CAACiG,OAAO,CAAChS,WAAW,CAAC;YACnD,MAAM8D,WAAW,GAAG,MAAMiO,IAAI,CAACE,cAAc,CAAC,CAAC;YAC/C,MAAMO,SAAS,GAAG1O,WAAW,CAAC2O,KAAK;YACnC,IAAI0C,aAAa,GAAG3C,SAAS,CAACpJ,GAAG,CAACuJ,IAAI,IAAIA,IAAI,CAACC,GAAG,CAAC,CAACvJ,IAAI,CAAC,GAAG,CAAC;YAC7D8L,aAAa,GAAGA,aAAa,CAACC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAACrR,IAAI,CAAC,CAAC;;YAEzD;YACA,MAAMyS,QAAQ,GAAGD,6BAA6B,CAACpB,aAAa,CAAC;;YAE7D;YACA,MAAMG,gBAAgB,GAAGK,sCAAsC,CAACa,QAAQ,CAAC;YACzE1K,UAAU,CAACwJ,gBAAgB,CAAC;;YAE5B;YACApT,UAAU,CAAC,MAAM;cACfwK,sBAAsB,CAAC,CAAC;YAC1B,CAAC,EAAE,GAAG,CAAC;UACT,CAAC,CAAC,OAAO/J,KAAK,EAAE;YACd3B,OAAO,CAAC2B,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;UACpC;QACF,CAAC,MAAM;UACL;UACA,MAAMuO,OAAO,GAAGqK,wBAAwB,CAACF,OAAO,CAAC;UACjD,MAAM/F,gBAAgB,GAAGpE,OAAO,CAACvE,SAAS,CAAC;UAC3Cb,UAAU,CAACwJ,gBAAgB,CAAC;QAC9B;MACF,CAAC,CAAC,OAAO3S,KAAK,EAAE;QACd3B,OAAO,CAAC2B,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;MACnC;IACF;EACF,CAAC;;EAED;EACA,MAAM6Y,UAAU,GAAGA,CAAA,KAAM;IACvB;IACAC,0BAA0B,CAAC,CAAC;;IAE5B;IACA,IAAI1b,MAAM,CAACmB,YAAY,EAAE;MACvBnB,MAAM,CAACmB,YAAY,CAACC,IAAI,CAAC,CAAC;IAC5B;;IAEA;IACA,IAAIpB,MAAM,CAAC0N,WAAW,EAAE;MACtB1N,MAAM,CAAC0N,WAAW,CAAC5M,OAAO,CAAC,CAAC;IAC9B;;IAEA;IACA,MAAM6a,qBAAqB,GAAGla,QAAQ,CAACiC,gBAAgB,CAAC,oDAAoD,CAAC;IAC7GiY,qBAAqB,CAAClV,OAAO,CAACsD,EAAE,IAAIA,EAAE,CAACpI,MAAM,CAAC,CAAC,CAAC;;IAEhD;IACA,MAAMia,oBAAoB,GAAGna,QAAQ,CAACiC,gBAAgB,CAAC,2EAA2E,CAAC;IACnIkY,oBAAoB,CAACnV,OAAO,CAACsD,EAAE,IAAIA,EAAE,CAACpI,MAAM,CAAC,CAAC,CAAC;;IAE/C;IACA,MAAMka,UAAU,GAAGpa,QAAQ,CAACiC,gBAAgB,CAC1C,6FACF,CAAC;IACDmY,UAAU,CAACpV,OAAO,CAACsD,EAAE,IAAI;MACvB,IAAIA,EAAE,CAAC3H,UAAU,EAAE2H,EAAE,CAAC3H,UAAU,CAAC8C,WAAW,CAAC6E,EAAE,CAAC;IAClD,CAAC,CAAC;;IAEF;IACA,MAAMoG,WAAW,GAAG1O,QAAQ,CAACgM,aAAa,CAAC,eAAe,CAAC;IAC3D,IAAI0C,WAAW,EAAE;MAAA,IAAA2L,qBAAA;MACf;MACA,MAAMC,gBAAgB,GAAG5L,WAAW,CAAC1C,aAAa,CAAC,oBAAoB,CAAC;;MAExE;MACA,MAAMuO,WAAW,GAAG,EAAAF,qBAAA,GAAA3L,WAAW,CAAC1C,aAAa,CAAC,8BAA8B,CAAC,cAAAqO,qBAAA,uBAAzDA,qBAAA,CAA2D9Z,SAAS,KAAI,EAAE;MAC9F,MAAMia,cAAc,GAAG9L,WAAW,CAAC+L,SAAS,CAAC,KAAK,CAAC;;MAEnD;MACA,MAAMC,mBAAmB,GAAG1a,QAAQ,CAACI,aAAa,CAAC,KAAK,CAAC;MACzDsa,mBAAmB,CAACna,SAAS,GAAGga,WAAW;MAC3CC,cAAc,CAAC/Z,WAAW,CAACia,mBAAmB,CAAC;;MAE/C;MACA,IAAIJ,gBAAgB,IAAI7b,UAAU,GAAG,CAAC,EAAE;QACtC,MAAMkc,mBAAmB,GAAGL,gBAAgB,CAACG,SAAS,CAAC,IAAI,CAAC;QAC5D;QACA,MAAMG,OAAO,GAAGD,mBAAmB,CAAC3O,aAAa,CAAC,uBAAuB,CAAC;QAC1E,MAAM6O,OAAO,GAAGF,mBAAmB,CAAC3O,aAAa,CAAC,sBAAsB,CAAC;QACzE,IAAI4O,OAAO,EAAEA,OAAO,CAACE,OAAO,GAAG,MAAMpc,UAAU,CAAC,CAAC,CAAC,CAAC;QACnD,IAAImc,OAAO,EAAEA,OAAO,CAACC,OAAO,GAAG,MAAMpc,UAAU,CAAC,CAAC,CAAC;QAClD8b,cAAc,CAAC/Z,WAAW,CAACka,mBAAmB,CAAC;MACjD;MAEA,IAAIjM,WAAW,CAAC/N,UAAU,EAAE;QAC1B+N,WAAW,CAAC/N,UAAU,CAACuE,YAAY,CAACsV,cAAc,EAAE9L,WAAW,CAAC;MAClE;IACF;;IAEA;IACA,MAAMrB,UAAU,GAAGrN,QAAQ,CAACiC,gBAAgB,CAAC,gBAAgB,CAAC;IAC9DoL,UAAU,CAACrI,OAAO,CAACtC,SAAS,IAAI;MAC9B;MACAA,SAAS,CAACqY,eAAe,CAAC,aAAa,CAAC;MACxCrY,SAAS,CAACqY,eAAe,CAAC,OAAO,CAAC;;MAElC;MACArY,SAAS,CAACnC,SAAS,GAAGmC,SAAS,CAACnC,SAAS,CACtCqT,OAAO,CAAC,gCAAgC,EAAE,EAAE,CAAC,CAC7CA,OAAO,CAAC,kCAAkC,EAAE,EAAE,CAAC,CAC/CA,OAAO,CAAC,0CAA0C,EAAE,EAAE,CAAC,CACvDA,OAAO,CAAC,2CAA2C,EAAE,EAAE,CAAC,CACxDA,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;IAC7B,CAAC,CAAC;;IAEF;IACA,MAAMoH,gBAAgB,GAAG,CACvB,qBAAqB,EACrB,qBAAqB,CACtB;IAEDA,gBAAgB,CAAChW,OAAO,CAAC3E,EAAE,IAAI;MAC7B,MAAM8B,OAAO,GAAGnC,QAAQ,CAACC,cAAc,CAACI,EAAE,CAAC;MAC3C,IAAI8B,OAAO,IAAIA,OAAO,CAACxB,UAAU,EAAE;QACjCwB,OAAO,CAACxB,UAAU,CAAC8C,WAAW,CAACtB,OAAO,CAAC;MACzC;IACF,CAAC,CAAC;;IAEF;IACAnC,QAAQ,CAACQ,IAAI,CAACoK,SAAS,CAAC1K,MAAM,CAAC,iBAAiB,CAAC;;IAEjD;IACA,IAAI3B,MAAM,CAAC0N,WAAW,IAAI,OAAO1N,MAAM,CAAC0N,WAAW,CAAC5M,OAAO,KAAK,UAAU,EAAE;MAC1Ed,MAAM,CAAC0N,WAAW,CAAC5M,OAAO,CAAC,CAAC;IAC9B;EACF,CAAC;EAED,MAAM4b,gBAAgB,GAAGA,CAAA,KAAM;IAC7B1c,MAAM,CAACM,UAAU,CAACM,WAAW,GAAG,IAAI;IACpC;EACF,CAAC;EAED,MAAM+b,oBAAoB,GAAGA,CAACC,KAAK,GAAG,KAAK,KAAK;IAC9C;EAAA,CACD;;EAED;EACA,MAAMC,eAAe,GAAI7V,CAAC,IAAK;IAC7B,IAAIuE,WAAW,KAAK,cAAc,EAAE;IAEpC,MAAM4E,WAAW,GAAG1O,QAAQ,CAACgM,aAAa,CAAC,eAAe,CAAC;IAC3D,IAAI,CAAC0C,WAAW,EAAE;IAElB,MAAMhJ,IAAI,GAAGgJ,WAAW,CAAC/I,qBAAqB,CAAC,CAAC;IAChD,MAAMyM,CAAC,GAAG7M,CAAC,CAAC8V,OAAO,GAAG3V,IAAI,CAACG,IAAI;IAC/B,MAAMwM,CAAC,GAAG9M,CAAC,CAACuJ,OAAO,GAAGpJ,IAAI,CAACE,GAAG;IAE9B0V,kBAAkB,CAAC,CAAC;IAEpB,MAAMjO,UAAU,GAAGqB,WAAW,CAACzM,gBAAgB,CAAC,GAAG,CAAC;IACpDoL,UAAU,CAACrI,OAAO,CAACtC,SAAS,IAAI;MAC9B,MAAM6Y,aAAa,GAAG7Y,SAAS,CAACiD,qBAAqB,CAAC,CAAC;MACvD,MAAM6V,UAAU,GAAGD,aAAa,CAAC1V,IAAI,GAAGH,IAAI,CAACG,IAAI;MACjD,MAAM4V,UAAU,GAAGF,aAAa,CAAC3V,GAAG,GAAGF,IAAI,CAACE,GAAG;MAE/C,IAAIyM,CAAC,IAAIoJ,UAAU,IAAIpJ,CAAC,IAAIoJ,UAAU,GAAGF,aAAa,CAAC/O,MAAM,EAAE;QAC7D,MAAMiB,KAAK,GAAG/K,SAAS,CAACT,gBAAgB,CAAC,MAAM,CAAC;QAChDwL,KAAK,CAACzI,OAAO,CAAC2I,IAAI,IAAI;UACpB,MAAM+N,QAAQ,GAAG/N,IAAI,CAAChI,qBAAqB,CAAC,CAAC;UAC7C,MAAMgW,KAAK,GAAGD,QAAQ,CAAC7V,IAAI,GAAGH,IAAI,CAACG,IAAI;UAEvC,IAAIuM,CAAC,IAAIuJ,KAAK,IAAIvJ,CAAC,IAAIuJ,KAAK,GAAGD,QAAQ,CAAC9U,KAAK,EAAE;YAC7C+G,IAAI,CAAC/C,SAAS,CAACpF,GAAG,CAAC,WAAW,CAAC;UACjC;QACF,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAM8V,kBAAkB,GAAGA,CAAA,KAAM;IAC/Btb,QAAQ,CAACiC,gBAAgB,CAAC,iBAAiB,CAAC,CAAC+C,OAAO,CAACsD,EAAE,IAAIA,EAAE,CAACpI,MAAM,CAAC,CAAC,CAAC;EACzE,CAAC;;EAED;EACA,MAAM+Z,0BAA0B,GAAGA,CAAA,KAAM;IACvC;IACA,IAAI1b,MAAM,CAACI,YAAY,IAAIJ,MAAM,CAACI,YAAY,CAACC,mBAAmB,EAAE;MAClEL,MAAM,CAACI,YAAY,CAACC,mBAAmB,CAACoG,OAAO,CAAC,CAAC;QAAC7C,OAAO;QAAEsN,KAAK;QAAEC;MAAO,CAAC,KAAK;QAC7E,IAAIvN,OAAO,IAAIA,OAAO,CAACyZ,mBAAmB,EAAE;UAC1CzZ,OAAO,CAACyZ,mBAAmB,CAACnM,KAAK,EAAEC,OAAO,CAAC;QAC7C;MACF,CAAC,CAAC;MACFnR,MAAM,CAACI,YAAY,CAACC,mBAAmB,GAAG,EAAE;IAC9C;;IAEA;IACA,MAAM8P,WAAW,GAAG1O,QAAQ,CAACgM,aAAa,CAAC,eAAe,CAAC;IAC3D,IAAI0C,WAAW,EAAE;MACfA,WAAW,CAACkN,mBAAmB,CAAC,WAAW,EAAER,eAAe,CAAC;MAC7D1M,WAAW,CAACkN,mBAAmB,CAAC,YAAY,EAAEN,kBAAkB,CAAC;IACnE;IAEAtb,QAAQ,CAAC4b,mBAAmB,CAAC,WAAW,EAAER,eAAe,CAAC;;IAE1D;IACAE,kBAAkB,CAAC,CAAC;EACtB,CAAC;;EAED;EACA,MAAMO,mBAAmB,GAAGA,CAAA,KAAM;IAChC,MAAMjb,KAAK,GAAGZ,QAAQ,CAACI,aAAa,CAAC,OAAO,CAAC;IAC7CQ,KAAK,CAAC0B,WAAW,GAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDtC,QAAQ,CAAC6K,IAAI,CAACpK,WAAW,CAACG,KAAK,CAAC;;IAEhC;IACA,MAAMkb,sBAAsB,GAAG9b,QAAQ,CAACI,aAAa,CAAC,OAAO,CAAC;IAC9D0b,sBAAsB,CAACzb,EAAE,GAAG,0BAA0B;IACtDyb,sBAAsB,CAACvb,SAAS,GAAG;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDP,QAAQ,CAAC6K,IAAI,CAACpK,WAAW,CAACqb,sBAAsB,CAAC;EACnD,CAAC;;EAED;EACAje,SAAS,CAAC,MAAM;IACdge,mBAAmB,CAAC,CAAC;IACrB7Q,sBAAsB,CAAC,CAAC;;IAExB;IACA,MAAM+Q,gBAAgB,GAAG/b,QAAQ,CAACI,aAAa,CAAC,OAAO,CAAC;IACxD2b,gBAAgB,CAAC1b,EAAE,GAAG,gCAAgC;IACtD0b,gBAAgB,CAACzZ,WAAW,GAAG;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDtC,QAAQ,CAAC6K,IAAI,CAACpK,WAAW,CAACsb,gBAAgB,CAAC;;IAE3C;IACA,MAAMnb,KAAK,GAAGZ,QAAQ,CAACI,aAAa,CAAC,OAAO,CAAC;IAC7CQ,KAAK,CAACP,EAAE,GAAG,+BAA+B;IAC1CO,KAAK,CAAC0B,WAAW,GAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}