{"ast":null,"code":"var _jsxFileName = \"D:\\\\adhd-read-helper\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 自动阅读器全局对象\nwindow.autoReader = {\n  charPositions: [],\n  intervalId: null,\n  currentIndex: 0,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false,\n  cleanup: null\n};\n\n// 添加新的节奏阅读模式代码\n// 全局变量，确保在页面切换后仍然保持状态\nwindow.rhythmReaderGlobal = window.rhythmReaderGlobal || {\n  active: false,\n  speed: 300\n};\n\n// 节奏阅读模式 - 确保手动翻页后也能自动恢复\n(function () {\n  console.log(\"正在初始化节奏阅读模式...\");\n\n  // 确保只初始化一次\n  if (window.rhythmReadingInitialized) {\n    console.log(\"节奏阅读模式已经初始化过，跳过\");\n    return;\n  }\n  window.rhythmReadingInitialized = true;\n\n  // 改进的存储函数，同时使用session和local storage提高可靠性\n  function setStorage(key, value) {\n    try {\n      sessionStorage.setItem(key, value);\n      localStorage.setItem(key, value);\n    } catch (e) {\n      console.error(\"无法写入存储\", e);\n    }\n  }\n  function getStorage(key) {\n    try {\n      // 优先使用sessionStorage，这样更适合单次会话\n      return sessionStorage.getItem(key) || localStorage.getItem(key);\n    } catch (e) {\n      console.error(\"无法读取存储\", e);\n      return null;\n    }\n  }\n\n  // 状态变量和功能对象\n  const rhythmReader = {\n    active: false,\n    intervalId: null,\n    speed: 300,\n    currentIndex: 0,\n    readIndices: new Set(),\n    charElements: [],\n    pageTransitionInProgress: false,\n    // 启动节奏阅读\n    start: function () {\n      console.log(\"【节奏阅读】启动中...\");\n\n      // 检查是否正在进行页面转换\n      if (this.pageTransitionInProgress) {\n        console.log(\"【节奏阅读】页面转换正在进行中，延迟启动\");\n        setTimeout(() => this.start(), 500);\n        return;\n      }\n\n      // 先停止已有的\n      this.stop(false);\n\n      // 设置为活动状态\n      this.active = true;\n      setStorage('rhythmReadingActive', 'true');\n\n      // 初始化文本\n      if (!this.initializeTextNodes()) {\n        console.error(\"【节奏阅读】无法初始化文本节点\");\n        return;\n      }\n\n      // 重要：始终从头开始阅读\n      this.currentIndex = 0;\n      this.readIndices.clear();\n\n      // 添加速度滑块\n      this.addSpeedSlider();\n\n      // 更新颜色\n      this.updateTextColors();\n\n      // 滚动到开始位置\n      this.scrollToCurrentChar();\n\n      // 设置阅读间隔\n      this.intervalId = setInterval(() => this.moveToNextChar(), this.speed);\n      console.log(\"【节奏阅读】成功启动\");\n\n      // 显示提示\n      this.showNotification(\"节奏阅读模式已启动\");\n\n      // 劫持翻页函数 - 重要步骤\n      this.hijackPageTurningFunctions();\n\n      // 设置页面导航事件监听\n      this.setupPageNavigationListeners();\n    },\n    // 停止节奏阅读\n    stop: function (showNotification = true) {\n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n      }\n      if (this.active) {\n        console.log(\"【节奏阅读】停止中...\");\n        this.active = false;\n\n        // 仅当不是因翻页而停止时才清除活动状态\n        if (!this.pageTransitionInProgress) {\n          setStorage('rhythmReadingActive', 'false');\n        }\n\n        // 恢复原始文本\n        this.restoreOriginalText();\n\n        // 移除速度滑块\n        const slider = document.getElementById('rhythm-speed-slider');\n        if (slider) slider.remove();\n        if (showNotification) {\n          this.showNotification(\"节奏阅读模式已停止\");\n        }\n      }\n    },\n    // 显示通知\n    showNotification: function (message) {\n      let notification = document.getElementById('rhythm-notification');\n      if (notification) notification.remove();\n      notification = document.createElement('div');\n      notification.id = 'rhythm-notification';\n      notification.textContent = message;\n      notification.style.position = 'fixed';\n      notification.style.top = '50%';\n      notification.style.left = '50%';\n      notification.style.transform = 'translate(-50%, -50%)';\n      notification.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';\n      notification.style.color = 'white';\n      notification.style.padding = '15px 25px';\n      notification.style.borderRadius = '5px';\n      notification.style.zIndex = '10001';\n      notification.style.fontSize = '18px';\n      document.body.appendChild(notification);\n\n      // 2秒后自动消失\n      setTimeout(() => {\n        if (notification && notification.parentNode) {\n          notification.parentNode.removeChild(notification);\n        }\n      }, 2000);\n    },\n    // 劫持页面翻转函数 - 改进版本\n    hijackPageTurningFunctions: function () {\n      // 劫持changePage函数\n      if (typeof window.changePage === 'function' && !window._originalChangePage) {\n        console.log(\"【节奏阅读】劫持changePage函数\");\n        window._originalChangePage = window.changePage;\n        const self = this;\n        window.changePage = function (page) {\n          console.log(\"【节奏阅读】检测到changePage调用，参数:\", page);\n\n          // 记录活动状态\n          const wasActive = self.active;\n\n          // 标记页面转换开始\n          self.pageTransitionInProgress = true;\n\n          // 停止当前阅读\n          if (wasActive) {\n            self.stop(false);\n\n            // 保存状态以便在新页面恢复\n            setStorage('rhythmReadingActive', 'true');\n            setStorage('rhythmReadingPending', 'true');\n            document.body.dataset.rhythmReadingActive = 'true';\n          }\n\n          // 添加安全检查避免undefined错误\n          try {\n            // 确保page参数存在\n            if (page === undefined || page === null) {\n              console.warn('【节奏阅读】安全处理：page参数为空');\n              page = {}; // 提供默认空对象\n            }\n\n            // 如果尝试访问page.something.active可能会失败，添加安全检查\n            if (typeof page === 'object' && !page.something) {\n              console.log('【节奏阅读】添加空的something对象防止错误');\n              page.something = {\n                active: false\n              };\n            }\n\n            // 调用原始翻页函数\n            window._originalChangePage(page);\n          } catch (err) {\n            console.error(\"【节奏阅读】翻页函数执行出错:\", err);\n            // 尝试恢复：直接点击页面中的下一页按钮\n            self.clickNextPageButton();\n          }\n\n          // 延迟标记页面转换结束并恢复节奏阅读\n          setTimeout(() => {\n            self.pageTransitionInProgress = false;\n\n            // 检查是否需要重新启动节奏阅读\n            if (wasActive && getStorage('rhythmReadingPending') === 'true') {\n              setStorage('rhythmReadingPending', 'false');\n              console.log(\"【节奏阅读】翻页后重新启动\");\n\n              // 给页面更多时间加载\n              setTimeout(() => self.start(), 500);\n            }\n          }, 1000);\n        };\n      }\n\n      // 添加全局错误处理器专门处理节奏阅读相关错误\n      window.addEventListener('error', function (event) {\n        // 监听可能与翻页相关的错误\n        if (event.error && event.error.toString().includes(\"Cannot read properties of undefined\")) {\n          console.warn('【节奏阅读】拦截到可能的翻页错误:', event.error);\n\n          // 如果正在节奏阅读，确保状态被保留\n          if (rhythmReader.active || getStorage('rhythmReadingActive') === 'true') {\n            setStorage('rhythmReadingActive', 'true');\n            setStorage('rhythmReadingPending', 'true');\n\n            // 尝试一段时间后恢复\n            setTimeout(() => {\n              if (getStorage('rhythmReadingPending') === 'true') {\n                rhythmReader.start();\n              }\n            }, 1500);\n          }\n        }\n      });\n    },\n    // 设置页面导航事件监听 - 加强版\n    setupPageNavigationListeners: function () {\n      // 查找所有可能的翻页按钮\n      console.log(\"【节奏阅读】正在设置页面导航监听\");\n      const self = this;\n\n      // 使用事件委托来捕获所有可能的点击\n      document.addEventListener('click', function (e) {\n        // 检查点击的元素是否可能是翻页按钮\n        let target = e.target;\n        while (target && target !== document.body) {\n          // 检查是否是翻页元素\n          if (target.tagName === 'BUTTON' || target.tagName === 'A' || target.getAttribute('role') === 'button') {\n            const text = (target.textContent || '').trim().toLowerCase();\n            const ariaLabel = (target.getAttribute('aria-label') || '').toLowerCase();\n\n            // 检查是否是翻页元素\n            if (text.includes('上一页') || text.includes('下一页') || text.includes('prev') || text.includes('next') || ariaLabel.includes('page') || ariaLabel.includes('页') || text === '<' || text === '>' || text === '←' || text === '→') {\n              if (self.active) {\n                console.log(`【节奏阅读】检测到可能的翻页元素点击: ${text || ariaLabel}`);\n\n                // 标记页面转换开始\n                self.pageTransitionInProgress = true;\n\n                // 保存状态到存储\n                setStorage('rhythmReadingActive', 'true');\n                setStorage('rhythmReadingPending', 'true');\n                document.body.dataset.rhythmReadingActive = 'true';\n\n                // 停止当前的阅读\n                self.stop(false);\n\n                // 添加延迟执行的监听器，确保数据在页面加载后恢复\n                setTimeout(() => {\n                  self.pageTransitionInProgress = false;\n                  if (getStorage('rhythmReadingPending') === 'true') {\n                    setStorage('rhythmReadingPending', 'false');\n                    self.start();\n                  }\n                }, 1500);\n              }\n              break;\n            }\n          }\n          target = target.parentNode;\n        }\n      });\n\n      // 监听键盘导航事件\n      document.addEventListener('keydown', function (e) {\n        // 检查是否是翻页快捷键\n        if (['ArrowLeft', 'ArrowRight', 'PageUp', 'PageDown'].includes(e.key)) {\n          if (self.active) {\n            console.log(`【节奏阅读】检测到键盘翻页: ${e.key}`);\n\n            // 保存状态到存储\n            setStorage('rhythmReadingActive', 'true');\n            setStorage('rhythmReadingPending', 'true');\n\n            // 标记页面转换开始\n            self.pageTransitionInProgress = true;\n\n            // 停止当前的阅读\n            self.stop(false);\n\n            // 添加延迟执行的监听器\n            setTimeout(() => {\n              self.pageTransitionInProgress = false;\n              if (getStorage('rhythmReadingPending') === 'true') {\n                setStorage('rhythmReadingPending', 'false');\n                self.start();\n              }\n            }, 1500);\n          }\n        }\n      });\n\n      // 添加popstate监听器捕获浏览器前进/后退导航\n      window.addEventListener('popstate', function () {\n        if (self.active) {\n          console.log(\"【节奏阅读】检测到历史导航事件\");\n\n          // 保存状态\n          setStorage('rhythmReadingActive', 'true');\n          setStorage('rhythmReadingPending', 'true');\n\n          // 标记页面转换开始\n          self.pageTransitionInProgress = true;\n\n          // 停止当前阅读\n          self.stop(false);\n\n          // 延迟恢复\n          setTimeout(() => {\n            self.pageTransitionInProgress = false;\n            if (getStorage('rhythmReadingPending') === 'true') {\n              setStorage('rhythmReadingPending', 'false');\n              self.start();\n            }\n          }, 1500);\n        }\n      });\n    },\n    // 改进的自动翻页函数，更精确地处理状态保存\n    clickNextPageButton: function () {\n      console.log(\"【节奏阅读】尝试查找并点击下一页按钮\");\n\n      // 查找下一页按钮的代码...\n\n      if (nextPageButton) {\n        console.log(\"【节奏阅读】模拟点击下一页按钮\");\n\n        // 明确标记页面转换开始\n        this.pageTransitionInProgress = true;\n\n        // 保存状态\n        setStorage('rhythmReadingActive', 'true');\n        setStorage('rhythmReadingPending', 'true');\n        document.body.dataset.rhythmReadingActive = 'true';\n\n        // 恢复原始文本\n        this.restoreOriginalText();\n\n        // 停止计时器\n        if (this.intervalId) {\n          clearInterval(this.intervalId);\n          this.intervalId = null;\n        }\n\n        // 模拟点击\n        nextPageButton.click();\n\n        // 延迟结束页面转换状态\n        setTimeout(() => {\n          this.pageTransitionInProgress = false;\n        }, 1000);\n        return true;\n      } else {\n        console.log(\"【节奏阅读】未找到下一页按钮\");\n        return false;\n      }\n    }\n  };\n\n  // 暴露到全局，以便调试和直接调用\n  window.rhythmReader = rhythmReader;\n\n  // 额外添加一个全局安全函数用于检查节奏阅读状态\n  window.isRhythmActive = function () {\n    return rhythmReader.active || getStorage('rhythmReadingActive') === 'true';\n  };\n\n  // 添加一个停止函数供外部安全调用\n  window.stopRhythmSafely = function () {\n    try {\n      setStorage('rhythmReadingActive', 'false');\n      setStorage('rhythmReadingPending', 'false');\n      if (rhythmReader && typeof rhythmReader.stop === 'function') {\n        rhythmReader.stop();\n      }\n    } catch (e) {\n      console.error(\"停止节奏阅读出错\", e);\n    }\n  };\n\n  // 设置页面加载监听器，确保页面转换后能恢复\n  function setupPageLoadListener() {\n    // DOM内容加载和完全加载的事件监听...\n\n    // 改进的页面变化监测\n    const observer = new MutationObserver(function (mutations) {\n      // 检测到内容变化且有待处理的节奏阅读时\n      if (getStorage('rhythmReadingPending') === 'true') {\n        const contentChanges = mutations.some(m => m.type === 'childList' && m.addedNodes.length > 5); // 使用更高的阈值，确保是真正的内容变化\n\n        if (contentChanges) {\n          console.log(\"【节奏阅读】检测到大量DOM变化，可能是页面切换\");\n\n          // 给页面一点时间稳定下来\n          setTimeout(() => {\n            if (getStorage('rhythmReadingPending') === 'true') {\n              console.log(\"【节奏阅读】页面内容变化后，尝试恢复阅读\");\n              setStorage('rhythmReadingPending', 'false');\n              if (!rhythmReader.pageTransitionInProgress) {\n                rhythmReader.start();\n              }\n            }\n          }, 800);\n        }\n      }\n    });\n\n    // 观察body变化\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  }\n\n  // 设置页面加载监听器\n  setupPageLoadListener();\n\n  // 检查是否需要立即恢复阅读状态\n  if (getStorage('rhythmReadingActive') === 'true') {\n    console.log(\"【节奏阅读】检测到之前的阅读状态，准备恢复\");\n    setStorage('rhythmReadingPending', 'false');\n    setTimeout(function () {\n      rhythmReader.start();\n    }, 800);\n  }\n  console.log(\"【节奏阅读】初始化完成\");\n})();\nconst App = () => {\n  _s();\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const autoReadGuideRef = useRef(null);\n  const autoReadIntervalRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n\n  // 新增自动阅读器状态\n  const [autoReaderState, setAutoReaderState] = useState({\n    currentIndex: 0,\n    charPositions: [],\n    intervalId: null,\n    speed: 300,\n    pageContainer: null,\n    isUserScrolling: false,\n    scrollTimeout: null,\n    contentLoaded: false\n  });\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n    return () => {\n      // 清理自动阅读定时器\n      if (autoReadIntervalRef.current) {\n        clearInterval(autoReadIntervalRef.current);\n      }\n    };\n  }, []);\n\n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async file => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n\n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n\n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n\n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({\n        scale: 1.0\n      });\n\n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async textContent => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n\n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n\n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n\n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    const lines = [...lineMap.values()];\n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    return hasTocKeywords || hasPageNumberPatterns || shortLineRatio > 0.7 && numberLineRatio > 0.3;\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n\n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n\n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n\n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n\n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = text => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    return result;\n  };\n\n  // 修改processContentPage函数\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n\n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch (mode) {\n        case 'normal':\n          // 普通模式 - 简单分段显示\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'static':\n          // 静态高亮模式 - 应用词性标注和颜色高亮\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'follow-mouse':\n          // 鼠标跟随高亮模式 - 分段落但不预先高亮，由鼠标事件触发高亮\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      setContent(processedContent);\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async file => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain') {\n      handleTxtFile(file);\n    } else {\n      alert('请上传PDF或TXT文件');\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = container => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n\n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n\n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n\n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width / 2,\n            // 水平中心\n            y: rect.bottom,\n            // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n\n    // 过滤无效位置并排序\n    return positions.filter(p => p.char.trim() !== '').sort((a, b) => {\n      // 先按行排序，同行按列排序\n      const yDiff = a.y - b.y;\n      if (Math.abs(yDiff) > 5) {\n        // 5px阈值判断是否同一行\n        return yDiff;\n      }\n      return a.x - b.x;\n    });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n\n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - containerVisibleHeight / 2;\n\n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - window.innerHeight / 2;\n\n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n\n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n\n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length ||\n      // 已到末尾\n      positions[nextIndex].char.trim() === '' ||\n      // 下一个是空白\n      positions[nextIndex].y > charPosition.y + 5) {\n        // 下一个在新行\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n\n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n\n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || current.y > prev.y + 5) {\n        // 有明显换行\n        break;\n      }\n      start--;\n    }\n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n\n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n\n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (window.autoReader.charPositions.length === 0) {\n      if (window.currentPage < window.totalPages) {\n        window.changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 重置索引到开头\n    window.autoReader.currentIndex = 0;\n\n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n\n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n\n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none';\n      highlight.style.zIndex = '998';\n      contentContainer.appendChild(highlight);\n    }\n\n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n\n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20;\n\n    // 尝试获取实际行高\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(window.autoReader.charPositions[i].y - window.autoReader.charPositions[i - 1].y);\n        if (yDiff > 5) {\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n\n    // 记录上次滚动的位置\n    let lastScrolledY = -1;\n    const scrollSafeZone = lineHeight * 2.5;\n\n    // 设置字符大小的估计值\n    let charWidth = 20;\n    let charHeight = lineHeight * 0.8;\n\n    // 尝试估计字符宽度\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        if (window.autoReader.charPositions[i].x !== window.autoReader.charPositions[i - 1].x) {\n          const xDiff = Math.abs(window.autoReader.charPositions[i].x - window.autoReader.charPositions[i - 1].x);\n          if (xDiff > 0 && xDiff < 50) {\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    window.autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (window.autoReader.currentIndex < window.autoReader.charPositions.length && ((_window$autoReader$ch = window.autoReader.charPositions[window.autoReader.currentIndex]) === null || _window$autoReader$ch === void 0 ? void 0 : _window$autoReader$ch.char.trim()) === '') {\n        var _window$autoReader$ch;\n        window.autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (window.autoReader.currentIndex >= window.autoReader.charPositions.length) {\n        if (window.currentPage < window.totalPages) {\n          window.changePage(1);\n          clearInterval(window.autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n      const pos = window.autoReader.charPositions[window.autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      if (cursor && highlight) {\n        const contentRect = contentContainer.getBoundingClientRect();\n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        highlight.style.left = `${relativeX - charWidth / 2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n\n        // 滚动处理\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          if (isContainerScrollable) {\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = relativeY;\n            }\n          } else {\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      window.autoReader.currentIndex++;\n    }, window.autoReader.speed);\n\n    // 在停止自动阅读时清除所有高亮\n    window.autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n\n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n\n      // 调用清理函数\n      if (window.autoReader.cleanup) {\n        window.autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n\n    // 重置翻页状态\n    window.autoReader.isPageChanging = false;\n\n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n\n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n\n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n\n    // 收集字符位置\n    window.autoReader.charPositions = getAllCharacterPositions(content);\n\n    // 如果当前页没有内容，尝试翻页\n    if (window.autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !window.autoReader.isPageChanging) {\n        window.autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async e => {\n    const newMode = e.target.value;\n\n    // 停止当前可能正在运行的自动阅读和节奏阅读\n    stopAutoReader();\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n\n    // 清理旧模式\n    cleanupDOM();\n\n    // 更新状态\n    setReadingMode(newMode);\n\n    // 应用新模式\n    if (pdfDocument && currentPage > 0) {\n      try {\n        const page = await pdfDocument.getPage(currentPage);\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        let processedContent = '';\n\n        // 应用对应模式的文本处理\n        switch (newMode) {\n          case 'follow-mouse':\n            processedContent = formatTextForMouseFollow(extractedText);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlight(extractedText);\n            break;\n          case 'auto-reader':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          case 'rhythm':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          default:\n            processedContent = formatTextToHtml(extractedText);\n        }\n        const contentArea = document.querySelector('.page-content');\n        if (contentArea) {\n          contentArea.textContent = '';\n          contentArea.innerHTML = processedContent;\n\n          // 滚动到页面顶部\n          window.scrollTo(0, 0);\n          if (contentArea.scrollTo) {\n            contentArea.scrollTo(0, 0);\n          }\n\n          // 立即初始化对应模式\n          if (newMode === 'auto-reader') {\n            setTimeout(initializeAutoReader, 50);\n          } else if (newMode === 'follow-mouse') {\n            setTimeout(initializeMouseFollow, 50);\n          } else if (newMode === 'rhythm') {\n            setTimeout(() => {\n              if (window.rhythmReader) {\n                window.rhythmReader.start();\n              }\n            }, 50);\n          }\n        }\n      } catch (error) {\n        console.error('应用新阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 1. 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll('.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line, .rhythm-char');\n    highlights.forEach(el => el.remove());\n\n    // 2. 移除事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 克隆内容区域以彻底移除所有事件监听器\n      const cleanContent = contentArea.cloneNode(false);\n      cleanContent.innerHTML = contentArea.innerHTML;\n      contentArea.parentNode.replaceChild(cleanContent, contentArea);\n    }\n\n    // 3. 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 创建新段落并保留基本结构\n      const newParagraph = document.createElement('p');\n      newParagraph.className = 'pdf-paragraph';\n      newParagraph.innerHTML = paragraph.innerHTML.replace(/<span class=\"text-line\">/g, '').replace(/<\\/span>/g, '').replace(/<span class=\"rhythm-char\">/g, '').replace(/<\\/span>/g, '');\n\n      // 移除特殊属性\n      newParagraph.removeAttribute('data-follow');\n      newParagraph.removeAttribute('style');\n      if (paragraph.parentNode) {\n        paragraph.parentNode.replaceChild(newParagraph, paragraph);\n      }\n    });\n\n    // 4. 清理自动阅读器\n    stopAutoReader();\n\n    // 5. 移除节奏阅读速度滑块\n    const slider = document.getElementById('rhythm-speed-slider');\n    if (slider) slider.remove();\n  };\n  const handleAutoScroll = () => {\n    window.autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = e => {\n    if (readingMode !== 'follow-mouse') return;\n\n    // 清除所有现有高亮\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n    const mouseTarget = document.elementFromPoint(e.clientX, e.clientY);\n    if (mouseTarget && (mouseTarget.classList.contains('pdf-paragraph') || mouseTarget.tagName === 'P' || mouseTarget.tagName === 'SPAN')) {\n      const targetParagraph = mouseTarget.closest('.pdf-paragraph');\n      if (!targetParagraph) return;\n\n      // 获取段落文本节点\n      const textNode = getTextNodeAtPosition(targetParagraph, e.clientX, e.clientY);\n      if (!textNode) return;\n\n      // 获取精确的行位置和尺寸\n      const range = document.createRange();\n      range.selectNodeContents(textNode);\n      const rects = range.getClientRects();\n\n      // 找到鼠标所在的具体行\n      let targetRect = null;\n      for (let i = 0; i < rects.length; i++) {\n        const rect = rects[i];\n        if (e.clientY >= rect.top && e.clientY <= rect.bottom) {\n          targetRect = rect;\n          break;\n        }\n      }\n      if (targetRect) {\n        // 创建高亮元素\n        const lineHighlight = document.createElement('div');\n        lineHighlight.className = 'line-highlight mouse-highlight';\n\n        // 计算相对于段落的位置\n        const paragraphRect = targetParagraph.getBoundingClientRect();\n        const top = targetRect.top - paragraphRect.top;\n        const left = targetRect.left - paragraphRect.left;\n\n        // 设置高亮样式\n        lineHighlight.style.position = 'absolute';\n        lineHighlight.style.left = `${left}px`;\n        lineHighlight.style.top = `${top}px`;\n        lineHighlight.style.width = `${targetRect.width}px`;\n        lineHighlight.style.height = `${targetRect.height}px`;\n        lineHighlight.style.pointerEvents = 'none';\n        lineHighlight.style.backgroundColor = 'rgba(255, 165, 0, 0.3)';\n        lineHighlight.style.borderRadius = '4px';\n        lineHighlight.style.boxShadow = '0 0 8px rgba(255, 165, 0, 0.5)';\n        lineHighlight.style.zIndex = '5';\n        lineHighlight.style.transition = 'all 0.1s ease';\n\n        // 确保段落有相对定位\n        targetParagraph.style.position = 'relative';\n        targetParagraph.appendChild(lineHighlight);\n      }\n    }\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 新增延迟补偿\n    setTimeout(() => {\n      addMouseFollowListeners();\n\n      // 强制触发重排\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        void contentArea.offsetHeight;\n\n        // 模拟鼠标移动事件\n        const fakeEvent = new MouseEvent('mousemove', {\n          clientX: window.innerWidth / 2,\n          clientY: window.innerHeight / 2,\n          bubbles: true\n        });\n        contentArea.dispatchEvent(fakeEvent);\n      }\n    }, 50);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = delta => {\n    window.autoReader.speed = Math.max(100, window.autoReader.speed + delta);\n    setAutoReaderState(prev => ({\n      ...prev,\n      speed: window.autoReader.speed\n    }));\n    if (window.autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async delta => {\n    const newPage = currentPage + delta;\n    if (newPage < 1 || newPage > totalPages) return;\n    const wasAutoReading = readingMode === 'auto-reader' && window.autoReader.intervalId;\n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n\n    // 如果正在自动阅读或节奏阅读，先停止\n    if (wasAutoReading) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n    }\n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n\n    // 更新页码\n    setCurrentPage(newPage);\n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 按当前阅读模式处理内容\n      let processedContent = '';\n      switch (readingMode) {\n        case 'follow-mouse':\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'auto-reader':\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'rhythm':\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n\n      // 更新页面内容\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        contentArea.textContent = '';\n        contentArea.innerHTML = processedContent;\n\n        // 滚动到页面顶部\n        window.scrollTo(0, 0);\n        if (contentArea.scrollTo) {\n          contentArea.scrollTo(0, 0);\n        }\n\n        // 重新启动对应的阅读模式\n        if (wasAutoReading) {\n          setTimeout(initializeAutoReader, 50);\n        } else if (wasRhythmReading && window.rhythmReader) {\n          setTimeout(() => {\n            window.rhythmReader.start();\n          }, 50);\n        }\n      }\n    } catch (error) {\n      console.error('翻页失败:', error);\n    }\n  };\n\n  // 修改后的监听器设置函数\n  const addMouseFollowListeners = () => {\n    if (readingMode !== 'follow-mouse') return;\n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n\n    // 清理旧的监听器\n    contentArea.removeEventListener('mousemove', handleMouseMove);\n    contentArea.removeEventListener('mouseleave', clearAllHighlights);\n\n    // 添加新的监听器\n    contentArea.addEventListener('mousemove', handleMouseMove);\n    contentArea.addEventListener('mouseleave', clearAllHighlights);\n\n    // 确保所有段落都有正确的样式\n    document.querySelectorAll('.pdf-paragraph').forEach(p => {\n      p.style.position = 'relative';\n      p.style.lineHeight = '1.5';\n    });\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = text => {\n    // 分段\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n\n    // 创建HTML内容\n    let htmlContent = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      htmlContent += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 应用静态高亮\n  const applyStaticHighlight = text => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    let htmlContent = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      // 新增强制清理逻辑\n      const cleanParagraph = paragraph.replace(/<span class=\"text-line\">/g, '').replace(/<\\/span>/g, '');\n      const highlightedText = processTextWithHighlight(cleanParagraph);\n      htmlContent += `<p class=\"pdf-paragraph\">${highlightedText}</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 格式化文本用于鼠标跟随高亮模式\n  const formatTextForMouseFollow = text => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    let htmlContent = '<div class=\"pdf-content mouse-follow-content\">';\n    paragraphs.forEach(paragraph => {\n      // 将段落分割成行\n      const lines = paragraph.split('\\n').filter(line => line.trim());\n      htmlContent += `<p class=\"pdf-paragraph\" data-follow=\"true\" style=\"position: relative; line-height: 1.5;\">`;\n      lines.forEach((line, i) => {\n        // 每行用span包裹\n        htmlContent += `<span class=\"text-line\" style=\"display: block;\">${line}</span>`;\n      });\n      htmlContent += `</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 强制初始化字符位置（这是关键步骤！）\n  function forceInitReader() {\n    console.log(\"强制初始化阅读器...\");\n\n    // 1. 如果autoReader或charPositions不存在，创建它们\n    if (typeof window.autoReader === 'undefined') {\n      window.autoReader = {\n        charPositions: [],\n        intervalId: null,\n        currentIndex: 0,\n        speed: 30\n      };\n    }\n\n    // 2. 如果没有字符位置数据，尝试触发它的创建\n    if (!window.autoReader.charPositions || window.autoReader.charPositions.length === 0) {\n      console.log(\"未找到字符位置数据，尝试强制创建...\");\n\n      // 直接使用scanTextPositionsSimple函数\n      scanTextPositionsSimple();\n    }\n    return window.autoReader.charPositions && window.autoReader.charPositions.length > 0;\n  }\n\n  // 简单的文本位置扫描函数\n  function scanTextPositionsSimple() {\n    console.log(\"使用简单文本扫描...\");\n    window.autoReader.charPositions = [];\n    const contentElement = document.querySelector('.page-content');\n    if (!contentElement) {\n      console.error(\"找不到内容容器\");\n      return;\n    }\n\n    // 递归处理文本节点\n    function processTextNodes(element) {\n      if (element.nodeType === Node.TEXT_NODE) {\n        const text = element.textContent;\n        if (!text || text.trim() === '') return;\n\n        // 获取元素的位置信息\n        const range = document.createRange();\n\n        // 为每个字符创建一个独立的范围\n        for (let i = 0; i < text.length; i++) {\n          try {\n            range.setStart(element, i);\n            range.setEnd(element, i + 1);\n            const rect = range.getBoundingClientRect();\n            if (rect.width > 0 && rect.height > 0) {\n              window.autoReader.charPositions.push({\n                char: text[i],\n                x: rect.left + rect.width / 2,\n                y: rect.top + rect.height / 2,\n                element: element.parentElement\n              });\n            }\n          } catch (e) {\n            console.warn(\"无法处理字符\", e);\n          }\n        }\n      } else if (element.nodeType === Node.ELEMENT_NODE) {\n        // 递归处理子元素\n        for (const child of element.childNodes) {\n          processTextNodes(child);\n        }\n      }\n    }\n    processTextNodes(contentElement);\n    console.log(\"扫描完成，找到字符数量:\", window.autoReader.charPositions.length);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1755,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1754,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"upload-btn\",\n        children: [\"\\u9009\\u62E9\\u6587\\u4EF6\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".pdf,.txt\",\n          onChange: handleFileUpload,\n          style: {\n            display: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1759,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1757,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1753,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1769,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mode-selector\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: readingMode,\n              onChange: handleReadingModeChange,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"normal\",\n                children: \"\\u666E\\u901A\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1773,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"static\",\n                children: \"\\u9759\\u6001\\u9AD8\\u4EAE\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1774,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"follow-mouse\",\n                children: \"\\u9F20\\u6807\\u8DDF\\u968F\\u9AD8\\u4EAE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1775,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"auto-reader\",\n                children: \"\\u81EA\\u52A8\\u9605\\u8BFB\\u5668\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1776,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"rhythm\",\n                children: \"\\u8282\\u594F\\u9605\\u8BFB\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1777,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1772,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1771,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mode-selector\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: posMode,\n              onChange: e => setPosMode(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"none\",\n                children: \"\\u65E0\\u8BCD\\u6027\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1782,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"noun\",\n                children: \"\\u540D\\u8BCD\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1783,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"all\",\n                children: \"\\u5168\\u8BCD\\u6027\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1784,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1781,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1780,\n            columnNumber: 13\n          }, this), readingMode === 'auto-reader' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"speed-control\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => adjustSpeed(-100),\n              children: \"-\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1789,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [autoReaderState.speed, \"ms\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1790,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => adjustSpeed(100),\n              children: \"+\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1791,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1788,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1770,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1768,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-content\",\n        children: content ? /*#__PURE__*/_jsxDEV(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: content\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1798,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-state\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u8BF7\\u4E0A\\u4F20PDF\\u6216TXT\\u6587\\u4EF6\\u5F00\\u59CB\\u9605\\u8BFB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1801,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1800,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1796,\n        columnNumber: 9\n      }, this), content && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"page-btn prev\",\n          onClick: () => changePage(-1),\n          disabled: currentPage === 1,\n          children: \"\\u4E0A\\u4E00\\u9875\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1807,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"page-info\",\n          children: [\"\\u7B2C \", currentPage, \" \\u9875 / \\u5171 \", totalPages, \" \\u9875\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1810,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"page-btn next\",\n          onClick: () => changePage(1),\n          disabled: currentPage === totalPages,\n          children: \"\\u4E0B\\u4E00\\u9875\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1813,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1806,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1767,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1752,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"FdIIE1mY5AAmB921foSmrxDLqNQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","pdfjsLib","pdfjsViewer","marked","pdfjs","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","window","currentPage","totalPages","changePage","autoReader","charPositions","intervalId","currentIndex","speed","pageContainer","isScrolling","isPageChanging","cleanup","rhythmReaderGlobal","active","console","log","rhythmReadingInitialized","setStorage","key","value","sessionStorage","setItem","localStorage","e","error","getStorage","getItem","rhythmReader","readIndices","Set","charElements","pageTransitionInProgress","start","setTimeout","stop","initializeTextNodes","clear","addSpeedSlider","updateTextColors","scrollToCurrentChar","setInterval","moveToNextChar","showNotification","hijackPageTurningFunctions","setupPageNavigationListeners","clearInterval","restoreOriginalText","slider","document","getElementById","remove","message","notification","createElement","id","textContent","style","position","top","left","transform","backgroundColor","color","padding","borderRadius","zIndex","fontSize","body","appendChild","parentNode","removeChild","_originalChangePage","self","page","wasActive","dataset","rhythmReadingActive","undefined","warn","something","err","clickNextPageButton","addEventListener","event","toString","includes","target","tagName","getAttribute","text","trim","toLowerCase","ariaLabel","nextPageButton","click","isRhythmActive","stopRhythmSafely","setupPageLoadListener","observer","MutationObserver","mutations","contentChanges","some","m","type","addedNodes","length","observe","childList","subtree","App","_s","pages","setPages","setCurrentPage","setTotalPages","fileName","setFileName","loading","setLoading","fileRef","file","setFile","pdfInstance","setPdfInstance","extractedTextPages","setExtractedTextPages","readingMode","setReadingMode","posMode","setPosMode","markdownContent","setMarkdownContent","readerContainerRef","autoReadGuideRef","autoReadIntervalRef","content","setContent","pdfDocument","setPdfDocument","autoReaderState","setAutoReaderState","isUserScrolling","scrollTimeout","contentLoaded","current","initializeMouseFollow","handlePdfFile","fileURL","URL","createObjectURL","loadingTask","getDocument","pdf","promise","numPages","extractAndProcessPage","alert","pageNum","getPage","getTextContent","viewport","getViewport","scale","isTableOfContents","detectIfTocPage","processTocPage","processContentPage","addMouseFollowListeners","textItems","items","fullText","map","item","str","join","hasTocKeywords","test","hasPageNumberPatterns","shortLinesCount","linesWithNumbersCount","lineMap","Map","forEach","yKey","Math","round","has","set","get","push","lines","values","line","lineText","shortLineRatio","numberLineRatio","htmlContent","x","y","height","sqrt","fontWeight","fontName","spacedText","split","getTextNodeAtPosition","element","nodes","childNodes","i","node","nodeType","Node","TEXT_NODE","range","createRange","selectNodeContents","rects","getClientRects","j","rect","bottom","right","ELEMENT_NODE","found","processTextWithHighlight","words","result","lastColor","word","random","mode","extractedText","replace","processedContent","formatTextToHtml","applyStaticHighlight","formatTextForMouseFollow","handleTxtFile","pageTexts","paragraph","fontFamily","handleFileUpload","files","getAllCharacterPositions","container","walker","createTreeWalker","NodeFilter","SHOW_TEXT","positions","nextNode","currentNode","setStart","setEnd","getBoundingClientRect","width","char","filter","p","sort","a","b","yDiff","abs","scrollElementToCenter","elementY","isContainerScrollable","scrollHeight","clientHeight","getComputedStyle","overflowY","targetScrollTop","containerVisibleHeight","scrollTo","max","behavior","absoluteElementY","innerHeight","createReaderCursor","cursor","cssText","head","isSentenceEnd","charPosition","index","sentenceEndMarks","nextIndex","findSentenceStart","prev","isInVisibleArea","threshold","visibleTop","scrollTop","visibleBottom","topThreshold","bottomThreshold","scrollY","startAutoReader","contentContainer","querySelector","highlight","pointerEvents","lineHeight","lastScrolledY","scrollSafeZone","charWidth","charHeight","xDiff","_window$autoReader$ch","stopAutoReader","pos","contentRect","relativeX","relativeY","isInRecentlyScrolledArea","needsScroll","scrollAmount","scrollBy","absoluteY","initializeAutoReader","handleReadingModeChange","newMode","cleanupDOM","contentArea","innerHTML","highlights","querySelectorAll","el","cleanContent","cloneNode","replaceChild","paragraphs","newParagraph","className","removeAttribute","handleAutoScroll","updateCursorPosition","force","handleMouseMove","mouseTarget","elementFromPoint","clientX","clientY","classList","contains","targetParagraph","closest","textNode","targetRect","lineHighlight","paragraphRect","boxShadow","transition","clearAllHighlights","addAutoReaderStyles","offsetHeight","fakeEvent","MouseEvent","innerWidth","bubbles","dispatchEvent","adjustSpeed","delta","newPage","wasAutoReading","wasRhythmReading","removeEventListener","cleanParagraph","highlightedText","forceInitReader","scanTextPositionsSimple","contentElement","processTextNodes","parentElement","child","children","_jsxFileName","lineNumber","columnNumber","accept","onChange","display","onClick","dangerouslySetInnerHTML","__html","disabled","_c","$RefreshReg$"],"sources":["D:/adhd-read-helper/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 自动阅读器全局对象\nwindow.autoReader = {\n  charPositions: [],\n  intervalId: null,\n  currentIndex: 0,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false,\n  cleanup: null\n};\n\n// 添加新的节奏阅读模式代码\n// 全局变量，确保在页面切换后仍然保持状态\nwindow.rhythmReaderGlobal = window.rhythmReaderGlobal || {\n  active: false,\n  speed: 300\n};\n\n// 节奏阅读模式 - 确保手动翻页后也能自动恢复\n(function() {\n  console.log(\"正在初始化节奏阅读模式...\");\n  \n  // 确保只初始化一次\n  if (window.rhythmReadingInitialized) {\n    console.log(\"节奏阅读模式已经初始化过，跳过\");\n    return;\n  }\n  window.rhythmReadingInitialized = true;\n  \n  // 改进的存储函数，同时使用session和local storage提高可靠性\n  function setStorage(key, value) {\n    try {\n      sessionStorage.setItem(key, value);\n      localStorage.setItem(key, value);\n    } catch (e) {\n      console.error(\"无法写入存储\", e);\n    }\n  }\n  \n  function getStorage(key) {\n    try {\n      // 优先使用sessionStorage，这样更适合单次会话\n      return sessionStorage.getItem(key) || localStorage.getItem(key);\n    } catch (e) {\n      console.error(\"无法读取存储\", e);\n      return null;\n    }\n  }\n  \n  // 状态变量和功能对象\n  const rhythmReader = {\n    active: false,\n    intervalId: null,\n    speed: 300,\n    currentIndex: 0,\n    readIndices: new Set(),\n    charElements: [],\n    pageTransitionInProgress: false,\n    \n    // 启动节奏阅读\n    start: function() {\n      console.log(\"【节奏阅读】启动中...\");\n      \n      // 检查是否正在进行页面转换\n      if (this.pageTransitionInProgress) {\n        console.log(\"【节奏阅读】页面转换正在进行中，延迟启动\");\n        setTimeout(() => this.start(), 500);\n        return;\n      }\n      \n      // 先停止已有的\n      this.stop(false);\n      \n      // 设置为活动状态\n      this.active = true;\n      setStorage('rhythmReadingActive', 'true');\n      \n      // 初始化文本\n      if (!this.initializeTextNodes()) {\n        console.error(\"【节奏阅读】无法初始化文本节点\");\n        return;\n      }\n      \n      // 重要：始终从头开始阅读\n      this.currentIndex = 0;\n      this.readIndices.clear();\n      \n      // 添加速度滑块\n      this.addSpeedSlider();\n      \n      // 更新颜色\n      this.updateTextColors();\n      \n      // 滚动到开始位置\n      this.scrollToCurrentChar();\n      \n      // 设置阅读间隔\n      this.intervalId = setInterval(() => this.moveToNextChar(), this.speed);\n      \n      console.log(\"【节奏阅读】成功启动\");\n      \n      // 显示提示\n      this.showNotification(\"节奏阅读模式已启动\");\n      \n      // 劫持翻页函数 - 重要步骤\n      this.hijackPageTurningFunctions();\n      \n      // 设置页面导航事件监听\n      this.setupPageNavigationListeners();\n    },\n    \n    // 停止节奏阅读\n    stop: function(showNotification = true) {\n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n      }\n      \n      if (this.active) {\n        console.log(\"【节奏阅读】停止中...\");\n        this.active = false;\n        \n        // 仅当不是因翻页而停止时才清除活动状态\n        if (!this.pageTransitionInProgress) {\n          setStorage('rhythmReadingActive', 'false');\n        }\n        \n        // 恢复原始文本\n        this.restoreOriginalText();\n        \n        // 移除速度滑块\n        const slider = document.getElementById('rhythm-speed-slider');\n        if (slider) slider.remove();\n        \n        if (showNotification) {\n          this.showNotification(\"节奏阅读模式已停止\");\n        }\n      }\n    },\n    \n    // 显示通知\n    showNotification: function(message) {\n      let notification = document.getElementById('rhythm-notification');\n      if (notification) notification.remove();\n      \n      notification = document.createElement('div');\n      notification.id = 'rhythm-notification';\n      notification.textContent = message;\n      notification.style.position = 'fixed';\n      notification.style.top = '50%';\n      notification.style.left = '50%';\n      notification.style.transform = 'translate(-50%, -50%)';\n      notification.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';\n      notification.style.color = 'white';\n      notification.style.padding = '15px 25px';\n      notification.style.borderRadius = '5px';\n      notification.style.zIndex = '10001';\n      notification.style.fontSize = '18px';\n      \n      document.body.appendChild(notification);\n      \n      // 2秒后自动消失\n      setTimeout(() => {\n        if (notification && notification.parentNode) {\n          notification.parentNode.removeChild(notification);\n        }\n      }, 2000);\n    },\n    \n    // 劫持页面翻转函数 - 改进版本\n    hijackPageTurningFunctions: function() {\n      // 劫持changePage函数\n      if (typeof window.changePage === 'function' && !window._originalChangePage) {\n        console.log(\"【节奏阅读】劫持changePage函数\");\n        window._originalChangePage = window.changePage;\n        \n        const self = this;\n        window.changePage = function(page) {\n          console.log(\"【节奏阅读】检测到changePage调用，参数:\", page);\n          \n          // 记录活动状态\n          const wasActive = self.active;\n          \n          // 标记页面转换开始\n          self.pageTransitionInProgress = true;\n          \n          // 停止当前阅读\n          if (wasActive) {\n            self.stop(false);\n            \n            // 保存状态以便在新页面恢复\n            setStorage('rhythmReadingActive', 'true'); \n            setStorage('rhythmReadingPending', 'true');\n            document.body.dataset.rhythmReadingActive = 'true';\n          }\n          \n          // 添加安全检查避免undefined错误\n          try {\n            // 确保page参数存在\n            if (page === undefined || page === null) {\n              console.warn('【节奏阅读】安全处理：page参数为空');\n              page = {}; // 提供默认空对象\n            }\n            \n            // 如果尝试访问page.something.active可能会失败，添加安全检查\n            if (typeof page === 'object' && !page.something) {\n              console.log('【节奏阅读】添加空的something对象防止错误');\n              page.something = { active: false };\n            }\n            \n            // 调用原始翻页函数\n            window._originalChangePage(page);\n          } catch (err) {\n            console.error(\"【节奏阅读】翻页函数执行出错:\", err);\n            // 尝试恢复：直接点击页面中的下一页按钮\n            self.clickNextPageButton();\n          }\n          \n          // 延迟标记页面转换结束并恢复节奏阅读\n          setTimeout(() => {\n            self.pageTransitionInProgress = false;\n            \n            // 检查是否需要重新启动节奏阅读\n            if (wasActive && getStorage('rhythmReadingPending') === 'true') {\n              setStorage('rhythmReadingPending', 'false');\n              console.log(\"【节奏阅读】翻页后重新启动\");\n              \n              // 给页面更多时间加载\n              setTimeout(() => self.start(), 500);\n            }\n          }, 1000);\n        };\n      }\n      \n      // 添加全局错误处理器专门处理节奏阅读相关错误\n      window.addEventListener('error', function(event) {\n        // 监听可能与翻页相关的错误\n        if (event.error && event.error.toString().includes(\"Cannot read properties of undefined\")) {\n          console.warn('【节奏阅读】拦截到可能的翻页错误:', event.error);\n          \n          // 如果正在节奏阅读，确保状态被保留\n          if (rhythmReader.active || getStorage('rhythmReadingActive') === 'true') {\n            setStorage('rhythmReadingActive', 'true');\n            setStorage('rhythmReadingPending', 'true');\n            \n            // 尝试一段时间后恢复\n            setTimeout(() => {\n              if (getStorage('rhythmReadingPending') === 'true') {\n                rhythmReader.start();\n              }\n            }, 1500);\n          }\n        }\n      });\n    },\n    \n    // 设置页面导航事件监听 - 加强版\n    setupPageNavigationListeners: function() {\n      // 查找所有可能的翻页按钮\n      console.log(\"【节奏阅读】正在设置页面导航监听\");\n      \n      const self = this;\n      \n      // 使用事件委托来捕获所有可能的点击\n      document.addEventListener('click', function(e) {\n        // 检查点击的元素是否可能是翻页按钮\n        let target = e.target;\n        while (target && target !== document.body) {\n          // 检查是否是翻页元素\n          if (target.tagName === 'BUTTON' || target.tagName === 'A' || \n              target.getAttribute('role') === 'button') {\n            \n            const text = (target.textContent || '').trim().toLowerCase();\n            const ariaLabel = (target.getAttribute('aria-label') || '').toLowerCase();\n            \n            // 检查是否是翻页元素\n            if (text.includes('上一页') || text.includes('下一页') || \n                text.includes('prev') || text.includes('next') ||\n                ariaLabel.includes('page') || ariaLabel.includes('页') ||\n                text === '<' || text === '>' || text === '←' || text === '→') {\n              \n              if (self.active) {\n                console.log(`【节奏阅读】检测到可能的翻页元素点击: ${text || ariaLabel}`);\n                \n                // 标记页面转换开始\n                self.pageTransitionInProgress = true;\n                \n                // 保存状态到存储\n                setStorage('rhythmReadingActive', 'true');\n                setStorage('rhythmReadingPending', 'true');\n                document.body.dataset.rhythmReadingActive = 'true';\n                \n                // 停止当前的阅读\n                self.stop(false);\n                \n                // 添加延迟执行的监听器，确保数据在页面加载后恢复\n                setTimeout(() => {\n                  self.pageTransitionInProgress = false;\n                  \n                  if (getStorage('rhythmReadingPending') === 'true') {\n                    setStorage('rhythmReadingPending', 'false');\n                    self.start();\n                  }\n                }, 1500);\n              }\n              \n              break;\n            }\n          }\n          \n          target = target.parentNode;\n        }\n      });\n      \n      // 监听键盘导航事件\n      document.addEventListener('keydown', function(e) {\n        // 检查是否是翻页快捷键\n        if (['ArrowLeft', 'ArrowRight', 'PageUp', 'PageDown'].includes(e.key)) {\n          if (self.active) {\n            console.log(`【节奏阅读】检测到键盘翻页: ${e.key}`);\n            \n            // 保存状态到存储\n            setStorage('rhythmReadingActive', 'true');\n            setStorage('rhythmReadingPending', 'true');\n            \n            // 标记页面转换开始\n            self.pageTransitionInProgress = true;\n            \n            // 停止当前的阅读\n            self.stop(false);\n            \n            // 添加延迟执行的监听器\n            setTimeout(() => {\n              self.pageTransitionInProgress = false;\n              \n              if (getStorage('rhythmReadingPending') === 'true') {\n                setStorage('rhythmReadingPending', 'false');\n                self.start();\n              }\n            }, 1500);\n          }\n        }\n      });\n      \n      // 添加popstate监听器捕获浏览器前进/后退导航\n      window.addEventListener('popstate', function() {\n        if (self.active) {\n          console.log(\"【节奏阅读】检测到历史导航事件\");\n          \n          // 保存状态\n          setStorage('rhythmReadingActive', 'true');\n          setStorage('rhythmReadingPending', 'true');\n          \n          // 标记页面转换开始\n          self.pageTransitionInProgress = true;\n          \n          // 停止当前阅读\n          self.stop(false);\n          \n          // 延迟恢复\n          setTimeout(() => {\n            self.pageTransitionInProgress = false;\n            \n            if (getStorage('rhythmReadingPending') === 'true') {\n              setStorage('rhythmReadingPending', 'false');\n              self.start();\n            }\n          }, 1500);\n        }\n      });\n    },\n    \n    // 改进的自动翻页函数，更精确地处理状态保存\n    clickNextPageButton: function() {\n      console.log(\"【节奏阅读】尝试查找并点击下一页按钮\");\n      \n      // 查找下一页按钮的代码...\n      \n      if (nextPageButton) {\n        console.log(\"【节奏阅读】模拟点击下一页按钮\");\n        \n        // 明确标记页面转换开始\n        this.pageTransitionInProgress = true;\n        \n        // 保存状态\n        setStorage('rhythmReadingActive', 'true');\n        setStorage('rhythmReadingPending', 'true');\n        document.body.dataset.rhythmReadingActive = 'true';\n        \n        // 恢复原始文本\n        this.restoreOriginalText();\n        \n        // 停止计时器\n        if (this.intervalId) {\n          clearInterval(this.intervalId);\n          this.intervalId = null;\n        }\n        \n        // 模拟点击\n        nextPageButton.click();\n        \n        // 延迟结束页面转换状态\n        setTimeout(() => {\n          this.pageTransitionInProgress = false;\n        }, 1000);\n        \n        return true;\n      } else {\n        console.log(\"【节奏阅读】未找到下一页按钮\");\n        return false;\n      }\n    }\n  };\n  \n  // 暴露到全局，以便调试和直接调用\n  window.rhythmReader = rhythmReader;\n  \n  // 额外添加一个全局安全函数用于检查节奏阅读状态\n  window.isRhythmActive = function() {\n    return rhythmReader.active || getStorage('rhythmReadingActive') === 'true';\n  };\n  \n  // 添加一个停止函数供外部安全调用\n  window.stopRhythmSafely = function() {\n    try {\n      setStorage('rhythmReadingActive', 'false');\n      setStorage('rhythmReadingPending', 'false');\n      \n      if (rhythmReader && typeof rhythmReader.stop === 'function') {\n        rhythmReader.stop();\n      }\n    } catch (e) {\n      console.error(\"停止节奏阅读出错\", e);\n    }\n  };\n  \n  // 设置页面加载监听器，确保页面转换后能恢复\n  function setupPageLoadListener() {\n    // DOM内容加载和完全加载的事件监听...\n    \n    // 改进的页面变化监测\n    const observer = new MutationObserver(function(mutations) {\n      // 检测到内容变化且有待处理的节奏阅读时\n      if (getStorage('rhythmReadingPending') === 'true') {\n        const contentChanges = mutations.some(m => \n          m.type === 'childList' && m.addedNodes.length > 5); // 使用更高的阈值，确保是真正的内容变化\n          \n        if (contentChanges) {\n          console.log(\"【节奏阅读】检测到大量DOM变化，可能是页面切换\");\n          \n          // 给页面一点时间稳定下来\n          setTimeout(() => {\n            if (getStorage('rhythmReadingPending') === 'true') {\n              console.log(\"【节奏阅读】页面内容变化后，尝试恢复阅读\");\n              setStorage('rhythmReadingPending', 'false');\n              \n              if (!rhythmReader.pageTransitionInProgress) {\n                rhythmReader.start();\n              }\n            }\n          }, 800);\n        }\n      }\n    });\n    \n    // 观察body变化\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  }\n  \n  // 设置页面加载监听器\n  setupPageLoadListener();\n  \n  // 检查是否需要立即恢复阅读状态\n  if (getStorage('rhythmReadingActive') === 'true') {\n    console.log(\"【节奏阅读】检测到之前的阅读状态，准备恢复\");\n    setStorage('rhythmReadingPending', 'false');\n    \n    setTimeout(function() {\n      rhythmReader.start();\n    }, 800);\n  }\n  \n  console.log(\"【节奏阅读】初始化完成\");\n})();\n\nconst App = () => {\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const autoReadGuideRef = useRef(null);\n  const autoReadIntervalRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  \n  // 新增自动阅读器状态\n  const [autoReaderState, setAutoReaderState] = useState({\n    currentIndex: 0,\n    charPositions: [],\n    intervalId: null,\n    speed: 300,\n    pageContainer: null,\n    isUserScrolling: false,\n    scrollTimeout: null,\n    contentLoaded: false\n  });\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n    \n    return () => {\n      // 清理自动阅读定时器\n      if (autoReadIntervalRef.current) {\n        clearInterval(autoReadIntervalRef.current);\n      }\n    };\n  }, []);\n  \n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async (file) => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      \n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n      \n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n      \n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n  \n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({ scale: 1.0 });\n      \n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      \n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      \n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async (textContent) => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n    \n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n    \n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n    \n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    \n    const lines = [...lineMap.values()];\n    \n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    \n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    \n    return hasTocKeywords || hasPageNumberPatterns || (shortLineRatio > 0.7 && numberLineRatio > 0.3);\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n    \n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    \n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n      \n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n      \n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n      \n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    \n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && \n              x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = (text) => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    \n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      \n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        \n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    \n    return result;\n  };\n\n  // 修改processContentPage函数\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      \n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch(mode) {\n        case 'normal':\n          // 普通模式 - 简单分段显示\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'static':\n          // 静态高亮模式 - 应用词性标注和颜色高亮\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'follow-mouse':\n          // 鼠标跟随高亮模式 - 分段落但不预先高亮，由鼠标事件触发高亮\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      \n      setContent(processedContent);\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async (file) => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n    \n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain') {\n      handleTxtFile(file);\n    } else {\n      alert('请上传PDF或TXT文件');\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = (container) => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    \n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n      \n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n      \n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          \n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n          \n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width/2,  // 水平中心\n            y: rect.bottom,               // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n    \n    // 过滤无效位置并排序\n    return positions\n      .filter(p => p.char.trim() !== '')\n      .sort((a, b) => {\n        // 先按行排序，同行按列排序\n        const yDiff = a.y - b.y;\n        if (Math.abs(yDiff) > 5) { // 5px阈值判断是否同一行\n          return yDiff;\n        }\n        return a.x - b.x;\n      });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    \n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - (containerVisibleHeight / 2);\n      \n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - (window.innerHeight / 2);\n      \n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    \n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n    \n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    \n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n    \n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length || // 已到末尾\n          positions[nextIndex].char.trim() === '' || // 下一个是空白\n          positions[nextIndex].y > charPosition.y + 5) { // 下一个在新行\n        return true;\n      }\n    }\n    \n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n    \n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n      \n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || \n          current.y > prev.y + 5) { // 有明显换行\n        break;\n      }\n      \n      start--;\n    }\n    \n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n      \n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      \n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n      \n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      \n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (window.autoReader.charPositions.length === 0) {\n      if (window.currentPage < window.totalPages) {\n        window.changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 重置索引到开头\n    window.autoReader.currentIndex = 0;\n    \n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    \n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n    \n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n    \n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none';\n      highlight.style.zIndex = '998';\n      contentContainer.appendChild(highlight);\n    }\n    \n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight &&\n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n    \n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20;\n    \n    // 尝试获取实际行高\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(window.autoReader.charPositions[i].y - window.autoReader.charPositions[i-1].y);\n        if (yDiff > 5) {\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n    \n    // 记录上次滚动的位置\n    let lastScrolledY = -1;\n    const scrollSafeZone = lineHeight * 2.5;\n    \n    // 设置字符大小的估计值\n    let charWidth = 20;\n    let charHeight = lineHeight * 0.8;\n    \n    // 尝试估计字符宽度\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        if (window.autoReader.charPositions[i].x !== window.autoReader.charPositions[i-1].x) {\n          const xDiff = Math.abs(window.autoReader.charPositions[i].x - window.autoReader.charPositions[i-1].x);\n          if (xDiff > 0 && xDiff < 50) {\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    \n    window.autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (window.autoReader.currentIndex < window.autoReader.charPositions.length && \n             window.autoReader.charPositions[window.autoReader.currentIndex]?.char.trim() === '') {\n        window.autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (window.autoReader.currentIndex >= window.autoReader.charPositions.length) {\n        if (window.currentPage < window.totalPages) {\n          window.changePage(1);\n          clearInterval(window.autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n\n      const pos = window.autoReader.charPositions[window.autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      \n      if (cursor && highlight) {\n        const contentRect = contentContainer.getBoundingClientRect();\n        \n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        \n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        \n        highlight.style.left = `${relativeX - charWidth/2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n        \n        // 滚动处理\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        \n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          \n          if (isContainerScrollable) {\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n            \n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            \n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = relativeY;\n            }\n          } else {\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n            \n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            \n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      \n      window.autoReader.currentIndex++;\n      \n    }, window.autoReader.speed);\n    \n    // 在停止自动阅读时清除所有高亮\n    window.autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n      \n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n      \n      // 调用清理函数\n      if (window.autoReader.cleanup) {\n        window.autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n    \n    // 重置翻页状态\n    window.autoReader.isPageChanging = false;\n    \n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n    \n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n    \n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n    \n    // 收集字符位置\n    window.autoReader.charPositions = getAllCharacterPositions(content);\n    \n    // 如果当前页没有内容，尝试翻页\n    if (window.autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !window.autoReader.isPageChanging) {\n        window.autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async (e) => {\n    const newMode = e.target.value;\n    \n    // 停止当前可能正在运行的自动阅读和节奏阅读\n    stopAutoReader();\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    \n    // 清理旧模式\n    cleanupDOM();\n    \n    // 更新状态\n    setReadingMode(newMode);\n    \n    // 应用新模式\n    if (pdfDocument && currentPage > 0) {\n      try {\n        const page = await pdfDocument.getPage(currentPage);\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        let processedContent = '';\n        \n        // 应用对应模式的文本处理\n        switch(newMode) {\n          case 'follow-mouse':\n            processedContent = formatTextForMouseFollow(extractedText);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlight(extractedText);\n            break;\n          case 'auto-reader':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          case 'rhythm':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          default:\n            processedContent = formatTextToHtml(extractedText);\n        }\n        \n        const contentArea = document.querySelector('.page-content');\n        if (contentArea) {\n          contentArea.textContent = '';\n          contentArea.innerHTML = processedContent;\n          \n          // 滚动到页面顶部\n          window.scrollTo(0, 0);\n          if (contentArea.scrollTo) {\n            contentArea.scrollTo(0, 0);\n          }\n          \n          // 立即初始化对应模式\n          if (newMode === 'auto-reader') {\n            setTimeout(initializeAutoReader, 50);\n          } else if (newMode === 'follow-mouse') {\n            setTimeout(initializeMouseFollow, 50);\n          } else if (newMode === 'rhythm') {\n            setTimeout(() => {\n              if (window.rhythmReader) {\n                window.rhythmReader.start();\n              }\n            }, 50);\n          }\n        }\n      } catch (error) {\n        console.error('应用新阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 1. 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll(\n      '.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line, .rhythm-char'\n    );\n    highlights.forEach(el => el.remove());\n    \n    // 2. 移除事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 克隆内容区域以彻底移除所有事件监听器\n      const cleanContent = contentArea.cloneNode(false);\n      cleanContent.innerHTML = contentArea.innerHTML;\n      contentArea.parentNode.replaceChild(cleanContent, contentArea);\n    }\n    \n    // 3. 重置段落结构\n      const paragraphs = document.querySelectorAll('.pdf-paragraph');\n      paragraphs.forEach(paragraph => {\n      // 创建新段落并保留基本结构\n      const newParagraph = document.createElement('p');\n      newParagraph.className = 'pdf-paragraph';\n      newParagraph.innerHTML = paragraph.innerHTML\n        .replace(/<span class=\"text-line\">/g, '')\n        .replace(/<\\/span>/g, '')\n        .replace(/<span class=\"rhythm-char\">/g, '')\n        .replace(/<\\/span>/g, '');\n      \n      // 移除特殊属性\n      newParagraph.removeAttribute('data-follow');\n      newParagraph.removeAttribute('style');\n      \n        if (paragraph.parentNode) {\n          paragraph.parentNode.replaceChild(newParagraph, paragraph);\n        }\n      });\n      \n    // 4. 清理自动阅读器\n    stopAutoReader();\n    \n    // 5. 移除节奏阅读速度滑块\n    const slider = document.getElementById('rhythm-speed-slider');\n    if (slider) slider.remove();\n  };\n\n  const handleAutoScroll = () => {\n    window.autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = (e) => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    // 清除所有现有高亮\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n    \n    const mouseTarget = document.elementFromPoint(e.clientX, e.clientY);\n    \n    if (mouseTarget && \n       (mouseTarget.classList.contains('pdf-paragraph') || \n        mouseTarget.tagName === 'P' || \n        mouseTarget.tagName === 'SPAN')) {\n      \n      const targetParagraph = mouseTarget.closest('.pdf-paragraph');\n      if (!targetParagraph) return;\n      \n      // 获取段落文本节点\n      const textNode = getTextNodeAtPosition(targetParagraph, e.clientX, e.clientY);\n      if (!textNode) return;\n      \n      // 获取精确的行位置和尺寸\n      const range = document.createRange();\n      range.selectNodeContents(textNode);\n      const rects = range.getClientRects();\n      \n      // 找到鼠标所在的具体行\n      let targetRect = null;\n      for (let i = 0; i < rects.length; i++) {\n        const rect = rects[i];\n        if (e.clientY >= rect.top && e.clientY <= rect.bottom) {\n          targetRect = rect;\n          break;\n        }\n      }\n      \n      if (targetRect) {\n        // 创建高亮元素\n        const lineHighlight = document.createElement('div');\n        lineHighlight.className = 'line-highlight mouse-highlight';\n        \n        // 计算相对于段落的位置\n        const paragraphRect = targetParagraph.getBoundingClientRect();\n        const top = targetRect.top - paragraphRect.top;\n        const left = targetRect.left - paragraphRect.left;\n        \n        // 设置高亮样式\n        lineHighlight.style.position = 'absolute';\n        lineHighlight.style.left = `${left}px`;\n        lineHighlight.style.top = `${top}px`;\n        lineHighlight.style.width = `${targetRect.width}px`;\n        lineHighlight.style.height = `${targetRect.height}px`;\n        lineHighlight.style.pointerEvents = 'none';\n        lineHighlight.style.backgroundColor = 'rgba(255, 165, 0, 0.3)';\n        lineHighlight.style.borderRadius = '4px';\n        lineHighlight.style.boxShadow = '0 0 8px rgba(255, 165, 0, 0.5)';\n        lineHighlight.style.zIndex = '5';\n        lineHighlight.style.transition = 'all 0.1s ease';\n        \n        // 确保段落有相对定位\n          targetParagraph.style.position = 'relative';\n        targetParagraph.appendChild(lineHighlight);\n      }\n    }\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 新增延迟补偿\n    setTimeout(() => {\n      addMouseFollowListeners();\n      \n      // 强制触发重排\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        void contentArea.offsetHeight;\n        \n        // 模拟鼠标移动事件\n        const fakeEvent = new MouseEvent('mousemove', {\n          clientX: window.innerWidth / 2,\n          clientY: window.innerHeight / 2,\n          bubbles: true\n        });\n        contentArea.dispatchEvent(fakeEvent);\n      }\n    }, 50);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = (delta) => {\n    window.autoReader.speed = Math.max(100, window.autoReader.speed + delta);\n    setAutoReaderState(prev => ({ ...prev, speed: window.autoReader.speed }));\n    \n    if (window.autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async (delta) => {\n    const newPage = currentPage + delta;\n    \n    if (newPage < 1 || newPage > totalPages) return;\n    \n    const wasAutoReading = readingMode === 'auto-reader' && window.autoReader.intervalId;\n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n    \n    // 如果正在自动阅读或节奏阅读，先停止\n    if (wasAutoReading) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n    }\n    \n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    \n    // 更新页码\n    setCurrentPage(newPage);\n    \n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n      // 按当前阅读模式处理内容\n      let processedContent = '';\n      switch(readingMode) {\n        case 'follow-mouse':\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'auto-reader':\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'rhythm':\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      \n      // 更新页面内容\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        contentArea.textContent = '';\n        contentArea.innerHTML = processedContent;\n        \n        // 滚动到页面顶部\n        window.scrollTo(0, 0);\n        if (contentArea.scrollTo) {\n          contentArea.scrollTo(0, 0);\n        }\n        \n        // 重新启动对应的阅读模式\n        if (wasAutoReading) {\n          setTimeout(initializeAutoReader, 50);\n        } else if (wasRhythmReading && window.rhythmReader) {\n          setTimeout(() => {\n            window.rhythmReader.start();\n          }, 50);\n        }\n      }\n    } catch (error) {\n      console.error('翻页失败:', error);\n    }\n  };\n\n  // 修改后的监听器设置函数\n  const addMouseFollowListeners = () => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    \n    // 清理旧的监听器\n    contentArea.removeEventListener('mousemove', handleMouseMove);\n    contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    \n    // 添加新的监听器\n    contentArea.addEventListener('mousemove', handleMouseMove);\n    contentArea.addEventListener('mouseleave', clearAllHighlights);\n    \n    // 确保所有段落都有正确的样式\n    document.querySelectorAll('.pdf-paragraph').forEach(p => {\n      p.style.position = 'relative';\n      p.style.lineHeight = '1.5';\n    });\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = (text) => {\n    // 分段\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    // 创建HTML内容\n    let htmlContent = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      htmlContent += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 应用静态高亮\n  const applyStaticHighlight = (text) => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    let htmlContent = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      // 新增强制清理逻辑\n      const cleanParagraph = paragraph\n        .replace(/<span class=\"text-line\">/g, '')\n        .replace(/<\\/span>/g, '');\n      \n      const highlightedText = processTextWithHighlight(cleanParagraph);\n      htmlContent += `<p class=\"pdf-paragraph\">${highlightedText}</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 格式化文本用于鼠标跟随高亮模式\n  const formatTextForMouseFollow = (text) => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    let htmlContent = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      // 将段落分割成行\n      const lines = paragraph.split('\\n').filter(line => line.trim());\n      htmlContent += `<p class=\"pdf-paragraph\" data-follow=\"true\" style=\"position: relative; line-height: 1.5;\">`;\n      \n      lines.forEach((line, i) => {\n        // 每行用span包裹\n        htmlContent += `<span class=\"text-line\" style=\"display: block;\">${line}</span>`;\n      });\n      \n      htmlContent += `</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 强制初始化字符位置（这是关键步骤！）\n  function forceInitReader() {\n    console.log(\"强制初始化阅读器...\");\n    \n    // 1. 如果autoReader或charPositions不存在，创建它们\n    if (typeof window.autoReader === 'undefined') {\n      window.autoReader = {\n        charPositions: [],\n        intervalId: null,\n        currentIndex: 0,\n        speed: 30\n      };\n    }\n    \n    // 2. 如果没有字符位置数据，尝试触发它的创建\n    if (!window.autoReader.charPositions || window.autoReader.charPositions.length === 0) {\n      console.log(\"未找到字符位置数据，尝试强制创建...\");\n      \n      // 直接使用scanTextPositionsSimple函数\n      scanTextPositionsSimple();\n    }\n    \n    return window.autoReader.charPositions && window.autoReader.charPositions.length > 0;\n  }\n\n  // 简单的文本位置扫描函数\n  function scanTextPositionsSimple() {\n    console.log(\"使用简单文本扫描...\");\n    \n    window.autoReader.charPositions = [];\n    const contentElement = document.querySelector('.page-content');\n    if (!contentElement) {\n      console.error(\"找不到内容容器\");\n      return;\n    }\n    \n    // 递归处理文本节点\n    function processTextNodes(element) {\n      if (element.nodeType === Node.TEXT_NODE) {\n        const text = element.textContent;\n        if (!text || text.trim() === '') return;\n        \n        // 获取元素的位置信息\n        const range = document.createRange();\n        \n        // 为每个字符创建一个独立的范围\n        for (let i = 0; i < text.length; i++) {\n          try {\n            range.setStart(element, i);\n            range.setEnd(element, i + 1);\n            \n            const rect = range.getBoundingClientRect();\n            if (rect.width > 0 && rect.height > 0) {\n              window.autoReader.charPositions.push({\n                char: text[i],\n                x: rect.left + rect.width/2,\n                y: rect.top + rect.height/2,\n                element: element.parentElement\n              });\n            }\n          } catch (e) {\n            console.warn(\"无法处理字符\", e);\n          }\n        }\n      } else if (element.nodeType === Node.ELEMENT_NODE) {\n        // 递归处理子元素\n        for (const child of element.childNodes) {\n          processTextNodes(child);\n        }\n      }\n    }\n    \n    processTextNodes(contentElement);\n    console.log(\"扫描完成，找到字符数量:\", window.autoReader.charPositions.length);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        <div className=\"logo\">\n          <h2>ADHD阅读助手</h2>\n        </div>\n        <label className=\"upload-btn\">\n          选择文件\n          <input\n            type=\"file\"\n            accept=\".pdf,.txt\"\n            onChange={handleFileUpload}\n            style={{ display: 'none' }}\n          />\n        </label>\n      </div>\n      <div className=\"main-content\">\n        <div className=\"header\">\n          <h1>ADHD阅读助手</h1>\n          <div className=\"controls\">\n            <div className=\"mode-selector\">\n              <select value={readingMode} onChange={handleReadingModeChange}>\n                <option value=\"normal\">普通模式</option>\n                <option value=\"static\">静态高亮模式</option>\n                <option value=\"follow-mouse\">鼠标跟随高亮</option>\n                <option value=\"auto-reader\">自动阅读器</option>\n                <option value=\"rhythm\">节奏阅读模式</option>\n              </select>\n            </div>\n            <div className=\"mode-selector\">\n              <select value={posMode} onChange={(e) => setPosMode(e.target.value)}>\n                <option value=\"none\">无词性标注</option>\n                <option value=\"noun\">名词标注</option>\n                <option value=\"all\">全词性标注</option>\n              </select>\n            </div>\n            {readingMode === 'auto-reader' && (\n              <div className=\"speed-control\">\n                <button onClick={() => adjustSpeed(-100)}>-</button>\n                <span>{autoReaderState.speed}ms</span>\n                <button onClick={() => adjustSpeed(100)}>+</button>\n              </div>\n            )}\n          </div>\n        </div>\n        <div className=\"page-content\">\n          {content ? (\n            <div dangerouslySetInnerHTML={{ __html: content }} />\n          ) : (\n            <div className=\"empty-state\">\n              <p>请上传PDF或TXT文件开始阅读</p>\n            </div>\n          )}\n        </div>\n        {content && (\n          <div className=\"nav-buttons\">\n            <button className=\"page-btn prev\" onClick={() => changePage(-1)} disabled={currentPage === 1}>\n              上一页\n            </button>\n            <span className=\"page-info\">\n              第 {currentPage} 页 / 共 {totalPages} 页\n            </span>\n            <button className=\"page-btn next\" onClick={() => changePage(1)} disabled={currentPage === totalPages}>\n              下一页\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}