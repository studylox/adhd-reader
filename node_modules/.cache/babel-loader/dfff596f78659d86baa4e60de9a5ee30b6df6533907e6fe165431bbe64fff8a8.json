{"ast":null,"code":"var _jsxFileName = \"D:\\\\adhd-read-helper\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 添加全局事件跟踪对象\nwindow.eventTracker = window.eventTracker || {\n  mouseFollowHandlers: []\n};\n\n// 自动阅读器全局对象\nwindow.autoReader = {\n  charPositions: [],\n  intervalId: null,\n  currentIndex: 0,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false,\n  cleanup: null\n};\n\n// 添加新的节奏阅读模式代码\n// 全局变量，确保在页面切换后仍然保持状态\nwindow.rhythmReaderGlobal = window.rhythmReaderGlobal || {\n  active: false,\n  speed: 300\n};\n\n// 节奏阅读模式 - 彻底重写版\n(function () {\n  // ======= 首先清除任何可能存在的旧版实现 =======\n  if (window.rhythmReader && typeof window.rhythmReader.stop === 'function') {\n    window.rhythmReader.stop();\n  }\n  if (window.rhythmReading && typeof window.rhythmReading.stop === 'function') {\n    window.rhythmReading.stop();\n  }\n\n  // 清除所有可能的存储项\n  ['rhythmReading', 'rhythmReadingActive', 'currentReadingMode', 'pendingRhythmMode'].forEach(key => {\n    try {\n      localStorage.removeItem(key);\n      sessionStorage.removeItem(key);\n    } catch (e) {}\n  });\n\n  // ======= 检查当前模式 =======\n  // 获取当前激活的阅读模式\n  function getCurrentMode() {\n    // 尝试从UI元素获取\n    const activeModeElement = document.querySelector('.reading-mode-active, [data-active=\"true\"]');\n    if (activeModeElement) {\n      const mode = activeModeElement.dataset.mode || activeModeElement.id;\n      return mode ? mode.toLowerCase() : '';\n    }\n    return '';\n  }\n\n  // 检查当前是否是节奏阅读模式\n  const currentMode = getCurrentMode();\n  const isRhythmMode = currentMode === 'rhythm' || currentMode === 'rhythmreading';\n  console.log(`当前模式: ${currentMode} - 是否为节奏阅读: ${isRhythmMode}`);\n\n  // ======= 节奏阅读功能定义 =======\n  const rhythmReader = {\n    active: false,\n    intervalId: null,\n    speed: 300,\n    currentIndex: 0,\n    readIndices: new Set(),\n    charElements: [],\n    // 启动节奏阅读 - 只能由模式切换函数调用\n    start: function () {\n      // 已经激活则不做任何事\n      if (this.active) return;\n\n      // 当前模式检查\n      if (!isCurrentlyRhythmMode()) {\n        console.log(\"无法启动：当前不是节奏阅读模式\");\n        return;\n      }\n      console.log(\"启动节奏阅读模式\");\n      this.active = true;\n\n      // 初始化文本\n      if (!this.initializeTextNodes()) {\n        console.error(\"无法初始化文本节点\");\n        this.active = false;\n        return;\n      }\n\n      // 重置阅读位置\n      this.currentIndex = 0;\n      this.readIndices.clear();\n\n      // 添加速度滑块\n      this.addSpeedSlider();\n\n      // 更新颜色\n      this.updateTextColors();\n\n      // 滚动到开始位置\n      this.scrollToCurrentChar();\n\n      // 设置阅读间隔\n      this.intervalId = setInterval(() => this.moveToNextChar(), this.speed);\n    },\n    // 停止节奏阅读\n    stop: function () {\n      if (!this.active) return;\n      console.log(\"停止节奏阅读模式\");\n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n      }\n      this.active = false;\n\n      // 恢复原始文本\n      this.restoreOriginalText();\n\n      // 移除速度滑块\n      const slider = document.getElementById('rhythm-speed-slider');\n      if (slider) slider.remove();\n    },\n    // 初始化文本节点\n    initializeTextNodes: function () {\n      // 重置字符元素数组\n      this.charElements = [];\n\n      // 获取内容容器 - 首先尝试找到主要内容区域\n      const contentSelectors = ['.page-content', 'article', 'main', '.article', '.content', '.main-content', '.post-content'];\n      let contentContainer = null;\n      for (const selector of contentSelectors) {\n        const element = document.querySelector(selector);\n        if (element && element.offsetParent !== null) {\n          contentContainer = element;\n          console.log(`找到内容容器: ${selector}`);\n          break;\n        }\n      }\n\n      // 如果没找到特定容器，使用body\n      if (!contentContainer) {\n        contentContainer = document.body;\n        console.log(\"使用document.body作为内容容器\");\n      }\n\n      // 查找所有文本节点并处理\n      const textNodes = [];\n      this.findTextNodes(contentContainer, textNodes);\n      if (textNodes.length === 0) {\n        console.error(\"未找到文本节点\");\n        return false;\n      }\n      console.log(`找到 ${textNodes.length} 个文本节点`);\n\n      // 为每个文本节点创建字符span\n      textNodes.forEach(node => {\n        const text = node.nodeValue;\n        if (!text || text.trim() === '') return;\n\n        // 创建文档片段来存放字符span\n        const fragment = document.createDocumentFragment();\n\n        // 为每个字符创建span\n        for (let i = 0; i < text.length; i++) {\n          const char = text[i];\n          const span = document.createElement('span');\n          span.textContent = char;\n          span.className = 'rhythm-char';\n          span.dataset.rhythmIndex = this.charElements.length;\n\n          // 如果是空白字符，添加一个标志\n          if (char.trim() === '') {\n            span.dataset.whitespace = 'true';\n          }\n\n          // 保持原始样式，不设置背景\n          span.style.display = 'inline';\n          span.style.margin = '0';\n          span.style.padding = '0';\n          span.style.border = 'none';\n          span.style.backgroundColor = 'transparent';\n          fragment.appendChild(span);\n          this.charElements.push(span);\n        }\n\n        // 替换原始节点\n        if (node.parentNode) {\n          node.parentNode.replaceChild(fragment, node);\n        }\n      });\n      console.log(`总共创建了 ${this.charElements.length} 个字符span`);\n      return this.charElements.length > 0;\n    },\n    // 查找文本节点 - 避免处理UI元素\n    findTextNodes: function (element, textNodes) {\n      // 排除UI元素的选择器列表\n      const uiSelectors = ['button', 'input', 'select', 'nav', 'header', 'footer', '.navigation', '.nav', '.menu', '.pagination', '.controls', '[role=\"navigation\"]', '[role=\"menu\"]', '[role=\"button\"]', '#rhythm-speed-slider', '.rhythm-char'];\n\n      // 检查元素是否为UI元素\n      const isUIElement = node => {\n        if (!(node instanceof Element)) return false;\n\n        // 检查元素标签\n        const excludeTags = ['BUTTON', 'INPUT', 'SELECT', 'NAV', 'HEADER', 'FOOTER'];\n        if (excludeTags.includes(node.tagName)) return true;\n\n        // 检查元素或其祖先是否匹配UI选择器\n        let current = node;\n        while (current && current !== document.body) {\n          // 检查ID和类名是否包含UI关键词\n          const id = (current.id || '').toLowerCase();\n          const className = (current.className || '').toLowerCase();\n          if (/nav|button|pag(e|ing)|next|prev/i.test(id) || /nav|button|pag(e|ing)|next|prev/i.test(className)) {\n            return true;\n          }\n\n          // 检查选择器匹配\n          for (const selector of uiSelectors) {\n            try {\n              if (current.matches && current.matches(selector)) {\n                return true;\n              }\n            } catch (e) {\n              // 忽略不支持的选择器错误\n            }\n          }\n          current = current.parentElement;\n        }\n        return false;\n      };\n\n      // 处理子节点\n      for (let i = 0; i < element.childNodes.length; i++) {\n        const node = element.childNodes[i];\n\n        // 如果是文本节点且有实际内容\n        if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() !== '') {\n          // 确保父元素不是UI元素\n          if (node.parentElement && !isUIElement(node.parentElement)) {\n            textNodes.push(node);\n          }\n        }\n        // 如果是元素节点且不是UI元素，递归处理\n        else if (node.nodeType === Node.ELEMENT_NODE && !isUIElement(node)) {\n          this.findTextNodes(node, textNodes);\n        }\n      }\n    },\n    // 更新文本颜色\n    updateTextColors: function () {\n      this.charElements.forEach((span, index) => {\n        let color;\n        let fontWeight = 'inherit';\n        if (index === this.currentIndex) {\n          color = '#00aa00';\n          fontWeight = 'bold';\n        } else if (index === this.currentIndex + 1 || index === this.currentIndex + 2) {\n          color = '#aaaaaa';\n        } else if (this.readIndices.has(index)) {\n          color = '#ffffff';\n        } else {\n          color = 'rgba(160, 160, 160, 0.25)';\n        }\n        span.style.color = color;\n        span.style.fontWeight = fontWeight;\n      });\n    },\n    // 移动到下一个字符\n    moveToNextChar: function () {\n      if (!this.active || this.charElements.length === 0) return;\n      this.readIndices.add(this.currentIndex);\n      do {\n        this.currentIndex++;\n        if (this.currentIndex >= this.charElements.length) {\n          if (!this.clickNextPageButton()) {\n            this.stop();\n          }\n          return;\n        }\n      } while (this.currentIndex < this.charElements.length && this.charElements[this.currentIndex] && this.charElements[this.currentIndex].dataset.whitespace === 'true');\n      this.updateTextColors();\n      this.scrollToCurrentChar();\n    },\n    // 滚动到当前字符\n    scrollToCurrentChar: function () {\n      const span = this.charElements[this.currentIndex];\n      if (!span) return;\n      const rect = span.getBoundingClientRect();\n      const lineHeight = parseInt(window.getComputedStyle(span).lineHeight) || Math.max(20, rect.height * 1.5);\n      const viewportHeight = window.innerHeight;\n      const idealPosition = viewportHeight * 0.4;\n      if (rect.top < idealPosition || rect.top > idealPosition + lineHeight * 2) {\n        window.scrollTo({\n          top: window.scrollY + rect.top - idealPosition,\n          behavior: 'smooth'\n        });\n      }\n    },\n    // 添加速度滑块\n    addSpeedSlider: function () {\n      let slider = document.getElementById('rhythm-speed-slider');\n      if (slider) slider.remove();\n      const container = document.createElement('div');\n      container.id = 'rhythm-speed-slider';\n      container.style.cssText = `\n        position: fixed;\n        top: 70px;\n        right: 20px;\n        background-color: rgba(0, 0, 0, 0.7);\n        padding: 10px;\n        border-radius: 5px;\n        box-shadow: 0 2px 5px rgba(0,0,0,0.2);\n        z-index: 10000;\n        display: flex;\n        align-items: center;\n        max-width: 300px;\n        color: white;\n      `;\n      const label = document.createElement('label');\n      label.textContent = '速度: ';\n      label.style.marginRight = '8px';\n      container.appendChild(label);\n      const input = document.createElement('input');\n      input.type = 'range';\n      input.min = '50';\n      input.max = '800';\n      input.step = '50';\n      input.value = this.speed;\n      input.style.width = '120px';\n      const valueDisplay = document.createElement('span');\n      valueDisplay.textContent = `${this.speed}ms`;\n      valueDisplay.style.marginLeft = '8px';\n      valueDisplay.style.minWidth = '60px';\n      input.addEventListener('input', () => {\n        const newSpeed = parseInt(input.value);\n        this.speed = newSpeed;\n        valueDisplay.textContent = `${newSpeed}ms`;\n        if (this.intervalId) {\n          clearInterval(this.intervalId);\n          this.intervalId = setInterval(() => this.moveToNextChar(), newSpeed);\n        }\n      });\n      container.appendChild(input);\n      container.appendChild(valueDisplay);\n      document.body.appendChild(container);\n    },\n    // 恢复原始文本\n    restoreOriginalText: function () {\n      const charSpans = document.querySelectorAll('.rhythm-char');\n      const parentNodeMap = new Map();\n      charSpans.forEach(span => {\n        const parent = span.parentNode;\n        if (!parent) return;\n        if (!parentNodeMap.has(parent)) {\n          parentNodeMap.set(parent, []);\n        }\n        parentNodeMap.get(parent).push(span);\n      });\n      parentNodeMap.forEach((spans, parent) => {\n        if (spans.length === 0) return;\n        spans.sort((a, b) => {\n          const indexA = parseInt(a.dataset.rhythmIndex || '0');\n          const indexB = parseInt(b.dataset.rhythmIndex || '0');\n          return indexA - indexB;\n        });\n        const groups = [];\n        let currentGroup = [spans[0]];\n        for (let i = 1; i < spans.length; i++) {\n          const prevIndex = parseInt(spans[i - 1].dataset.rhythmIndex || '0');\n          const currentIndex = parseInt(spans[i].dataset.rhythmIndex || '0');\n          if (currentIndex === prevIndex + 1 && spans[i].previousSibling === spans[i - 1]) {\n            currentGroup.push(spans[i]);\n          } else {\n            groups.push(currentGroup);\n            currentGroup = [spans[i]];\n          }\n        }\n        groups.push(currentGroup);\n        groups.forEach(group => {\n          if (group.length === 0) return;\n          try {\n            const text = group.map(span => span.textContent).join('');\n            const textNode = document.createTextNode(text);\n            if (group[0].parentNode === parent) {\n              parent.replaceChild(textNode, group[0]);\n              for (let i = 1; i < group.length; i++) {\n                if (group[i].parentNode === parent) {\n                  parent.removeChild(group[i]);\n                }\n              }\n            }\n          } catch (e) {\n            console.error(\"恢复文本时出错:\", e);\n          }\n        });\n      });\n      this.charElements = [];\n    },\n    // 点击下一页按钮\n    clickNextPageButton: function () {\n      const nextPageSelectors = ['button.next-page', 'button[aria-label=\"下一页\"]', 'a.next-page', 'a[aria-label=\"下一页\"]', '.next-page', '#next-page', '[aria-label=\"Next\"]', 'button.next', 'a.next'];\n      let nextPageButton = null;\n      for (const selector of nextPageSelectors) {\n        try {\n          const elements = document.querySelectorAll(selector);\n          for (const el of elements) {\n            if (el.offsetParent !== null) {\n              nextPageButton = el;\n              break;\n            }\n          }\n          if (nextPageButton) break;\n        } catch (e) {}\n      }\n      if (!nextPageButton) {\n        const buttons = document.querySelectorAll('button, a, div[role=\"button\"]');\n        for (const button of buttons) {\n          const text = (button.textContent || '').trim().toLowerCase();\n          if ((text.includes('下一页') || text.includes('next') || text === '>' || text === '→') && button.offsetParent !== null) {\n            nextPageButton = button;\n            break;\n          }\n        }\n      }\n      if (nextPageButton) {\n        if (this.intervalId) {\n          clearInterval(this.intervalId);\n          this.intervalId = null;\n        }\n        this.restoreOriginalText();\n        nextPageButton.click();\n        return true;\n      }\n      return false;\n    }\n  };\n\n  // 检查当前是否是节奏阅读模式\n  function isCurrentlyRhythmMode() {\n    const mode = getCurrentMode();\n    return mode === 'rhythm' || mode === 'rhythmreading';\n  }\n\n  // ======= 处理模式切换 =======\n  // 保存原始函数引用\n  const originalReadingModeChanged = window.readingModeChanged;\n\n  // 完全重写模式切换函数\n  window.readingModeChanged = function (mode) {\n    console.log(`模式变更: ${mode}`);\n\n    // 无论如何，先停止节奏阅读\n    rhythmReader.stop();\n\n    // 调用原始函数处理其他模式相关逻辑\n    if (typeof originalReadingModeChanged === 'function') {\n      try {\n        originalReadingModeChanged(mode);\n      } catch (e) {\n        console.error(\"调用原始模式函数出错\", e);\n      }\n    }\n\n    // 等待UI更新完成\n    setTimeout(() => {\n      // 当前模式是否为节奏阅读\n      if (mode === 'rhythm' || mode === 'rhythmreading') {\n        console.log(\"选择了节奏阅读模式，即将启动\");\n        // 再次检查UI确认\n        if (isCurrentlyRhythmMode()) {\n          rhythmReader.start();\n        }\n      }\n    }, 100);\n  };\n\n  // 暴露到全局\n  window.rhythmReader = rhythmReader;\n\n  // ======= 初始执行部分 =======\n  // 只有当前确实是节奏阅读模式时才启动\n  if (isRhythmMode) {\n    console.log(\"当前已是节奏阅读模式，准备启动\");\n    // 延迟启动确保页面加载完成\n    setTimeout(() => rhythmReader.start(), 300);\n  } else {\n    console.log(\"当前不是节奏阅读模式，不会自动启动\");\n  }\n})();\n\n// 更新初始化函数\nconst initializeRhythmReading = () => {\n  // 不再自动初始化，而是等待用户选择\n  console.log(\"节奏阅读模式准备就绪，等待用户选择\");\n};\n\n// 更新启动函数\nconst startRhythmReading = () => {\n  if (window.rhythmReader && typeof window.rhythmReader.start === 'function') {\n    window.rhythmReader.start();\n  }\n};\nconst App = () => {\n  _s();\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  const [isTableOfContents, setIsTableOfContents] = useState(false);\n\n  // 实现缺失的函数\n  // 应用深色背景\n  const applyDarkBackground = () => {\n    document.body.classList.add('dark-background');\n\n    // 添加必要的CSS样式\n    if (!document.getElementById('dark-background-style')) {\n      const style = document.createElement('style');\n      style.id = 'dark-background-style';\n      style.textContent = `\n        .dark-background {\n          background-color: #000 !important;\n        }\n        .dark-background .sidebar {\n          background: linear-gradient(145deg, #4834d4, #341f9e) !important;\n        }\n        .dark-background .page-content {\n          background-color: #000 !important;\n        }\n        .dark-background .main-content {\n          background-color: #000 !important;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 恢复正常背景\n  const restoreDarkBackground = () => {\n    document.body.classList.remove('dark-background');\n  };\n\n  // 添加裸眼3D样式\n  const addNakedEye3DStyles = () => {\n    if (!document.getElementById('naked-eye-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'naked-eye-3d-style';\n      style.textContent = `\n        .naked-eye-3d-container {\n          position: relative;\n          perspective: 800px;\n          width: 100%;\n        }\n        \n        .naked-eye-3d-text {\n          display: inline-block;\n          animation: float 3s ease-in-out infinite;\n          text-shadow: 0 0 5px rgba(255,255,255,0.3);\n          padding: 0 4px;\n          color: white;\n          filter: drop-shadow(0 0 5px rgba(120, 220, 255, 0.6));\n        }\n        \n        @keyframes float {\n          0% { transform: translateZ(0px); }\n          50% { transform: translateZ(20px); }\n          100% { transform: translateZ(0px); }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 添加舒适3D样式\n  const addComfortable3DStyles = () => {\n    if (!document.getElementById('comfortable-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'comfortable-3d-style';\n      style.textContent = `\n        .emboss-3d-text {\n          color: #fff;\n          text-shadow: \n            1px 1px 1px rgba(0,0,0,0.5),\n            -1px -1px 1px rgba(255,255,255,0.5);\n          letter-spacing: 1.5px;\n          font-weight: 500;\n        }\n        \n        .float-3d-text {\n          display: inline-block;\n          transform-style: preserve-3d;\n          transform: perspective(500px) translateZ(10px);\n          text-shadow: 0 2px 5px rgba(0,0,0,0.5);\n        }\n        \n        .gradient-3d-text {\n          display: inline-block;\n          background: linear-gradient(to bottom, #fff, #aaa);\n          -webkit-background-clip: text;\n          -webkit-text-fill-color: transparent;\n          text-shadow: 0 2px 4px rgba(0,0,0,0.3);\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 添加闪读样式\n  const addFlashReadingStyles = () => {\n    if (!document.getElementById('flash-reading-style')) {\n      const style = document.createElement('style');\n      style.id = 'flash-reading-style';\n      style.textContent = `\n        .flash-reading-container {\n          position: relative;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          z-index: 1000;\n          padding: 20px;\n        }\n        \n        .flash-reading-display-wrapper {\n          position: relative;\n          margin: 40px 0;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        \n        .flash-reading-display {\n          font-size: 36px;\n          font-weight: bold;\n          text-align: center;\n          color: white;\n          min-height: 80px;\n          max-width: 90%;\n          padding: 20px 40px;\n          position: relative; /* 允许绝对定位的覆盖层 */\n          z-index: 2;\n        }\n        \n        .flash-reading-cover {\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(128, 128, 128, 0.6); /* 灰色遮罩 */\n          border-radius: 8px;\n          z-index: 1; /* 确保在文本后面 */\n        }\n        \n        .flash-reading-controls {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          gap: 20px;\n          margin-bottom: 20px;\n          width: 100%;\n        }\n        \n        .flash-reading-buttons {\n          display: flex;\n          gap: 10px;\n          flex-wrap: wrap;\n          justify-content: center;\n        }\n        \n        .flash-reading-speed {\n          display: flex;\n          align-items: center;\n          color: white;\n          width: 80%;\n          max-width: 400px;\n          gap: 10px;\n        }\n        \n        .flash-reading-slider {\n          flex: 1;\n          height: 8px;\n          appearance: none;\n          background: #555;\n          border-radius: 4px;\n          outline: none;\n        }\n        \n        .flash-reading-slider::-webkit-slider-thumb {\n          appearance: none;\n          width: 20px;\n          height: 20px;\n          border-radius: 50%;\n          background: #6c5ce7;\n          cursor: pointer;\n        }\n        \n        .flash-reading-btn {\n          padding: 10px 20px;\n          border: none;\n          border-radius: 4px;\n          background-color: #6c5ce7;\n          color: white;\n          font-size: 16px;\n          cursor: pointer;\n          transition: background-color 0.2s;\n        }\n        \n        .flash-reading-btn:hover {\n          background-color: #5344c0;\n        }\n        \n        .flash-reading-btn:disabled {\n          background-color: #aaa;\n          cursor: not-allowed;\n        }\n        \n        .flash-reading-progress {\n          color: white;\n          font-size: 14px;\n          margin-top: 10px;\n        }\n        .flash-reading-speed-note {\n          font-size: 12px;\n          color: #ccc;\n          margin-left: 5px;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 初始化闪读模式\n  const initializeFlashReading = () => {\n    // 添加样式\n    addFlashReadingStyles();\n    const sentences = window.flashReadingSentences;\n    if (!sentences || !Array.isArray(sentences) || sentences.length === 0) {\n      console.error('闪读模式: 未找到句子数据');\n      return;\n    }\n\n    // 获取全局UI元素\n    const display = document.getElementById('flash-reading-display');\n    const speedSlider = document.getElementById('flash-reading-speed');\n    const speedValue = document.getElementById('flash-reading-speed-value');\n    const playButton = document.getElementById('flash-reading-play');\n    const pauseButton = document.getElementById('flash-reading-pause');\n    const stopButton = document.getElementById('flash-reading-stop');\n    const prevButton = document.getElementById('flash-reading-prev-sentence');\n    const nextButton = document.getElementById('flash-reading-next-sentence');\n    const progress = document.getElementById('flash-reading-progress');\n    const cover = document.querySelector('.flash-reading-cover');\n    if (!display || !speedSlider || !speedValue || !playButton || !pauseButton || !stopButton || !prevButton || !nextButton || !progress || !cover) {\n      console.error('闪读模式: 未找到UI元素');\n      return;\n    }\n\n    // 创建闪读控制器\n    window.flashReader = {\n      sentences: sentences,\n      currentIndex: 0,\n      interval: null,\n      speed: parseInt(speedSlider.value),\n      isPlaying: false,\n      // 开始闪读\n      start() {\n        if (this.interval) {\n          clearInterval(this.interval);\n        }\n        this.isPlaying = true;\n        playButton.disabled = true;\n        pauseButton.disabled = false;\n        progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n\n        // 显示当前句子\n        this.displayCurrentSentence();\n\n        // 设置闪读间隔\n        this.interval = setInterval(() => {\n          this.currentIndex++;\n          if (this.currentIndex >= this.sentences.length) {\n            this.stop();\n            display.textContent = '阅读完成';\n            return;\n          }\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }, this.speed);\n      },\n      // 显示当前句子\n      displayCurrentSentence() {\n        if (this.currentIndex < this.sentences.length) {\n          const currentSentence = this.sentences[this.currentIndex];\n          display.textContent = currentSentence;\n          display.style.color = 'white'; // 确保文本为白色\n\n          // 调整背景以适应内容\n          setTimeout(() => {\n            const displayRect = display.getBoundingClientRect();\n            // 确保覆盖层完全包裹文本\n            cover.style.width = `${displayRect.width}px`;\n            cover.style.height = `${displayRect.height}px`;\n          }, 10);\n        }\n      },\n      // 暂停闪读\n      pause() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n      },\n      // 停止闪读\n      stop() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        this.currentIndex = 0;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n        display.textContent = '准备开始';\n        progress.textContent = `进度：0 / ${this.sentences.length}`; // 重置进度\n      },\n      // 更新速度\n      updateSpeed(newSpeed) {\n        this.speed = newSpeed;\n        speedValue.textContent = `${newSpeed} ms`;\n\n        // 保存速度设置到本地存储\n        localStorage.setItem('flash-reading-speed', newSpeed);\n\n        // 如果正在播放，重新开始以应用新速度\n        if (this.isPlaying) {\n          clearInterval(this.interval);\n          this.start(); // 直接调用start方法重新开始\n        }\n      },\n      // 返回上一句\n      prevSentence() {\n        if (this.currentIndex > 0) {\n          this.currentIndex--;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n      // 跳到下一句\n      nextSentence() {\n        if (this.currentIndex < this.sentences.length - 1) {\n          this.currentIndex++;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n      // 清理资源\n      cleanup() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        this.currentIndex = 0;\n      }\n    };\n\n    // 添加事件监听器\n    playButton.addEventListener('click', () => {\n      window.flashReader.start();\n    });\n    pauseButton.addEventListener('click', () => {\n      window.flashReader.pause();\n    });\n    stopButton.addEventListener('click', () => {\n      window.flashReader.stop();\n    });\n    speedSlider.addEventListener('input', e => {\n      const newSpeed = parseInt(e.target.value);\n      window.flashReader.updateSpeed(newSpeed);\n    });\n    prevButton.addEventListener('click', () => {\n      window.flashReader.prevSentence();\n    });\n    nextButton.addEventListener('click', () => {\n      window.flashReader.nextSentence();\n    });\n\n    // 初始化\n    const savedSpeed = localStorage.getItem('flash-reading-speed');\n    const initialSpeed = savedSpeed ? parseInt(savedSpeed) : 1000;\n    speedSlider.value = initialSpeed;\n    window.flashReader.updateSpeed(initialSpeed);\n    console.log('闪读模式已初始化，共 ' + sentences.length + ' 个句子');\n  };\n\n  // 创建闪读内容\n  const createFlashReadingContent = text => {\n    return `<div class=\"flash-reading-content\">\n      <p>${text}</p>\n    </div>`;\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 格式化文本用于鼠标跟随\n  const formatTextForMouseFollow = text => {\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个单词添加span，以便于添加高亮效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"follow-word\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\" data-follow=\"true\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用静态高亮\n  const applyStaticHighlight = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为单词随机添加颜色高亮\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      let lastColor = null;\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n          return;\n        }\n\n        // 随机决定是否高亮和使用哪种颜色\n        if (Math.random() < 0.7) {\n          let color;\n          if (lastColor === 'red') {\n            color = 'blue';\n          } else if (lastColor === 'blue') {\n            color = 'red';\n          } else {\n            color = Math.random() < 0.5 ? 'red' : 'blue';\n          }\n          lastColor = color;\n          processedParagraph += `<span class=\"highlight-word ${color}\">${word}</span>`;\n        } else {\n          processedParagraph += word;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用裸眼3D效果\n  const applyNakedEye3dEffect = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content naked-eye-3d-container\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个词添加3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"naked-eye-3d-text\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用舒适3D效果\n  const applyComfortable3dEffect = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个词随机应用不同的3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          processedParagraph += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 初始化裸眼3D\n  const initializeNakedEye3D = () => {\n    // 为裸眼3D文本添加动画\n    const textElements = document.querySelectorAll('.naked-eye-3d-text');\n    textElements.forEach((element, index) => {\n      // 添加随机延迟，使动画错开\n      const delay = Math.random() * 2;\n      element.style.animationDelay = `${delay}s`;\n    });\n  };\n\n  // 添加鼠标跟随监听器\n  const addMouseFollowListeners = () => {\n    // 获取内容容器\n    const contentArea = document.querySelector('.mouse-follow-content');\n    if (!contentArea) {\n      console.error('未找到鼠标跟随内容区域');\n      return;\n    }\n\n    // 上一个高亮的行\n    let lastHighlightedLine = null;\n\n    // 监听鼠标移动 - 精确的行检测\n    const mouseMoveHandler = e => {\n      // 获取鼠标位置\n      const mouseY = e.clientY;\n\n      // 获取所有行\n      const allLines = contentArea.querySelectorAll('.follow-line');\n      let foundLine = null;\n      let minDistance = Infinity;\n\n      // 寻找鼠标所在的精确行\n      allLines.forEach(line => {\n        const rect = line.getBoundingClientRect();\n        const lineCenter = rect.top + rect.height / 2;\n        const distance = Math.abs(mouseY - lineCenter);\n\n        // 如果鼠标在行范围内，计算到行中心的距离\n        if (mouseY >= rect.top && mouseY <= rect.bottom) {\n          if (distance < minDistance) {\n            minDistance = distance;\n            foundLine = line;\n          }\n        }\n      });\n\n      // 更新高亮状态\n      if (lastHighlightedLine && lastHighlightedLine !== foundLine) {\n        // 移除旧高亮\n        lastHighlightedLine.classList.remove('highlighted');\n      }\n      if (foundLine) {\n        // 添加新高亮\n        foundLine.classList.add('highlighted');\n        lastHighlightedLine = foundLine;\n\n        // 调试输出\n        console.log('当前高亮行:', foundLine.textContent.substring(0, 30) + '...');\n      } else if (lastHighlightedLine) {\n        // 如果没有找到新行，且有上一个高亮行，移除它\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n\n    // 鼠标离开处理\n    const mouseLeaveHandler = () => {\n      // 清除当前高亮\n      if (lastHighlightedLine) {\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n\n    // 存储处理函数引用\n    window.eventTracker = window.eventTracker || {\n      mouseFollowHandlers: []\n    };\n    window.eventTracker.mouseFollowHandlers.push({\n      element: contentArea,\n      event: 'mousemove',\n      handler: mouseMoveHandler\n    }, {\n      element: contentArea,\n      event: 'mouseleave',\n      handler: mouseLeaveHandler\n    });\n\n    // 添加事件监听器\n    contentArea.addEventListener('mousemove', mouseMoveHandler);\n    contentArea.addEventListener('mouseleave', mouseLeaveHandler);\n    console.log('改进的鼠标跟随监听器已初始化');\n  };\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n  }, []);\n\n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async file => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n\n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n\n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n\n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({\n        scale: 1.0\n      });\n\n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async textContent => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n\n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n\n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n\n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    const lines = [...lineMap.values()];\n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    return hasTocKeywords || hasPageNumberPatterns || shortLineRatio > 0.7 && numberLineRatio > 0.3;\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n\n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n\n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n\n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n\n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = text => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    return result;\n  };\n\n  // 处理内容页面 - 按句子划分段落\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n\n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 按句子划分内容（句号、问号、感叹号等作为分隔符）\n      const sentences = splitIntoSentences(extractedText);\n\n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch (mode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          // 使用ADHD友好的静态高亮处理\n          console.log('应用ADHD友好的静态高亮模式');\n          processedContent = formatSimpleHighlightedText(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'rhythm':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          processedContent = createFlashReadingContentFromSentences(sentences);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n      setContent(processedContent);\n\n      // 如果是静态高亮模式，添加延时验证检查\n      if (mode === 'static') {\n        setTimeout(() => {\n          const contentArea = document.querySelector('.adhd-highlight-mode');\n          if (contentArea) {\n            console.log('静态高亮模式元素存在');\n            const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n            console.log(`找到 ${paragraphs.length} 个段落`);\n\n            // 检查样式是否正确应用\n            if (paragraphs.length > 0) {\n              const firstPara = paragraphs[0];\n              const styles = window.getComputedStyle(firstPara);\n              console.log('段落应用的样式:', {\n                color: styles.color,\n                backgroundColor: styles.backgroundColor,\n                fontFamily: styles.fontFamily,\n                fontSize: styles.fontSize\n              });\n            }\n          }\n        }, 200);\n      }\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 将文本分割成句子\n  const splitIntoSentences = text => {\n    // 匹配句号、问号、感叹号后跟空格或结束的模式\n    // 支持中英文标点符号\n    const sentenceRegex = /([.!?。！？；;]+\\s*)/g;\n\n    // 分割文本成句子\n    const sentences = [];\n    let lastIndex = 0;\n    let match;\n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const sentence = text.substring(lastIndex, endIndex).trim();\n\n      // 避免添加空句子\n      if (sentence) {\n        sentences.push(sentence);\n      }\n      lastIndex = endIndex;\n    }\n\n    // 处理最后一部分（如果没有以句号等结尾）\n    if (lastIndex < text.length) {\n      const lastSentence = text.substring(lastIndex).trim();\n      if (lastSentence) {\n        sentences.push(lastSentence);\n      }\n    }\n    return sentences;\n  };\n\n  // 专门为闪读模式分割文本，以任意标点符号为分隔点\n  const splitIntoFlashReadingSegments = text => {\n    // 匹配任意标点符号包括中英文标点\n    const sentenceRegex = /([,.!?:;，。！？：；、]+\\s*)/g;\n\n    // 分割文本成短句\n    const segments = [];\n    let lastIndex = 0;\n    let match;\n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const segment = text.substring(lastIndex, endIndex).trim();\n\n      // 避免添加空段落\n      if (segment) {\n        segments.push(segment);\n      }\n      lastIndex = endIndex;\n    }\n\n    // 处理最后一部分（如果没有以标点符号结尾）\n    if (lastIndex < text.length) {\n      const lastSegment = text.substring(lastIndex).trim();\n      if (lastSegment) {\n        segments.push(lastSegment);\n      }\n    }\n    return segments;\n  };\n\n  // 格式化句子为HTML\n  const formatSentencesToHtml = sentences => {\n    let html = '<div class=\"pdf-content\">';\n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${sentence}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为句子应用静态高亮\n  const applyStaticHighlightToSentences = sentences => {\n    let html = '<div class=\"pdf-content adhd-content\">';\n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n\n      // 简单地为句子添加特定样式的class\n      html += `<p class=\"pdf-paragraph adhd-sentence\">${sentence}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为鼠标跟随模式格式化句子\n  const formatSentencesForMouseFollow = sentences => {\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    sentences.forEach((sentence, index) => {\n      if (sentence.trim() === '') return;\n\n      // 每个句子作为独立行，使用div而不是p标签\n      html += `<div class=\"follow-line\" data-line=\"${index}\" data-sentence=\"${sentence.substring(0, 20)}...\" style=\"color: inherit;\">${sentence}</div>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为舒适3D模式格式化句子\n  const applyComfortable3dEffectToSentences = sentences => {\n    let html = '<div class=\"pdf-content\">';\n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n\n      // 为每个词随机应用不同的3D效果\n      const words = sentence.split(/(\\s+)/);\n      let processedSentence = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedSentence += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          processedSentence += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedSentence}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为闪读模式创建内容\n  const createFlashReadingContentFromSentences = sentences => {\n    // 储存句子到全局变量，用于后续显示\n    window.flashReadingSentences = sentences;\n\n    // 返回闪读界面的HTML结构\n    return `\n      <div class=\"flash-reading-container\">\n        <div class=\"flash-reading-controls\">\n          <div class=\"flash-reading-buttons\">\n            <button id=\"flash-reading-prev-sentence\" class=\"flash-reading-btn\">上一句</button>\n            <button id=\"flash-reading-play\" class=\"flash-reading-btn\">开始</button>\n            <button id=\"flash-reading-pause\" class=\"flash-reading-btn\" disabled>暂停</button>\n            <button id=\"flash-reading-stop\" class=\"flash-reading-btn\">停止</button>\n            <button id=\"flash-reading-next-sentence\" class=\"flash-reading-btn\">下一句</button>\n          </div>\n          <div class=\"flash-reading-speed\">\n            <span>速度：</span>\n            <input type=\"range\" id=\"flash-reading-speed\" min=\"300\" max=\"1700\" step=\"50\" value=\"1000\" class=\"flash-reading-slider\">\n            <span id=\"flash-reading-speed-value\">1000 ms</span>\n            <span class=\"flash-reading-speed-note\">（数值越小，切换越快）</span>\n          </div>\n          <div class=\"flash-reading-progress\">\n            <span id=\"flash-reading-progress\">进度：0 / ${sentences.length}</span>\n          </div>\n        </div>\n        <div class=\"flash-reading-display-wrapper\">\n          <div class=\"flash-reading-cover\"></div> <!-- 这里是闪卡 -->\n          <div id=\"flash-reading-display\" class=\"flash-reading-display\">准备开始</div>\n        </div>\n      </div>`;\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async file => {\n    try {\n      const text = await file.text();\n\n      // 根据阅读模式选择不同的处理方式\n      let processedContent = '';\n      if (readingMode === 'flash-reading') {\n        // 闪读模式下使用特定的分割函数\n        const segments = splitIntoFlashReadingSegments(text);\n        processedContent = createFlashReadingContentFromSentences(segments);\n\n        // 初始化闪读模式\n        setTimeout(() => {\n          initializeFlashReading();\n        }, 100);\n      } else {\n        // 其他模式使用默认的分割方式\n        const sentences = splitIntoSentences(text);\n        switch (readingMode) {\n          case 'normal':\n            processedContent = formatSentencesToHtml(sentences);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlightToSentences(sentences);\n            break;\n          case 'follow-mouse':\n            processedContent = formatSentencesForMouseFollow(sentences);\n            break;\n          case 'comfortable-3d':\n            processedContent = applyComfortable3dEffectToSentences(sentences);\n            break;\n          default:\n            processedContent = formatSentencesToHtml(sentences);\n        }\n      }\n\n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n\n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setContent('<div class=\"error-message\">TXT文件处理失败</div>');\n    }\n  };\n\n  // 处理Markdown文件\n  const handleMarkdownFile = async file => {\n    try {\n      const text = await file.text();\n\n      // 使用marked库转换markdown为HTML\n      let html = '';\n      try {\n        if (window.marked) {\n          html = window.marked.parse(text);\n        } else {\n          // 如果没有marked库，简单地拆分为段落\n          html = `<div>${text.split(\"\\n\\n\").map(p => `<p>${p}</p>`).join(\"\")}</div>`;\n        }\n      } catch (parseError) {\n        console.error('Markdown解析错误:', parseError);\n        html = `<div>${text}</div>`;\n      }\n\n      // 提取纯文本内容\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = html;\n      const plainText = tempDiv.textContent || tempDiv.innerText || '';\n\n      // 分割文本为句子\n      const sentences = splitIntoSentences(plainText);\n\n      // 根据当前阅读模式处理内容\n      let processedContent = '';\n      switch (readingMode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlightToSentences(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          // 使用特定的闪读分割函数重新处理文本\n          const segments = splitIntoFlashReadingSegments(plainText);\n          processedContent = createFlashReadingContentFromSentences(segments);\n\n          // 初始化闪读模式\n          setTimeout(() => {\n            initializeFlashReading();\n          }, 100);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n\n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n\n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('Markdown处理错误:', error);\n      setContent('<div class=\"error-message\">Markdown文件处理失败</div>');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async e => {\n    const uploadedFile = e.target.files[0];\n    if (!uploadedFile) return;\n    setLoading(true);\n    setFileName(uploadedFile.name);\n    try {\n      if (uploadedFile.type === 'application/pdf') {\n        await handlePdfFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/plain' || uploadedFile.name.endsWith('.txt')) {\n        await handleTxtFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/markdown' || uploadedFile.name.endsWith('.md')) {\n        await handleMarkdownFile(uploadedFile);\n      } else {\n        setContent('<div class=\"error-message\">不支持的文件格式</div>');\n      }\n    } catch (error) {\n      console.error('处理文件时出错:', error);\n      setContent('<div class=\"error-message\">处理文件时出错</div>');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = container => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n\n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n\n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n\n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width / 2,\n            // 水平中心\n            y: rect.bottom,\n            // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n\n    // 过滤无效位置并排序\n    return positions.filter(p => p.char.trim() !== '').sort((a, b) => {\n      // 先按行排序，同行按列排序\n      const yDiff = a.y - b.y;\n      if (Math.abs(yDiff) > 5) {\n        // 5px阈值判断是否同一行\n        return yDiff;\n      }\n      return a.x - b.x;\n    });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n\n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - containerVisibleHeight / 2;\n\n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - window.innerHeight / 2;\n\n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n\n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n\n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length ||\n      // 已到末尾\n      positions[nextIndex].char.trim() === '' ||\n      // 下一个是空白\n      positions[nextIndex].y > charPosition.y + 5) {\n        // 下一个在新行\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n\n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n\n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || current.y > prev.y + 5) {\n        // 有明显换行\n        break;\n      }\n      start--;\n    }\n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n\n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n\n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (window.autoReader.charPositions.length === 0) {\n      if (window.currentPage < window.totalPages) {\n        window.changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 重置索引到开头\n    window.autoReader.currentIndex = 0;\n\n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n\n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n\n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none';\n      highlight.style.zIndex = '998';\n      contentContainer.appendChild(highlight);\n    }\n\n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n\n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20;\n\n    // 尝试获取实际行高\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(window.autoReader.charPositions[i].y - window.autoReader.charPositions[i - 1].y);\n        if (yDiff > 5) {\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n\n    // 记录上次滚动的位置\n    let lastScrolledY = -1;\n    const scrollSafeZone = lineHeight * 2.5;\n\n    // 设置字符大小的估计值\n    let charWidth = 20;\n    let charHeight = lineHeight * 0.8;\n\n    // 尝试估计字符宽度\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        if (window.autoReader.charPositions[i].x !== window.autoReader.charPositions[i - 1].x) {\n          const xDiff = Math.abs(window.autoReader.charPositions[i].x - window.autoReader.charPositions[i - 1].x);\n          if (xDiff > 0 && xDiff < 50) {\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    window.autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (window.autoReader.currentIndex < window.autoReader.charPositions.length && ((_window$autoReader$ch = window.autoReader.charPositions[window.autoReader.currentIndex]) === null || _window$autoReader$ch === void 0 ? void 0 : _window$autoReader$ch.char.trim()) === '') {\n        var _window$autoReader$ch;\n        window.autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (window.autoReader.currentIndex >= window.autoReader.charPositions.length) {\n        if (window.currentPage < window.totalPages) {\n          window.changePage(1);\n          clearInterval(window.autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n      const pos = window.autoReader.charPositions[window.autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      if (cursor && highlight) {\n        const contentRect = contentContainer.getBoundingClientRect();\n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        highlight.style.left = `${relativeX - charWidth / 2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n\n        // 滚动处理\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          if (isContainerScrollable) {\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = relativeY;\n            }\n          } else {\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      window.autoReader.currentIndex++;\n    }, window.autoReader.speed);\n\n    // 在停止自动阅读时清除所有高亮\n    window.autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n\n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n\n      // 调用清理函数\n      if (window.autoReader.cleanup) {\n        window.autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n\n    // 重置翻页状态\n    window.autoReader.isPageChanging = false;\n\n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n\n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n\n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n\n    // 收集字符位置\n    window.autoReader.charPositions = getAllCharacterPositions(content);\n\n    // 如果当前页没有内容，尝试翻页\n    if (window.autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !window.autoReader.isPageChanging) {\n        window.autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async e => {\n    const newMode = e.target.value;\n    const prevMode = readingMode;\n    console.log(`切换阅读模式: 从 ${prevMode} 到 ${newMode}`);\n\n    // 更新状态\n    setReadingMode(newMode);\n\n    // 如果有PDF文档和当前页，重新处理当前页内容\n    if (pdfDocument && currentPage > 0) {\n      try {\n        console.log('重新处理当前页面内容');\n        const page = await pdfDocument.getPage(currentPage);\n\n        // 不使用任何额外处理，直接使用最原始的方式重新加载页面\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n\n        // 根据当前模式设置内容\n        if (newMode === 'static') {\n          // 静态高亮模式 - 使用改进的句子处理\n          const html = formatSimpleHighlightedText(sentences);\n          console.log('设置静态高亮内容');\n          setContent(html);\n\n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n            if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n\n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n\n                // 验证文字颜色\n                if (styles.color === 'rgb(51, 51, 51)' || styles.color === '#333333') {\n                  console.log('文字颜色正确应用');\n                } else {\n                  console.warn('文字颜色可能未正确应用:', styles.color);\n                }\n              }\n            } else {\n              console.error('未找到静态高亮模式内容区域');\n            }\n          }, 200);\n        } else if (newMode === 'flash-reading') {\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n\n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n\n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n        } else {\n          // 其他模式保持不变\n          const handler = getContentHandlerForMode(newMode);\n          const processedContent = handler(sentences);\n          setContent(processedContent);\n        }\n      } catch (error) {\n        console.error('应用阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 首先确保移除鼠标跟随监听器\n    removeMouseFollowListeners();\n\n    // 清理节奏阅读器\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n\n    // 清理闪读器\n    if (window.flashReader) {\n      window.flashReader.cleanup();\n    }\n\n    // 清理舒适3D效果\n    const comfortable3DElements = document.querySelectorAll('.emboss-3d-text, .float-3d-text, .gradient-3d-text');\n    comfortable3DElements.forEach(el => el.remove());\n\n    // 清理闪读模式元素\n    const flashReadingElements = document.querySelectorAll('.flash-reading-container, .flash-reading-display, .flash-reading-controls');\n    flashReadingElements.forEach(el => el.remove());\n\n    // 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll('.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line, .rhythm-char');\n    highlights.forEach(el => {\n      if (el.parentNode) el.parentNode.removeChild(el);\n    });\n\n    // 彻底替换内容区域以移除所有事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      var _contentArea$querySel;\n      // 先保存底部翻页控件\n      const bottomPagination = contentArea.querySelector('.bottom-pagination');\n\n      // 深度克隆内容，但不克隆事件监听器\n      const contentHTML = ((_contentArea$querySel = contentArea.querySelector('div[dangerouslySetInnerHTML]')) === null || _contentArea$querySel === void 0 ? void 0 : _contentArea$querySel.innerHTML) || '';\n      const newContentArea = contentArea.cloneNode(false);\n\n      // 创建新的内容容器\n      const newContentContainer = document.createElement('div');\n      newContentContainer.innerHTML = contentHTML;\n      newContentArea.appendChild(newContentContainer);\n\n      // 如果有底部翻页控件，重新添加\n      if (bottomPagination && totalPages > 0) {\n        const newBottomPagination = bottomPagination.cloneNode(true);\n        // 重新绑定事件\n        const prevBtn = newBottomPagination.querySelector('.page-btn:first-child');\n        const nextBtn = newBottomPagination.querySelector('.page-btn:last-child');\n        if (prevBtn) prevBtn.onclick = () => changePage(-1);\n        if (nextBtn) nextBtn.onclick = () => changePage(1);\n        newContentArea.appendChild(newBottomPagination);\n      }\n      if (contentArea.parentNode) {\n        contentArea.parentNode.replaceChild(newContentArea, contentArea);\n      }\n    }\n\n    // 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 移除所有特殊标记和样式\n      paragraph.removeAttribute('data-follow');\n      paragraph.removeAttribute('style');\n\n      // 清理特殊span标签\n      paragraph.innerHTML = paragraph.innerHTML.replace(/<span class=\"text-line\"[^>]*>/g, '').replace(/<span class=\"rhythm-char\"[^>]*>/g, '').replace(/<span class=\"line-highlight[^\"]*\"[^>]*>/g, '').replace(/<span class=\"mouse-highlight[^\"]*\"[^>]*>/g, '').replace(/<\\/span>/g, '');\n    });\n\n    // 移除特殊UI元素\n    const elementsToRemove = ['rhythm-speed-slider', 'rhythm-notification'];\n    elementsToRemove.forEach(id => {\n      const element = document.getElementById(id);\n      if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    });\n\n    // 移除暗色背景\n    document.body.classList.remove('dark-background');\n\n    // 清理闪读模式\n    if (window.flashReader && typeof window.flashReader.cleanup === 'function') {\n      window.flashReader.cleanup();\n    }\n  };\n  const handleAutoScroll = () => {\n    window.autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = e => {\n    if (readingMode !== 'follow-mouse') return;\n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    const rect = contentArea.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    clearAllHighlights();\n    const paragraphs = contentArea.querySelectorAll('p');\n    paragraphs.forEach(paragraph => {\n      const paragraphRect = paragraph.getBoundingClientRect();\n      const paragraphX = paragraphRect.left - rect.left;\n      const paragraphY = paragraphRect.top - rect.top;\n      if (y >= paragraphY && y <= paragraphY + paragraphRect.height) {\n        const words = paragraph.querySelectorAll('span');\n        words.forEach(word => {\n          const wordRect = word.getBoundingClientRect();\n          const wordX = wordRect.left - rect.left;\n          if (x >= wordX && x <= wordX + wordRect.width) {\n            word.classList.add('highlight');\n          }\n        });\n      }\n    });\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 专门用于移除鼠标跟随事件的函数\n  const removeMouseFollowListeners = () => {\n    // 移除记录的所有监听器\n    if (window.eventTracker && window.eventTracker.mouseFollowHandlers) {\n      window.eventTracker.mouseFollowHandlers.forEach(({\n        element,\n        event,\n        handler\n      }) => {\n        if (element && element.removeEventListener) {\n          element.removeEventListener(event, handler);\n        }\n      });\n      window.eventTracker.mouseFollowHandlers = [];\n    }\n\n    // 为安全起见，尝试从document和内容区域移除通用处理函数\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    }\n    document.removeEventListener('mousemove', handleMouseMove);\n\n    // 清除所有当前高亮\n    clearAllHighlights();\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n\n    // 添加底部翻页控件样式\n    const bottomPaginationStyles = document.createElement('style');\n    bottomPaginationStyles.id = 'bottom-pagination-styles';\n    bottomPaginationStyles.innerHTML = `\n      .bottom-pagination {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        padding: 20px 0 30px;\n        margin-top: 30px;\n        width: 100%;\n        background-color: transparent;\n        border-radius: 5px;\n      }\n\n      .bottom-pagination .page-btn {\n        background-color: #6c5ce7;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        padding: 8px 15px;\n        margin: 0 10px;\n        cursor: pointer;\n        font-size: 14px;\n        transition: background-color 0.2s ease;\n      }\n\n      .bottom-pagination .page-btn:hover {\n        background-color: #4834d4;\n      }\n\n      .bottom-pagination .page-btn:disabled {\n        background-color: #aaa;\n        cursor: not-allowed;\n      }\n\n      .bottom-pagination .page-info {\n        font-size: 14px;\n        margin: 0 10px;\n      }\n    `;\n    document.head.appendChild(bottomPaginationStyles);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n    addComfortable3DStyles();\n\n    // 添加鼠标跟随模式的样式\n    const mouseFollowStyle = document.createElement('style');\n    mouseFollowStyle.id = 'intelligent-mouse-follow-style';\n    mouseFollowStyle.textContent = `\n      /* 基础样式 */\n      .mouse-follow-content {\n        position: relative;\n        line-height: 1.8;\n      }\n      \n      .mouse-follow-content .follow-line {\n        position: relative;\n        padding: 8px 16px;\n        margin: 4px 0;\n        border-radius: 6px;\n        transition: all 0.2s ease;\n        display: block;\n        min-height: 1.8em;\n        white-space: normal;\n        word-wrap: break-word;\n        text-indent: 2em;\n      }\n      \n      /* 高亮状态 */\n      .follow-line.highlighted {\n        background-color: #ffa500 !important; /* 橙色背景 */\n        color: #ffffff !important; /* 白色文字 */\n        font-weight: bold !important;\n        font-size: 1.1em; /* 稍微调小字号 */\n        transform: translateX(5px);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n      }\n      \n      \n      /* 平滑过渡效果 */\n      .follow-line {\n        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n      }\n      \n      /* 行间距优化 */\n      .mouse-follow-content .follow-line + .follow-line {\n        margin-top: 4px;\n      }\n      \n      /* 添加行指示器 */\n      .follow-line::before {\n        content: '';\n        position: absolute;\n        left: 0;\n        top: 0;\n        bottom: 0;\n        width: 3px;\n        background: linear-gradient(to bottom, transparent, rgba(255, 255, 255, 0.5), transparent);\n        opacity: 0;\n        transition: opacity 0.2s ease;\n      }\n      \n      .follow-line.highlighted::before {\n        opacity: 1;\n      }\n    `;\n    document.head.appendChild(mouseFollowStyle);\n\n    // 创建深色背景下的ADHD友好高亮样式\n    const style = document.createElement('style');\n    style.id = 'adhd-friendly-highlight-style';\n    style.textContent = `\n      /* ADHD友好的高亮样式 - 适配深色背景 */\n      .adhd-highlight-mode {\n        line-height: 1.8;\n        padding: 20px;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph {\n        margin-bottom: 1.2em;\n        background-color: transparent;\n        padding: 12px 15px;\n        border-radius: 6px;\n        border-left: 3px solid rgba(255, 255, 255, 0.2);\n        transition: all 0.3s ease;\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover {\n        transform: translateX(5px);\n        border-left-color: rgba(255, 255, 255, 0.4);\n      }\n      \n      /* 加粗样式 - 白色加粗 */\n      .adhd-bold {\n        font-weight: 700;\n        color: #ffffff;\n        letter-spacing: 0.02em;\n        font-size: 1.1em;\n        text-shadow: 0 0 1px rgba(255, 255, 255, 0.2);\n      }\n      \n      /* 彩色样式 - 使用鲜明的蓝色 */\n      .adhd-colored {\n        color: #6c5ce7;\n        font-weight: 500;\n        font-size: 1.05em;\n        text-shadow: 0 0 1px rgba(108, 92, 231, 0.2);\n      }\n      \n      /* 正常样式 - 普通白色 */\n      .adhd-normal {\n        color: rgba(255, 255, 255, 0.8);\n        font-size: 1em;\n      }\n\n      /* 添加平滑过渡效果 */\n      .adhd-bold, .adhd-colored, .adhd-normal {\n        transition: all 0.2s ease;\n      }\n\n      /* 悬停效果 */\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-bold {\n        color: #ffffff;\n        text-shadow: 0 0 2px rgba(255, 255, 255, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-colored {\n        color: #8a7ff7;\n        text-shadow: 0 0 2px rgba(138, 127, 247, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-normal {\n        color: rgba(255, 255, 255, 0.9);\n      }\n\n      /* 添加段落间距的视觉引导 */\n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph {\n        margin-top: 1.5em;\n        position: relative;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph::before {\n        content: '';\n        position: absolute;\n        top: -0.75em;\n        left: 0;\n        right: 0;\n        height: 1px;\n        background: linear-gradient(\n          to right,\n          transparent,\n          rgba(255, 255, 255, 0.1),\n          transparent\n        );\n      }\n    `;\n    document.head.appendChild(style);\n\n    // 添加基础鼠标跟随样式\n    const mouseFollowPageStyle = document.createElement('style');\n    mouseFollowPageStyle.id = 'basic-mouse-follow-style';\n    mouseFollowPageStyle.textContent = `\n      .follow-line {\n        padding: 8px 12px;\n        margin: 4px 0;\n        border-radius: 4px;\n        transition: background-color 0.2s ease;\n      }\n      .follow-line.highlighted {\n        background-color: #ffa500;\n        color: #000080;\n        font-weight: bold;\n      }\n    `;\n    document.head.appendChild(mouseFollowPageStyle);\n    return () => {\n      const existingStyle = document.getElementById('adhd-friendly-highlight-style');\n      if (existingStyle) existingStyle.remove();\n      const existingMouseFollowStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (existingMouseFollowStyle) existingMouseFollowStyle.remove();\n      const existingBasicMouseFollowStyle = document.getElementById('basic-mouse-follow-style');\n      if (existingBasicMouseFollowStyle) existingBasicMouseFollowStyle.remove();\n      mouseFollowPageStyle.remove();\n    };\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 清理旧监听器\n    removeMouseFollowListeners();\n\n    // 添加新监听器\n    setTimeout(() => {\n      addMouseFollowListeners();\n\n      // 添加调试辅助 - 显示行边界\n      const contentArea = document.querySelector('.mouse-follow-content');\n      if (contentArea) {\n        const lines = contentArea.querySelectorAll('.follow-line');\n        console.log(`初始化鼠标跟随模式，共 ${lines.length} 行`);\n\n        // 可选：启用可视化调试\n        if (false) {\n          // 设置为true可以启用可视化调试\n          lines.forEach((line, index) => {\n            line.style.border = '1px dashed #888';\n            line.setAttribute('title', `行 ${index + 1}`);\n          });\n        }\n\n        // 验证行高亮效果\n        const firstLine = lines[0];\n        if (firstLine) {\n          console.log('行样式验证:', {\n            padding: window.getComputedStyle(firstLine).padding,\n            margin: window.getComputedStyle(firstLine).margin,\n            fontSize: window.getComputedStyle(firstLine).fontSize,\n            lineHeight: window.getComputedStyle(firstLine).lineHeight\n          });\n        }\n      }\n    }, 100);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = delta => {\n    window.autoReader.speed = Math.max(100, window.autoReader.speed + delta);\n    if (window.autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async delta => {\n    console.log(`翻页请求: 当前页 ${currentPage}, 增量 ${delta}`);\n    const newPage = currentPage + delta;\n    if (newPage < 1 || newPage > totalPages) {\n      console.log('无效页码，不执行翻页');\n      return;\n    }\n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n    const wasFlashReading = readingMode === 'flash-reading' && window.flashReader && window.flashReader.isPlaying;\n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    if (wasFlashReading && window.flashReader) {\n      window.flashReader.cleanup();\n    }\n\n    // 更新页码\n    setCurrentPage(newPage);\n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n\n      // 检查是否为目录页\n      const textContent = await page.getTextContent();\n      const isToc = await detectIfTocPage(textContent);\n      setIsTableOfContents(isToc);\n      if (isToc) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, page.getViewport({\n          scale: 1.0\n        }));\n      } else {\n        // 处理正文页面 - 根据当前阅读模式处理\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n\n        // 根据当前模式设置内容\n        if (readingMode === 'static') {\n          console.log('翻页后应用静态高亮模式');\n          const processedContent = formatSimpleHighlightedText(sentences);\n          setContent(processedContent);\n\n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n            if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n\n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n              }\n            }\n          }, 200);\n        } else if (readingMode === 'flash-reading') {\n          // 如果是闪读模式，则需要特殊处理\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n\n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n\n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n          return; // 已处理，直接返回\n        } else {\n          // 其他模式使用原处理函数\n          await processContentPage(page, readingMode);\n        }\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n    } catch (error) {\n      console.error('页面切换错误:', error);\n    }\n  };\n\n  // ADHD友好的静态高亮处理函数\n  const formatSimpleHighlightedText = sentences => {\n    console.log('开始处理ADHD友好的静态高亮文本，句子数量:', sentences.length);\n    let html = '<div class=\"pdf-content adhd-highlight-mode\">';\n    sentences.forEach((sentence, sentenceIndex) => {\n      if (!sentence || sentence.trim() === '') {\n        console.log(`跳过空句子，索引: ${sentenceIndex}`);\n        return;\n      }\n\n      // 清理和规范化文本\n      const cleanText = sentence.trim().replace(/\\s+/g, ' ') // 规范化空白字符\n      .replace(/&/g, '&amp;') // 转义特殊字符\n      .replace(/</g, '&lt;').replace(/>/g, '&gt;');\n\n      // 处理句子中的单词，为它们添加不同样式\n      const words = cleanText.split(/(\\s+)/);\n      let formattedSentence = '';\n      words.forEach((word, wordIndex) => {\n        if (word.trim() === '') {\n          // 保留空格\n          formattedSentence += word;\n        } else {\n          // 根据位置应用不同的样式类\n          // 三种交替样式: 加粗、彩色、正常\n          const styleClass = wordIndex % 3 === 0 ? 'adhd-bold' : wordIndex % 3 === 1 ? 'adhd-colored' : 'adhd-normal';\n          formattedSentence += `<span class=\"${styleClass}\">${word}</span>`;\n        }\n      });\n      console.log(`处理句子 ${sentenceIndex + 1}:`, cleanText.substring(0, 50) + '...');\n      html += `<p class=\"pdf-paragraph\">${formattedSentence}</p>`;\n    });\n    html += '</div>';\n\n    // 调试输出\n    console.log('生成的ADHD友好静态高亮HTML:', html.substring(0, 200) + '...');\n    return html;\n  };\n\n  // 根据阅读模式获取相应的内容处理函数\n  const getContentHandlerForMode = mode => {\n    switch (mode) {\n      case 'normal':\n        return formatSentencesToHtml;\n      case 'static':\n        return applyStaticHighlightToSentences;\n      case 'follow-mouse':\n        return formatSentencesForMouseFollow;\n      case 'comfortable-3d':\n        return applyComfortable3dEffectToSentences;\n      case 'flash-reading':\n        return sentences => {\n          // 闪读模式使用专门的分割函数重新处理文本\n          return createFlashReadingContentFromSentences(sentences);\n        };\n      default:\n        return formatSentencesToHtml;\n    }\n  };\n\n  // 监听阅读模式和当前页面的变化\n  useEffect(() => {\n    if (readingMode === 'mouse-follow' && currentPage && !isTableOfContents) {\n      // 移除之前的样式\n      const oldStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (oldStyle) {\n        oldStyle.remove();\n      }\n\n      // 添加基础鼠标跟随样式\n      const followModeStyle = document.createElement('style');\n      followModeStyle.id = 'basic-mouse-follow-style';\n      followModeStyle.textContent = `\n        .follow-line {\n          padding: 8px 12px;\n          margin: 4px 0;\n          border-radius: 4px;\n          transition: background-color 0.2s ease;\n        }\n        .follow-line.highlighted {\n          background-color: #ffa500;\n          color: #000080;\n          font-weight: bold;\n        }\n      `;\n      document.head.appendChild(followModeStyle);\n\n      // 处理当前页面内容\n      const page = pdfDocument.getPage(currentPage);\n      const textContent = page.getTextContent();\n      const sentences = textContent.items.map(item => item.str).join(' ').split(/[。！？]/).filter(s => s.trim());\n\n      // 应用基础鼠标跟随格式化\n      setContent(formatSentencesForMouseFollow(sentences));\n\n      // 添加鼠标跟随监听器\n      setTimeout(() => {\n        addMouseFollowListeners();\n      }, 100);\n      return () => {\n        followModeStyle.remove();\n      };\n    }\n  }, [readingMode, currentPage, pdfDocument]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3099,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3098,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reading-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u9605\\u8BFB\\u6A21\\u5F0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"reading-mode-select\",\n          value: readingMode,\n          onChange: handleReadingModeChange,\n          className: \"mode-select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"normal\",\n            children: \"\\u666E\\u901A\\u6A21\\u5F0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"static\",\n            children: \"\\u9759\\u6001\\u9AD8\\u4EAE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3111,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"follow-mouse\",\n            children: \"\\u9F20\\u6807\\u8DDF\\u968F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3112,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"rhythm\",\n            children: \"\\u8282\\u594F\\u9605\\u8BFB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3113,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"flash-reading\",\n            children: \"\\u95EA\\u8BFB\\u6A21\\u5F0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3114,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 3104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".pdf,.txt,.md\",\n          hidden: true,\n          id: \"file-upload\",\n          onChange: handleFileUpload,\n          ref: fileRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"upload-btn\",\n          onClick: () => fileRef.current.click(),\n          children: \"\\u4E0A\\u4F20\\u6587\\u4EF6 (.pdf/.txt/.md)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3127,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 3097,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toolbar\",\n        children: fileName && /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"filename\",\n          children: fileName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3138,\n          columnNumber: 24\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-content\",\n        ref: readerContainerRef,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: content\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3143,\n          columnNumber: 13\n        }, this), totalPages > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bottom-pagination\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => changePage(-1),\n            disabled: currentPage <= 1,\n            className: \"page-btn\",\n            children: \"\\u4E0A\\u4E00\\u9875\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3147,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"page-info\",\n            children: [\"\\u7B2C \", currentPage, \" / \", totalPages, \" \\u9875\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 3154,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => changePage(1),\n            disabled: currentPage >= totalPages,\n            className: \"page-btn\",\n            children: \"\\u4E0B\\u4E00\\u9875\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3157,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 3146,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 3136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 3096,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"x5N0itQI0gqtA84jt63lPsdPeRI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","pdfjsLib","pdfjsViewer","marked","pdfjs","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","window","currentPage","totalPages","changePage","eventTracker","mouseFollowHandlers","autoReader","charPositions","intervalId","currentIndex","speed","pageContainer","isScrolling","isPageChanging","cleanup","rhythmReaderGlobal","active","rhythmReader","stop","rhythmReading","forEach","key","localStorage","removeItem","sessionStorage","e","getCurrentMode","activeModeElement","document","querySelector","mode","dataset","id","toLowerCase","currentMode","isRhythmMode","console","log","readIndices","Set","charElements","start","isCurrentlyRhythmMode","initializeTextNodes","error","clear","addSpeedSlider","updateTextColors","scrollToCurrentChar","setInterval","moveToNextChar","clearInterval","restoreOriginalText","slider","getElementById","remove","contentSelectors","contentContainer","selector","element","offsetParent","body","textNodes","findTextNodes","length","node","text","nodeValue","trim","fragment","createDocumentFragment","i","char","span","createElement","textContent","className","rhythmIndex","whitespace","style","display","margin","padding","border","backgroundColor","appendChild","push","parentNode","replaceChild","uiSelectors","isUIElement","Element","excludeTags","includes","tagName","current","test","matches","parentElement","childNodes","nodeType","Node","TEXT_NODE","ELEMENT_NODE","index","color","fontWeight","has","add","clickNextPageButton","rect","getBoundingClientRect","lineHeight","parseInt","getComputedStyle","Math","max","height","viewportHeight","innerHeight","idealPosition","top","scrollTo","scrollY","behavior","container","cssText","label","marginRight","input","type","min","step","value","width","valueDisplay","marginLeft","minWidth","addEventListener","newSpeed","charSpans","querySelectorAll","parentNodeMap","Map","parent","set","get","spans","sort","a","b","indexA","indexB","groups","currentGroup","prevIndex","previousSibling","group","map","join","textNode","createTextNode","removeChild","nextPageSelectors","nextPageButton","elements","el","buttons","button","click","originalReadingModeChanged","readingModeChanged","setTimeout","initializeRhythmReading","startRhythmReading","App","_s","pages","setPages","setCurrentPage","setTotalPages","fileName","setFileName","loading","setLoading","fileRef","file","setFile","pdfInstance","setPdfInstance","extractedTextPages","setExtractedTextPages","readingMode","setReadingMode","posMode","setPosMode","markdownContent","setMarkdownContent","readerContainerRef","content","setContent","pdfDocument","setPdfDocument","isTableOfContents","setIsTableOfContents","applyDarkBackground","classList","head","restoreDarkBackground","addNakedEye3DStyles","addComfortable3DStyles","addFlashReadingStyles","initializeFlashReading","sentences","flashReadingSentences","Array","isArray","speedSlider","speedValue","playButton","pauseButton","stopButton","prevButton","nextButton","progress","cover","flashReader","interval","isPlaying","disabled","displayCurrentSentence","currentSentence","displayRect","pause","updateSpeed","setItem","prevSentence","nextSentence","target","savedSpeed","getItem","initialSpeed","createFlashReadingContent","formatTextToHtml","paragraphs","split","html","paragraph","formatTextForMouseFollow","words","processedParagraph","word","applyStaticHighlight","lastColor","random","applyNakedEye3dEffect","applyComfortable3dEffect","effectTypes","effectClass","floor","initializeNakedEye3D","textElements","delay","animationDelay","addMouseFollowListeners","contentArea","lastHighlightedLine","mouseMoveHandler","mouseY","clientY","allLines","foundLine","minDistance","Infinity","line","lineCenter","distance","abs","bottom","substring","mouseLeaveHandler","event","handler","initializeMouseFollow","handlePdfFile","fileURL","URL","createObjectURL","loadingTask","getDocument","pdf","promise","numPages","extractAndProcessPage","alert","pageNum","page","getPage","getTextContent","viewport","getViewport","scale","detectIfTocPage","processTocPage","processContentPage","textItems","items","fullText","item","str","hasTocKeywords","hasPageNumberPatterns","shortLinesCount","linesWithNumbersCount","lineMap","yKey","round","transform","lines","values","lineText","shortLineRatio","numberLineRatio","htmlContent","x","y","fontSize","sqrt","fontName","spacedText","getTextNodeAtPosition","nodes","range","createRange","selectNodeContents","rects","getClientRects","j","left","right","found","processTextWithHighlight","result","extractedText","replace","splitIntoSentences","processedContent","formatSentencesToHtml","formatSimpleHighlightedText","formatSentencesForMouseFollow","applyComfortable3dEffectToSentences","createFlashReadingContentFromSentences","firstPara","styles","fontFamily","sentenceRegex","lastIndex","match","exec","endIndex","sentence","lastSentence","splitIntoFlashReadingSegments","segments","segment","lastSegment","applyStaticHighlightToSentences","processedSentence","handleTxtFile","name","handleMarkdownFile","parse","p","parseError","tempDiv","innerHTML","plainText","innerText","handleFileUpload","uploadedFile","files","endsWith","getAllCharacterPositions","walker","createTreeWalker","NodeFilter","SHOW_TEXT","positions","nextNode","currentNode","setStart","setEnd","warn","filter","yDiff","scrollElementToCenter","elementY","isContainerScrollable","scrollHeight","clientHeight","overflowY","targetScrollTop","containerVisibleHeight","absoluteElementY","createReaderCursor","cursor","isSentenceEnd","charPosition","sentenceEndMarks","nextIndex","findSentenceStart","prev","isInVisibleArea","threshold","visibleTop","scrollTop","visibleBottom","topThreshold","bottomThreshold","startAutoReader","position","highlight","borderRadius","pointerEvents","zIndex","lastScrolledY","scrollSafeZone","charWidth","charHeight","xDiff","_window$autoReader$ch","stopAutoReader","pos","contentRect","relativeX","relativeY","isInRecentlyScrolledArea","needsScroll","scrollAmount","scrollBy","absoluteY","initializeAutoReader","handleReadingModeChange","newMode","prevMode","getContentHandlerForMode","cleanupDOM","removeMouseFollowListeners","comfortable3DElements","flashReadingElements","highlights","_contentArea$querySel","bottomPagination","contentHTML","newContentArea","cloneNode","newContentContainer","newBottomPagination","prevBtn","nextBtn","onclick","removeAttribute","elementsToRemove","handleAutoScroll","updateCursorPosition","force","handleMouseMove","clientX","clearAllHighlights","paragraphRect","paragraphX","paragraphY","wordRect","wordX","removeEventListener","addAutoReaderStyles","bottomPaginationStyles","mouseFollowStyle","mouseFollowPageStyle","existingStyle","existingMouseFollowStyle","existingBasicMouseFollowStyle","setAttribute","firstLine","adjustSpeed","delta","newPage","wasRhythmReading","wasFlashReading","isToc","sentenceIndex","cleanText","formattedSentence","wordIndex","styleClass","oldStyle","followModeStyle","s","children","_jsxFileName","lineNumber","columnNumber","onChange","accept","hidden","ref","onClick","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["D:/adhd-read-helper/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 添加全局事件跟踪对象\nwindow.eventTracker = window.eventTracker || {\n  mouseFollowHandlers: []\n};\n\n// 自动阅读器全局对象\nwindow.autoReader = {\n  charPositions: [],\n  intervalId: null,\n  currentIndex: 0,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false,\n  cleanup: null\n};\n\n// 添加新的节奏阅读模式代码\n// 全局变量，确保在页面切换后仍然保持状态\nwindow.rhythmReaderGlobal = window.rhythmReaderGlobal || {\n  active: false,\n  speed: 300\n};\n\n// 节奏阅读模式 - 彻底重写版\n(function() {\n  // ======= 首先清除任何可能存在的旧版实现 =======\n  if (window.rhythmReader && typeof window.rhythmReader.stop === 'function') {\n    window.rhythmReader.stop();\n  }\n  \n  if (window.rhythmReading && typeof window.rhythmReading.stop === 'function') {\n    window.rhythmReading.stop();\n  }\n  \n  // 清除所有可能的存储项\n  ['rhythmReading', 'rhythmReadingActive', 'currentReadingMode', 'pendingRhythmMode'].forEach(key => {\n    try {\n      localStorage.removeItem(key);\n      sessionStorage.removeItem(key);\n    } catch(e) {}\n  });\n  \n  // ======= 检查当前模式 =======\n  // 获取当前激活的阅读模式\n  function getCurrentMode() {\n    // 尝试从UI元素获取\n    const activeModeElement = document.querySelector('.reading-mode-active, [data-active=\"true\"]');\n    if (activeModeElement) {\n      const mode = activeModeElement.dataset.mode || activeModeElement.id;\n      return mode ? mode.toLowerCase() : '';\n    }\n    return '';\n  }\n  \n  // 检查当前是否是节奏阅读模式\n  const currentMode = getCurrentMode();\n  const isRhythmMode = currentMode === 'rhythm' || currentMode === 'rhythmreading';\n  \n  console.log(`当前模式: ${currentMode} - 是否为节奏阅读: ${isRhythmMode}`);\n  \n  // ======= 节奏阅读功能定义 =======\n  const rhythmReader = {\n    active: false,\n    intervalId: null,\n    speed: 300,\n    currentIndex: 0,\n    readIndices: new Set(),\n    charElements: [],\n    \n    // 启动节奏阅读 - 只能由模式切换函数调用\n    start: function() {\n      // 已经激活则不做任何事\n      if (this.active) return;\n      \n      // 当前模式检查\n      if (!isCurrentlyRhythmMode()) {\n        console.log(\"无法启动：当前不是节奏阅读模式\");\n        return;\n      }\n      \n      console.log(\"启动节奏阅读模式\");\n      this.active = true;\n      \n      // 初始化文本\n      if (!this.initializeTextNodes()) {\n        console.error(\"无法初始化文本节点\");\n        this.active = false;\n        return;\n      }\n      \n      // 重置阅读位置\n      this.currentIndex = 0;\n      this.readIndices.clear();\n      \n      // 添加速度滑块\n      this.addSpeedSlider();\n      \n      // 更新颜色\n      this.updateTextColors();\n      \n      // 滚动到开始位置\n      this.scrollToCurrentChar();\n      \n      // 设置阅读间隔\n      this.intervalId = setInterval(() => this.moveToNextChar(), this.speed);\n    },\n    \n    // 停止节奏阅读\n    stop: function() {\n      if (!this.active) return;\n      \n      console.log(\"停止节奏阅读模式\");\n      \n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n      }\n      \n      this.active = false;\n      \n      // 恢复原始文本\n      this.restoreOriginalText();\n      \n      // 移除速度滑块\n      const slider = document.getElementById('rhythm-speed-slider');\n      if (slider) slider.remove();\n    },\n    \n    // 初始化文本节点\n    initializeTextNodes: function() {\n      // 重置字符元素数组\n      this.charElements = [];\n      \n      // 获取内容容器 - 首先尝试找到主要内容区域\n      const contentSelectors = [\n        '.page-content', 'article', 'main', '.article', \n        '.content', '.main-content', '.post-content'\n      ];\n      \n      let contentContainer = null;\n      for (const selector of contentSelectors) {\n        const element = document.querySelector(selector);\n        if (element && element.offsetParent !== null) {\n          contentContainer = element;\n          console.log(`找到内容容器: ${selector}`);\n          break;\n        }\n      }\n      \n      // 如果没找到特定容器，使用body\n      if (!contentContainer) {\n        contentContainer = document.body;\n        console.log(\"使用document.body作为内容容器\");\n      }\n      \n      // 查找所有文本节点并处理\n      const textNodes = [];\n      this.findTextNodes(contentContainer, textNodes);\n      \n      if (textNodes.length === 0) {\n        console.error(\"未找到文本节点\");\n        return false;\n      }\n      \n      console.log(`找到 ${textNodes.length} 个文本节点`);\n      \n      // 为每个文本节点创建字符span\n      textNodes.forEach(node => {\n        const text = node.nodeValue;\n        if (!text || text.trim() === '') return;\n        \n        // 创建文档片段来存放字符span\n        const fragment = document.createDocumentFragment();\n        \n        // 为每个字符创建span\n        for (let i = 0; i < text.length; i++) {\n          const char = text[i];\n          const span = document.createElement('span');\n          span.textContent = char;\n          span.className = 'rhythm-char';\n          span.dataset.rhythmIndex = this.charElements.length;\n          \n          // 如果是空白字符，添加一个标志\n          if (char.trim() === '') {\n            span.dataset.whitespace = 'true';\n          }\n          \n          // 保持原始样式，不设置背景\n          span.style.display = 'inline';\n          span.style.margin = '0';\n          span.style.padding = '0';\n          span.style.border = 'none';\n          span.style.backgroundColor = 'transparent';\n          \n          fragment.appendChild(span);\n          this.charElements.push(span);\n        }\n        \n        // 替换原始节点\n        if (node.parentNode) {\n          node.parentNode.replaceChild(fragment, node);\n        }\n      });\n      \n      console.log(`总共创建了 ${this.charElements.length} 个字符span`);\n      return this.charElements.length > 0;\n    },\n    \n    // 查找文本节点 - 避免处理UI元素\n    findTextNodes: function(element, textNodes) {\n      // 排除UI元素的选择器列表\n      const uiSelectors = [\n        'button', 'input', 'select', 'nav', 'header', 'footer',\n        '.navigation', '.nav', '.menu', '.pagination', '.controls',\n        '[role=\"navigation\"]', '[role=\"menu\"]', '[role=\"button\"]',\n        '#rhythm-speed-slider', '.rhythm-char'\n      ];\n      \n      // 检查元素是否为UI元素\n      const isUIElement = (node) => {\n        if (!(node instanceof Element)) return false;\n        \n        // 检查元素标签\n        const excludeTags = ['BUTTON', 'INPUT', 'SELECT', 'NAV', 'HEADER', 'FOOTER'];\n        if (excludeTags.includes(node.tagName)) return true;\n        \n        // 检查元素或其祖先是否匹配UI选择器\n        let current = node;\n        while (current && current !== document.body) {\n          // 检查ID和类名是否包含UI关键词\n          const id = (current.id || '').toLowerCase();\n          const className = (current.className || '').toLowerCase();\n          \n          if (/nav|button|pag(e|ing)|next|prev/i.test(id) || \n              /nav|button|pag(e|ing)|next|prev/i.test(className)) {\n            return true;\n          }\n          \n          // 检查选择器匹配\n          for (const selector of uiSelectors) {\n            try {\n              if (current.matches && current.matches(selector)) {\n                return true;\n              }\n            } catch (e) {\n              // 忽略不支持的选择器错误\n            }\n          }\n          current = current.parentElement;\n        }\n        return false;\n      };\n      \n      // 处理子节点\n      for (let i = 0; i < element.childNodes.length; i++) {\n        const node = element.childNodes[i];\n        \n        // 如果是文本节点且有实际内容\n        if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() !== '') {\n          // 确保父元素不是UI元素\n          if (node.parentElement && !isUIElement(node.parentElement)) {\n            textNodes.push(node);\n          }\n        } \n        // 如果是元素节点且不是UI元素，递归处理\n        else if (node.nodeType === Node.ELEMENT_NODE && !isUIElement(node)) {\n          this.findTextNodes(node, textNodes);\n        }\n      }\n    },\n    \n    // 更新文本颜色\n    updateTextColors: function() {\n      this.charElements.forEach((span, index) => {\n        let color;\n        let fontWeight = 'inherit';\n        \n        if (index === this.currentIndex) {\n          color = '#00aa00';\n          fontWeight = 'bold';\n        } else if (index === this.currentIndex + 1 || index === this.currentIndex + 2) {\n          color = '#aaaaaa';\n        } else if (this.readIndices.has(index)) {\n          color = '#ffffff';\n        } else {\n          color = 'rgba(160, 160, 160, 0.25)';\n        }\n        \n        span.style.color = color;\n        span.style.fontWeight = fontWeight;\n      });\n    },\n    \n    // 移动到下一个字符\n    moveToNextChar: function() {\n      if (!this.active || this.charElements.length === 0) return;\n      \n      this.readIndices.add(this.currentIndex);\n      \n      do {\n        this.currentIndex++;\n        \n        if (this.currentIndex >= this.charElements.length) {\n          if (!this.clickNextPageButton()) {\n            this.stop();\n          }\n          return;\n        }\n      } while (\n        this.currentIndex < this.charElements.length && \n        this.charElements[this.currentIndex] && \n        this.charElements[this.currentIndex].dataset.whitespace === 'true'\n      );\n      \n      this.updateTextColors();\n      this.scrollToCurrentChar();\n    },\n    \n    // 滚动到当前字符\n    scrollToCurrentChar: function() {\n      const span = this.charElements[this.currentIndex];\n      if (!span) return;\n      \n      const rect = span.getBoundingClientRect();\n      const lineHeight = parseInt(window.getComputedStyle(span).lineHeight) || \n                         Math.max(20, rect.height * 1.5);\n      const viewportHeight = window.innerHeight;\n      const idealPosition = viewportHeight * 0.4;\n      \n      if (rect.top < idealPosition || rect.top > idealPosition + lineHeight * 2) {\n        window.scrollTo({\n          top: window.scrollY + rect.top - idealPosition,\n          behavior: 'smooth'\n        });\n      }\n    },\n    \n    // 添加速度滑块\n    addSpeedSlider: function() {\n      let slider = document.getElementById('rhythm-speed-slider');\n      if (slider) slider.remove();\n      \n      const container = document.createElement('div');\n      container.id = 'rhythm-speed-slider';\n      container.style.cssText = `\n        position: fixed;\n        top: 70px;\n        right: 20px;\n        background-color: rgba(0, 0, 0, 0.7);\n        padding: 10px;\n        border-radius: 5px;\n        box-shadow: 0 2px 5px rgba(0,0,0,0.2);\n        z-index: 10000;\n        display: flex;\n        align-items: center;\n        max-width: 300px;\n        color: white;\n      `;\n      \n      const label = document.createElement('label');\n      label.textContent = '速度: ';\n      label.style.marginRight = '8px';\n      container.appendChild(label);\n      \n      const input = document.createElement('input');\n      input.type = 'range';\n      input.min = '50';\n      input.max = '800';\n      input.step = '50';\n      input.value = this.speed;\n      input.style.width = '120px';\n      \n      const valueDisplay = document.createElement('span');\n      valueDisplay.textContent = `${this.speed}ms`;\n      valueDisplay.style.marginLeft = '8px';\n      valueDisplay.style.minWidth = '60px';\n      \n      input.addEventListener('input', () => {\n        const newSpeed = parseInt(input.value);\n        this.speed = newSpeed;\n        valueDisplay.textContent = `${newSpeed}ms`;\n        \n        if (this.intervalId) {\n          clearInterval(this.intervalId);\n          this.intervalId = setInterval(() => this.moveToNextChar(), newSpeed);\n        }\n      });\n      \n      container.appendChild(input);\n      container.appendChild(valueDisplay);\n      document.body.appendChild(container);\n    },\n    \n    // 恢复原始文本\n    restoreOriginalText: function() {\n      const charSpans = document.querySelectorAll('.rhythm-char');\n      const parentNodeMap = new Map();\n      \n      charSpans.forEach(span => {\n        const parent = span.parentNode;\n        if (!parent) return;\n        \n        if (!parentNodeMap.has(parent)) {\n          parentNodeMap.set(parent, []);\n        }\n        parentNodeMap.get(parent).push(span);\n      });\n      \n      parentNodeMap.forEach((spans, parent) => {\n        if (spans.length === 0) return;\n        \n        spans.sort((a, b) => {\n          const indexA = parseInt(a.dataset.rhythmIndex || '0');\n          const indexB = parseInt(b.dataset.rhythmIndex || '0');\n          return indexA - indexB;\n        });\n        \n        const groups = [];\n        let currentGroup = [spans[0]];\n        \n        for (let i = 1; i < spans.length; i++) {\n          const prevIndex = parseInt(spans[i-1].dataset.rhythmIndex || '0');\n          const currentIndex = parseInt(spans[i].dataset.rhythmIndex || '0');\n          \n          if (currentIndex === prevIndex + 1 && spans[i].previousSibling === spans[i-1]) {\n            currentGroup.push(spans[i]);\n          } else {\n            groups.push(currentGroup);\n            currentGroup = [spans[i]];\n          }\n        }\n        \n        groups.push(currentGroup);\n        \n        groups.forEach(group => {\n          if (group.length === 0) return;\n          \n          try {\n            const text = group.map(span => span.textContent).join('');\n            const textNode = document.createTextNode(text);\n            \n            if (group[0].parentNode === parent) {\n              parent.replaceChild(textNode, group[0]);\n              for (let i = 1; i < group.length; i++) {\n                if (group[i].parentNode === parent) {\n                  parent.removeChild(group[i]);\n                }\n              }\n            }\n          } catch (e) {\n            console.error(\"恢复文本时出错:\", e);\n          }\n        });\n      });\n      \n      this.charElements = [];\n    },\n    \n    // 点击下一页按钮\n    clickNextPageButton: function() {\n      const nextPageSelectors = [\n        'button.next-page', 'button[aria-label=\"下一页\"]',\n        'a.next-page', 'a[aria-label=\"下一页\"]',\n        '.next-page', '#next-page', '[aria-label=\"Next\"]',\n        'button.next', 'a.next'\n      ];\n      \n      let nextPageButton = null;\n      \n      for (const selector of nextPageSelectors) {\n        try {\n          const elements = document.querySelectorAll(selector);\n          for (const el of elements) {\n            if (el.offsetParent !== null) {\n              nextPageButton = el;\n              break;\n            }\n          }\n          if (nextPageButton) break;\n        } catch (e) {}\n      }\n      \n      if (!nextPageButton) {\n        const buttons = document.querySelectorAll('button, a, div[role=\"button\"]');\n        for (const button of buttons) {\n          const text = (button.textContent || '').trim().toLowerCase();\n          if ((text.includes('下一页') || text.includes('next') || text === '>' || text === '→') && \n              button.offsetParent !== null) {\n            nextPageButton = button;\n            break;\n          }\n        }\n      }\n      \n      if (nextPageButton) {\n        if (this.intervalId) {\n          clearInterval(this.intervalId);\n          this.intervalId = null;\n        }\n        \n        this.restoreOriginalText();\n        nextPageButton.click();\n        return true;\n      }\n      \n      return false;\n    }\n  };\n  \n  // 检查当前是否是节奏阅读模式\n  function isCurrentlyRhythmMode() {\n    const mode = getCurrentMode();\n    return mode === 'rhythm' || mode === 'rhythmreading';\n  }\n  \n  // ======= 处理模式切换 =======\n  // 保存原始函数引用\n  const originalReadingModeChanged = window.readingModeChanged;\n  \n  // 完全重写模式切换函数\n  window.readingModeChanged = function(mode) {\n    console.log(`模式变更: ${mode}`);\n    \n    // 无论如何，先停止节奏阅读\n    rhythmReader.stop();\n    \n    // 调用原始函数处理其他模式相关逻辑\n    if (typeof originalReadingModeChanged === 'function') {\n      try {\n        originalReadingModeChanged(mode);\n      } catch(e) {\n        console.error(\"调用原始模式函数出错\", e);\n      }\n    }\n    \n    // 等待UI更新完成\n    setTimeout(() => {\n      // 当前模式是否为节奏阅读\n      if (mode === 'rhythm' || mode === 'rhythmreading') {\n        console.log(\"选择了节奏阅读模式，即将启动\");\n        // 再次检查UI确认\n        if (isCurrentlyRhythmMode()) {\n          rhythmReader.start();\n        }\n      }\n    }, 100);\n  };\n  \n  // 暴露到全局\n  window.rhythmReader = rhythmReader;\n  \n  // ======= 初始执行部分 =======\n  // 只有当前确实是节奏阅读模式时才启动\n  if (isRhythmMode) {\n    console.log(\"当前已是节奏阅读模式，准备启动\");\n    // 延迟启动确保页面加载完成\n    setTimeout(() => rhythmReader.start(), 300);\n  } else {\n    console.log(\"当前不是节奏阅读模式，不会自动启动\");\n  }\n})();\n\n// 更新初始化函数\nconst initializeRhythmReading = () => {\n  // 不再自动初始化，而是等待用户选择\n  console.log(\"节奏阅读模式准备就绪，等待用户选择\");\n};\n\n// 更新启动函数\nconst startRhythmReading = () => {\n  if (window.rhythmReader && typeof window.rhythmReader.start === 'function') {\n    window.rhythmReader.start();\n  }\n};\n\nconst App = () => {\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  const [isTableOfContents, setIsTableOfContents] = useState(false);\n  \n  // 实现缺失的函数\n  // 应用深色背景\n  const applyDarkBackground = () => {\n    document.body.classList.add('dark-background');\n    \n    // 添加必要的CSS样式\n    if (!document.getElementById('dark-background-style')) {\n      const style = document.createElement('style');\n      style.id = 'dark-background-style';\n      style.textContent = `\n        .dark-background {\n          background-color: #000 !important;\n        }\n        .dark-background .sidebar {\n          background: linear-gradient(145deg, #4834d4, #341f9e) !important;\n        }\n        .dark-background .page-content {\n          background-color: #000 !important;\n        }\n        .dark-background .main-content {\n          background-color: #000 !important;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 恢复正常背景\n  const restoreDarkBackground = () => {\n    document.body.classList.remove('dark-background');\n  };\n  \n  // 添加裸眼3D样式\n  const addNakedEye3DStyles = () => {\n    if (!document.getElementById('naked-eye-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'naked-eye-3d-style';\n      style.textContent = `\n        .naked-eye-3d-container {\n          position: relative;\n          perspective: 800px;\n          width: 100%;\n        }\n        \n        .naked-eye-3d-text {\n          display: inline-block;\n          animation: float 3s ease-in-out infinite;\n          text-shadow: 0 0 5px rgba(255,255,255,0.3);\n          padding: 0 4px;\n          color: white;\n          filter: drop-shadow(0 0 5px rgba(120, 220, 255, 0.6));\n        }\n        \n        @keyframes float {\n          0% { transform: translateZ(0px); }\n          50% { transform: translateZ(20px); }\n          100% { transform: translateZ(0px); }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 添加舒适3D样式\n  const addComfortable3DStyles = () => {\n    if (!document.getElementById('comfortable-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'comfortable-3d-style';\n      style.textContent = `\n        .emboss-3d-text {\n          color: #fff;\n          text-shadow: \n            1px 1px 1px rgba(0,0,0,0.5),\n            -1px -1px 1px rgba(255,255,255,0.5);\n          letter-spacing: 1.5px;\n          font-weight: 500;\n        }\n        \n        .float-3d-text {\n          display: inline-block;\n          transform-style: preserve-3d;\n          transform: perspective(500px) translateZ(10px);\n          text-shadow: 0 2px 5px rgba(0,0,0,0.5);\n        }\n        \n        .gradient-3d-text {\n          display: inline-block;\n          background: linear-gradient(to bottom, #fff, #aaa);\n          -webkit-background-clip: text;\n          -webkit-text-fill-color: transparent;\n          text-shadow: 0 2px 4px rgba(0,0,0,0.3);\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 添加闪读样式\n  const addFlashReadingStyles = () => {\n    if (!document.getElementById('flash-reading-style')) {\n      const style = document.createElement('style');\n      style.id = 'flash-reading-style';\n      style.textContent = `\n        .flash-reading-container {\n          position: relative;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          z-index: 1000;\n          padding: 20px;\n        }\n        \n        .flash-reading-display-wrapper {\n          position: relative;\n          margin: 40px 0;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        \n        .flash-reading-display {\n          font-size: 36px;\n          font-weight: bold;\n          text-align: center;\n          color: white;\n          min-height: 80px;\n          max-width: 90%;\n          padding: 20px 40px;\n          position: relative; /* 允许绝对定位的覆盖层 */\n          z-index: 2;\n        }\n        \n        .flash-reading-cover {\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(128, 128, 128, 0.6); /* 灰色遮罩 */\n          border-radius: 8px;\n          z-index: 1; /* 确保在文本后面 */\n        }\n        \n        .flash-reading-controls {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          gap: 20px;\n          margin-bottom: 20px;\n          width: 100%;\n        }\n        \n        .flash-reading-buttons {\n          display: flex;\n          gap: 10px;\n          flex-wrap: wrap;\n          justify-content: center;\n        }\n        \n        .flash-reading-speed {\n          display: flex;\n          align-items: center;\n          color: white;\n          width: 80%;\n          max-width: 400px;\n          gap: 10px;\n        }\n        \n        .flash-reading-slider {\n          flex: 1;\n          height: 8px;\n          appearance: none;\n          background: #555;\n          border-radius: 4px;\n          outline: none;\n        }\n        \n        .flash-reading-slider::-webkit-slider-thumb {\n          appearance: none;\n          width: 20px;\n          height: 20px;\n          border-radius: 50%;\n          background: #6c5ce7;\n          cursor: pointer;\n        }\n        \n        .flash-reading-btn {\n          padding: 10px 20px;\n          border: none;\n          border-radius: 4px;\n          background-color: #6c5ce7;\n          color: white;\n          font-size: 16px;\n          cursor: pointer;\n          transition: background-color 0.2s;\n        }\n        \n        .flash-reading-btn:hover {\n          background-color: #5344c0;\n        }\n        \n        .flash-reading-btn:disabled {\n          background-color: #aaa;\n          cursor: not-allowed;\n        }\n        \n        .flash-reading-progress {\n          color: white;\n          font-size: 14px;\n          margin-top: 10px;\n        }\n        .flash-reading-speed-note {\n          font-size: 12px;\n          color: #ccc;\n          margin-left: 5px;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 初始化闪读模式\n  const initializeFlashReading = () => {\n    // 添加样式\n    addFlashReadingStyles();\n    \n    const sentences = window.flashReadingSentences;\n    if (!sentences || !Array.isArray(sentences) || sentences.length === 0) {\n      console.error('闪读模式: 未找到句子数据');\n      return;\n    }\n    \n    // 获取全局UI元素\n    const display = document.getElementById('flash-reading-display');\n    const speedSlider = document.getElementById('flash-reading-speed');\n    const speedValue = document.getElementById('flash-reading-speed-value');\n    const playButton = document.getElementById('flash-reading-play');\n    const pauseButton = document.getElementById('flash-reading-pause');\n    const stopButton = document.getElementById('flash-reading-stop');\n    const prevButton = document.getElementById('flash-reading-prev-sentence');\n    const nextButton = document.getElementById('flash-reading-next-sentence');\n    const progress = document.getElementById('flash-reading-progress');\n    const cover = document.querySelector('.flash-reading-cover');\n    \n    if (!display || !speedSlider || !speedValue || !playButton || !pauseButton || !stopButton || !prevButton || !nextButton || !progress || !cover) {\n      console.error('闪读模式: 未找到UI元素');\n      return;\n    }\n    \n    // 创建闪读控制器\n    window.flashReader = {\n      sentences: sentences,\n      currentIndex: 0,\n      interval: null,\n      speed: parseInt(speedSlider.value),\n      isPlaying: false,\n      \n      // 开始闪读\n      start() {\n        if (this.interval) {\n          clearInterval(this.interval);\n        }\n        \n        this.isPlaying = true;\n        playButton.disabled = true;\n        pauseButton.disabled = false;\n        progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        \n        // 显示当前句子\n        this.displayCurrentSentence();\n        \n        // 设置闪读间隔\n        this.interval = setInterval(() => {\n          this.currentIndex++;\n          \n          if (this.currentIndex >= this.sentences.length) {\n            this.stop();\n            display.textContent = '阅读完成';\n            return;\n          }\n          \n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }, this.speed);\n      },\n      \n      // 显示当前句子\n      displayCurrentSentence() {\n        if (this.currentIndex < this.sentences.length) {\n          const currentSentence = this.sentences[this.currentIndex];\n          display.textContent = currentSentence;\n          display.style.color = 'white'; // 确保文本为白色\n          \n          // 调整背景以适应内容\n          setTimeout(() => {\n            const displayRect = display.getBoundingClientRect();\n            // 确保覆盖层完全包裹文本\n            cover.style.width = `${displayRect.width}px`;\n            cover.style.height = `${displayRect.height}px`;\n          }, 10);\n        }\n      },\n      \n      // 暂停闪读\n      pause() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        \n        this.isPlaying = false;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n      },\n      \n      // 停止闪读\n      stop() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        \n        this.isPlaying = false;\n        this.currentIndex = 0;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n        \n        display.textContent = '准备开始';\n        progress.textContent = `进度：0 / ${this.sentences.length}`; // 重置进度\n      },\n      \n      // 更新速度\n      updateSpeed(newSpeed) {\n        this.speed = newSpeed;\n        speedValue.textContent = `${newSpeed} ms`;\n        \n        // 保存速度设置到本地存储\n        localStorage.setItem('flash-reading-speed', newSpeed);\n        \n        // 如果正在播放，重新开始以应用新速度\n        if (this.isPlaying) {\n          clearInterval(this.interval);\n          this.start(); // 直接调用start方法重新开始\n        }\n      },\n\n      // 返回上一句\n      prevSentence() {\n        if (this.currentIndex > 0) {\n          this.currentIndex--;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n\n      // 跳到下一句\n      nextSentence() {\n        if (this.currentIndex < this.sentences.length - 1) {\n          this.currentIndex++;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n\n      // 清理资源\n      cleanup() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        this.currentIndex = 0;\n      }\n    };\n    \n    // 添加事件监听器\n    playButton.addEventListener('click', () => {\n      window.flashReader.start();\n    });\n    \n    pauseButton.addEventListener('click', () => {\n      window.flashReader.pause();\n    });\n    \n    stopButton.addEventListener('click', () => {\n      window.flashReader.stop();\n    });\n    \n    speedSlider.addEventListener('input', (e) => {\n      const newSpeed = parseInt(e.target.value);\n      window.flashReader.updateSpeed(newSpeed);\n    });\n\n    prevButton.addEventListener('click', () => {\n      window.flashReader.prevSentence();\n    });\n\n    nextButton.addEventListener('click', () => {\n      window.flashReader.nextSentence();\n    });\n    \n    // 初始化\n    const savedSpeed = localStorage.getItem('flash-reading-speed');\n    const initialSpeed = savedSpeed ? parseInt(savedSpeed) : 1000;\n    speedSlider.value = initialSpeed;\n    window.flashReader.updateSpeed(initialSpeed);\n    \n    console.log('闪读模式已初始化，共 ' + sentences.length + ' 个句子');\n  };\n  \n  // 创建闪读内容\n  const createFlashReadingContent = (text) => {\n    return `<div class=\"flash-reading-content\">\n      <p>${text}</p>\n    </div>`;\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 格式化文本用于鼠标跟随\n  const formatTextForMouseFollow = (text) => {\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个单词添加span，以便于添加高亮效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"follow-word\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\" data-follow=\"true\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用静态高亮\n  const applyStaticHighlight = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为单词随机添加颜色高亮\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      let lastColor = null;\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n          return;\n        }\n        \n        // 随机决定是否高亮和使用哪种颜色\n        if (Math.random() < 0.7) {\n          let color;\n          if (lastColor === 'red') {\n            color = 'blue';\n          } else if (lastColor === 'blue') {\n            color = 'red';\n          } else {\n            color = Math.random() < 0.5 ? 'red' : 'blue';\n          }\n          lastColor = color;\n          \n          processedParagraph += `<span class=\"highlight-word ${color}\">${word}</span>`;\n        } else {\n          processedParagraph += word;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用裸眼3D效果\n  const applyNakedEye3dEffect = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content naked-eye-3d-container\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个词添加3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"naked-eye-3d-text\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用舒适3D效果\n  const applyComfortable3dEffect = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个词随机应用不同的3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n  } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          \n          processedParagraph += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 初始化裸眼3D\n  const initializeNakedEye3D = () => {\n    // 为裸眼3D文本添加动画\n    const textElements = document.querySelectorAll('.naked-eye-3d-text');\n    textElements.forEach((element, index) => {\n      // 添加随机延迟，使动画错开\n      const delay = Math.random() * 2;\n      element.style.animationDelay = `${delay}s`;\n    });\n  };\n\n  // 添加鼠标跟随监听器\n  const addMouseFollowListeners = () => {\n    // 获取内容容器\n    const contentArea = document.querySelector('.mouse-follow-content');\n    if (!contentArea) {\n      console.error('未找到鼠标跟随内容区域');\n      return;\n    }\n    \n    // 上一个高亮的行\n    let lastHighlightedLine = null;\n    \n    // 监听鼠标移动 - 精确的行检测\n    const mouseMoveHandler = (e) => {\n      // 获取鼠标位置\n      const mouseY = e.clientY;\n      \n      // 获取所有行\n      const allLines = contentArea.querySelectorAll('.follow-line');\n      let foundLine = null;\n      let minDistance = Infinity;\n      \n      // 寻找鼠标所在的精确行\n      allLines.forEach(line => {\n        const rect = line.getBoundingClientRect();\n        const lineCenter = rect.top + rect.height / 2;\n        const distance = Math.abs(mouseY - lineCenter);\n        \n        // 如果鼠标在行范围内，计算到行中心的距离\n        if (mouseY >= rect.top && mouseY <= rect.bottom) {\n          if (distance < minDistance) {\n            minDistance = distance;\n            foundLine = line;\n        }\n      }\n    });\n    \n      // 更新高亮状态\n      if (lastHighlightedLine && lastHighlightedLine !== foundLine) {\n        // 移除旧高亮\n        lastHighlightedLine.classList.remove('highlighted');\n      }\n      \n      if (foundLine) {\n        // 添加新高亮\n        foundLine.classList.add('highlighted');\n        lastHighlightedLine = foundLine;\n        \n        // 调试输出\n        console.log('当前高亮行:', foundLine.textContent.substring(0, 30) + '...');\n      } else if (lastHighlightedLine) {\n        // 如果没有找到新行，且有上一个高亮行，移除它\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n    \n    // 鼠标离开处理\n    const mouseLeaveHandler = () => {\n      // 清除当前高亮\n      if (lastHighlightedLine) {\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n    \n    // 存储处理函数引用\n    window.eventTracker = window.eventTracker || { mouseFollowHandlers: [] };\n    window.eventTracker.mouseFollowHandlers.push(\n      { element: contentArea, event: 'mousemove', handler: mouseMoveHandler },\n      { element: contentArea, event: 'mouseleave', handler: mouseLeaveHandler }\n    );\n    \n    // 添加事件监听器\n    contentArea.addEventListener('mousemove', mouseMoveHandler);\n    contentArea.addEventListener('mouseleave', mouseLeaveHandler);\n    \n    console.log('改进的鼠标跟随监听器已初始化');\n  };\n  \n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n  }, []);\n  \n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async (file) => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      \n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n      \n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n      \n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n  \n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({ scale: 1.0 });\n      \n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      \n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      \n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async (textContent) => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n    \n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n    \n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n    \n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    \n    const lines = [...lineMap.values()];\n    \n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    \n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    \n    return hasTocKeywords || hasPageNumberPatterns || (shortLineRatio > 0.7 && numberLineRatio > 0.3);\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n    \n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    \n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n      \n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n      \n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n      \n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    \n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && \n              x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = (text) => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    \n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      \n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        \n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    \n    return result;\n  };\n\n  // 处理内容页面 - 按句子划分段落\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      \n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n      // 按句子划分内容（句号、问号、感叹号等作为分隔符）\n      const sentences = splitIntoSentences(extractedText);\n      \n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch(mode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          // 使用ADHD友好的静态高亮处理\n          console.log('应用ADHD友好的静态高亮模式');\n          processedContent = formatSimpleHighlightedText(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'rhythm':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          processedContent = createFlashReadingContentFromSentences(sentences);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n      \n      setContent(processedContent);\n      \n      // 如果是静态高亮模式，添加延时验证检查\n      if (mode === 'static') {\n        setTimeout(() => {\n          const contentArea = document.querySelector('.adhd-highlight-mode');\n          if (contentArea) {\n            console.log('静态高亮模式元素存在');\n            const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n            console.log(`找到 ${paragraphs.length} 个段落`);\n            \n            // 检查样式是否正确应用\n            if (paragraphs.length > 0) {\n              const firstPara = paragraphs[0];\n              const styles = window.getComputedStyle(firstPara);\n              console.log('段落应用的样式:', {\n                color: styles.color,\n                backgroundColor: styles.backgroundColor,\n                fontFamily: styles.fontFamily,\n                fontSize: styles.fontSize\n              });\n            }\n          }\n        }, 200);\n      }\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 将文本分割成句子\n  const splitIntoSentences = (text) => {\n    // 匹配句号、问号、感叹号后跟空格或结束的模式\n    // 支持中英文标点符号\n    const sentenceRegex = /([.!?。！？；;]+\\s*)/g;\n    \n    // 分割文本成句子\n    const sentences = [];\n    let lastIndex = 0;\n    let match;\n    \n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const sentence = text.substring(lastIndex, endIndex).trim();\n      \n      // 避免添加空句子\n      if (sentence) {\n        sentences.push(sentence);\n      }\n      \n      lastIndex = endIndex;\n    }\n    \n    // 处理最后一部分（如果没有以句号等结尾）\n    if (lastIndex < text.length) {\n      const lastSentence = text.substring(lastIndex).trim();\n      if (lastSentence) {\n        sentences.push(lastSentence);\n      }\n    }\n    \n    return sentences;\n  };\n\n  // 专门为闪读模式分割文本，以任意标点符号为分隔点\n  const splitIntoFlashReadingSegments = (text) => {\n    // 匹配任意标点符号包括中英文标点\n    const sentenceRegex = /([,.!?:;，。！？：；、]+\\s*)/g;\n    \n    // 分割文本成短句\n    const segments = [];\n    let lastIndex = 0;\n    let match;\n    \n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const segment = text.substring(lastIndex, endIndex).trim();\n      \n      // 避免添加空段落\n      if (segment) {\n        segments.push(segment);\n      }\n      \n      lastIndex = endIndex;\n    }\n    \n    // 处理最后一部分（如果没有以标点符号结尾）\n    if (lastIndex < text.length) {\n      const lastSegment = text.substring(lastIndex).trim();\n      if (lastSegment) {\n        segments.push(lastSegment);\n      }\n    }\n    \n    return segments;\n  };\n\n  // 格式化句子为HTML\n  const formatSentencesToHtml = (sentences) => {\n    let html = '<div class=\"pdf-content\">';\n    \n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${sentence}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为句子应用静态高亮\n  const applyStaticHighlightToSentences = (sentences) => {\n    let html = '<div class=\"pdf-content adhd-content\">';\n    \n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      \n      // 简单地为句子添加特定样式的class\n      html += `<p class=\"pdf-paragraph adhd-sentence\">${sentence}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为鼠标跟随模式格式化句子\n  const formatSentencesForMouseFollow = (sentences) => {\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    sentences.forEach((sentence, index) => {\n      if (sentence.trim() === '') return;\n      \n      // 每个句子作为独立行，使用div而不是p标签\n      html += `<div class=\"follow-line\" data-line=\"${index}\" data-sentence=\"${sentence.substring(0, 20)}...\" style=\"color: inherit;\">${sentence}</div>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为舒适3D模式格式化句子\n  const applyComfortable3dEffectToSentences = (sentences) => {\n    let html = '<div class=\"pdf-content\">';\n    \n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      \n      // 为每个词随机应用不同的3D效果\n      const words = sentence.split(/(\\s+)/);\n      let processedSentence = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedSentence += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          \n          processedSentence += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedSentence}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为闪读模式创建内容\n  const createFlashReadingContentFromSentences = (sentences) => {\n    // 储存句子到全局变量，用于后续显示\n    window.flashReadingSentences = sentences;\n\n    // 返回闪读界面的HTML结构\n    return `\n      <div class=\"flash-reading-container\">\n        <div class=\"flash-reading-controls\">\n          <div class=\"flash-reading-buttons\">\n            <button id=\"flash-reading-prev-sentence\" class=\"flash-reading-btn\">上一句</button>\n            <button id=\"flash-reading-play\" class=\"flash-reading-btn\">开始</button>\n            <button id=\"flash-reading-pause\" class=\"flash-reading-btn\" disabled>暂停</button>\n            <button id=\"flash-reading-stop\" class=\"flash-reading-btn\">停止</button>\n            <button id=\"flash-reading-next-sentence\" class=\"flash-reading-btn\">下一句</button>\n          </div>\n          <div class=\"flash-reading-speed\">\n            <span>速度：</span>\n            <input type=\"range\" id=\"flash-reading-speed\" min=\"300\" max=\"1700\" step=\"50\" value=\"1000\" class=\"flash-reading-slider\">\n            <span id=\"flash-reading-speed-value\">1000 ms</span>\n            <span class=\"flash-reading-speed-note\">（数值越小，切换越快）</span>\n          </div>\n          <div class=\"flash-reading-progress\">\n            <span id=\"flash-reading-progress\">进度：0 / ${sentences.length}</span>\n          </div>\n        </div>\n        <div class=\"flash-reading-display-wrapper\">\n          <div class=\"flash-reading-cover\"></div> <!-- 这里是闪卡 -->\n          <div id=\"flash-reading-display\" class=\"flash-reading-display\">准备开始</div>\n        </div>\n      </div>`;\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async (file) => {\n    try {\n      const text = await file.text();\n      \n      // 根据阅读模式选择不同的处理方式\n      let processedContent = '';\n      \n      if (readingMode === 'flash-reading') {\n        // 闪读模式下使用特定的分割函数\n        const segments = splitIntoFlashReadingSegments(text);\n        processedContent = createFlashReadingContentFromSentences(segments);\n        \n        // 初始化闪读模式\n        setTimeout(() => {\n          initializeFlashReading();\n        }, 100);\n      } else {\n        // 其他模式使用默认的分割方式\n        const sentences = splitIntoSentences(text);\n        \n        switch(readingMode) {\n          case 'normal':\n            processedContent = formatSentencesToHtml(sentences);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlightToSentences(sentences);\n            break;\n          case 'follow-mouse':\n            processedContent = formatSentencesForMouseFollow(sentences);\n            break;\n          case 'comfortable-3d':\n            processedContent = applyComfortable3dEffectToSentences(sentences);\n            break;\n          default:\n            processedContent = formatSentencesToHtml(sentences);\n        }\n      }\n      \n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n      \n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setContent('<div class=\"error-message\">TXT文件处理失败</div>');\n    }\n  };\n\n  // 处理Markdown文件\n  const handleMarkdownFile = async (file) => {\n    try {\n      const text = await file.text();\n      \n      // 使用marked库转换markdown为HTML\n      let html = '';\n      try {\n        if (window.marked) {\n          html = window.marked.parse(text);\n        } else {\n          // 如果没有marked库，简单地拆分为段落\n          html = `<div>${text.split(\"\\n\\n\").map(p => `<p>${p}</p>`).join(\"\")}</div>`;\n        }\n      } catch (parseError) {\n        console.error('Markdown解析错误:', parseError);\n        html = `<div>${text}</div>`;\n      }\n      \n      // 提取纯文本内容\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = html;\n      const plainText = tempDiv.textContent || tempDiv.innerText || '';\n      \n      // 分割文本为句子\n      const sentences = splitIntoSentences(plainText);\n      \n      // 根据当前阅读模式处理内容\n      let processedContent = '';\n      switch(readingMode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlightToSentences(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          // 使用特定的闪读分割函数重新处理文本\n          const segments = splitIntoFlashReadingSegments(plainText);\n          processedContent = createFlashReadingContentFromSentences(segments);\n          \n          // 初始化闪读模式\n          setTimeout(() => {\n            initializeFlashReading();\n          }, 100);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n      \n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n      \n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('Markdown处理错误:', error);\n      setContent('<div class=\"error-message\">Markdown文件处理失败</div>');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async (e) => {\n    const uploadedFile = e.target.files[0];\n    if (!uploadedFile) return;\n    \n    setLoading(true);\n    setFileName(uploadedFile.name);\n    \n    try {\n      if (uploadedFile.type === 'application/pdf') {\n        await handlePdfFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/plain' || uploadedFile.name.endsWith('.txt')) {\n        await handleTxtFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/markdown' || uploadedFile.name.endsWith('.md')) {\n        await handleMarkdownFile(uploadedFile);\n    } else {\n        setContent('<div class=\"error-message\">不支持的文件格式</div>');\n      }\n    } catch (error) {\n      console.error('处理文件时出错:', error);\n      setContent('<div class=\"error-message\">处理文件时出错</div>');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = (container) => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    \n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n      \n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n      \n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          \n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n          \n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width/2,  // 水平中心\n            y: rect.bottom,               // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n    \n    // 过滤无效位置并排序\n    return positions\n      .filter(p => p.char.trim() !== '')\n      .sort((a, b) => {\n        // 先按行排序，同行按列排序\n        const yDiff = a.y - b.y;\n        if (Math.abs(yDiff) > 5) { // 5px阈值判断是否同一行\n          return yDiff;\n        }\n        return a.x - b.x;\n      });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    \n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - (containerVisibleHeight / 2);\n      \n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - (window.innerHeight / 2);\n      \n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    \n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n    \n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    \n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n    \n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length || // 已到末尾\n          positions[nextIndex].char.trim() === '' || // 下一个是空白\n          positions[nextIndex].y > charPosition.y + 5) { // 下一个在新行\n        return true;\n      }\n    }\n    \n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n    \n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n      \n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || \n          current.y > prev.y + 5) { // 有明显换行\n        break;\n      }\n      \n      start--;\n    }\n    \n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n      \n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      \n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n      \n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      \n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (window.autoReader.charPositions.length === 0) {\n      if (window.currentPage < window.totalPages) {\n        window.changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 重置索引到开头\n    window.autoReader.currentIndex = 0;\n    \n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    \n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n    \n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n    \n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none';\n      highlight.style.zIndex = '998';\n      contentContainer.appendChild(highlight);\n    }\n    \n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight &&\n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n    \n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20;\n    \n    // 尝试获取实际行高\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(window.autoReader.charPositions[i].y - window.autoReader.charPositions[i-1].y);\n        if (yDiff > 5) {\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n    \n    // 记录上次滚动的位置\n    let lastScrolledY = -1;\n    const scrollSafeZone = lineHeight * 2.5;\n    \n    // 设置字符大小的估计值\n    let charWidth = 20;\n    let charHeight = lineHeight * 0.8;\n    \n    // 尝试估计字符宽度\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        if (window.autoReader.charPositions[i].x !== window.autoReader.charPositions[i-1].x) {\n          const xDiff = Math.abs(window.autoReader.charPositions[i].x - window.autoReader.charPositions[i-1].x);\n          if (xDiff > 0 && xDiff < 50) {\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    \n    window.autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (window.autoReader.currentIndex < window.autoReader.charPositions.length && \n             window.autoReader.charPositions[window.autoReader.currentIndex]?.char.trim() === '') {\n        window.autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (window.autoReader.currentIndex >= window.autoReader.charPositions.length) {\n        if (window.currentPage < window.totalPages) {\n          window.changePage(1);\n          clearInterval(window.autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n\n      const pos = window.autoReader.charPositions[window.autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      \n      if (cursor && highlight) {\n        const contentRect = contentContainer.getBoundingClientRect();\n        \n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        \n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        \n        highlight.style.left = `${relativeX - charWidth/2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n        \n        // 滚动处理\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        \n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          \n          if (isContainerScrollable) {\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n            \n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            \n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = relativeY;\n            }\n          } else {\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n            \n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            \n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      \n      window.autoReader.currentIndex++;\n      \n    }, window.autoReader.speed);\n    \n    // 在停止自动阅读时清除所有高亮\n    window.autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n      \n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n      \n      // 调用清理函数\n      if (window.autoReader.cleanup) {\n        window.autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n    \n    // 重置翻页状态\n    window.autoReader.isPageChanging = false;\n    \n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n    \n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n    \n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n    \n    // 收集字符位置\n    window.autoReader.charPositions = getAllCharacterPositions(content);\n    \n    // 如果当前页没有内容，尝试翻页\n    if (window.autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !window.autoReader.isPageChanging) {\n        window.autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async (e) => {\n    const newMode = e.target.value;\n    const prevMode = readingMode;\n    \n    console.log(`切换阅读模式: 从 ${prevMode} 到 ${newMode}`);\n    \n    // 更新状态\n    setReadingMode(newMode);\n    \n    // 如果有PDF文档和当前页，重新处理当前页内容\n    if (pdfDocument && currentPage > 0) {\n      try {\n        console.log('重新处理当前页面内容');\n        const page = await pdfDocument.getPage(currentPage);\n        \n        // 不使用任何额外处理，直接使用最原始的方式重新加载页面\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n        \n        // 根据当前模式设置内容\n        if (newMode === 'static') {\n          // 静态高亮模式 - 使用改进的句子处理\n          const html = formatSimpleHighlightedText(sentences);\n          console.log('设置静态高亮内容');\n          setContent(html);\n          \n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n        if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n              \n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n                \n                // 验证文字颜色\n                if (styles.color === 'rgb(51, 51, 51)' || styles.color === '#333333') {\n                  console.log('文字颜色正确应用');\n                } else {\n                  console.warn('文字颜色可能未正确应用:', styles.color);\n                }\n              }\n            } else {\n              console.error('未找到静态高亮模式内容区域');\n            }\n          }, 200);\n        } else if (newMode === 'flash-reading') {\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n            \n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n            \n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n            \n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n        } else {\n          // 其他模式保持不变\n          const handler = getContentHandlerForMode(newMode);\n          const processedContent = handler(sentences);\n          setContent(processedContent);\n        }\n      } catch (error) {\n        console.error('应用阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 首先确保移除鼠标跟随监听器\n    removeMouseFollowListeners();\n    \n    // 清理节奏阅读器\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    \n    // 清理闪读器\n    if (window.flashReader) {\n      window.flashReader.cleanup();\n    }\n    \n    // 清理舒适3D效果\n    const comfortable3DElements = document.querySelectorAll('.emboss-3d-text, .float-3d-text, .gradient-3d-text');\n    comfortable3DElements.forEach(el => el.remove());\n    \n    // 清理闪读模式元素\n    const flashReadingElements = document.querySelectorAll('.flash-reading-container, .flash-reading-display, .flash-reading-controls');\n    flashReadingElements.forEach(el => el.remove());\n    \n    // 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll(\n      '.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line, .rhythm-char'\n    );\n    highlights.forEach(el => {\n      if (el.parentNode) el.parentNode.removeChild(el);\n    });\n    \n    // 彻底替换内容区域以移除所有事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 先保存底部翻页控件\n      const bottomPagination = contentArea.querySelector('.bottom-pagination');\n      \n      // 深度克隆内容，但不克隆事件监听器\n      const contentHTML = contentArea.querySelector('div[dangerouslySetInnerHTML]')?.innerHTML || '';\n      const newContentArea = contentArea.cloneNode(false);\n      \n      // 创建新的内容容器\n      const newContentContainer = document.createElement('div');\n      newContentContainer.innerHTML = contentHTML;\n      newContentArea.appendChild(newContentContainer);\n      \n      // 如果有底部翻页控件，重新添加\n      if (bottomPagination && totalPages > 0) {\n        const newBottomPagination = bottomPagination.cloneNode(true);\n        // 重新绑定事件\n        const prevBtn = newBottomPagination.querySelector('.page-btn:first-child');\n        const nextBtn = newBottomPagination.querySelector('.page-btn:last-child');\n        if (prevBtn) prevBtn.onclick = () => changePage(-1);\n        if (nextBtn) nextBtn.onclick = () => changePage(1);\n        newContentArea.appendChild(newBottomPagination);\n      }\n      \n      if (contentArea.parentNode) {\n        contentArea.parentNode.replaceChild(newContentArea, contentArea);\n      }\n    }\n    \n    // 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 移除所有特殊标记和样式\n      paragraph.removeAttribute('data-follow');\n      paragraph.removeAttribute('style');\n      \n      // 清理特殊span标签\n      paragraph.innerHTML = paragraph.innerHTML\n        .replace(/<span class=\"text-line\"[^>]*>/g, '')\n        .replace(/<span class=\"rhythm-char\"[^>]*>/g, '')\n        .replace(/<span class=\"line-highlight[^\"]*\"[^>]*>/g, '')\n        .replace(/<span class=\"mouse-highlight[^\"]*\"[^>]*>/g, '')\n        .replace(/<\\/span>/g, '');\n    });\n    \n    // 移除特殊UI元素\n    const elementsToRemove = [\n      'rhythm-speed-slider',\n      'rhythm-notification'\n    ];\n    \n    elementsToRemove.forEach(id => {\n      const element = document.getElementById(id);\n      if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    });\n    \n    // 移除暗色背景\n    document.body.classList.remove('dark-background');\n    \n    // 清理闪读模式\n    if (window.flashReader && typeof window.flashReader.cleanup === 'function') {\n      window.flashReader.cleanup();\n    }\n  };\n\n  const handleAutoScroll = () => {\n    window.autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = (e) => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    \n    const rect = contentArea.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    \n    clearAllHighlights();\n    \n    const paragraphs = contentArea.querySelectorAll('p');\n    paragraphs.forEach(paragraph => {\n      const paragraphRect = paragraph.getBoundingClientRect();\n      const paragraphX = paragraphRect.left - rect.left;\n      const paragraphY = paragraphRect.top - rect.top;\n      \n      if (y >= paragraphY && y <= paragraphY + paragraphRect.height) {\n        const words = paragraph.querySelectorAll('span');\n        words.forEach(word => {\n          const wordRect = word.getBoundingClientRect();\n          const wordX = wordRect.left - rect.left;\n          \n          if (x >= wordX && x <= wordX + wordRect.width) {\n            word.classList.add('highlight');\n          }\n        });\n      }\n    });\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 专门用于移除鼠标跟随事件的函数\n  const removeMouseFollowListeners = () => {\n    // 移除记录的所有监听器\n    if (window.eventTracker && window.eventTracker.mouseFollowHandlers) {\n      window.eventTracker.mouseFollowHandlers.forEach(({element, event, handler}) => {\n        if (element && element.removeEventListener) {\n          element.removeEventListener(event, handler);\n        }\n      });\n      window.eventTracker.mouseFollowHandlers = [];\n    }\n    \n    // 为安全起见，尝试从document和内容区域移除通用处理函数\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    }\n    \n    document.removeEventListener('mousemove', handleMouseMove);\n    \n    // 清除所有当前高亮\n    clearAllHighlights();\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n    \n    // 添加底部翻页控件样式\n    const bottomPaginationStyles = document.createElement('style');\n    bottomPaginationStyles.id = 'bottom-pagination-styles';\n    bottomPaginationStyles.innerHTML = `\n      .bottom-pagination {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        padding: 20px 0 30px;\n        margin-top: 30px;\n        width: 100%;\n        background-color: transparent;\n        border-radius: 5px;\n      }\n\n      .bottom-pagination .page-btn {\n        background-color: #6c5ce7;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        padding: 8px 15px;\n        margin: 0 10px;\n        cursor: pointer;\n        font-size: 14px;\n        transition: background-color 0.2s ease;\n      }\n\n      .bottom-pagination .page-btn:hover {\n        background-color: #4834d4;\n      }\n\n      .bottom-pagination .page-btn:disabled {\n        background-color: #aaa;\n        cursor: not-allowed;\n      }\n\n      .bottom-pagination .page-info {\n        font-size: 14px;\n        margin: 0 10px;\n      }\n    `;\n    document.head.appendChild(bottomPaginationStyles);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n    addComfortable3DStyles();\n    \n    // 添加鼠标跟随模式的样式\n    const mouseFollowStyle = document.createElement('style');\n    mouseFollowStyle.id = 'intelligent-mouse-follow-style';\n    mouseFollowStyle.textContent = `\n      /* 基础样式 */\n      .mouse-follow-content {\n        position: relative;\n        line-height: 1.8;\n      }\n      \n      .mouse-follow-content .follow-line {\n        position: relative;\n        padding: 8px 16px;\n        margin: 4px 0;\n        border-radius: 6px;\n        transition: all 0.2s ease;\n        display: block;\n        min-height: 1.8em;\n        white-space: normal;\n        word-wrap: break-word;\n        text-indent: 2em;\n      }\n      \n      /* 高亮状态 */\n      .follow-line.highlighted {\n        background-color: #ffa500 !important; /* 橙色背景 */\n        color: #ffffff !important; /* 白色文字 */\n        font-weight: bold !important;\n        font-size: 1.1em; /* 稍微调小字号 */\n        transform: translateX(5px);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n      }\n      \n      \n      /* 平滑过渡效果 */\n      .follow-line {\n        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n      }\n      \n      /* 行间距优化 */\n      .mouse-follow-content .follow-line + .follow-line {\n        margin-top: 4px;\n      }\n      \n      /* 添加行指示器 */\n      .follow-line::before {\n        content: '';\n        position: absolute;\n        left: 0;\n        top: 0;\n        bottom: 0;\n        width: 3px;\n        background: linear-gradient(to bottom, transparent, rgba(255, 255, 255, 0.5), transparent);\n        opacity: 0;\n        transition: opacity 0.2s ease;\n      }\n      \n      .follow-line.highlighted::before {\n        opacity: 1;\n      }\n    `;\n    document.head.appendChild(mouseFollowStyle);\n    \n    // 创建深色背景下的ADHD友好高亮样式\n    const style = document.createElement('style');\n    style.id = 'adhd-friendly-highlight-style';\n    style.textContent = `\n      /* ADHD友好的高亮样式 - 适配深色背景 */\n      .adhd-highlight-mode {\n        line-height: 1.8;\n        padding: 20px;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph {\n        margin-bottom: 1.2em;\n        background-color: transparent;\n        padding: 12px 15px;\n        border-radius: 6px;\n        border-left: 3px solid rgba(255, 255, 255, 0.2);\n        transition: all 0.3s ease;\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover {\n        transform: translateX(5px);\n        border-left-color: rgba(255, 255, 255, 0.4);\n      }\n      \n      /* 加粗样式 - 白色加粗 */\n      .adhd-bold {\n        font-weight: 700;\n        color: #ffffff;\n        letter-spacing: 0.02em;\n        font-size: 1.1em;\n        text-shadow: 0 0 1px rgba(255, 255, 255, 0.2);\n      }\n      \n      /* 彩色样式 - 使用鲜明的蓝色 */\n      .adhd-colored {\n        color: #6c5ce7;\n        font-weight: 500;\n        font-size: 1.05em;\n        text-shadow: 0 0 1px rgba(108, 92, 231, 0.2);\n      }\n      \n      /* 正常样式 - 普通白色 */\n      .adhd-normal {\n        color: rgba(255, 255, 255, 0.8);\n        font-size: 1em;\n      }\n\n      /* 添加平滑过渡效果 */\n      .adhd-bold, .adhd-colored, .adhd-normal {\n        transition: all 0.2s ease;\n      }\n\n      /* 悬停效果 */\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-bold {\n        color: #ffffff;\n        text-shadow: 0 0 2px rgba(255, 255, 255, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-colored {\n        color: #8a7ff7;\n        text-shadow: 0 0 2px rgba(138, 127, 247, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-normal {\n        color: rgba(255, 255, 255, 0.9);\n      }\n\n      /* 添加段落间距的视觉引导 */\n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph {\n        margin-top: 1.5em;\n        position: relative;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph::before {\n        content: '';\n        position: absolute;\n        top: -0.75em;\n        left: 0;\n        right: 0;\n        height: 1px;\n        background: linear-gradient(\n          to right,\n          transparent,\n          rgba(255, 255, 255, 0.1),\n          transparent\n        );\n      }\n    `;\n    document.head.appendChild(style);\n    \n    // 添加基础鼠标跟随样式\n    const mouseFollowPageStyle = document.createElement('style');\n    mouseFollowPageStyle.id = 'basic-mouse-follow-style';\n    mouseFollowPageStyle.textContent = `\n      .follow-line {\n        padding: 8px 12px;\n        margin: 4px 0;\n        border-radius: 4px;\n        transition: background-color 0.2s ease;\n      }\n      .follow-line.highlighted {\n        background-color: #ffa500;\n        color: #000080;\n        font-weight: bold;\n      }\n    `;\n    document.head.appendChild(mouseFollowPageStyle);\n    \n    return () => {\n      const existingStyle = document.getElementById('adhd-friendly-highlight-style');\n      if (existingStyle) existingStyle.remove();\n      \n      const existingMouseFollowStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (existingMouseFollowStyle) existingMouseFollowStyle.remove();\n      \n      const existingBasicMouseFollowStyle = document.getElementById('basic-mouse-follow-style');\n      if (existingBasicMouseFollowStyle) existingBasicMouseFollowStyle.remove();\n      \n      mouseFollowPageStyle.remove();\n    };\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 清理旧监听器\n    removeMouseFollowListeners();\n    \n    // 添加新监听器\n    setTimeout(() => {\n      addMouseFollowListeners();\n      \n      // 添加调试辅助 - 显示行边界\n      const contentArea = document.querySelector('.mouse-follow-content');\n      if (contentArea) {\n        const lines = contentArea.querySelectorAll('.follow-line');\n        console.log(`初始化鼠标跟随模式，共 ${lines.length} 行`);\n        \n        // 可选：启用可视化调试\n        if (false) { // 设置为true可以启用可视化调试\n          lines.forEach((line, index) => {\n            line.style.border = '1px dashed #888';\n            line.setAttribute('title', `行 ${index+1}`);\n          });\n        }\n        \n        // 验证行高亮效果\n        const firstLine = lines[0];\n        if (firstLine) {\n          console.log('行样式验证:', {\n            padding: window.getComputedStyle(firstLine).padding,\n            margin: window.getComputedStyle(firstLine).margin,\n            fontSize: window.getComputedStyle(firstLine).fontSize,\n            lineHeight: window.getComputedStyle(firstLine).lineHeight\n          });\n        }\n      }\n    }, 100);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = (delta) => {\n    window.autoReader.speed = Math.max(100, window.autoReader.speed + delta);\n    \n    if (window.autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async (delta) => {\n    console.log(`翻页请求: 当前页 ${currentPage}, 增量 ${delta}`);\n    const newPage = currentPage + delta;\n    \n    if (newPage < 1 || newPage > totalPages) {\n      console.log('无效页码，不执行翻页');\n          return;\n        }\n        \n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n    const wasFlashReading = readingMode === 'flash-reading' && window.flashReader && window.flashReader.isPlaying;\n    \n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    \n    if (wasFlashReading && window.flashReader) {\n      window.flashReader.cleanup();\n    }\n    \n    // 更新页码\n    setCurrentPage(newPage);\n    \n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n      \n      // 检查是否为目录页\n      const textContent = await page.getTextContent();\n      const isToc = await detectIfTocPage(textContent);\n      setIsTableOfContents(isToc);\n      \n      if (isToc) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, page.getViewport({ scale: 1.0 }));\n      } else {\n        // 处理正文页面 - 根据当前阅读模式处理\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n        \n        // 根据当前模式设置内容\n        if (readingMode === 'static') {\n          console.log('翻页后应用静态高亮模式');\n          const processedContent = formatSimpleHighlightedText(sentences);\n          setContent(processedContent);\n          \n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n            if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n              \n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n              }\n            }\n          }, 200);\n        } else if (readingMode === 'flash-reading') {\n          // 如果是闪读模式，则需要特殊处理\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n            \n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n            \n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n            \n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n          return; // 已处理，直接返回\n        } else {\n          // 其他模式使用原处理函数\n          await processContentPage(page, readingMode);\n        }\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n    } catch (error) {\n      console.error('页面切换错误:', error);\n    }\n  };\n\n  // ADHD友好的静态高亮处理函数\n  const formatSimpleHighlightedText = (sentences) => {\n    console.log('开始处理ADHD友好的静态高亮文本，句子数量:', sentences.length);\n    \n    let html = '<div class=\"pdf-content adhd-highlight-mode\">';\n    \n    sentences.forEach((sentence, sentenceIndex) => {\n      if (!sentence || sentence.trim() === '') {\n        console.log(`跳过空句子，索引: ${sentenceIndex}`);\n      return;\n    }\n    \n      // 清理和规范化文本\n      const cleanText = sentence\n        .trim()\n        .replace(/\\s+/g, ' ')  // 规范化空白字符\n        .replace(/&/g, '&amp;')  // 转义特殊字符\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n      \n      // 处理句子中的单词，为它们添加不同样式\n      const words = cleanText.split(/(\\s+)/);\n      let formattedSentence = '';\n      \n      words.forEach((word, wordIndex) => {\n        if (word.trim() === '') {\n          // 保留空格\n          formattedSentence += word;\n      } else {\n          // 根据位置应用不同的样式类\n          // 三种交替样式: 加粗、彩色、正常\n          const styleClass = wordIndex % 3 === 0 ? 'adhd-bold' : \n                           wordIndex % 3 === 1 ? 'adhd-colored' : 'adhd-normal';\n          \n          formattedSentence += `<span class=\"${styleClass}\">${word}</span>`;\n        }\n      });\n      \n      console.log(`处理句子 ${sentenceIndex + 1}:`, cleanText.substring(0, 50) + '...');\n      html += `<p class=\"pdf-paragraph\">${formattedSentence}</p>`;\n    });\n    \n    html += '</div>';\n    \n    // 调试输出\n    console.log('生成的ADHD友好静态高亮HTML:', html.substring(0, 200) + '...');\n    \n    return html;\n  };\n\n  // 根据阅读模式获取相应的内容处理函数\n  const getContentHandlerForMode = (mode) => {\n    switch(mode) {\n      case 'normal': return formatSentencesToHtml;\n      case 'static': return applyStaticHighlightToSentences;\n      case 'follow-mouse': return formatSentencesForMouseFollow;\n      case 'comfortable-3d': return applyComfortable3dEffectToSentences;\n      case 'flash-reading': \n        return (sentences) => {\n          // 闪读模式使用专门的分割函数重新处理文本\n          return createFlashReadingContentFromSentences(sentences);\n        };\n      default: return formatSentencesToHtml;\n    }\n  };\n\n  // 监听阅读模式和当前页面的变化\n  useEffect(() => {\n    if (readingMode === 'mouse-follow' && currentPage && !isTableOfContents) {\n      // 移除之前的样式\n      const oldStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (oldStyle) {\n        oldStyle.remove();\n      }\n      \n      // 添加基础鼠标跟随样式\n      const followModeStyle = document.createElement('style');\n      followModeStyle.id = 'basic-mouse-follow-style';\n      followModeStyle.textContent = `\n        .follow-line {\n          padding: 8px 12px;\n          margin: 4px 0;\n          border-radius: 4px;\n          transition: background-color 0.2s ease;\n        }\n        .follow-line.highlighted {\n          background-color: #ffa500;\n          color: #000080;\n          font-weight: bold;\n        }\n      `;\n      document.head.appendChild(followModeStyle);\n      \n      // 处理当前页面内容\n      const page = pdfDocument.getPage(currentPage);\n      const textContent = page.getTextContent();\n      const sentences = textContent.items\n        .map(item => item.str)\n        .join(' ')\n        .split(/[。！？]/)\n        .filter(s => s.trim());\n      \n      // 应用基础鼠标跟随格式化\n      setContent(formatSentencesForMouseFollow(sentences));\n      \n      // 添加鼠标跟随监听器\n      setTimeout(() => {\n        addMouseFollowListeners();\n      }, 100);\n      \n      return () => {\n        followModeStyle.remove();\n      };\n    }\n  }, [readingMode, currentPage, pdfDocument]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        <div className=\"logo\">\n          <h2>ADHD阅读助手</h2>\n        </div>\n        \n        <div className=\"reading-controls\">\n          <h3>阅读模式</h3>\n          <select \n            id=\"reading-mode-select\" \n            value={readingMode} \n            onChange={handleReadingModeChange}\n            className=\"mode-select\"\n          >\n            <option value=\"normal\">普通模式</option>\n            <option value=\"static\">静态高亮</option>\n            <option value=\"follow-mouse\">鼠标跟随</option>\n            <option value=\"rhythm\">节奏阅读</option>\n            <option value=\"flash-reading\">闪读模式</option>\n          </select>\n        </div>\n        \n        <div className=\"upload-section\">\n          <input\n            type=\"file\"\n            accept=\".pdf,.txt,.md\" \n            hidden\n            id=\"file-upload\"\n            onChange={handleFileUpload}\n            ref={fileRef}\n          />\n          <button \n            className=\"upload-btn\"\n            onClick={() => fileRef.current.click()}\n          >\n            上传文件 (.pdf/.txt/.md)\n          </button>\n      </div>\n            </div>\n      \n      <div className=\"main-content\">\n        <div className=\"toolbar\">\n          {fileName && <h3 className=\"filename\">{fileName}</h3>}\n          {/* 移除了原有翻页控件 */}\n            </div>\n        \n        <div className=\"page-content\" ref={readerContainerRef}>\n            <div dangerouslySetInnerHTML={{ __html: content }} />\n          \n          {totalPages > 0 && (\n            <div className=\"bottom-pagination\">\n              <button \n                onClick={() => changePage(-1)} \n                disabled={currentPage <= 1}\n                className=\"page-btn\"\n              >\n                上一页\n              </button>\n            <span className=\"page-info\">\n                第 {currentPage} / {totalPages} 页\n              </span>\n              <button \n                onClick={() => changePage(1)} \n                disabled={currentPage >= totalPages}\n                className=\"page-btn\"\n              >\n                下一页\n              </button>\n          </div>\n        )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App; \n"],"mappings":"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,EAAER,eAAe,CAAC;;IAE1D;IACAE,kBAAkB,CAAC,CAAC;EACtB,CAAC;;EAED;EACA,MAAMO,mBAAmB,GAAGA,CAAA,KAAM;IAChC,MAAM5Y,KAAK,GAAGnD,QAAQ,CAAC8C,aAAa,CAAC,OAAO,CAAC;IAC7CK,KAAK,CAACJ,WAAW,GAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACD/C,QAAQ,CAACmL,IAAI,CAAC1H,WAAW,CAACN,KAAK,CAAC;;IAEhC;IACA,MAAM6Y,sBAAsB,GAAGhc,QAAQ,CAAC8C,aAAa,CAAC,OAAO,CAAC;IAC9DkZ,sBAAsB,CAAC5b,EAAE,GAAG,0BAA0B;IACtD4b,sBAAsB,CAACrG,SAAS,GAAG;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACD3V,QAAQ,CAACmL,IAAI,CAAC1H,WAAW,CAACuY,sBAAsB,CAAC;EACnD,CAAC;;EAED;EACAte,SAAS,CAAC,MAAM;IACdqe,mBAAmB,CAAC,CAAC;IACrBzQ,sBAAsB,CAAC,CAAC;;IAExB;IACA,MAAM2Q,gBAAgB,GAAGjc,QAAQ,CAAC8C,aAAa,CAAC,OAAO,CAAC;IACxDmZ,gBAAgB,CAAC7b,EAAE,GAAG,gCAAgC;IACtD6b,gBAAgB,CAAClZ,WAAW,GAAG;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACD/C,QAAQ,CAACmL,IAAI,CAAC1H,WAAW,CAACwY,gBAAgB,CAAC;;IAE3C;IACA,MAAM9Y,KAAK,GAAGnD,QAAQ,CAAC8C,aAAa,CAAC,OAAO,CAAC;IAC7CK,KAAK,CAAC/C,EAAE,GAAG,+BAA+B;IAC1C+C,KAAK,CAACJ,WAAW,GAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACD/C,QAAQ,CAACmL,IAAI,CAAC1H,WAAW,CAACN,KAAK,CAAC;;IAEhC;IACA,MAAM+Y,oBAAoB,GAAGlc,QAAQ,CAAC8C,aAAa,CAAC,OAAO,CAAC;IAC5DoZ,oBAAoB,CAAC9b,EAAE,GAAG,0BAA0B;IACpD8b,oBAAoB,CAACnZ,WAAW,GAAG;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACD/C,QAAQ,CAACmL,IAAI,CAAC1H,WAAW,CAACyY,oBAAoB,CAAC;IAE/C,OAAO,MAAM;MACX,MAAMC,aAAa,GAAGnc,QAAQ,CAAC0B,cAAc,CAAC,+BAA+B,CAAC;MAC9E,IAAIya,aAAa,EAAEA,aAAa,CAACxa,MAAM,CAAC,CAAC;MAEzC,MAAMya,wBAAwB,GAAGpc,QAAQ,CAAC0B,cAAc,CAAC,gCAAgC,CAAC;MAC1F,IAAI0a,wBAAwB,EAAEA,wBAAwB,CAACza,MAAM,CAAC,CAAC;MAE/D,MAAM0a,6BAA6B,GAAGrc,QAAQ,CAAC0B,cAAc,CAAC,0BAA0B,CAAC;MACzF,IAAI2a,6BAA6B,EAAEA,6BAA6B,CAAC1a,MAAM,CAAC,CAAC;MAEzEua,oBAAoB,CAACva,MAAM,CAAC,CAAC;IAC/B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMoO,qBAAqB,GAAGA,CAAA,KAAM;IAClC;IACAoK,0BAA0B,CAAC,CAAC;;IAE5B;IACAnR,UAAU,CAAC,MAAM;MACf4F,uBAAuB,CAAC,CAAC;;MAEzB;MACA,MAAMC,WAAW,GAAG7O,QAAQ,CAACC,aAAa,CAAC,uBAAuB,CAAC;MACnE,IAAI4O,WAAW,EAAE;QACf,MAAMqD,KAAK,GAAGrD,WAAW,CAAC5H,gBAAgB,CAAC,cAAc,CAAC;QAC1DzG,OAAO,CAACC,GAAG,CAAC,eAAeyR,KAAK,CAAC9P,MAAM,IAAI,CAAC;;QAE5C;QACA,IAAI,KAAK,EAAE;UAAE;UACX8P,KAAK,CAAC1S,OAAO,CAAC,CAAC8P,IAAI,EAAE1K,KAAK,KAAK;YAC7B0K,IAAI,CAACnM,KAAK,CAACI,MAAM,GAAG,iBAAiB;YACrC+L,IAAI,CAACgN,YAAY,CAAC,OAAO,EAAE,KAAK1X,KAAK,GAAC,CAAC,EAAE,CAAC;UAC5C,CAAC,CAAC;QACJ;;QAEA;QACA,MAAM2X,SAAS,GAAGrK,KAAK,CAAC,CAAC,CAAC;QAC1B,IAAIqK,SAAS,EAAE;UACb/b,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAE;YACpB6C,OAAO,EAAElF,MAAM,CAACkH,gBAAgB,CAACiX,SAAS,CAAC,CAACjZ,OAAO;YACnDD,MAAM,EAAEjF,MAAM,CAACkH,gBAAgB,CAACiX,SAAS,CAAC,CAAClZ,MAAM;YACjDqP,QAAQ,EAAEtU,MAAM,CAACkH,gBAAgB,CAACiX,SAAS,CAAC,CAAC7J,QAAQ;YACrDtN,UAAU,EAAEhH,MAAM,CAACkH,gBAAgB,CAACiX,SAAS,CAAC,CAACnX;UACjD,CAAC,CAAC;QACJ;MACF;IACF,CAAC,EAAE,GAAG,CAAC;EACT,CAAC;;EAED;EACA,MAAMoX,WAAW,GAAIC,KAAK,IAAK;IAC7Bre,MAAM,CAACM,UAAU,CAACI,KAAK,GAAGyG,IAAI,CAACC,GAAG,CAAC,GAAG,EAAEpH,MAAM,CAACM,UAAU,CAACI,KAAK,GAAG2d,KAAK,CAAC;IAExE,IAAIre,MAAM,CAACM,UAAU,CAACE,UAAU,EAAE;MAChCua,cAAc,CAAC,CAAC;MAChBZ,eAAe,CAAC,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAMha,UAAU,GAAG,MAAOke,KAAK,IAAK;IAClCjc,OAAO,CAACC,GAAG,CAAC,aAAapC,WAAW,QAAQoe,KAAK,EAAE,CAAC;IACpD,MAAMC,OAAO,GAAGre,WAAW,GAAGoe,KAAK;IAEnC,IAAIC,OAAO,GAAG,CAAC,IAAIA,OAAO,GAAGpe,UAAU,EAAE;MACvCkC,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;MACrB;IACF;IAEJ,MAAMkc,gBAAgB,GAAGvS,WAAW,KAAK,QAAQ,IAAIhM,MAAM,CAACe,kBAAkB,CAACC,MAAM;IACrF,MAAMwd,eAAe,GAAGxS,WAAW,KAAK,eAAe,IAAIhM,MAAM,CAACkO,WAAW,IAAIlO,MAAM,CAACkO,WAAW,CAACE,SAAS;IAE7G,IAAImQ,gBAAgB,IAAIve,MAAM,CAACiB,YAAY,EAAE;MAC3CjB,MAAM,CAACiB,YAAY,CAACC,IAAI,CAAC,CAAC;IAC5B;IAEA,IAAIsd,eAAe,IAAIxe,MAAM,CAACkO,WAAW,EAAE;MACzClO,MAAM,CAACkO,WAAW,CAACpN,OAAO,CAAC,CAAC;IAC9B;;IAEA;IACAqK,cAAc,CAACmT,OAAO,CAAC;IAEvB,IAAI;MACF;MACA,MAAM9L,IAAI,GAAG,MAAM/F,WAAW,CAACgG,OAAO,CAAC6L,OAAO,CAAC;;MAE/C;MACA,MAAM3Z,WAAW,GAAG,MAAM6N,IAAI,CAACE,cAAc,CAAC,CAAC;MAC/C,MAAM+L,KAAK,GAAG,MAAM3L,eAAe,CAACnO,WAAW,CAAC;MAChDiI,oBAAoB,CAAC6R,KAAK,CAAC;MAE3B,IAAIA,KAAK,EAAE;QACT;QACA,MAAM1L,cAAc,CAACpO,WAAW,EAAE6N,IAAI,CAACI,WAAW,CAAC;UAAEC,KAAK,EAAE;QAAI,CAAC,CAAC,CAAC;MACrE,CAAC,MAAM;QACL;QACA,MAAMI,SAAS,GAAGtO,WAAW,CAACuO,KAAK;QACnC,IAAIqC,aAAa,GAAGtC,SAAS,CAACnJ,GAAG,CAACsJ,IAAI,IAAIA,IAAI,CAACC,GAAG,CAAC,CAACtJ,IAAI,CAAC,GAAG,CAAC;QAC7DwL,aAAa,GAAGA,aAAa,CAACC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAACpR,IAAI,CAAC,CAAC;;QAEzD;QACA,MAAMiJ,SAAS,GAAGoI,kBAAkB,CAACF,aAAa,CAAC;;QAEnD;QACA,IAAIvJ,WAAW,KAAK,QAAQ,EAAE;UAC5B5J,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;UAC1B,MAAMqT,gBAAgB,GAAGE,2BAA2B,CAACvI,SAAS,CAAC;UAC/Db,UAAU,CAACkJ,gBAAgB,CAAC;;UAE5B;UACA9K,UAAU,CAAC,MAAM;YACf,MAAM6F,WAAW,GAAG7O,QAAQ,CAACC,aAAa,CAAC,sBAAsB,CAAC;YAClE,IAAI4O,WAAW,EAAE;cACfrO,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;cACzB,MAAM+M,UAAU,GAAGqB,WAAW,CAAC5H,gBAAgB,CAAC,gBAAgB,CAAC;cACjEzG,OAAO,CAACC,GAAG,CAAC,MAAM+M,UAAU,CAACpL,MAAM,MAAM,CAAC;;cAE1C;cACA,IAAIoL,UAAU,CAACpL,MAAM,GAAG,CAAC,EAAE;gBACzB,MAAMgS,SAAS,GAAG5G,UAAU,CAAC,CAAC,CAAC;gBAC/B,MAAM6G,MAAM,GAAGjW,MAAM,CAACkH,gBAAgB,CAAC8O,SAAS,CAAC;gBACjD5T,OAAO,CAACC,GAAG,CAAC,UAAU,EAAE;kBACtBoE,KAAK,EAAEwP,MAAM,CAACxP,KAAK;kBACnBrB,eAAe,EAAE6Q,MAAM,CAAC7Q,eAAe;kBACvC8Q,UAAU,EAAED,MAAM,CAACC,UAAU;kBAC7B5B,QAAQ,EAAE2B,MAAM,CAAC3B;gBACnB,CAAC,CAAC;cACJ;YACF;UACF,CAAC,EAAE,GAAG,CAAC;QACT,CAAC,MAAM,IAAItI,WAAW,KAAK,eAAe,EAAE;UAC1C;UACA,IAAI;YACF,MAAMwG,IAAI,GAAG,MAAM/F,WAAW,CAACgG,OAAO,CAACxS,WAAW,CAAC;YACnD,MAAM0E,WAAW,GAAG,MAAM6N,IAAI,CAACE,cAAc,CAAC,CAAC;YAC/C,MAAMO,SAAS,GAAGtO,WAAW,CAACuO,KAAK;YACnC,IAAIqC,aAAa,GAAGtC,SAAS,CAACnJ,GAAG,CAACsJ,IAAI,IAAIA,IAAI,CAACC,GAAG,CAAC,CAACtJ,IAAI,CAAC,GAAG,CAAC;YAC7DwL,aAAa,GAAGA,aAAa,CAACC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAACpR,IAAI,CAAC,CAAC;;YAEzD;YACA,MAAMuS,QAAQ,GAAGD,6BAA6B,CAACnB,aAAa,CAAC;;YAE7D;YACA,MAAMG,gBAAgB,GAAGK,sCAAsC,CAACY,QAAQ,CAAC;YACzEnK,UAAU,CAACkJ,gBAAgB,CAAC;;YAE5B;YACA9K,UAAU,CAAC,MAAM;cACfwC,sBAAsB,CAAC,CAAC;YAC1B,CAAC,EAAE,GAAG,CAAC;UACT,CAAC,CAAC,OAAOxK,KAAK,EAAE;YACdR,OAAO,CAACQ,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;UACpC;UACA,OAAO,CAAC;QACV,CAAC,MAAM;UACL;UACA,MAAMoQ,kBAAkB,CAACR,IAAI,EAAExG,WAAW,CAAC;QAC7C;MACF;;MAEA;MACA,IAAIA,WAAW,KAAK,cAAc,EAAE;QAClCpB,UAAU,CAAC,MAAM;UACf4F,uBAAuB,CAAC,CAAC;QAC3B,CAAC,EAAE,EAAE,CAAC;MACR;IACF,CAAC,CAAC,OAAO5N,KAAK,EAAE;MACdR,OAAO,CAACQ,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;IACjC;EACF,CAAC;;EAED;EACA,MAAMgT,2BAA2B,GAAIvI,SAAS,IAAK;IACjDjL,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEgL,SAAS,CAACrJ,MAAM,CAAC;IAExD,IAAIsL,IAAI,GAAG,+CAA+C;IAE1DjC,SAAS,CAACjM,OAAO,CAAC,CAACoV,QAAQ,EAAEkI,aAAa,KAAK;MAC7C,IAAI,CAAClI,QAAQ,IAAIA,QAAQ,CAACpS,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QACvChC,OAAO,CAACC,GAAG,CAAC,aAAaqc,aAAa,EAAE,CAAC;QAC3C;MACF;;MAEE;MACA,MAAMC,SAAS,GAAGnI,QAAQ,CACvBpS,IAAI,CAAC,CAAC,CACNoR,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAE;MAAA,CACtBA,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAE;MAAA,CACxBA,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CACrBA,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC;;MAExB;MACA,MAAM/F,KAAK,GAAGkP,SAAS,CAACtP,KAAK,CAAC,OAAO,CAAC;MACtC,IAAIuP,iBAAiB,GAAG,EAAE;MAE1BnP,KAAK,CAACrO,OAAO,CAAC,CAACuO,IAAI,EAAEkP,SAAS,KAAK;QACjC,IAAIlP,IAAI,CAACvL,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;UACtB;UACAwa,iBAAiB,IAAIjP,IAAI;QAC7B,CAAC,MAAM;UACH;UACA;UACA,MAAMmP,UAAU,GAAGD,SAAS,GAAG,CAAC,KAAK,CAAC,GAAG,WAAW,GACnCA,SAAS,GAAG,CAAC,KAAK,CAAC,GAAG,cAAc,GAAG,aAAa;UAErED,iBAAiB,IAAI,gBAAgBE,UAAU,KAAKnP,IAAI,SAAS;QACnE;MACF,CAAC,CAAC;MAEFvN,OAAO,CAACC,GAAG,CAAC,QAAQqc,aAAa,GAAG,CAAC,GAAG,EAAEC,SAAS,CAACpN,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;MAC7EjC,IAAI,IAAI,4BAA4BsP,iBAAiB,MAAM;IAC7D,CAAC,CAAC;IAEFtP,IAAI,IAAI,QAAQ;;IAEhB;IACAlN,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEiN,IAAI,CAACiC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK,CAAC;IAEjE,OAAOjC,IAAI;EACb,CAAC;;EAED;EACA,MAAMuM,wBAAwB,GAAI/Z,IAAI,IAAK;IACzC,QAAOA,IAAI;MACT,KAAK,QAAQ;QAAE,OAAO6T,qBAAqB;MAC3C,KAAK,QAAQ;QAAE,OAAOmB,+BAA+B;MACrD,KAAK,cAAc;QAAE,OAAOjB,6BAA6B;MACzD,KAAK,gBAAgB;QAAE,OAAOC,mCAAmC;MACjE,KAAK,eAAe;QAClB,OAAQzI,SAAS,IAAK;UACpB;UACA,OAAO0I,sCAAsC,CAAC1I,SAAS,CAAC;QAC1D,CAAC;MACH;QAAS,OAAOsI,qBAAqB;IACvC;EACF,CAAC;;EAED;EACArW,SAAS,CAAC,MAAM;IACd,IAAI0M,WAAW,KAAK,cAAc,IAAI/L,WAAW,IAAI,CAAC0M,iBAAiB,EAAE;MACvE;MACA,MAAMoS,QAAQ,GAAGnd,QAAQ,CAAC0B,cAAc,CAAC,gCAAgC,CAAC;MAC1E,IAAIyb,QAAQ,EAAE;QACZA,QAAQ,CAACxb,MAAM,CAAC,CAAC;MACnB;;MAEA;MACA,MAAMyb,eAAe,GAAGpd,QAAQ,CAAC8C,aAAa,CAAC,OAAO,CAAC;MACvDsa,eAAe,CAAChd,EAAE,GAAG,0BAA0B;MAC/Cgd,eAAe,CAACra,WAAW,GAAG;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;MACD/C,QAAQ,CAACmL,IAAI,CAAC1H,WAAW,CAAC2Z,eAAe,CAAC;;MAE1C;MACA,MAAMxM,IAAI,GAAG/F,WAAW,CAACgG,OAAO,CAACxS,WAAW,CAAC;MAC7C,MAAM0E,WAAW,GAAG6N,IAAI,CAACE,cAAc,CAAC,CAAC;MACzC,MAAMrF,SAAS,GAAG1I,WAAW,CAACuO,KAAK,CAChCpJ,GAAG,CAACsJ,IAAI,IAAIA,IAAI,CAACC,GAAG,CAAC,CACrBtJ,IAAI,CAAC,GAAG,CAAC,CACTsF,KAAK,CAAC,OAAO,CAAC,CACdoJ,MAAM,CAACwG,CAAC,IAAIA,CAAC,CAAC7a,IAAI,CAAC,CAAC,CAAC;;MAExB;MACAoI,UAAU,CAACqJ,6BAA6B,CAACxI,SAAS,CAAC,CAAC;;MAEpD;MACAzC,UAAU,CAAC,MAAM;QACf4F,uBAAuB,CAAC,CAAC;MAC3B,CAAC,EAAE,GAAG,CAAC;MAEP,OAAO,MAAM;QACXwO,eAAe,CAACzb,MAAM,CAAC,CAAC;MAC1B,CAAC;IACH;EACF,CAAC,EAAE,CAACyI,WAAW,EAAE/L,WAAW,EAAEwM,WAAW,CAAC,CAAC;EAE3C,oBACE7M,OAAA;IAAKgF,SAAS,EAAC,KAAK;IAAAsa,QAAA,gBAClBtf,OAAA;MAAKgF,SAAS,EAAC,SAAS;MAAAsa,QAAA,gBACtBtf,OAAA;QAAKgF,SAAS,EAAC,MAAM;QAAAsa,QAAA,eACnBtf,OAAA;UAAAsf,QAAA,EAAI;QAAQ;UAAA7T,QAAA,EAAA8T,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAhU,QAAA,EAAA8T,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACd,CAAC,eAENzf,OAAA;QAAKgF,SAAS,EAAC,kBAAkB;QAAAsa,QAAA,gBAC/Btf,OAAA;UAAAsf,QAAA,EAAI;QAAI;UAAA7T,QAAA,EAAA8T,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACbzf,OAAA;UACEoC,EAAE,EAAC,qBAAqB;UACxBqG,KAAK,EAAE2D,WAAY;UACnBsT,QAAQ,EAAE5D,uBAAwB;UAClC9W,SAAS,EAAC,aAAa;UAAAsa,QAAA,gBAEvBtf,OAAA;YAAQyI,KAAK,EAAC,QAAQ;YAAA6W,QAAA,EAAC;UAAI;YAAA7T,QAAA,EAAA8T,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACpCzf,OAAA;YAAQyI,KAAK,EAAC,QAAQ;YAAA6W,QAAA,EAAC;UAAI;YAAA7T,QAAA,EAAA8T,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACpCzf,OAAA;YAAQyI,KAAK,EAAC,cAAc;YAAA6W,QAAA,EAAC;UAAI;YAAA7T,QAAA,EAAA8T,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC1Czf,OAAA;YAAQyI,KAAK,EAAC,QAAQ;YAAA6W,QAAA,EAAC;UAAI;YAAA7T,QAAA,EAAA8T,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACpCzf,OAAA;YAAQyI,KAAK,EAAC,eAAe;YAAA6W,QAAA,EAAC;UAAI;YAAA7T,QAAA,EAAA8T,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAhU,QAAA,EAAA8T,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrC,CAAC;MAAA;QAAAhU,QAAA,EAAA8T,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,eAENzf,OAAA;QAAKgF,SAAS,EAAC,gBAAgB;QAAAsa,QAAA,gBAC7Btf,OAAA;UACEsI,IAAI,EAAC,MAAM;UACXqX,MAAM,EAAC,eAAe;UACtBC,MAAM;UACNxd,EAAE,EAAC,aAAa;UAChBsd,QAAQ,EAAE5H,gBAAiB;UAC3B+H,GAAG,EAAEhU;QAAQ;UAAAJ,QAAA,EAAA8T,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACd,CAAC,eACFzf,OAAA;UACEgF,SAAS,EAAC,YAAY;UACtB8a,OAAO,EAAEA,CAAA,KAAMjU,OAAO,CAAC1F,OAAO,CAAC0E,KAAK,CAAC,CAAE;UAAAyU,QAAA,EACxC;QAED;UAAA7T,QAAA,EAAA8T,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAhU,QAAA,EAAA8T,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC;IAAA;MAAAhU,QAAA,EAAA8T,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACK,CAAC,eAEZzf,OAAA;MAAKgF,SAAS,EAAC,cAAc;MAAAsa,QAAA,gBAC3Btf,OAAA;QAAKgF,SAAS,EAAC,SAAS;QAAAsa,QAAA,EACrB7T,QAAQ,iBAAIzL,OAAA;UAAIgF,SAAS,EAAC,UAAU;UAAAsa,QAAA,EAAE7T;QAAQ;UAAAA,QAAA,EAAA8T,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK;MAAC;QAAAhU,QAAA,EAAA8T,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAE9C,CAAC,eAEVzf,OAAA;QAAKgF,SAAS,EAAC,cAAc;QAAC6a,GAAG,EAAEnT,kBAAmB;QAAA4S,QAAA,gBAClDtf,OAAA;UAAK+f,uBAAuB,EAAE;YAAEC,MAAM,EAAErT;UAAQ;QAAE;UAAAlB,QAAA,EAAA8T,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,EAEtDnf,UAAU,GAAG,CAAC,iBACbN,OAAA;UAAKgF,SAAS,EAAC,mBAAmB;UAAAsa,QAAA,gBAChCtf,OAAA;YACE8f,OAAO,EAAEA,CAAA,KAAMvf,UAAU,CAAC,CAAC,CAAC,CAAE;YAC9BkO,QAAQ,EAAEpO,WAAW,IAAI,CAAE;YAC3B2E,SAAS,EAAC,UAAU;YAAAsa,QAAA,EACrB;UAED;YAAA7T,QAAA,EAAA8T,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACXzf,OAAA;YAAMgF,SAAS,EAAC,WAAW;YAAAsa,QAAA,GAAC,SACtB,EAACjf,WAAW,EAAC,KAAG,EAACC,UAAU,EAAC,SAChC;UAAA;YAAAmL,QAAA,EAAA8T,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eACPzf,OAAA;YACE8f,OAAO,EAAEA,CAAA,KAAMvf,UAAU,CAAC,CAAC,CAAE;YAC7BkO,QAAQ,EAAEpO,WAAW,IAAIC,UAAW;YACpC0E,SAAS,EAAC,UAAU;YAAAsa,QAAA,EACrB;UAED;YAAA7T,QAAA,EAAA8T,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAhU,QAAA,EAAA8T,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACR,CACN;MAAA;QAAAhU,QAAA,EAAA8T,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC;IAAA;MAAAhU,QAAA,EAAA8T,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAhU,QAAA,EAAA8T,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACrU,EAAA,CAjhFID,GAAG;AAAA8U,EAAA,GAAH9U,GAAG;AAmhFT,eAAeA,GAAG;AAAC,IAAA8U,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}