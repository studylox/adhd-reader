{"ast":null,"code":"var _jsxFileName = \"D:\\\\adhd-read-helper\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 添加全局事件跟踪对象\nwindow.eventTracker = window.eventTracker || {\n  mouseFollowHandlers: []\n};\n\n// 全局变量，确保在页面切换后仍然保持状态\nwindow.rhythmReaderGlobal = window.rhythmReaderGlobal || {\n  active: false,\n  speed: 300\n};\n\n// 节奏阅读模式 - 确保手动翻页后也能自动恢复\n(function () {\n  console.log(\"正在初始化节奏阅读模式...\");\n\n  // 确保只初始化一次\n  if (window.rhythmReadingInitialized) {\n    console.log(\"节奏阅读模式已经初始化过，跳过\");\n    return;\n  }\n  window.rhythmReadingInitialized = true;\n\n  // 改进的存储函数，同时使用session和local storage提高可靠性\n  function setStorage(key, value) {\n    try {\n      sessionStorage.setItem(key, value);\n      localStorage.setItem(key, value);\n    } catch (e) {\n      console.error(\"无法写入存储\", e);\n    }\n  }\n  function getStorage(key) {\n    try {\n      // 优先使用sessionStorage，这样更适合单次会话\n      return sessionStorage.getItem(key) || localStorage.getItem(key);\n    } catch (e) {\n      console.error(\"无法读取存储\", e);\n      return null;\n    }\n  }\n\n  // 状态变量和功能对象\n  const rhythmReader = {\n    active: false,\n    intervalId: null,\n    speed: 300,\n    currentIndex: 0,\n    readIndices: new Set(),\n    charElements: [],\n    pageTransitionInProgress: false,\n    // 初始化文本节点\n    initializeTextNodes: function () {\n      console.log(\"【节奏阅读】初始化文本节点...\");\n\n      // 重置字符元素数组\n      this.charElements = [];\n\n      // 获取内容容器\n      const contentContainer = document.querySelector('.page-content');\n      if (!contentContainer) {\n        console.error(\"【节奏阅读】找不到内容容器\");\n        return false;\n      }\n\n      // 查找所有文本节点并处理\n      const textNodes = [];\n      this.findTextNodes(contentContainer, textNodes);\n      if (textNodes.length === 0) {\n        console.error(\"【节奏阅读】未找到文本节点\");\n        this.showNotification(\"无法启动节奏阅读：未找到文本内容\");\n        return false;\n      }\n      console.log(`【节奏阅读】找到${textNodes.length}个文本节点`);\n\n      // 为每个文本节点创建字符span\n      textNodes.forEach(node => {\n        const text = node.nodeValue;\n        if (!text || text.trim() === '') return;\n\n        // 创建文档片段来存放字符span\n        const fragment = document.createDocumentFragment();\n\n        // 为每个字符创建span\n        for (let i = 0; i < text.length; i++) {\n          const char = text[i];\n          const span = document.createElement('span');\n          span.textContent = char;\n          span.className = 'rhythm-char';\n          span.dataset.rhythmIndex = String(this.charElements.length);\n\n          // 如果是空白字符，添加一个标志\n          if (char.trim() === '') {\n            span.dataset.whitespace = 'true';\n          }\n\n          // 保持原始样式，不设置背景\n          span.style.display = 'inline';\n          span.style.margin = '0';\n          span.style.padding = '0';\n          span.style.border = 'none';\n          span.style.backgroundColor = 'transparent';\n          fragment.appendChild(span);\n          this.charElements.push(span);\n        }\n\n        // 替换原始节点\n        if (node.parentNode) {\n          node.parentNode.replaceChild(fragment, node);\n        }\n      });\n      console.log(`【节奏阅读】总共创建${this.charElements.length}个字符span`);\n      return this.charElements.length > 0;\n    },\n    // 递归查找所有文本节点\n    findTextNodes: function (element, textNodes) {\n      // 处理子节点\n      for (let i = 0; i < element.childNodes.length; i++) {\n        const node = element.childNodes[i];\n\n        // 如果是文本节点且有内容\n        if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() !== '') {\n          textNodes.push(node);\n        }\n        // 如果是元素节点，递归处理\n        else if (node.nodeType === Node.ELEMENT_NODE) {\n          // 跳过读者UI元素\n          if (node.id === 'rhythm-speed-slider' || node.id === 'rhythm-notification' || node.className === 'rhythm-char') {\n            continue;\n          }\n          this.findTextNodes(node, textNodes);\n        }\n      }\n    },\n    // 更新文本颜色\n    updateTextColors: function () {\n      // 更新所有字符的颜色\n      this.charElements.forEach((span, index) => {\n        // 确定颜色\n        let color;\n        let fontWeight = 'inherit';\n        if (index === this.currentIndex) {\n          color = '#00aa00'; // 当前阅读的字 - 绿色\n          fontWeight = 'bold';\n        } else if (index === this.currentIndex + 1 || index === this.currentIndex + 2) {\n          color = '#aaaaaa'; // 接下来两个字 - 淡灰色\n        } else if (this.readIndices.has(index)) {\n          color = '#ffffff'; // 已读字符 - 白色（表示已读）\n        } else {\n          color = 'rgba(160, 160, 160, 0.25)'; // 未读字符 - 非常淡的灰色（可见但不明显）\n        }\n        span.style.color = color;\n        span.style.fontWeight = fontWeight;\n\n        // 确保没有背景\n        span.style.backgroundColor = 'transparent';\n        span.style.background = 'none';\n      });\n    },\n    // 移动到下一个字符\n    moveToNextChar: function () {\n      // 将当前字符标记为已读\n      this.readIndices.add(this.currentIndex);\n\n      // 移动到下一个非空白字符\n      do {\n        this.currentIndex++;\n\n        // 检查是否到达末尾\n        if (this.currentIndex >= this.charElements.length) {\n          console.log(\"【节奏阅读】已到达页尾，尝试翻页\");\n\n          // 尝试点击下一页按钮\n          if (!this.clickNextPageButton()) {\n            // 如果没有找到下一页按钮，完全停止阅读\n            this.stop();\n          }\n          return;\n        }\n      } while (this.currentIndex < this.charElements.length && this.charElements[this.currentIndex] && this.charElements[this.currentIndex].dataset.whitespace === 'true');\n\n      // 更新颜色\n      this.updateTextColors();\n\n      // 滚动到当前字符\n      this.scrollToCurrentChar();\n    },\n    // 滚动到当前字符\n    scrollToCurrentChar: function () {\n      const span = this.charElements[this.currentIndex];\n      if (!span) return;\n      const rect = span.getBoundingClientRect();\n      const contentContainer = document.querySelector('.page-content');\n\n      // 估计行高\n      const lineHeight = parseInt(window.getComputedStyle(span).lineHeight) || Math.max(20, rect.height * 1.5);\n\n      // 确定滚动容器\n      const isContainerScrollable = contentContainer && contentContainer.scrollHeight > contentContainer.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n      if (isContainerScrollable) {\n        // 容器滚动\n        const containerRect = contentContainer.getBoundingClientRect();\n        const relativeTop = rect.top - containerRect.top + contentContainer.scrollTop;\n        const visibleTop = contentContainer.scrollTop;\n        const visibleBottom = visibleTop + contentContainer.clientHeight;\n        if (relativeTop < visibleTop + lineHeight || relativeTop > visibleBottom - lineHeight) {\n          contentContainer.scrollBy({\n            top: lineHeight * 2 * (relativeTop > visibleBottom - lineHeight ? 1 : -1),\n            behavior: 'smooth'\n          });\n        }\n      } else {\n        // 窗口滚动\n        const viewportTop = window.scrollY;\n        const viewportBottom = viewportTop + window.innerHeight;\n        const absoluteTop = rect.top + window.scrollY;\n        if (absoluteTop < viewportTop + lineHeight || absoluteTop > viewportBottom - lineHeight) {\n          window.scrollBy({\n            top: lineHeight * 2 * (absoluteTop > viewportBottom - lineHeight ? 1 : -1),\n            behavior: 'smooth'\n          });\n        }\n      }\n    },\n    // 添加速度滑块\n    addSpeedSlider: function () {\n      let slider = document.getElementById('rhythm-speed-slider');\n      if (slider) slider.remove();\n      const container = document.createElement('div');\n      container.id = 'rhythm-speed-slider';\n      container.style.position = 'fixed';\n      container.style.top = '70px';\n      container.style.right = '20px';\n      container.style.backgroundColor = 'white';\n      container.style.padding = '10px';\n      container.style.borderRadius = '5px';\n      container.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';\n      container.style.zIndex = '10000';\n      container.style.display = 'flex';\n      container.style.alignItems = 'center';\n      container.style.maxWidth = '300px';\n      const label = document.createElement('label');\n      label.textContent = '速度: ';\n      label.style.marginRight = '8px';\n      container.appendChild(label);\n      const input = document.createElement('input');\n      input.type = 'range';\n      input.min = '50';\n      input.max = '1000';\n      input.step = '50';\n      input.value = this.speed;\n      input.style.width = '120px';\n      const valueDisplay = document.createElement('span');\n      valueDisplay.textContent = `${this.speed}ms`;\n      valueDisplay.style.marginLeft = '8px';\n      valueDisplay.style.minWidth = '60px';\n      const self = this;\n      input.addEventListener('input', function () {\n        const newSpeed = parseInt(this.value);\n        self.speed = newSpeed;\n        valueDisplay.textContent = `${newSpeed}ms`;\n        if (self.intervalId) {\n          clearInterval(self.intervalId);\n          self.intervalId = setInterval(() => self.moveToNextChar(), newSpeed);\n        }\n      });\n      container.appendChild(input);\n      container.appendChild(valueDisplay);\n      document.body.appendChild(container);\n    },\n    // 恢复原始文本\n    restoreOriginalText: function () {\n      // 获取所有已创建的字符span\n      const charSpans = document.querySelectorAll('.rhythm-char');\n\n      // 按父节点分组\n      const parentNodeMap = new Map();\n      charSpans.forEach(span => {\n        const parent = span.parentNode;\n        if (!parent) return;\n        if (!parentNodeMap.has(parent)) {\n          parentNodeMap.set(parent, []);\n        }\n        parentNodeMap.get(parent).push(span);\n      });\n\n      // 对每个父节点，将连续的字符span合并回文本节点\n      parentNodeMap.forEach((spans, parent) => {\n        if (spans.length === 0) return;\n\n        // 排序spans确保顺序正确\n        spans.sort((a, b) => {\n          const indexA = parseInt(a.dataset.rhythmIndex || '0');\n          const indexB = parseInt(b.dataset.rhythmIndex || '0');\n          return indexA - indexB;\n        });\n\n        // 根据连续性分组\n        const groups = [];\n        if (spans.length > 0) {\n          let currentGroup = [spans[0]];\n          for (let i = 1; i < spans.length; i++) {\n            const prevIndex = parseInt(spans[i - 1].dataset.rhythmIndex || '0');\n            const currentIndex = parseInt(spans[i].dataset.rhythmIndex || '0');\n            if (currentIndex === prevIndex + 1 && spans[i].previousSibling === spans[i - 1]) {\n              currentGroup.push(spans[i]);\n            } else {\n              groups.push(currentGroup);\n              currentGroup = [spans[i]];\n            }\n          }\n          groups.push(currentGroup);\n        }\n\n        // 对每个连续组替换为文本节点\n        groups.forEach(group => {\n          if (group.length === 0) return;\n          try {\n            const text = group.map(span => span.textContent).join('');\n            const textNode = document.createTextNode(text);\n\n            // 替换第一个span，然后移除其余的\n            if (group[0].parentNode === parent) {\n              parent.replaceChild(textNode, group[0]);\n              for (let i = 1; i < group.length; i++) {\n                if (group[i].parentNode === parent) {\n                  parent.removeChild(group[i]);\n                }\n              }\n            }\n          } catch (e) {\n            console.error(\"【节奏阅读】恢复文本时出错:\", e);\n          }\n        });\n      });\n\n      // 清除字符元素数组\n      this.charElements = [];\n    },\n    // 启动节奏阅读\n    start: function () {\n      console.log(\"【节奏阅读】启动中...\");\n\n      // 检查是否正在进行页面转换\n      if (this.pageTransitionInProgress) {\n        console.log(\"【节奏阅读】页面转换正在进行中，延迟启动\");\n        setTimeout(() => this.start(), 500);\n        return;\n      }\n\n      // 先停止已有的\n      this.stop(false);\n\n      // 设置为活动状态\n      this.active = true;\n      setStorage('rhythmReadingActive', 'true');\n\n      // 初始化文本\n      if (!this.initializeTextNodes()) {\n        console.error(\"【节奏阅读】无法初始化文本节点\");\n        return;\n      }\n\n      // 重要：始终从头开始阅读\n      this.currentIndex = 0;\n      this.readIndices.clear();\n\n      // 添加速度滑块\n      this.addSpeedSlider();\n\n      // 更新颜色\n      this.updateTextColors();\n\n      // 滚动到开始位置\n      this.scrollToCurrentChar();\n\n      // 设置阅读间隔\n      this.intervalId = setInterval(() => this.moveToNextChar(), this.speed);\n      console.log(\"【节奏阅读】成功启动\");\n\n      // 显示提示\n      this.showNotification(\"节奏阅读模式已启动\");\n\n      // 劫持翻页函数 - 重要步骤\n      this.hijackPageTurningFunctions();\n\n      // 设置页面导航事件监听\n      this.setupPageNavigationListeners();\n    },\n    // 停止节奏阅读\n    stop: function (showNotification = true) {\n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n      }\n      if (this.active) {\n        console.log(\"【节奏阅读】停止中...\");\n        this.active = false;\n\n        // 仅当不是因翻页而停止时才清除活动状态\n        if (!this.pageTransitionInProgress) {\n          setStorage('rhythmReadingActive', 'false');\n        }\n\n        // 恢复原始文本\n        this.restoreOriginalText();\n\n        // 移除速度滑块\n        const slider = document.getElementById('rhythm-speed-slider');\n        if (slider) slider.remove();\n        if (showNotification) {\n          this.showNotification(\"节奏阅读模式已停止\");\n        }\n      }\n    },\n    // 显示通知\n    showNotification: function (message) {\n      let notification = document.getElementById('rhythm-notification');\n      if (notification) notification.remove();\n      notification = document.createElement('div');\n      notification.id = 'rhythm-notification';\n      notification.textContent = message;\n      notification.style.position = 'fixed';\n      notification.style.top = '50%';\n      notification.style.left = '50%';\n      notification.style.transform = 'translate(-50%, -50%)';\n      notification.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';\n      notification.style.color = 'white';\n      notification.style.padding = '15px 25px';\n      notification.style.borderRadius = '5px';\n      notification.style.zIndex = '10001';\n      notification.style.fontSize = '18px';\n      document.body.appendChild(notification);\n\n      // 2秒后自动消失\n      setTimeout(() => {\n        if (notification && notification.parentNode) {\n          notification.parentNode.removeChild(notification);\n        }\n      }, 2000);\n    },\n    // 劫持页面翻转函数 - 改进版本\n    hijackPageTurningFunctions: function () {\n      if (typeof window.changePage === 'function' && !window._originalChangePage) {\n        console.log(\"【节奏阅读】劫持changePage函数\");\n        window._originalChangePage = window.changePage;\n        const self = this;\n        window.changePage = function (page) {\n          console.log(\"【节奏阅读】检测到changePage调用，参数:\", page);\n          const wasActive = self.active;\n          self.pageTransitionInProgress = true;\n          if (wasActive) {\n            self.stop(false);\n            setStorage('rhythmReadingActive', 'true');\n            setStorage('rhythmReadingPending', 'true');\n            document.body.dataset.rhythmReadingActive = 'true';\n          }\n          try {\n            if (page === undefined || page === null) {\n              console.warn('【节奏阅读】安全处理：page参数为空');\n              page = {};\n            }\n            if (typeof page === 'object' && !page.something) {\n              console.log('【节奏阅读】添加空的something对象防止错误');\n              page.something = {\n                active: false\n              };\n            }\n            window._originalChangePage(page);\n          } catch (err) {\n            console.error(\"【节奏阅读】翻页函数执行出错:\", err);\n            self.clickNextPageButton();\n          }\n          setTimeout(() => {\n            self.pageTransitionInProgress = false;\n            if (wasActive && getStorage('rhythmReadingPending') === 'true') {\n              setStorage('rhythmReadingPending', 'false');\n              console.log(\"【节奏阅读】翻页后重新启动\");\n              setTimeout(() => self.start(), 500);\n            }\n          }, 1000);\n        };\n      }\n    },\n    // 设置页面导航事件监听 - 加强版\n    setupPageNavigationListeners: function () {\n      // 查找所有可能的翻页按钮\n      console.log(\"【节奏阅读】正在设置页面导航监听\");\n      const self = this;\n\n      // 使用事件委托来捕获所有可能的点击\n      document.addEventListener('click', function (e) {\n        // 检查点击的元素是否可能是翻页按钮\n        let target = e.target;\n        while (target && target !== document.body) {\n          // 检查是否是翻页元素\n          if (target.tagName === 'BUTTON' || target.tagName === 'A' || target.getAttribute('role') === 'button') {\n            const text = (target.textContent || '').trim().toLowerCase();\n            const ariaLabel = (target.getAttribute('aria-label') || '').toLowerCase();\n\n            // 检查是否是翻页元素\n            if (text.includes('上一页') || text.includes('下一页') || text.includes('prev') || text.includes('next') || ariaLabel.includes('page') || ariaLabel.includes('页') || text === '<' || text === '>' || text === '←' || text === '→') {\n              if (self.active) {\n                console.log(`【节奏阅读】检测到可能的翻页元素点击: ${text || ariaLabel}`);\n\n                // 标记页面转换开始\n                self.pageTransitionInProgress = true;\n\n                // 保存状态到存储\n                setStorage('rhythmReadingActive', 'true');\n                setStorage('rhythmReadingPending', 'true');\n                document.body.dataset.rhythmReadingActive = 'true';\n\n                // 停止当前的阅读\n                self.stop(false);\n\n                // 添加延迟执行的监听器，确保数据在页面加载后恢复\n                setTimeout(() => {\n                  self.pageTransitionInProgress = false;\n                  if (getStorage('rhythmReadingPending') === 'true') {\n                    setStorage('rhythmReadingPending', 'false');\n                    self.start();\n                  }\n                }, 1500);\n              }\n              break;\n            }\n          }\n          target = target.parentNode;\n        }\n      });\n\n      // 监听键盘导航事件\n      document.addEventListener('keydown', function (e) {\n        // 检查是否是翻页快捷键\n        if (['ArrowLeft', 'ArrowRight', 'PageUp', 'PageDown'].includes(e.key)) {\n          if (self.active) {\n            console.log(`【节奏阅读】检测到键盘翻页: ${e.key}`);\n\n            // 保存状态到存储\n            setStorage('rhythmReadingActive', 'true');\n            setStorage('rhythmReadingPending', 'true');\n\n            // 标记页面转换开始\n            self.pageTransitionInProgress = true;\n\n            // 停止当前的阅读\n            self.stop(false);\n\n            // 添加延迟执行的监听器\n            setTimeout(() => {\n              self.pageTransitionInProgress = false;\n              if (getStorage('rhythmReadingPending') === 'true') {\n                setStorage('rhythmReadingPending', 'false');\n                self.start();\n              }\n            }, 1500);\n          }\n        }\n      });\n\n      // 添加popstate监听器捕获浏览器前进/后退导航\n      window.addEventListener('popstate', function () {\n        if (self.active) {\n          console.log(\"【节奏阅读】检测到历史导航事件\");\n\n          // 保存状态\n          setStorage('rhythmReadingActive', 'true');\n          setStorage('rhythmReadingPending', 'true');\n\n          // 标记页面转换开始\n          self.pageTransitionInProgress = true;\n\n          // 停止当前阅读\n          self.stop(false);\n\n          // 延迟恢复\n          setTimeout(() => {\n            self.pageTransitionInProgress = false;\n            if (getStorage('rhythmReadingPending') === 'true') {\n              setStorage('rhythmReadingPending', 'false');\n              self.start();\n            }\n          }, 1500);\n        }\n      });\n    },\n    // 改进的自动翻页函数，更精确地处理状态保存\n    clickNextPageButton: function () {\n      console.log(\"【节奏阅读】尝试查找并点击下一页按钮\");\n\n      // 查找下一页按钮\n      const nextPageSelectors = ['button.next-page', 'button[aria-label=\"下一页\"]', 'a.next-page', 'a[aria-label=\"下一页\"]', '.next-page', '#next-page', 'button.next', 'a.next'];\n      let nextPageButton = null;\n\n      // 尝试通过选择器找到按钮\n      for (const selector of nextPageSelectors) {\n        try {\n          const elements = document.querySelectorAll(selector);\n          for (const el of elements) {\n            if (el.offsetParent !== null) {\n              // 检查元素是否可见\n              console.log(`【节奏阅读】找到下一页按钮: ${selector}`);\n              nextPageButton = el;\n              break;\n            }\n          }\n          if (nextPageButton) break;\n        } catch (e) {\n          // 某些选择器可能不被支持，忽略错误\n        }\n      }\n\n      // 如果没找到，尝试按文本内容查找\n      if (!nextPageButton) {\n        const buttons = document.querySelectorAll('button, a, div[role=\"button\"]');\n        for (const button of buttons) {\n          const text = button.textContent.trim().toLowerCase();\n          if ((text.includes('下一页') || text.includes('next') || text === '>' || text === '→') && button.offsetParent !== null) {\n            console.log(`【节奏阅读】通过文本内容找到下一页按钮: ${text}`);\n            nextPageButton = button;\n            break;\n          }\n        }\n      }\n      if (nextPageButton) {\n        console.log(\"【节奏阅读】模拟点击下一页按钮\");\n\n        // 明确标记页面转换开始\n        this.pageTransitionInProgress = true;\n\n        // 保存状态\n        setStorage('rhythmReadingActive', 'true');\n        setStorage('rhythmReadingPending', 'true');\n        document.body.dataset.rhythmReadingActive = 'true';\n\n        // 恢复原始文本\n        this.restoreOriginalText();\n\n        // 停止计时器\n        if (this.intervalId) {\n          clearInterval(this.intervalId);\n          this.intervalId = null;\n        }\n\n        // 模拟点击\n        nextPageButton.click();\n\n        // 延迟结束页面转换状态\n        setTimeout(() => {\n          this.pageTransitionInProgress = false;\n        }, 1000);\n        return true;\n      } else {\n        console.log(\"【节奏阅读】未找到下一页按钮\");\n        return false;\n      }\n    }\n  };\n\n  // 暴露到全局，以便调试和直接调用\n  window.rhythmReader = rhythmReader;\n\n  // 额外添加一个全局安全函数用于检查节奏阅读状态\n  window.isRhythmActive = function () {\n    return rhythmReader.active || getStorage('rhythmReadingActive') === 'true';\n  };\n\n  // 添加一个停止函数供外部安全调用\n  window.stopRhythmSafely = function () {\n    try {\n      setStorage('rhythmReadingActive', 'false');\n      setStorage('rhythmReadingPending', 'false');\n      if (rhythmReader && typeof rhythmReader.stop === 'function') {\n        rhythmReader.stop();\n      }\n    } catch (e) {\n      console.error(\"停止节奏阅读出错\", e);\n    }\n  };\n\n  // 设置页面加载监听器，确保页面转换后能恢复\n  function setupPageLoadListener() {\n    // 改进的页面变化监测\n    const observer = new MutationObserver(function (mutations) {\n      // 检测到内容变化且有待处理的节奏阅读时\n      if (getStorage('rhythmReadingPending') === 'true') {\n        const contentChanges = mutations.some(m => m.type === 'childList' && m.addedNodes.length > 5); // 使用更高的阈值，确保是真正的内容变化\n\n        if (contentChanges) {\n          console.log(\"【节奏阅读】检测到大量DOM变化，可能是页面切换\");\n\n          // 给页面一点时间稳定下来\n          setTimeout(() => {\n            if (getStorage('rhythmReadingPending') === 'true') {\n              console.log(\"【节奏阅读】页面内容变化后，尝试恢复阅读\");\n              setStorage('rhythmReadingPending', 'false');\n              if (!rhythmReader.pageTransitionInProgress) {\n                rhythmReader.start();\n              }\n            }\n          }, 800);\n        }\n      }\n    });\n\n    // 观察body变化\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  }\n\n  // 设置页面加载监听器\n  setupPageLoadListener();\n\n  // 检查是否需要立即恢复阅读状态\n  if (getStorage('rhythmReadingActive') === 'true') {\n    console.log(\"【节奏阅读】检测到之前的阅读状态，准备恢复\");\n    setStorage('rhythmReadingPending', 'false');\n    setTimeout(function () {\n      rhythmReader.start();\n    }, 800);\n  }\n  console.log(\"【节奏阅读】初始化完成\");\n})();\nconst App = () => {\n  _s();\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n  }, []);\n\n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async file => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n\n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n\n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n\n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({\n        scale: 1.0\n      });\n\n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async textContent => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n\n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n\n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n\n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    const lines = [...lineMap.values()];\n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    return hasTocKeywords || hasPageNumberPatterns || shortLineRatio > 0.7 && numberLineRatio > 0.3;\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n\n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n\n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n\n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n\n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = text => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    return result;\n  };\n\n  // 修改processContentPage函数\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n\n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch (mode) {\n        case 'normal':\n          // 普通模式 - 简单分段显示\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'static':\n          // 静态高亮模式 - 应用词性标注和颜色高亮\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'follow-mouse':\n          // 鼠标跟随高亮模式 - 分段落但不预先高亮，由鼠标事件触发高亮\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        case 'rhythm':\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffect(extractedText);\n          setTimeout(() => {\n            applyDarkBackground();\n          }, 50);\n          break;\n        case 'flash-reading':\n          processedContent = createFlashReadingContent(extractedText);\n          setTimeout(() => {\n            initializeFlashReading();\n          }, 100);\n          break;\n        case 'naked-eye-3d':\n          processedContent = applyNakedEye3dEffect(extractedText);\n          setTimeout(() => {\n            initializeNakedEye3D();\n            applyDarkBackground();\n          }, 50);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      setContent(processedContent);\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async file => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain') {\n      handleTxtFile(file);\n    } else {\n      alert('请上传PDF或TXT文件');\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = container => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n\n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n\n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n\n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width / 2,\n            // 水平中心\n            y: rect.bottom,\n            // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n\n    // 过滤无效位置并排序\n    return positions.filter(p => p.char.trim() !== '').sort((a, b) => {\n      // 先按行排序，同行按列排序\n      const yDiff = a.y - b.y;\n      if (Math.abs(yDiff) > 5) {\n        // 5px阈值判断是否同一行\n        return yDiff;\n      }\n      return a.x - b.x;\n    });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n\n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - containerVisibleHeight / 2;\n\n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - window.innerHeight / 2;\n\n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n\n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n\n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length ||\n      // 已到末尾\n      positions[nextIndex].char.trim() === '' ||\n      // 下一个是空白\n      positions[nextIndex].y > charPosition.y + 5) {\n        // 下一个在新行\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n\n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n\n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || current.y > prev.y + 5) {\n        // 有明显换行\n        break;\n      }\n      start--;\n    }\n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n\n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n\n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = e => {\n    if (readingMode !== 'follow-mouse') return;\n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    const rect = contentArea.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    clearAllHighlights();\n    const paragraphs = contentArea.querySelectorAll('p');\n    paragraphs.forEach(paragraph => {\n      const paragraphRect = paragraph.getBoundingClientRect();\n      const paragraphX = paragraphRect.left - rect.left;\n      const paragraphY = paragraphRect.top - rect.top;\n      if (y >= paragraphY && y <= paragraphY + paragraphRect.height) {\n        const words = paragraph.querySelectorAll('span');\n        words.forEach(word => {\n          const wordRect = word.getBoundingClientRect();\n          const wordX = wordRect.left - rect.left;\n          if (x >= wordX && x <= wordX + wordRect.width) {\n            word.classList.add('highlight');\n          }\n        });\n      }\n    });\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 专门用于移除鼠标跟随事件的函数\n  const removeMouseFollowListeners = () => {\n    // 移除记录的所有监听器\n    if (window.eventTracker && window.eventTracker.mouseFollowHandlers) {\n      window.eventTracker.mouseFollowHandlers.forEach(handler => {\n        if (handler.element && handler.func) {\n          handler.element.removeEventListener('mousemove', handler.func);\n        }\n      });\n      window.eventTracker.mouseFollowHandlers = [];\n    }\n\n    // 为安全起见，尝试从document和内容区域移除通用处理函数\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    }\n    document.removeEventListener('mousemove', handleMouseMove);\n\n    // 清除所有当前高亮\n    clearAllHighlights();\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addNakedEye3DStyles();\n    addComfortable3DStyles();\n    addFlashReadingStyles();\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 新增延迟补偿\n    setTimeout(() => {\n      addMouseFollowListeners();\n\n      // 强制触发重排\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        void contentArea.offsetHeight;\n\n        // 模拟鼠标移动事件\n        const fakeEvent = new MouseEvent('mousemove', {\n          clientX: window.innerWidth / 2,\n          clientY: window.innerHeight / 2,\n          bubbles: true\n        });\n        contentArea.dispatchEvent(fakeEvent);\n      }\n    }, 50);\n  };\n\n  // 修改翻页函数\n  const changePage = async delta => {\n    const newPage = currentPage + delta;\n    if (newPage < 1 || newPage > totalPages) return;\n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n    const wasFlashReading = readingMode === 'flash-reading' && window.flashReader && window.flashReader.isPlaying;\n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    if (wasFlashReading && window.flashReader) {\n      window.flashReader.cleanup();\n    }\n\n    // 更新页码\n    setCurrentPage(newPage);\n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 按当前阅读模式处理内容\n      let processedContent = '';\n      switch (readingMode) {\n        case 'follow-mouse':\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'rhythm':\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'naked-eye-3d':\n          processedContent = applyNakedEye3dEffect(extractedText);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffect(extractedText);\n          break;\n        case 'flash-reading':\n          processedContent = createFlashReadingContent(extractedText);\n          setTimeout(() => {\n            initializeFlashReading();\n            if (wasFlashReading) {\n              const startBtn = document.getElementById('flash-reading-start');\n              if (startBtn) startBtn.click();\n            }\n          }, 100);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n\n      // 更新页面内容\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        contentArea.textContent = '';\n        contentArea.innerHTML = processedContent;\n\n        // 滚动到页面顶部\n        window.scrollTo(0, 0);\n        if (contentArea.scrollTo) {\n          contentArea.scrollTo(0, 0);\n        }\n\n        // 重新启动对应的阅读模式\n        if (wasRhythmReading && window.rhythmReader) {\n          setTimeout(() => {\n            window.rhythmReader.start();\n          }, 50);\n        } else if (readingMode === 'naked-eye-3d') {\n          setTimeout(() => {\n            initializeNakedEye3D();\n            applyDarkBackground();\n          }, 50);\n        } else if (readingMode === 'comfortable-3d') {\n          setTimeout(() => {\n            applyDarkBackground();\n          }, 50);\n        }\n      }\n    } catch (error) {\n      console.error('翻页失败:', error);\n    }\n  };\n\n  // 修改后的监听器设置函数\n  const addMouseFollowListeners = () => {\n    if (readingMode !== 'follow-mouse') return;\n    removeMouseFollowListeners();\n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    const handleMouseMoveNamed = e => handleMouseMove(e);\n    const handleMouseLeaveNamed = () => clearAllHighlights();\n    contentArea.addEventListener('mousemove', handleMouseMoveNamed);\n    contentArea.addEventListener('mouseleave', handleMouseLeaveNamed);\n\n    // 记录添加的监听器\n    window.eventTracker.mouseFollowHandlers = [{\n      element: contentArea,\n      event: 'mousemove',\n      func: handleMouseMoveNamed\n    }, {\n      element: contentArea,\n      event: 'mouseleave',\n      func: handleMouseLeaveNamed\n    }];\n\n    // 确保所有段落都有正确的样式\n    const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      paragraph.style.position = 'relative';\n      paragraph.style.zIndex = '1';\n    });\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = text => {\n    // 分段\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n\n    // 创建HTML内容\n    let htmlContent = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      htmlContent += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 应用静态高亮\n  const applyStaticHighlight = text => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    let htmlContent = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      // 新增强制清理逻辑\n      const cleanParagraph = paragraph.replace(/<span class=\"text-line\">/g, '').replace(/<\\/span>/g, '');\n      const highlightedText = processTextWithHighlight(cleanParagraph);\n      htmlContent += `<p class=\"pdf-paragraph\">${highlightedText}</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 格式化文本用于鼠标跟随高亮模式\n  const formatTextForMouseFollow = text => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    let htmlContent = '<div class=\"pdf-content mouse-follow-content\">';\n    paragraphs.forEach(paragraph => {\n      // 将段落分割成行\n      const lines = paragraph.split('\\n').filter(line => line.trim());\n      htmlContent += `<p class=\"pdf-paragraph\" data-follow=\"true\" style=\"position: relative; line-height: 1.5;\">`;\n      lines.forEach((line, i) => {\n        // 每行用span包裹\n        htmlContent += `<span class=\"text-line\" style=\"display: block;\">${line}</span>`;\n      });\n      htmlContent += `</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 处理文本应用裸眼3D效果\n  const applyNakedEye3dEffect = text => {\n    // 分段落处理\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    let htmlContent = '<div class=\"pdf-content naked-eye-3d-content\">';\n    paragraphs.forEach(paragraph => {\n      // 清理可能存在的标签\n      const cleanParagraph = paragraph.replace(/<span[^>]*>/g, '').replace(/<\\/span>/g, '');\n\n      // 分词处理，为一小部分词添加3D效果\n      const words = cleanParagraph.split(/(\\s+|[,.!?，。！？])/);\n      let processedText = '';\n      words.forEach(word => {\n        if (!word || /^\\s+$/.test(word) || /^[,.!?，。！？]$/.test(word)) {\n          // 保持空格和标点原样，但使其为白色\n          processedText += `<span class=\"normal-text\">${word}</span>`;\n          return;\n        }\n\n        // 约20%的单词应用3D效果\n        if (Math.random() < 0.2) {\n          // 创建裸眼3D效果\n          processedText += `<span class=\"naked-eye-3d-text\">${word}</span>`;\n        } else {\n          // 非3D文字显示为白色\n          processedText += `<span class=\"normal-text\">${word}</span>`;\n        }\n      });\n\n      // 包装成段落，应用ADHD友好的样式\n      htmlContent += `<p class=\"pdf-paragraph adhd-friendly\">${processedText}</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 添加裸眼3D样式\n  const addNakedEye3DStyles = () => {\n    // 避免重复添加\n    if (document.getElementById('naked-eye-3d-styles')) return;\n    const style = document.createElement('style');\n    style.id = 'naked-eye-3d-styles';\n    style.textContent = `\n      /* 深色背景以确保白色文字可见 */\n      .naked-eye-3d-content {\n        background-color: #222;\n        padding: 20px;\n        border-radius: 8px;\n      }\n      \n      /* 普通文字（白色） */\n      .normal-text {\n        color: white;\n        display: inline-block;\n        margin: 0;\n        padding: 0;\n      }\n      \n      /* 3D文字基本样式 */\n      .naked-eye-3d-text {\n        position: relative;\n        display: inline-block;\n        transform-style: preserve-3d;\n        color: white;  /* 基础颜色也是白色 */\n      }\n      \n      /* 3D效果 - 红色偏移 */\n      .naked-eye-3d-text::before {\n        content: attr(data-text);\n        position: absolute;\n        top: 0;\n        left: 0;\n        z-index: -1;\n        color: rgba(255, 0, 0, 0.8);\n        transform: translateX(-3px);\n      }\n      \n      /* 3D效果 - 青色偏移 */\n      .naked-eye-3d-text::after {\n        content: attr(data-text);\n        position: absolute;\n        top: 0;\n        left: 0;\n        z-index: -1;\n        color: rgba(0, 255, 255, 0.8);\n        transform: translateX(3px);\n      }\n      \n      /* ADHD友好样式 */\n      .adhd-friendly {\n        font-size: 1.1em;\n        line-height: 1.8;\n        color: white;\n        padding: 15px 0;\n      }\n    `;\n    document.head.appendChild(style);\n  };\n\n  // 在裸眼3D模式初始化后处理元素\n  const initializeNakedEye3D = () => {\n    // 为裸眼3D文本元素添加文本内容作为data属性\n    document.querySelectorAll('.naked-eye-3d-text').forEach(el => {\n      el.setAttribute('data-text', el.textContent);\n    });\n\n    // 确保深色背景已应用\n    applyDarkBackground();\n  };\n\n  // 在切换到裸眼3D模式时应用深色背景\n  const applyDarkBackground = () => {\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.style.backgroundColor = '#222';\n    }\n  };\n\n  // 在离开裸眼3D模式时恢复背景\n  const restoreDarkBackground = () => {\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.style.backgroundColor = '';\n    }\n  };\n\n  // 添加改进的3D文字样式\n  const addComfortable3DStyles = () => {\n    // 避免重复添加\n    if (document.getElementById('comfortable-3d-styles')) return;\n    const style = document.createElement('style');\n    style.id = 'comfortable-3d-styles';\n    style.textContent = `\n      /* 深色背景 */\n      .comfortable-3d-content {\n        background-color: #222;\n        padding: 20px;\n        border-radius: 8px;\n      }\n      \n      /* 普通文字（白色） */\n      .normal-text {\n        color: white;\n        display: inline-block;\n        margin: 0;\n        padding: 0;\n      }\n      \n      /* 柔和浮雕效果 */\n      .emboss-3d-text {\n        display: inline-block;\n        color: #ff0000;\n        text-shadow: \n          -1px -1px 1px rgba(255,0,0,0.6),\n          1px 1px 1px rgba(255,0,0,0.6);\n        position: relative;\n        font-weight: bold;\n        margin: 0;\n        padding: 0;\n      }\n      \n      /* 悬浮效果 */\n      .float-3d-text {\n        display: inline-block;\n        color: #ff0000;\n        position: relative;\n        transform: translateY(-2px);\n        text-shadow: 0 4px 3px rgba(255,0,0,0.5);\n        margin: 0;\n        padding: 0;\n      }\n      \n      /* 渐变效果 */\n      .gradient-3d-text {\n        display: inline-block;\n        background: linear-gradient(to bottom, #ff0000 30%, #ff6666 100%);\n        -webkit-background-clip: text;\n        background-clip: text;\n        -webkit-text-fill-color: transparent;\n        text-fill-color: transparent;\n        text-shadow: 0px 2px 2px rgba(255,0,0,0.2);\n        font-weight: bold;\n        margin: 0;\n        padding: 0;\n      }\n      \n      /* ADHD友好样式 */\n      .adhd-friendly {\n        font-size: 1.1em;\n        line-height: 1.8;\n        color: white;\n        padding: 15px 0;\n      }\n    `;\n    document.head.appendChild(style);\n  };\n\n  // 处理文本应用多种柔和3D效果\n  const applyComfortable3dEffect = text => {\n    // 分段落处理\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    let htmlContent = '<div class=\"pdf-content comfortable-3d-content\">';\n\n    // 3D效果类型数组\n    const effectClasses = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n    paragraphs.forEach(paragraph => {\n      // 清理可能存在的标签\n      const cleanParagraph = paragraph.replace(/<span[^>]*>/g, '').replace(/<\\/span>/g, '');\n\n      // 分词处理\n      const words = cleanParagraph.split(/(\\s+|[,.!?，。！？])/);\n      let processedText = '';\n      words.forEach(word => {\n        if (!word || /^\\s+$/.test(word) || /^[,.!?，。！？]$/.test(word)) {\n          // 保持空格和标点原样，但使其为白色\n          processedText += `<span class=\"normal-text\">${word}</span>`;\n          return;\n        }\n\n        // 约20%的单词应用3D效果\n        if (Math.random() < 0.2) {\n          // 随机选择一种3D效果\n          const effectClass = effectClasses[Math.floor(Math.random() * effectClasses.length)];\n          processedText += `<span class=\"${effectClass}\">${word}</span>`;\n        } else {\n          // 非3D文字显示为白色\n          processedText += `<span class=\"normal-text\">${word}</span>`;\n        }\n      });\n\n      // 包装成段落，应用ADHD友好的样式\n      htmlContent += `<p class=\"pdf-paragraph adhd-friendly\">${processedText}</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 添加闪读模式样式\n  const addFlashReadingStyles = () => {\n    if (document.getElementById('flash-reading-styles')) return;\n    const style = document.createElement('style');\n    style.id = 'flash-reading-styles';\n    style.textContent = `\n      .flash-reading-container {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        height: 80vh;\n        width: 100%;\n        background-color: #222;\n        color: white;\n      }\n      \n      .flash-reading-display {\n        font-size: 2em;\n        min-height: 3em;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        text-align: center;\n        padding: 20px;\n        margin: 40px 0;\n        width: 80%;\n        max-width: 800px;\n        border-radius: 10px;\n        background-color: rgba(255,255,255,0.05);\n        transition: background-color 0.3s ease;\n      }\n      \n      @keyframes flash-in {\n        0% { opacity: 0; transform: scale(0.95); }\n        100% { opacity: 1; transform: scale(1); }\n      }\n      \n      .flash-reading-animate {\n        animation: flash-in 0.3s ease forwards;\n      }\n      \n      .flash-reading-controls {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        width: 80%;\n        max-width: 600px;\n        background-color: rgba(255,255,255,0.1);\n        padding: 20px;\n        border-radius: 10px;\n      }\n      \n      .flash-reading-slider-container {\n        width: 100%;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        margin-bottom: 15px;\n      }\n      \n      .flash-reading-slider {\n        width: 100%;\n        margin: 10px 0;\n      }\n      \n      .flash-reading-buttons {\n        display: flex;\n        gap: 10px;\n        margin-top: 15px;\n      }\n      \n      .flash-reading-button {\n        padding: 8px 16px;\n        background-color: #4CAF50;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        cursor: pointer;\n        font-size: 16px;\n      }\n      \n      .flash-reading-button:hover {\n        background-color: #3e8e41;\n      }\n      \n      .flash-reading-button.pause {\n        background-color: #f44336;\n      }\n      \n      .flash-reading-button.pause:hover {\n        background-color: #d32f2f;\n      }\n      \n      .flash-reading-stats {\n        margin-top: 15px;\n        font-size: 14px;\n        color: #aaa;\n      }\n    `;\n    document.head.appendChild(style);\n  };\n\n  // 将文本分割成句子\n  const splitTextIntoSentences = text => {\n    // 匹配任意标点符号\n    const punctuationPattern = /[,.!?，。！？；;，、]/g;\n    const sentences = [];\n    let lastIndex = 0;\n    let match;\n    while ((match = punctuationPattern.exec(text)) !== null) {\n      const endIndex = match.index + 1; // 包含标点符号\n      const sentence = text.slice(lastIndex, endIndex).trim();\n      if (sentence) {\n        sentences.push(sentence);\n      }\n      lastIndex = endIndex;\n    }\n\n    // 处理剩余的文本\n    if (lastIndex < text.length) {\n      const remainingText = text.slice(lastIndex).trim();\n      if (remainingText) {\n        sentences.push(remainingText);\n      }\n    }\n    return sentences;\n  };\n\n  // 创建闪读模式的HTML结构\n  const createFlashReadingContent = text => {\n    const sentences = splitTextIntoSentences(text);\n    window.flashReader = {\n      sentences: sentences,\n      currentIndex: 0,\n      isPlaying: false,\n      speed: 1000,\n      intervalId: null\n    };\n    let htmlContent = `\n      <div class=\"flash-reading-container\">\n        <div id=\"flash-reading-display\" class=\"flash-reading-display\">\n          点击\"开始\"按钮开始闪读\n        </div>\n        \n        <div class=\"flash-reading-controls\">\n          <div class=\"flash-reading-slider-container\">\n            <label for=\"flash-reading-speed\">\n              速度: <span id=\"flash-reading-speed-value\">1000ms</span>\n            </label>\n            <input \n              type=\"range\" \n              id=\"flash-reading-speed\" \n              class=\"flash-reading-slider\" \n              min=\"200\" \n              max=\"3000\" \n              step=\"100\" \n              value=\"1000\"\n            >\n          </div>\n          \n          <div class=\"flash-reading-buttons\">\n            <button id=\"flash-reading-start\" class=\"flash-reading-button\">开始</button>\n            <button id=\"flash-reading-pause\" class=\"flash-reading-button pause\" disabled>暂停</button>\n            <button id=\"flash-reading-prev\" class=\"flash-reading-button\">上一句</button>\n            <button id=\"flash-reading-next\" class=\"flash-reading-button\">下一句</button>\n          </div>\n          \n          <div class=\"flash-reading-stats\">\n            进度: <span id=\"flash-reading-progress\">0/${sentences.length}</span>\n          </div>\n        </div>\n      </div>\n    `;\n    return htmlContent;\n  };\n\n  // 初始化闪读模式的控制逻辑\n  const initializeFlashReading = () => {\n    const displayEl = document.getElementById('flash-reading-display');\n    const speedSlider = document.getElementById('flash-reading-speed');\n    const speedValue = document.getElementById('flash-reading-speed-value');\n    const startBtn = document.getElementById('flash-reading-start');\n    const pauseBtn = document.getElementById('flash-reading-pause');\n    const prevBtn = document.getElementById('flash-reading-prev');\n    const nextBtn = document.getElementById('flash-reading-next');\n    const progressEl = document.getElementById('flash-reading-progress');\n    if (!displayEl || !speedSlider || !speedValue || !startBtn || !pauseBtn || !prevBtn || !nextBtn || !progressEl) {\n      console.error('闪读模式初始化失败：缺少必要的DOM元素');\n      return;\n    }\n    const reader = window.flashReader;\n    if (!reader || !Array.isArray(reader.sentences) || reader.sentences.length === 0) {\n      displayEl.textContent = '没有可用的文本内容';\n      return;\n    }\n    const updateProgress = () => {\n      progressEl.textContent = `${reader.currentIndex + 1}/${reader.sentences.length}`;\n    };\n    const displayCurrentSentence = () => {\n      if (reader.currentIndex >= 0 && reader.currentIndex < reader.sentences.length) {\n        displayEl.classList.remove('flash-reading-animate');\n        displayEl.textContent = reader.sentences[reader.currentIndex];\n        void displayEl.offsetWidth;\n        displayEl.classList.add('flash-reading-animate');\n        updateProgress();\n      }\n    };\n    const advanceToNextSentence = () => {\n      if (reader.currentIndex < reader.sentences.length - 1) {\n        reader.currentIndex++;\n        displayCurrentSentence();\n      } else {\n        stopFlashReading();\n        displayEl.textContent = '阅读完成！';\n      }\n    };\n    const startFlashReading = () => {\n      if (reader.isPlaying) return;\n      reader.isPlaying = true;\n      startBtn.disabled = true;\n      pauseBtn.disabled = false;\n      displayCurrentSentence();\n      reader.intervalId = setInterval(() => {\n        advanceToNextSentence();\n      }, reader.speed);\n    };\n    const pauseFlashReading = () => {\n      if (!reader.isPlaying) return;\n      if (reader.intervalId) {\n        clearInterval(reader.intervalId);\n        reader.intervalId = null;\n      }\n      reader.isPlaying = false;\n      startBtn.disabled = false;\n      pauseBtn.disabled = true;\n    };\n    const stopFlashReading = () => {\n      if (reader.intervalId) {\n        clearInterval(reader.intervalId);\n        reader.intervalId = null;\n      }\n      reader.isPlaying = false;\n      startBtn.disabled = false;\n      pauseBtn.disabled = true;\n    };\n    const showPreviousSentence = () => {\n      if (reader.currentIndex > 0) {\n        pauseFlashReading();\n        reader.currentIndex--;\n        displayCurrentSentence();\n      }\n    };\n    const showNextSentence = () => {\n      if (reader.currentIndex < reader.sentences.length - 1) {\n        pauseFlashReading();\n        reader.currentIndex++;\n        displayCurrentSentence();\n      }\n    };\n    speedSlider.addEventListener('input', function () {\n      const newSpeed = parseInt(this.value);\n      reader.speed = newSpeed;\n      speedValue.textContent = `${newSpeed}ms`;\n      if (reader.isPlaying) {\n        clearInterval(reader.intervalId);\n        reader.intervalId = setInterval(() => {\n          advanceToNextSentence();\n        }, reader.speed);\n      }\n    });\n    startBtn.addEventListener('click', startFlashReading);\n    pauseBtn.addEventListener('click', pauseFlashReading);\n    prevBtn.addEventListener('click', showPreviousSentence);\n    nextBtn.addEventListener('click', showNextSentence);\n\n    // 添加清理方法，供外部调用\n    window.flashReader.cleanup = function () {\n      if (reader.intervalId) {\n        clearInterval(reader.intervalId);\n        reader.intervalId = null;\n      }\n      reader.isPlaying = false;\n    };\n    updateProgress();\n  };\n\n  // 渲染UI\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"ADHD\\u9605\\u8BFB\\u8F85\\u52A9\\u5DE5\\u5177\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2178,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file-upload\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".pdf,.txt\",\n          onChange: handleFileUpload,\n          ref: fileRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2180,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => fileRef.current.click(),\n          children: \"\\u4E0A\\u4F20\\u6587\\u4EF6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2186,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reading-modes\",\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          value: readingMode,\n          onChange: e => setReadingMode(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"normal\",\n            children: \"\\u666E\\u901A\\u9605\\u8BFB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2195,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"static\",\n            children: \"\\u9759\\u6001\\u7740\\u8272\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2196,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"follow-mouse\",\n            children: \"\\u9F20\\u6807\\u8DDF\\u968F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2197,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"rhythm\",\n            children: \"\\u8282\\u594F\\u9605\\u8BFB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2198,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"naked-eye-3d\",\n            children: \"\\u88F8\\u773C3D\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2199,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"comfortable-3d\",\n            children: \"\\u8212\\u90023D\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2200,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"flash-reading\",\n            children: \"\\u95EA\\u8BFB\\u6A21\\u5F0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2201,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2191,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2190,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reader-container\",\n      ref: readerContainerRef,\n      children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"\\u52A0\\u8F7D\\u4E2D...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2208,\n        columnNumber: 11\n      }, this) : totalPages > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pdf-viewer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"page-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: currentPage <= 1,\n            onClick: () => changePage(-1),\n            children: \"\\u4E0A\\u4E00\\u9875\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2212,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [currentPage, \" / \", totalPages]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2218,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: currentPage >= totalPages,\n            onClick: () => changePage(1),\n            children: \"\\u4E0B\\u4E00\\u9875\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2221,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2211,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"page-content\",\n          dangerouslySetInnerHTML: {\n            __html: content\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2228,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2210,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-prompt\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\u8BF7\\u4E0A\\u4F20PDF\\u6216TXT\\u6587\\u4EF6\\u5F00\\u59CB\\u9605\\u8BFB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2235,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2234,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2206,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 2176,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"hN5MIR5nO8HlAOV4fHPYVU54OrE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","pdfjsLib","pdfjsViewer","marked","pdfjs","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","window","currentPage","totalPages","changePage","eventTracker","mouseFollowHandlers","rhythmReaderGlobal","active","speed","console","log","rhythmReadingInitialized","setStorage","key","value","sessionStorage","setItem","localStorage","e","error","getStorage","getItem","rhythmReader","intervalId","currentIndex","readIndices","Set","charElements","pageTransitionInProgress","initializeTextNodes","contentContainer","document","querySelector","textNodes","findTextNodes","length","showNotification","forEach","node","text","nodeValue","trim","fragment","createDocumentFragment","i","char","span","createElement","textContent","className","dataset","rhythmIndex","String","whitespace","style","display","margin","padding","border","backgroundColor","appendChild","push","parentNode","replaceChild","element","childNodes","nodeType","Node","TEXT_NODE","ELEMENT_NODE","id","updateTextColors","index","color","fontWeight","has","background","moveToNextChar","add","clickNextPageButton","stop","scrollToCurrentChar","rect","getBoundingClientRect","lineHeight","parseInt","getComputedStyle","Math","max","height","isContainerScrollable","scrollHeight","clientHeight","includes","overflowY","containerRect","relativeTop","top","scrollTop","visibleTop","visibleBottom","scrollBy","behavior","viewportTop","scrollY","viewportBottom","innerHeight","absoluteTop","addSpeedSlider","slider","getElementById","remove","container","position","right","borderRadius","boxShadow","zIndex","alignItems","maxWidth","label","marginRight","input","type","min","step","width","valueDisplay","marginLeft","minWidth","self","addEventListener","newSpeed","clearInterval","setInterval","body","restoreOriginalText","charSpans","querySelectorAll","parentNodeMap","Map","parent","set","get","spans","sort","a","b","indexA","indexB","groups","currentGroup","prevIndex","previousSibling","group","map","join","textNode","createTextNode","removeChild","start","setTimeout","clear","hijackPageTurningFunctions","setupPageNavigationListeners","message","notification","left","transform","fontSize","_originalChangePage","page","wasActive","rhythmReadingActive","undefined","warn","something","err","target","tagName","getAttribute","toLowerCase","ariaLabel","nextPageSelectors","nextPageButton","selector","elements","el","offsetParent","buttons","button","click","isRhythmActive","stopRhythmSafely","setupPageLoadListener","observer","MutationObserver","mutations","contentChanges","some","m","addedNodes","observe","childList","subtree","App","_s","pages","setPages","setCurrentPage","setTotalPages","fileName","setFileName","loading","setLoading","fileRef","file","setFile","pdfInstance","setPdfInstance","extractedTextPages","setExtractedTextPages","readingMode","setReadingMode","posMode","setPosMode","markdownContent","setMarkdownContent","readerContainerRef","content","setContent","pdfDocument","setPdfDocument","initializeMouseFollow","handlePdfFile","fileURL","URL","createObjectURL","loadingTask","getDocument","pdf","promise","numPages","extractAndProcessPage","alert","pageNum","getPage","getTextContent","viewport","getViewport","scale","isTableOfContents","detectIfTocPage","processTocPage","processContentPage","addMouseFollowListeners","textItems","items","fullText","item","str","hasTocKeywords","test","hasPageNumberPatterns","shortLinesCount","linesWithNumbersCount","lineMap","yKey","round","lines","values","line","lineText","shortLineRatio","numberLineRatio","htmlContent","x","y","sqrt","fontName","spacedText","split","getTextNodeAtPosition","nodes","range","createRange","selectNodeContents","rects","getClientRects","j","bottom","found","processTextWithHighlight","words","result","lastColor","word","random","mode","extractedText","replace","processedContent","formatTextToHtml","applyStaticHighlight","formatTextForMouseFollow","applyComfortable3dEffect","applyDarkBackground","createFlashReadingContent","initializeFlashReading","applyNakedEye3dEffect","initializeNakedEye3D","handleTxtFile","pageTexts","paragraph","fontFamily","handleFileUpload","files","getAllCharacterPositions","walker","createTreeWalker","NodeFilter","SHOW_TEXT","positions","nextNode","currentNode","setStart","setEnd","filter","p","yDiff","abs","scrollElementToCenter","elementY","targetScrollTop","containerVisibleHeight","scrollTo","absoluteElementY","createReaderCursor","cursor","cssText","head","isSentenceEnd","charPosition","sentenceEndMarks","nextIndex","findSentenceStart","prev","current","isInVisibleArea","threshold","topThreshold","bottomThreshold","handleMouseMove","contentArea","clientX","clientY","clearAllHighlights","paragraphs","paragraphRect","paragraphX","paragraphY","wordRect","wordX","classList","removeMouseFollowListeners","handler","func","removeEventListener","addNakedEye3DStyles","addComfortable3DStyles","addFlashReadingStyles","offsetHeight","fakeEvent","MouseEvent","innerWidth","bubbles","dispatchEvent","delta","newPage","wasRhythmReading","wasFlashReading","flashReader","isPlaying","cleanup","startBtn","innerHTML","handleMouseMoveNamed","handleMouseLeaveNamed","event","cleanParagraph","highlightedText","processedText","setAttribute","restoreDarkBackground","effectClasses","effectClass","floor","splitTextIntoSentences","punctuationPattern","sentences","lastIndex","match","exec","endIndex","sentence","slice","remainingText","displayEl","speedSlider","speedValue","pauseBtn","prevBtn","nextBtn","progressEl","reader","Array","isArray","updateProgress","displayCurrentSentence","offsetWidth","advanceToNextSentence","stopFlashReading","startFlashReading","disabled","pauseFlashReading","showPreviousSentence","showNextSentence","children","_jsxFileName","lineNumber","columnNumber","accept","onChange","ref","onClick","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["D:/adhd-read-helper/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport * as pdfjsLib from 'pdfjs-dist';\r\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\r\nimport { marked } from 'marked'; // 需要安装: npm install marked\r\nimport './styles/Reader.css';\r\nimport { pdfjs } from 'pdfjs-dist';\r\n\r\n// 设置 PDF.js worker\r\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\r\n\r\n// 全局变量定义\r\nwindow.currentPage = 1;\r\nwindow.totalPages = 0;\r\nwindow.changePage = null;\r\n\r\n// 添加全局事件跟踪对象\r\nwindow.eventTracker = window.eventTracker || {\r\n  mouseFollowHandlers: []\r\n};\r\n\r\n// 全局变量，确保在页面切换后仍然保持状态\r\nwindow.rhythmReaderGlobal = window.rhythmReaderGlobal || {\r\n  active: false,\r\n  speed: 300\r\n};\r\n\r\n// 节奏阅读模式 - 确保手动翻页后也能自动恢复\r\n(function() {\r\n  console.log(\"正在初始化节奏阅读模式...\");\r\n  \r\n  // 确保只初始化一次\r\n  if (window.rhythmReadingInitialized) {\r\n    console.log(\"节奏阅读模式已经初始化过，跳过\");\r\n    return;\r\n  }\r\n  window.rhythmReadingInitialized = true;\r\n  \r\n  // 改进的存储函数，同时使用session和local storage提高可靠性\r\n  function setStorage(key, value) {\r\n    try {\r\n      sessionStorage.setItem(key, value);\r\n      localStorage.setItem(key, value);\r\n    } catch (e) {\r\n      console.error(\"无法写入存储\", e);\r\n    }\r\n  }\r\n  \r\n  function getStorage(key) {\r\n    try {\r\n      // 优先使用sessionStorage，这样更适合单次会话\r\n      return sessionStorage.getItem(key) || localStorage.getItem(key);\r\n    } catch (e) {\r\n      console.error(\"无法读取存储\", e);\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  // 状态变量和功能对象\r\n  const rhythmReader = {\r\n    active: false,\r\n    intervalId: null,\r\n    speed: 300,\r\n    currentIndex: 0,\r\n    readIndices: new Set(),\r\n    charElements: [],\r\n    pageTransitionInProgress: false,\r\n    \r\n    // 初始化文本节点\r\n    initializeTextNodes: function() {\r\n      console.log(\"【节奏阅读】初始化文本节点...\");\r\n      \r\n      // 重置字符元素数组\r\n      this.charElements = [];\r\n    \r\n      // 获取内容容器\r\n      const contentContainer = document.querySelector('.page-content');\r\n      if (!contentContainer) {\r\n        console.error(\"【节奏阅读】找不到内容容器\");\r\n        return false;\r\n      }\r\n    \r\n      // 查找所有文本节点并处理\r\n      const textNodes = [];\r\n      this.findTextNodes(contentContainer, textNodes);\r\n    \r\n      if (textNodes.length === 0) {\r\n        console.error(\"【节奏阅读】未找到文本节点\");\r\n        this.showNotification(\"无法启动节奏阅读：未找到文本内容\");\r\n        return false;\r\n      }\r\n    \r\n      console.log(`【节奏阅读】找到${textNodes.length}个文本节点`);\r\n    \r\n      // 为每个文本节点创建字符span\r\n      textNodes.forEach(node => {\r\n        const text = node.nodeValue;\r\n        if (!text || text.trim() === '') return;\r\n        \r\n        // 创建文档片段来存放字符span\r\n        const fragment = document.createDocumentFragment();\r\n        \r\n        // 为每个字符创建span\r\n        for (let i = 0; i < text.length; i++) {\r\n          const char = text[i];\r\n          const span = document.createElement('span');\r\n          span.textContent = char;\r\n          span.className = 'rhythm-char';\r\n          span.dataset.rhythmIndex = String(this.charElements.length);\r\n          \r\n          // 如果是空白字符，添加一个标志\r\n          if (char.trim() === '') {\r\n            span.dataset.whitespace = 'true';\r\n          }\r\n          \r\n          // 保持原始样式，不设置背景\r\n          span.style.display = 'inline';\r\n          span.style.margin = '0';\r\n          span.style.padding = '0';\r\n          span.style.border = 'none';\r\n          span.style.backgroundColor = 'transparent';\r\n          \r\n          fragment.appendChild(span);\r\n          this.charElements.push(span);\r\n        }\r\n        \r\n        // 替换原始节点\r\n        if (node.parentNode) {\r\n          node.parentNode.replaceChild(fragment, node);\r\n        }\r\n      });\r\n      \r\n      console.log(`【节奏阅读】总共创建${this.charElements.length}个字符span`);\r\n      return this.charElements.length > 0;\r\n    },\r\n  \r\n    // 递归查找所有文本节点\r\n    findTextNodes: function(element, textNodes) {\r\n      // 处理子节点\r\n      for (let i = 0; i < element.childNodes.length; i++) {\r\n        const node = element.childNodes[i];\r\n        \r\n        // 如果是文本节点且有内容\r\n        if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() !== '') {\r\n          textNodes.push(node);\r\n        } \r\n        // 如果是元素节点，递归处理\r\n        else if (node.nodeType === Node.ELEMENT_NODE) {\r\n          // 跳过读者UI元素\r\n          if (node.id === 'rhythm-speed-slider' || \r\n              node.id === 'rhythm-notification' ||\r\n              node.className === 'rhythm-char') {\r\n            continue;\r\n          }\r\n          this.findTextNodes(node, textNodes);\r\n        }\r\n      }\r\n    },\r\n  \r\n    // 更新文本颜色\r\n    updateTextColors: function() {\r\n      // 更新所有字符的颜色\r\n      this.charElements.forEach((span, index) => {\r\n        // 确定颜色\r\n        let color;\r\n        let fontWeight = 'inherit';\r\n        \r\n        if (index === this.currentIndex) {\r\n          color = '#00aa00'; // 当前阅读的字 - 绿色\r\n          fontWeight = 'bold';\r\n        } else if (index === this.currentIndex + 1 || index === this.currentIndex + 2) {\r\n          color = '#aaaaaa'; // 接下来两个字 - 淡灰色\r\n        } else if (this.readIndices.has(index)) {\r\n          color = '#ffffff'; // 已读字符 - 白色（表示已读）\r\n        } else {\r\n          color = 'rgba(160, 160, 160, 0.25)'; // 未读字符 - 非常淡的灰色（可见但不明显）\r\n        }\r\n        \r\n        span.style.color = color;\r\n        span.style.fontWeight = fontWeight;\r\n        \r\n        // 确保没有背景\r\n        span.style.backgroundColor = 'transparent';\r\n        span.style.background = 'none';\r\n      });\r\n    },\r\n  \r\n    // 移动到下一个字符\r\n    moveToNextChar: function() {\r\n      // 将当前字符标记为已读\r\n      this.readIndices.add(this.currentIndex);\r\n    \r\n      // 移动到下一个非空白字符\r\n      do {\r\n        this.currentIndex++;\r\n        \r\n        // 检查是否到达末尾\r\n        if (this.currentIndex >= this.charElements.length) {\r\n          console.log(\"【节奏阅读】已到达页尾，尝试翻页\");\r\n          \r\n          // 尝试点击下一页按钮\r\n          if (!this.clickNextPageButton()) {\r\n            // 如果没有找到下一页按钮，完全停止阅读\r\n            this.stop();\r\n          }\r\n          return;\r\n        }\r\n      } while (\r\n        this.currentIndex < this.charElements.length && \r\n        this.charElements[this.currentIndex] && \r\n        this.charElements[this.currentIndex].dataset.whitespace === 'true'\r\n      );\r\n    \r\n      // 更新颜色\r\n      this.updateTextColors();\r\n    \r\n      // 滚动到当前字符\r\n      this.scrollToCurrentChar();\r\n    },\r\n  \r\n    // 滚动到当前字符\r\n    scrollToCurrentChar: function() {\r\n      const span = this.charElements[this.currentIndex];\r\n      if (!span) return;\r\n    \r\n      const rect = span.getBoundingClientRect();\r\n      const contentContainer = document.querySelector('.page-content');\r\n    \r\n      // 估计行高\r\n      const lineHeight = parseInt(window.getComputedStyle(span).lineHeight) || \r\n                       Math.max(20, rect.height * 1.5);\r\n    \r\n      // 确定滚动容器\r\n      const isContainerScrollable = contentContainer && \r\n        contentContainer.scrollHeight > contentContainer.clientHeight &&\r\n        ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\r\n    \r\n      if (isContainerScrollable) {\r\n        // 容器滚动\r\n        const containerRect = contentContainer.getBoundingClientRect();\r\n        const relativeTop = rect.top - containerRect.top + contentContainer.scrollTop;\r\n        \r\n        const visibleTop = contentContainer.scrollTop;\r\n        const visibleBottom = visibleTop + contentContainer.clientHeight;\r\n        \r\n        if (relativeTop < visibleTop + lineHeight || relativeTop > visibleBottom - lineHeight) {\r\n          contentContainer.scrollBy({\r\n            top: lineHeight * 2 * (relativeTop > visibleBottom - lineHeight ? 1 : -1),\r\n            behavior: 'smooth'\r\n          });\r\n        }\r\n      } else {\r\n        // 窗口滚动\r\n        const viewportTop = window.scrollY;\r\n        const viewportBottom = viewportTop + window.innerHeight;\r\n        const absoluteTop = rect.top + window.scrollY;\r\n        \r\n        if (absoluteTop < viewportTop + lineHeight || absoluteTop > viewportBottom - lineHeight) {\r\n          window.scrollBy({\r\n            top: lineHeight * 2 * (absoluteTop > viewportBottom - lineHeight ? 1 : -1),\r\n            behavior: 'smooth'\r\n          });\r\n        }\r\n      }\r\n    },\r\n    \r\n    // 添加速度滑块\r\n    addSpeedSlider: function() {\r\n      let slider = document.getElementById('rhythm-speed-slider');\r\n      if (slider) slider.remove();\r\n      \r\n      const container = document.createElement('div');\r\n      container.id = 'rhythm-speed-slider';\r\n      container.style.position = 'fixed';\r\n      container.style.top = '70px';\r\n      container.style.right = '20px';\r\n      container.style.backgroundColor = 'white';\r\n      container.style.padding = '10px';\r\n      container.style.borderRadius = '5px';\r\n      container.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';\r\n      container.style.zIndex = '10000';\r\n      container.style.display = 'flex';\r\n      container.style.alignItems = 'center';\r\n      container.style.maxWidth = '300px';\r\n      \r\n      const label = document.createElement('label');\r\n      label.textContent = '速度: ';\r\n      label.style.marginRight = '8px';\r\n      container.appendChild(label);\r\n      \r\n      const input = document.createElement('input');\r\n      input.type = 'range';\r\n      input.min = '50';\r\n      input.max = '1000';\r\n      input.step = '50';\r\n      input.value = this.speed;\r\n      input.style.width = '120px';\r\n      \r\n      const valueDisplay = document.createElement('span');\r\n      valueDisplay.textContent = `${this.speed}ms`;\r\n      valueDisplay.style.marginLeft = '8px';\r\n      valueDisplay.style.minWidth = '60px';\r\n      \r\n      const self = this;\r\n      input.addEventListener('input', function() {\r\n        const newSpeed = parseInt(this.value);\r\n        self.speed = newSpeed;\r\n        valueDisplay.textContent = `${newSpeed}ms`;\r\n        \r\n        if (self.intervalId) {\r\n          clearInterval(self.intervalId);\r\n          self.intervalId = setInterval(() => self.moveToNextChar(), newSpeed);\r\n        }\r\n      });\r\n      \r\n      container.appendChild(input);\r\n      container.appendChild(valueDisplay);\r\n      document.body.appendChild(container);\r\n    },\r\n  \r\n    // 恢复原始文本\r\n    restoreOriginalText: function() {\r\n      // 获取所有已创建的字符span\r\n      const charSpans = document.querySelectorAll('.rhythm-char');\r\n      \r\n      // 按父节点分组\r\n      const parentNodeMap = new Map();\r\n      \r\n      charSpans.forEach(span => {\r\n        const parent = span.parentNode;\r\n        if (!parent) return;\r\n        \r\n        if (!parentNodeMap.has(parent)) {\r\n          parentNodeMap.set(parent, []);\r\n        }\r\n        parentNodeMap.get(parent).push(span);\r\n      });\r\n      \r\n      // 对每个父节点，将连续的字符span合并回文本节点\r\n      parentNodeMap.forEach((spans, parent) => {\r\n        if (spans.length === 0) return;\r\n        \r\n        // 排序spans确保顺序正确\r\n        spans.sort((a, b) => {\r\n          const indexA = parseInt(a.dataset.rhythmIndex || '0');\r\n          const indexB = parseInt(b.dataset.rhythmIndex || '0');\r\n          return indexA - indexB;\r\n        });\r\n        \r\n        // 根据连续性分组\r\n        const groups = [];\r\n        if (spans.length > 0) {\r\n          let currentGroup = [spans[0]];\r\n          \r\n          for (let i = 1; i < spans.length; i++) {\r\n            const prevIndex = parseInt(spans[i-1].dataset.rhythmIndex || '0');\r\n            const currentIndex = parseInt(spans[i].dataset.rhythmIndex || '0');\r\n            \r\n            if (currentIndex === prevIndex + 1 && spans[i].previousSibling === spans[i-1]) {\r\n              currentGroup.push(spans[i]);\r\n            } else {\r\n              groups.push(currentGroup);\r\n              currentGroup = [spans[i]];\r\n            }\r\n          }\r\n          \r\n          groups.push(currentGroup);\r\n        }\r\n        \r\n        // 对每个连续组替换为文本节点\r\n        groups.forEach(group => {\r\n          if (group.length === 0) return;\r\n          \r\n          try {\r\n            const text = group.map(span => span.textContent).join('');\r\n            const textNode = document.createTextNode(text);\r\n            \r\n            // 替换第一个span，然后移除其余的\r\n            if (group[0].parentNode === parent) {\r\n              parent.replaceChild(textNode, group[0]);\r\n              for (let i = 1; i < group.length; i++) {\r\n                if (group[i].parentNode === parent) {\r\n                  parent.removeChild(group[i]);\r\n                }\r\n              }\r\n            }\r\n          } catch (e) {\r\n            console.error(\"【节奏阅读】恢复文本时出错:\", e);\r\n          }\r\n        });\r\n      });\r\n      \r\n      // 清除字符元素数组\r\n      this.charElements = [];\r\n    },\r\n  \r\n    // 启动节奏阅读\r\n    start: function() {\r\n      console.log(\"【节奏阅读】启动中...\");\r\n      \r\n      // 检查是否正在进行页面转换\r\n      if (this.pageTransitionInProgress) {\r\n        console.log(\"【节奏阅读】页面转换正在进行中，延迟启动\");\r\n        setTimeout(() => this.start(), 500);\r\n        return;\r\n      }\r\n    \r\n      // 先停止已有的\r\n      this.stop(false);\r\n    \r\n      // 设置为活动状态\r\n      this.active = true;\r\n      setStorage('rhythmReadingActive', 'true');\r\n    \r\n      // 初始化文本\r\n      if (!this.initializeTextNodes()) {\r\n        console.error(\"【节奏阅读】无法初始化文本节点\");\r\n        return;\r\n      }\r\n\r\n      // 重要：始终从头开始阅读\r\n      this.currentIndex = 0;\r\n      this.readIndices.clear();\r\n      \r\n      // 添加速度滑块\r\n      this.addSpeedSlider();\r\n    \r\n      // 更新颜色\r\n      this.updateTextColors();\r\n    \r\n      // 滚动到开始位置\r\n      this.scrollToCurrentChar();\r\n    \r\n      // 设置阅读间隔\r\n      this.intervalId = setInterval(() => this.moveToNextChar(), this.speed);\r\n      \r\n      console.log(\"【节奏阅读】成功启动\");\r\n      \r\n      // 显示提示\r\n      this.showNotification(\"节奏阅读模式已启动\");\r\n      \r\n      // 劫持翻页函数 - 重要步骤\r\n      this.hijackPageTurningFunctions();\r\n      \r\n      // 设置页面导航事件监听\r\n      this.setupPageNavigationListeners();\r\n    },\r\n    \r\n    // 停止节奏阅读\r\n    stop: function(showNotification = true) {\r\n      if (this.intervalId) {\r\n        clearInterval(this.intervalId);\r\n        this.intervalId = null;\r\n      }\r\n      \r\n      if (this.active) {\r\n        console.log(\"【节奏阅读】停止中...\");\r\n        this.active = false;\r\n        \r\n        // 仅当不是因翻页而停止时才清除活动状态\r\n        if (!this.pageTransitionInProgress) {\r\n          setStorage('rhythmReadingActive', 'false');\r\n        }\r\n        \r\n        // 恢复原始文本\r\n        this.restoreOriginalText();\r\n        \r\n        // 移除速度滑块\r\n        const slider = document.getElementById('rhythm-speed-slider');\r\n        if (slider) slider.remove();\r\n        \r\n        if (showNotification) {\r\n          this.showNotification(\"节奏阅读模式已停止\");\r\n        }\r\n      }\r\n    },\r\n    \r\n    // 显示通知\r\n    showNotification: function(message) {\r\n      let notification = document.getElementById('rhythm-notification');\r\n      if (notification) notification.remove();\r\n      \r\n      notification = document.createElement('div');\r\n      notification.id = 'rhythm-notification';\r\n      notification.textContent = message;\r\n      notification.style.position = 'fixed';\r\n      notification.style.top = '50%';\r\n      notification.style.left = '50%';\r\n      notification.style.transform = 'translate(-50%, -50%)';\r\n      notification.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';\r\n      notification.style.color = 'white';\r\n      notification.style.padding = '15px 25px';\r\n      notification.style.borderRadius = '5px';\r\n      notification.style.zIndex = '10001';\r\n      notification.style.fontSize = '18px';\r\n      \r\n      document.body.appendChild(notification);\r\n      \r\n      // 2秒后自动消失\r\n      setTimeout(() => {\r\n        if (notification && notification.parentNode) {\r\n          notification.parentNode.removeChild(notification);\r\n        }\r\n      }, 2000);\r\n    },\r\n    \r\n    // 劫持页面翻转函数 - 改进版本\r\n    hijackPageTurningFunctions: function() {\r\n      if (typeof window.changePage === 'function' && !window._originalChangePage) {\r\n        console.log(\"【节奏阅读】劫持changePage函数\");\r\n        window._originalChangePage = window.changePage;\r\n        \r\n        const self = this;\r\n        window.changePage = function(page) {\r\n          console.log(\"【节奏阅读】检测到changePage调用，参数:\", page);\r\n          \r\n          const wasActive = self.active;\r\n          self.pageTransitionInProgress = true;\r\n          \r\n          if (wasActive) {\r\n            self.stop(false);\r\n            setStorage('rhythmReadingActive', 'true'); \r\n            setStorage('rhythmReadingPending', 'true');\r\n            document.body.dataset.rhythmReadingActive = 'true';\r\n          }\r\n          \r\n          try {\r\n            if (page === undefined || page === null) {\r\n              console.warn('【节奏阅读】安全处理：page参数为空');\r\n              page = {};\r\n            }\r\n            \r\n            if (typeof page === 'object' && !page.something) {\r\n              console.log('【节奏阅读】添加空的something对象防止错误');\r\n              page.something = { active: false };\r\n            }\r\n            \r\n            window._originalChangePage(page);\r\n          } catch (err) {\r\n            console.error(\"【节奏阅读】翻页函数执行出错:\", err);\r\n            self.clickNextPageButton();\r\n          }\r\n          \r\n          setTimeout(() => {\r\n            self.pageTransitionInProgress = false;\r\n            \r\n            if (wasActive && getStorage('rhythmReadingPending') === 'true') {\r\n              setStorage('rhythmReadingPending', 'false');\r\n              console.log(\"【节奏阅读】翻页后重新启动\");\r\n              setTimeout(() => self.start(), 500);\r\n            }\r\n          }, 1000);\r\n        };\r\n      }\r\n    },\r\n    \r\n    // 设置页面导航事件监听 - 加强版\r\n    setupPageNavigationListeners: function() {\r\n      // 查找所有可能的翻页按钮\r\n      console.log(\"【节奏阅读】正在设置页面导航监听\");\r\n      \r\n      const self = this;\r\n      \r\n      // 使用事件委托来捕获所有可能的点击\r\n      document.addEventListener('click', function(e) {\r\n        // 检查点击的元素是否可能是翻页按钮\r\n        let target = e.target;\r\n        while (target && target !== document.body) {\r\n          // 检查是否是翻页元素\r\n          if (target.tagName === 'BUTTON' || target.tagName === 'A' || \r\n              target.getAttribute('role') === 'button') {\r\n            \r\n            const text = (target.textContent || '').trim().toLowerCase();\r\n            const ariaLabel = (target.getAttribute('aria-label') || '').toLowerCase();\r\n            \r\n            // 检查是否是翻页元素\r\n            if (text.includes('上一页') || text.includes('下一页') || \r\n                text.includes('prev') || text.includes('next') ||\r\n                ariaLabel.includes('page') || ariaLabel.includes('页') ||\r\n                text === '<' || text === '>' || text === '←' || text === '→') {\r\n              \r\n              if (self.active) {\r\n                console.log(`【节奏阅读】检测到可能的翻页元素点击: ${text || ariaLabel}`);\r\n                \r\n                // 标记页面转换开始\r\n                self.pageTransitionInProgress = true;\r\n                \r\n                // 保存状态到存储\r\n                setStorage('rhythmReadingActive', 'true');\r\n                setStorage('rhythmReadingPending', 'true');\r\n                document.body.dataset.rhythmReadingActive = 'true';\r\n                \r\n                // 停止当前的阅读\r\n                self.stop(false);\r\n                \r\n                // 添加延迟执行的监听器，确保数据在页面加载后恢复\r\n                setTimeout(() => {\r\n                  self.pageTransitionInProgress = false;\r\n                  \r\n                  if (getStorage('rhythmReadingPending') === 'true') {\r\n                    setStorage('rhythmReadingPending', 'false');\r\n                    self.start();\r\n                  }\r\n                }, 1500);\r\n              }\r\n              \r\n              break;\r\n            }\r\n          }\r\n          \r\n          target = target.parentNode;\r\n        }\r\n      });\r\n      \r\n      // 监听键盘导航事件\r\n      document.addEventListener('keydown', function(e) {\r\n        // 检查是否是翻页快捷键\r\n        if (['ArrowLeft', 'ArrowRight', 'PageUp', 'PageDown'].includes(e.key)) {\r\n          if (self.active) {\r\n            console.log(`【节奏阅读】检测到键盘翻页: ${e.key}`);\r\n            \r\n            // 保存状态到存储\r\n            setStorage('rhythmReadingActive', 'true');\r\n            setStorage('rhythmReadingPending', 'true');\r\n            \r\n            // 标记页面转换开始\r\n            self.pageTransitionInProgress = true;\r\n            \r\n            // 停止当前的阅读\r\n            self.stop(false);\r\n            \r\n            // 添加延迟执行的监听器\r\n            setTimeout(() => {\r\n              self.pageTransitionInProgress = false;\r\n              \r\n              if (getStorage('rhythmReadingPending') === 'true') {\r\n                setStorage('rhythmReadingPending', 'false');\r\n                self.start();\r\n              }\r\n            }, 1500);\r\n          }\r\n        }\r\n      });\r\n      \r\n      // 添加popstate监听器捕获浏览器前进/后退导航\r\n      window.addEventListener('popstate', function() {\r\n        if (self.active) {\r\n          console.log(\"【节奏阅读】检测到历史导航事件\");\r\n          \r\n          // 保存状态\r\n          setStorage('rhythmReadingActive', 'true');\r\n          setStorage('rhythmReadingPending', 'true');\r\n          \r\n          // 标记页面转换开始\r\n          self.pageTransitionInProgress = true;\r\n          \r\n          // 停止当前阅读\r\n          self.stop(false);\r\n          \r\n          // 延迟恢复\r\n          setTimeout(() => {\r\n            self.pageTransitionInProgress = false;\r\n            \r\n            if (getStorage('rhythmReadingPending') === 'true') {\r\n              setStorage('rhythmReadingPending', 'false');\r\n              self.start();\r\n            }\r\n          }, 1500);\r\n        }\r\n      });\r\n    },\r\n    \r\n    // 改进的自动翻页函数，更精确地处理状态保存\r\n    clickNextPageButton: function() {\r\n      console.log(\"【节奏阅读】尝试查找并点击下一页按钮\");\r\n      \r\n      // 查找下一页按钮\r\n      const nextPageSelectors = [\r\n        'button.next-page', \r\n        'button[aria-label=\"下一页\"]',\r\n        'a.next-page',\r\n        'a[aria-label=\"下一页\"]',\r\n        '.next-page',\r\n        '#next-page',\r\n        'button.next',\r\n        'a.next'\r\n      ];\r\n      \r\n      let nextPageButton = null;\r\n      \r\n      // 尝试通过选择器找到按钮\r\n      for (const selector of nextPageSelectors) {\r\n        try {\r\n          const elements = document.querySelectorAll(selector);\r\n          for (const el of elements) {\r\n            if (el.offsetParent !== null) { // 检查元素是否可见\r\n              console.log(`【节奏阅读】找到下一页按钮: ${selector}`);\r\n              nextPageButton = el;\r\n              break;\r\n            }\r\n          }\r\n          if (nextPageButton) break;\r\n        } catch (e) {\r\n          // 某些选择器可能不被支持，忽略错误\r\n        }\r\n      }\r\n      \r\n      // 如果没找到，尝试按文本内容查找\r\n      if (!nextPageButton) {\r\n        const buttons = document.querySelectorAll('button, a, div[role=\"button\"]');\r\n        for (const button of buttons) {\r\n          const text = button.textContent.trim().toLowerCase();\r\n          if ((text.includes('下一页') || text.includes('next') || text === '>' || text === '→') && \r\n              button.offsetParent !== null) {\r\n            console.log(`【节奏阅读】通过文本内容找到下一页按钮: ${text}`);\r\n            nextPageButton = button;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      \r\n      if (nextPageButton) {\r\n        console.log(\"【节奏阅读】模拟点击下一页按钮\");\r\n        \r\n        // 明确标记页面转换开始\r\n        this.pageTransitionInProgress = true;\r\n        \r\n        // 保存状态\r\n        setStorage('rhythmReadingActive', 'true');\r\n        setStorage('rhythmReadingPending', 'true');\r\n        document.body.dataset.rhythmReadingActive = 'true';\r\n        \r\n        // 恢复原始文本\r\n        this.restoreOriginalText();\r\n        \r\n        // 停止计时器\r\n        if (this.intervalId) {\r\n          clearInterval(this.intervalId);\r\n          this.intervalId = null;\r\n        }\r\n        \r\n        // 模拟点击\r\n        nextPageButton.click();\r\n        \r\n        // 延迟结束页面转换状态\r\n        setTimeout(() => {\r\n          this.pageTransitionInProgress = false;\r\n        }, 1000);\r\n        \r\n        return true;\r\n      } else {\r\n        console.log(\"【节奏阅读】未找到下一页按钮\");\r\n        return false;\r\n      }\r\n    }\r\n  };\r\n  \r\n  // 暴露到全局，以便调试和直接调用\r\n  window.rhythmReader = rhythmReader;\r\n  \r\n  // 额外添加一个全局安全函数用于检查节奏阅读状态\r\n  window.isRhythmActive = function() {\r\n    return rhythmReader.active || getStorage('rhythmReadingActive') === 'true';\r\n  };\r\n  \r\n  // 添加一个停止函数供外部安全调用\r\n  window.stopRhythmSafely = function() {\r\n    try {\r\n      setStorage('rhythmReadingActive', 'false');\r\n      setStorage('rhythmReadingPending', 'false');\r\n      \r\n      if (rhythmReader && typeof rhythmReader.stop === 'function') {\r\n        rhythmReader.stop();\r\n      }\r\n    } catch (e) {\r\n      console.error(\"停止节奏阅读出错\", e);\r\n    }\r\n  };\r\n  \r\n  // 设置页面加载监听器，确保页面转换后能恢复\r\n  function setupPageLoadListener() {\r\n    // 改进的页面变化监测\r\n    const observer = new MutationObserver(function(mutations) {\r\n      // 检测到内容变化且有待处理的节奏阅读时\r\n      if (getStorage('rhythmReadingPending') === 'true') {\r\n        const contentChanges = mutations.some(m => \r\n          m.type === 'childList' && m.addedNodes.length > 5); // 使用更高的阈值，确保是真正的内容变化\r\n          \r\n        if (contentChanges) {\r\n          console.log(\"【节奏阅读】检测到大量DOM变化，可能是页面切换\");\r\n          \r\n          // 给页面一点时间稳定下来\r\n          setTimeout(() => {\r\n            if (getStorage('rhythmReadingPending') === 'true') {\r\n              console.log(\"【节奏阅读】页面内容变化后，尝试恢复阅读\");\r\n              setStorage('rhythmReadingPending', 'false');\r\n              \r\n              if (!rhythmReader.pageTransitionInProgress) {\r\n                rhythmReader.start();\r\n              }\r\n            }\r\n          }, 800);\r\n        }\r\n      }\r\n    });\r\n    \r\n    // 观察body变化\r\n    observer.observe(document.body, {\r\n      childList: true,\r\n      subtree: true\r\n    });\r\n  }\r\n  \r\n  // 设置页面加载监听器\r\n  setupPageLoadListener();\r\n  \r\n  // 检查是否需要立即恢复阅读状态\r\n  if (getStorage('rhythmReadingActive') === 'true') {\r\n    console.log(\"【节奏阅读】检测到之前的阅读状态，准备恢复\");\r\n    setStorage('rhythmReadingPending', 'false');\r\n    \r\n    setTimeout(function() {\r\n      rhythmReader.start();\r\n    }, 800);\r\n  }\r\n  \r\n  console.log(\"【节奏阅读】初始化完成\");\r\n})();\r\n\r\nconst App = () => {\r\n  // 状态定义\r\n  const [pages, setPages] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [totalPages, setTotalPages] = useState(0);\r\n  const [fileName, setFileName] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const fileRef = useRef(null);\r\n  const [file, setFile] = useState(null);\r\n  const [pdfInstance, setPdfInstance] = useState(null);\r\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\r\n  const [readingMode, setReadingMode] = useState('normal');\r\n  const [posMode, setPosMode] = useState('none');\r\n  const [markdownContent, setMarkdownContent] = useState('');\r\n  const readerContainerRef = useRef(null);\r\n  const [content, setContent] = useState('');\r\n  const [pdfDocument, setPdfDocument] = useState(null);\r\n  \r\n  // 初始化PDF.js\r\n  useEffect(() => {\r\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\r\n  }, []);\r\n  \r\n  // 当阅读模式改变时应用效果\r\n  useEffect(() => {\r\n    if (readingMode === 'follow-mouse') {\r\n      // 确保DOM更新完成后初始化鼠标跟随功能\r\n      setTimeout(() => {\r\n        initializeMouseFollow();\r\n      }, 50);\r\n    }\r\n  }, [readingMode, markdownContent]);\r\n\r\n  // 修改PDF处理函数，确保内容正确提取和显示\r\n  const handlePdfFile = async (file) => {\r\n    try {\r\n      const fileURL = URL.createObjectURL(file);\r\n      const loadingTask = pdfjsLib.getDocument(fileURL);\r\n      const pdf = await loadingTask.promise;\r\n      \r\n      setPdfDocument(pdf);\r\n      setTotalPages(pdf.numPages);\r\n      setCurrentPage(1);\r\n      \r\n      // 加载第一页\r\n      await extractAndProcessPage(pdf, 1);\r\n      \r\n      // 添加调试信息\r\n      console.log('PDF加载成功，页数:', pdf.numPages);\r\n    } catch (error) {\r\n      console.error('加载PDF时出错:', error);\r\n      alert('PDF加载失败，请尝试其他文件');\r\n    }\r\n  };\r\n  \r\n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\r\n  const extractAndProcessPage = async (pdf, pageNum) => {\r\n    try {\r\n      const page = await pdf.getPage(pageNum);\r\n      const textContent = await page.getTextContent();\r\n      const viewport = page.getViewport({ scale: 1.0 });\r\n      \r\n      // 判断当前页面是否为目录页\r\n      const isTableOfContents = await detectIfTocPage(textContent);\r\n      \r\n      if (isTableOfContents) {\r\n        // 处理目录页面 - 保持原布局，仅调整字间距\r\n        await processTocPage(textContent, viewport);\r\n      } else {\r\n        // 处理正文页面 - 以句号为标准划分段落\r\n        await processContentPage(page, readingMode);\r\n      }\r\n      \r\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\r\n      if (readingMode === 'follow-mouse') {\r\n        setTimeout(() => {\r\n          addMouseFollowListeners();\r\n        }, 50);\r\n      }\r\n      \r\n      return true; // 返回成功标志\r\n    } catch (error) {\r\n      console.error('处理PDF页面时出错:', error);\r\n      setContent('<div>无法处理PDF内容</div>');\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // 检测是否为目录页\r\n  const detectIfTocPage = async (textContent) => {\r\n    const textItems = textContent.items;\r\n    let fullText = textItems.map(item => item.str).join('');\r\n    \r\n    // 检查特征: \r\n    // 1. 页面上包含\"目录\"字样\r\n    // 2. 行尾通常有页码和前导符（...）\r\n    // 3. 短行居多，且多有规律的缩进\r\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\r\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\r\n    \r\n    // 检查行的特征\r\n    let shortLinesCount = 0;\r\n    let linesWithNumbersCount = 0;\r\n    \r\n    // 按Y坐标分组\r\n    const lineMap = new Map();\r\n    textItems.forEach(item => {\r\n      const yKey = Math.round(item.transform[5]);\r\n      if (!lineMap.has(yKey)) {\r\n        lineMap.set(yKey, []);\r\n      }\r\n      lineMap.get(yKey).push(item);\r\n    });\r\n    \r\n    const lines = [...lineMap.values()];\r\n    \r\n    lines.forEach(line => {\r\n      const lineText = line.map(item => item.str).join('');\r\n      if (lineText.length < 50) shortLinesCount++;\r\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\r\n    });\r\n    \r\n    const shortLineRatio = shortLinesCount / lines.length;\r\n    const numberLineRatio = linesWithNumbersCount / lines.length;\r\n    \r\n    return hasTocKeywords || hasPageNumberPatterns || (shortLineRatio > 0.7 && numberLineRatio > 0.3);\r\n  };\r\n\r\n  // 处理目录页面 - 严格保持原始布局\r\n  const processTocPage = async (textContent, viewport) => {\r\n    const textItems = textContent.items;\r\n    \r\n    // 生成HTML，严格保持原始位置和格式\r\n    let htmlContent = '<div class=\"pdf-toc-page\">';\r\n    \r\n    textItems.forEach(item => {\r\n      // 获取原始位置信息\r\n      const x = item.transform[4];\r\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\r\n      \r\n      // 获取原始字体信息\r\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\r\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\r\n      \r\n      // 仅应用字间距，其他完全保持原样\r\n      const spacedText = item.str.split('').join('\\u200A');\r\n      \r\n      // 使用绝对定位和原始样式属性\r\n      htmlContent += `<span style=\"\r\n        position: absolute; \r\n        left: ${x}px; \r\n        top: ${y}px; \r\n        font-size: ${fontSize}px; \r\n        font-weight: ${fontWeight};\r\n        letter-spacing: 0.3em;\r\n        white-space: nowrap;\r\n        font-family: inherit;\r\n        color: inherit;\r\n      \">${spacedText}</span>`;\r\n    });\r\n    \r\n    htmlContent += '</div>';\r\n    setContent(htmlContent);\r\n  };\r\n\r\n  // 获取鼠标位置下的文本节点\r\n  const getTextNodeAtPosition = (element, x, y) => {\r\n    const nodes = element.childNodes;\r\n    for (let i = 0; i < nodes.length; i++) {\r\n      const node = nodes[i];\r\n      if (node.nodeType === Node.TEXT_NODE) {\r\n        const range = document.createRange();\r\n        range.selectNodeContents(node);\r\n        const rects = range.getClientRects();\r\n        for (let j = 0; j < rects.length; j++) {\r\n          const rect = rects[j];\r\n          if (y >= rect.top && y <= rect.bottom && \r\n              x >= rect.left && x <= rect.right) {\r\n            return node;\r\n          }\r\n        }\r\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n        const found = getTextNodeAtPosition(node, x, y);\r\n        if (found) return found;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  // 处理文本高亮\r\n  const processTextWithHighlight = (text) => {\r\n    // 将文本按空格和标点符号分割成词\r\n    const words = text.split(/([\\s.,!?，。！？]+)/);\r\n    let result = '';\r\n    let lastColor = null;\r\n    \r\n    words.forEach(word => {\r\n      if (!word || /^\\s+$/.test(word)) {\r\n        result += word;\r\n        return;\r\n      }\r\n      \r\n      if (Math.random() < 0.8) {\r\n        let color;\r\n        if (lastColor === 'red') {\r\n          color = 'blue';\r\n        } else if (lastColor === 'blue') {\r\n          color = 'red';\r\n        } else {\r\n          color = Math.random() < 0.5 ? 'red' : 'blue';\r\n        }\r\n        lastColor = color;\r\n        \r\n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\r\n      } else {\r\n        result += word;\r\n      }\r\n    });\r\n    \r\n    return result;\r\n  };\r\n\r\n  // 修改processContentPage函数\r\n  const processContentPage = async (page, mode) => {\r\n    try {\r\n      const textContent = await page.getTextContent();\r\n      const textItems = textContent.items;\r\n      let extractedText = textItems.map(item => item.str).join(' ');\r\n      \r\n      // 移除多余的空格\r\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\r\n      \r\n      // 根据阅读模式处理文本\r\n      let processedContent = '';\r\n      switch(mode) {\r\n        case 'normal':\r\n          // 普通模式 - 简单分段显示\r\n          processedContent = formatTextToHtml(extractedText);\r\n          break;\r\n        case 'static':\r\n          // 静态高亮模式 - 应用词性标注和颜色高亮\r\n          processedContent = applyStaticHighlight(extractedText);\r\n          break;\r\n        case 'follow-mouse':\r\n          // 鼠标跟随高亮模式 - 分段落但不预先高亮，由鼠标事件触发高亮\r\n          processedContent = formatTextForMouseFollow(extractedText);\r\n          break;\r\n        case 'rhythm':\r\n          processedContent = formatTextToHtml(extractedText);\r\n          break;\r\n        case 'comfortable-3d':\r\n          processedContent = applyComfortable3dEffect(extractedText);\r\n          setTimeout(() => {\r\n            applyDarkBackground();\r\n          }, 50);\r\n          break;\r\n        case 'flash-reading':\r\n          processedContent = createFlashReadingContent(extractedText);\r\n          setTimeout(() => {\r\n            initializeFlashReading();\r\n          }, 100);\r\n          break;\r\n        case 'naked-eye-3d':\r\n          processedContent = applyNakedEye3dEffect(extractedText);\r\n          setTimeout(() => {\r\n            initializeNakedEye3D();\r\n            applyDarkBackground();\r\n          }, 50);\r\n          break;\r\n        default:\r\n          processedContent = formatTextToHtml(extractedText);\r\n      }\r\n      \r\n      setContent(processedContent);\r\n    } catch (error) {\r\n      console.error('处理内容页面时出错:', error);\r\n      setContent('<div>无法处理PDF内容</div>');\r\n    }\r\n  };\r\n\r\n  // 处理TXT文件\r\n  const handleTxtFile = async (file) => {\r\n    try {\r\n      setLoading(true);\r\n      const text = await file.text();\r\n      // 将文本分页处理\r\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\r\n        text: paragraph,\r\n        x: 40,\r\n        y: 40,\r\n        fontSize: 16,\r\n        fontFamily: 'serif'\r\n      }]);\r\n      setPages(pageTexts);\r\n      setTotalPages(pageTexts.length);\r\n      setCurrentPage(1);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error('TXT处理错误:', error);\r\n      setLoading(false);\r\n      alert('TXT文件处理失败，请重试');\r\n    }\r\n  };\r\n\r\n  // 文件上传处理\r\n  const handleFileUpload = async (e) => {\r\n    const file = e.target.files[0];\r\n    if (!file) return;\r\n    \r\n    if (file.type === 'application/pdf') {\r\n      await handlePdfFile(file);\r\n    } else if (file.type === 'text/plain') {\r\n      handleTxtFile(file);\r\n    } else {\r\n      alert('请上传PDF或TXT文件');\r\n    }\r\n  };\r\n\r\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\r\n  const getAllCharacterPositions = (container) => {\r\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\r\n    const positions = [];\r\n    \r\n    while (walker.nextNode()) {\r\n      const node = walker.currentNode;\r\n      const text = node.textContent;\r\n      \r\n      // 跳过完全空白的文本节点\r\n      if (!text.trim()) continue;\r\n      \r\n      // 逐字符处理\r\n      for (let i = 0; i < text.length; i++) {\r\n        try {\r\n          const range = document.createRange();\r\n          range.setStart(node, i);\r\n          range.setEnd(node, i + 1);\r\n          \r\n          const rect = range.getBoundingClientRect();\r\n          if (rect.width === 0 && rect.height === 0) continue;\r\n          \r\n          // 记录字符底部中心位置，而不是中心位置\r\n          positions.push({\r\n            x: rect.left + rect.width/2,  // 水平中心\r\n            y: rect.bottom,               // 字符底部\r\n            char: text[i]\r\n          });\r\n        } catch (error) {\r\n          console.warn('获取字符位置时出错:', error);\r\n          continue;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 过滤无效位置并排序\r\n    return positions\r\n      .filter(p => p.char.trim() !== '')\r\n      .sort((a, b) => {\r\n        // 先按行排序，同行按列排序\r\n        const yDiff = a.y - b.y;\r\n        if (Math.abs(yDiff) > 5) { // 5px阈值判断是否同一行\r\n          return yDiff;\r\n        }\r\n        return a.x - b.x;\r\n      });\r\n  };\r\n\r\n  // 确保元素在容器中居中的专用函数\r\n  const scrollElementToCenter = (elementY, container) => {\r\n    // 判断是容器滚动还是窗口滚动\r\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \r\n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\r\n    \r\n    // 计算需要滚动的目标位置\r\n    let targetScrollTop;\r\n    \r\n    if (isContainerScrollable) {\r\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\r\n      const containerVisibleHeight = container.clientHeight;\r\n      targetScrollTop = elementY - (containerVisibleHeight / 2);\r\n      \r\n      // 执行滚动\r\n      container.scrollTo({\r\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\r\n        behavior: 'smooth'\r\n      });\r\n    } else {\r\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\r\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\r\n      targetScrollTop = absoluteElementY - (window.innerHeight / 2);\r\n      \r\n      // 执行滚动\r\n      window.scrollTo({\r\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\r\n        behavior: 'smooth'\r\n      });\r\n    }\r\n    \r\n    return targetScrollTop;\r\n  };\r\n\r\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\r\n  const createReaderCursor = () => {\r\n    const cursor = document.createElement('div');\r\n    cursor.id = 'auto-reader-cursor';\r\n    cursor.style.cssText = `\r\n      position: absolute;\r\n      width: 10px;\r\n      height: 10px;\r\n      background: #00ff00;\r\n      border-radius: 50%;\r\n      pointer-events: none;\r\n      transform: translateX(-50%);\r\n      box-shadow: 0 0 8px #00ff00;\r\n      animation: pulse-bottom 1s infinite;\r\n      z-index: 9999;\r\n      margin-top: -2px;\r\n    `;\r\n    \r\n    // 添加动画样式\r\n    if (!document.getElementById('reader-cursor-animation')) {\r\n      const style = document.createElement('style');\r\n      style.id = 'reader-cursor-animation';\r\n      style.textContent = `\r\n        @keyframes pulse-bottom {\r\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\r\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\r\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\r\n        }\r\n      `;\r\n      document.head.appendChild(style);\r\n    }\r\n    \r\n    return cursor;\r\n  };\r\n\r\n  // 检测当前位置是否为句子结束\r\n  const isSentenceEnd = (charPosition, positions, index) => {\r\n    // 标点符号列表，用于判断句子结束\r\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\r\n    \r\n    // 检查当前字符是否为句子结束标记\r\n    if (sentenceEndMarks.includes(charPosition.char)) {\r\n      // 句子结束后通常有空格或是段落末尾\r\n      const nextIndex = index + 1;\r\n      if (nextIndex >= positions.length || // 已到末尾\r\n          positions[nextIndex].char.trim() === '' || // 下一个是空白\r\n          positions[nextIndex].y > charPosition.y + 5) { // 下一个在新行\r\n        return true;\r\n      }\r\n    }\r\n    \r\n    return false;\r\n  };\r\n\r\n  // 查找句子开始位置\r\n  const findSentenceStart = (positions, currentIndex) => {\r\n    let start = currentIndex;\r\n    \r\n    // 向前查找句子开始\r\n    while (start > 0) {\r\n      const prev = positions[start - 1];\r\n      const current = positions[start];\r\n      \r\n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\r\n      if (isSentenceEnd(prev, positions, start - 1) || \r\n          current.y > prev.y + 5) { // 有明显换行\r\n        break;\r\n      }\r\n      \r\n      start--;\r\n    }\r\n    \r\n    return start;\r\n  };\r\n\r\n  // 判断元素是否在可见区域内\r\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\r\n    // 判断是容器滚动还是窗口滚动\r\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \r\n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\r\n    \r\n    if (isContainerScrollable) {\r\n      // 容器情况\r\n      const visibleTop = container.scrollTop;\r\n      const visibleBottom = visibleTop + container.clientHeight;\r\n      \r\n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\r\n      const topThreshold = visibleTop + container.clientHeight * threshold;\r\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\r\n      \r\n      return elementY >= topThreshold && elementY <= bottomThreshold;\r\n    } else {\r\n      // 窗口情况\r\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\r\n      const visibleTop = window.scrollY;\r\n      const visibleBottom = visibleTop + window.innerHeight;\r\n      \r\n      // 元素是否在可见区域的安全范围内\r\n      const topThreshold = visibleTop + window.innerHeight * threshold;\r\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\r\n      \r\n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\r\n    }\r\n  };\r\n\r\n  // 处理鼠标移动事件\r\n  const handleMouseMove = (e) => {\r\n    if (readingMode !== 'follow-mouse') return;\r\n    \r\n    const contentArea = document.querySelector('.page-content');\r\n    if (!contentArea) return;\r\n    \r\n    const rect = contentArea.getBoundingClientRect();\r\n    const x = e.clientX - rect.left;\r\n    const y = e.clientY - rect.top;\r\n    \r\n    clearAllHighlights();\r\n    \r\n    const paragraphs = contentArea.querySelectorAll('p');\r\n    paragraphs.forEach(paragraph => {\r\n      const paragraphRect = paragraph.getBoundingClientRect();\r\n      const paragraphX = paragraphRect.left - rect.left;\r\n      const paragraphY = paragraphRect.top - rect.top;\r\n      \r\n      if (y >= paragraphY && y <= paragraphY + paragraphRect.height) {\r\n        const words = paragraph.querySelectorAll('span');\r\n        words.forEach(word => {\r\n          const wordRect = word.getBoundingClientRect();\r\n          const wordX = wordRect.left - rect.left;\r\n          \r\n          if (x >= wordX && x <= wordX + wordRect.width) {\r\n            word.classList.add('highlight');\r\n          }\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  // 清理所有高亮\r\n  const clearAllHighlights = () => {\r\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\r\n  };\r\n\r\n  // 专门用于移除鼠标跟随事件的函数\r\n  const removeMouseFollowListeners = () => {\r\n    // 移除记录的所有监听器\r\n    if (window.eventTracker && window.eventTracker.mouseFollowHandlers) {\r\n      window.eventTracker.mouseFollowHandlers.forEach(handler => {\r\n        if (handler.element && handler.func) {\r\n          handler.element.removeEventListener('mousemove', handler.func);\r\n        }\r\n      });\r\n      window.eventTracker.mouseFollowHandlers = [];\r\n    }\r\n    \r\n    // 为安全起见，尝试从document和内容区域移除通用处理函数\r\n    const contentArea = document.querySelector('.page-content');\r\n    if (contentArea) {\r\n      contentArea.removeEventListener('mousemove', handleMouseMove);\r\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\r\n    }\r\n    \r\n    document.removeEventListener('mousemove', handleMouseMove);\r\n    \r\n    // 清除所有当前高亮\r\n    clearAllHighlights();\r\n  };\r\n\r\n  // 在组件挂载时添加样式\r\n  useEffect(() => {\r\n    addNakedEye3DStyles();\r\n    addComfortable3DStyles();\r\n    addFlashReadingStyles();\r\n  }, []);\r\n\r\n  // 初始化鼠标跟随模式\r\n  const initializeMouseFollow = () => {\r\n    // 新增延迟补偿\r\n    setTimeout(() => {\r\n      addMouseFollowListeners();\r\n      \r\n      // 强制触发重排\r\n      const contentArea = document.querySelector('.page-content');\r\n      if (contentArea) {\r\n        void contentArea.offsetHeight;\r\n        \r\n        // 模拟鼠标移动事件\r\n        const fakeEvent = new MouseEvent('mousemove', {\r\n          clientX: window.innerWidth / 2,\r\n          clientY: window.innerHeight / 2,\r\n          bubbles: true\r\n        });\r\n        contentArea.dispatchEvent(fakeEvent);\r\n      }\r\n    }, 50);\r\n  };\r\n\r\n  // 修改翻页函数\r\n  const changePage = async (delta) => {\r\n    const newPage = currentPage + delta;\r\n    \r\n    if (newPage < 1 || newPage > totalPages) return;\r\n    \r\n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\r\n    const wasFlashReading = readingMode === 'flash-reading' && window.flashReader && window.flashReader.isPlaying;\r\n    \r\n    if (wasRhythmReading && window.rhythmReader) {\r\n      window.rhythmReader.stop();\r\n    }\r\n    \r\n    if (wasFlashReading && window.flashReader) {\r\n      window.flashReader.cleanup();\r\n    }\r\n    \r\n    // 更新页码\r\n    setCurrentPage(newPage);\r\n    \r\n    try {\r\n      // 加载新页面\r\n      const page = await pdfDocument.getPage(newPage);\r\n      const textContent = await page.getTextContent();\r\n      const textItems = textContent.items;\r\n      let extractedText = textItems.map(item => item.str).join(' ');\r\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\r\n      \r\n      // 按当前阅读模式处理内容\r\n      let processedContent = '';\r\n      switch(readingMode) {\r\n        case 'follow-mouse':\r\n          processedContent = formatTextForMouseFollow(extractedText);\r\n          break;\r\n        case 'static':\r\n          processedContent = applyStaticHighlight(extractedText);\r\n          break;\r\n        case 'rhythm':\r\n          processedContent = formatTextToHtml(extractedText);\r\n          break;\r\n        case 'naked-eye-3d':\r\n          processedContent = applyNakedEye3dEffect(extractedText);\r\n          break;\r\n        case 'comfortable-3d':\r\n          processedContent = applyComfortable3dEffect(extractedText);\r\n          break;\r\n        case 'flash-reading':\r\n          processedContent = createFlashReadingContent(extractedText);\r\n          setTimeout(() => {\r\n            initializeFlashReading();\r\n            if (wasFlashReading) {\r\n              const startBtn = document.getElementById('flash-reading-start');\r\n              if (startBtn) startBtn.click();\r\n            }\r\n          }, 100);\r\n          break;\r\n        default:\r\n          processedContent = formatTextToHtml(extractedText);\r\n      }\r\n      \r\n      // 更新页面内容\r\n      const contentArea = document.querySelector('.page-content');\r\n      if (contentArea) {\r\n        contentArea.textContent = '';\r\n        contentArea.innerHTML = processedContent;\r\n        \r\n        // 滚动到页面顶部\r\n        window.scrollTo(0, 0);\r\n        if (contentArea.scrollTo) {\r\n          contentArea.scrollTo(0, 0);\r\n        }\r\n        \r\n        // 重新启动对应的阅读模式\r\n        if (wasRhythmReading && window.rhythmReader) {\r\n          setTimeout(() => {\r\n            window.rhythmReader.start();\r\n          }, 50);\r\n        } else if (readingMode === 'naked-eye-3d') {\r\n          setTimeout(() => {\r\n            initializeNakedEye3D();\r\n            applyDarkBackground();\r\n          }, 50);\r\n        } else if (readingMode === 'comfortable-3d') {\r\n          setTimeout(() => {\r\n            applyDarkBackground();\r\n          }, 50);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('翻页失败:', error);\r\n    }\r\n  };\r\n\r\n  // 修改后的监听器设置函数\r\n  const addMouseFollowListeners = () => {\r\n    if (readingMode !== 'follow-mouse') return;\r\n    \r\n    removeMouseFollowListeners();\r\n    \r\n    const contentArea = document.querySelector('.page-content');\r\n    if (!contentArea) return;\r\n    \r\n    const handleMouseMoveNamed = (e) => handleMouseMove(e);\r\n    const handleMouseLeaveNamed = () => clearAllHighlights();\r\n    \r\n    contentArea.addEventListener('mousemove', handleMouseMoveNamed);\r\n    contentArea.addEventListener('mouseleave', handleMouseLeaveNamed);\r\n    \r\n    // 记录添加的监听器\r\n    window.eventTracker.mouseFollowHandlers = [\r\n      { element: contentArea, event: 'mousemove', func: handleMouseMoveNamed },\r\n      { element: contentArea, event: 'mouseleave', func: handleMouseLeaveNamed }\r\n    ];\r\n    \r\n    // 确保所有段落都有正确的样式\r\n    const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\r\n    paragraphs.forEach(paragraph => {\r\n      paragraph.style.position = 'relative';\r\n      paragraph.style.zIndex = '1';\r\n    });\r\n  };\r\n\r\n  // 格式化文本为HTML\r\n  const formatTextToHtml = (text) => {\r\n    // 分段\r\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\r\n    \r\n    // 创建HTML内容\r\n    let htmlContent = '<div class=\"pdf-content\">';\r\n    \r\n    paragraphs.forEach(paragraph => {\r\n      htmlContent += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\r\n    });\r\n    \r\n    htmlContent += '</div>';\r\n    return htmlContent;\r\n  };\r\n\r\n  // 应用静态高亮\r\n  const applyStaticHighlight = (text) => {\r\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\r\n    \r\n    let htmlContent = '<div class=\"pdf-content\">';\r\n    \r\n    paragraphs.forEach(paragraph => {\r\n      // 新增强制清理逻辑\r\n      const cleanParagraph = paragraph\r\n        .replace(/<span class=\"text-line\">/g, '')\r\n        .replace(/<\\/span>/g, '');\r\n      \r\n      const highlightedText = processTextWithHighlight(cleanParagraph);\r\n      htmlContent += `<p class=\"pdf-paragraph\">${highlightedText}</p>`;\r\n    });\r\n    \r\n    htmlContent += '</div>';\r\n    return htmlContent;\r\n  };\r\n\r\n  // 格式化文本用于鼠标跟随高亮模式\r\n  const formatTextForMouseFollow = (text) => {\r\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\r\n    \r\n    let htmlContent = '<div class=\"pdf-content mouse-follow-content\">';\r\n    \r\n    paragraphs.forEach(paragraph => {\r\n      // 将段落分割成行\r\n      const lines = paragraph.split('\\n').filter(line => line.trim());\r\n      htmlContent += `<p class=\"pdf-paragraph\" data-follow=\"true\" style=\"position: relative; line-height: 1.5;\">`;\r\n      \r\n      lines.forEach((line, i) => {\r\n        // 每行用span包裹\r\n        htmlContent += `<span class=\"text-line\" style=\"display: block;\">${line}</span>`;\r\n      });\r\n      \r\n      htmlContent += `</p>`;\r\n    });\r\n    \r\n    htmlContent += '</div>';\r\n    return htmlContent;\r\n  };\r\n\r\n  // 处理文本应用裸眼3D效果\r\n  const applyNakedEye3dEffect = (text) => {\r\n    // 分段落处理\r\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\r\n    \r\n    let htmlContent = '<div class=\"pdf-content naked-eye-3d-content\">';\r\n    \r\n    paragraphs.forEach(paragraph => {\r\n      // 清理可能存在的标签\r\n      const cleanParagraph = paragraph\r\n        .replace(/<span[^>]*>/g, '')\r\n        .replace(/<\\/span>/g, '');\r\n      \r\n      // 分词处理，为一小部分词添加3D效果\r\n      const words = cleanParagraph.split(/(\\s+|[,.!?，。！？])/);\r\n      let processedText = '';\r\n      \r\n      words.forEach(word => {\r\n        if (!word || /^\\s+$/.test(word) || /^[,.!?，。！？]$/.test(word)) {\r\n          // 保持空格和标点原样，但使其为白色\r\n          processedText += `<span class=\"normal-text\">${word}</span>`;\r\n          return;\r\n        }\r\n        \r\n        // 约20%的单词应用3D效果\r\n        if (Math.random() < 0.2) {\r\n          // 创建裸眼3D效果\r\n          processedText += `<span class=\"naked-eye-3d-text\">${word}</span>`;\r\n        } else {\r\n          // 非3D文字显示为白色\r\n          processedText += `<span class=\"normal-text\">${word}</span>`;\r\n        }\r\n      });\r\n      \r\n      // 包装成段落，应用ADHD友好的样式\r\n      htmlContent += `<p class=\"pdf-paragraph adhd-friendly\">${processedText}</p>`;\r\n    });\r\n    \r\n    htmlContent += '</div>';\r\n    return htmlContent;\r\n  };\r\n\r\n  // 添加裸眼3D样式\r\n  const addNakedEye3DStyles = () => {\r\n    // 避免重复添加\r\n    if (document.getElementById('naked-eye-3d-styles')) return;\r\n    \r\n    const style = document.createElement('style');\r\n    style.id = 'naked-eye-3d-styles';\r\n    style.textContent = `\r\n      /* 深色背景以确保白色文字可见 */\r\n      .naked-eye-3d-content {\r\n        background-color: #222;\r\n        padding: 20px;\r\n        border-radius: 8px;\r\n      }\r\n      \r\n      /* 普通文字（白色） */\r\n      .normal-text {\r\n        color: white;\r\n        display: inline-block;\r\n        margin: 0;\r\n        padding: 0;\r\n      }\r\n      \r\n      /* 3D文字基本样式 */\r\n      .naked-eye-3d-text {\r\n        position: relative;\r\n        display: inline-block;\r\n        transform-style: preserve-3d;\r\n        color: white;  /* 基础颜色也是白色 */\r\n      }\r\n      \r\n      /* 3D效果 - 红色偏移 */\r\n      .naked-eye-3d-text::before {\r\n        content: attr(data-text);\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        z-index: -1;\r\n        color: rgba(255, 0, 0, 0.8);\r\n        transform: translateX(-3px);\r\n      }\r\n      \r\n      /* 3D效果 - 青色偏移 */\r\n      .naked-eye-3d-text::after {\r\n        content: attr(data-text);\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        z-index: -1;\r\n        color: rgba(0, 255, 255, 0.8);\r\n        transform: translateX(3px);\r\n      }\r\n      \r\n      /* ADHD友好样式 */\r\n      .adhd-friendly {\r\n        font-size: 1.1em;\r\n        line-height: 1.8;\r\n        color: white;\r\n        padding: 15px 0;\r\n      }\r\n    `;\r\n    document.head.appendChild(style);\r\n  };\r\n\r\n  // 在裸眼3D模式初始化后处理元素\r\n  const initializeNakedEye3D = () => {\r\n    // 为裸眼3D文本元素添加文本内容作为data属性\r\n    document.querySelectorAll('.naked-eye-3d-text').forEach(el => {\r\n      el.setAttribute('data-text', el.textContent);\r\n    });\r\n    \r\n    // 确保深色背景已应用\r\n    applyDarkBackground();\r\n  };\r\n\r\n  // 在切换到裸眼3D模式时应用深色背景\r\n  const applyDarkBackground = () => {\r\n    const contentArea = document.querySelector('.page-content');\r\n    if (contentArea) {\r\n      contentArea.style.backgroundColor = '#222';\r\n    }\r\n  };\r\n\r\n  // 在离开裸眼3D模式时恢复背景\r\n  const restoreDarkBackground = () => {\r\n    const contentArea = document.querySelector('.page-content');\r\n    if (contentArea) {\r\n      contentArea.style.backgroundColor = '';\r\n    }\r\n  };\r\n\r\n  // 添加改进的3D文字样式\r\n  const addComfortable3DStyles = () => {\r\n    // 避免重复添加\r\n    if (document.getElementById('comfortable-3d-styles')) return;\r\n    \r\n    const style = document.createElement('style');\r\n    style.id = 'comfortable-3d-styles';\r\n    style.textContent = `\r\n      /* 深色背景 */\r\n      .comfortable-3d-content {\r\n        background-color: #222;\r\n        padding: 20px;\r\n        border-radius: 8px;\r\n      }\r\n      \r\n      /* 普通文字（白色） */\r\n      .normal-text {\r\n        color: white;\r\n        display: inline-block;\r\n        margin: 0;\r\n        padding: 0;\r\n      }\r\n      \r\n      /* 柔和浮雕效果 */\r\n      .emboss-3d-text {\r\n        display: inline-block;\r\n        color: #ff0000;\r\n        text-shadow: \r\n          -1px -1px 1px rgba(255,0,0,0.6),\r\n          1px 1px 1px rgba(255,0,0,0.6);\r\n        position: relative;\r\n        font-weight: bold;\r\n        margin: 0;\r\n        padding: 0;\r\n      }\r\n      \r\n      /* 悬浮效果 */\r\n      .float-3d-text {\r\n        display: inline-block;\r\n        color: #ff0000;\r\n        position: relative;\r\n        transform: translateY(-2px);\r\n        text-shadow: 0 4px 3px rgba(255,0,0,0.5);\r\n        margin: 0;\r\n        padding: 0;\r\n      }\r\n      \r\n      /* 渐变效果 */\r\n      .gradient-3d-text {\r\n        display: inline-block;\r\n        background: linear-gradient(to bottom, #ff0000 30%, #ff6666 100%);\r\n        -webkit-background-clip: text;\r\n        background-clip: text;\r\n        -webkit-text-fill-color: transparent;\r\n        text-fill-color: transparent;\r\n        text-shadow: 0px 2px 2px rgba(255,0,0,0.2);\r\n        font-weight: bold;\r\n        margin: 0;\r\n        padding: 0;\r\n      }\r\n      \r\n      /* ADHD友好样式 */\r\n      .adhd-friendly {\r\n        font-size: 1.1em;\r\n        line-height: 1.8;\r\n        color: white;\r\n        padding: 15px 0;\r\n      }\r\n    `;\r\n    document.head.appendChild(style);\r\n  };\r\n\r\n  // 处理文本应用多种柔和3D效果\r\n  const applyComfortable3dEffect = (text) => {\r\n    // 分段落处理\r\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\r\n    \r\n    let htmlContent = '<div class=\"pdf-content comfortable-3d-content\">';\r\n    \r\n    // 3D效果类型数组\r\n    const effectClasses = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\r\n    \r\n    paragraphs.forEach(paragraph => {\r\n      // 清理可能存在的标签\r\n      const cleanParagraph = paragraph\r\n        .replace(/<span[^>]*>/g, '')\r\n        .replace(/<\\/span>/g, '');\r\n      \r\n      // 分词处理\r\n      const words = cleanParagraph.split(/(\\s+|[,.!?，。！？])/);\r\n      let processedText = '';\r\n      \r\n      words.forEach(word => {\r\n        if (!word || /^\\s+$/.test(word) || /^[,.!?，。！？]$/.test(word)) {\r\n          // 保持空格和标点原样，但使其为白色\r\n          processedText += `<span class=\"normal-text\">${word}</span>`;\r\n          return;\r\n        }\r\n        \r\n        // 约20%的单词应用3D效果\r\n        if (Math.random() < 0.2) {\r\n          // 随机选择一种3D效果\r\n          const effectClass = effectClasses[Math.floor(Math.random() * effectClasses.length)];\r\n          processedText += `<span class=\"${effectClass}\">${word}</span>`;\r\n        } else {\r\n          // 非3D文字显示为白色\r\n          processedText += `<span class=\"normal-text\">${word}</span>`;\r\n        }\r\n      });\r\n      \r\n      // 包装成段落，应用ADHD友好的样式\r\n      htmlContent += `<p class=\"pdf-paragraph adhd-friendly\">${processedText}</p>`;\r\n    });\r\n    \r\n    htmlContent += '</div>';\r\n    return htmlContent;\r\n  };\r\n\r\n  // 添加闪读模式样式\r\n  const addFlashReadingStyles = () => {\r\n    if (document.getElementById('flash-reading-styles')) return;\r\n    \r\n    const style = document.createElement('style');\r\n    style.id = 'flash-reading-styles';\r\n    style.textContent = `\r\n      .flash-reading-container {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        justify-content: center;\r\n        height: 80vh;\r\n        width: 100%;\r\n        background-color: #222;\r\n        color: white;\r\n      }\r\n      \r\n      .flash-reading-display {\r\n        font-size: 2em;\r\n        min-height: 3em;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        text-align: center;\r\n        padding: 20px;\r\n        margin: 40px 0;\r\n        width: 80%;\r\n        max-width: 800px;\r\n        border-radius: 10px;\r\n        background-color: rgba(255,255,255,0.05);\r\n        transition: background-color 0.3s ease;\r\n      }\r\n      \r\n      @keyframes flash-in {\r\n        0% { opacity: 0; transform: scale(0.95); }\r\n        100% { opacity: 1; transform: scale(1); }\r\n      }\r\n      \r\n      .flash-reading-animate {\r\n        animation: flash-in 0.3s ease forwards;\r\n      }\r\n      \r\n      .flash-reading-controls {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        width: 80%;\r\n        max-width: 600px;\r\n        background-color: rgba(255,255,255,0.1);\r\n        padding: 20px;\r\n        border-radius: 10px;\r\n      }\r\n      \r\n      .flash-reading-slider-container {\r\n        width: 100%;\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        margin-bottom: 15px;\r\n      }\r\n      \r\n      .flash-reading-slider {\r\n        width: 100%;\r\n        margin: 10px 0;\r\n      }\r\n      \r\n      .flash-reading-buttons {\r\n        display: flex;\r\n        gap: 10px;\r\n        margin-top: 15px;\r\n      }\r\n      \r\n      .flash-reading-button {\r\n        padding: 8px 16px;\r\n        background-color: #4CAF50;\r\n        color: white;\r\n        border: none;\r\n        border-radius: 4px;\r\n        cursor: pointer;\r\n        font-size: 16px;\r\n      }\r\n      \r\n      .flash-reading-button:hover {\r\n        background-color: #3e8e41;\r\n      }\r\n      \r\n      .flash-reading-button.pause {\r\n        background-color: #f44336;\r\n      }\r\n      \r\n      .flash-reading-button.pause:hover {\r\n        background-color: #d32f2f;\r\n      }\r\n      \r\n      .flash-reading-stats {\r\n        margin-top: 15px;\r\n        font-size: 14px;\r\n        color: #aaa;\r\n      }\r\n    `;\r\n    document.head.appendChild(style);\r\n  };\r\n\r\n  // 将文本分割成句子\r\n  const splitTextIntoSentences = (text) => {\r\n    // 匹配任意标点符号\r\n    const punctuationPattern = /[,.!?，。！？；;，、]/g;\r\n    const sentences = [];\r\n    let lastIndex = 0;\r\n    \r\n    let match;\r\n    while ((match = punctuationPattern.exec(text)) !== null) {\r\n      const endIndex = match.index + 1; // 包含标点符号\r\n      const sentence = text.slice(lastIndex, endIndex).trim();\r\n      \r\n      if (sentence) {\r\n        sentences.push(sentence);\r\n      }\r\n      \r\n      lastIndex = endIndex;\r\n    }\r\n    \r\n    // 处理剩余的文本\r\n    if (lastIndex < text.length) {\r\n      const remainingText = text.slice(lastIndex).trim();\r\n      if (remainingText) {\r\n        sentences.push(remainingText);\r\n      }\r\n    }\r\n    \r\n    return sentences;\r\n  };\r\n\r\n  // 创建闪读模式的HTML结构\r\n  const createFlashReadingContent = (text) => {\r\n    const sentences = splitTextIntoSentences(text);\r\n    \r\n    window.flashReader = {\r\n      sentences: sentences,\r\n      currentIndex: 0,\r\n      isPlaying: false,\r\n      speed: 1000,\r\n      intervalId: null\r\n    };\r\n    \r\n    let htmlContent = `\r\n      <div class=\"flash-reading-container\">\r\n        <div id=\"flash-reading-display\" class=\"flash-reading-display\">\r\n          点击\"开始\"按钮开始闪读\r\n        </div>\r\n        \r\n        <div class=\"flash-reading-controls\">\r\n          <div class=\"flash-reading-slider-container\">\r\n            <label for=\"flash-reading-speed\">\r\n              速度: <span id=\"flash-reading-speed-value\">1000ms</span>\r\n            </label>\r\n            <input \r\n              type=\"range\" \r\n              id=\"flash-reading-speed\" \r\n              class=\"flash-reading-slider\" \r\n              min=\"200\" \r\n              max=\"3000\" \r\n              step=\"100\" \r\n              value=\"1000\"\r\n            >\r\n          </div>\r\n          \r\n          <div class=\"flash-reading-buttons\">\r\n            <button id=\"flash-reading-start\" class=\"flash-reading-button\">开始</button>\r\n            <button id=\"flash-reading-pause\" class=\"flash-reading-button pause\" disabled>暂停</button>\r\n            <button id=\"flash-reading-prev\" class=\"flash-reading-button\">上一句</button>\r\n            <button id=\"flash-reading-next\" class=\"flash-reading-button\">下一句</button>\r\n          </div>\r\n          \r\n          <div class=\"flash-reading-stats\">\r\n            进度: <span id=\"flash-reading-progress\">0/${sentences.length}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n    \r\n    return htmlContent;\r\n  };\r\n\r\n  // 初始化闪读模式的控制逻辑\r\n  const initializeFlashReading = () => {\r\n    const displayEl = document.getElementById('flash-reading-display');\r\n    const speedSlider = document.getElementById('flash-reading-speed');\r\n    const speedValue = document.getElementById('flash-reading-speed-value');\r\n    const startBtn = document.getElementById('flash-reading-start');\r\n    const pauseBtn = document.getElementById('flash-reading-pause');\r\n    const prevBtn = document.getElementById('flash-reading-prev');\r\n    const nextBtn = document.getElementById('flash-reading-next');\r\n    const progressEl = document.getElementById('flash-reading-progress');\r\n    \r\n    if (!displayEl || !speedSlider || !speedValue || !startBtn || \r\n        !pauseBtn || !prevBtn || !nextBtn || !progressEl) {\r\n      console.error('闪读模式初始化失败：缺少必要的DOM元素');\r\n      return;\r\n    }\r\n    \r\n    const reader = window.flashReader;\r\n    if (!reader || !Array.isArray(reader.sentences) || reader.sentences.length === 0) {\r\n      displayEl.textContent = '没有可用的文本内容';\r\n      return;\r\n    }\r\n    \r\n    const updateProgress = () => {\r\n      progressEl.textContent = `${reader.currentIndex + 1}/${reader.sentences.length}`;\r\n    };\r\n    \r\n    const displayCurrentSentence = () => {\r\n      if (reader.currentIndex >= 0 && reader.currentIndex < reader.sentences.length) {\r\n        displayEl.classList.remove('flash-reading-animate');\r\n        displayEl.textContent = reader.sentences[reader.currentIndex];\r\n        void displayEl.offsetWidth;\r\n        displayEl.classList.add('flash-reading-animate');\r\n        updateProgress();\r\n      }\r\n    };\r\n    \r\n    const advanceToNextSentence = () => {\r\n      if (reader.currentIndex < reader.sentences.length - 1) {\r\n        reader.currentIndex++;\r\n        displayCurrentSentence();\r\n      } else {\r\n        stopFlashReading();\r\n        displayEl.textContent = '阅读完成！';\r\n      }\r\n    };\r\n    \r\n    const startFlashReading = () => {\r\n      if (reader.isPlaying) return;\r\n      \r\n      reader.isPlaying = true;\r\n      startBtn.disabled = true;\r\n      pauseBtn.disabled = false;\r\n      \r\n      displayCurrentSentence();\r\n      \r\n      reader.intervalId = setInterval(() => {\r\n        advanceToNextSentence();\r\n      }, reader.speed);\r\n    };\r\n    \r\n    const pauseFlashReading = () => {\r\n      if (!reader.isPlaying) return;\r\n      \r\n      if (reader.intervalId) {\r\n        clearInterval(reader.intervalId);\r\n        reader.intervalId = null;\r\n      }\r\n      \r\n      reader.isPlaying = false;\r\n      startBtn.disabled = false;\r\n      pauseBtn.disabled = true;\r\n    };\r\n    \r\n    const stopFlashReading = () => {\r\n      if (reader.intervalId) {\r\n        clearInterval(reader.intervalId);\r\n        reader.intervalId = null;\r\n      }\r\n      \r\n      reader.isPlaying = false;\r\n      startBtn.disabled = false;\r\n      pauseBtn.disabled = true;\r\n    };\r\n    \r\n    const showPreviousSentence = () => {\r\n      if (reader.currentIndex > 0) {\r\n        pauseFlashReading();\r\n        reader.currentIndex--;\r\n        displayCurrentSentence();\r\n      }\r\n    };\r\n    \r\n    const showNextSentence = () => {\r\n      if (reader.currentIndex < reader.sentences.length - 1) {\r\n        pauseFlashReading();\r\n        reader.currentIndex++;\r\n        displayCurrentSentence();\r\n      }\r\n    };\r\n    \r\n    speedSlider.addEventListener('input', function() {\r\n      const newSpeed = parseInt(this.value);\r\n      reader.speed = newSpeed;\r\n      speedValue.textContent = `${newSpeed}ms`;\r\n      \r\n      if (reader.isPlaying) {\r\n        clearInterval(reader.intervalId);\r\n        reader.intervalId = setInterval(() => {\r\n          advanceToNextSentence();\r\n        }, reader.speed);\r\n      }\r\n    });\r\n    \r\n    startBtn.addEventListener('click', startFlashReading);\r\n    pauseBtn.addEventListener('click', pauseFlashReading);\r\n    prevBtn.addEventListener('click', showPreviousSentence);\r\n    nextBtn.addEventListener('click', showNextSentence);\r\n    \r\n    // 添加清理方法，供外部调用\r\n    window.flashReader.cleanup = function() {\r\n      if (reader.intervalId) {\r\n        clearInterval(reader.intervalId);\r\n        reader.intervalId = null;\r\n      }\r\n      reader.isPlaying = false;\r\n    };\r\n    \r\n    updateProgress();\r\n  };\r\n\r\n  // 渲染UI\r\n  return (\r\n    <div className=\"app-container\">\r\n      <div className=\"header\">\r\n        <h1>ADHD阅读辅助工具</h1>\r\n        <div className=\"file-upload\">\r\n          <input\r\n            type=\"file\"\r\n            accept=\".pdf,.txt\"\r\n            onChange={handleFileUpload}\r\n            ref={fileRef}\r\n          />\r\n          <button onClick={() => fileRef.current.click()}>\r\n            上传文件\r\n          </button>\r\n        </div>\r\n        <div className=\"reading-modes\">\r\n          <select \r\n            value={readingMode} \r\n            onChange={(e) => setReadingMode(e.target.value)}\r\n          >\r\n            <option value=\"normal\">普通阅读</option>\r\n            <option value=\"static\">静态着色</option>\r\n            <option value=\"follow-mouse\">鼠标跟随</option>\r\n            <option value=\"rhythm\">节奏阅读</option>\r\n            <option value=\"naked-eye-3d\">裸眼3D</option>\r\n            <option value=\"comfortable-3d\">舒适3D</option>\r\n            <option value=\"flash-reading\">闪读模式</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"reader-container\" ref={readerContainerRef}>\r\n        {loading ? (\r\n          <div className=\"loading\">加载中...</div>\r\n        ) : totalPages > 0 ? (\r\n          <div className=\"pdf-viewer\">\r\n            <div className=\"page-controls\">\r\n              <button \r\n                disabled={currentPage <= 1}\r\n                onClick={() => changePage(-1)}\r\n              >\r\n                上一页\r\n              </button>\r\n              <span>\r\n                {currentPage} / {totalPages}\r\n              </span>\r\n              <button \r\n                disabled={currentPage >= totalPages}\r\n                onClick={() => changePage(1)}\r\n              >\r\n                下一页\r\n              </button>\r\n            </div>\r\n            <div \r\n              className=\"page-content\"\r\n              dangerouslySetInnerHTML={{ __html: content }}\r\n            />\r\n          </div>\r\n        ) : (\r\n          <div className=\"upload-prompt\">\r\n            <p>请上传PDF或TXT文件开始阅读</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":"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O,CAAClC,IAAI,CAACkC,IAAI,CAAC,IAAI,cAAc,CAAClC,IAAI,CAACkC,IAAI,CAAC,EAAE;UAC5D;UACA+F,aAAa,IAAI,6BAA6B/F,IAAI,SAAS;UAC3D;QACF;;QAEA;QACA,IAAIjN,IAAI,CAACkN,MAAM,CAAC,CAAC,GAAG,GAAG,EAAE;UACvB;UACA,MAAMkG,WAAW,GAAGD,aAAa,CAACnT,IAAI,CAACqT,KAAK,CAACrT,IAAI,CAACkN,MAAM,CAAC,CAAC,GAAGiG,aAAa,CAACvW,MAAM,CAAC,CAAC;UACnFoW,aAAa,IAAI,gBAAgBI,WAAW,KAAKnG,IAAI,SAAS;QAChE,CAAC,MAAM;UACL;UACA+F,aAAa,IAAI,6BAA6B/F,IAAI,SAAS;QAC7D;MACF,CAAC,CAAC;;MAEF;MACArB,WAAW,IAAI,0CAA0CoH,aAAa,MAAM;IAC9E,CAAC,CAAC;IAEFpH,WAAW,IAAI,QAAQ;IACvB,OAAOA,WAAW;EACpB,CAAC;;EAED;EACA,MAAM+F,qBAAqB,GAAGA,CAAA,KAAM;IAClC,IAAInV,QAAQ,CAAC+E,cAAc,CAAC,sBAAsB,CAAC,EAAE;IAErD,MAAMxD,KAAK,GAAGvB,QAAQ,CAACgB,aAAa,CAAC,OAAO,CAAC;IAC7CO,KAAK,CAACgB,EAAE,GAAG,sBAAsB;IACjChB,KAAK,CAACN,WAAW,GAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}