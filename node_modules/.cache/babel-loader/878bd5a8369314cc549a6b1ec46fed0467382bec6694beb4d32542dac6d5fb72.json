{"ast":null,"code":"var _jsxFileName = \"D:\\\\adhd-read-helper\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 添加全局事件跟踪对象\nwindow.eventTracker = window.eventTracker || {\n  mouseFollowHandlers: []\n};\n\n// 自动阅读器全局对象\nwindow.autoReader = {\n  charPositions: [],\n  intervalId: null,\n  currentIndex: 0,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false,\n  cleanup: null\n};\n\n// 添加新的节奏阅读模式代码\n// 全局变量，确保在页面切换后仍然保持状态\nwindow.rhythmReaderGlobal = window.rhythmReaderGlobal || {\n  active: false,\n  speed: 300\n};\n\n// 节奏阅读模式 - 彻底修复版\n(function () {\n  console.log(\"节奏阅读模式 - 彻底修复版初始化\");\n\n  // 核心状态变量\n  let isActive = false; // 是否处于激活状态\n  let readingInterval = null; // 计时器引用\n  let charElements = []; // 所有字符元素\n  let currentIndex = 0; // 当前读取位置\n  let readIndices = new Set(); // 已读位置集合\n  let readingSpeed = 300; // 读取速度(ms)\n\n  // 添加固定的控制按钮\n  function addControlButton() {\n    // 先移除可能存在的按钮\n    removeControlButton();\n    const button = document.createElement('button');\n    button.id = 'rhythm-control-button';\n    button.textContent = \"节奏阅读: 暂停/继续\";\n    button.style.cssText = `\n      position: fixed;\n      bottom: 20px;\n      right: 20px;\n      background-color: #4CAF50;\n      color: white;\n      border: none;\n      border-radius: 5px;\n      padding: 10px 15px;\n      font-size: 16px;\n      font-weight: bold;\n      cursor: pointer;\n      z-index: 999999;\n      box-shadow: 0 4px 8px rgba(0,0,0,0.3);\n    `;\n    button.onclick = handleControlButtonClick;\n    document.body.appendChild(button);\n    console.log(\"控制按钮已添加到页面\");\n    return button;\n  }\n\n  // 移除控制按钮\n  function removeControlButton() {\n    const button = document.getElementById('rhythm-control-button');\n    if (button) {\n      button.remove();\n      console.log(\"已移除控制按钮\");\n    }\n  }\n\n  // 控制按钮点击处理\n  function handleControlButtonClick() {\n    const button = document.getElementById('rhythm-control-button');\n    if (!isActive) {\n      // 如果未激活，启动节奏阅读\n      console.log(\"按钮点击: 启动节奏阅读\");\n      startReading();\n    } else if (readingInterval) {\n      // 如果正在运行，暂停它\n      console.log(\"按钮点击: 暂停节奏阅读\");\n      pauseReading();\n      if (button) {\n        button.style.backgroundColor = '#2196F3';\n        button.textContent = \"节奏阅读: 已暂停 - 点击继续\";\n      }\n    } else {\n      // 如果已暂停，继续读取\n      console.log(\"按钮点击: 继续节奏阅读\");\n      resumeReading();\n      if (button) {\n        button.style.backgroundColor = '#4CAF50';\n        button.textContent = \"节奏阅读: 暂停/继续\";\n      }\n    }\n  }\n\n  // 显示通知\n  function showNotification(message) {\n    console.log(\"通知:\", message);\n    const notification = document.createElement('div');\n    notification.textContent = message;\n    notification.style.cssText = `\n      position: fixed;\n      top: 20px;\n      left: 50%;\n      transform: translateX(-50%);\n      background: rgba(0,0,0,0.8);\n      color: white;\n      padding: 10px 20px;\n      border-radius: 5px;\n      font-size: 14px;\n      z-index: 999999;\n      box-shadow: 0 2px 8px rgba(0,0,0,0.3);\n    `;\n    document.body.appendChild(notification);\n    setTimeout(() => {\n      notification.style.opacity = '0';\n      notification.style.transition = 'opacity 0.5s';\n      setTimeout(() => notification.remove(), 500);\n    }, 2000);\n  }\n\n  // 清理之前的阅读状态 - 彻底清理\n  function cleanupReading() {\n    console.log(\"清理阅读状态...\");\n\n    // 清除计时器\n    if (readingInterval) {\n      clearInterval(readingInterval);\n      readingInterval = null;\n    }\n\n    // 恢复所有的文本节点\n    const spans = document.querySelectorAll('.rhythm-char');\n    if (spans.length > 0) {\n      console.log(`清理 ${spans.length} 个字符span`);\n      try {\n        // 按父节点分组\n        const parentMap = new Map();\n        spans.forEach(span => {\n          if (!span.parentNode) return;\n          if (!parentMap.has(span.parentNode)) {\n            parentMap.set(span.parentNode, []);\n          }\n          parentMap.get(span.parentNode).push(span);\n        });\n\n        // 恢复每个父节点的文本\n        parentMap.forEach((childSpans, parent) => {\n          try {\n            // 按索引排序\n            childSpans.sort((a, b) => {\n              return parseInt(a.dataset.index || 0) - parseInt(b.dataset.index || 0);\n            });\n\n            // 合并文本\n            const text = childSpans.map(span => span.textContent).join('');\n            const textNode = document.createTextNode(text);\n\n            // 替换第一个span，并移除其他span\n            parent.replaceChild(textNode, childSpans[0]);\n            for (let i = 1; i < childSpans.length; i++) {\n              if (childSpans[i].parentNode === parent) {\n                parent.removeChild(childSpans[i]);\n              }\n            }\n          } catch (e) {\n            console.error(\"恢复文本节点错误:\", e);\n          }\n        });\n      } catch (e) {\n        console.error(\"清理过程中出错:\", e);\n      }\n    }\n\n    // 重置所有状态\n    charElements = [];\n    currentIndex = 0;\n    readIndices = new Set();\n    isActive = false;\n    console.log(\"阅读状态已完全清理\");\n  }\n\n  // 启动阅读功能\n  function startReading() {\n    console.log(\"开始启动节奏阅读...\");\n\n    // 确保之前的状态已清理\n    cleanupReading();\n\n    // 查找内容容器\n    const contentContainer = document.querySelector('.pdf-content') || document.querySelector('[class*=\"pdf\"]') || document.querySelector('article') || document.querySelector('main') || document.body;\n    console.log(`使用内容容器: ${contentContainer.tagName} ${contentContainer.id || contentContainer.className || ''}`);\n\n    // 查找所有文本节点\n    const textNodes = [];\n    findTextNodes(contentContainer, textNodes);\n    console.log(`找到 ${textNodes.length} 个文本节点`);\n    if (textNodes.length === 0) {\n      showNotification(\"错误: 未找到文本内容\");\n      return;\n    }\n\n    // 处理文本节点\n    try {\n      let processedCount = 0;\n      textNodes.forEach(node => {\n        const text = node.nodeValue;\n        if (!text) return;\n        const fragment = document.createDocumentFragment();\n        for (let i = 0; i < text.length; i++) {\n          const span = document.createElement('span');\n          span.textContent = text[i];\n          span.className = 'rhythm-char';\n          span.dataset.index = charElements.length;\n          if (text[i].trim() === '') {\n            span.dataset.whitespace = 'true';\n          }\n          span.style.cssText = `\n            display: inline;\n            margin: 0;\n            padding: 0;\n            border: none;\n            background-color: transparent;\n          `;\n          fragment.appendChild(span);\n          charElements.push(span);\n        }\n        if (node.parentNode) {\n          node.parentNode.replaceChild(fragment, node);\n          processedCount++;\n        }\n      });\n      console.log(`成功处理了 ${processedCount}/${textNodes.length} 个文本节点`);\n      console.log(`创建了 ${charElements.length} 个字符span`);\n    } catch (error) {\n      console.error(\"处理文本节点时出错:\", error);\n      showNotification(\"处理内容时出错\");\n      return;\n    }\n    if (charElements.length === 0) {\n      showNotification(\"内容处理失败\");\n      return;\n    }\n\n    // 设置为活动状态\n    isActive = true;\n\n    // 重置索引和已读集合\n    currentIndex = 0;\n    readIndices = new Set();\n\n    // 更新显示\n    updateDisplay();\n\n    // 滚动到开始位置\n    scrollToCurrentChar();\n\n    // 启动读取间隔\n    readingInterval = setInterval(moveToNextChar, readingSpeed);\n    showNotification(\"节奏阅读已启动\");\n\n    // 更新控制按钮\n    const button = document.getElementById('rhythm-control-button');\n    if (button) {\n      button.style.backgroundColor = '#4CAF50';\n      button.textContent = \"节奏阅读: 暂停/继续\";\n    } else {\n      // 如果按钮不存在，添加它\n      addControlButton();\n    }\n  }\n\n  // 暂停阅读\n  function pauseReading() {\n    if (!readingInterval) return;\n    clearInterval(readingInterval);\n    readingInterval = null;\n    showNotification(\"节奏阅读已暂停\");\n  }\n\n  // 继续阅读\n  function resumeReading() {\n    if (!isActive || readingInterval) return;\n    readingInterval = setInterval(moveToNextChar, readingSpeed);\n    showNotification(\"节奏阅读已继续\");\n  }\n\n  // 停止阅读\n  function stopReading() {\n    if (!isActive) return;\n    console.log(\"停止节奏阅读...\");\n\n    // 清理所有状态\n    cleanupReading();\n\n    // 移除控制按钮\n    removeControlButton();\n    showNotification(\"节奏阅读已停止\");\n  }\n\n  // 查找文本节点\n  function findTextNodes(element, collection) {\n    // 排除这些标签\n    const excludeTags = ['BUTTON', 'INPUT', 'SELECT', 'TEXTAREA', 'SCRIPT', 'STYLE', 'NAV', 'HEADER', 'FOOTER'];\n    if (excludeTags.includes(element.tagName)) return;\n    for (let i = 0; i < element.childNodes.length; i++) {\n      const node = element.childNodes[i];\n      if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() !== '') {\n        collection.push(node);\n      } else if (node.nodeType === Node.ELEMENT_NODE && !excludeTags.includes(node.tagName)) {\n        findTextNodes(node, collection);\n      }\n    }\n  }\n\n  // 更新显示\n  function updateDisplay() {\n    charElements.forEach((span, index) => {\n      if (index === currentIndex) {\n        span.style.color = 'green';\n        span.style.fontWeight = 'bold';\n      } else if (readIndices.has(index)) {\n        span.style.color = 'white';\n      } else {\n        span.style.color = 'rgba(200, 200, 200, 0.3)';\n      }\n    });\n  }\n\n  // 移动到下一个字符\n  function moveToNextChar() {\n    if (!isActive || charElements.length === 0) return;\n    readIndices.add(currentIndex);\n    do {\n      currentIndex++;\n      if (currentIndex >= charElements.length) {\n        // 已到达文本末尾\n        clearInterval(readingInterval);\n        readingInterval = null;\n        showNotification(\"已读完所有内容\");\n        return;\n      }\n    } while (currentIndex < charElements.length && charElements[currentIndex] && charElements[currentIndex].dataset.whitespace === 'true');\n    updateDisplay();\n    scrollToCurrentChar();\n  }\n\n  // 滚动到当前字符\n  function scrollToCurrentChar() {\n    const char = charElements[currentIndex];\n    if (!char) return;\n    const rect = char.getBoundingClientRect();\n    window.scrollTo({\n      top: window.scrollY + rect.top - window.innerHeight / 3,\n      behavior: 'smooth'\n    });\n  }\n\n  // 处理模式切换\n  function handleModeChange(mode) {\n    console.log(`模式变更为: ${mode}`);\n    const isRhythmMode = mode === 'rhythm' || mode === 'rhythmReading';\n    if (!isRhythmMode && isActive) {\n      // 从节奏阅读切换到其他模式\n      console.log(\"从节奏阅读切换到其他模式，停止节奏阅读\");\n      stopReading();\n    } else if (isRhythmMode) {\n      // 切换到节奏阅读模式\n      console.log(\"切换到节奏阅读模式\");\n      addControlButton();\n\n      // 如果不处于活动状态，启动它\n      if (!isActive) {\n        console.log(\"自动启动节奏阅读...\");\n        setTimeout(startReading, 300);\n      }\n    }\n  }\n\n  // 重写模式切换函数\n  const originalReadingModeChanged = window.readingModeChanged;\n  window.readingModeChanged = function (mode) {\n    // 调用原始函数\n    if (typeof originalReadingModeChanged === 'function') {\n      try {\n        originalReadingModeChanged(mode);\n      } catch (e) {\n        console.error(\"原始模式函数错误:\", e);\n      }\n    }\n\n    // 处理模式变化\n    handleModeChange(mode);\n  };\n\n  // 监听选择器变化\n  function setupSelectorListeners() {\n    // 找到所有选择器\n    const selects = document.querySelectorAll('select');\n    console.log(`找到 ${selects.length} 个选择器`);\n    selects.forEach(select => {\n      // 重新绑定事件监听器\n      select.addEventListener('change', function (e) {\n        const value = this.value || '';\n        console.log(`选择器值变化为: \"${value}\"`);\n        if (value.includes('rhythm') || value.includes('节奏')) {\n          // 用户选择了节奏阅读模式\n          addControlButton();\n          setTimeout(startReading, 200);\n        } else if (isActive) {\n          // 用户选择了其他模式\n          stopReading();\n        }\n      });\n\n      // 检查当前值\n      const currentValue = select.value || '';\n      if (currentValue.includes('rhythm') || currentValue.includes('节奏')) {\n        console.log(`选择器当前值 \"${currentValue}\" 匹配节奏阅读模式`);\n        addControlButton();\n      }\n    });\n  }\n\n  // 添加测试按钮\n  function addTestButton() {\n    const button = document.createElement('button');\n    button.textContent = \"测试节奏阅读\";\n    button.style.cssText = `\n      position: fixed;\n      top: 10px;\n      right: 10px;\n      z-index: 999999;\n      background-color: #ff9800;\n      color: white;\n      border: none;\n      border-radius: 4px;\n      padding: 8px 12px;\n      font-size: 14px;\n      cursor: pointer;\n      box-shadow: 0 2px 5px rgba(0,0,0,0.3);\n    `;\n    button.onclick = function () {\n      console.log(\"点击测试按钮\");\n      if (!isActive) {\n        this.textContent = \"暂停节奏阅读\";\n        startReading();\n      } else if (readingInterval) {\n        this.textContent = \"继续节奏阅读\";\n        pauseReading();\n      } else {\n        this.textContent = \"暂停节奏阅读\";\n        resumeReading();\n      }\n    };\n    document.body.appendChild(button);\n  }\n\n  // 初始化函数\n  function initialize() {\n    console.log(\"初始化节奏阅读组件...\");\n\n    // 确保之前的状态已清理\n    cleanupReading();\n\n    // 设置选择器监听\n    setupSelectorListeners();\n\n    // 添加测试按钮\n    addTestButton();\n\n    // 检查当前是否已经是节奏阅读模式\n    setTimeout(function () {\n      const selects = document.querySelectorAll('select');\n      for (const select of selects) {\n        const value = (select.value || '').toLowerCase();\n        if (value.includes('rhythm') || value.includes('节奏')) {\n          console.log(\"检测到当前模式为节奏阅读，自动启动\");\n          addControlButton();\n          setTimeout(startReading, 300);\n          break;\n        }\n      }\n    }, 500);\n  }\n\n  // 在DOM加载后初始化\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initialize);\n  } else {\n    initialize();\n  }\n\n  // 暴露公共API\n  window.rhythmReader = {\n    start: startReading,\n    pause: pauseReading,\n    resume: resumeReading,\n    stop: stopReading\n  };\n  console.log(\"节奏阅读模式初始化完成 - 彻底修复版\");\n})();\n\n// 定义一个全局函数用于从应用代码中启动节奏阅读\nwindow.activateRhythmReadingMode = function () {\n  console.log(\"尝试从应用代码中启动节奏阅读模式\");\n  if (window.rhythmReader) {\n    if (window.rhythmReader.active) {\n      console.log(\"节奏阅读模式已经在运行\");\n    } else {\n      window.rhythmReader.start();\n    }\n  } else {\n    console.error(\"节奏阅读模式未初始化\");\n    alert(\"无法启动节奏阅读模式：组件未初始化\");\n  }\n};\n\n// 更新初始化函数\nconst initializeRhythmReading = () => {\n  // 不再自动初始化，而是等待用户选择\n  console.log(\"节奏阅读模式准备就绪，等待用户选择\");\n};\n\n// 更新启动函数\nconst startRhythmReading = () => {\n  if (window.rhythmReader && typeof window.rhythmReader.start === 'function') {\n    window.rhythmReader.start();\n  }\n};\nconst App = () => {\n  _s();\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  const [isTableOfContents, setIsTableOfContents] = useState(false);\n\n  // 实现缺失的函数\n  // 应用深色背景\n  const applyDarkBackground = () => {\n    document.body.classList.add('dark-background');\n\n    // 添加必要的CSS样式\n    if (!document.getElementById('dark-background-style')) {\n      const style = document.createElement('style');\n      style.id = 'dark-background-style';\n      style.textContent = `\n        .dark-background {\n          background-color: #000 !important;\n        }\n        .dark-background .sidebar {\n          background: linear-gradient(145deg, #4834d4, #341f9e) !important;\n        }\n        .dark-background .page-content {\n          background-color: #000 !important;\n        }\n        .dark-background .main-content {\n          background-color: #000 !important;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 恢复正常背景\n  const restoreDarkBackground = () => {\n    document.body.classList.remove('dark-background');\n  };\n\n  // 添加裸眼3D样式\n  const addNakedEye3DStyles = () => {\n    if (!document.getElementById('naked-eye-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'naked-eye-3d-style';\n      style.textContent = `\n        .naked-eye-3d-container {\n          position: relative;\n          perspective: 800px;\n          width: 100%;\n        }\n        \n        .naked-eye-3d-text {\n          display: inline-block;\n          animation: float 3s ease-in-out infinite;\n          text-shadow: 0 0 5px rgba(255,255,255,0.3);\n          padding: 0 4px;\n          color: white;\n          filter: drop-shadow(0 0 5px rgba(120, 220, 255, 0.6));\n        }\n        \n        @keyframes float {\n          0% { transform: translateZ(0px); }\n          50% { transform: translateZ(20px); }\n          100% { transform: translateZ(0px); }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 添加舒适3D样式\n  const addComfortable3DStyles = () => {\n    if (!document.getElementById('comfortable-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'comfortable-3d-style';\n      style.textContent = `\n        .emboss-3d-text {\n          color: #fff;\n          text-shadow: \n            1px 1px 1px rgba(0,0,0,0.5),\n            -1px -1px 1px rgba(255,255,255,0.5);\n          letter-spacing: 1.5px;\n          font-weight: 500;\n        }\n        \n        .float-3d-text {\n          display: inline-block;\n          transform-style: preserve-3d;\n          transform: perspective(500px) translateZ(10px);\n          text-shadow: 0 2px 5px rgba(0,0,0,0.5);\n        }\n        \n        .gradient-3d-text {\n          display: inline-block;\n          background: linear-gradient(to bottom, #fff, #aaa);\n          -webkit-background-clip: text;\n          -webkit-text-fill-color: transparent;\n          text-shadow: 0 2px 4px rgba(0,0,0,0.3);\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 添加闪读样式\n  const addFlashReadingStyles = () => {\n    if (!document.getElementById('flash-reading-style')) {\n      const style = document.createElement('style');\n      style.id = 'flash-reading-style';\n      style.textContent = `\n        .flash-reading-container {\n          position: relative;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          z-index: 1000;\n          padding: 20px;\n        }\n        \n        .flash-reading-display-wrapper {\n          position: relative;\n          margin: 40px 0;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        \n        .flash-reading-display {\n          font-size: 36px;\n          font-weight: bold;\n          text-align: center;\n          color: white;\n          min-height: 80px;\n          max-width: 90%;\n          padding: 20px 40px;\n          position: relative; /* 允许绝对定位的覆盖层 */\n          z-index: 2;\n        }\n        \n        .flash-reading-cover {\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(128, 128, 128, 0.6); /* 灰色遮罩 */\n          border-radius: 8px;\n          z-index: 1; /* 确保在文本后面 */\n        }\n        \n        .flash-reading-controls {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          gap: 20px;\n          margin-bottom: 20px;\n          width: 100%;\n        }\n        \n        .flash-reading-buttons {\n          display: flex;\n          gap: 10px;\n          flex-wrap: wrap;\n          justify-content: center;\n        }\n        \n        .flash-reading-speed {\n          display: flex;\n          align-items: center;\n          color: white;\n          width: 80%;\n          max-width: 400px;\n          gap: 10px;\n        }\n        \n        .flash-reading-slider {\n          flex: 1;\n          height: 8px;\n          appearance: none;\n          background: #555;\n          border-radius: 4px;\n          outline: none;\n        }\n        \n        .flash-reading-slider::-webkit-slider-thumb {\n          appearance: none;\n          width: 20px;\n          height: 20px;\n          border-radius: 50%;\n          background: #6c5ce7;\n          cursor: pointer;\n        }\n        \n        .flash-reading-btn {\n          padding: 10px 20px;\n          border: none;\n          border-radius: 4px;\n          background-color: #6c5ce7;\n          color: white;\n          font-size: 16px;\n          cursor: pointer;\n          transition: background-color 0.2s;\n        }\n        \n        .flash-reading-btn:hover {\n          background-color: #5344c0;\n        }\n        \n        .flash-reading-btn:disabled {\n          background-color: #aaa;\n          cursor: not-allowed;\n        }\n        \n        .flash-reading-progress {\n          color: white;\n          font-size: 14px;\n          margin-top: 10px;\n        }\n        .flash-reading-speed-note {\n          font-size: 12px;\n          color: #ccc;\n          margin-left: 5px;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 初始化闪读模式\n  const initializeFlashReading = () => {\n    // 添加样式\n    addFlashReadingStyles();\n    const sentences = window.flashReadingSentences;\n    if (!sentences || !Array.isArray(sentences) || sentences.length === 0) {\n      console.error('闪读模式: 未找到句子数据');\n      return;\n    }\n\n    // 获取全局UI元素\n    const display = document.getElementById('flash-reading-display');\n    const speedSlider = document.getElementById('flash-reading-speed');\n    const speedValue = document.getElementById('flash-reading-speed-value');\n    const playButton = document.getElementById('flash-reading-play');\n    const pauseButton = document.getElementById('flash-reading-pause');\n    const stopButton = document.getElementById('flash-reading-stop');\n    const prevButton = document.getElementById('flash-reading-prev-sentence');\n    const nextButton = document.getElementById('flash-reading-next-sentence');\n    const progress = document.getElementById('flash-reading-progress');\n    const cover = document.querySelector('.flash-reading-cover');\n    if (!display || !speedSlider || !speedValue || !playButton || !pauseButton || !stopButton || !prevButton || !nextButton || !progress || !cover) {\n      console.error('闪读模式: 未找到UI元素');\n      return;\n    }\n\n    // 创建闪读控制器\n    window.flashReader = {\n      sentences: sentences,\n      currentIndex: 0,\n      interval: null,\n      speed: parseInt(speedSlider.value),\n      isPlaying: false,\n      // 开始闪读\n      start() {\n        if (this.interval) {\n          clearInterval(this.interval);\n        }\n        this.isPlaying = true;\n        playButton.disabled = true;\n        pauseButton.disabled = false;\n        progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n\n        // 显示当前句子\n        this.displayCurrentSentence();\n\n        // 设置闪读间隔\n        this.interval = setInterval(() => {\n          this.currentIndex++;\n          if (this.currentIndex >= this.sentences.length) {\n            this.stop();\n            display.textContent = '阅读完成';\n            return;\n          }\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }, this.speed);\n      },\n      // 显示当前句子\n      displayCurrentSentence() {\n        if (this.currentIndex < this.sentences.length) {\n          const currentSentence = this.sentences[this.currentIndex];\n          display.textContent = currentSentence;\n          display.style.color = 'white'; // 确保文本为白色\n\n          // 调整背景以适应内容\n          setTimeout(() => {\n            const displayRect = display.getBoundingClientRect();\n            // 确保覆盖层完全包裹文本\n            cover.style.width = `${displayRect.width}px`;\n            cover.style.height = `${displayRect.height}px`;\n          }, 10);\n        }\n      },\n      // 暂停闪读\n      pause() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n      },\n      // 停止闪读\n      stop() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        this.currentIndex = 0;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n        display.textContent = '准备开始';\n        progress.textContent = `进度：0 / ${this.sentences.length}`; // 重置进度\n      },\n      // 更新速度\n      updateSpeed(newSpeed) {\n        this.speed = newSpeed;\n        speedValue.textContent = `${newSpeed} ms`;\n\n        // 保存速度设置到本地存储\n        localStorage.setItem('flash-reading-speed', newSpeed);\n\n        // 如果正在播放，重新开始以应用新速度\n        if (this.isPlaying) {\n          clearInterval(this.interval);\n          this.start(); // 直接调用start方法重新开始\n        }\n      },\n      // 返回上一句\n      prevSentence() {\n        if (this.currentIndex > 0) {\n          this.currentIndex--;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n      // 跳到下一句\n      nextSentence() {\n        if (this.currentIndex < this.sentences.length - 1) {\n          this.currentIndex++;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n      // 清理资源\n      cleanup() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        this.currentIndex = 0;\n      }\n    };\n\n    // 添加事件监听器\n    playButton.addEventListener('click', () => {\n      window.flashReader.start();\n    });\n    pauseButton.addEventListener('click', () => {\n      window.flashReader.pause();\n    });\n    stopButton.addEventListener('click', () => {\n      window.flashReader.stop();\n    });\n    speedSlider.addEventListener('input', e => {\n      const newSpeed = parseInt(e.target.value);\n      window.flashReader.updateSpeed(newSpeed);\n    });\n    prevButton.addEventListener('click', () => {\n      window.flashReader.prevSentence();\n    });\n    nextButton.addEventListener('click', () => {\n      window.flashReader.nextSentence();\n    });\n\n    // 初始化\n    const savedSpeed = localStorage.getItem('flash-reading-speed');\n    const initialSpeed = savedSpeed ? parseInt(savedSpeed) : 1000;\n    speedSlider.value = initialSpeed;\n    window.flashReader.updateSpeed(initialSpeed);\n    console.log('闪读模式已初始化，共 ' + sentences.length + ' 个句子');\n  };\n\n  // 创建闪读内容\n  const createFlashReadingContent = text => {\n    return `<div class=\"flash-reading-content\">\n      <p>${text}</p>\n    </div>`;\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 格式化文本用于鼠标跟随\n  const formatTextForMouseFollow = text => {\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个单词添加span，以便于添加高亮效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"follow-word\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\" data-follow=\"true\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用静态高亮\n  const applyStaticHighlight = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为单词随机添加颜色高亮\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      let lastColor = null;\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n          return;\n        }\n\n        // 随机决定是否高亮和使用哪种颜色\n        if (Math.random() < 0.7) {\n          let color;\n          if (lastColor === 'red') {\n            color = 'blue';\n          } else if (lastColor === 'blue') {\n            color = 'red';\n          } else {\n            color = Math.random() < 0.5 ? 'red' : 'blue';\n          }\n          lastColor = color;\n          processedParagraph += `<span class=\"highlight-word ${color}\">${word}</span>`;\n        } else {\n          processedParagraph += word;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用裸眼3D效果\n  const applyNakedEye3dEffect = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content naked-eye-3d-container\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个词添加3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"naked-eye-3d-text\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用舒适3D效果\n  const applyComfortable3dEffect = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个词随机应用不同的3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          processedParagraph += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 初始化裸眼3D\n  const initializeNakedEye3D = () => {\n    // 为裸眼3D文本添加动画\n    const textElements = document.querySelectorAll('.naked-eye-3d-text');\n    textElements.forEach((element, index) => {\n      // 添加随机延迟，使动画错开\n      const delay = Math.random() * 2;\n      element.style.animationDelay = `${delay}s`;\n    });\n  };\n\n  // 添加鼠标跟随监听器\n  const addMouseFollowListeners = () => {\n    // 获取内容容器\n    const contentArea = document.querySelector('.mouse-follow-content');\n    if (!contentArea) {\n      console.error('未找到鼠标跟随内容区域');\n      return;\n    }\n\n    // 上一个高亮的行\n    let lastHighlightedLine = null;\n\n    // 监听鼠标移动 - 精确的行检测\n    const mouseMoveHandler = e => {\n      // 获取鼠标位置\n      const mouseY = e.clientY;\n\n      // 获取所有行\n      const allLines = contentArea.querySelectorAll('.follow-line');\n      let foundLine = null;\n      let minDistance = Infinity;\n\n      // 寻找鼠标所在的精确行\n      allLines.forEach(line => {\n        const rect = line.getBoundingClientRect();\n        const lineCenter = rect.top + rect.height / 2;\n        const distance = Math.abs(mouseY - lineCenter);\n\n        // 如果鼠标在行范围内，计算到行中心的距离\n        if (mouseY >= rect.top && mouseY <= rect.bottom) {\n          if (distance < minDistance) {\n            minDistance = distance;\n            foundLine = line;\n          }\n        }\n      });\n\n      // 更新高亮状态\n      if (lastHighlightedLine && lastHighlightedLine !== foundLine) {\n        // 移除旧高亮\n        lastHighlightedLine.classList.remove('highlighted');\n      }\n      if (foundLine) {\n        // 添加新高亮\n        foundLine.classList.add('highlighted');\n        lastHighlightedLine = foundLine;\n\n        // 调试输出\n        console.log('当前高亮行:', foundLine.textContent.substring(0, 30) + '...');\n      } else if (lastHighlightedLine) {\n        // 如果没有找到新行，且有上一个高亮行，移除它\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n\n    // 鼠标离开处理\n    const mouseLeaveHandler = () => {\n      // 清除当前高亮\n      if (lastHighlightedLine) {\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n\n    // 存储处理函数引用\n    window.eventTracker = window.eventTracker || {\n      mouseFollowHandlers: []\n    };\n    window.eventTracker.mouseFollowHandlers.push({\n      element: contentArea,\n      event: 'mousemove',\n      handler: mouseMoveHandler\n    }, {\n      element: contentArea,\n      event: 'mouseleave',\n      handler: mouseLeaveHandler\n    });\n\n    // 添加事件监听器\n    contentArea.addEventListener('mousemove', mouseMoveHandler);\n    contentArea.addEventListener('mouseleave', mouseLeaveHandler);\n    console.log('改进的鼠标跟随监听器已初始化');\n  };\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n  }, []);\n\n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async file => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n\n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n\n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n\n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({\n        scale: 1.0\n      });\n\n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async textContent => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n\n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n\n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n\n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    const lines = [...lineMap.values()];\n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    return hasTocKeywords || hasPageNumberPatterns || shortLineRatio > 0.7 && numberLineRatio > 0.3;\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n\n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n\n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n\n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n\n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = text => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    return result;\n  };\n\n  // 处理内容页面 - 按句子划分段落\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n\n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 按句子划分内容（句号、问号、感叹号等作为分隔符）\n      const sentences = splitIntoSentences(extractedText);\n\n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch (mode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          // 使用ADHD友好的静态高亮处理\n          console.log('应用ADHD友好的静态高亮模式');\n          processedContent = formatSimpleHighlightedText(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'rhythm':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          processedContent = createFlashReadingContentFromSentences(sentences);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n      setContent(processedContent);\n\n      // 如果是静态高亮模式，添加延时验证检查\n      if (mode === 'static') {\n        setTimeout(() => {\n          const contentArea = document.querySelector('.adhd-highlight-mode');\n          if (contentArea) {\n            console.log('静态高亮模式元素存在');\n            const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n            console.log(`找到 ${paragraphs.length} 个段落`);\n\n            // 检查样式是否正确应用\n            if (paragraphs.length > 0) {\n              const firstPara = paragraphs[0];\n              const styles = window.getComputedStyle(firstPara);\n              console.log('段落应用的样式:', {\n                color: styles.color,\n                backgroundColor: styles.backgroundColor,\n                fontFamily: styles.fontFamily,\n                fontSize: styles.fontSize\n              });\n            }\n          }\n        }, 200);\n      }\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 将文本分割成句子\n  const splitIntoSentences = text => {\n    // 匹配句号、问号、感叹号后跟空格或结束的模式\n    // 支持中英文标点符号\n    const sentenceRegex = /([.!?。！？；;]+\\s*)/g;\n\n    // 分割文本成句子\n    const sentences = [];\n    let lastIndex = 0;\n    let match;\n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const sentence = text.substring(lastIndex, endIndex).trim();\n\n      // 避免添加空句子\n      if (sentence) {\n        sentences.push(sentence);\n      }\n      lastIndex = endIndex;\n    }\n\n    // 处理最后一部分（如果没有以句号等结尾）\n    if (lastIndex < text.length) {\n      const lastSentence = text.substring(lastIndex).trim();\n      if (lastSentence) {\n        sentences.push(lastSentence);\n      }\n    }\n    return sentences;\n  };\n\n  // 专门为闪读模式分割文本，以任意标点符号为分隔点\n  const splitIntoFlashReadingSegments = text => {\n    // 匹配任意标点符号包括中英文标点\n    const sentenceRegex = /([,.!?:;，。！？：；、]+\\s*)/g;\n\n    // 分割文本成短句\n    const segments = [];\n    let lastIndex = 0;\n    let match;\n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const segment = text.substring(lastIndex, endIndex).trim();\n\n      // 避免添加空段落\n      if (segment) {\n        segments.push(segment);\n      }\n      lastIndex = endIndex;\n    }\n\n    // 处理最后一部分（如果没有以标点符号结尾）\n    if (lastIndex < text.length) {\n      const lastSegment = text.substring(lastIndex).trim();\n      if (lastSegment) {\n        segments.push(lastSegment);\n      }\n    }\n    return segments;\n  };\n\n  // 格式化句子为HTML\n  const formatSentencesToHtml = sentences => {\n    let html = '<div class=\"pdf-content\">';\n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${sentence}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为句子应用静态高亮\n  const applyStaticHighlightToSentences = sentences => {\n    let html = '<div class=\"pdf-content adhd-content\">';\n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n\n      // 简单地为句子添加特定样式的class\n      html += `<p class=\"pdf-paragraph adhd-sentence\">${sentence}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为鼠标跟随模式格式化句子\n  const formatSentencesForMouseFollow = sentences => {\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    sentences.forEach((sentence, index) => {\n      if (sentence.trim() === '') return;\n\n      // 每个句子作为独立行，使用div而不是p标签\n      html += `<div class=\"follow-line\" data-line=\"${index}\" data-sentence=\"${sentence.substring(0, 20)}...\" style=\"color: inherit;\">${sentence}</div>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为舒适3D模式格式化句子\n  const applyComfortable3dEffectToSentences = sentences => {\n    let html = '<div class=\"pdf-content\">';\n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n\n      // 为每个词随机应用不同的3D效果\n      const words = sentence.split(/(\\s+)/);\n      let processedSentence = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedSentence += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          processedSentence += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedSentence}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为闪读模式创建内容\n  const createFlashReadingContentFromSentences = sentences => {\n    // 储存句子到全局变量，用于后续显示\n    window.flashReadingSentences = sentences;\n\n    // 返回闪读界面的HTML结构\n    return `\n      <div class=\"flash-reading-container\">\n        <div class=\"flash-reading-controls\">\n          <div class=\"flash-reading-buttons\">\n            <button id=\"flash-reading-prev-sentence\" class=\"flash-reading-btn\">上一句</button>\n            <button id=\"flash-reading-play\" class=\"flash-reading-btn\">开始</button>\n            <button id=\"flash-reading-pause\" class=\"flash-reading-btn\" disabled>暂停</button>\n            <button id=\"flash-reading-stop\" class=\"flash-reading-btn\">停止</button>\n            <button id=\"flash-reading-next-sentence\" class=\"flash-reading-btn\">下一句</button>\n          </div>\n          <div class=\"flash-reading-speed\">\n            <span>速度：</span>\n            <input type=\"range\" id=\"flash-reading-speed\" min=\"300\" max=\"1700\" step=\"50\" value=\"1000\" class=\"flash-reading-slider\">\n            <span id=\"flash-reading-speed-value\">1000 ms</span>\n            <span class=\"flash-reading-speed-note\">（数值越小，切换越快）</span>\n          </div>\n          <div class=\"flash-reading-progress\">\n            <span id=\"flash-reading-progress\">进度：0 / ${sentences.length}</span>\n          </div>\n        </div>\n        <div class=\"flash-reading-display-wrapper\">\n          <div class=\"flash-reading-cover\"></div> <!-- 这里是闪卡 -->\n          <div id=\"flash-reading-display\" class=\"flash-reading-display\">准备开始</div>\n        </div>\n      </div>`;\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async file => {\n    try {\n      const text = await file.text();\n\n      // 根据阅读模式选择不同的处理方式\n      let processedContent = '';\n      if (readingMode === 'flash-reading') {\n        // 闪读模式下使用特定的分割函数\n        const segments = splitIntoFlashReadingSegments(text);\n        processedContent = createFlashReadingContentFromSentences(segments);\n\n        // 初始化闪读模式\n        setTimeout(() => {\n          initializeFlashReading();\n        }, 100);\n      } else {\n        // 其他模式使用默认的分割方式\n        const sentences = splitIntoSentences(text);\n        switch (readingMode) {\n          case 'normal':\n            processedContent = formatSentencesToHtml(sentences);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlightToSentences(sentences);\n            break;\n          case 'follow-mouse':\n            processedContent = formatSentencesForMouseFollow(sentences);\n            break;\n          case 'comfortable-3d':\n            processedContent = applyComfortable3dEffectToSentences(sentences);\n            break;\n          default:\n            processedContent = formatSentencesToHtml(sentences);\n        }\n      }\n\n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n\n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setContent('<div class=\"error-message\">TXT文件处理失败</div>');\n    }\n  };\n\n  // 处理Markdown文件\n  const handleMarkdownFile = async file => {\n    try {\n      const text = await file.text();\n\n      // 使用marked库转换markdown为HTML\n      let html = '';\n      try {\n        if (window.marked) {\n          html = window.marked.parse(text);\n        } else {\n          // 如果没有marked库，简单地拆分为段落\n          html = `<div>${text.split(\"\\n\\n\").map(p => `<p>${p}</p>`).join(\"\")}</div>`;\n        }\n      } catch (parseError) {\n        console.error('Markdown解析错误:', parseError);\n        html = `<div>${text}</div>`;\n      }\n\n      // 提取纯文本内容\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = html;\n      const plainText = tempDiv.textContent || tempDiv.innerText || '';\n\n      // 分割文本为句子\n      const sentences = splitIntoSentences(plainText);\n\n      // 根据当前阅读模式处理内容\n      let processedContent = '';\n      switch (readingMode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlightToSentences(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          // 使用特定的闪读分割函数重新处理文本\n          const segments = splitIntoFlashReadingSegments(plainText);\n          processedContent = createFlashReadingContentFromSentences(segments);\n\n          // 初始化闪读模式\n          setTimeout(() => {\n            initializeFlashReading();\n          }, 100);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n\n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n\n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('Markdown处理错误:', error);\n      setContent('<div class=\"error-message\">Markdown文件处理失败</div>');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async e => {\n    const uploadedFile = e.target.files[0];\n    if (!uploadedFile) return;\n    setLoading(true);\n    setFileName(uploadedFile.name);\n    try {\n      if (uploadedFile.type === 'application/pdf') {\n        await handlePdfFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/plain' || uploadedFile.name.endsWith('.txt')) {\n        await handleTxtFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/markdown' || uploadedFile.name.endsWith('.md')) {\n        await handleMarkdownFile(uploadedFile);\n      } else {\n        setContent('<div class=\"error-message\">不支持的文件格式</div>');\n      }\n    } catch (error) {\n      console.error('处理文件时出错:', error);\n      setContent('<div class=\"error-message\">处理文件时出错</div>');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = container => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n\n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n\n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n\n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width / 2,\n            // 水平中心\n            y: rect.bottom,\n            // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n\n    // 过滤无效位置并排序\n    return positions.filter(p => p.char.trim() !== '').sort((a, b) => {\n      // 先按行排序，同行按列排序\n      const yDiff = a.y - b.y;\n      if (Math.abs(yDiff) > 5) {\n        // 5px阈值判断是否同一行\n        return yDiff;\n      }\n      return a.x - b.x;\n    });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n\n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - containerVisibleHeight / 2;\n\n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - window.innerHeight / 2;\n\n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n\n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n\n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length ||\n      // 已到末尾\n      positions[nextIndex].char.trim() === '' ||\n      // 下一个是空白\n      positions[nextIndex].y > charPosition.y + 5) {\n        // 下一个在新行\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n\n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n\n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || current.y > prev.y + 5) {\n        // 有明显换行\n        break;\n      }\n      start--;\n    }\n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n\n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n\n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (window.autoReader.charPositions.length === 0) {\n      if (window.currentPage < window.totalPages) {\n        window.changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 重置索引到开头\n    window.autoReader.currentIndex = 0;\n\n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n\n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n\n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none';\n      highlight.style.zIndex = '998';\n      contentContainer.appendChild(highlight);\n    }\n\n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n\n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20;\n\n    // 尝试获取实际行高\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(window.autoReader.charPositions[i].y - window.autoReader.charPositions[i - 1].y);\n        if (yDiff > 5) {\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n\n    // 记录上次滚动的位置\n    let lastScrolledY = -1;\n    const scrollSafeZone = lineHeight * 2.5;\n\n    // 设置字符大小的估计值\n    let charWidth = 20;\n    let charHeight = lineHeight * 0.8;\n\n    // 尝试估计字符宽度\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        if (window.autoReader.charPositions[i].x !== window.autoReader.charPositions[i - 1].x) {\n          const xDiff = Math.abs(window.autoReader.charPositions[i].x - window.autoReader.charPositions[i - 1].x);\n          if (xDiff > 0 && xDiff < 50) {\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    window.autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (window.autoReader.currentIndex < window.autoReader.charPositions.length && ((_window$autoReader$ch = window.autoReader.charPositions[window.autoReader.currentIndex]) === null || _window$autoReader$ch === void 0 ? void 0 : _window$autoReader$ch.char.trim()) === '') {\n        var _window$autoReader$ch;\n        window.autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (window.autoReader.currentIndex >= window.autoReader.charPositions.length) {\n        if (window.currentPage < window.totalPages) {\n          window.changePage(1);\n          clearInterval(window.autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n      const pos = window.autoReader.charPositions[window.autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      if (cursor && highlight) {\n        const contentRect = contentContainer.getBoundingClientRect();\n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        highlight.style.left = `${relativeX - charWidth / 2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n\n        // 滚动处理\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          if (isContainerScrollable) {\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = relativeY;\n            }\n          } else {\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      window.autoReader.currentIndex++;\n    }, window.autoReader.speed);\n\n    // 在停止自动阅读时清除所有高亮\n    window.autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n\n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n\n      // 调用清理函数\n      if (window.autoReader.cleanup) {\n        window.autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n\n    // 重置翻页状态\n    window.autoReader.isPageChanging = false;\n\n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n\n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n\n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n\n    // 收集字符位置\n    window.autoReader.charPositions = getAllCharacterPositions(content);\n\n    // 如果当前页没有内容，尝试翻页\n    if (window.autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !window.autoReader.isPageChanging) {\n        window.autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async e => {\n    const newMode = e.target.value;\n    const prevMode = readingMode;\n    console.log(`切换阅读模式: 从 ${prevMode} 到 ${newMode}`);\n\n    // 更新状态\n    setReadingMode(newMode);\n\n    // 如果有PDF文档和当前页，重新处理当前页内容\n    if (pdfDocument && currentPage > 0) {\n      try {\n        console.log('重新处理当前页面内容');\n        const page = await pdfDocument.getPage(currentPage);\n\n        // 不使用任何额外处理，直接使用最原始的方式重新加载页面\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n\n        // 根据当前模式设置内容\n        if (newMode === 'static') {\n          // 静态高亮模式 - 使用改进的句子处理\n          const html = formatSimpleHighlightedText(sentences);\n          console.log('设置静态高亮内容');\n          setContent(html);\n\n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n            if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n\n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n\n                // 验证文字颜色\n                if (styles.color === 'rgb(51, 51, 51)' || styles.color === '#333333') {\n                  console.log('文字颜色正确应用');\n                } else {\n                  console.warn('文字颜色可能未正确应用:', styles.color);\n                }\n              }\n            } else {\n              console.error('未找到静态高亮模式内容区域');\n            }\n          }, 200);\n        } else if (newMode === 'flash-reading') {\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n\n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n\n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n        } else {\n          // 其他模式保持不变\n          const handler = getContentHandlerForMode(newMode);\n          const processedContent = handler(sentences);\n          setContent(processedContent);\n        }\n      } catch (error) {\n        console.error('应用阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 首先确保移除鼠标跟随监听器\n    removeMouseFollowListeners();\n\n    // 清理节奏阅读器\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n\n    // 清理闪读器\n    if (window.flashReader) {\n      window.flashReader.cleanup();\n    }\n\n    // 清理舒适3D效果\n    const comfortable3DElements = document.querySelectorAll('.emboss-3d-text, .float-3d-text, .gradient-3d-text');\n    comfortable3DElements.forEach(el => el.remove());\n\n    // 清理闪读模式元素\n    const flashReadingElements = document.querySelectorAll('.flash-reading-container, .flash-reading-display, .flash-reading-controls');\n    flashReadingElements.forEach(el => el.remove());\n\n    // 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll('.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line, .rhythm-char');\n    highlights.forEach(el => {\n      if (el.parentNode) el.parentNode.removeChild(el);\n    });\n\n    // 彻底替换内容区域以移除所有事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      var _contentArea$querySel;\n      // 先保存底部翻页控件\n      const bottomPagination = contentArea.querySelector('.bottom-pagination');\n\n      // 深度克隆内容，但不克隆事件监听器\n      const contentHTML = ((_contentArea$querySel = contentArea.querySelector('div[dangerouslySetInnerHTML]')) === null || _contentArea$querySel === void 0 ? void 0 : _contentArea$querySel.innerHTML) || '';\n      const newContentArea = contentArea.cloneNode(false);\n\n      // 创建新的内容容器\n      const newContentContainer = document.createElement('div');\n      newContentContainer.innerHTML = contentHTML;\n      newContentArea.appendChild(newContentContainer);\n\n      // 如果有底部翻页控件，重新添加\n      if (bottomPagination && totalPages > 0) {\n        const newBottomPagination = bottomPagination.cloneNode(true);\n        // 重新绑定事件\n        const prevBtn = newBottomPagination.querySelector('.page-btn:first-child');\n        const nextBtn = newBottomPagination.querySelector('.page-btn:last-child');\n        if (prevBtn) prevBtn.onclick = () => changePage(-1);\n        if (nextBtn) nextBtn.onclick = () => changePage(1);\n        newContentArea.appendChild(newBottomPagination);\n      }\n      if (contentArea.parentNode) {\n        contentArea.parentNode.replaceChild(newContentArea, contentArea);\n      }\n    }\n\n    // 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 移除所有特殊标记和样式\n      paragraph.removeAttribute('data-follow');\n      paragraph.removeAttribute('style');\n\n      // 清理特殊span标签\n      paragraph.innerHTML = paragraph.innerHTML.replace(/<span class=\"text-line\"[^>]*>/g, '').replace(/<span class=\"rhythm-char\"[^>]*>/g, '').replace(/<span class=\"line-highlight[^\"]*\"[^>]*>/g, '').replace(/<span class=\"mouse-highlight[^\"]*\"[^>]*>/g, '').replace(/<\\/span>/g, '');\n    });\n\n    // 移除特殊UI元素\n    const elementsToRemove = ['rhythm-speed-slider', 'rhythm-notification'];\n    elementsToRemove.forEach(id => {\n      const element = document.getElementById(id);\n      if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    });\n\n    // 移除暗色背景\n    document.body.classList.remove('dark-background');\n\n    // 清理闪读模式\n    if (window.flashReader && typeof window.flashReader.cleanup === 'function') {\n      window.flashReader.cleanup();\n    }\n  };\n  const handleAutoScroll = () => {\n    window.autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = e => {\n    if (readingMode !== 'follow-mouse') return;\n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    const rect = contentArea.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    clearAllHighlights();\n    const paragraphs = contentArea.querySelectorAll('p');\n    paragraphs.forEach(paragraph => {\n      const paragraphRect = paragraph.getBoundingClientRect();\n      const paragraphX = paragraphRect.left - rect.left;\n      const paragraphY = paragraphRect.top - rect.top;\n      if (y >= paragraphY && y <= paragraphY + paragraphRect.height) {\n        const words = paragraph.querySelectorAll('span');\n        words.forEach(word => {\n          const wordRect = word.getBoundingClientRect();\n          const wordX = wordRect.left - rect.left;\n          if (x >= wordX && x <= wordX + wordRect.width) {\n            word.classList.add('highlight');\n          }\n        });\n      }\n    });\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 专门用于移除鼠标跟随事件的函数\n  const removeMouseFollowListeners = () => {\n    // 移除记录的所有监听器\n    if (window.eventTracker && window.eventTracker.mouseFollowHandlers) {\n      window.eventTracker.mouseFollowHandlers.forEach(({\n        element,\n        event,\n        handler\n      }) => {\n        if (element && element.removeEventListener) {\n          element.removeEventListener(event, handler);\n        }\n      });\n      window.eventTracker.mouseFollowHandlers = [];\n    }\n\n    // 为安全起见，尝试从document和内容区域移除通用处理函数\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    }\n    document.removeEventListener('mousemove', handleMouseMove);\n\n    // 清除所有当前高亮\n    clearAllHighlights();\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n\n    // 添加底部翻页控件样式\n    const bottomPaginationStyles = document.createElement('style');\n    bottomPaginationStyles.id = 'bottom-pagination-styles';\n    bottomPaginationStyles.innerHTML = `\n      .bottom-pagination {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        padding: 20px 0 30px;\n        margin-top: 30px;\n        width: 100%;\n        background-color: transparent;\n        border-radius: 5px;\n      }\n\n      .bottom-pagination .page-btn {\n        background-color: #6c5ce7;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        padding: 8px 15px;\n        margin: 0 10px;\n        cursor: pointer;\n        font-size: 14px;\n        transition: background-color 0.2s ease;\n      }\n\n      .bottom-pagination .page-btn:hover {\n        background-color: #4834d4;\n      }\n\n      .bottom-pagination .page-btn:disabled {\n        background-color: #aaa;\n        cursor: not-allowed;\n      }\n\n      .bottom-pagination .page-info {\n        font-size: 14px;\n        margin: 0 10px;\n      }\n    `;\n    document.head.appendChild(bottomPaginationStyles);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n    addComfortable3DStyles();\n\n    // 添加鼠标跟随模式的样式\n    const mouseFollowStyle = document.createElement('style');\n    mouseFollowStyle.id = 'intelligent-mouse-follow-style';\n    mouseFollowStyle.textContent = `\n      /* 基础样式 */\n      .mouse-follow-content {\n        position: relative;\n        line-height: 1.8;\n      }\n      \n      .mouse-follow-content .follow-line {\n        position: relative;\n        padding: 8px 16px;\n        margin: 4px 0;\n        border-radius: 6px;\n        transition: all 0.2s ease;\n        display: block;\n        min-height: 1.8em;\n        white-space: normal;\n        word-wrap: break-word;\n        text-indent: 2em;\n      }\n      \n      /* 高亮状态 */\n      .follow-line.highlighted {\n        background-color: #ffa500 !important; /* 橙色背景 */\n        color: #ffffff !important; /* 白色文字 */\n        font-weight: bold !important;\n        font-size: 1.1em; /* 稍微调小字号 */\n        transform: translateX(5px);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n      }\n      \n      \n      /* 平滑过渡效果 */\n      .follow-line {\n        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n      }\n      \n      /* 行间距优化 */\n      .mouse-follow-content .follow-line + .follow-line {\n        margin-top: 4px;\n      }\n      \n      /* 添加行指示器 */\n      .follow-line::before {\n        content: '';\n        position: absolute;\n        left: 0;\n        top: 0;\n        bottom: 0;\n        width: 3px;\n        background: linear-gradient(to bottom, transparent, rgba(255, 255, 255, 0.5), transparent);\n        opacity: 0;\n        transition: opacity 0.2s ease;\n      }\n      \n      .follow-line.highlighted::before {\n        opacity: 1;\n      }\n    `;\n    document.head.appendChild(mouseFollowStyle);\n\n    // 创建深色背景下的ADHD友好高亮样式\n    const style = document.createElement('style');\n    style.id = 'adhd-friendly-highlight-style';\n    style.textContent = `\n      /* ADHD友好的高亮样式 - 适配深色背景 */\n      .adhd-highlight-mode {\n        line-height: 1.8;\n        padding: 20px;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph {\n        margin-bottom: 1.2em;\n        background-color: transparent;\n        padding: 12px 15px;\n        border-radius: 6px;\n        border-left: 3px solid rgba(255, 255, 255, 0.2);\n        transition: all 0.3s ease;\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover {\n        transform: translateX(5px);\n        border-left-color: rgba(255, 255, 255, 0.4);\n      }\n      \n      /* 加粗样式 - 白色加粗 */\n      .adhd-bold {\n        font-weight: 700;\n        color: #ffffff;\n        letter-spacing: 0.02em;\n        font-size: 1.1em;\n        text-shadow: 0 0 1px rgba(255, 255, 255, 0.2);\n      }\n      \n      /* 彩色样式 - 使用鲜明的蓝色 */\n      .adhd-colored {\n        color: #6c5ce7;\n        font-weight: 500;\n        font-size: 1.05em;\n        text-shadow: 0 0 1px rgba(108, 92, 231, 0.2);\n      }\n      \n      /* 正常样式 - 普通白色 */\n      .adhd-normal {\n        color: rgba(255, 255, 255, 0.8);\n        font-size: 1em;\n      }\n\n      /* 添加平滑过渡效果 */\n      .adhd-bold, .adhd-colored, .adhd-normal {\n        transition: all 0.2s ease;\n      }\n\n      /* 悬停效果 */\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-bold {\n        color: #ffffff;\n        text-shadow: 0 0 2px rgba(255, 255, 255, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-colored {\n        color: #8a7ff7;\n        text-shadow: 0 0 2px rgba(138, 127, 247, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-normal {\n        color: rgba(255, 255, 255, 0.9);\n      }\n\n      /* 添加段落间距的视觉引导 */\n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph {\n        margin-top: 1.5em;\n        position: relative;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph::before {\n        content: '';\n        position: absolute;\n        top: -0.75em;\n        left: 0;\n        right: 0;\n        height: 1px;\n        background: linear-gradient(\n          to right,\n          transparent,\n          rgba(255, 255, 255, 0.1),\n          transparent\n        );\n      }\n    `;\n    document.head.appendChild(style);\n\n    // 添加基础鼠标跟随样式\n    const mouseFollowPageStyle = document.createElement('style');\n    mouseFollowPageStyle.id = 'basic-mouse-follow-style';\n    mouseFollowPageStyle.textContent = `\n      .follow-line {\n        padding: 8px 12px;\n        margin: 4px 0;\n        border-radius: 4px;\n        transition: background-color 0.2s ease;\n      }\n      .follow-line.highlighted {\n        background-color: #ffa500;\n        color: #000080;\n        font-weight: bold;\n      }\n    `;\n    document.head.appendChild(mouseFollowPageStyle);\n    return () => {\n      const existingStyle = document.getElementById('adhd-friendly-highlight-style');\n      if (existingStyle) existingStyle.remove();\n      const existingMouseFollowStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (existingMouseFollowStyle) existingMouseFollowStyle.remove();\n      const existingBasicMouseFollowStyle = document.getElementById('basic-mouse-follow-style');\n      if (existingBasicMouseFollowStyle) existingBasicMouseFollowStyle.remove();\n      mouseFollowPageStyle.remove();\n    };\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 清理旧监听器\n    removeMouseFollowListeners();\n\n    // 添加新监听器\n    setTimeout(() => {\n      addMouseFollowListeners();\n\n      // 添加调试辅助 - 显示行边界\n      const contentArea = document.querySelector('.mouse-follow-content');\n      if (contentArea) {\n        const lines = contentArea.querySelectorAll('.follow-line');\n        console.log(`初始化鼠标跟随模式，共 ${lines.length} 行`);\n\n        // 可选：启用可视化调试\n        if (false) {\n          // 设置为true可以启用可视化调试\n          lines.forEach((line, index) => {\n            line.style.border = '1px dashed #888';\n            line.setAttribute('title', `行 ${index + 1}`);\n          });\n        }\n\n        // 验证行高亮效果\n        const firstLine = lines[0];\n        if (firstLine) {\n          console.log('行样式验证:', {\n            padding: window.getComputedStyle(firstLine).padding,\n            margin: window.getComputedStyle(firstLine).margin,\n            fontSize: window.getComputedStyle(firstLine).fontSize,\n            lineHeight: window.getComputedStyle(firstLine).lineHeight\n          });\n        }\n      }\n    }, 100);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = delta => {\n    window.autoReader.speed = Math.max(100, window.autoReader.speed + delta);\n    if (window.autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async delta => {\n    console.log(`翻页请求: 当前页 ${currentPage}, 增量 ${delta}`);\n    const newPage = currentPage + delta;\n    if (newPage < 1 || newPage > totalPages) {\n      console.log('无效页码，不执行翻页');\n      return;\n    }\n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n    const wasFlashReading = readingMode === 'flash-reading' && window.flashReader && window.flashReader.isPlaying;\n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    if (wasFlashReading && window.flashReader) {\n      window.flashReader.cleanup();\n    }\n\n    // 更新页码\n    setCurrentPage(newPage);\n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n\n      // 检查是否为目录页\n      const textContent = await page.getTextContent();\n      const isToc = await detectIfTocPage(textContent);\n      setIsTableOfContents(isToc);\n      if (isToc) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, page.getViewport({\n          scale: 1.0\n        }));\n      } else {\n        // 处理正文页面 - 根据当前阅读模式处理\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n\n        // 根据当前模式设置内容\n        if (readingMode === 'static') {\n          console.log('翻页后应用静态高亮模式');\n          const processedContent = formatSimpleHighlightedText(sentences);\n          setContent(processedContent);\n\n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n            if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n\n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n              }\n            }\n          }, 200);\n        } else if (readingMode === 'flash-reading') {\n          // 如果是闪读模式，则需要特殊处理\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n\n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n\n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n          return; // 已处理，直接返回\n        } else {\n          // 其他模式使用原处理函数\n          await processContentPage(page, readingMode);\n        }\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n    } catch (error) {\n      console.error('页面切换错误:', error);\n    }\n  };\n\n  // ADHD友好的静态高亮处理函数\n  const formatSimpleHighlightedText = sentences => {\n    console.log('开始处理ADHD友好的静态高亮文本，句子数量:', sentences.length);\n    let html = '<div class=\"pdf-content adhd-highlight-mode\">';\n    sentences.forEach((sentence, sentenceIndex) => {\n      if (!sentence || sentence.trim() === '') {\n        console.log(`跳过空句子，索引: ${sentenceIndex}`);\n        return;\n      }\n\n      // 清理和规范化文本\n      const cleanText = sentence.trim().replace(/\\s+/g, ' ') // 规范化空白字符\n      .replace(/&/g, '&amp;') // 转义特殊字符\n      .replace(/</g, '&lt;').replace(/>/g, '&gt;');\n\n      // 处理句子中的单词，为它们添加不同样式\n      const words = cleanText.split(/(\\s+)/);\n      let formattedSentence = '';\n      words.forEach((word, wordIndex) => {\n        if (word.trim() === '') {\n          // 保留空格\n          formattedSentence += word;\n        } else {\n          // 根据位置应用不同的样式类\n          // 三种交替样式: 加粗、彩色、正常\n          const styleClass = wordIndex % 3 === 0 ? 'adhd-bold' : wordIndex % 3 === 1 ? 'adhd-colored' : 'adhd-normal';\n          formattedSentence += `<span class=\"${styleClass}\">${word}</span>`;\n        }\n      });\n      console.log(`处理句子 ${sentenceIndex + 1}:`, cleanText.substring(0, 50) + '...');\n      html += `<p class=\"pdf-paragraph\">${formattedSentence}</p>`;\n    });\n    html += '</div>';\n\n    // 调试输出\n    console.log('生成的ADHD友好静态高亮HTML:', html.substring(0, 200) + '...');\n    return html;\n  };\n\n  // 根据阅读模式获取相应的内容处理函数\n  const getContentHandlerForMode = mode => {\n    switch (mode) {\n      case 'normal':\n        return formatSentencesToHtml;\n      case 'static':\n        return applyStaticHighlightToSentences;\n      case 'follow-mouse':\n        return formatSentencesForMouseFollow;\n      case 'comfortable-3d':\n        return applyComfortable3dEffectToSentences;\n      case 'flash-reading':\n        return sentences => {\n          // 闪读模式使用专门的分割函数重新处理文本\n          return createFlashReadingContentFromSentences(sentences);\n        };\n      default:\n        return formatSentencesToHtml;\n    }\n  };\n\n  // 监听阅读模式和当前页面的变化\n  useEffect(() => {\n    if (readingMode === 'mouse-follow' && currentPage && !isTableOfContents) {\n      // 移除之前的样式\n      const oldStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (oldStyle) {\n        oldStyle.remove();\n      }\n\n      // 添加基础鼠标跟随样式\n      const followModeStyle = document.createElement('style');\n      followModeStyle.id = 'basic-mouse-follow-style';\n      followModeStyle.textContent = `\n        .follow-line {\n          padding: 8px 12px;\n          margin: 4px 0;\n          border-radius: 4px;\n          transition: background-color 0.2s ease;\n        }\n        .follow-line.highlighted {\n          background-color: #ffa500;\n          color: #000080;\n          font-weight: bold;\n        }\n      `;\n      document.head.appendChild(followModeStyle);\n\n      // 处理当前页面内容\n      const page = pdfDocument.getPage(currentPage);\n      const textContent = page.getTextContent();\n      const sentences = textContent.items.map(item => item.str).join(' ').split(/[。！？]/).filter(s => s.trim());\n\n      // 应用基础鼠标跟随格式化\n      setContent(formatSentencesForMouseFollow(sentences));\n\n      // 添加鼠标跟随监听器\n      setTimeout(() => {\n        addMouseFollowListeners();\n      }, 100);\n      return () => {\n        followModeStyle.remove();\n      };\n    }\n  }, [readingMode, currentPage, pdfDocument]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3107,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reading-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u9605\\u8BFB\\u6A21\\u5F0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"reading-mode-select\",\n          value: readingMode,\n          onChange: handleReadingModeChange,\n          className: \"mode-select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"normal\",\n            children: \"\\u666E\\u901A\\u6A21\\u5F0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3118,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"static\",\n            children: \"\\u9759\\u6001\\u9AD8\\u4EAE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3119,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"follow-mouse\",\n            children: \"\\u9F20\\u6807\\u8DDF\\u968F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3120,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"rhythm\",\n            children: \"\\u8282\\u594F\\u9605\\u8BFB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3121,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"flash-reading\",\n            children: \"\\u95EA\\u8BFB\\u6A21\\u5F0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3122,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 3112,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".pdf,.txt,.md\",\n          hidden: true,\n          id: \"file-upload\",\n          onChange: handleFileUpload,\n          ref: fileRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"upload-btn\",\n          onClick: () => fileRef.current.click(),\n          children: \"\\u4E0A\\u4F20\\u6587\\u4EF6 (.pdf/.txt/.md)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3135,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 3105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toolbar\",\n        children: fileName && /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"filename\",\n          children: fileName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3146,\n          columnNumber: 24\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-content\",\n        ref: readerContainerRef,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: content\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3151,\n          columnNumber: 13\n        }, this), totalPages > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bottom-pagination\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => changePage(-1),\n            disabled: currentPage <= 1,\n            className: \"page-btn\",\n            children: \"\\u4E0A\\u4E00\\u9875\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3155,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"page-info\",\n            children: [\"\\u7B2C \", currentPage, \" / \", totalPages, \" \\u9875\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 3162,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => changePage(1),\n            disabled: currentPage >= totalPages,\n            className: \"page-btn\",\n            children: \"\\u4E0B\\u4E00\\u9875\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3165,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 3154,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3150,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 3144,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 3104,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"x5N0itQI0gqtA84jt63lPsdPeRI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","pdfjsLib","pdfjsViewer","marked","pdfjs","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","window","currentPage","totalPages","changePage","eventTracker","mouseFollowHandlers","autoReader","charPositions","intervalId","currentIndex","speed","pageContainer","isScrolling","isPageChanging","cleanup","rhythmReaderGlobal","active","console","log","isActive","readingInterval","charElements","readIndices","Set","readingSpeed","addControlButton","removeControlButton","button","document","createElement","id","textContent","style","cssText","onclick","handleControlButtonClick","body","appendChild","getElementById","remove","startReading","pauseReading","backgroundColor","resumeReading","showNotification","message","notification","setTimeout","opacity","transition","cleanupReading","clearInterval","spans","querySelectorAll","length","parentMap","Map","forEach","span","parentNode","has","set","get","push","childSpans","parent","sort","a","b","parseInt","dataset","index","text","map","join","textNode","createTextNode","replaceChild","i","removeChild","e","error","contentContainer","querySelector","tagName","className","textNodes","findTextNodes","processedCount","node","nodeValue","fragment","createDocumentFragment","trim","whitespace","updateDisplay","scrollToCurrentChar","setInterval","moveToNextChar","stopReading","element","collection","excludeTags","includes","childNodes","nodeType","Node","TEXT_NODE","ELEMENT_NODE","color","fontWeight","add","char","rect","getBoundingClientRect","scrollTo","top","scrollY","innerHeight","behavior","handleModeChange","mode","isRhythmMode","originalReadingModeChanged","readingModeChanged","setupSelectorListeners","selects","select","addEventListener","value","currentValue","addTestButton","initialize","toLowerCase","readyState","rhythmReader","start","pause","resume","stop","activateRhythmReadingMode","alert","initializeRhythmReading","startRhythmReading","App","_s","pages","setPages","setCurrentPage","setTotalPages","fileName","setFileName","loading","setLoading","fileRef","file","setFile","pdfInstance","setPdfInstance","extractedTextPages","setExtractedTextPages","readingMode","setReadingMode","posMode","setPosMode","markdownContent","setMarkdownContent","readerContainerRef","content","setContent","pdfDocument","setPdfDocument","isTableOfContents","setIsTableOfContents","applyDarkBackground","classList","head","restoreDarkBackground","addNakedEye3DStyles","addComfortable3DStyles","addFlashReadingStyles","initializeFlashReading","sentences","flashReadingSentences","Array","isArray","display","speedSlider","speedValue","playButton","pauseButton","stopButton","prevButton","nextButton","progress","cover","flashReader","interval","isPlaying","disabled","displayCurrentSentence","currentSentence","displayRect","width","height","updateSpeed","newSpeed","localStorage","setItem","prevSentence","nextSentence","target","savedSpeed","getItem","initialSpeed","createFlashReadingContent","formatTextToHtml","paragraphs","split","html","paragraph","formatTextForMouseFollow","words","processedParagraph","word","applyStaticHighlight","lastColor","Math","random","applyNakedEye3dEffect","applyComfortable3dEffect","effectTypes","effectClass","floor","initializeNakedEye3D","textElements","delay","animationDelay","addMouseFollowListeners","contentArea","lastHighlightedLine","mouseMoveHandler","mouseY","clientY","allLines","foundLine","minDistance","Infinity","line","lineCenter","distance","abs","bottom","substring","mouseLeaveHandler","event","handler","initializeMouseFollow","handlePdfFile","fileURL","URL","createObjectURL","loadingTask","getDocument","pdf","promise","numPages","extractAndProcessPage","pageNum","page","getPage","getTextContent","viewport","getViewport","scale","detectIfTocPage","processTocPage","processContentPage","textItems","items","fullText","item","str","hasTocKeywords","test","hasPageNumberPatterns","shortLinesCount","linesWithNumbersCount","lineMap","yKey","round","transform","lines","values","lineText","shortLineRatio","numberLineRatio","htmlContent","x","y","fontSize","sqrt","fontName","spacedText","getTextNodeAtPosition","nodes","range","createRange","selectNodeContents","rects","getClientRects","j","left","right","found","processTextWithHighlight","result","extractedText","replace","splitIntoSentences","processedContent","formatSentencesToHtml","formatSimpleHighlightedText","formatSentencesForMouseFollow","applyComfortable3dEffectToSentences","createFlashReadingContentFromSentences","firstPara","styles","getComputedStyle","fontFamily","sentenceRegex","lastIndex","match","exec","endIndex","sentence","lastSentence","splitIntoFlashReadingSegments","segments","segment","lastSegment","applyStaticHighlightToSentences","processedSentence","handleTxtFile","name","handleMarkdownFile","parse","p","parseError","tempDiv","innerHTML","plainText","innerText","handleFileUpload","uploadedFile","files","type","endsWith","getAllCharacterPositions","container","walker","createTreeWalker","NodeFilter","SHOW_TEXT","positions","nextNode","currentNode","setStart","setEnd","warn","filter","yDiff","scrollElementToCenter","elementY","isContainerScrollable","scrollHeight","clientHeight","overflowY","targetScrollTop","containerVisibleHeight","max","absoluteElementY","createReaderCursor","cursor","isSentenceEnd","charPosition","sentenceEndMarks","nextIndex","findSentenceStart","prev","current","isInVisibleArea","threshold","visibleTop","scrollTop","visibleBottom","topThreshold","bottomThreshold","startAutoReader","position","highlight","borderRadius","pointerEvents","zIndex","lineHeight","lastScrolledY","scrollSafeZone","charWidth","charHeight","xDiff","_window$autoReader$ch","stopAutoReader","pos","contentRect","relativeX","relativeY","isInRecentlyScrolledArea","needsScroll","scrollAmount","scrollBy","absoluteY","initializeAutoReader","handleReadingModeChange","newMode","prevMode","getContentHandlerForMode","cleanupDOM","removeMouseFollowListeners","comfortable3DElements","el","flashReadingElements","highlights","_contentArea$querySel","bottomPagination","contentHTML","newContentArea","cloneNode","newContentContainer","newBottomPagination","prevBtn","nextBtn","removeAttribute","elementsToRemove","handleAutoScroll","updateCursorPosition","force","handleMouseMove","clientX","clearAllHighlights","paragraphRect","paragraphX","paragraphY","wordRect","wordX","removeEventListener","addAutoReaderStyles","bottomPaginationStyles","mouseFollowStyle","mouseFollowPageStyle","existingStyle","existingMouseFollowStyle","existingBasicMouseFollowStyle","border","setAttribute","firstLine","padding","margin","adjustSpeed","delta","newPage","wasRhythmReading","wasFlashReading","isToc","sentenceIndex","cleanText","formattedSentence","wordIndex","styleClass","oldStyle","followModeStyle","s","children","_jsxFileName","lineNumber","columnNumber","onChange","accept","hidden","ref","onClick","click","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["D:/adhd-read-helper/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 添加全局事件跟踪对象\nwindow.eventTracker = window.eventTracker || {\n  mouseFollowHandlers: []\n};\n\n// 自动阅读器全局对象\nwindow.autoReader = {\n  charPositions: [],\n  intervalId: null,\n  currentIndex: 0,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false,\n  cleanup: null\n};\n\n// 添加新的节奏阅读模式代码\n// 全局变量，确保在页面切换后仍然保持状态\nwindow.rhythmReaderGlobal = window.rhythmReaderGlobal || {\n  active: false,\n  speed: 300\n};\n\n// 节奏阅读模式 - 彻底修复版\n(function() {\n  console.log(\"节奏阅读模式 - 彻底修复版初始化\");\n  \n  // 核心状态变量\n  let isActive = false;         // 是否处于激活状态\n  let readingInterval = null;   // 计时器引用\n  let charElements = [];        // 所有字符元素\n  let currentIndex = 0;         // 当前读取位置\n  let readIndices = new Set();  // 已读位置集合\n  let readingSpeed = 300;       // 读取速度(ms)\n  \n  // 添加固定的控制按钮\n  function addControlButton() {\n    // 先移除可能存在的按钮\n    removeControlButton();\n    \n    const button = document.createElement('button');\n    button.id = 'rhythm-control-button';\n    button.textContent = \"节奏阅读: 暂停/继续\";\n    button.style.cssText = `\n      position: fixed;\n      bottom: 20px;\n      right: 20px;\n      background-color: #4CAF50;\n      color: white;\n      border: none;\n      border-radius: 5px;\n      padding: 10px 15px;\n      font-size: 16px;\n      font-weight: bold;\n      cursor: pointer;\n      z-index: 999999;\n      box-shadow: 0 4px 8px rgba(0,0,0,0.3);\n    `;\n    \n    button.onclick = handleControlButtonClick;\n    document.body.appendChild(button);\n    \n    console.log(\"控制按钮已添加到页面\");\n    return button;\n  }\n  \n  // 移除控制按钮\n  function removeControlButton() {\n    const button = document.getElementById('rhythm-control-button');\n    if (button) {\n      button.remove();\n      console.log(\"已移除控制按钮\");\n    }\n  }\n  \n  // 控制按钮点击处理\n  function handleControlButtonClick() {\n    const button = document.getElementById('rhythm-control-button');\n    \n    if (!isActive) {\n      // 如果未激活，启动节奏阅读\n      console.log(\"按钮点击: 启动节奏阅读\");\n      startReading();\n    } else if (readingInterval) {\n      // 如果正在运行，暂停它\n      console.log(\"按钮点击: 暂停节奏阅读\");\n      pauseReading();\n      if (button) {\n        button.style.backgroundColor = '#2196F3';\n        button.textContent = \"节奏阅读: 已暂停 - 点击继续\";\n      }\n    } else {\n      // 如果已暂停，继续读取\n      console.log(\"按钮点击: 继续节奏阅读\");\n      resumeReading();\n      if (button) {\n        button.style.backgroundColor = '#4CAF50';\n        button.textContent = \"节奏阅读: 暂停/继续\";\n      }\n    }\n  }\n  \n  // 显示通知\n  function showNotification(message) {\n    console.log(\"通知:\", message);\n    \n    const notification = document.createElement('div');\n    notification.textContent = message;\n    notification.style.cssText = `\n      position: fixed;\n      top: 20px;\n      left: 50%;\n      transform: translateX(-50%);\n      background: rgba(0,0,0,0.8);\n      color: white;\n      padding: 10px 20px;\n      border-radius: 5px;\n      font-size: 14px;\n      z-index: 999999;\n      box-shadow: 0 2px 8px rgba(0,0,0,0.3);\n    `;\n    document.body.appendChild(notification);\n    \n    setTimeout(() => {\n      notification.style.opacity = '0';\n      notification.style.transition = 'opacity 0.5s';\n      setTimeout(() => notification.remove(), 500);\n    }, 2000);\n  }\n  \n  // 清理之前的阅读状态 - 彻底清理\n  function cleanupReading() {\n    console.log(\"清理阅读状态...\");\n    \n    // 清除计时器\n    if (readingInterval) {\n      clearInterval(readingInterval);\n      readingInterval = null;\n    }\n    \n    // 恢复所有的文本节点\n    const spans = document.querySelectorAll('.rhythm-char');\n    \n    if (spans.length > 0) {\n      console.log(`清理 ${spans.length} 个字符span`);\n      \n      try {\n        // 按父节点分组\n        const parentMap = new Map();\n        spans.forEach(span => {\n          if (!span.parentNode) return;\n          \n          if (!parentMap.has(span.parentNode)) {\n            parentMap.set(span.parentNode, []);\n          }\n          parentMap.get(span.parentNode).push(span);\n        });\n        \n        // 恢复每个父节点的文本\n        parentMap.forEach((childSpans, parent) => {\n          try {\n            // 按索引排序\n            childSpans.sort((a, b) => {\n              return parseInt(a.dataset.index || 0) - parseInt(b.dataset.index || 0);\n            });\n            \n            // 合并文本\n            const text = childSpans.map(span => span.textContent).join('');\n            const textNode = document.createTextNode(text);\n            \n            // 替换第一个span，并移除其他span\n            parent.replaceChild(textNode, childSpans[0]);\n            for (let i = 1; i < childSpans.length; i++) {\n              if (childSpans[i].parentNode === parent) {\n                parent.removeChild(childSpans[i]);\n              }\n            }\n          } catch (e) {\n            console.error(\"恢复文本节点错误:\", e);\n          }\n        });\n      } catch (e) {\n        console.error(\"清理过程中出错:\", e);\n      }\n    }\n    \n    // 重置所有状态\n    charElements = [];\n    currentIndex = 0;\n    readIndices = new Set();\n    isActive = false;\n    \n    console.log(\"阅读状态已完全清理\");\n  }\n  \n  // 启动阅读功能\n  function startReading() {\n    console.log(\"开始启动节奏阅读...\");\n    \n    // 确保之前的状态已清理\n    cleanupReading();\n    \n    // 查找内容容器\n    const contentContainer = document.querySelector('.pdf-content') || \n                             document.querySelector('[class*=\"pdf\"]') || \n                             document.querySelector('article') || \n                             document.querySelector('main') || \n                             document.body;\n    \n    console.log(`使用内容容器: ${contentContainer.tagName} ${contentContainer.id || contentContainer.className || ''}`);\n    \n    // 查找所有文本节点\n    const textNodes = [];\n    findTextNodes(contentContainer, textNodes);\n    \n    console.log(`找到 ${textNodes.length} 个文本节点`);\n    \n    if (textNodes.length === 0) {\n      showNotification(\"错误: 未找到文本内容\");\n      return;\n    }\n    \n    // 处理文本节点\n    try {\n      let processedCount = 0;\n      textNodes.forEach(node => {\n        const text = node.nodeValue;\n        if (!text) return;\n        \n        const fragment = document.createDocumentFragment();\n        \n        for (let i = 0; i < text.length; i++) {\n          const span = document.createElement('span');\n          span.textContent = text[i];\n          span.className = 'rhythm-char';\n          span.dataset.index = charElements.length;\n          \n          if (text[i].trim() === '') {\n            span.dataset.whitespace = 'true';\n          }\n          \n          span.style.cssText = `\n            display: inline;\n            margin: 0;\n            padding: 0;\n            border: none;\n            background-color: transparent;\n          `;\n          \n          fragment.appendChild(span);\n          charElements.push(span);\n        }\n        \n        if (node.parentNode) {\n          node.parentNode.replaceChild(fragment, node);\n          processedCount++;\n        }\n      });\n      \n      console.log(`成功处理了 ${processedCount}/${textNodes.length} 个文本节点`);\n      console.log(`创建了 ${charElements.length} 个字符span`);\n    } catch (error) {\n      console.error(\"处理文本节点时出错:\", error);\n      showNotification(\"处理内容时出错\");\n      return;\n    }\n    \n    if (charElements.length === 0) {\n      showNotification(\"内容处理失败\");\n      return;\n    }\n    \n    // 设置为活动状态\n    isActive = true;\n    \n    // 重置索引和已读集合\n    currentIndex = 0;\n    readIndices = new Set();\n    \n    // 更新显示\n    updateDisplay();\n    \n    // 滚动到开始位置\n    scrollToCurrentChar();\n    \n    // 启动读取间隔\n    readingInterval = setInterval(moveToNextChar, readingSpeed);\n    \n    showNotification(\"节奏阅读已启动\");\n    \n    // 更新控制按钮\n    const button = document.getElementById('rhythm-control-button');\n    if (button) {\n      button.style.backgroundColor = '#4CAF50';\n      button.textContent = \"节奏阅读: 暂停/继续\";\n    } else {\n      // 如果按钮不存在，添加它\n      addControlButton();\n    }\n  }\n  \n  // 暂停阅读\n  function pauseReading() {\n    if (!readingInterval) return;\n    \n    clearInterval(readingInterval);\n    readingInterval = null;\n    \n    showNotification(\"节奏阅读已暂停\");\n  }\n  \n  // 继续阅读\n  function resumeReading() {\n    if (!isActive || readingInterval) return;\n    \n    readingInterval = setInterval(moveToNextChar, readingSpeed);\n    showNotification(\"节奏阅读已继续\");\n  }\n  \n  // 停止阅读\n  function stopReading() {\n    if (!isActive) return;\n    \n    console.log(\"停止节奏阅读...\");\n    \n    // 清理所有状态\n    cleanupReading();\n    \n    // 移除控制按钮\n    removeControlButton();\n    \n    showNotification(\"节奏阅读已停止\");\n  }\n  \n  // 查找文本节点\n  function findTextNodes(element, collection) {\n    // 排除这些标签\n    const excludeTags = ['BUTTON', 'INPUT', 'SELECT', 'TEXTAREA', 'SCRIPT', 'STYLE', 'NAV', 'HEADER', 'FOOTER'];\n    \n    if (excludeTags.includes(element.tagName)) return;\n    \n    for (let i = 0; i < element.childNodes.length; i++) {\n      const node = element.childNodes[i];\n      \n      if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() !== '') {\n        collection.push(node);\n      } else if (node.nodeType === Node.ELEMENT_NODE && !excludeTags.includes(node.tagName)) {\n        findTextNodes(node, collection);\n      }\n    }\n  }\n  \n  // 更新显示\n  function updateDisplay() {\n    charElements.forEach((span, index) => {\n      if (index === currentIndex) {\n        span.style.color = 'green';\n        span.style.fontWeight = 'bold';\n      } else if (readIndices.has(index)) {\n        span.style.color = 'white';\n      } else {\n        span.style.color = 'rgba(200, 200, 200, 0.3)';\n      }\n    });\n  }\n  \n  // 移动到下一个字符\n  function moveToNextChar() {\n    if (!isActive || charElements.length === 0) return;\n    \n    readIndices.add(currentIndex);\n    \n    do {\n      currentIndex++;\n      if (currentIndex >= charElements.length) {\n        // 已到达文本末尾\n        clearInterval(readingInterval);\n        readingInterval = null;\n        showNotification(\"已读完所有内容\");\n        return;\n      }\n    } while (\n      currentIndex < charElements.length &&\n      charElements[currentIndex] &&\n      charElements[currentIndex].dataset.whitespace === 'true'\n    );\n    \n    updateDisplay();\n    scrollToCurrentChar();\n  }\n  \n  // 滚动到当前字符\n  function scrollToCurrentChar() {\n    const char = charElements[currentIndex];\n    if (!char) return;\n    \n    const rect = char.getBoundingClientRect();\n    window.scrollTo({\n      top: window.scrollY + rect.top - (window.innerHeight / 3),\n      behavior: 'smooth'\n    });\n  }\n  \n  // 处理模式切换\n  function handleModeChange(mode) {\n    console.log(`模式变更为: ${mode}`);\n    const isRhythmMode = (mode === 'rhythm' || mode === 'rhythmReading');\n    \n    if (!isRhythmMode && isActive) {\n      // 从节奏阅读切换到其他模式\n      console.log(\"从节奏阅读切换到其他模式，停止节奏阅读\");\n      stopReading();\n    } else if (isRhythmMode) {\n      // 切换到节奏阅读模式\n      console.log(\"切换到节奏阅读模式\");\n      addControlButton();\n      \n      // 如果不处于活动状态，启动它\n      if (!isActive) {\n        console.log(\"自动启动节奏阅读...\");\n        setTimeout(startReading, 300);\n      }\n    }\n  }\n  \n  // 重写模式切换函数\n  const originalReadingModeChanged = window.readingModeChanged;\n  \n  window.readingModeChanged = function(mode) {\n    // 调用原始函数\n    if (typeof originalReadingModeChanged === 'function') {\n      try {\n        originalReadingModeChanged(mode);\n      } catch(e) {\n        console.error(\"原始模式函数错误:\", e);\n      }\n    }\n    \n    // 处理模式变化\n    handleModeChange(mode);\n  };\n  \n  // 监听选择器变化\n  function setupSelectorListeners() {\n    // 找到所有选择器\n    const selects = document.querySelectorAll('select');\n    console.log(`找到 ${selects.length} 个选择器`);\n    \n    selects.forEach(select => {\n      // 重新绑定事件监听器\n      select.addEventListener('change', function(e) {\n        const value = this.value || '';\n        console.log(`选择器值变化为: \"${value}\"`);\n        \n        if (value.includes('rhythm') || value.includes('节奏')) {\n          // 用户选择了节奏阅读模式\n          addControlButton();\n          setTimeout(startReading, 200);\n        } else if (isActive) {\n          // 用户选择了其他模式\n          stopReading();\n        }\n      });\n      \n      // 检查当前值\n      const currentValue = select.value || '';\n      if (currentValue.includes('rhythm') || currentValue.includes('节奏')) {\n        console.log(`选择器当前值 \"${currentValue}\" 匹配节奏阅读模式`);\n        addControlButton();\n      }\n    });\n  }\n  \n  // 添加测试按钮\n  function addTestButton() {\n    const button = document.createElement('button');\n    button.textContent = \"测试节奏阅读\";\n    button.style.cssText = `\n      position: fixed;\n      top: 10px;\n      right: 10px;\n      z-index: 999999;\n      background-color: #ff9800;\n      color: white;\n      border: none;\n      border-radius: 4px;\n      padding: 8px 12px;\n      font-size: 14px;\n      cursor: pointer;\n      box-shadow: 0 2px 5px rgba(0,0,0,0.3);\n    `;\n    \n    button.onclick = function() {\n      console.log(\"点击测试按钮\");\n      if (!isActive) {\n        this.textContent = \"暂停节奏阅读\";\n        startReading();\n      } else if (readingInterval) {\n        this.textContent = \"继续节奏阅读\";\n        pauseReading();\n      } else {\n        this.textContent = \"暂停节奏阅读\";\n        resumeReading();\n      }\n    };\n    \n    document.body.appendChild(button);\n  }\n  \n  // 初始化函数\n  function initialize() {\n    console.log(\"初始化节奏阅读组件...\");\n    \n    // 确保之前的状态已清理\n    cleanupReading();\n    \n    // 设置选择器监听\n    setupSelectorListeners();\n    \n    // 添加测试按钮\n    addTestButton();\n    \n    // 检查当前是否已经是节奏阅读模式\n    setTimeout(function() {\n      const selects = document.querySelectorAll('select');\n      for (const select of selects) {\n        const value = (select.value || '').toLowerCase();\n        if (value.includes('rhythm') || value.includes('节奏')) {\n          console.log(\"检测到当前模式为节奏阅读，自动启动\");\n          addControlButton();\n          setTimeout(startReading, 300);\n          break;\n        }\n      }\n    }, 500);\n  }\n  \n  // 在DOM加载后初始化\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initialize);\n  } else {\n    initialize();\n  }\n  \n  // 暴露公共API\n  window.rhythmReader = {\n    start: startReading,\n    pause: pauseReading,\n    resume: resumeReading,\n    stop: stopReading\n  };\n  \n  console.log(\"节奏阅读模式初始化完成 - 彻底修复版\");\n})();\n\n// 定义一个全局函数用于从应用代码中启动节奏阅读\nwindow.activateRhythmReadingMode = function() {\n  console.log(\"尝试从应用代码中启动节奏阅读模式\");\n  if (window.rhythmReader) {\n    if (window.rhythmReader.active) {\n      console.log(\"节奏阅读模式已经在运行\");\n    } else {\n      window.rhythmReader.start();\n    }\n  } else {\n    console.error(\"节奏阅读模式未初始化\");\n    alert(\"无法启动节奏阅读模式：组件未初始化\");\n  }\n};\n\n// 更新初始化函数\nconst initializeRhythmReading = () => {\n  // 不再自动初始化，而是等待用户选择\n  console.log(\"节奏阅读模式准备就绪，等待用户选择\");\n};\n\n// 更新启动函数\nconst startRhythmReading = () => {\n  if (window.rhythmReader && typeof window.rhythmReader.start === 'function') {\n    window.rhythmReader.start();\n  }\n};\n\nconst App = () => {\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  const [isTableOfContents, setIsTableOfContents] = useState(false);\n  \n  // 实现缺失的函数\n  // 应用深色背景\n  const applyDarkBackground = () => {\n    document.body.classList.add('dark-background');\n    \n    // 添加必要的CSS样式\n    if (!document.getElementById('dark-background-style')) {\n      const style = document.createElement('style');\n      style.id = 'dark-background-style';\n      style.textContent = `\n        .dark-background {\n          background-color: #000 !important;\n        }\n        .dark-background .sidebar {\n          background: linear-gradient(145deg, #4834d4, #341f9e) !important;\n        }\n        .dark-background .page-content {\n          background-color: #000 !important;\n        }\n        .dark-background .main-content {\n          background-color: #000 !important;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 恢复正常背景\n  const restoreDarkBackground = () => {\n    document.body.classList.remove('dark-background');\n  };\n  \n  // 添加裸眼3D样式\n  const addNakedEye3DStyles = () => {\n    if (!document.getElementById('naked-eye-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'naked-eye-3d-style';\n      style.textContent = `\n        .naked-eye-3d-container {\n          position: relative;\n          perspective: 800px;\n          width: 100%;\n        }\n        \n        .naked-eye-3d-text {\n          display: inline-block;\n          animation: float 3s ease-in-out infinite;\n          text-shadow: 0 0 5px rgba(255,255,255,0.3);\n          padding: 0 4px;\n          color: white;\n          filter: drop-shadow(0 0 5px rgba(120, 220, 255, 0.6));\n        }\n        \n        @keyframes float {\n          0% { transform: translateZ(0px); }\n          50% { transform: translateZ(20px); }\n          100% { transform: translateZ(0px); }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 添加舒适3D样式\n  const addComfortable3DStyles = () => {\n    if (!document.getElementById('comfortable-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'comfortable-3d-style';\n      style.textContent = `\n        .emboss-3d-text {\n          color: #fff;\n          text-shadow: \n            1px 1px 1px rgba(0,0,0,0.5),\n            -1px -1px 1px rgba(255,255,255,0.5);\n          letter-spacing: 1.5px;\n          font-weight: 500;\n        }\n        \n        .float-3d-text {\n          display: inline-block;\n          transform-style: preserve-3d;\n          transform: perspective(500px) translateZ(10px);\n          text-shadow: 0 2px 5px rgba(0,0,0,0.5);\n        }\n        \n        .gradient-3d-text {\n          display: inline-block;\n          background: linear-gradient(to bottom, #fff, #aaa);\n          -webkit-background-clip: text;\n          -webkit-text-fill-color: transparent;\n          text-shadow: 0 2px 4px rgba(0,0,0,0.3);\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 添加闪读样式\n  const addFlashReadingStyles = () => {\n    if (!document.getElementById('flash-reading-style')) {\n      const style = document.createElement('style');\n      style.id = 'flash-reading-style';\n      style.textContent = `\n        .flash-reading-container {\n          position: relative;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          z-index: 1000;\n          padding: 20px;\n        }\n        \n        .flash-reading-display-wrapper {\n          position: relative;\n          margin: 40px 0;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        \n        .flash-reading-display {\n          font-size: 36px;\n          font-weight: bold;\n          text-align: center;\n          color: white;\n          min-height: 80px;\n          max-width: 90%;\n          padding: 20px 40px;\n          position: relative; /* 允许绝对定位的覆盖层 */\n          z-index: 2;\n        }\n        \n        .flash-reading-cover {\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(128, 128, 128, 0.6); /* 灰色遮罩 */\n          border-radius: 8px;\n          z-index: 1; /* 确保在文本后面 */\n        }\n        \n        .flash-reading-controls {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          gap: 20px;\n          margin-bottom: 20px;\n          width: 100%;\n        }\n        \n        .flash-reading-buttons {\n          display: flex;\n          gap: 10px;\n          flex-wrap: wrap;\n          justify-content: center;\n        }\n        \n        .flash-reading-speed {\n          display: flex;\n          align-items: center;\n          color: white;\n          width: 80%;\n          max-width: 400px;\n          gap: 10px;\n        }\n        \n        .flash-reading-slider {\n          flex: 1;\n          height: 8px;\n          appearance: none;\n          background: #555;\n          border-radius: 4px;\n          outline: none;\n        }\n        \n        .flash-reading-slider::-webkit-slider-thumb {\n          appearance: none;\n          width: 20px;\n          height: 20px;\n          border-radius: 50%;\n          background: #6c5ce7;\n          cursor: pointer;\n        }\n        \n        .flash-reading-btn {\n          padding: 10px 20px;\n          border: none;\n          border-radius: 4px;\n          background-color: #6c5ce7;\n          color: white;\n          font-size: 16px;\n          cursor: pointer;\n          transition: background-color 0.2s;\n        }\n        \n        .flash-reading-btn:hover {\n          background-color: #5344c0;\n        }\n        \n        .flash-reading-btn:disabled {\n          background-color: #aaa;\n          cursor: not-allowed;\n        }\n        \n        .flash-reading-progress {\n          color: white;\n          font-size: 14px;\n          margin-top: 10px;\n        }\n        .flash-reading-speed-note {\n          font-size: 12px;\n          color: #ccc;\n          margin-left: 5px;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 初始化闪读模式\n  const initializeFlashReading = () => {\n    // 添加样式\n    addFlashReadingStyles();\n    \n    const sentences = window.flashReadingSentences;\n    if (!sentences || !Array.isArray(sentences) || sentences.length === 0) {\n      console.error('闪读模式: 未找到句子数据');\n        return;\n      }\n    \n    // 获取全局UI元素\n    const display = document.getElementById('flash-reading-display');\n    const speedSlider = document.getElementById('flash-reading-speed');\n    const speedValue = document.getElementById('flash-reading-speed-value');\n    const playButton = document.getElementById('flash-reading-play');\n    const pauseButton = document.getElementById('flash-reading-pause');\n    const stopButton = document.getElementById('flash-reading-stop');\n    const prevButton = document.getElementById('flash-reading-prev-sentence');\n    const nextButton = document.getElementById('flash-reading-next-sentence');\n    const progress = document.getElementById('flash-reading-progress');\n    const cover = document.querySelector('.flash-reading-cover');\n    \n    if (!display || !speedSlider || !speedValue || !playButton || !pauseButton || !stopButton || !prevButton || !nextButton || !progress || !cover) {\n      console.error('闪读模式: 未找到UI元素');\n        return;\n      }\n\n    // 创建闪读控制器\n    window.flashReader = {\n      sentences: sentences,\n      currentIndex: 0,\n      interval: null,\n      speed: parseInt(speedSlider.value),\n      isPlaying: false,\n      \n      // 开始闪读\n      start() {\n        if (this.interval) {\n          clearInterval(this.interval);\n        }\n        \n        this.isPlaying = true;\n        playButton.disabled = true;\n        pauseButton.disabled = false;\n        progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        \n        // 显示当前句子\n        this.displayCurrentSentence();\n        \n        // 设置闪读间隔\n        this.interval = setInterval(() => {\n          this.currentIndex++;\n          \n          if (this.currentIndex >= this.sentences.length) {\n            this.stop();\n            display.textContent = '阅读完成';\n            return;\n          }\n          \n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }, this.speed);\n      },\n      \n      // 显示当前句子\n      displayCurrentSentence() {\n        if (this.currentIndex < this.sentences.length) {\n          const currentSentence = this.sentences[this.currentIndex];\n          display.textContent = currentSentence;\n          display.style.color = 'white'; // 确保文本为白色\n          \n          // 调整背景以适应内容\n          setTimeout(() => {\n            const displayRect = display.getBoundingClientRect();\n            // 确保覆盖层完全包裹文本\n            cover.style.width = `${displayRect.width}px`;\n            cover.style.height = `${displayRect.height}px`;\n          }, 10);\n        }\n      },\n      \n      // 暂停闪读\n      pause() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        \n        this.isPlaying = false;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n      },\n      \n      // 停止闪读\n      stop() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        \n        this.isPlaying = false;\n        this.currentIndex = 0;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n        \n        display.textContent = '准备开始';\n        progress.textContent = `进度：0 / ${this.sentences.length}`; // 重置进度\n      },\n      \n      // 更新速度\n      updateSpeed(newSpeed) {\n        this.speed = newSpeed;\n        speedValue.textContent = `${newSpeed} ms`;\n        \n        // 保存速度设置到本地存储\n        localStorage.setItem('flash-reading-speed', newSpeed);\n        \n        // 如果正在播放，重新开始以应用新速度\n        if (this.isPlaying) {\n          clearInterval(this.interval);\n          this.start(); // 直接调用start方法重新开始\n        }\n      },\n\n      // 返回上一句\n      prevSentence() {\n        if (this.currentIndex > 0) {\n          this.currentIndex--;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n\n      // 跳到下一句\n      nextSentence() {\n        if (this.currentIndex < this.sentences.length - 1) {\n          this.currentIndex++;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n\n      // 清理资源\n      cleanup() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        this.currentIndex = 0;\n      }\n    };\n    \n    // 添加事件监听器\n    playButton.addEventListener('click', () => {\n      window.flashReader.start();\n    });\n    \n    pauseButton.addEventListener('click', () => {\n      window.flashReader.pause();\n    });\n    \n    stopButton.addEventListener('click', () => {\n      window.flashReader.stop();\n    });\n    \n    speedSlider.addEventListener('input', (e) => {\n      const newSpeed = parseInt(e.target.value);\n      window.flashReader.updateSpeed(newSpeed);\n    });\n\n    prevButton.addEventListener('click', () => {\n      window.flashReader.prevSentence();\n    });\n\n    nextButton.addEventListener('click', () => {\n      window.flashReader.nextSentence();\n    });\n    \n    // 初始化\n    const savedSpeed = localStorage.getItem('flash-reading-speed');\n    const initialSpeed = savedSpeed ? parseInt(savedSpeed) : 1000;\n    speedSlider.value = initialSpeed;\n    window.flashReader.updateSpeed(initialSpeed);\n    \n    console.log('闪读模式已初始化，共 ' + sentences.length + ' 个句子');\n  };\n  \n  // 创建闪读内容\n  const createFlashReadingContent = (text) => {\n    return `<div class=\"flash-reading-content\">\n      <p>${text}</p>\n    </div>`;\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 格式化文本用于鼠标跟随\n  const formatTextForMouseFollow = (text) => {\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个单词添加span，以便于添加高亮效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"follow-word\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\" data-follow=\"true\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用静态高亮\n  const applyStaticHighlight = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为单词随机添加颜色高亮\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      let lastColor = null;\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n          return;\n        }\n        \n        // 随机决定是否高亮和使用哪种颜色\n        if (Math.random() < 0.7) {\n          let color;\n          if (lastColor === 'red') {\n            color = 'blue';\n          } else if (lastColor === 'blue') {\n            color = 'red';\n          } else {\n            color = Math.random() < 0.5 ? 'red' : 'blue';\n          }\n          lastColor = color;\n          \n          processedParagraph += `<span class=\"highlight-word ${color}\">${word}</span>`;\n        } else {\n          processedParagraph += word;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用裸眼3D效果\n  const applyNakedEye3dEffect = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content naked-eye-3d-container\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个词添加3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"naked-eye-3d-text\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用舒适3D效果\n  const applyComfortable3dEffect = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个词随机应用不同的3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n  } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          \n          processedParagraph += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 初始化裸眼3D\n  const initializeNakedEye3D = () => {\n    // 为裸眼3D文本添加动画\n    const textElements = document.querySelectorAll('.naked-eye-3d-text');\n    textElements.forEach((element, index) => {\n      // 添加随机延迟，使动画错开\n      const delay = Math.random() * 2;\n      element.style.animationDelay = `${delay}s`;\n    });\n  };\n\n  // 添加鼠标跟随监听器\n  const addMouseFollowListeners = () => {\n    // 获取内容容器\n    const contentArea = document.querySelector('.mouse-follow-content');\n    if (!contentArea) {\n      console.error('未找到鼠标跟随内容区域');\n      return;\n    }\n    \n    // 上一个高亮的行\n    let lastHighlightedLine = null;\n    \n    // 监听鼠标移动 - 精确的行检测\n    const mouseMoveHandler = (e) => {\n      // 获取鼠标位置\n      const mouseY = e.clientY;\n      \n      // 获取所有行\n      const allLines = contentArea.querySelectorAll('.follow-line');\n      let foundLine = null;\n      let minDistance = Infinity;\n      \n      // 寻找鼠标所在的精确行\n      allLines.forEach(line => {\n        const rect = line.getBoundingClientRect();\n        const lineCenter = rect.top + rect.height / 2;\n        const distance = Math.abs(mouseY - lineCenter);\n        \n        // 如果鼠标在行范围内，计算到行中心的距离\n        if (mouseY >= rect.top && mouseY <= rect.bottom) {\n          if (distance < minDistance) {\n            minDistance = distance;\n            foundLine = line;\n        }\n      }\n    });\n    \n      // 更新高亮状态\n      if (lastHighlightedLine && lastHighlightedLine !== foundLine) {\n        // 移除旧高亮\n        lastHighlightedLine.classList.remove('highlighted');\n      }\n      \n      if (foundLine) {\n        // 添加新高亮\n        foundLine.classList.add('highlighted');\n        lastHighlightedLine = foundLine;\n        \n        // 调试输出\n        console.log('当前高亮行:', foundLine.textContent.substring(0, 30) + '...');\n      } else if (lastHighlightedLine) {\n        // 如果没有找到新行，且有上一个高亮行，移除它\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n    \n    // 鼠标离开处理\n    const mouseLeaveHandler = () => {\n      // 清除当前高亮\n      if (lastHighlightedLine) {\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n    \n    // 存储处理函数引用\n    window.eventTracker = window.eventTracker || { mouseFollowHandlers: [] };\n    window.eventTracker.mouseFollowHandlers.push(\n      { element: contentArea, event: 'mousemove', handler: mouseMoveHandler },\n      { element: contentArea, event: 'mouseleave', handler: mouseLeaveHandler }\n    );\n    \n    // 添加事件监听器\n    contentArea.addEventListener('mousemove', mouseMoveHandler);\n    contentArea.addEventListener('mouseleave', mouseLeaveHandler);\n    \n    console.log('改进的鼠标跟随监听器已初始化');\n  };\n  \n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n  }, []);\n  \n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async (file) => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      \n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n      \n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n      \n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n  \n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({ scale: 1.0 });\n      \n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      \n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      \n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async (textContent) => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n    \n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n    \n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n    \n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    \n    const lines = [...lineMap.values()];\n    \n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    \n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    \n    return hasTocKeywords || hasPageNumberPatterns || (shortLineRatio > 0.7 && numberLineRatio > 0.3);\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n    \n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    \n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n      \n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n      \n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n      \n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    \n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && \n              x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = (text) => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    \n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      \n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        \n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    \n    return result;\n  };\n\n  // 处理内容页面 - 按句子划分段落\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      \n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n      // 按句子划分内容（句号、问号、感叹号等作为分隔符）\n      const sentences = splitIntoSentences(extractedText);\n      \n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch(mode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          // 使用ADHD友好的静态高亮处理\n          console.log('应用ADHD友好的静态高亮模式');\n          processedContent = formatSimpleHighlightedText(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'rhythm':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          processedContent = createFlashReadingContentFromSentences(sentences);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n      \n      setContent(processedContent);\n      \n      // 如果是静态高亮模式，添加延时验证检查\n      if (mode === 'static') {\n        setTimeout(() => {\n          const contentArea = document.querySelector('.adhd-highlight-mode');\n          if (contentArea) {\n            console.log('静态高亮模式元素存在');\n            const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n            console.log(`找到 ${paragraphs.length} 个段落`);\n            \n            // 检查样式是否正确应用\n            if (paragraphs.length > 0) {\n              const firstPara = paragraphs[0];\n              const styles = window.getComputedStyle(firstPara);\n              console.log('段落应用的样式:', {\n                color: styles.color,\n                backgroundColor: styles.backgroundColor,\n                fontFamily: styles.fontFamily,\n                fontSize: styles.fontSize\n              });\n            }\n          }\n        }, 200);\n      }\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 将文本分割成句子\n  const splitIntoSentences = (text) => {\n    // 匹配句号、问号、感叹号后跟空格或结束的模式\n    // 支持中英文标点符号\n    const sentenceRegex = /([.!?。！？；;]+\\s*)/g;\n    \n    // 分割文本成句子\n    const sentences = [];\n    let lastIndex = 0;\n    let match;\n    \n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const sentence = text.substring(lastIndex, endIndex).trim();\n      \n      // 避免添加空句子\n      if (sentence) {\n        sentences.push(sentence);\n      }\n      \n      lastIndex = endIndex;\n    }\n    \n    // 处理最后一部分（如果没有以句号等结尾）\n    if (lastIndex < text.length) {\n      const lastSentence = text.substring(lastIndex).trim();\n      if (lastSentence) {\n        sentences.push(lastSentence);\n      }\n    }\n    \n    return sentences;\n  };\n\n  // 专门为闪读模式分割文本，以任意标点符号为分隔点\n  const splitIntoFlashReadingSegments = (text) => {\n    // 匹配任意标点符号包括中英文标点\n    const sentenceRegex = /([,.!?:;，。！？：；、]+\\s*)/g;\n    \n    // 分割文本成短句\n    const segments = [];\n    let lastIndex = 0;\n    let match;\n    \n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const segment = text.substring(lastIndex, endIndex).trim();\n      \n      // 避免添加空段落\n      if (segment) {\n        segments.push(segment);\n      }\n      \n      lastIndex = endIndex;\n    }\n    \n    // 处理最后一部分（如果没有以标点符号结尾）\n    if (lastIndex < text.length) {\n      const lastSegment = text.substring(lastIndex).trim();\n      if (lastSegment) {\n        segments.push(lastSegment);\n      }\n    }\n    \n    return segments;\n  };\n\n  // 格式化句子为HTML\n  const formatSentencesToHtml = (sentences) => {\n    let html = '<div class=\"pdf-content\">';\n    \n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${sentence}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为句子应用静态高亮\n  const applyStaticHighlightToSentences = (sentences) => {\n    let html = '<div class=\"pdf-content adhd-content\">';\n    \n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      \n      // 简单地为句子添加特定样式的class\n      html += `<p class=\"pdf-paragraph adhd-sentence\">${sentence}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为鼠标跟随模式格式化句子\n  const formatSentencesForMouseFollow = (sentences) => {\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    sentences.forEach((sentence, index) => {\n      if (sentence.trim() === '') return;\n      \n      // 每个句子作为独立行，使用div而不是p标签\n      html += `<div class=\"follow-line\" data-line=\"${index}\" data-sentence=\"${sentence.substring(0, 20)}...\" style=\"color: inherit;\">${sentence}</div>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为舒适3D模式格式化句子\n  const applyComfortable3dEffectToSentences = (sentences) => {\n    let html = '<div class=\"pdf-content\">';\n    \n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      \n      // 为每个词随机应用不同的3D效果\n      const words = sentence.split(/(\\s+)/);\n      let processedSentence = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedSentence += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          \n          processedSentence += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedSentence}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为闪读模式创建内容\n  const createFlashReadingContentFromSentences = (sentences) => {\n    // 储存句子到全局变量，用于后续显示\n    window.flashReadingSentences = sentences;\n\n    // 返回闪读界面的HTML结构\n    return `\n      <div class=\"flash-reading-container\">\n        <div class=\"flash-reading-controls\">\n          <div class=\"flash-reading-buttons\">\n            <button id=\"flash-reading-prev-sentence\" class=\"flash-reading-btn\">上一句</button>\n            <button id=\"flash-reading-play\" class=\"flash-reading-btn\">开始</button>\n            <button id=\"flash-reading-pause\" class=\"flash-reading-btn\" disabled>暂停</button>\n            <button id=\"flash-reading-stop\" class=\"flash-reading-btn\">停止</button>\n            <button id=\"flash-reading-next-sentence\" class=\"flash-reading-btn\">下一句</button>\n          </div>\n          <div class=\"flash-reading-speed\">\n            <span>速度：</span>\n            <input type=\"range\" id=\"flash-reading-speed\" min=\"300\" max=\"1700\" step=\"50\" value=\"1000\" class=\"flash-reading-slider\">\n            <span id=\"flash-reading-speed-value\">1000 ms</span>\n            <span class=\"flash-reading-speed-note\">（数值越小，切换越快）</span>\n          </div>\n          <div class=\"flash-reading-progress\">\n            <span id=\"flash-reading-progress\">进度：0 / ${sentences.length}</span>\n          </div>\n        </div>\n        <div class=\"flash-reading-display-wrapper\">\n          <div class=\"flash-reading-cover\"></div> <!-- 这里是闪卡 -->\n          <div id=\"flash-reading-display\" class=\"flash-reading-display\">准备开始</div>\n        </div>\n      </div>`;\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async (file) => {\n    try {\n      const text = await file.text();\n      \n      // 根据阅读模式选择不同的处理方式\n      let processedContent = '';\n      \n      if (readingMode === 'flash-reading') {\n        // 闪读模式下使用特定的分割函数\n        const segments = splitIntoFlashReadingSegments(text);\n        processedContent = createFlashReadingContentFromSentences(segments);\n        \n        // 初始化闪读模式\n        setTimeout(() => {\n          initializeFlashReading();\n        }, 100);\n      } else {\n        // 其他模式使用默认的分割方式\n        const sentences = splitIntoSentences(text);\n        \n        switch(readingMode) {\n          case 'normal':\n            processedContent = formatSentencesToHtml(sentences);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlightToSentences(sentences);\n            break;\n          case 'follow-mouse':\n            processedContent = formatSentencesForMouseFollow(sentences);\n            break;\n          case 'comfortable-3d':\n            processedContent = applyComfortable3dEffectToSentences(sentences);\n            break;\n          default:\n            processedContent = formatSentencesToHtml(sentences);\n        }\n      }\n      \n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n      \n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setContent('<div class=\"error-message\">TXT文件处理失败</div>');\n    }\n  };\n\n  // 处理Markdown文件\n  const handleMarkdownFile = async (file) => {\n    try {\n      const text = await file.text();\n      \n      // 使用marked库转换markdown为HTML\n      let html = '';\n      try {\n        if (window.marked) {\n          html = window.marked.parse(text);\n        } else {\n          // 如果没有marked库，简单地拆分为段落\n          html = `<div>${text.split(\"\\n\\n\").map(p => `<p>${p}</p>`).join(\"\")}</div>`;\n        }\n      } catch (parseError) {\n        console.error('Markdown解析错误:', parseError);\n        html = `<div>${text}</div>`;\n      }\n      \n      // 提取纯文本内容\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = html;\n      const plainText = tempDiv.textContent || tempDiv.innerText || '';\n      \n      // 分割文本为句子\n      const sentences = splitIntoSentences(plainText);\n      \n      // 根据当前阅读模式处理内容\n      let processedContent = '';\n      switch(readingMode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlightToSentences(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          // 使用特定的闪读分割函数重新处理文本\n          const segments = splitIntoFlashReadingSegments(plainText);\n          processedContent = createFlashReadingContentFromSentences(segments);\n          \n          // 初始化闪读模式\n          setTimeout(() => {\n            initializeFlashReading();\n          }, 100);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n      \n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n      \n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('Markdown处理错误:', error);\n      setContent('<div class=\"error-message\">Markdown文件处理失败</div>');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async (e) => {\n    const uploadedFile = e.target.files[0];\n    if (!uploadedFile) return;\n    \n    setLoading(true);\n    setFileName(uploadedFile.name);\n    \n    try {\n      if (uploadedFile.type === 'application/pdf') {\n        await handlePdfFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/plain' || uploadedFile.name.endsWith('.txt')) {\n        await handleTxtFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/markdown' || uploadedFile.name.endsWith('.md')) {\n        await handleMarkdownFile(uploadedFile);\n    } else {\n        setContent('<div class=\"error-message\">不支持的文件格式</div>');\n      }\n    } catch (error) {\n      console.error('处理文件时出错:', error);\n      setContent('<div class=\"error-message\">处理文件时出错</div>');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = (container) => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    \n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n      \n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n      \n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          \n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n          \n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width/2,  // 水平中心\n            y: rect.bottom,               // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n    \n    // 过滤无效位置并排序\n    return positions\n      .filter(p => p.char.trim() !== '')\n      .sort((a, b) => {\n        // 先按行排序，同行按列排序\n        const yDiff = a.y - b.y;\n        if (Math.abs(yDiff) > 5) { // 5px阈值判断是否同一行\n          return yDiff;\n        }\n        return a.x - b.x;\n      });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    \n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - (containerVisibleHeight / 2);\n      \n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - (window.innerHeight / 2);\n      \n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    \n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n    \n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    \n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n    \n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length || // 已到末尾\n          positions[nextIndex].char.trim() === '' || // 下一个是空白\n          positions[nextIndex].y > charPosition.y + 5) { // 下一个在新行\n        return true;\n      }\n    }\n    \n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n    \n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n      \n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || \n          current.y > prev.y + 5) { // 有明显换行\n        break;\n      }\n      \n      start--;\n    }\n    \n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n      \n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      \n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n      \n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      \n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (window.autoReader.charPositions.length === 0) {\n      if (window.currentPage < window.totalPages) {\n        window.changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 重置索引到开头\n    window.autoReader.currentIndex = 0;\n    \n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    \n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n    \n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n    \n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none';\n      highlight.style.zIndex = '998';\n      contentContainer.appendChild(highlight);\n    }\n    \n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight &&\n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n    \n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20;\n    \n    // 尝试获取实际行高\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(window.autoReader.charPositions[i].y - window.autoReader.charPositions[i-1].y);\n        if (yDiff > 5) {\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n    \n    // 记录上次滚动的位置\n    let lastScrolledY = -1;\n    const scrollSafeZone = lineHeight * 2.5;\n    \n    // 设置字符大小的估计值\n    let charWidth = 20;\n    let charHeight = lineHeight * 0.8;\n    \n    // 尝试估计字符宽度\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        if (window.autoReader.charPositions[i].x !== window.autoReader.charPositions[i-1].x) {\n          const xDiff = Math.abs(window.autoReader.charPositions[i].x - window.autoReader.charPositions[i-1].x);\n          if (xDiff > 0 && xDiff < 50) {\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    \n    window.autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (window.autoReader.currentIndex < window.autoReader.charPositions.length && \n             window.autoReader.charPositions[window.autoReader.currentIndex]?.char.trim() === '') {\n        window.autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (window.autoReader.currentIndex >= window.autoReader.charPositions.length) {\n        if (window.currentPage < window.totalPages) {\n          window.changePage(1);\n          clearInterval(window.autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n\n      const pos = window.autoReader.charPositions[window.autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      \n      if (cursor && highlight) {\n        const contentRect = contentContainer.getBoundingClientRect();\n        \n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        \n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        \n        highlight.style.left = `${relativeX - charWidth/2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n        \n        // 滚动处理\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        \n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          \n          if (isContainerScrollable) {\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n            \n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            \n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = relativeY;\n            }\n          } else {\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n            \n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            \n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      \n      window.autoReader.currentIndex++;\n      \n    }, window.autoReader.speed);\n    \n    // 在停止自动阅读时清除所有高亮\n    window.autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n      \n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n      \n      // 调用清理函数\n      if (window.autoReader.cleanup) {\n        window.autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n    \n    // 重置翻页状态\n    window.autoReader.isPageChanging = false;\n    \n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n    \n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n    \n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n    \n    // 收集字符位置\n    window.autoReader.charPositions = getAllCharacterPositions(content);\n    \n    // 如果当前页没有内容，尝试翻页\n    if (window.autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !window.autoReader.isPageChanging) {\n        window.autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async (e) => {\n    const newMode = e.target.value;\n    const prevMode = readingMode;\n    \n    console.log(`切换阅读模式: 从 ${prevMode} 到 ${newMode}`);\n    \n    // 更新状态\n    setReadingMode(newMode);\n    \n    // 如果有PDF文档和当前页，重新处理当前页内容\n    if (pdfDocument && currentPage > 0) {\n      try {\n        console.log('重新处理当前页面内容');\n        const page = await pdfDocument.getPage(currentPage);\n        \n        // 不使用任何额外处理，直接使用最原始的方式重新加载页面\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n        \n        // 根据当前模式设置内容\n        if (newMode === 'static') {\n          // 静态高亮模式 - 使用改进的句子处理\n          const html = formatSimpleHighlightedText(sentences);\n          console.log('设置静态高亮内容');\n          setContent(html);\n          \n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n        if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n              \n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n                \n                // 验证文字颜色\n                if (styles.color === 'rgb(51, 51, 51)' || styles.color === '#333333') {\n                  console.log('文字颜色正确应用');\n                } else {\n                  console.warn('文字颜色可能未正确应用:', styles.color);\n                }\n              }\n            } else {\n              console.error('未找到静态高亮模式内容区域');\n            }\n          }, 200);\n        } else if (newMode === 'flash-reading') {\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n            \n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n            \n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n            \n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n        } else {\n          // 其他模式保持不变\n          const handler = getContentHandlerForMode(newMode);\n          const processedContent = handler(sentences);\n          setContent(processedContent);\n        }\n      } catch (error) {\n        console.error('应用阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 首先确保移除鼠标跟随监听器\n    removeMouseFollowListeners();\n    \n    // 清理节奏阅读器\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    \n    // 清理闪读器\n    if (window.flashReader) {\n      window.flashReader.cleanup();\n    }\n    \n    // 清理舒适3D效果\n    const comfortable3DElements = document.querySelectorAll('.emboss-3d-text, .float-3d-text, .gradient-3d-text');\n    comfortable3DElements.forEach(el => el.remove());\n    \n    // 清理闪读模式元素\n    const flashReadingElements = document.querySelectorAll('.flash-reading-container, .flash-reading-display, .flash-reading-controls');\n    flashReadingElements.forEach(el => el.remove());\n    \n    // 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll(\n      '.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line, .rhythm-char'\n    );\n    highlights.forEach(el => {\n      if (el.parentNode) el.parentNode.removeChild(el);\n    });\n    \n    // 彻底替换内容区域以移除所有事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 先保存底部翻页控件\n      const bottomPagination = contentArea.querySelector('.bottom-pagination');\n      \n      // 深度克隆内容，但不克隆事件监听器\n      const contentHTML = contentArea.querySelector('div[dangerouslySetInnerHTML]')?.innerHTML || '';\n      const newContentArea = contentArea.cloneNode(false);\n      \n      // 创建新的内容容器\n      const newContentContainer = document.createElement('div');\n      newContentContainer.innerHTML = contentHTML;\n      newContentArea.appendChild(newContentContainer);\n      \n      // 如果有底部翻页控件，重新添加\n      if (bottomPagination && totalPages > 0) {\n        const newBottomPagination = bottomPagination.cloneNode(true);\n        // 重新绑定事件\n        const prevBtn = newBottomPagination.querySelector('.page-btn:first-child');\n        const nextBtn = newBottomPagination.querySelector('.page-btn:last-child');\n        if (prevBtn) prevBtn.onclick = () => changePage(-1);\n        if (nextBtn) nextBtn.onclick = () => changePage(1);\n        newContentArea.appendChild(newBottomPagination);\n      }\n      \n      if (contentArea.parentNode) {\n        contentArea.parentNode.replaceChild(newContentArea, contentArea);\n      }\n    }\n    \n    // 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 移除所有特殊标记和样式\n      paragraph.removeAttribute('data-follow');\n      paragraph.removeAttribute('style');\n      \n      // 清理特殊span标签\n      paragraph.innerHTML = paragraph.innerHTML\n        .replace(/<span class=\"text-line\"[^>]*>/g, '')\n        .replace(/<span class=\"rhythm-char\"[^>]*>/g, '')\n        .replace(/<span class=\"line-highlight[^\"]*\"[^>]*>/g, '')\n        .replace(/<span class=\"mouse-highlight[^\"]*\"[^>]*>/g, '')\n        .replace(/<\\/span>/g, '');\n    });\n    \n    // 移除特殊UI元素\n    const elementsToRemove = [\n      'rhythm-speed-slider',\n      'rhythm-notification'\n    ];\n    \n    elementsToRemove.forEach(id => {\n      const element = document.getElementById(id);\n      if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    });\n    \n    // 移除暗色背景\n    document.body.classList.remove('dark-background');\n    \n    // 清理闪读模式\n    if (window.flashReader && typeof window.flashReader.cleanup === 'function') {\n      window.flashReader.cleanup();\n    }\n  };\n\n  const handleAutoScroll = () => {\n    window.autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = (e) => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    \n    const rect = contentArea.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    \n    clearAllHighlights();\n    \n    const paragraphs = contentArea.querySelectorAll('p');\n    paragraphs.forEach(paragraph => {\n      const paragraphRect = paragraph.getBoundingClientRect();\n      const paragraphX = paragraphRect.left - rect.left;\n      const paragraphY = paragraphRect.top - rect.top;\n      \n      if (y >= paragraphY && y <= paragraphY + paragraphRect.height) {\n        const words = paragraph.querySelectorAll('span');\n        words.forEach(word => {\n          const wordRect = word.getBoundingClientRect();\n          const wordX = wordRect.left - rect.left;\n          \n          if (x >= wordX && x <= wordX + wordRect.width) {\n            word.classList.add('highlight');\n          }\n        });\n      }\n    });\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 专门用于移除鼠标跟随事件的函数\n  const removeMouseFollowListeners = () => {\n    // 移除记录的所有监听器\n    if (window.eventTracker && window.eventTracker.mouseFollowHandlers) {\n      window.eventTracker.mouseFollowHandlers.forEach(({element, event, handler}) => {\n        if (element && element.removeEventListener) {\n          element.removeEventListener(event, handler);\n        }\n      });\n      window.eventTracker.mouseFollowHandlers = [];\n    }\n    \n    // 为安全起见，尝试从document和内容区域移除通用处理函数\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    }\n    \n    document.removeEventListener('mousemove', handleMouseMove);\n    \n    // 清除所有当前高亮\n    clearAllHighlights();\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n    \n    // 添加底部翻页控件样式\n    const bottomPaginationStyles = document.createElement('style');\n    bottomPaginationStyles.id = 'bottom-pagination-styles';\n    bottomPaginationStyles.innerHTML = `\n      .bottom-pagination {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        padding: 20px 0 30px;\n        margin-top: 30px;\n        width: 100%;\n        background-color: transparent;\n        border-radius: 5px;\n      }\n\n      .bottom-pagination .page-btn {\n        background-color: #6c5ce7;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        padding: 8px 15px;\n        margin: 0 10px;\n        cursor: pointer;\n        font-size: 14px;\n        transition: background-color 0.2s ease;\n      }\n\n      .bottom-pagination .page-btn:hover {\n        background-color: #4834d4;\n      }\n\n      .bottom-pagination .page-btn:disabled {\n        background-color: #aaa;\n        cursor: not-allowed;\n      }\n\n      .bottom-pagination .page-info {\n        font-size: 14px;\n        margin: 0 10px;\n      }\n    `;\n    document.head.appendChild(bottomPaginationStyles);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n    addComfortable3DStyles();\n    \n    // 添加鼠标跟随模式的样式\n    const mouseFollowStyle = document.createElement('style');\n    mouseFollowStyle.id = 'intelligent-mouse-follow-style';\n    mouseFollowStyle.textContent = `\n      /* 基础样式 */\n      .mouse-follow-content {\n        position: relative;\n        line-height: 1.8;\n      }\n      \n      .mouse-follow-content .follow-line {\n        position: relative;\n        padding: 8px 16px;\n        margin: 4px 0;\n        border-radius: 6px;\n        transition: all 0.2s ease;\n        display: block;\n        min-height: 1.8em;\n        white-space: normal;\n        word-wrap: break-word;\n        text-indent: 2em;\n      }\n      \n      /* 高亮状态 */\n      .follow-line.highlighted {\n        background-color: #ffa500 !important; /* 橙色背景 */\n        color: #ffffff !important; /* 白色文字 */\n        font-weight: bold !important;\n        font-size: 1.1em; /* 稍微调小字号 */\n        transform: translateX(5px);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n      }\n      \n      \n      /* 平滑过渡效果 */\n      .follow-line {\n        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n      }\n      \n      /* 行间距优化 */\n      .mouse-follow-content .follow-line + .follow-line {\n        margin-top: 4px;\n      }\n      \n      /* 添加行指示器 */\n      .follow-line::before {\n        content: '';\n        position: absolute;\n        left: 0;\n        top: 0;\n        bottom: 0;\n        width: 3px;\n        background: linear-gradient(to bottom, transparent, rgba(255, 255, 255, 0.5), transparent);\n        opacity: 0;\n        transition: opacity 0.2s ease;\n      }\n      \n      .follow-line.highlighted::before {\n        opacity: 1;\n      }\n    `;\n    document.head.appendChild(mouseFollowStyle);\n    \n    // 创建深色背景下的ADHD友好高亮样式\n    const style = document.createElement('style');\n    style.id = 'adhd-friendly-highlight-style';\n    style.textContent = `\n      /* ADHD友好的高亮样式 - 适配深色背景 */\n      .adhd-highlight-mode {\n        line-height: 1.8;\n        padding: 20px;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph {\n        margin-bottom: 1.2em;\n        background-color: transparent;\n        padding: 12px 15px;\n        border-radius: 6px;\n        border-left: 3px solid rgba(255, 255, 255, 0.2);\n        transition: all 0.3s ease;\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover {\n        transform: translateX(5px);\n        border-left-color: rgba(255, 255, 255, 0.4);\n      }\n      \n      /* 加粗样式 - 白色加粗 */\n      .adhd-bold {\n        font-weight: 700;\n        color: #ffffff;\n        letter-spacing: 0.02em;\n        font-size: 1.1em;\n        text-shadow: 0 0 1px rgba(255, 255, 255, 0.2);\n      }\n      \n      /* 彩色样式 - 使用鲜明的蓝色 */\n      .adhd-colored {\n        color: #6c5ce7;\n        font-weight: 500;\n        font-size: 1.05em;\n        text-shadow: 0 0 1px rgba(108, 92, 231, 0.2);\n      }\n      \n      /* 正常样式 - 普通白色 */\n      .adhd-normal {\n        color: rgba(255, 255, 255, 0.8);\n        font-size: 1em;\n      }\n\n      /* 添加平滑过渡效果 */\n      .adhd-bold, .adhd-colored, .adhd-normal {\n        transition: all 0.2s ease;\n      }\n\n      /* 悬停效果 */\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-bold {\n        color: #ffffff;\n        text-shadow: 0 0 2px rgba(255, 255, 255, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-colored {\n        color: #8a7ff7;\n        text-shadow: 0 0 2px rgba(138, 127, 247, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-normal {\n        color: rgba(255, 255, 255, 0.9);\n      }\n\n      /* 添加段落间距的视觉引导 */\n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph {\n        margin-top: 1.5em;\n        position: relative;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph::before {\n        content: '';\n        position: absolute;\n        top: -0.75em;\n        left: 0;\n        right: 0;\n        height: 1px;\n        background: linear-gradient(\n          to right,\n          transparent,\n          rgba(255, 255, 255, 0.1),\n          transparent\n        );\n      }\n    `;\n    document.head.appendChild(style);\n    \n    // 添加基础鼠标跟随样式\n    const mouseFollowPageStyle = document.createElement('style');\n    mouseFollowPageStyle.id = 'basic-mouse-follow-style';\n    mouseFollowPageStyle.textContent = `\n      .follow-line {\n        padding: 8px 12px;\n        margin: 4px 0;\n        border-radius: 4px;\n        transition: background-color 0.2s ease;\n      }\n      .follow-line.highlighted {\n        background-color: #ffa500;\n        color: #000080;\n        font-weight: bold;\n      }\n    `;\n    document.head.appendChild(mouseFollowPageStyle);\n    \n    return () => {\n      const existingStyle = document.getElementById('adhd-friendly-highlight-style');\n      if (existingStyle) existingStyle.remove();\n      \n      const existingMouseFollowStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (existingMouseFollowStyle) existingMouseFollowStyle.remove();\n      \n      const existingBasicMouseFollowStyle = document.getElementById('basic-mouse-follow-style');\n      if (existingBasicMouseFollowStyle) existingBasicMouseFollowStyle.remove();\n      \n      mouseFollowPageStyle.remove();\n    };\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 清理旧监听器\n    removeMouseFollowListeners();\n    \n    // 添加新监听器\n    setTimeout(() => {\n      addMouseFollowListeners();\n      \n      // 添加调试辅助 - 显示行边界\n      const contentArea = document.querySelector('.mouse-follow-content');\n      if (contentArea) {\n        const lines = contentArea.querySelectorAll('.follow-line');\n        console.log(`初始化鼠标跟随模式，共 ${lines.length} 行`);\n        \n        // 可选：启用可视化调试\n        if (false) { // 设置为true可以启用可视化调试\n          lines.forEach((line, index) => {\n            line.style.border = '1px dashed #888';\n            line.setAttribute('title', `行 ${index+1}`);\n          });\n        }\n        \n        // 验证行高亮效果\n        const firstLine = lines[0];\n        if (firstLine) {\n          console.log('行样式验证:', {\n            padding: window.getComputedStyle(firstLine).padding,\n            margin: window.getComputedStyle(firstLine).margin,\n            fontSize: window.getComputedStyle(firstLine).fontSize,\n            lineHeight: window.getComputedStyle(firstLine).lineHeight\n          });\n        }\n      }\n    }, 100);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = (delta) => {\n    window.autoReader.speed = Math.max(100, window.autoReader.speed + delta);\n    \n    if (window.autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async (delta) => {\n    console.log(`翻页请求: 当前页 ${currentPage}, 增量 ${delta}`);\n    const newPage = currentPage + delta;\n    \n    if (newPage < 1 || newPage > totalPages) {\n      console.log('无效页码，不执行翻页');\n          return;\n        }\n        \n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n    const wasFlashReading = readingMode === 'flash-reading' && window.flashReader && window.flashReader.isPlaying;\n    \n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    \n    if (wasFlashReading && window.flashReader) {\n      window.flashReader.cleanup();\n    }\n    \n    // 更新页码\n    setCurrentPage(newPage);\n    \n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n      \n      // 检查是否为目录页\n      const textContent = await page.getTextContent();\n      const isToc = await detectIfTocPage(textContent);\n      setIsTableOfContents(isToc);\n      \n      if (isToc) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, page.getViewport({ scale: 1.0 }));\n      } else {\n        // 处理正文页面 - 根据当前阅读模式处理\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n        \n        // 根据当前模式设置内容\n        if (readingMode === 'static') {\n          console.log('翻页后应用静态高亮模式');\n          const processedContent = formatSimpleHighlightedText(sentences);\n          setContent(processedContent);\n          \n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n            if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n              \n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n              }\n            }\n          }, 200);\n        } else if (readingMode === 'flash-reading') {\n          // 如果是闪读模式，则需要特殊处理\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n            \n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n            \n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n            \n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n          return; // 已处理，直接返回\n        } else {\n          // 其他模式使用原处理函数\n          await processContentPage(page, readingMode);\n        }\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n    } catch (error) {\n      console.error('页面切换错误:', error);\n    }\n  };\n\n  // ADHD友好的静态高亮处理函数\n  const formatSimpleHighlightedText = (sentences) => {\n    console.log('开始处理ADHD友好的静态高亮文本，句子数量:', sentences.length);\n    \n    let html = '<div class=\"pdf-content adhd-highlight-mode\">';\n    \n    sentences.forEach((sentence, sentenceIndex) => {\n      if (!sentence || sentence.trim() === '') {\n        console.log(`跳过空句子，索引: ${sentenceIndex}`);\n      return;\n    }\n    \n      // 清理和规范化文本\n      const cleanText = sentence\n        .trim()\n        .replace(/\\s+/g, ' ')  // 规范化空白字符\n        .replace(/&/g, '&amp;')  // 转义特殊字符\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n      \n      // 处理句子中的单词，为它们添加不同样式\n      const words = cleanText.split(/(\\s+)/);\n      let formattedSentence = '';\n      \n      words.forEach((word, wordIndex) => {\n        if (word.trim() === '') {\n          // 保留空格\n          formattedSentence += word;\n      } else {\n          // 根据位置应用不同的样式类\n          // 三种交替样式: 加粗、彩色、正常\n          const styleClass = wordIndex % 3 === 0 ? 'adhd-bold' : \n                           wordIndex % 3 === 1 ? 'adhd-colored' : 'adhd-normal';\n          \n          formattedSentence += `<span class=\"${styleClass}\">${word}</span>`;\n        }\n      });\n      \n      console.log(`处理句子 ${sentenceIndex + 1}:`, cleanText.substring(0, 50) + '...');\n      html += `<p class=\"pdf-paragraph\">${formattedSentence}</p>`;\n    });\n    \n    html += '</div>';\n    \n    // 调试输出\n    console.log('生成的ADHD友好静态高亮HTML:', html.substring(0, 200) + '...');\n    \n    return html;\n  };\n\n  // 根据阅读模式获取相应的内容处理函数\n  const getContentHandlerForMode = (mode) => {\n    switch(mode) {\n      case 'normal': return formatSentencesToHtml;\n      case 'static': return applyStaticHighlightToSentences;\n      case 'follow-mouse': return formatSentencesForMouseFollow;\n      case 'comfortable-3d': return applyComfortable3dEffectToSentences;\n      case 'flash-reading': \n        return (sentences) => {\n          // 闪读模式使用专门的分割函数重新处理文本\n          return createFlashReadingContentFromSentences(sentences);\n        };\n      default: return formatSentencesToHtml;\n    }\n  };\n\n  // 监听阅读模式和当前页面的变化\n  useEffect(() => {\n    if (readingMode === 'mouse-follow' && currentPage && !isTableOfContents) {\n      // 移除之前的样式\n      const oldStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (oldStyle) {\n        oldStyle.remove();\n      }\n      \n      // 添加基础鼠标跟随样式\n      const followModeStyle = document.createElement('style');\n      followModeStyle.id = 'basic-mouse-follow-style';\n      followModeStyle.textContent = `\n        .follow-line {\n          padding: 8px 12px;\n          margin: 4px 0;\n          border-radius: 4px;\n          transition: background-color 0.2s ease;\n        }\n        .follow-line.highlighted {\n          background-color: #ffa500;\n          color: #000080;\n          font-weight: bold;\n        }\n      `;\n      document.head.appendChild(followModeStyle);\n      \n      // 处理当前页面内容\n      const page = pdfDocument.getPage(currentPage);\n      const textContent = page.getTextContent();\n      const sentences = textContent.items\n        .map(item => item.str)\n        .join(' ')\n        .split(/[。！？]/)\n        .filter(s => s.trim());\n      \n      // 应用基础鼠标跟随格式化\n      setContent(formatSentencesForMouseFollow(sentences));\n      \n      // 添加鼠标跟随监听器\n      setTimeout(() => {\n        addMouseFollowListeners();\n      }, 100);\n      \n      return () => {\n        followModeStyle.remove();\n      };\n    }\n  }, [readingMode, currentPage, pdfDocument]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        <div className=\"logo\">\n          <h2>ADHD阅读助手</h2>\n        </div>\n        \n        <div className=\"reading-controls\">\n          <h3>阅读模式</h3>\n          <select \n            id=\"reading-mode-select\" \n            value={readingMode} \n            onChange={handleReadingModeChange}\n            className=\"mode-select\"\n          >\n            <option value=\"normal\">普通模式</option>\n            <option value=\"static\">静态高亮</option>\n            <option value=\"follow-mouse\">鼠标跟随</option>\n            <option value=\"rhythm\">节奏阅读</option>\n            <option value=\"flash-reading\">闪读模式</option>\n          </select>\n        </div>\n        \n        <div className=\"upload-section\">\n          <input\n            type=\"file\"\n            accept=\".pdf,.txt,.md\" \n            hidden\n            id=\"file-upload\"\n            onChange={handleFileUpload}\n            ref={fileRef}\n          />\n          <button \n            className=\"upload-btn\"\n            onClick={() => fileRef.current.click()}\n          >\n            上传文件 (.pdf/.txt/.md)\n          </button>\n      </div>\n            </div>\n      \n      <div className=\"main-content\">\n        <div className=\"toolbar\">\n          {fileName && <h3 className=\"filename\">{fileName}</h3>}\n          {/* 移除了原有翻页控件 */}\n            </div>\n        \n        <div className=\"page-content\" ref={readerContainerRef}>\n            <div dangerouslySetInnerHTML={{ __html: content }} />\n          \n          {totalPages > 0 && (\n            <div className=\"bottom-pagination\">\n              <button \n                onClick={() => changePage(-1)} \n                disabled={currentPage <= 1}\n                className=\"page-btn\"\n              >\n                上一页\n              </button>\n            <span className=\"page-info\">\n                第 {currentPage} / {totalPages} 页\n              </span>\n              <button \n                onClick={() => changePage(1)} \n                disabled={currentPage >= totalPages}\n                className=\"page-btn\"\n              >\n                下一页\n              </button>\n          </div>\n        )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App; \n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAO,KAAKC,QAAQ,MAAM,YAAY;AACtC,OAAO,KAAKC,WAAW,MAAM,2BAA2B;AACxD,SAASC,MAAM,QAAQ,QAAQ,CAAC,CAAC;AACjC,OAAO,qBAAqB;AAC5B,SAASC,KAAK,QAAQ,YAAY;;AAElC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAL,QAAQ,CAACM,mBAAmB,CAACC,SAAS,GAAG,2CAA2CP,QAAQ,CAACQ,OAAO,oBAAoB;;AAExH;AACAC,MAAM,CAACC,WAAW,GAAG,CAAC;AACtBD,MAAM,CAACE,UAAU,GAAG,CAAC;AACrBF,MAAM,CAACG,UAAU,GAAG,IAAI;;AAExB;AACAH,MAAM,CAACI,YAAY,GAAGJ,MAAM,CAACI,YAAY,IAAI;EAC3CC,mBAAmB,EAAE;AACvB,CAAC;;AAED;AACAL,MAAM,CAACM,UAAU,GAAG;EAClBC,aAAa,EAAE,EAAE;EACjBC,UAAU,EAAE,IAAI;EAChBC,YAAY,EAAE,CAAC;EACfC,KAAK,EAAE,GAAG;EACVC,aAAa,EAAE,IAAI;EACnBC,WAAW,EAAE,KAAK;EAClBX,WAAW,EAAE,CAAC;EACdY,cAAc,EAAE,KAAK;EACrBC,OAAO,EAAE;AACX,CAAC;;AAED;AACA;AACAd,MAAM,CAACe,kBAAkB,GAAGf,MAAM,CAACe,kBAAkB,IAAI;EACvDC,MAAM,EAAE,KAAK;EACbN,KAAK,EAAE;AACT,CAAC;;AAED;AACA,CAAC,YAAW;EACVO,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;;EAEhC;EACA,IAAIC,QAAQ,GAAG,KAAK,CAAC,CAAS;EAC9B,IAAIC,eAAe,GAAG,IAAI,CAAC,CAAG;EAC9B,IAAIC,YAAY,GAAG,EAAE,CAAC,CAAQ;EAC9B,IAAIZ,YAAY,GAAG,CAAC,CAAC,CAAS;EAC9B,IAAIa,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC,CAAC,CAAE;EAC9B,IAAIC,YAAY,GAAG,GAAG,CAAC,CAAO;;EAE9B;EACA,SAASC,gBAAgBA,CAAA,EAAG;IAC1B;IACAC,mBAAmB,CAAC,CAAC;IAErB,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;IAC/CF,MAAM,CAACG,EAAE,GAAG,uBAAuB;IACnCH,MAAM,CAACI,WAAW,GAAG,aAAa;IAClCJ,MAAM,CAACK,KAAK,CAACC,OAAO,GAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IAEDN,MAAM,CAACO,OAAO,GAAGC,wBAAwB;IACzCP,QAAQ,CAACQ,IAAI,CAACC,WAAW,CAACV,MAAM,CAAC;IAEjCV,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;IACzB,OAAOS,MAAM;EACf;;EAEA;EACA,SAASD,mBAAmBA,CAAA,EAAG;IAC7B,MAAMC,MAAM,GAAGC,QAAQ,CAACU,cAAc,CAAC,uBAAuB,CAAC;IAC/D,IAAIX,MAAM,EAAE;MACVA,MAAM,CAACY,MAAM,CAAC,CAAC;MACftB,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IACxB;EACF;;EAEA;EACA,SAASiB,wBAAwBA,CAAA,EAAG;IAClC,MAAMR,MAAM,GAAGC,QAAQ,CAACU,cAAc,CAAC,uBAAuB,CAAC;IAE/D,IAAI,CAACnB,QAAQ,EAAE;MACb;MACAF,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;MAC3BsB,YAAY,CAAC,CAAC;IAChB,CAAC,MAAM,IAAIpB,eAAe,EAAE;MAC1B;MACAH,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;MAC3BuB,YAAY,CAAC,CAAC;MACd,IAAId,MAAM,EAAE;QACVA,MAAM,CAACK,KAAK,CAACU,eAAe,GAAG,SAAS;QACxCf,MAAM,CAACI,WAAW,GAAG,kBAAkB;MACzC;IACF,CAAC,MAAM;MACL;MACAd,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;MAC3ByB,aAAa,CAAC,CAAC;MACf,IAAIhB,MAAM,EAAE;QACVA,MAAM,CAACK,KAAK,CAACU,eAAe,GAAG,SAAS;QACxCf,MAAM,CAACI,WAAW,GAAG,aAAa;MACpC;IACF;EACF;;EAEA;EACA,SAASa,gBAAgBA,CAACC,OAAO,EAAE;IACjC5B,OAAO,CAACC,GAAG,CAAC,KAAK,EAAE2B,OAAO,CAAC;IAE3B,MAAMC,YAAY,GAAGlB,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;IAClDiB,YAAY,CAACf,WAAW,GAAGc,OAAO;IAClCC,YAAY,CAACd,KAAK,CAACC,OAAO,GAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDL,QAAQ,CAACQ,IAAI,CAACC,WAAW,CAACS,YAAY,CAAC;IAEvCC,UAAU,CAAC,MAAM;MACfD,YAAY,CAACd,KAAK,CAACgB,OAAO,GAAG,GAAG;MAChCF,YAAY,CAACd,KAAK,CAACiB,UAAU,GAAG,cAAc;MAC9CF,UAAU,CAAC,MAAMD,YAAY,CAACP,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC;IAC9C,CAAC,EAAE,IAAI,CAAC;EACV;;EAEA;EACA,SAASW,cAAcA,CAAA,EAAG;IACxBjC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;;IAExB;IACA,IAAIE,eAAe,EAAE;MACnB+B,aAAa,CAAC/B,eAAe,CAAC;MAC9BA,eAAe,GAAG,IAAI;IACxB;;IAEA;IACA,MAAMgC,KAAK,GAAGxB,QAAQ,CAACyB,gBAAgB,CAAC,cAAc,CAAC;IAEvD,IAAID,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;MACpBrC,OAAO,CAACC,GAAG,CAAC,MAAMkC,KAAK,CAACE,MAAM,UAAU,CAAC;MAEzC,IAAI;QACF;QACA,MAAMC,SAAS,GAAG,IAAIC,GAAG,CAAC,CAAC;QAC3BJ,KAAK,CAACK,OAAO,CAACC,IAAI,IAAI;UACpB,IAAI,CAACA,IAAI,CAACC,UAAU,EAAE;UAEtB,IAAI,CAACJ,SAAS,CAACK,GAAG,CAACF,IAAI,CAACC,UAAU,CAAC,EAAE;YACnCJ,SAAS,CAACM,GAAG,CAACH,IAAI,CAACC,UAAU,EAAE,EAAE,CAAC;UACpC;UACAJ,SAAS,CAACO,GAAG,CAACJ,IAAI,CAACC,UAAU,CAAC,CAACI,IAAI,CAACL,IAAI,CAAC;QAC3C,CAAC,CAAC;;QAEF;QACAH,SAAS,CAACE,OAAO,CAAC,CAACO,UAAU,EAAEC,MAAM,KAAK;UACxC,IAAI;YACF;YACAD,UAAU,CAACE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;cACxB,OAAOC,QAAQ,CAACF,CAAC,CAACG,OAAO,CAACC,KAAK,IAAI,CAAC,CAAC,GAAGF,QAAQ,CAACD,CAAC,CAACE,OAAO,CAACC,KAAK,IAAI,CAAC,CAAC;YACxE,CAAC,CAAC;;YAEF;YACA,MAAMC,IAAI,GAAGR,UAAU,CAACS,GAAG,CAACf,IAAI,IAAIA,IAAI,CAAC3B,WAAW,CAAC,CAAC2C,IAAI,CAAC,EAAE,CAAC;YAC9D,MAAMC,QAAQ,GAAG/C,QAAQ,CAACgD,cAAc,CAACJ,IAAI,CAAC;;YAE9C;YACAP,MAAM,CAACY,YAAY,CAACF,QAAQ,EAAEX,UAAU,CAAC,CAAC,CAAC,CAAC;YAC5C,KAAK,IAAIc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGd,UAAU,CAACV,MAAM,EAAEwB,CAAC,EAAE,EAAE;cAC1C,IAAId,UAAU,CAACc,CAAC,CAAC,CAACnB,UAAU,KAAKM,MAAM,EAAE;gBACvCA,MAAM,CAACc,WAAW,CAACf,UAAU,CAACc,CAAC,CAAC,CAAC;cACnC;YACF;UACF,CAAC,CAAC,OAAOE,CAAC,EAAE;YACV/D,OAAO,CAACgE,KAAK,CAAC,WAAW,EAAED,CAAC,CAAC;UAC/B;QACF,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOA,CAAC,EAAE;QACV/D,OAAO,CAACgE,KAAK,CAAC,UAAU,EAAED,CAAC,CAAC;MAC9B;IACF;;IAEA;IACA3D,YAAY,GAAG,EAAE;IACjBZ,YAAY,GAAG,CAAC;IAChBa,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC;IACvBJ,QAAQ,GAAG,KAAK;IAEhBF,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;EAC1B;;EAEA;EACA,SAASsB,YAAYA,CAAA,EAAG;IACtBvB,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;;IAE1B;IACAgC,cAAc,CAAC,CAAC;;IAEhB;IACA,MAAMgC,gBAAgB,GAAGtD,QAAQ,CAACuD,aAAa,CAAC,cAAc,CAAC,IACtCvD,QAAQ,CAACuD,aAAa,CAAC,gBAAgB,CAAC,IACxCvD,QAAQ,CAACuD,aAAa,CAAC,SAAS,CAAC,IACjCvD,QAAQ,CAACuD,aAAa,CAAC,MAAM,CAAC,IAC9BvD,QAAQ,CAACQ,IAAI;IAEtCnB,OAAO,CAACC,GAAG,CAAC,WAAWgE,gBAAgB,CAACE,OAAO,IAAIF,gBAAgB,CAACpD,EAAE,IAAIoD,gBAAgB,CAACG,SAAS,IAAI,EAAE,EAAE,CAAC;;IAE7G;IACA,MAAMC,SAAS,GAAG,EAAE;IACpBC,aAAa,CAACL,gBAAgB,EAAEI,SAAS,CAAC;IAE1CrE,OAAO,CAACC,GAAG,CAAC,MAAMoE,SAAS,CAAChC,MAAM,QAAQ,CAAC;IAE3C,IAAIgC,SAAS,CAAChC,MAAM,KAAK,CAAC,EAAE;MAC1BV,gBAAgB,CAAC,aAAa,CAAC;MAC/B;IACF;;IAEA;IACA,IAAI;MACF,IAAI4C,cAAc,GAAG,CAAC;MACtBF,SAAS,CAAC7B,OAAO,CAACgC,IAAI,IAAI;QACxB,MAAMjB,IAAI,GAAGiB,IAAI,CAACC,SAAS;QAC3B,IAAI,CAAClB,IAAI,EAAE;QAEX,MAAMmB,QAAQ,GAAG/D,QAAQ,CAACgE,sBAAsB,CAAC,CAAC;QAElD,KAAK,IAAId,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,IAAI,CAAClB,MAAM,EAAEwB,CAAC,EAAE,EAAE;UACpC,MAAMpB,IAAI,GAAG9B,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;UAC3C6B,IAAI,CAAC3B,WAAW,GAAGyC,IAAI,CAACM,CAAC,CAAC;UAC1BpB,IAAI,CAAC2B,SAAS,GAAG,aAAa;UAC9B3B,IAAI,CAACY,OAAO,CAACC,KAAK,GAAGlD,YAAY,CAACiC,MAAM;UAExC,IAAIkB,IAAI,CAACM,CAAC,CAAC,CAACe,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;YACzBnC,IAAI,CAACY,OAAO,CAACwB,UAAU,GAAG,MAAM;UAClC;UAEApC,IAAI,CAAC1B,KAAK,CAACC,OAAO,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA,WAAW;UAED0D,QAAQ,CAACtD,WAAW,CAACqB,IAAI,CAAC;UAC1BrC,YAAY,CAAC0C,IAAI,CAACL,IAAI,CAAC;QACzB;QAEA,IAAI+B,IAAI,CAAC9B,UAAU,EAAE;UACnB8B,IAAI,CAAC9B,UAAU,CAACkB,YAAY,CAACc,QAAQ,EAAEF,IAAI,CAAC;UAC5CD,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEFvE,OAAO,CAACC,GAAG,CAAC,SAASsE,cAAc,IAAIF,SAAS,CAAChC,MAAM,QAAQ,CAAC;MAChErC,OAAO,CAACC,GAAG,CAAC,OAAOG,YAAY,CAACiC,MAAM,UAAU,CAAC;IACnD,CAAC,CAAC,OAAO2B,KAAK,EAAE;MACdhE,OAAO,CAACgE,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;MAClCrC,gBAAgB,CAAC,SAAS,CAAC;MAC3B;IACF;IAEA,IAAIvB,YAAY,CAACiC,MAAM,KAAK,CAAC,EAAE;MAC7BV,gBAAgB,CAAC,QAAQ,CAAC;MAC1B;IACF;;IAEA;IACAzB,QAAQ,GAAG,IAAI;;IAEf;IACAV,YAAY,GAAG,CAAC;IAChBa,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC;;IAEvB;IACAwE,aAAa,CAAC,CAAC;;IAEf;IACAC,mBAAmB,CAAC,CAAC;;IAErB;IACA5E,eAAe,GAAG6E,WAAW,CAACC,cAAc,EAAE1E,YAAY,CAAC;IAE3DoB,gBAAgB,CAAC,SAAS,CAAC;;IAE3B;IACA,MAAMjB,MAAM,GAAGC,QAAQ,CAACU,cAAc,CAAC,uBAAuB,CAAC;IAC/D,IAAIX,MAAM,EAAE;MACVA,MAAM,CAACK,KAAK,CAACU,eAAe,GAAG,SAAS;MACxCf,MAAM,CAACI,WAAW,GAAG,aAAa;IACpC,CAAC,MAAM;MACL;MACAN,gBAAgB,CAAC,CAAC;IACpB;EACF;;EAEA;EACA,SAASgB,YAAYA,CAAA,EAAG;IACtB,IAAI,CAACrB,eAAe,EAAE;IAEtB+B,aAAa,CAAC/B,eAAe,CAAC;IAC9BA,eAAe,GAAG,IAAI;IAEtBwB,gBAAgB,CAAC,SAAS,CAAC;EAC7B;;EAEA;EACA,SAASD,aAAaA,CAAA,EAAG;IACvB,IAAI,CAACxB,QAAQ,IAAIC,eAAe,EAAE;IAElCA,eAAe,GAAG6E,WAAW,CAACC,cAAc,EAAE1E,YAAY,CAAC;IAC3DoB,gBAAgB,CAAC,SAAS,CAAC;EAC7B;;EAEA;EACA,SAASuD,WAAWA,CAAA,EAAG;IACrB,IAAI,CAAChF,QAAQ,EAAE;IAEfF,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;;IAExB;IACAgC,cAAc,CAAC,CAAC;;IAEhB;IACAxB,mBAAmB,CAAC,CAAC;IAErBkB,gBAAgB,CAAC,SAAS,CAAC;EAC7B;;EAEA;EACA,SAAS2C,aAAaA,CAACa,OAAO,EAAEC,UAAU,EAAE;IAC1C;IACA,MAAMC,WAAW,GAAG,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,CAAC;IAE3G,IAAIA,WAAW,CAACC,QAAQ,CAACH,OAAO,CAAChB,OAAO,CAAC,EAAE;IAE3C,KAAK,IAAIN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsB,OAAO,CAACI,UAAU,CAAClD,MAAM,EAAEwB,CAAC,EAAE,EAAE;MAClD,MAAMW,IAAI,GAAGW,OAAO,CAACI,UAAU,CAAC1B,CAAC,CAAC;MAElC,IAAIW,IAAI,CAACgB,QAAQ,KAAKC,IAAI,CAACC,SAAS,IAAIlB,IAAI,CAACC,SAAS,CAACG,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QACpEQ,UAAU,CAACtC,IAAI,CAAC0B,IAAI,CAAC;MACvB,CAAC,MAAM,IAAIA,IAAI,CAACgB,QAAQ,KAAKC,IAAI,CAACE,YAAY,IAAI,CAACN,WAAW,CAACC,QAAQ,CAACd,IAAI,CAACL,OAAO,CAAC,EAAE;QACrFG,aAAa,CAACE,IAAI,EAAEY,UAAU,CAAC;MACjC;IACF;EACF;;EAEA;EACA,SAASN,aAAaA,CAAA,EAAG;IACvB1E,YAAY,CAACoC,OAAO,CAAC,CAACC,IAAI,EAAEa,KAAK,KAAK;MACpC,IAAIA,KAAK,KAAK9D,YAAY,EAAE;QAC1BiD,IAAI,CAAC1B,KAAK,CAAC6E,KAAK,GAAG,OAAO;QAC1BnD,IAAI,CAAC1B,KAAK,CAAC8E,UAAU,GAAG,MAAM;MAChC,CAAC,MAAM,IAAIxF,WAAW,CAACsC,GAAG,CAACW,KAAK,CAAC,EAAE;QACjCb,IAAI,CAAC1B,KAAK,CAAC6E,KAAK,GAAG,OAAO;MAC5B,CAAC,MAAM;QACLnD,IAAI,CAAC1B,KAAK,CAAC6E,KAAK,GAAG,0BAA0B;MAC/C;IACF,CAAC,CAAC;EACJ;;EAEA;EACA,SAASX,cAAcA,CAAA,EAAG;IACxB,IAAI,CAAC/E,QAAQ,IAAIE,YAAY,CAACiC,MAAM,KAAK,CAAC,EAAE;IAE5ChC,WAAW,CAACyF,GAAG,CAACtG,YAAY,CAAC;IAE7B,GAAG;MACDA,YAAY,EAAE;MACd,IAAIA,YAAY,IAAIY,YAAY,CAACiC,MAAM,EAAE;QACvC;QACAH,aAAa,CAAC/B,eAAe,CAAC;QAC9BA,eAAe,GAAG,IAAI;QACtBwB,gBAAgB,CAAC,SAAS,CAAC;QAC3B;MACF;IACF,CAAC,QACCnC,YAAY,GAAGY,YAAY,CAACiC,MAAM,IAClCjC,YAAY,CAACZ,YAAY,CAAC,IAC1BY,YAAY,CAACZ,YAAY,CAAC,CAAC6D,OAAO,CAACwB,UAAU,KAAK,MAAM;IAG1DC,aAAa,CAAC,CAAC;IACfC,mBAAmB,CAAC,CAAC;EACvB;;EAEA;EACA,SAASA,mBAAmBA,CAAA,EAAG;IAC7B,MAAMgB,IAAI,GAAG3F,YAAY,CAACZ,YAAY,CAAC;IACvC,IAAI,CAACuG,IAAI,EAAE;IAEX,MAAMC,IAAI,GAAGD,IAAI,CAACE,qBAAqB,CAAC,CAAC;IACzClH,MAAM,CAACmH,QAAQ,CAAC;MACdC,GAAG,EAAEpH,MAAM,CAACqH,OAAO,GAAGJ,IAAI,CAACG,GAAG,GAAIpH,MAAM,CAACsH,WAAW,GAAG,CAAE;MACzDC,QAAQ,EAAE;IACZ,CAAC,CAAC;EACJ;;EAEA;EACA,SAASC,gBAAgBA,CAACC,IAAI,EAAE;IAC9BxG,OAAO,CAACC,GAAG,CAAC,UAAUuG,IAAI,EAAE,CAAC;IAC7B,MAAMC,YAAY,GAAID,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,eAAgB;IAEpE,IAAI,CAACC,YAAY,IAAIvG,QAAQ,EAAE;MAC7B;MACAF,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;MAClCiF,WAAW,CAAC,CAAC;IACf,CAAC,MAAM,IAAIuB,YAAY,EAAE;MACvB;MACAzG,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;MACxBO,gBAAgB,CAAC,CAAC;;MAElB;MACA,IAAI,CAACN,QAAQ,EAAE;QACbF,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;QAC1B6B,UAAU,CAACP,YAAY,EAAE,GAAG,CAAC;MAC/B;IACF;EACF;;EAEA;EACA,MAAMmF,0BAA0B,GAAG3H,MAAM,CAAC4H,kBAAkB;EAE5D5H,MAAM,CAAC4H,kBAAkB,GAAG,UAASH,IAAI,EAAE;IACzC;IACA,IAAI,OAAOE,0BAA0B,KAAK,UAAU,EAAE;MACpD,IAAI;QACFA,0BAA0B,CAACF,IAAI,CAAC;MAClC,CAAC,CAAC,OAAMzC,CAAC,EAAE;QACT/D,OAAO,CAACgE,KAAK,CAAC,WAAW,EAAED,CAAC,CAAC;MAC/B;IACF;;IAEA;IACAwC,gBAAgB,CAACC,IAAI,CAAC;EACxB,CAAC;;EAED;EACA,SAASI,sBAAsBA,CAAA,EAAG;IAChC;IACA,MAAMC,OAAO,GAAGlG,QAAQ,CAACyB,gBAAgB,CAAC,QAAQ,CAAC;IACnDpC,OAAO,CAACC,GAAG,CAAC,MAAM4G,OAAO,CAACxE,MAAM,OAAO,CAAC;IAExCwE,OAAO,CAACrE,OAAO,CAACsE,MAAM,IAAI;MACxB;MACAA,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAE,UAAShD,CAAC,EAAE;QAC5C,MAAMiD,KAAK,GAAG,IAAI,CAACA,KAAK,IAAI,EAAE;QAC9BhH,OAAO,CAACC,GAAG,CAAC,aAAa+G,KAAK,GAAG,CAAC;QAElC,IAAIA,KAAK,CAAC1B,QAAQ,CAAC,QAAQ,CAAC,IAAI0B,KAAK,CAAC1B,QAAQ,CAAC,IAAI,CAAC,EAAE;UACpD;UACA9E,gBAAgB,CAAC,CAAC;UAClBsB,UAAU,CAACP,YAAY,EAAE,GAAG,CAAC;QAC/B,CAAC,MAAM,IAAIrB,QAAQ,EAAE;UACnB;UACAgF,WAAW,CAAC,CAAC;QACf;MACF,CAAC,CAAC;;MAEF;MACA,MAAM+B,YAAY,GAAGH,MAAM,CAACE,KAAK,IAAI,EAAE;MACvC,IAAIC,YAAY,CAAC3B,QAAQ,CAAC,QAAQ,CAAC,IAAI2B,YAAY,CAAC3B,QAAQ,CAAC,IAAI,CAAC,EAAE;QAClEtF,OAAO,CAACC,GAAG,CAAC,WAAWgH,YAAY,YAAY,CAAC;QAChDzG,gBAAgB,CAAC,CAAC;MACpB;IACF,CAAC,CAAC;EACJ;;EAEA;EACA,SAAS0G,aAAaA,CAAA,EAAG;IACvB,MAAMxG,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;IAC/CF,MAAM,CAACI,WAAW,GAAG,QAAQ;IAC7BJ,MAAM,CAACK,KAAK,CAACC,OAAO,GAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IAEDN,MAAM,CAACO,OAAO,GAAG,YAAW;MAC1BjB,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;MACrB,IAAI,CAACC,QAAQ,EAAE;QACb,IAAI,CAACY,WAAW,GAAG,QAAQ;QAC3BS,YAAY,CAAC,CAAC;MAChB,CAAC,MAAM,IAAIpB,eAAe,EAAE;QAC1B,IAAI,CAACW,WAAW,GAAG,QAAQ;QAC3BU,YAAY,CAAC,CAAC;MAChB,CAAC,MAAM;QACL,IAAI,CAACV,WAAW,GAAG,QAAQ;QAC3BY,aAAa,CAAC,CAAC;MACjB;IACF,CAAC;IAEDf,QAAQ,CAACQ,IAAI,CAACC,WAAW,CAACV,MAAM,CAAC;EACnC;;EAEA;EACA,SAASyG,UAAUA,CAAA,EAAG;IACpBnH,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;;IAE3B;IACAgC,cAAc,CAAC,CAAC;;IAEhB;IACA2E,sBAAsB,CAAC,CAAC;;IAExB;IACAM,aAAa,CAAC,CAAC;;IAEf;IACApF,UAAU,CAAC,YAAW;MACpB,MAAM+E,OAAO,GAAGlG,QAAQ,CAACyB,gBAAgB,CAAC,QAAQ,CAAC;MACnD,KAAK,MAAM0E,MAAM,IAAID,OAAO,EAAE;QAC5B,MAAMG,KAAK,GAAG,CAACF,MAAM,CAACE,KAAK,IAAI,EAAE,EAAEI,WAAW,CAAC,CAAC;QAChD,IAAIJ,KAAK,CAAC1B,QAAQ,CAAC,QAAQ,CAAC,IAAI0B,KAAK,CAAC1B,QAAQ,CAAC,IAAI,CAAC,EAAE;UACpDtF,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;UAChCO,gBAAgB,CAAC,CAAC;UAClBsB,UAAU,CAACP,YAAY,EAAE,GAAG,CAAC;UAC7B;QACF;MACF;IACF,CAAC,EAAE,GAAG,CAAC;EACT;;EAEA;EACA,IAAIZ,QAAQ,CAAC0G,UAAU,KAAK,SAAS,EAAE;IACrC1G,QAAQ,CAACoG,gBAAgB,CAAC,kBAAkB,EAAEI,UAAU,CAAC;EAC3D,CAAC,MAAM;IACLA,UAAU,CAAC,CAAC;EACd;;EAEA;EACApI,MAAM,CAACuI,YAAY,GAAG;IACpBC,KAAK,EAAEhG,YAAY;IACnBiG,KAAK,EAAEhG,YAAY;IACnBiG,MAAM,EAAE/F,aAAa;IACrBgG,IAAI,EAAExC;EACR,CAAC;EAEDlF,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;AACpC,CAAC,EAAE,CAAC;;AAEJ;AACAlB,MAAM,CAAC4I,yBAAyB,GAAG,YAAW;EAC5C3H,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;EAC/B,IAAIlB,MAAM,CAACuI,YAAY,EAAE;IACvB,IAAIvI,MAAM,CAACuI,YAAY,CAACvH,MAAM,EAAE;MAC9BC,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;IAC5B,CAAC,MAAM;MACLlB,MAAM,CAACuI,YAAY,CAACC,KAAK,CAAC,CAAC;IAC7B;EACF,CAAC,MAAM;IACLvH,OAAO,CAACgE,KAAK,CAAC,YAAY,CAAC;IAC3B4D,KAAK,CAAC,mBAAmB,CAAC;EAC5B;AACF,CAAC;;AAED;AACA,MAAMC,uBAAuB,GAAGA,CAAA,KAAM;EACpC;EACA7H,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;AAClC,CAAC;;AAED;AACA,MAAM6H,kBAAkB,GAAGA,CAAA,KAAM;EAC/B,IAAI/I,MAAM,CAACuI,YAAY,IAAI,OAAOvI,MAAM,CAACuI,YAAY,CAACC,KAAK,KAAK,UAAU,EAAE;IAC1ExI,MAAM,CAACuI,YAAY,CAACC,KAAK,CAAC,CAAC;EAC7B;AACF,CAAC;AAED,MAAMQ,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAG/J,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACa,WAAW,EAAEmJ,cAAc,CAAC,GAAGhK,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACc,UAAU,EAAEmJ,aAAa,CAAC,GAAGjK,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACkK,QAAQ,EAAEC,WAAW,CAAC,GAAGnK,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACoK,OAAO,EAAEC,UAAU,CAAC,GAAGrK,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAMsK,OAAO,GAAGrK,MAAM,CAAC,IAAI,CAAC;EAC5B,MAAM,CAACsK,IAAI,EAAEC,OAAO,CAAC,GAAGxK,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACyK,WAAW,EAAEC,cAAc,CAAC,GAAG1K,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAAC2K,kBAAkB,EAAEC,qBAAqB,CAAC,GAAG5K,QAAQ,CAAC,EAAE,CAAC;EAChE,MAAM,CAAC6K,WAAW,EAAEC,cAAc,CAAC,GAAG9K,QAAQ,CAAC,QAAQ,CAAC;EACxD,MAAM,CAAC+K,OAAO,EAAEC,UAAU,CAAC,GAAGhL,QAAQ,CAAC,MAAM,CAAC;EAC9C,MAAM,CAACiL,eAAe,EAAEC,kBAAkB,CAAC,GAAGlL,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAMmL,kBAAkB,GAAGlL,MAAM,CAAC,IAAI,CAAC;EACvC,MAAM,CAACmL,OAAO,EAAEC,UAAU,CAAC,GAAGrL,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACsL,WAAW,EAAEC,cAAc,CAAC,GAAGvL,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACwL,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGzL,QAAQ,CAAC,KAAK,CAAC;;EAEjE;EACA;EACA,MAAM0L,mBAAmB,GAAGA,CAAA,KAAM;IAChClJ,QAAQ,CAACQ,IAAI,CAAC2I,SAAS,CAAChE,GAAG,CAAC,iBAAiB,CAAC;;IAE9C;IACA,IAAI,CAACnF,QAAQ,CAACU,cAAc,CAAC,uBAAuB,CAAC,EAAE;MACrD,MAAMN,KAAK,GAAGJ,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;MAC7CG,KAAK,CAACF,EAAE,GAAG,uBAAuB;MAClCE,KAAK,CAACD,WAAW,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;MACDH,QAAQ,CAACoJ,IAAI,CAAC3I,WAAW,CAACL,KAAK,CAAC;IAClC;EACF,CAAC;;EAED;EACA,MAAMiJ,qBAAqB,GAAGA,CAAA,KAAM;IAClCrJ,QAAQ,CAACQ,IAAI,CAAC2I,SAAS,CAACxI,MAAM,CAAC,iBAAiB,CAAC;EACnD,CAAC;;EAED;EACA,MAAM2I,mBAAmB,GAAGA,CAAA,KAAM;IAChC,IAAI,CAACtJ,QAAQ,CAACU,cAAc,CAAC,oBAAoB,CAAC,EAAE;MAClD,MAAMN,KAAK,GAAGJ,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;MAC7CG,KAAK,CAACF,EAAE,GAAG,oBAAoB;MAC/BE,KAAK,CAACD,WAAW,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;MACDH,QAAQ,CAACoJ,IAAI,CAAC3I,WAAW,CAACL,KAAK,CAAC;IAClC;EACF,CAAC;;EAED;EACA,MAAMmJ,sBAAsB,GAAGA,CAAA,KAAM;IACnC,IAAI,CAACvJ,QAAQ,CAACU,cAAc,CAAC,sBAAsB,CAAC,EAAE;MACpD,MAAMN,KAAK,GAAGJ,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;MAC7CG,KAAK,CAACF,EAAE,GAAG,sBAAsB;MACjCE,KAAK,CAACD,WAAW,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;MACDH,QAAQ,CAACoJ,IAAI,CAAC3I,WAAW,CAACL,KAAK,CAAC;IAClC;EACF,CAAC;;EAED;EACA,MAAMoJ,qBAAqB,GAAGA,CAAA,KAAM;IAClC,IAAI,CAACxJ,QAAQ,CAACU,cAAc,CAAC,qBAAqB,CAAC,EAAE;MACnD,MAAMN,KAAK,GAAGJ,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;MAC7CG,KAAK,CAACF,EAAE,GAAG,qBAAqB;MAChoJ,IAAI,CAAC3I,WAAW,CAACL,KAAK,CAAC;IAClC;EACF,CAAC;;EAED;EACA,MAAMqJ,sBAAsB,GAAGA,CAAA,KAAM;IACnC;IACAD,qBAAqB,CAAC,CAAC;IAEvB,MAAME,SAAS,GAAGtL,MAAM,CAACuL,qBAAqB;IAC9C,IAAI,CAACD,SAAS,IAAI,CAACE,KAAK,CAACC,OAAO,CAACH,SAAS,CAAC,IAAIA,SAAS,CAAChI,MAAM,KAAK,CAAC,EAAE;MACrErC,OAAO,CAACgE,KAAK,CAAC,eAAe,CAAC;MAC5B;IACF;;IAEF;IACA,MAAMyG,OAAO,GAAG9J,QAAQ,CAACU,cAAc,CAAC,uBAAuB,CAAC;IAChE,MAAMqJ,WAAW,GAAG/J,QAAQ,CAACU,cAAc,CAAC,qBAAqB,CAAC;IAClE,MAAMsJ,UAAU,GAAGhK,QAAQ,CAACU,cAAc,CAAC,2BAA2B,CAAC;IACvE,MAAMuJ,UAAU,GAAGjK,QAAQ,CAACU,cAAc,CAAC,oBAAoB,CAAC;IAChE,MAAMwJ,WAAW,GAAGlK,QAAQ,CAACU,cAAc,CAAC,qBAAqB,CAAC;IAClE,MAAMyJ,UAAU,GAAGnK,QAAQ,CAACU,cAAc,CAAC,oBAAoB,CAAC;IAChE,MAAM0J,UAAU,GAAGpK,QAAQ,CAACU,cAAc,CAAC,6BAA6B,CAAC;IACzE,MAAM2J,UAAU,GAAGrK,QAAQ,CAACU,cAAc,CAAC,6BAA6B,CAAC;IACzE,MAAM4J,QAAQ,GAAGtK,QAAQ,CAACU,cAAc,CAAC,wBAAwB,CAAC;IAClE,MAAM6J,KAAK,GAAGvK,QAAQ,CAACuD,aAAa,CAAC,sBAAsB,CAAC;IAE5D,IAAI,CAACuG,OAAO,IAAI,CAACC,WAAW,IAAI,CAACC,UAAU,IAAI,CAACC,UAAU,IAAI,CAACC,WAAW,IAAI,CAACC,UAAU,IAAI,CAACC,UAAU,IAAI,CAACC,UAAU,IAAI,CAACC,QAAQ,IAAI,CAACC,KAAK,EAAE;MAC9IlL,OAAO,CAACgE,KAAK,CAAC,eAAe,CAAC;MAC5B;IACF;;IAEF;IACAjF,MAAM,CAACoM,WAAW,GAAG;MACnBd,SAAS,EAAEA,SAAS;MACpB7K,YAAY,EAAE,CAAC;MACf4L,QAAQ,EAAE,IAAI;MACd3L,KAAK,EAAE2D,QAAQ,CAACsH,WAAW,CAAC1D,KAAK,CAAC;MAClCqE,SAAS,EAAE,KAAK;MAEhB;MACA9D,KAAKA,CAAA,EAAG;QACN,IAAI,IAAI,CAAC6D,QAAQ,EAAE;UACjBlJ,aAAa,CAAC,IAAI,CAACkJ,QAAQ,CAAC;QAC9B;QAEA,IAAI,CAACC,SAAS,GAAG,IAAI;QACrBT,UAAU,CAACU,QAAQ,GAAG,IAAI;QAC1BT,WAAW,CAACS,QAAQ,GAAG,KAAK;QAC5BL,QAAQ,CAACnK,WAAW,GAAG,MAAM,IAAI,CAACtB,YAAY,GAAG,CAAC,MAAM,IAAI,CAAC6K,SAAS,CAAChI,MAAM,EAAE;;QAE/E;QACA,IAAI,CAACkJ,sBAAsB,CAAC,CAAC;;QAE7B;QACA,IAAI,CAACH,QAAQ,GAAGpG,WAAW,CAAC,MAAM;UAChC,IAAI,CAACxF,YAAY,EAAE;UAEnB,IAAI,IAAI,CAACA,YAAY,IAAI,IAAI,CAAC6K,SAAS,CAAChI,MAAM,EAAE;YAC9C,IAAI,CAACqF,IAAI,CAAC,CAAC;YACX+C,OAAO,CAAC3J,WAAW,GAAG,MAAM;YAC5B;UACF;UAEA,IAAI,CAACyK,sBAAsB,CAAC,CAAC;UAC7BN,QAAQ,CAACnK,WAAW,GAAG,MAAM,IAAI,CAACtB,YAAY,GAAG,CAAC,MAAM,IAAI,CAAC6K,SAAS,CAAChI,MAAM,EAAE;QACjF,CAAC,EAAE,IAAI,CAAC5C,KAAK,CAAC;MAChB,CAAC;MAED;MACA8L,sBAAsBA,CAAA,EAAG;QACvB,IAAI,IAAI,CAAC/L,YAAY,GAAG,IAAI,CAAC6K,SAAS,CAAChI,MAAM,EAAE;UAC7C,MAAMmJ,eAAe,GAAG,IAAI,CAACnB,SAAS,CAAC,IAAI,CAAC7K,YAAY,CAAC;UACzDiL,OAAO,CAAC3J,WAAW,GAAG0K,eAAe;UACrCf,OAAO,CAAC1J,KAAK,CAAC6E,KAAK,GAAG,OAAO,CAAC,CAAC;;UAE/B;UACA9D,UAAU,CAAC,MAAM;YACf,MAAM2J,WAAW,GAAGhB,OAAO,CAACxE,qBAAqB,CAAC,CAAC;YACnD;YACAiF,KAAK,CAACnK,KAAK,CAAC2K,KAAK,GAAG,GAAGD,WAAW,CAACC,KAAK,IAAI;YAC5CR,KAAK,CAACnK,KAAK,CAAC4K,MAAM,GAAG,GAAGF,WAAW,CAACE,MAAM,IAAI;UAChD,CAAC,EAAE,EAAE,CAAC;QACR;MACF,CAAC;MAED;MACAnE,KAAKA,CAAA,EAAG;QACN,IAAI,IAAI,CAAC4D,QAAQ,EAAE;UACjBlJ,aAAa,CAAC,IAAI,CAACkJ,QAAQ,CAAC;UAC5B,IAAI,CAACA,QAAQ,GAAG,IAAI;QACtB;QAEA,IAAI,CAACC,SAAS,GAAG,KAAK;QACtBT,UAAU,CAACU,QAAQ,GAAG,KAAK;QAC3BT,WAAW,CAACS,QAAQ,GAAG,IAAI;MAC7B,CAAC;MAED;MACA5D,IAAIA,CAAA,EAAG;QACL,IAAI,IAAI,CAAC0D,QAAQ,EAAE;UACjBlJ,aAAa,CAAC,IAAI,CAACkJ,QAAQ,CAAC;UAC5B,IAAI,CAACA,QAAQ,GAAG,IAAI;QACtB;QAEA,IAAI,CAACC,SAAS,GAAG,KAAK;QACtB,IAAI,CAAC7L,YAAY,GAAG,CAAC;QACrBoL,UAAU,CAACU,QAAQ,GAAG,KAAK;QAC3BT,WAAW,CAACS,QAAQ,GAAG,IAAI;QAE3Bb,OAAO,CAAC3J,WAAW,GAAG,MAAM;QAC5BmK,QAAQ,CAACnK,WAAW,GAAG,UAAU,IAAI,CAACuJ,SAAS,CAAChI,MAAM,EAAE,CAAC,CAAC;MAC5D,CAAC;MAED;MACAuJ,WAAWA,CAACC,QAAQ,EAAE;QACpB,IAAI,CAACpM,KAAK,GAAGoM,QAAQ;QACrBlB,UAAU,CAAC7J,WAAW,GAAG,GAAG+K,QAAQ,KAAK;;QAEzC;QACAC,YAAY,CAACC,OAAO,CAAC,qBAAqB,EAAEF,QAAQ,CAAC;;QAErD;QACA,IAAI,IAAI,CAACR,SAAS,EAAE;UAClBnJ,aAAa,CAAC,IAAI,CAACkJ,QAAQ,CAAC;UAC5B,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,CAAC;QAChB;MACF,CAAC;MAED;MACAyE,YAAYA,CAAA,EAAG;QACb,IAAI,IAAI,CAACxM,YAAY,GAAG,CAAC,EAAE;UACzB,IAAI,CAACA,YAAY,EAAE;UACnB,IAAI,CAAC+L,sBAAsB,CAAC,CAAC;UAC7BN,QAAQ,CAACnK,WAAW,GAAG,MAAM,IAAI,CAACtB,YAAY,GAAG,CAAC,MAAM,IAAI,CAAC6K,SAAS,CAAChI,MAAM,EAAE;QACjF;MACF,CAAC;MAED;MACA4J,YAAYA,CAAA,EAAG;QACb,IAAI,IAAI,CAACzM,YAAY,GAAG,IAAI,CAAC6K,SAAS,CAAChI,MAAM,GAAG,CAAC,EAAE;UACjD,IAAI,CAAC7C,YAAY,EAAE;UACnB,IAAI,CAAC+L,sBAAsB,CAAC,CAAC;UAC7BN,QAAQ,CAACnK,WAAW,GAAG,MAAM,IAAI,CAACtB,YAAY,GAAG,CAAC,MAAM,IAAI,CAAC6K,SAAS,CAAChI,MAAM,EAAE;QACjF;MACF,CAAC;MAED;MACAxC,OAAOA,CAAA,EAAG;QACR,IAAI,IAAI,CAACuL,QAAQ,EAAE;UACjBlJ,aAAa,CAAC,IAAI,CAACkJ,QAAQ,CAAC;UAC5B,IAAI,CAACA,QAAQ,GAAG,IAAI;QACtB;QACA,IAAI,CAACC,SAAS,GAAG,KAAK;QACtB,IAAI,CAAC7L,YAAY,GAAG,CAAC;MACvB;IACF,CAAC;;IAED;IACAoL,UAAU,CAAC7D,gBAAgB,CAAC,OAAO,EAAE,MAAM;MACzChI,MAAM,CAACoM,WAAW,CAAC5D,KAAK,CAAC,CAAC;IAC5B,CAAC,CAAC;IAEFsD,WAAW,CAAC9D,gBAAgB,CAAC,OAAO,EAAE,MAAM;MAC1ChI,MAAM,CAACoM,WAAW,CAAC3D,KAAK,CAAC,CAAC;IAC5B,CAAC,CAAC;IAEFsD,UAAU,CAAC/D,gBAAgB,CAAC,OAAO,EAAE,MAAM;MACzChI,MAAM,CAACoM,WAAW,CAACzD,IAAI,CAAC,CAAC;IAC3B,CAAC,CAAC;IAEFgD,WAAW,CAAC3D,gBAAgB,CAAC,OAAO,EAAGhD,CAAC,IAAK;MAC3C,MAAM8H,QAAQ,GAAGzI,QAAQ,CAACW,CAAC,CAACmI,MAAM,CAAClF,KAAK,CAAC;MACzCjI,MAAM,CAACoM,WAAW,CAACS,WAAW,CAACC,QAAQ,CAAC;IAC1C,CAAC,CAAC;IAEFd,UAAU,CAAChE,gBAAgB,CAAC,OAAO,EAAE,MAAM;MACzChI,MAAM,CAACoM,WAAW,CAACa,YAAY,CAAC,CAAC;IACnC,CAAC,CAAC;IAEFhB,UAAU,CAACjE,gBAAgB,CAAC,OAAO,EAAE,MAAM;MACzChI,MAAM,CAACoM,WAAW,CAACc,YAAY,CAAC,CAAC;IACnC,CAAC,CAAC;;IAEF;IACA,MAAME,UAAU,GAAGL,YAAY,CAACM,OAAO,CAAC,qBAAqB,CAAC;IAC9D,MAAMC,YAAY,GAAGF,UAAU,GAAG/I,QAAQ,CAAC+I,UAAU,CAAC,GAAG,IAAI;IAC7DzB,WAAW,CAAC1D,KAAK,GAAGqF,YAAY;IAChCtN,MAAM,CAACoM,WAAW,CAACS,WAAW,CAACS,YAAY,CAAC;IAE5CrM,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGoK,SAAS,CAAChI,MAAM,GAAG,MAAM,CAAC;EACxD,CAAC;;EAED;EACA,MAAMiK,yBAAyB,GAAI/I,IAAI,IAAK;IAC1C,OAAO;AACX,WAAWA,IAAI;AACf,WAAW;EACT,CAAC;;EAED;EACA,MAAMgJ,gBAAgB,GAAIhJ,IAAI,IAAK;IACjC;IACA,MAAMiJ,UAAU,GAAGjJ,IAAI,CAACkJ,KAAK,CAAC,YAAY,CAAC;IAC3C,IAAIC,IAAI,GAAG,2BAA2B;IAEtCF,UAAU,CAAChK,OAAO,CAACmK,SAAS,IAAI;MAC9B,IAAIA,SAAS,CAAC/H,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAC7B8H,IAAI,IAAI,4BAA4BC,SAAS,MAAM;IACrD,CAAC,CAAC;IAEFD,IAAI,IAAI,QAAQ;IAChB,OAAOA,IAAI;EACb,CAAC;;EAED;EACA,MAAME,wBAAwB,GAAIrJ,IAAI,IAAK;IACzC,MAAMiJ,UAAU,GAAGjJ,IAAI,CAACkJ,KAAK,CAAC,YAAY,CAAC;IAC3C,IAAIC,IAAI,GAAG,gDAAgD;IAE3DF,UAAU,CAAChK,OAAO,CAACmK,SAAS,IAAI;MAC9B,IAAIA,SAAS,CAAC/H,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;;MAE7B;MACA,MAAMiI,KAAK,GAAGF,SAAS,CAACF,KAAK,CAAC,OAAO,CAAC;MACtC,IAAIK,kBAAkB,GAAG,EAAE;MAE3BD,KAAK,CAACrK,OAAO,CAACuK,IAAI,IAAI;QACpB,IAAIA,IAAI,CAACnI,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;UACtBkI,kBAAkB,IAAIC,IAAI;QAC5B,CAAC,MAAM;UACLD,kBAAkB,IAAI,6BAA6BC,IAAI,SAAS;QAClE;MACF,CAAC,CAAC;MAEFL,IAAI,IAAI,+CAA+CI,kBAAkB,MAAM;IACjF,CAAC,CAAC;IAEFJ,IAAI,IAAI,QAAQ;IAChB,OAAOA,IAAI;EACb,CAAC;;EAED;EACA,MAAMM,oBAAoB,GAAIzJ,IAAI,IAAK;IACrC;IACA,MAAMiJ,UAAU,GAAGjJ,IAAI,CAACkJ,KAAK,CAAC,YAAY,CAAC;IAC3C,IAAIC,IAAI,GAAG,2BAA2B;IAEtCF,UAAU,CAAChK,OAAO,CAACmK,SAAS,IAAI;MAC9B,IAAIA,SAAS,CAAC/H,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;;MAE7B;MACA,MAAMiI,KAAK,GAAGF,SAAS,CAACF,KAAK,CAAC,OAAO,CAAC;MACtC,IAAIK,kBAAkB,GAAG,EAAE;MAC3B,IAAIG,SAAS,GAAG,IAAI;MAEpBJ,KAAK,CAACrK,OAAO,CAACuK,IAAI,IAAI;QACpB,IAAIA,IAAI,CAACnI,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;UACtBkI,kBAAkB,IAAIC,IAAI;UAC1B;QACF;;QAEA;QACA,IAAIG,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,EAAE;UACvB,IAAIvH,KAAK;UACT,IAAIqH,SAAS,KAAK,KAAK,EAAE;YACvBrH,KAAK,GAAG,MAAM;UAChB,CAAC,MAAM,IAAIqH,SAAS,KAAK,MAAM,EAAE;YAC/BrH,KAAK,GAAG,KAAK;UACf,CAAC,MAAM;YACLA,KAAK,GAAGsH,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,MAAM;UAC9C;UACAF,SAAS,GAAGrH,KAAK;UAEjBkH,kBAAkB,IAAI,+BAA+BlH,KAAK,KAAKmH,IAAI,SAAS;QAC9E,CAAC,MAAM;UACLD,kBAAkB,IAAIC,IAAI;QAC5B;MACF,CAAC,CAAC;MAEFL,IAAI,IAAI,4BAA4BI,kBAAkB,MAAM;IAC9D,CAAC,CAAC;IAEFJ,IAAI,IAAI,QAAQ;IAChB,OAAOA,IAAI;EACb,CAAC;;EAED;EACA,MAAMU,qBAAqB,GAAI7J,IAAI,IAAK;IACtC;IACA,MAAMiJ,UAAU,GAAGjJ,IAAI,CAACkJ,KAAK,CAAC,YAAY,CAAC;IAC3C,IAAIC,IAAI,GAAG,kDAAkD;IAE7DF,UAAU,CAAChK,OAAO,CAACmK,SAAS,IAAI;MAC9B,IAAIA,SAAS,CAAC/H,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;;MAE7B;MACA,MAAMiI,KAAK,GAAGF,SAAS,CAACF,KAAK,CAAC,OAAO,CAAC;MACtC,IAAIK,kBAAkB,GAAG,EAAE;MAE3BD,KAAK,CAACrK,OAAO,CAACuK,IAAI,IAAI;QACpB,IAAIA,IAAI,CAACnI,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;UACtBkI,kBAAkB,IAAIC,IAAI;QAC5B,CAAC,MAAM;UACLD,kBAAkB,IAAI,mCAAmCC,IAAI,SAAS;QACxE;MACF,CAAC,CAAC;MAEFL,IAAI,IAAI,4BAA4BI,kBAAkB,MAAM;IAC9D,CAAC,CAAC;IAEFJ,IAAI,IAAI,QAAQ;IAChB,OAAOA,IAAI;EACb,CAAC;;EAED;EACA,MAAMW,wBAAwB,GAAI9J,IAAI,IAAK;IACzC;IACA,MAAMiJ,UAAU,GAAGjJ,IAAI,CAACkJ,KAAK,CAAC,YAAY,CAAC;IAC3C,IAAIC,IAAI,GAAG,2BAA2B;IAEtCF,UAAU,CAAChK,OAAO,CAACmK,SAAS,IAAI;MAC9B,IAAIA,SAAS,CAAC/H,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;;MAE7B;MACA,MAAMiI,KAAK,GAAGF,SAAS,CAACF,KAAK,CAAC,OAAO,CAAC;MACtC,IAAIK,kBAAkB,GAAG,EAAE;MAE3BD,KAAK,CAACrK,OAAO,CAACuK,IAAI,IAAI;QACpB,IAAIA,IAAI,CAACnI,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;UACtBkI,kBAAkB,IAAIC,IAAI;QAClC,CAAC,MAAM;UACC;UACA,MAAMO,WAAW,GAAG,CAAC,gBAAgB,EAAE,eAAe,EAAE,kBAAkB,CAAC;UAC3E,MAAMC,WAAW,GAAGD,WAAW,CAACJ,IAAI,CAACM,KAAK,CAACN,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGG,WAAW,CAACjL,MAAM,CAAC,CAAC;UAE/EyK,kBAAkB,IAAI,gBAAgBS,WAAW,KAAKR,IAAI,SAAS;QACrE;MACF,CAAC,CAAC;MAEFL,IAAI,IAAI,4BAA4BI,kBAAkB,MAAM;IAC9D,CAAC,CAAC;IAEFJ,IAAI,IAAI,QAAQ;IAChB,OAAOA,IAAI;EACb,CAAC;;EAED;EACA,MAAMe,oBAAoB,GAAGA,CAAA,KAAM;IACjC;IACA,MAAMC,YAAY,GAAG/M,QAAQ,CAACyB,gBAAgB,CAAC,oBAAoB,CAAC;IACpEsL,YAAY,CAAClL,OAAO,CAAC,CAAC2C,OAAO,EAAE7B,KAAK,KAAK;MACvC;MACA,MAAMqK,KAAK,GAAGT,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC;MAC/BhI,OAAO,CAACpE,KAAK,CAAC6M,cAAc,GAAG,GAAGD,KAAK,GAAG;IAC5C,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAME,uBAAuB,GAAGA,CAAA,KAAM;IACpC;IACA,MAAMC,WAAW,GAAGnN,QAAQ,CAACuD,aAAa,CAAC,uBAAuB,CAAC;IACnE,IAAI,CAAC4J,WAAW,EAAE;MAChB9N,OAAO,CAACgE,KAAK,CAAC,aAAa,CAAC;MAC5B;IACF;;IAEA;IACA,IAAI+J,mBAAmB,GAAG,IAAI;;IAE9B;IACA,MAAMC,gBAAgB,GAAIjK,CAAC,IAAK;MAC9B;MACA,MAAMkK,MAAM,GAAGlK,CAAC,CAACmK,OAAO;;MAExB;MACA,MAAMC,QAAQ,GAAGL,WAAW,CAAC1L,gBAAgB,CAAC,cAAc,CAAC;MAC7D,IAAIgM,SAAS,GAAG,IAAI;MACpB,IAAIC,WAAW,GAAGC,QAAQ;;MAE1B;MACAH,QAAQ,CAAC3L,OAAO,CAAC+L,IAAI,IAAI;QACvB,MAAMvI,IAAI,GAAGuI,IAAI,CAACtI,qBAAqB,CAAC,CAAC;QACzC,MAAMuI,UAAU,GAAGxI,IAAI,CAACG,GAAG,GAAGH,IAAI,CAAC2F,MAAM,GAAG,CAAC;QAC7C,MAAM8C,QAAQ,GAAGvB,IAAI,CAACwB,GAAG,CAACT,MAAM,GAAGO,UAAU,CAAC;;QAE9C;QACA,IAAIP,MAAM,IAAIjI,IAAI,CAACG,GAAG,IAAI8H,MAAM,IAAIjI,IAAI,CAAC2I,MAAM,EAAE;UAC/C,IAAIF,QAAQ,GAAGJ,WAAW,EAAE;YAC1BA,WAAW,GAAGI,QAAQ;YACtBL,SAAS,GAAGG,IAAI;UACpB;QACF;MACF,CAAC,CAAC;;MAEA;MACA,IAAIR,mBAAmB,IAAIA,mBAAmB,KAAKK,SAAS,EAAE;QAC5D;QACAL,mBAAmB,CAACjE,SAAS,CAACxI,MAAM,CAAC,aAAa,CAAC;MACrD;MAEA,IAAI8M,SAAS,EAAE;QACb;QACAA,SAAS,CAACtE,SAAS,CAAChE,GAAG,CAAC,aAAa,CAAC;QACtCiI,mBAAmB,GAAGK,SAAS;;QAE/B;QACApO,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEmO,SAAS,CAACtN,WAAW,CAAC8N,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;MACvE,CAAC,MAAM,IAAIb,mBAAmB,EAAE;QAC9B;QACAA,mBAAmB,CAACjE,SAAS,CAACxI,MAAM,CAAC,aAAa,CAAC;QACnDyM,mBAAmB,GAAG,IAAI;MAC5B;IACF,CAAC;;IAED;IACA,MAAMc,iBAAiB,GAAGA,CAAA,KAAM;MAC9B;MACA,IAAId,mBAAmB,EAAE;QACvBA,mBAAmB,CAACjE,SAAS,CAACxI,MAAM,CAAC,aAAa,CAAC;QACnDyM,mBAAmB,GAAG,IAAI;MAC5B;IACF,CAAC;;IAED;IACAhP,MAAM,CAACI,YAAY,GAAGJ,MAAM,CAACI,YAAY,IAAI;MAAEC,mBAAmB,EAAE;IAAG,CAAC;IACxEL,MAAM,CAACI,YAAY,CAACC,mBAAmB,CAAC0D,IAAI,CAC1C;MAAEqC,OAAO,EAAE2I,WAAW;MAAEgB,KAAK,EAAE,WAAW;MAAEC,OAAO,EAAEf;IAAiB,CAAC,EACvE;MAAE7I,OAAO,EAAE2I,WAAW;MAAEgB,KAAK,EAAE,YAAY;MAAEC,OAAO,EAAEF;IAAkB,CAC1E,CAAC;;IAED;IACAf,WAAW,CAAC/G,gBAAgB,CAAC,WAAW,EAAEiH,gBAAgB,CAAC;IAC3DF,WAAW,CAAC/G,gBAAgB,CAAC,YAAY,EAAE8H,iBAAiB,CAAC;IAE7D7O,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;EAC/B,CAAC;;EAED;EACA5B,SAAS,CAAC,MAAM;IACdC,QAAQ,CAACM,mBAAmB,CAACC,SAAS,GAAG,iDAAiDP,QAAQ,CAACQ,OAAO,oBAAoB;EAChI,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAT,SAAS,CAAC,MAAM;IACd,IAAI2K,WAAW,KAAK,cAAc,EAAE;MAClC;MACAlH,UAAU,CAAC,MAAM;QACfkN,qBAAqB,CAAC,CAAC;MACzB,CAAC,EAAE,EAAE,CAAC;IACR;EACF,CAAC,EAAE,CAAChG,WAAW,EAAEI,eAAe,CAAC,CAAC;;EAElC;EACA,MAAM6F,aAAa,GAAG,MAAOvG,IAAI,IAAK;IACpC,IAAI;MACF,MAAMwG,OAAO,GAAGC,GAAG,CAACC,eAAe,CAAC1G,IAAI,CAAC;MACzC,MAAM2G,WAAW,GAAG/Q,QAAQ,CAACgR,WAAW,CAACJ,OAAO,CAAC;MACjD,MAAMK,GAAG,GAAG,MAAMF,WAAW,CAACG,OAAO;MAErC9F,cAAc,CAAC6F,GAAG,CAAC;MACnBnH,aAAa,CAACmH,GAAG,CAACE,QAAQ,CAAC;MAC3BtH,cAAc,CAAC,CAAC,CAAC;;MAEjB;MACA,MAAMuH,qBAAqB,CAACH,GAAG,EAAE,CAAC,CAAC;;MAEnC;MACAvP,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEsP,GAAG,CAACE,QAAQ,CAAC;IAC1C,CAAC,CAAC,OAAOzL,KAAK,EAAE;MACdhE,OAAO,CAACgE,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;MACjC4D,KAAK,CAAC,iBAAiB,CAAC;IAC1B;EACF,CAAC;;EAED;EACA,MAAM8H,qBAAqB,GAAG,MAAAA,CAAOH,GAAG,EAAEI,OAAO,KAAK;IACpD,IAAI;MACF,MAAMC,IAAI,GAAG,MAAML,GAAG,CAACM,OAAO,CAACF,OAAO,CAAC;MACvC,MAAM7O,WAAW,GAAG,MAAM8O,IAAI,CAACE,cAAc,CAAC,CAAC;MAC/C,MAAMC,QAAQ,GAAGH,IAAI,CAACI,WAAW,CAAC;QAAEC,KAAK,EAAE;MAAI,CAAC,CAAC;;MAEjD;MACA,MAAMtG,iBAAiB,GAAG,MAAMuG,eAAe,CAACpP,WAAW,CAAC;MAE5D,IAAI6I,iBAAiB,EAAE;QACrB;QACA,MAAMwG,cAAc,CAACrP,WAAW,EAAEiP,QAAQ,CAAC;MAC7C,CAAC,MAAM;QACL;QACA,MAAMK,kBAAkB,CAACR,IAAI,EAAE5G,WAAW,CAAC;MAC7C;;MAEA;MACA,IAAIA,WAAW,KAAK,cAAc,EAAE;QAClClH,UAAU,CAAC,MAAM;UACf+L,uBAAuB,CAAC,CAAC;QAC3B,CAAC,EAAE,EAAE,CAAC;MACR;MAEA,OAAO,IAAI,CAAC,CAAC;IACf,CAAC,CAAC,OAAO7J,KAAK,EAAE;MACdhE,OAAO,CAACgE,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;MACnCwF,UAAU,CAAC,sBAAsB,CAAC;MAClC,OAAO,KAAK;IACd;EACF,CAAC;;EAED;EACA,MAAM0G,eAAe,GAAG,MAAOpP,WAAW,IAAK;IAC7C,MAAMuP,SAAS,GAAGvP,WAAW,CAACwP,KAAK;IACnC,IAAIC,QAAQ,GAAGF,SAAS,CAAC7M,GAAG,CAACgN,IAAI,IAAIA,IAAI,CAACC,GAAG,CAAC,CAAChN,IAAI,CAAC,EAAE,CAAC;;IAEvD;IACA;IACA;IACA;IACA,MAAMiN,cAAc,GAAG,uBAAuB,CAACC,IAAI,CAACJ,QAAQ,CAAC;IAC7D,MAAMK,qBAAqB,GAAG,oBAAoB,CAACD,IAAI,CAACJ,QAAQ,CAAC;;IAEjE;IACA,IAAIM,eAAe,GAAG,CAAC;IACvB,IAAIC,qBAAqB,GAAG,CAAC;;IAE7B;IACA,MAAMC,OAAO,GAAG,IAAIxO,GAAG,CAAC,CAAC;IACzB8N,SAAS,CAAC7N,OAAO,CAACgO,IAAI,IAAI;MACxB,MAAMQ,IAAI,GAAG9D,IAAI,CAAC+D,KAAK,CAACT,IAAI,CAACU,SAAS,CAAC,CAAC,CAAC,CAAC;MAC1C,IAAI,CAACH,OAAO,CAACpO,GAAG,CAACqO,IAAI,CAAC,EAAE;QACtBD,OAAO,CAACnO,GAAG,CAACoO,IAAI,EAAE,EAAE,CAAC;MACvB;MACAD,OAAO,CAAClO,GAAG,CAACmO,IAAI,CAAC,CAAClO,IAAI,CAAC0N,IAAI,CAAC;IAC9B,CAAC,CAAC;IAEF,MAAMW,KAAK,GAAG,CAAC,GAAGJ,OAAO,CAACK,MAAM,CAAC,CAAC,CAAC;IAEnCD,KAAK,CAAC3O,OAAO,CAAC+L,IAAI,IAAI;MACpB,MAAM8C,QAAQ,GAAG9C,IAAI,CAAC/K,GAAG,CAACgN,IAAI,IAAIA,IAAI,CAACC,GAAG,CAAC,CAAChN,IAAI,CAAC,EAAE,CAAC;MACpD,IAAI4N,QAAQ,CAAChP,MAAM,GAAG,EAAE,EAAEwO,eAAe,EAAE;MAC3C,IAAI,MAAM,CAACF,IAAI,CAACU,QAAQ,CAAC,EAAEP,qBAAqB,EAAE;IACpD,CAAC,CAAC;IAEF,MAAMQ,cAAc,GAAGT,eAAe,GAAGM,KAAK,CAAC9O,MAAM;IACrD,MAAMkP,eAAe,GAAGT,qBAAqB,GAAGK,KAAK,CAAC9O,MAAM;IAE5D,OAAOqO,cAAc,IAAIE,qBAAqB,IAAKU,cAAc,GAAG,GAAG,IAAIC,eAAe,GAAG,GAAI;EACnG,CAAC;;EAED;EACA,MAAMpB,cAAc,GAAG,MAAAA,CAAOrP,WAAW,EAAEiP,QAAQ,KAAK;IACtD,MAAMM,SAAS,GAAGvP,WAAW,CAACwP,KAAK;;IAEnC;IACA,IAAIkB,WAAW,GAAG,4BAA4B;IAE9CnB,SAAS,CAAC7N,OAAO,CAACgO,IAAI,IAAI;MACxB;MACA,MAAMiB,CAAC,GAAGjB,IAAI,CAACU,SAAS,CAAC,CAAC,CAAC;MAC3B,MAAMQ,CAAC,GAAG3B,QAAQ,CAACpE,MAAM,GAAG6E,IAAI,CAACU,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;;MAE/C;MACA,MAAMS,QAAQ,GAAGzE,IAAI,CAAC0E,IAAI,CAACpB,IAAI,CAACU,SAAS,CAAC,CAAC,CAAC,GAAGV,IAAI,CAACU,SAAS,CAAC,CAAC,CAAC,GAAGV,IAAI,CAACU,SAAS,CAAC,CAAC,CAAC,GAAGV,IAAI,CAACU,SAAS,CAAC,CAAC,CAAC,CAAC;MACzG,MAAMrL,UAAU,GAAG2K,IAAI,CAACqB,QAAQ,IAAIrB,IAAI,CAACqB,QAAQ,CAACzK,WAAW,CAAC,CAAC,CAAC9B,QAAQ,CAAC,MAAM,CAAC,GAAG,MAAM,GAAG,QAAQ;;MAEpG;MACA,MAAMwM,UAAU,GAAGtB,IAAI,CAACC,GAAG,CAAChE,KAAK,CAAC,EAAE,CAAC,CAAChJ,IAAI,CAAC,QAAQ,CAAC;;MAEpD;MACA+N,WAAW,IAAI;AACrB;AACA,gBAAgBC,CAAC;AACjB,eAAeC,CAAC;AAChB,qBAAqBC,QAAQ;AAC7B,uBAAuB9L,UAAU;AACjC;AACA;AACA;AACA;AACA,UAAUiM,UAAU,SAAS;IACzB,CAAC,CAAC;IAEFN,WAAW,IAAI,QAAQ;IACvBhI,UAAU,CAACgI,WAAW,CAAC;EACzB,CAAC;;EAED;EACA,MAAMO,qBAAqB,GAAGA,CAAC5M,OAAO,EAAEsM,CAAC,EAAEC,CAAC,KAAK;IAC/C,MAAMM,KAAK,GAAG7M,OAAO,CAACI,UAAU;IAChC,KAAK,IAAI1B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmO,KAAK,CAAC3P,MAAM,EAAEwB,CAAC,EAAE,EAAE;MACrC,MAAMW,IAAI,GAAGwN,KAAK,CAACnO,CAAC,CAAC;MACrB,IAAIW,IAAI,CAACgB,QAAQ,KAAKC,IAAI,CAACC,SAAS,EAAE;QACpC,MAAMuM,KAAK,GAAGtR,QAAQ,CAACuR,WAAW,CAAC,CAAC;QACpCD,KAAK,CAACE,kBAAkB,CAAC3N,IAAI,CAAC;QAC9B,MAAM4N,KAAK,GAAGH,KAAK,CAACI,cAAc,CAAC,CAAC;QACpC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAAC/P,MAAM,EAAEiQ,CAAC,EAAE,EAAE;UACrC,MAAMtM,IAAI,GAAGoM,KAAK,CAACE,CAAC,CAAC;UACrB,IAAIZ,CAAC,IAAI1L,IAAI,CAACG,GAAG,IAAIuL,CAAC,IAAI1L,IAAI,CAAC2I,MAAM,IACjC8C,CAAC,IAAIzL,IAAI,CAACuM,IAAI,IAAId,CAAC,IAAIzL,IAAI,CAACwM,KAAK,EAAE;YACrC,OAAOhO,IAAI;UACb;QACF;MACF,CAAC,MAAM,IAAIA,IAAI,CAACgB,QAAQ,KAAKC,IAAI,CAACE,YAAY,EAAE;QAC9C,MAAM8M,KAAK,GAAGV,qBAAqB,CAACvN,IAAI,EAAEiN,CAAC,EAAEC,CAAC,CAAC;QAC/C,IAAIe,KAAK,EAAE,OAAOA,KAAK;MACzB;IACF;IACA,OAAO,IAAI;EACb,CAAC;;EAED;EACA,MAAMC,wBAAwB,GAAInP,IAAI,IAAK;IACzC;IACA,MAAMsJ,KAAK,GAAGtJ,IAAI,CAACkJ,KAAK,CAAC,iBAAiB,CAAC;IAC3C,IAAIkG,MAAM,GAAG,EAAE;IACf,IAAI1F,SAAS,GAAG,IAAI;IAEpBJ,KAAK,CAACrK,OAAO,CAACuK,IAAI,IAAI;MACpB,IAAI,CAACA,IAAI,IAAI,OAAO,CAAC4D,IAAI,CAAC5D,IAAI,CAAC,EAAE;QAC/B4F,MAAM,IAAI5F,IAAI;QACd;MACF;MAEA,IAAIG,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,EAAE;QACvB,IAAIvH,KAAK;QACT,IAAIqH,SAAS,KAAK,KAAK,EAAE;UACvBrH,KAAK,GAAG,MAAM;QAChB,CAAC,MAAM,IAAIqH,SAAS,KAAK,MAAM,EAAE;UAC/BrH,KAAK,GAAG,KAAK;QACf,CAAC,MAAM;UACLA,KAAK,GAAGsH,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,MAAM;QAC9C;QACAF,SAAS,GAAGrH,KAAK;QAEjB+M,MAAM,IAAI,+BAA+B/M,KAAK,KAAKmH,IAAI,SAAS;MAClE,CAAC,MAAM;QACL4F,MAAM,IAAI5F,IAAI;MAChB;IACF,CAAC,CAAC;IAEF,OAAO4F,MAAM;EACf,CAAC;;EAED;EACA,MAAMvC,kBAAkB,GAAG,MAAAA,CAAOR,IAAI,EAAEpJ,IAAI,KAAK;IAC/C,IAAI;MACF,MAAM1F,WAAW,GAAG,MAAM8O,IAAI,CAACE,cAAc,CAAC,CAAC;MAC/C,MAAMO,SAAS,GAAGvP,WAAW,CAACwP,KAAK;MACnC,IAAIsC,aAAa,GAAGvC,SAAS,CAAC7M,GAAG,CAACgN,IAAI,IAAIA,IAAI,CAACC,GAAG,CAAC,CAAChN,IAAI,CAAC,GAAG,CAAC;;MAE7D;MACAmP,aAAa,GAAGA,aAAa,CAACC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAACjO,IAAI,CAAC,CAAC;;MAEzD;MACA,MAAMyF,SAAS,GAAGyI,kBAAkB,CAACF,aAAa,CAAC;;MAEnD;MACA,IAAIG,gBAAgB,GAAG,EAAE;MACzB,QAAOvM,IAAI;QACT,KAAK,QAAQ;UACXuM,gBAAgB,GAAGC,qBAAqB,CAAC3I,SAAS,CAAC;UACnD;QACF,KAAK,QAAQ;UACX;UACArK,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;UAC9B8S,gBAAgB,GAAGE,2BAA2B,CAAC5I,SAAS,CAAC;UACzD;QACF,KAAK,cAAc;UACjB0I,gBAAgB,GAAGG,6BAA6B,CAAC7I,SAAS,CAAC;UAC3D;QACF,KAAK,QAAQ;UACX0I,gBAAgB,GAAGC,qBAAqB,CAAC3I,SAAS,CAAC;UACnD;QACF,KAAK,gBAAgB;UACnB0I,gBAAgB,GAAGI,mCAAmC,CAAC9I,SAAS,CAAC;UACjE;QACF,KAAK,eAAe;UAClB0I,gBAAgB,GAAGK,sCAAsC,CAAC/I,SAAS,CAAC;UACpE;QACF;UACE0I,gBAAgB,GAAGC,qBAAqB,CAAC3I,SAAS,CAAC;MACvD;MAEAb,UAAU,CAACuJ,gBAAgB,CAAC;;MAE5B;MACA,IAAIvM,IAAI,KAAK,QAAQ,EAAE;QACrB1E,UAAU,CAAC,MAAM;UACf,MAAMgM,WAAW,GAAGnN,QAAQ,CAACuD,aAAa,CAAC,sBAAsB,CAAC;UAClE,IAAI4J,WAAW,EAAE;YACf9N,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;YACzB,MAAMuM,UAAU,GAAGsB,WAAW,CAAC1L,gBAAgB,CAAC,gBAAgB,CAAC;YACjEpC,OAAO,CAACC,GAAG,CAAC,MAAMuM,UAAU,CAACnK,MAAM,MAAM,CAAC;;YAE1C;YACA,IAAImK,UAAU,CAACnK,MAAM,GAAG,CAAC,EAAE;cACzB,MAAMgR,SAAS,GAAG7G,UAAU,CAAC,CAAC,CAAC;cAC/B,MAAM8G,MAAM,GAAGvU,MAAM,CAACwU,gBAAgB,CAACF,SAAS,CAAC;cACjDrT,OAAO,CAACC,GAAG,CAAC,UAAU,EAAE;gBACtB2F,KAAK,EAAE0N,MAAM,CAAC1N,KAAK;gBACnBnE,eAAe,EAAE6R,MAAM,CAAC7R,eAAe;gBACvC+R,UAAU,EAAEF,MAAM,CAACE,UAAU;gBAC7B7B,QAAQ,EAAE2B,MAAM,CAAC3B;cACnB,CAAC,CAAC;YACJ;UACF;QACF,CAAC,EAAE,GAAG,CAAC;MACT;IACF,CAAC,CAAC,OAAO3N,KAAK,EAAE;MACdhE,OAAO,CAACgE,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;MAClCwF,UAAU,CAAC,sBAAsB,CAAC;IACpC;EACF,CAAC;;EAED;EACA,MAAMsJ,kBAAkB,GAAIvP,IAAI,IAAK;IACnC;IACA;IACA,MAAMkQ,aAAa,GAAG,mBAAmB;;IAEzC;IACA,MAAMpJ,SAAS,GAAG,EAAE;IACpB,IAAIqJ,SAAS,GAAG,CAAC;IACjB,IAAIC,KAAK;IAET,OAAO,CAACA,KAAK,GAAGF,aAAa,CAACG,IAAI,CAACrQ,IAAI,CAAC,MAAM,IAAI,EAAE;MAClD,MAAMsQ,QAAQ,GAAGF,KAAK,CAACrQ,KAAK,GAAGqQ,KAAK,CAAC,CAAC,CAAC,CAACtR,MAAM;MAC9C,MAAMyR,QAAQ,GAAGvQ,IAAI,CAACqL,SAAS,CAAC8E,SAAS,EAAEG,QAAQ,CAAC,CAACjP,IAAI,CAAC,CAAC;;MAE3D;MACA,IAAIkP,QAAQ,EAAE;QACZzJ,SAAS,CAACvH,IAAI,CAACgR,QAAQ,CAAC;MAC1B;MAEAJ,SAAS,GAAGG,QAAQ;IACtB;;IAEA;IACA,IAAIH,SAAS,GAAGnQ,IAAI,CAAClB,MAAM,EAAE;MAC3B,MAAM0R,YAAY,GAAGxQ,IAAI,CAACqL,SAAS,CAAC8E,SAAS,CAAC,CAAC9O,IAAI,CAAC,CAAC;MACrD,IAAImP,YAAY,EAAE;QAChB1J,SAAS,CAACvH,IAAI,CAACiR,YAAY,CAAC;MAC9B;IACF;IAEA,OAAO1J,SAAS;EAClB,CAAC;;EAED;EACA,MAAM2J,6BAA6B,GAAIzQ,IAAI,IAAK;IAC9C;IACA,MAAMkQ,aAAa,GAAG,wBAAwB;;IAE9C;IACA,MAAMQ,QAAQ,GAAG,EAAE;IACnB,IAAIP,SAAS,GAAG,CAAC;IACjB,IAAIC,KAAK;IAET,OAAO,CAACA,KAAK,GAAGF,aAAa,CAACG,IAAI,CAACrQ,IAAI,CAAC,MAAM,IAAI,EAAE;MAClD,MAAMsQ,QAAQ,GAAGF,KAAK,CAACrQ,KAAK,GAAGqQ,KAAK,CAAC,CAAC,CAAC,CAACtR,MAAM;MAC9C,MAAM6R,OAAO,GAAG3Q,IAAI,CAACqL,SAAS,CAAC8E,SAAS,EAAEG,QAAQ,CAAC,CAACjP,IAAI,CAAC,CAAC;;MAE1D;MACA,IAAIsP,OAAO,EAAE;QACXD,QAAQ,CAACnR,IAAI,CAACoR,OAAO,CAAC;MACxB;MAEAR,SAAS,GAAGG,QAAQ;IACtB;;IAEA;IACA,IAAIH,SAAS,GAAGnQ,IAAI,CAAClB,MAAM,EAAE;MAC3B,MAAM8R,WAAW,GAAG5Q,IAAI,CAACqL,SAAS,CAAC8E,SAAS,CAAC,CAAC9O,IAAI,CAAC,CAAC;MACpD,IAAIuP,WAAW,EAAE;QACfF,QAAQ,CAACnR,IAAI,CAACqR,WAAW,CAAC;MAC5B;IACF;IAEA,OAAOF,QAAQ;EACjB,CAAC;;EAED;EACA,MAAMjB,qBAAqB,GAAI3I,SAAS,IAAK;IAC3C,IAAIqC,IAAI,GAAG,2BAA2B;IAEtCrC,SAAS,CAAC7H,OAAO,CAACsR,QAAQ,IAAI;MAC5B,IAAIA,QAAQ,CAAClP,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAC5B8H,IAAI,IAAI,4BAA4BoH,QAAQ,MAAM;IACpD,CAAC,CAAC;IAEFpH,IAAI,IAAI,QAAQ;IAChB,OAAOA,IAAI;EACb,CAAC;;EAED;EACA,MAAM0H,+BAA+B,GAAI/J,SAAS,IAAK;IACrD,IAAIqC,IAAI,GAAG,wCAAwC;IAEnDrC,SAAS,CAAC7H,OAAO,CAACsR,QAAQ,IAAI;MAC5B,IAAIA,QAAQ,CAAClP,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;;MAE5B;MACA8H,IAAI,IAAI,0CAA0CoH,QAAQ,MAAM;IAClE,CAAC,CAAC;IAEFpH,IAAI,IAAI,QAAQ;IAChB,OAAOA,IAAI;EACb,CAAC;;EAED;EACA,MAAMwG,6BAA6B,GAAI7I,SAAS,IAAK;IACnD,IAAIqC,IAAI,GAAG,gDAAgD;IAE3DrC,SAAS,CAAC7H,OAAO,CAAC,CAACsR,QAAQ,EAAExQ,KAAK,KAAK;MACrC,IAAIwQ,QAAQ,CAAClP,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;;MAE5B;MACA8H,IAAI,IAAI,uCAAuCpJ,KAAK,oBAAoBwQ,QAAQ,CAAClF,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,gCAAgCkF,QAAQ,QAAQ;IACnJ,CAAC,CAAC;IAEFpH,IAAI,IAAI,QAAQ;IAChB,OAAOA,IAAI;EACb,CAAC;;EAED;EACA,MAAMyG,mCAAmC,GAAI9I,SAAS,IAAK;IACzD,IAAIqC,IAAI,GAAG,2BAA2B;IAEtCrC,SAAS,CAAC7H,OAAO,CAACsR,QAAQ,IAAI;MAC5B,IAAIA,QAAQ,CAAClP,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;;MAE5B;MACA,MAAMiI,KAAK,GAAGiH,QAAQ,CAACrH,KAAK,CAAC,OAAO,CAAC;MACrC,IAAI4H,iBAAiB,GAAG,EAAE;MAE1BxH,KAAK,CAACrK,OAAO,CAACuK,IAAI,IAAI;QACpB,IAAIA,IAAI,CAACnI,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;UACtByP,iBAAiB,IAAItH,IAAI;QAC3B,CAAC,MAAM;UACL;UACA,MAAMO,WAAW,GAAG,CAAC,gBAAgB,EAAE,eAAe,EAAE,kBAAkB,CAAC;UAC3E,MAAMC,WAAW,GAAGD,WAAW,CAACJ,IAAI,CAACM,KAAK,CAACN,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGG,WAAW,CAACjL,MAAM,CAAC,CAAC;UAE/EgS,iBAAiB,IAAI,gBAAgB9G,WAAW,KAAKR,IAAI,SAAS;QACpE;MACF,CAAC,CAAC;MAEFL,IAAI,IAAI,4BAA4B2H,iBAAiB,MAAM;IAC7D,CAAC,CAAC;IAEF3H,IAAI,IAAI,QAAQ;IAChB,OAAOA,IAAI;EACb,CAAC;;EAED;EACA,MAAM0G,sCAAsC,GAAI/I,SAAS,IAAK;IAC5D;IACAtL,MAAM,CAACuL,qBAAqB,GAAGD,SAAS;;IAExC;IACA,OAAO;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuDA,SAAS,CAAChI,MAAM;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;EACX,CAAC;;EAED;EACA,MAAMiS,aAAa,GAAG,MAAO5L,IAAI,IAAK;IACpC,IAAI;MACF,MAAMnF,IAAI,GAAG,MAAMmF,IAAI,CAACnF,IAAI,CAAC,CAAC;;MAE9B;MACA,IAAIwP,gBAAgB,GAAG,EAAE;MAEzB,IAAI/J,WAAW,KAAK,eAAe,EAAE;QACnC;QACA,MAAMiL,QAAQ,GAAGD,6BAA6B,CAACzQ,IAAI,CAAC;QACpDwP,gBAAgB,GAAGK,sCAAsC,CAACa,QAAQ,CAAC;;QAEnE;QACAnS,UAAU,CAAC,MAAM;UACfsI,sBAAsB,CAAC,CAAC;QAC1B,CAAC,EAAE,GAAG,CAAC;MACT,CAAC,MAAM;QACL;QACA,MAAMC,SAAS,GAAGyI,kBAAkB,CAACvP,IAAI,CAAC;QAE1C,QAAOyF,WAAW;UAChB,KAAK,QAAQ;YACX+J,gBAAgB,GAAGC,qBAAqB,CAAC3I,SAAS,CAAC;YACnD;UACF,KAAK,QAAQ;YACX0I,gBAAgB,GAAGqB,+BAA+B,CAAC/J,SAAS,CAAC;YAC7D;UACF,KAAK,cAAc;YACjB0I,gBAAgB,GAAGG,6BAA6B,CAAC7I,SAAS,CAAC;YAC3D;UACF,KAAK,gBAAgB;YACnB0I,gBAAgB,GAAGI,mCAAmC,CAAC9I,SAAS,CAAC;YACjE;UACF;YACE0I,gBAAgB,GAAGC,qBAAqB,CAAC3I,SAAS,CAAC;QACvD;MACF;;MAEA;MACAb,UAAU,CAACuJ,gBAAgB,CAAC;MAC5BzK,WAAW,CAACI,IAAI,CAAC6L,IAAI,CAAC;;MAEtB;MACAnM,aAAa,CAAC,CAAC,CAAC;MAChBD,cAAc,CAAC,CAAC,CAAC;IACnB,CAAC,CAAC,OAAOnE,KAAK,EAAE;MACdhE,OAAO,CAACgE,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;MAChCwF,UAAU,CAAC,4CAA4C,CAAC;IAC1D;EACF,CAAC;;EAED;EACA,MAAMgL,kBAAkB,GAAG,MAAO9L,IAAI,IAAK;IACzC,IAAI;MACF,MAAMnF,IAAI,GAAG,MAAMmF,IAAI,CAACnF,IAAI,CAAC,CAAC;;MAE9B;MACA,IAAImJ,IAAI,GAAG,EAAE;MACb,IAAI;QACF,IAAI3N,MAAM,CAACP,MAAM,EAAE;UACjBkO,IAAI,GAAG3N,MAAM,CAACP,MAAM,CAACiW,KAAK,CAAClR,IAAI,CAAC;QAClC,CAAC,MAAM;UACL;UACAmJ,IAAI,GAAG,QAAQnJ,IAAI,CAACkJ,KAAK,CAAC,MAAM,CAAC,CAACjJ,GAAG,CAACkR,CAAC,IAAI,MAAMA,CAAC,MAAM,CAAC,CAACjR,IAAI,CAAC,EAAE,CAAC,QAAQ;QAC5E;MACF,CAAC,CAAC,OAAOkR,UAAU,EAAE;QACnB3U,OAAO,CAACgE,KAAK,CAAC,eAAe,EAAE2Q,UAAU,CAAC;QAC1CjI,IAAI,GAAG,QAAQnJ,IAAI,QAAQ;MAC7B;;MAEA;MACA,MAAMqR,OAAO,GAAGjU,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;MAC7CgU,OAAO,CAACC,SAAS,GAAGnI,IAAI;MACxB,MAAMoI,SAAS,GAAGF,OAAO,CAAC9T,WAAW,IAAI8T,OAAO,CAACG,SAAS,IAAI,EAAE;;MAEhE;MACA,MAAM1K,SAAS,GAAGyI,kBAAkB,CAACgC,SAAS,CAAC;;MAE/C;MACA,IAAI/B,gBAAgB,GAAG,EAAE;MACzB,QAAO/J,WAAW;QAChB,KAAK,QAAQ;UACX+J,gBAAgB,GAAGC,qBAAqB,CAAC3I,SAAS,CAAC;UACnD;QACF,KAAK,QAAQ;UACX0I,gBAAgB,GAAGqB,+BAA+B,CAAC/J,SAAS,CAAC;UAC7D;QACF,KAAK,cAAc;UACjB0I,gBAAgB,GAAGG,6BAA6B,CAAC7I,SAAS,CAAC;UAC3D;QACF,KAAK,gBAAgB;UACnB0I,gBAAgB,GAAGI,mCAAmC,CAAC9I,SAAS,CAAC;UACjE;QACF,KAAK,eAAe;UAClB;UACA,MAAM4J,QAAQ,GAAGD,6BAA6B,CAACc,SAAS,CAAC;UACzD/B,gBAAgB,GAAGK,sCAAsC,CAACa,QAAQ,CAAC;;UAEnE;UACAnS,UAAU,CAAC,MAAM;YACfsI,sBAAsB,CAAC,CAAC;UAC1B,CAAC,EAAE,GAAG,CAAC;UACP;QACF;UACE2I,gBAAgB,GAAGC,qBAAqB,CAAC3I,SAAS,CAAC;MACvD;;MAEA;MACAb,UAAU,CAACuJ,gBAAgB,CAAC;MAC5BzK,WAAW,CAACI,IAAI,CAAC6L,IAAI,CAAC;;MAEtB;MACAnM,aAAa,CAAC,CAAC,CAAC;MAChBD,cAAc,CAAC,CAAC,CAAC;IACnB,CAAC,CAAC,OAAOnE,KAAK,EAAE;MACdhE,OAAO,CAACgE,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrCwF,UAAU,CAAC,iDAAiD,CAAC;IAC/D;EACF,CAAC;;EAED;EACA,MAAMwL,gBAAgB,GAAG,MAAOjR,CAAC,IAAK;IACpC,MAAMkR,YAAY,GAAGlR,CAAC,CAACmI,MAAM,CAACgJ,KAAK,CAAC,CAAC,CAAC;IACtC,IAAI,CAACD,YAAY,EAAE;IAEnBzM,UAAU,CAAC,IAAI,CAAC;IAChBF,WAAW,CAAC2M,YAAY,CAACV,IAAI,CAAC;IAE9B,IAAI;MACF,IAAIU,YAAY,CAACE,IAAI,KAAK,iBAAiB,EAAE;QAC3C,MAAMlG,aAAa,CAACgG,YAAY,CAAC;MACnC,CAAC,MAAM,IAAIA,YAAY,CAACE,IAAI,KAAK,YAAY,IAAIF,YAAY,CAACV,IAAI,CAACa,QAAQ,CAAC,MAAM,CAAC,EAAE;QACnF,MAAMd,aAAa,CAACW,YAAY,CAAC;MACnC,CAAC,MAAM,IAAIA,YAAY,CAACE,IAAI,KAAK,eAAe,IAAIF,YAAY,CAACV,IAAI,CAACa,QAAQ,CAAC,KAAK,CAAC,EAAE;QACrF,MAAMZ,kBAAkB,CAACS,YAAY,CAAC;MAC1C,CAAC,MAAM;QACHzL,UAAU,CAAC,2CAA2C,CAAC;MACzD;IACF,CAAC,CAAC,OAAOxF,KAAK,EAAE;MACdhE,OAAO,CAACgE,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;MAChCwF,UAAU,CAAC,0CAA0C,CAAC;IACxD,CAAC,SAAS;MACRhB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAM6M,wBAAwB,GAAIC,SAAS,IAAK;IAC9C,MAAMC,MAAM,GAAG5U,QAAQ,CAAC6U,gBAAgB,CAACF,SAAS,EAAEG,UAAU,CAACC,SAAS,CAAC;IACzE,MAAMC,SAAS,GAAG,EAAE;IAEpB,OAAOJ,MAAM,CAACK,QAAQ,CAAC,CAAC,EAAE;MACxB,MAAMpR,IAAI,GAAG+Q,MAAM,CAACM,WAAW;MAC/B,MAAMtS,IAAI,GAAGiB,IAAI,CAAC1D,WAAW;;MAE7B;MACA,IAAI,CAACyC,IAAI,CAACqB,IAAI,CAAC,CAAC,EAAE;;MAElB;MACA,KAAK,IAAIf,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,IAAI,CAAClB,MAAM,EAAEwB,CAAC,EAAE,EAAE;QACpC,IAAI;UACF,MAAMoO,KAAK,GAAGtR,QAAQ,CAACuR,WAAW,CAAC,CAAC;UACpCD,KAAK,CAAC6D,QAAQ,CAACtR,IAAI,EAAEX,CAAC,CAAC;UACvBoO,KAAK,CAAC8D,MAAM,CAACvR,IAAI,EAAEX,CAAC,GAAG,CAAC,CAAC;UAEzB,MAAMmC,IAAI,GAAGiM,KAAK,CAAChM,qBAAqB,CAAC,CAAC;UAC1C,IAAID,IAAI,CAAC0F,KAAK,KAAK,CAAC,IAAI1F,IAAI,CAAC2F,MAAM,KAAK,CAAC,EAAE;;UAE3C;UACAgK,SAAS,CAAC7S,IAAI,CAAC;YACb2O,CAAC,EAAEzL,IAAI,CAACuM,IAAI,GAAGvM,IAAI,CAAC0F,KAAK,GAAC,CAAC;YAAG;YAC9BgG,CAAC,EAAE1L,IAAI,CAAC2I,MAAM;YAAgB;YAC9B5I,IAAI,EAAExC,IAAI,CAACM,CAAC;UACd,CAAC,CAAC;QACJ,CAAC,CAAC,OAAOG,KAAK,EAAE;UACdhE,OAAO,CAACgW,IAAI,CAAC,YAAY,EAAEhS,KAAK,CAAC;UACjC;QACF;MACF;IACF;;IAEA;IACA,OAAO2R,SAAS,CACbM,MAAM,CAACvB,CAAC,IAAIA,CAAC,CAAC3O,IAAI,CAACnB,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC,CACjC3B,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MACd;MACA,MAAM+S,KAAK,GAAGhT,CAAC,CAACwO,CAAC,GAAGvO,CAAC,CAACuO,CAAC;MACvB,IAAIxE,IAAI,CAACwB,GAAG,CAACwH,KAAK,CAAC,GAAG,CAAC,EAAE;QAAE;QACzB,OAAOA,KAAK;MACd;MACA,OAAOhT,CAAC,CAACuO,CAAC,GAAGtO,CAAC,CAACsO,CAAC;IAClB,CAAC,CAAC;EACN,CAAC;;EAED;EACA,MAAM0E,qBAAqB,GAAGA,CAACC,QAAQ,EAAEd,SAAS,KAAK;IACrD;IACA,MAAMe,qBAAqB,GAAGf,SAAS,CAACgB,YAAY,GAAGhB,SAAS,CAACiB,YAAY,IAC3E,CAAC,MAAM,EAAE,QAAQ,EAAE,SAAS,CAAC,CAACjR,QAAQ,CAACvG,MAAM,CAACwU,gBAAgB,CAAC+B,SAAS,CAAC,CAACkB,SAAS,CAAC;;IAEtF;IACA,IAAIC,eAAe;IAEnB,IAAIJ,qBAAqB,EAAE;MACzB;MACA,MAAMK,sBAAsB,GAAGpB,SAAS,CAACiB,YAAY;MACrDE,eAAe,GAAGL,QAAQ,GAAIM,sBAAsB,GAAG,CAAE;;MAEzD;MACApB,SAAS,CAACpP,QAAQ,CAAC;QACjBC,GAAG,EAAE+G,IAAI,CAACyJ,GAAG,CAAC,CAAC,EAAEF,eAAe,CAAC;QAAE;QACnCnQ,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ,CAAC,MAAM;MACL;MACA,MAAMsQ,gBAAgB,GAAGR,QAAQ,GAAGd,SAAS,CAACrP,qBAAqB,CAAC,CAAC,CAACE,GAAG;MACzEsQ,eAAe,GAAGG,gBAAgB,GAAI7X,MAAM,CAACsH,WAAW,GAAG,CAAE;;MAE7D;MACAtH,MAAM,CAACmH,QAAQ,CAAC;QACdC,GAAG,EAAE+G,IAAI,CAACyJ,GAAG,CAAC,CAAC,EAAEF,eAAe,CAAC;QAAE;QACnCnQ,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ;IAEA,OAAOmQ,eAAe;EACxB,CAAC;;EAED;EACA,MAAMI,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,MAAMC,MAAM,GAAGnW,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;IAC5CkW,MAAM,CAACjW,EAAE,GAAG,oBAAoB;IAChCiW,MAAM,CAAC/V,KAAK,CAACC,OAAO,GAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;IAED;IACA,IAAI,CAACL,QAAQ,CAACU,cAAc,CAAC,yBAAyB,CAAC,EAAE;MACvD,MAAMN,KAAK,GAAGJ,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;MAC7CG,KAAK,CAACF,EAAE,GAAG,yBAAyB;MACpCE,KAAK,CAACD,WAAW,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA,OAAO;MACDH,QAAQ,CAACoJ,IAAI,CAAC3I,WAAW,CAACL,KAAK,CAAC;IAClC;IAEA,OAAO+V,MAAM;EACf,CAAC;;EAED;EACA,MAAMC,aAAa,GAAGA,CAACC,YAAY,EAAErB,SAAS,EAAErS,KAAK,KAAK;IACxD;IACA,MAAM2T,gBAAgB,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;;IAEjE;IACA,IAAIA,gBAAgB,CAAC3R,QAAQ,CAAC0R,YAAY,CAACjR,IAAI,CAAC,EAAE;MAChD;MACA,MAAMmR,SAAS,GAAG5T,KAAK,GAAG,CAAC;MAC3B,IAAI4T,SAAS,IAAIvB,SAAS,CAACtT,MAAM;MAAI;MACjCsT,SAAS,CAACuB,SAAS,CAAC,CAACnR,IAAI,CAACnB,IAAI,CAAC,CAAC,KAAK,EAAE;MAAI;MAC3C+Q,SAAS,CAACuB,SAAS,CAAC,CAACxF,CAAC,GAAGsF,YAAY,CAACtF,CAAC,GAAG,CAAC,EAAE;QAAE;QACjD,OAAO,IAAI;MACb;IACF;IAEA,OAAO,KAAK;EACd,CAAC;;EAED;EACA,MAAMyF,iBAAiB,GAAGA,CAACxB,SAAS,EAAEnW,YAAY,KAAK;IACrD,IAAI+H,KAAK,GAAG/H,YAAY;;IAExB;IACA,OAAO+H,KAAK,GAAG,CAAC,EAAE;MAChB,MAAM6P,IAAI,GAAGzB,SAAS,CAACpO,KAAK,GAAG,CAAC,CAAC;MACjC,MAAM8P,OAAO,GAAG1B,SAAS,CAACpO,KAAK,CAAC;;MAEhC;MACA,IAAIwP,aAAa,CAACK,IAAI,EAAEzB,SAAS,EAAEpO,KAAK,GAAG,CAAC,CAAC,IACzC8P,OAAO,CAAC3F,CAAC,GAAG0F,IAAI,CAAC1F,CAAC,GAAG,CAAC,EAAE;QAAE;QAC5B;MACF;MAEAnK,KAAK,EAAE;IACT;IAEA,OAAOA,KAAK;EACd,CAAC;;EAED;EACA,MAAM+P,eAAe,GAAGA,CAAClB,QAAQ,EAAEd,SAAS,EAAEiC,SAAS,GAAG,GAAG,KAAK;IAChE;IACA,MAAMlB,qBAAqB,GAAGf,SAAS,CAACgB,YAAY,GAAGhB,SAAS,CAACiB,YAAY,IAC3E,CAAC,MAAM,EAAE,QAAQ,EAAE,SAAS,CAAC,CAACjR,QAAQ,CAACvG,MAAM,CAACwU,gBAAgB,CAAC+B,SAAS,CAAC,CAACkB,SAAS,CAAC;IAEtF,IAAIH,qBAAqB,EAAE;MACzB;MACA,MAAMmB,UAAU,GAAGlC,SAAS,CAACmC,SAAS;MACtC,MAAMC,aAAa,GAAGF,UAAU,GAAGlC,SAAS,CAACiB,YAAY;;MAEzD;MACA,MAAMoB,YAAY,GAAGH,UAAU,GAAGlC,SAAS,CAACiB,YAAY,GAAGgB,SAAS;MACpE,MAAMK,eAAe,GAAGF,aAAa,GAAGpC,SAAS,CAACiB,YAAY,GAAGgB,SAAS;MAE1E,OAAOnB,QAAQ,IAAIuB,YAAY,IAAIvB,QAAQ,IAAIwB,eAAe;IAChE,CAAC,MAAM;MACL;MACA,MAAMhB,gBAAgB,GAAGR,QAAQ,GAAGd,SAAS,CAACrP,qBAAqB,CAAC,CAAC,CAACE,GAAG;MACzE,MAAMqR,UAAU,GAAGzY,MAAM,CAACqH,OAAO;MACjC,MAAMsR,aAAa,GAAGF,UAAU,GAAGzY,MAAM,CAACsH,WAAW;;MAErD;MACA,MAAMsR,YAAY,GAAGH,UAAU,GAAGzY,MAAM,CAACsH,WAAW,GAAGkR,SAAS;MAChE,MAAMK,eAAe,GAAGF,aAAa,GAAG3Y,MAAM,CAACsH,WAAW,GAAGkR,SAAS;MAEtE,OAAOX,gBAAgB,IAAIe,YAAY,IAAIf,gBAAgB,IAAIgB,eAAe;IAChF;EACF,CAAC;;EAED;EACA,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAI9Y,MAAM,CAACM,UAAU,CAACC,aAAa,CAAC+C,MAAM,KAAK,CAAC,EAAE;MAChD,IAAItD,MAAM,CAACC,WAAW,GAAGD,MAAM,CAACE,UAAU,EAAE;QAC1CF,MAAM,CAACG,UAAU,CAAC,CAAC,CAAC;QACpB;MACF;MACA;IACF;;IAEA;IACAH,MAAM,CAACM,UAAU,CAACG,YAAY,GAAG,CAAC;;IAElC;IACA,MAAMyE,gBAAgB,GAAGtD,QAAQ,CAACuD,aAAa,CAAC,eAAe,CAAC;IAChE,IAAI,CAACD,gBAAgB,EAAE;IAEvB,IAAIlF,MAAM,CAACwU,gBAAgB,CAACtP,gBAAgB,CAAC,CAAC6T,QAAQ,KAAK,QAAQ,EAAE;MACnE7T,gBAAgB,CAAClD,KAAK,CAAC+W,QAAQ,GAAG,UAAU;IAC9C;;IAEA;IACA,IAAIhB,MAAM,GAAGnW,QAAQ,CAACU,cAAc,CAAC,oBAAoB,CAAC;IAC1D,IAAI,CAACyV,MAAM,EAAE;MACXA,MAAM,GAAGD,kBAAkB,CAAC,CAAC;MAC7B5S,gBAAgB,CAAC7C,WAAW,CAAC0V,MAAM,CAAC;IACtC;;IAEA;IACA,IAAIiB,SAAS,GAAGpX,QAAQ,CAACU,cAAc,CAAC,uBAAuB,CAAC;IAChE,IAAI,CAAC0W,SAAS,EAAE;MACdA,SAAS,GAAGpX,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;MACzCmX,SAAS,CAAClX,EAAE,GAAG,uBAAuB;MACtCkX,SAAS,CAAChX,KAAK,CAAC+W,QAAQ,GAAG,UAAU;MACrCC,SAAS,CAAChX,KAAK,CAACU,eAAe,GAAG,sBAAsB;MACxDsW,SAAS,CAAChX,KAAK,CAACiX,YAAY,GAAG,KAAK;MACpCD,SAAS,CAAChX,KAAK,CAACkX,aAAa,GAAG,MAAM;MACtCF,SAAS,CAAChX,KAAK,CAACmX,MAAM,GAAG,KAAK;MAC9BjU,gBAAgB,CAAC7C,WAAW,CAAC2W,SAAS,CAAC;IACzC;;IAEA;IACA,MAAM1B,qBAAqB,GAAGpS,gBAAgB,CAACqS,YAAY,GAAGrS,gBAAgB,CAACsS,YAAY,IACzF,CAAC,MAAM,EAAE,QAAQ,EAAE,SAAS,CAAC,CAACjR,QAAQ,CAACvG,MAAM,CAACwU,gBAAgB,CAACtP,gBAAgB,CAAC,CAACuS,SAAS,CAAC;;IAE7F;IACA,IAAI2B,UAAU,GAAG,EAAE;;IAEnB;IACA,IAAIpZ,MAAM,CAACM,UAAU,CAACC,aAAa,CAAC+C,MAAM,GAAG,CAAC,EAAE;MAC9C,KAAK,IAAIwB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG9E,MAAM,CAACM,UAAU,CAACC,aAAa,CAAC+C,MAAM,EAAEwB,CAAC,EAAE,EAAE;QAC/D,MAAMqS,KAAK,GAAGhJ,IAAI,CAACwB,GAAG,CAAC3P,MAAM,CAACM,UAAU,CAACC,aAAa,CAACuE,CAAC,CAAC,CAAC6N,CAAC,GAAG3S,MAAM,CAACM,UAAU,CAACC,aAAa,CAACuE,CAAC,GAAC,CAAC,CAAC,CAAC6N,CAAC,CAAC;QACrG,IAAIwE,KAAK,GAAG,CAAC,EAAE;UACbiC,UAAU,GAAGjC,KAAK;UAClB;QACF;MACF;IACF;;IAEA;IACA,IAAIkC,aAAa,GAAG,CAAC,CAAC;IACtB,MAAMC,cAAc,GAAGF,UAAU,GAAG,GAAG;;IAEvC;IACA,IAAIG,SAAS,GAAG,EAAE;IAClB,IAAIC,UAAU,GAAGJ,UAAU,GAAG,GAAG;;IAEjC;IACA,IAAIpZ,MAAM,CAACM,UAAU,CAACC,aAAa,CAAC+C,MAAM,GAAG,CAAC,EAAE;MAC9C,KAAK,IAAIwB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG9E,MAAM,CAACM,UAAU,CAACC,aAAa,CAAC+C,MAAM,EAAEwB,CAAC,EAAE,EAAE;QAC/D,IAAI9E,MAAM,CAACM,UAAU,CAACC,aAAa,CAACuE,CAAC,CAAC,CAAC4N,CAAC,KAAK1S,MAAM,CAACM,UAAU,CAACC,aAAa,CAACuE,CAAC,GAAC,CAAC,CAAC,CAAC4N,CAAC,EAAE;UACnF,MAAM+G,KAAK,GAAGtL,IAAI,CAACwB,GAAG,CAAC3P,MAAM,CAACM,UAAU,CAACC,aAAa,CAACuE,CAAC,CAAC,CAAC4N,CAAC,GAAG1S,MAAM,CAACM,UAAU,CAACC,aAAa,CAACuE,CAAC,GAAC,CAAC,CAAC,CAAC4N,CAAC,CAAC;UACrG,IAAI+G,KAAK,GAAG,CAAC,IAAIA,KAAK,GAAG,EAAE,EAAE;YAC3BF,SAAS,GAAGE,KAAK;YACjB;UACF;QACF;MACF;IACF;IAEAzZ,MAAM,CAACM,UAAU,CAACE,UAAU,GAAGyF,WAAW,CAAC,MAAM;MAC/C;MACA,OAAOjG,MAAM,CAACM,UAAU,CAACG,YAAY,GAAGT,MAAM,CAACM,UAAU,CAACC,aAAa,CAAC+C,MAAM,IACvE,EAAAoW,qBAAA,GAAA1Z,MAAM,CAACM,UAAU,CAACC,aAAa,CAACP,MAAM,CAACM,UAAU,CAACG,YAAY,CAAC,cAAAiZ,qBAAA,uBAA/DA,qBAAA,CAAiE1S,IAAI,CAACnB,IAAI,CAAC,CAAC,MAAK,EAAE,EAAE;QAAA,IAAA6T,qBAAA;QAC1F1Z,MAAM,CAACM,UAAU,CAACG,YAAY,EAAE;MAClC;;MAEA;MACA,IAAIT,MAAM,CAACM,UAAU,CAACG,YAAY,IAAIT,MAAM,CAACM,UAAU,CAACC,aAAa,CAAC+C,MAAM,EAAE;QAC5E,IAAItD,MAAM,CAACC,WAAW,GAAGD,MAAM,CAACE,UAAU,EAAE;UAC1CF,MAAM,CAACG,UAAU,CAAC,CAAC,CAAC;UACpBgD,aAAa,CAACnD,MAAM,CAACM,UAAU,CAACE,UAAU,CAAC;QAC7C,CAAC,MAAM;UACLmZ,cAAc,CAAC,CAAC;QAClB;QACA;MACF;MAEA,MAAMC,GAAG,GAAG5Z,MAAM,CAACM,UAAU,CAACC,aAAa,CAACP,MAAM,CAACM,UAAU,CAACG,YAAY,CAAC;MAC3EsX,MAAM,GAAGnW,QAAQ,CAACU,cAAc,CAAC,oBAAoB,CAAC;MACtD0W,SAAS,GAAGpX,QAAQ,CAACU,cAAc,CAAC,uBAAuB,CAAC;MAE5D,IAAIyV,MAAM,IAAIiB,SAAS,EAAE;QACvB,MAAMa,WAAW,GAAG3U,gBAAgB,CAACgC,qBAAqB,CAAC,CAAC;QAE5D,MAAM4S,SAAS,GAAGF,GAAG,CAAClH,CAAC,GAAGmH,WAAW,CAACrG,IAAI;QAC1C,MAAMuG,SAAS,GAAGH,GAAG,CAACjH,CAAC,GAAGkH,WAAW,CAACzS,GAAG,GAAGlC,gBAAgB,CAACwT,SAAS;QAEtEX,MAAM,CAAC/V,KAAK,CAACwR,IAAI,GAAG,GAAGsG,SAAS,IAAI;QACpC/B,MAAM,CAAC/V,KAAK,CAACoF,GAAG,GAAG,GAAG2S,SAAS,GAAG7U,gBAAgB,CAACwT,SAAS,IAAI;QAEhEM,SAAS,CAAChX,KAAK,CAACwR,IAAI,GAAG,GAAGsG,SAAS,GAAGP,SAAS,GAAC,CAAC,IAAI;QACrDP,SAAS,CAAChX,KAAK,CAACoF,GAAG,GAAG,GAAG2S,SAAS,GAAG7U,gBAAgB,CAACwT,SAAS,GAAGc,UAAU,IAAI;QAChFR,SAAS,CAAChX,KAAK,CAAC2K,KAAK,GAAG,GAAG4M,SAAS,IAAI;QACxCP,SAAS,CAAChX,KAAK,CAAC4K,MAAM,GAAG,GAAG4M,UAAU,IAAI;;QAE1C;QACA,MAAMQ,wBAAwB,GAAG7L,IAAI,CAACwB,GAAG,CAACoK,SAAS,GAAGV,aAAa,CAAC,GAAGC,cAAc;QAErF,IAAI,CAACU,wBAAwB,EAAE;UAC7B,IAAIC,WAAW,GAAG,KAAK;UACvB,IAAIC,YAAY,GAAG,CAAC;UAEpB,IAAI5C,qBAAqB,EAAE;YACzB,MAAMmB,UAAU,GAAGvT,gBAAgB,CAACwT,SAAS;YAC7C,MAAMC,aAAa,GAAGF,UAAU,GAAGvT,gBAAgB,CAACsS,YAAY;YAEhE,IAAIuC,SAAS,GAAGpB,aAAa,GAAGS,UAAU,EAAE;cAC1Ca,WAAW,GAAG,IAAI;cAClBC,YAAY,GAAGd,UAAU,GAAG,CAAC;YAC/B,CAAC,MAAM,IAAIW,SAAS,GAAGtB,UAAU,GAAGW,UAAU,EAAE;cAC9Ca,WAAW,GAAG,IAAI;cAClBC,YAAY,GAAG,CAACd,UAAU,GAAG,CAAC;YAChC;YAEA,IAAIa,WAAW,EAAE;cACf/U,gBAAgB,CAACiV,QAAQ,CAAC;gBACxB/S,GAAG,EAAE8S,YAAY;gBACjB3S,QAAQ,EAAE;cACZ,CAAC,CAAC;cACF8R,aAAa,GAAGU,SAAS;YAC3B;UACF,CAAC,MAAM;YACL,MAAMK,SAAS,GAAGR,GAAG,CAACjH,CAAC;YACvB,MAAM8F,UAAU,GAAGzY,MAAM,CAACqH,OAAO;YACjC,MAAMsR,aAAa,GAAGF,UAAU,GAAGzY,MAAM,CAACsH,WAAW;YAErD,IAAI8S,SAAS,GAAGzB,aAAa,GAAGS,UAAU,EAAE;cAC1Ca,WAAW,GAAG,IAAI;cAClBC,YAAY,GAAGd,UAAU,GAAG,CAAC;YAC/B,CAAC,MAAM,IAAIgB,SAAS,GAAG3B,UAAU,GAAGW,UAAU,EAAE;cAC9Ca,WAAW,GAAG,IAAI;cAClBC,YAAY,GAAG,CAACd,UAAU,GAAG,CAAC;YAChC;YAEA,IAAIa,WAAW,EAAE;cACfja,MAAM,CAACma,QAAQ,CAAC;gBACd/S,GAAG,EAAE8S,YAAY;gBACjB3S,QAAQ,EAAE;cACZ,CAAC,CAAC;cACF8R,aAAa,GAAGe,SAAS;YAC3B;UACF;QACF;MACF;MAEApa,MAAM,CAACM,UAAU,CAACG,YAAY,EAAE;IAElC,CAAC,EAAET,MAAM,CAACM,UAAU,CAACI,KAAK,CAAC;;IAE3B;IACAV,MAAM,CAACM,UAAU,CAACQ,OAAO,GAAG,MAAM;MAChC;MACA,MAAMkY,SAAS,GAAGpX,QAAQ,CAACU,cAAc,CAAC,uBAAuB,CAAC;MAClE,IAAI0W,SAAS,EAAE;QACbA,SAAS,CAACzW,MAAM,CAAC,CAAC;MACpB;;MAEA;MACA,MAAMwV,MAAM,GAAGnW,QAAQ,CAACU,cAAc,CAAC,oBAAoB,CAAC;MAC5D,IAAIyV,MAAM,EAAE;QACVA,MAAM,CAACxV,MAAM,CAAC,CAAC;MACjB;IACF,CAAC;EACH,CAAC;;EAED;EACA,MAAMoX,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAI3Z,MAAM,CAACM,UAAU,CAACE,UAAU,EAAE;MAChC2C,aAAa,CAACnD,MAAM,CAACM,UAAU,CAACE,UAAU,CAAC;MAC3CR,MAAM,CAACM,UAAU,CAACE,UAAU,GAAG,IAAI;;MAEnC;MACA,IAAIR,MAAM,CAACM,UAAU,CAACQ,OAAO,EAAE;QAC7Bd,MAAM,CAACM,UAAU,CAACQ,OAAO,CAAC,CAAC;MAC7B;IACF;EACF,CAAC;;EAED;EACA,MAAMuZ,oBAAoB,GAAGA,CAAA,KAAM;IACjC;IACAV,cAAc,CAAC,CAAC;;IAEhB;IACA3Z,MAAM,CAACM,UAAU,CAACO,cAAc,GAAG,KAAK;;IAExC;IACA,MAAM2J,OAAO,GAAG5I,QAAQ,CAACuD,aAAa,CAAC,eAAe,CAAC;IACvD,IAAI,CAACqF,OAAO,EAAE;;IAEd;IACA,IAAIA,OAAO,CAACrD,QAAQ,EAAE;MACpBqD,OAAO,CAACrD,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;IACxB;;IAEA;IACA,IAAInH,MAAM,CAACwU,gBAAgB,CAAChK,OAAO,CAAC,CAACuO,QAAQ,KAAK,QAAQ,EAAE;MAC1DvO,OAAO,CAACxI,KAAK,CAAC+W,QAAQ,GAAG,UAAU;IACrC;;IAEA;IACA/Y,MAAM,CAACM,UAAU,CAACC,aAAa,GAAG+V,wBAAwB,CAAC9L,OAAO,CAAC;;IAEnE;IACA,IAAIxK,MAAM,CAACM,UAAU,CAACC,aAAa,CAAC+C,MAAM,KAAK,CAAC,EAAE;MAChD,IAAIrD,WAAW,GAAGC,UAAU,IAAI,CAACF,MAAM,CAACM,UAAU,CAACO,cAAc,EAAE;QACjEb,MAAM,CAACM,UAAU,CAACO,cAAc,GAAG,IAAI;QACvCV,UAAU,CAAC,CAAC,CAAC;QACb;MACF;MACA;IACF;;IAEA;IACA2Y,eAAe,CAAC,CAAC;EACnB,CAAC;;EAED;EACA,MAAMwB,uBAAuB,GAAG,MAAOtV,CAAC,IAAK;IAC3C,MAAMuV,OAAO,GAAGvV,CAAC,CAACmI,MAAM,CAAClF,KAAK;IAC9B,MAAMuS,QAAQ,GAAGvQ,WAAW;IAE5BhJ,OAAO,CAACC,GAAG,CAAC,aAAasZ,QAAQ,MAAMD,OAAO,EAAE,CAAC;;IAEjD;IACArQ,cAAc,CAACqQ,OAAO,CAAC;;IAEvB;IACA,IAAI7P,WAAW,IAAIzK,WAAW,GAAG,CAAC,EAAE;MAClC,IAAI;QACFgB,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;QACzB,MAAM2P,IAAI,GAAG,MAAMnG,WAAW,CAACoG,OAAO,CAAC7Q,WAAW,CAAC;;QAEnD;QACA,MAAM8B,WAAW,GAAG,MAAM8O,IAAI,CAACE,cAAc,CAAC,CAAC;QAC/C,MAAMO,SAAS,GAAGvP,WAAW,CAACwP,KAAK;QACnC,IAAIsC,aAAa,GAAGvC,SAAS,CAAC7M,GAAG,CAACgN,IAAI,IAAIA,IAAI,CAACC,GAAG,CAAC,CAAChN,IAAI,CAAC,GAAG,CAAC;QAC7DmP,aAAa,GAAGA,aAAa,CAACC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAACjO,IAAI,CAAC,CAAC;;QAEzD;QACA,MAAMyF,SAAS,GAAGyI,kBAAkB,CAACF,aAAa,CAAC;;QAEnD;QACA,IAAI0G,OAAO,KAAK,QAAQ,EAAE;UACxB;UACA,MAAM5M,IAAI,GAAGuG,2BAA2B,CAAC5I,SAAS,CAAC;UACnDrK,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;UACvBuJ,UAAU,CAACkD,IAAI,CAAC;;UAEhB;UACA5K,UAAU,CAAC,MAAM;YACf,MAAMgM,WAAW,GAAGnN,QAAQ,CAACuD,aAAa,CAAC,sBAAsB,CAAC;YACtE,IAAI4J,WAAW,EAAE;cACX9N,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;cACzB,MAAMuM,UAAU,GAAGsB,WAAW,CAAC1L,gBAAgB,CAAC,gBAAgB,CAAC;cACjEpC,OAAO,CAACC,GAAG,CAAC,MAAMuM,UAAU,CAACnK,MAAM,MAAM,CAAC;;cAE1C;cACA,IAAImK,UAAU,CAACnK,MAAM,GAAG,CAAC,EAAE;gBACzB,MAAMgR,SAAS,GAAG7G,UAAU,CAAC,CAAC,CAAC;gBAC/B,MAAM8G,MAAM,GAAGvU,MAAM,CAACwU,gBAAgB,CAACF,SAAS,CAAC;gBACjDrT,OAAO,CAACC,GAAG,CAAC,UAAU,EAAE;kBACtB2F,KAAK,EAAE0N,MAAM,CAAC1N,KAAK;kBACnBnE,eAAe,EAAE6R,MAAM,CAAC7R,eAAe;kBACvC+R,UAAU,EAAEF,MAAM,CAACE,UAAU;kBAC7B7B,QAAQ,EAAE2B,MAAM,CAAC3B;gBACnB,CAAC,CAAC;;gBAEF;gBACA,IAAI2B,MAAM,CAAC1N,KAAK,KAAK,iBAAiB,IAAI0N,MAAM,CAAC1N,KAAK,KAAK,SAAS,EAAE;kBACpE5F,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;gBACzB,CAAC,MAAM;kBACLD,OAAO,CAACgW,IAAI,CAAC,cAAc,EAAE1C,MAAM,CAAC1N,KAAK,CAAC;gBAC5C;cACF;YACF,CAAC,MAAM;cACL5F,OAAO,CAACgE,KAAK,CAAC,eAAe,CAAC;YAChC;UACF,CAAC,EAAE,GAAG,CAAC;QACT,CAAC,MAAM,IAAIsV,OAAO,KAAK,eAAe,EAAE;UACtC,IAAI;YACF,MAAM1J,IAAI,GAAG,MAAMnG,WAAW,CAACoG,OAAO,CAAC7Q,WAAW,CAAC;YACnD,MAAM8B,WAAW,GAAG,MAAM8O,IAAI,CAACE,cAAc,CAAC,CAAC;YAC/C,MAAMO,SAAS,GAAGvP,WAAW,CAACwP,KAAK;YACnC,IAAIsC,aAAa,GAAGvC,SAAS,CAAC7M,GAAG,CAACgN,IAAI,IAAIA,IAAI,CAACC,GAAG,CAAC,CAAChN,IAAI,CAAC,GAAG,CAAC;YAC7DmP,aAAa,GAAGA,aAAa,CAACC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAACjO,IAAI,CAAC,CAAC;;YAEzD;YACA,MAAMqP,QAAQ,GAAGD,6BAA6B,CAACpB,aAAa,CAAC;;YAE7D;YACA,MAAMG,gBAAgB,GAAGK,sCAAsC,CAACa,QAAQ,CAAC;YACzEzK,UAAU,CAACuJ,gBAAgB,CAAC;;YAE5B;YACAjR,UAAU,CAAC,MAAM;cACfsI,sBAAsB,CAAC,CAAC;YAC1B,CAAC,EAAE,GAAG,CAAC;UACT,CAAC,CAAC,OAAOpG,KAAK,EAAE;YACdhE,OAAO,CAACgE,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;UACpC;QACF,CAAC,MAAM;UACL;UACA,MAAM+K,OAAO,GAAGyK,wBAAwB,CAACF,OAAO,CAAC;UACjD,MAAMvG,gBAAgB,GAAGhE,OAAO,CAAC1E,SAAS,CAAC;UAC3Cb,UAAU,CAACuJ,gBAAgB,CAAC;QAC9B;MACF,CAAC,CAAC,OAAO/O,KAAK,EAAE;QACdhE,OAAO,CAACgE,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;MACnC;IACF;EACF,CAAC;;EAED;EACA,MAAMyV,UAAU,GAAGA,CAAA,KAAM;IACvB;IACAC,0BAA0B,CAAC,CAAC;;IAE5B;IACA,IAAI3a,MAAM,CAACuI,YAAY,EAAE;MACvBvI,MAAM,CAACuI,YAAY,CAACI,IAAI,CAAC,CAAC;IAC5B;;IAEA;IACA,IAAI3I,MAAM,CAACoM,WAAW,EAAE;MACtBpM,MAAM,CAACoM,WAAW,CAACtL,OAAO,CAAC,CAAC;IAC9B;;IAEA;IACA,MAAM8Z,qBAAqB,GAAGhZ,QAAQ,CAACyB,gBAAgB,CAAC,oDAAoD,CAAC;IAC7GuX,qBAAqB,CAACnX,OAAO,CAACoX,EAAE,IAAIA,EAAE,CAACtY,MAAM,CAAC,CAAC,CAAC;;IAEhD;IACA,MAAMuY,oBAAoB,GAAGlZ,QAAQ,CAACyB,gBAAgB,CAAC,2EAA2E,CAAC;IACnIyX,oBAAoB,CAACrX,OAAO,CAACoX,EAAE,IAAIA,EAAE,CAACtY,MAAM,CAAC,CAAC,CAAC;;IAE/C;IACA,MAAMwY,UAAU,GAAGnZ,QAAQ,CAACyB,gBAAgB,CAC1C,6FACF,CAAC;IACD0X,UAAU,CAACtX,OAAO,CAACoX,EAAE,IAAI;MACvB,IAAIA,EAAE,CAAClX,UAAU,EAAEkX,EAAE,CAAClX,UAAU,CAACoB,WAAW,CAAC8V,EAAE,CAAC;IAClD,CAAC,CAAC;;IAEF;IACA,MAAM9L,WAAW,GAAGnN,QAAQ,CAACuD,aAAa,CAAC,eAAe,CAAC;IAC3D,IAAI4J,WAAW,EAAE;MAAA,IAAAiM,qBAAA;MACf;MACA,MAAMC,gBAAgB,GAAGlM,WAAW,CAAC5J,aAAa,CAAC,oBAAoB,CAAC;;MAExE;MACA,MAAM+V,WAAW,GAAG,EAAAF,qBAAA,GAAAjM,WAAW,CAAC5J,aAAa,CAAC,8BAA8B,CAAC,cAAA6V,qBAAA,uBAAzDA,qBAAA,CAA2DlF,SAAS,KAAI,EAAE;MAC9F,MAAMqF,cAAc,GAAGpM,WAAW,CAACqM,SAAS,CAAC,KAAK,CAAC;;MAEnD;MACA,MAAMC,mBAAmB,GAAGzZ,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;MACzDwZ,mBAAmB,CAACvF,SAAS,GAAGoF,WAAW;MAC3CC,cAAc,CAAC9Y,WAAW,CAACgZ,mBAAmB,CAAC;;MAE/C;MACA,IAAIJ,gBAAgB,IAAI/a,UAAU,GAAG,CAAC,EAAE;QACtC,MAAMob,mBAAmB,GAAGL,gBAAgB,CAACG,SAAS,CAAC,IAAI,CAAC;QAC5D;QACA,MAAMG,OAAO,GAAGD,mBAAmB,CAACnW,aAAa,CAAC,uBAAuB,CAAC;QAC1E,MAAMqW,OAAO,GAAGF,mBAAmB,CAACnW,aAAa,CAAC,sBAAsB,CAAC;QACzE,IAAIoW,OAAO,EAAEA,OAAO,CAACrZ,OAAO,GAAG,MAAM/B,UAAU,CAAC,CAAC,CAAC,CAAC;QACnD,IAAIqb,OAAO,EAAEA,OAAO,CAACtZ,OAAO,GAAG,MAAM/B,UAAU,CAAC,CAAC,CAAC;QAClDgb,cAAc,CAAC9Y,WAAW,CAACiZ,mBAAmB,CAAC;MACjD;MAEA,IAAIvM,WAAW,CAACpL,UAAU,EAAE;QAC1BoL,WAAW,CAACpL,UAAU,CAACkB,YAAY,CAACsW,cAAc,EAAEpM,WAAW,CAAC;MAClE;IACF;;IAEA;IACA,MAAMtB,UAAU,GAAG7L,QAAQ,CAACyB,gBAAgB,CAAC,gBAAgB,CAAC;IAC9DoK,UAAU,CAAChK,OAAO,CAACmK,SAAS,IAAI;MAC9B;MACAA,SAAS,CAAC6N,eAAe,CAAC,aAAa,CAAC;MACxC7N,SAAS,CAAC6N,eAAe,CAAC,OAAO,CAAC;;MAElC;MACA7N,SAAS,CAACkI,SAAS,GAAGlI,SAAS,CAACkI,SAAS,CACtChC,OAAO,CAAC,gCAAgC,EAAE,EAAE,CAAC,CAC7CA,OAAO,CAAC,kCAAkC,EAAE,EAAE,CAAC,CAC/CA,OAAO,CAAC,0CAA0C,EAAE,EAAE,CAAC,CACvDA,OAAO,CAAC,2CAA2C,EAAE,EAAE,CAAC,CACxDA,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;IAC7B,CAAC,CAAC;;IAEF;IACA,MAAM4H,gBAAgB,GAAG,CACvB,qBAAqB,EACrB,qBAAqB,CACtB;IAEDA,gBAAgB,CAACjY,OAAO,CAAC3B,EAAE,IAAI;MAC7B,MAAMsE,OAAO,GAAGxE,QAAQ,CAACU,cAAc,CAACR,EAAE,CAAC;MAC3C,IAAIsE,OAAO,IAAIA,OAAO,CAACzC,UAAU,EAAE;QACjCyC,OAAO,CAACzC,UAAU,CAACoB,WAAW,CAACqB,OAAO,CAAC;MACzC;IACF,CAAC,CAAC;;IAEF;IACAxE,QAAQ,CAACQ,IAAI,CAAC2I,SAAS,CAACxI,MAAM,CAAC,iBAAiB,CAAC;;IAEjD;IACA,IAAIvC,MAAM,CAACoM,WAAW,IAAI,OAAOpM,MAAM,CAACoM,WAAW,CAACtL,OAAO,KAAK,UAAU,EAAE;MAC1Ed,MAAM,CAACoM,WAAW,CAACtL,OAAO,CAAC,CAAC;IAC9B;EACF,CAAC;EAED,MAAM6a,gBAAgB,GAAGA,CAAA,KAAM;IAC7B3b,MAAM,CAACM,UAAU,CAACM,WAAW,GAAG,IAAI;IACpC;EACF,CAAC;EAED,MAAMgb,oBAAoB,GAAGA,CAACC,KAAK,GAAG,KAAK,KAAK;IAC9C;EAAA,CACD;;EAED;EACA,MAAMC,eAAe,GAAI9W,CAAC,IAAK;IAC7B,IAAIiF,WAAW,KAAK,cAAc,EAAE;IAEpC,MAAM8E,WAAW,GAAGnN,QAAQ,CAACuD,aAAa,CAAC,eAAe,CAAC;IAC3D,IAAI,CAAC4J,WAAW,EAAE;IAElB,MAAM9H,IAAI,GAAG8H,WAAW,CAAC7H,qBAAqB,CAAC,CAAC;IAChD,MAAMwL,CAAC,GAAG1N,CAAC,CAAC+W,OAAO,GAAG9U,IAAI,CAACuM,IAAI;IAC/B,MAAMb,CAAC,GAAG3N,CAAC,CAACmK,OAAO,GAAGlI,IAAI,CAACG,GAAG;IAE9B4U,kBAAkB,CAAC,CAAC;IAEpB,MAAMvO,UAAU,GAAGsB,WAAW,CAAC1L,gBAAgB,CAAC,GAAG,CAAC;IACpDoK,UAAU,CAAChK,OAAO,CAACmK,SAAS,IAAI;MAC9B,MAAMqO,aAAa,GAAGrO,SAAS,CAAC1G,qBAAqB,CAAC,CAAC;MACvD,MAAMgV,UAAU,GAAGD,aAAa,CAACzI,IAAI,GAAGvM,IAAI,CAACuM,IAAI;MACjD,MAAM2I,UAAU,GAAGF,aAAa,CAAC7U,GAAG,GAAGH,IAAI,CAACG,GAAG;MAE/C,IAAIuL,CAAC,IAAIwJ,UAAU,IAAIxJ,CAAC,IAAIwJ,UAAU,GAAGF,aAAa,CAACrP,MAAM,EAAE;QAC7D,MAAMkB,KAAK,GAAGF,SAAS,CAACvK,gBAAgB,CAAC,MAAM,CAAC;QAChDyK,KAAK,CAACrK,OAAO,CAACuK,IAAI,IAAI;UACpB,MAAMoO,QAAQ,GAAGpO,IAAI,CAAC9G,qBAAqB,CAAC,CAAC;UAC7C,MAAMmV,KAAK,GAAGD,QAAQ,CAAC5I,IAAI,GAAGvM,IAAI,CAACuM,IAAI;UAEvC,IAAId,CAAC,IAAI2J,KAAK,IAAI3J,CAAC,IAAI2J,KAAK,GAAGD,QAAQ,CAACzP,KAAK,EAAE;YAC7CqB,IAAI,CAACjD,SAAS,CAAChE,GAAG,CAAC,WAAW,CAAC;UACjC;QACF,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMiV,kBAAkB,GAAGA,CAAA,KAAM;IAC/Bpa,QAAQ,CAACyB,gBAAgB,CAAC,iBAAiB,CAAC,CAACI,OAAO,CAACoX,EAAE,IAAIA,EAAE,CAACtY,MAAM,CAAC,CAAC,CAAC;EACzE,CAAC;;EAED;EACA,MAAMoY,0BAA0B,GAAGA,CAAA,KAAM;IACvC;IACA,IAAI3a,MAAM,CAACI,YAAY,IAAIJ,MAAM,CAACI,YAAY,CAACC,mBAAmB,EAAE;MAClEL,MAAM,CAACI,YAAY,CAACC,mBAAmB,CAACoD,OAAO,CAAC,CAAC;QAAC2C,OAAO;QAAE2J,KAAK;QAAEC;MAAO,CAAC,KAAK;QAC7E,IAAI5J,OAAO,IAAIA,OAAO,CAACkW,mBAAmB,EAAE;UAC1ClW,OAAO,CAACkW,mBAAmB,CAACvM,KAAK,EAAEC,OAAO,CAAC;QAC7C;MACF,CAAC,CAAC;MACFhQ,MAAM,CAACI,YAAY,CAACC,mBAAmB,GAAG,EAAE;IAC9C;;IAEA;IACA,MAAM0O,WAAW,GAAGnN,QAAQ,CAACuD,aAAa,CAAC,eAAe,CAAC;IAC3D,IAAI4J,WAAW,EAAE;MACfA,WAAW,CAACuN,mBAAmB,CAAC,WAAW,EAAER,eAAe,CAAC;MAC7D/M,WAAW,CAACuN,mBAAmB,CAAC,YAAY,EAAEN,kBAAkB,CAAC;IACnE;IAEApa,QAAQ,CAAC0a,mBAAmB,CAAC,WAAW,EAAER,eAAe,CAAC;;IAE1D;IACAE,kBAAkB,CAAC,CAAC;EACtB,CAAC;;EAED;EACA,MAAMO,mBAAmB,GAAGA,CAAA,KAAM;IAChC,MAAMva,KAAK,GAAGJ,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;IAC7CG,KAAK,CAACD,WAAW,GAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDH,QAAQ,CAACoJ,IAAI,CAAC3I,WAAW,CAACL,KAAK,CAAC;;IAEhC;IACA,MAAMwa,sBAAsB,GAAG5a,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;IAC9D2a,sBAAsB,CAAC1a,EAAE,GAAG,0BAA0B;IACtD0a,sBAAsB,CAAC1G,SAAS,GAAG;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDlU,QAAQ,CAACoJ,IAAI,CAAC3I,WAAW,CAACma,sBAAsB,CAAC;EACnD,CAAC;;EAED;EACAld,SAAS,CAAC,MAAM;IACdid,mBAAmB,CAAC,CAAC;IACrBpR,sBAAsB,CAAC,CAAC;;IAExB;IACA,MAAMsR,gBAAgB,GAAG7a,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;IACxD4a,gBAAgB,CAAC3a,EAAE,GAAG,gCAAgC;IACtD2a,gBAAgB,CAAC1a,WAAW,GAAG;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDH,QAAQ,CAACoJ,IAAI,CAAC3I,WAAW,CAACoa,gBAAgB,CAAC;;IAE3C;IACA,MAAMza,KAAK,GAAGJ,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;IAC7CG,KAAK,CAACF,EAAE,GAAG,+BAA+B;IAC1CE,KAAK,CAACD,WAAW,GAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDH,QAAQ,CA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}