{"ast":null,"code":"var _jsxFileName = \"D:\\\\adhd-read-helper\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 自动阅读器全局对象\nwindow.autoReader = {\n  charPositions: [],\n  intervalId: null,\n  currentIndex: 0,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false,\n  cleanup: null\n};\n\n// 添加新的节奏阅读模式代码\n// 全局变量，确保在页面切换后仍然保持状态\nwindow.rhythmReaderGlobal = window.rhythmReaderGlobal || {\n  active: false,\n  speed: 300\n};\n\n// 节奏阅读模式 - 更强大的实现\n(function () {\n  console.log(\"正在初始化节奏阅读模式...\");\n\n  // 确保只初始化一次\n  if (window.rhythmReadingInitialized) {\n    console.log(\"节奏阅读模式已经初始化过，跳过\");\n    return;\n  }\n  window.rhythmReadingInitialized = true;\n\n  // 状态变量和功能对象\n  const rhythmReader = {\n    active: false,\n    intervalId: null,\n    speed: 300,\n    currentIndex: 0,\n    readIndices: new Set(),\n    charElements: [],\n    // 启动节奏阅读\n    start: function () {\n      console.log(\"【节奏阅读】启动中...\");\n\n      // 先停止已有的\n      this.stop(false);\n\n      // 设置为活动状态\n      this.active = true;\n\n      // 初始化文本\n      if (!this.initializeTextNodes()) {\n        console.error(\"【节奏阅读】无法初始化文本节点\");\n        return;\n      }\n\n      // 添加速度滑块\n      this.addSpeedSlider();\n\n      // 更新颜色\n      this.updateTextColors();\n\n      // 滚动到开始位置\n      this.scrollToCurrentChar();\n\n      // 设置阅读间隔\n      this.intervalId = setInterval(() => this.moveToNextChar(), this.speed);\n      console.log(\"【节奏阅读】成功启动\");\n\n      // 显示提示\n      this.showNotification(\"节奏阅读模式已启动\");\n\n      // 设置确认开启的标记\n      document.body.dataset.rhythmReadingActive = \"true\";\n    },\n    // 停止节奏阅读\n    stop: function (showNotification = true) {\n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n      }\n      if (this.active) {\n        console.log(\"【节奏阅读】停止中...\");\n        this.active = false;\n\n        // 恢复原始文本\n        this.restoreOriginalText();\n\n        // 移除速度滑块\n        const slider = document.getElementById('rhythm-speed-slider');\n        if (slider) slider.remove();\n        if (showNotification) {\n          this.showNotification(\"节奏阅读模式已停止\");\n        }\n\n        // 清除标记\n        document.body.dataset.rhythmReadingActive = \"false\";\n      }\n    },\n    // 显示通知\n    showNotification: function (message) {\n      let notification = document.getElementById('rhythm-notification');\n      if (notification) notification.remove();\n      notification = document.createElement('div');\n      notification.id = 'rhythm-notification';\n      notification.textContent = message;\n      notification.style.position = 'fixed';\n      notification.style.top = '50%';\n      notification.style.left = '50%';\n      notification.style.transform = 'translate(-50%, -50%)';\n      notification.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';\n      notification.style.color = 'white';\n      notification.style.padding = '15px 25px';\n      notification.style.borderRadius = '5px';\n      notification.style.zIndex = '10001';\n      notification.style.fontSize = '18px';\n      document.body.appendChild(notification);\n\n      // 2秒后自动消失\n      setTimeout(() => {\n        if (notification && notification.parentNode) {\n          notification.parentNode.removeChild(notification);\n        }\n      }, 2000);\n    },\n    // 初始化文本节点\n    initializeTextNodes: function () {\n      console.log(\"【节奏阅读】初始化文本节点...\");\n\n      // 重置字符元素数组\n      this.charElements = [];\n\n      // 获取内容容器\n      const contentContainer = document.querySelector('.page-content') || document.body;\n\n      // 查找所有文本节点并处理\n      const textNodes = [];\n      this.findTextNodes(contentContainer, textNodes);\n      if (textNodes.length === 0) {\n        console.error(\"【节奏阅读】未找到文本节点\");\n        this.showNotification(\"无法启动节奏阅读：未找到文本内容\");\n        return false;\n      }\n      console.log(`【节奏阅读】找到 ${textNodes.length} 个文本节点`);\n\n      // 为每个文本节点创建字符span\n      textNodes.forEach(node => {\n        const text = node.nodeValue;\n        if (!text || text.trim() === '') return;\n\n        // 创建文档片段来存放字符span\n        const fragment = document.createDocumentFragment();\n\n        // 为每个字符创建span\n        for (let i = 0; i < text.length; i++) {\n          const char = text[i];\n          const span = document.createElement('span');\n          span.textContent = char;\n          span.className = 'rhythm-char';\n          span.dataset.rhythmIndex = this.charElements.length;\n\n          // 如果是空白字符，添加一个标志\n          if (char.trim() === '') {\n            span.dataset.whitespace = 'true';\n          }\n\n          // 保持原始样式，不设置背景\n          span.style.display = 'inline';\n          span.style.margin = '0';\n          span.style.padding = '0';\n          span.style.border = 'none';\n          span.style.backgroundColor = 'transparent';\n          fragment.appendChild(span);\n          this.charElements.push(span);\n        }\n\n        // 替换原始节点\n        if (node.parentNode) {\n          node.parentNode.replaceChild(fragment, node);\n        }\n      });\n      console.log(`【节奏阅读】总共创建了 ${this.charElements.length} 个字符span`);\n      return this.charElements.length > 0;\n    },\n    // 递归查找所有文本节点\n    findTextNodes: function (element, textNodes) {\n      // 处理子节点\n      for (let i = 0; i < element.childNodes.length; i++) {\n        const node = element.childNodes[i];\n\n        // 如果是文本节点且有内容\n        if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() !== '') {\n          textNodes.push(node);\n        }\n        // 如果是元素节点，递归处理\n        else if (node.nodeType === Node.ELEMENT_NODE) {\n          // 跳过读者UI元素\n          if (node.id === 'rhythm-speed-slider' || node.id === 'rhythm-notification' || node.className === 'rhythm-char') {\n            continue;\n          }\n          this.findTextNodes(node, textNodes);\n        }\n      }\n    },\n    // 更新文本颜色\n    updateTextColors: function () {\n      // 更新所有字符的颜色\n      this.charElements.forEach((span, index) => {\n        // 确定颜色\n        let color;\n        let fontWeight = 'inherit';\n        if (index === this.currentIndex) {\n          color = '#00aa00'; // 当前阅读的字 - 绿色\n          fontWeight = 'bold';\n        } else if (index === this.currentIndex + 1 || index === this.currentIndex + 2) {\n          color = '#aaaaaa'; // 接下来两个字 - 淡灰色\n        } else if (this.readIndices.has(index)) {\n          color = '#ffffff'; // 已读字符 - 白色（表示已读）\n        } else {\n          color = 'rgba(160, 160, 160, 0.25)'; // 未读字符 - 非常淡的灰色（可见但不明显）\n        }\n        span.style.color = color;\n        span.style.fontWeight = fontWeight;\n\n        // 确保没有背景\n        span.style.backgroundColor = 'transparent';\n        span.style.background = 'none';\n      });\n    },\n    // 移动到下一个字符\n    moveToNextChar: function () {\n      // 将当前字符标记为已读\n      this.readIndices.add(this.currentIndex);\n\n      // 移动到下一个非空白字符\n      do {\n        this.currentIndex++;\n\n        // 检查是否到达末尾\n        if (this.currentIndex >= this.charElements.length) {\n          console.log(\"【节奏阅读】已到达页尾，尝试翻页\");\n\n          // 尝试点击下一页按钮\n          if (!this.clickNextPageButton()) {\n            // 如果没有找到下一页按钮，完全停止阅读\n            this.stop();\n          }\n          return;\n        }\n      } while (this.currentIndex < this.charElements.length && this.charElements[this.currentIndex] && this.charElements[this.currentIndex].dataset.whitespace === 'true');\n\n      // 更新颜色\n      this.updateTextColors();\n\n      // 滚动到当前字符\n      this.scrollToCurrentChar();\n    },\n    // 尝试自动翻页\n    clickNextPageButton: function () {\n      console.log(\"【节奏阅读】尝试查找并点击下一页按钮\");\n\n      // 尝试多种可能的选择器来找到下一页按钮\n      const nextPageSelectors = ['button.next-page', 'button[aria-label=\"下一页\"]', 'a.next-page', 'a[aria-label=\"下一页\"]', '.next-page', '#next-page', 'button.next', 'a.next'];\n      let nextPageButton = null;\n\n      // 尝试通过选择器找到按钮\n      for (const selector of nextPageSelectors) {\n        try {\n          const elements = document.querySelectorAll(selector);\n          for (const el of elements) {\n            if (el.offsetParent !== null) {\n              // 检查元素是否可见\n              console.log(`【节奏阅读】找到下一页按钮: ${selector}`);\n              nextPageButton = el;\n              break;\n            }\n          }\n          if (nextPageButton) break;\n        } catch (e) {\n          // 某些选择器可能不被支持，忽略错误\n        }\n      }\n\n      // 如果没找到，尝试按文本内容查找\n      if (!nextPageButton) {\n        const buttons = document.querySelectorAll('button, a, div[role=\"button\"]');\n        for (const button of buttons) {\n          const text = button.textContent.trim().toLowerCase();\n          if ((text.includes('下一页') || text.includes('next') || text === '>' || text === '→') && button.offsetParent !== null) {\n            console.log(`【节奏阅读】通过文本内容找到下一页按钮: ${text}`);\n            nextPageButton = button;\n            break;\n          }\n        }\n      }\n      if (nextPageButton) {\n        console.log(\"【节奏阅读】模拟点击下一页按钮\");\n\n        // 保存状态，指示我们需要在新页面上恢复\n        document.body.dataset.needsRhythmReading = \"true\";\n\n        // 恢复原始文本（准备翻页）\n        this.restoreOriginalText();\n\n        // 停止计时器\n        if (this.intervalId) {\n          clearInterval(this.intervalId);\n          this.intervalId = null;\n        }\n\n        // 模拟点击\n        nextPageButton.click();\n        return true;\n      } else {\n        console.log(\"【节奏阅读】未找到下一页按钮\");\n        return false;\n      }\n    },\n    // 滚动到当前字符\n    scrollToCurrentChar: function () {\n      const span = this.charElements[this.currentIndex];\n      if (!span) return;\n      const rect = span.getBoundingClientRect();\n      const contentContainer = document.querySelector('.page-content');\n\n      // 估计行高\n      const lineHeight = parseInt(window.getComputedStyle(span).lineHeight) || Math.max(20, rect.height * 1.5);\n\n      // 确定滚动容器\n      const isContainerScrollable = contentContainer && contentContainer.scrollHeight > contentContainer.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n      if (isContainerScrollable) {\n        // 容器滚动\n        const containerRect = contentContainer.getBoundingClientRect();\n        const relativeTop = rect.top - containerRect.top + contentContainer.scrollTop;\n        const visibleTop = contentContainer.scrollTop;\n        const visibleBottom = visibleTop + contentContainer.clientHeight;\n        if (relativeTop < visibleTop + lineHeight || relativeTop > visibleBottom - lineHeight) {\n          contentContainer.scrollBy({\n            top: lineHeight * 2 * (relativeTop > visibleBottom - lineHeight ? 1 : -1),\n            behavior: 'smooth'\n          });\n        }\n      } else {\n        // 窗口滚动\n        const viewportTop = window.scrollY;\n        const viewportBottom = viewportTop + window.innerHeight;\n        const absoluteTop = rect.top + window.scrollY;\n        if (absoluteTop < viewportTop + lineHeight || absoluteTop > viewportBottom - lineHeight) {\n          window.scrollBy({\n            top: lineHeight * 2 * (absoluteTop > viewportBottom - lineHeight ? 1 : -1),\n            behavior: 'smooth'\n          });\n        }\n      }\n    },\n    // 添加速度滑块\n    addSpeedSlider: function () {\n      let slider = document.getElementById('rhythm-speed-slider');\n      if (slider) slider.remove();\n      const container = document.createElement('div');\n      container.id = 'rhythm-speed-slider';\n      container.style.position = 'fixed';\n      container.style.top = '70px';\n      container.style.right = '20px';\n      container.style.backgroundColor = 'white';\n      container.style.padding = '10px';\n      container.style.borderRadius = '5px';\n      container.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';\n      container.style.zIndex = '10000';\n      container.style.display = 'flex';\n      container.style.alignItems = 'center';\n      container.style.maxWidth = '300px';\n      const label = document.createElement('label');\n      label.textContent = '速度: ';\n      label.style.marginRight = '8px';\n      container.appendChild(label);\n      const input = document.createElement('input');\n      input.type = 'range';\n      input.min = '50';\n      input.max = '1000';\n      input.step = '50';\n      input.value = this.speed;\n      input.style.width = '120px';\n      const valueDisplay = document.createElement('span');\n      valueDisplay.textContent = `${this.speed}ms`;\n      valueDisplay.style.marginLeft = '8px';\n      valueDisplay.style.minWidth = '60px';\n      const self = this;\n      input.addEventListener('input', function () {\n        const newSpeed = parseInt(this.value);\n        self.speed = newSpeed;\n        valueDisplay.textContent = `${newSpeed}ms`;\n        if (self.intervalId) {\n          clearInterval(self.intervalId);\n          self.intervalId = setInterval(() => self.moveToNextChar(), newSpeed);\n        }\n      });\n      container.appendChild(input);\n      container.appendChild(valueDisplay);\n      document.body.appendChild(container);\n    },\n    // 恢复原始文本\n    restoreOriginalText: function () {\n      // 获取所有已创建的字符span\n      const charSpans = document.querySelectorAll('.rhythm-char');\n\n      // 按父节点分组\n      const parentNodeMap = new Map();\n      charSpans.forEach(span => {\n        const parent = span.parentNode;\n        if (!parent) return;\n        if (!parentNodeMap.has(parent)) {\n          parentNodeMap.set(parent, []);\n        }\n        parentNodeMap.get(parent).push(span);\n      });\n\n      // 对每个父节点，将连续的字符span合并回文本节点\n      parentNodeMap.forEach((spans, parent) => {\n        if (spans.length === 0) return;\n\n        // 排序spans确保顺序正确\n        spans.sort((a, b) => {\n          const indexA = parseInt(a.dataset.rhythmIndex || '0');\n          const indexB = parseInt(b.dataset.rhythmIndex || '0');\n          return indexA - indexB;\n        });\n\n        // 根据连续性分组\n        const groups = [];\n        if (spans.length > 0) {\n          let currentGroup = [spans[0]];\n          for (let i = 1; i < spans.length; i++) {\n            const prevIndex = parseInt(spans[i - 1].dataset.rhythmIndex || '0');\n            const currentIndex = parseInt(spans[i].dataset.rhythmIndex || '0');\n            if (currentIndex === prevIndex + 1 && spans[i].previousSibling === spans[i - 1]) {\n              currentGroup.push(spans[i]);\n            } else {\n              groups.push(currentGroup);\n              currentGroup = [spans[i]];\n            }\n          }\n          groups.push(currentGroup);\n        }\n\n        // 对每个连续组替换为文本节点\n        groups.forEach(group => {\n          if (group.length === 0) return;\n          try {\n            const text = group.map(span => span.textContent).join('');\n            const textNode = document.createTextNode(text);\n\n            // 替换第一个span，然后移除其余的\n            if (group[0].parentNode === parent) {\n              parent.replaceChild(textNode, group[0]);\n              for (let i = 1; i < group.length; i++) {\n                if (group[i].parentNode === parent) {\n                  parent.removeChild(group[i]);\n                }\n              }\n            }\n          } catch (e) {\n            console.error(\"【节奏阅读】恢复文本时出错:\", e);\n          }\n        });\n      });\n\n      // 清除字符元素数组\n      this.charElements = [];\n    }\n  };\n\n  // 暴露到全局，以便调试和直接调用\n  window.rhythmReader = rhythmReader;\n\n  // 直接挂钩到可能的下拉选择器\n  console.log(\"【节奏阅读】寻找并挂钩阅读模式选择器...\");\n\n  // 尝试查找可能的下拉选择器\n  const selectors = ['select[name=\"readingMode\"]', 'select.reading-mode', 'select#reading-mode', 'select[aria-label=\"阅读模式\"]', '.reading-mode-selector'];\n  let foundSelector = false;\n  for (const selector of selectors) {\n    const elements = document.querySelectorAll(selector);\n    for (const element of elements) {\n      console.log(`【节奏阅读】找到可能的阅读模式选择器: ${selector}`);\n      element.addEventListener('change', function () {\n        const value = this.value.toLowerCase();\n        console.log(`【节奏阅读】阅读模式选择变更为: ${value}`);\n        if (value.includes('rhythm') || value.includes('节奏')) {\n          console.log(\"【节奏阅读】检测到选择了节奏阅读模式\");\n          rhythmReader.start();\n        } else {\n          if (rhythmReader.active) {\n            rhythmReader.stop();\n          }\n        }\n      });\n      foundSelector = true;\n    }\n  }\n\n  // 重写readingModeChanged函数\n  if (typeof window.readingModeChanged === 'function') {\n    console.log(\"【节奏阅读】检测到现有的readingModeChanged函数，重写它\");\n    const originalReadingModeChanged = window.readingModeChanged;\n    window.readingModeChanged = function (mode) {\n      console.log(`【节奏阅读】readingModeChanged被调用，模式: ${mode}`);\n\n      // 调用原始函数\n      originalReadingModeChanged(mode);\n\n      // 添加我们的处理逻辑\n      if (mode === 'rhythm' || mode === 'rhythmReading' || typeof mode === 'string' && (mode.includes('rhythm') || mode.includes('节奏'))) {\n        console.log(\"【节奏阅读】检测到选择了节奏阅读模式\");\n        rhythmReader.start();\n      } else {\n        if (rhythmReader.active) {\n          rhythmReader.stop();\n        }\n      }\n    };\n    foundSelector = true;\n  }\n  if (!foundSelector) {\n    console.warn(\"【节奏阅读】警告: 未找到可能的阅读模式选择器\");\n    console.log(\"【节奏阅读】可以通过调用 window.rhythmReader.start() 手动启动\");\n  }\n\n  // 监听页面变化，以便在翻页后重新启动\n  const observer = new MutationObserver(mutations => {\n    // 只响应重要的DOM变化\n    const importantChanges = mutations.some(m => m.type === 'childList' && m.addedNodes.length > 0);\n    if (importantChanges && document.body.dataset.needsRhythmReading === \"true\") {\n      console.log(\"【节奏阅读】检测到页面变化，尝试恢复节奏阅读\");\n\n      // 清除标记\n      document.body.dataset.needsRhythmReading = \"false\";\n\n      // 延迟启动，确保页面完全加载\n      setTimeout(() => {\n        rhythmReader.start();\n      }, 800);\n    }\n  });\n\n  // 观察body变化\n  observer.observe(document.body, {\n    childList: true,\n    subtree: true\n  });\n\n  // 添加一个直接触发的方式，用于调试\n  console.log(\"【节奏阅读】初始化完成，可以使用以下方式手动启动:\");\n  console.log(\"- 从界面选择'节奏阅读'选项\");\n  console.log(\"- 执行 window.rhythmReader.start()\");\n})();\nconst App = () => {\n  _s();\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const autoReadGuideRef = useRef(null);\n  const autoReadIntervalRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n\n  // 新增自动阅读器状态\n  const [autoReaderState, setAutoReaderState] = useState({\n    currentIndex: 0,\n    charPositions: [],\n    intervalId: null,\n    speed: 300,\n    pageContainer: null,\n    isUserScrolling: false,\n    scrollTimeout: null,\n    contentLoaded: false\n  });\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n    return () => {\n      // 清理自动阅读定时器\n      if (autoReadIntervalRef.current) {\n        clearInterval(autoReadIntervalRef.current);\n      }\n    };\n  }, []);\n\n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async file => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n\n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n\n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n\n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({\n        scale: 1.0\n      });\n\n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async textContent => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n\n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n\n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n\n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    const lines = [...lineMap.values()];\n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    return hasTocKeywords || hasPageNumberPatterns || shortLineRatio > 0.7 && numberLineRatio > 0.3;\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n\n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n\n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n\n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n\n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = text => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    return result;\n  };\n\n  // 修改processContentPage函数\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n\n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch (mode) {\n        case 'normal':\n          // 普通模式 - 简单分段显示\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'static':\n          // 静态高亮模式 - 应用词性标注和颜色高亮\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'follow-mouse':\n          // 鼠标跟随高亮模式 - 分段落但不预先高亮，由鼠标事件触发高亮\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      setContent(processedContent);\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async file => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain') {\n      handleTxtFile(file);\n    } else {\n      alert('请上传PDF或TXT文件');\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = container => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n\n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n\n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n\n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width / 2,\n            // 水平中心\n            y: rect.bottom,\n            // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n\n    // 过滤无效位置并排序\n    return positions.filter(p => p.char.trim() !== '').sort((a, b) => {\n      // 先按行排序，同行按列排序\n      const yDiff = a.y - b.y;\n      if (Math.abs(yDiff) > 5) {\n        // 5px阈值判断是否同一行\n        return yDiff;\n      }\n      return a.x - b.x;\n    });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n\n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - containerVisibleHeight / 2;\n\n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - window.innerHeight / 2;\n\n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n\n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n\n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length ||\n      // 已到末尾\n      positions[nextIndex].char.trim() === '' ||\n      // 下一个是空白\n      positions[nextIndex].y > charPosition.y + 5) {\n        // 下一个在新行\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n\n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n\n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || current.y > prev.y + 5) {\n        // 有明显换行\n        break;\n      }\n      start--;\n    }\n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n\n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n\n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (window.autoReader.charPositions.length === 0) {\n      if (window.currentPage < window.totalPages) {\n        window.changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 重置索引到开头\n    window.autoReader.currentIndex = 0;\n\n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n\n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n\n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none';\n      highlight.style.zIndex = '998';\n      contentContainer.appendChild(highlight);\n    }\n\n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n\n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20;\n\n    // 尝试获取实际行高\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(window.autoReader.charPositions[i].y - window.autoReader.charPositions[i - 1].y);\n        if (yDiff > 5) {\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n\n    // 记录上次滚动的位置\n    let lastScrolledY = -1;\n    const scrollSafeZone = lineHeight * 2.5;\n\n    // 设置字符大小的估计值\n    let charWidth = 20;\n    let charHeight = lineHeight * 0.8;\n\n    // 尝试估计字符宽度\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        if (window.autoReader.charPositions[i].x !== window.autoReader.charPositions[i - 1].x) {\n          const xDiff = Math.abs(window.autoReader.charPositions[i].x - window.autoReader.charPositions[i - 1].x);\n          if (xDiff > 0 && xDiff < 50) {\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    window.autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (window.autoReader.currentIndex < window.autoReader.charPositions.length && ((_window$autoReader$ch = window.autoReader.charPositions[window.autoReader.currentIndex]) === null || _window$autoReader$ch === void 0 ? void 0 : _window$autoReader$ch.char.trim()) === '') {\n        var _window$autoReader$ch;\n        window.autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (window.autoReader.currentIndex >= window.autoReader.charPositions.length) {\n        if (window.currentPage < window.totalPages) {\n          window.changePage(1);\n          clearInterval(window.autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n      const pos = window.autoReader.charPositions[window.autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      if (cursor && highlight) {\n        const contentRect = contentContainer.getBoundingClientRect();\n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        highlight.style.left = `${relativeX - charWidth / 2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n\n        // 滚动处理\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          if (isContainerScrollable) {\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = relativeY;\n            }\n          } else {\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      window.autoReader.currentIndex++;\n    }, window.autoReader.speed);\n\n    // 在停止自动阅读时清除所有高亮\n    window.autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n\n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n\n      // 调用清理函数\n      if (window.autoReader.cleanup) {\n        window.autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n\n    // 重置翻页状态\n    window.autoReader.isPageChanging = false;\n\n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n\n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n\n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n\n    // 收集字符位置\n    window.autoReader.charPositions = getAllCharacterPositions(content);\n\n    // 如果当前页没有内容，尝试翻页\n    if (window.autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !window.autoReader.isPageChanging) {\n        window.autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async e => {\n    const newMode = e.target.value;\n\n    // 停止当前可能正在运行的自动阅读和节奏阅读\n    stopAutoReader();\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n\n    // 清理旧模式\n    cleanupDOM();\n\n    // 更新状态\n    setReadingMode(newMode);\n\n    // 应用新模式\n    if (pdfDocument && currentPage > 0) {\n      try {\n        const page = await pdfDocument.getPage(currentPage);\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        let processedContent = '';\n\n        // 应用对应模式的文本处理\n        switch (newMode) {\n          case 'follow-mouse':\n            processedContent = formatTextForMouseFollow(extractedText);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlight(extractedText);\n            break;\n          case 'auto-reader':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          case 'rhythm':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          default:\n            processedContent = formatTextToHtml(extractedText);\n        }\n        const contentArea = document.querySelector('.page-content');\n        if (contentArea) {\n          contentArea.textContent = '';\n          contentArea.innerHTML = processedContent;\n\n          // 滚动到页面顶部\n          window.scrollTo(0, 0);\n          if (contentArea.scrollTo) {\n            contentArea.scrollTo(0, 0);\n          }\n\n          // 立即初始化对应模式\n          if (newMode === 'auto-reader') {\n            setTimeout(initializeAutoReader, 50);\n          } else if (newMode === 'follow-mouse') {\n            setTimeout(initializeMouseFollow, 50);\n          } else if (newMode === 'rhythm') {\n            setTimeout(() => {\n              if (window.rhythmReader) {\n                window.rhythmReader.start();\n              }\n            }, 50);\n          }\n        }\n      } catch (error) {\n        console.error('应用新阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 1. 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll('.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line, .rhythm-char');\n    highlights.forEach(el => el.remove());\n\n    // 2. 移除事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 克隆内容区域以彻底移除所有事件监听器\n      const cleanContent = contentArea.cloneNode(false);\n      cleanContent.innerHTML = contentArea.innerHTML;\n      contentArea.parentNode.replaceChild(cleanContent, contentArea);\n    }\n\n    // 3. 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 创建新段落并保留基本结构\n      const newParagraph = document.createElement('p');\n      newParagraph.className = 'pdf-paragraph';\n      newParagraph.innerHTML = paragraph.innerHTML.replace(/<span class=\"text-line\">/g, '').replace(/<\\/span>/g, '').replace(/<span class=\"rhythm-char\">/g, '').replace(/<\\/span>/g, '');\n\n      // 移除特殊属性\n      newParagraph.removeAttribute('data-follow');\n      newParagraph.removeAttribute('style');\n      if (paragraph.parentNode) {\n        paragraph.parentNode.replaceChild(newParagraph, paragraph);\n      }\n    });\n\n    // 4. 清理自动阅读器\n    stopAutoReader();\n\n    // 5. 移除节奏阅读速度滑块\n    const slider = document.getElementById('rhythm-speed-slider');\n    if (slider) slider.remove();\n  };\n  const handleAutoScroll = () => {\n    window.autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = e => {\n    if (readingMode !== 'follow-mouse') return;\n\n    // 清除所有现有高亮\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n    const mouseTarget = document.elementFromPoint(e.clientX, e.clientY);\n    if (mouseTarget && (mouseTarget.classList.contains('pdf-paragraph') || mouseTarget.tagName === 'P' || mouseTarget.tagName === 'SPAN')) {\n      const targetParagraph = mouseTarget.closest('.pdf-paragraph');\n      if (!targetParagraph) return;\n\n      // 获取段落文本节点\n      const textNode = getTextNodeAtPosition(targetParagraph, e.clientX, e.clientY);\n      if (!textNode) return;\n\n      // 获取精确的行位置和尺寸\n      const range = document.createRange();\n      range.selectNodeContents(textNode);\n      const rects = range.getClientRects();\n\n      // 找到鼠标所在的具体行\n      let targetRect = null;\n      for (let i = 0; i < rects.length; i++) {\n        const rect = rects[i];\n        if (e.clientY >= rect.top && e.clientY <= rect.bottom) {\n          targetRect = rect;\n          break;\n        }\n      }\n      if (targetRect) {\n        // 创建高亮元素\n        const lineHighlight = document.createElement('div');\n        lineHighlight.className = 'line-highlight mouse-highlight';\n\n        // 计算相对于段落的位置\n        const paragraphRect = targetParagraph.getBoundingClientRect();\n        const top = targetRect.top - paragraphRect.top;\n        const left = targetRect.left - paragraphRect.left;\n\n        // 设置高亮样式\n        lineHighlight.style.position = 'absolute';\n        lineHighlight.style.left = `${left}px`;\n        lineHighlight.style.top = `${top}px`;\n        lineHighlight.style.width = `${targetRect.width}px`;\n        lineHighlight.style.height = `${targetRect.height}px`;\n        lineHighlight.style.pointerEvents = 'none';\n        lineHighlight.style.backgroundColor = 'rgba(255, 165, 0, 0.3)';\n        lineHighlight.style.borderRadius = '4px';\n        lineHighlight.style.boxShadow = '0 0 8px rgba(255, 165, 0, 0.5)';\n        lineHighlight.style.zIndex = '5';\n        lineHighlight.style.transition = 'all 0.1s ease';\n\n        // 确保段落有相对定位\n        targetParagraph.style.position = 'relative';\n        targetParagraph.appendChild(lineHighlight);\n      }\n    }\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 新增延迟补偿\n    setTimeout(() => {\n      addMouseFollowListeners();\n\n      // 强制触发重排\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        void contentArea.offsetHeight;\n\n        // 模拟鼠标移动事件\n        const fakeEvent = new MouseEvent('mousemove', {\n          clientX: window.innerWidth / 2,\n          clientY: window.innerHeight / 2,\n          bubbles: true\n        });\n        contentArea.dispatchEvent(fakeEvent);\n      }\n    }, 50);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = delta => {\n    window.autoReader.speed = Math.max(100, window.autoReader.speed + delta);\n    setAutoReaderState(prev => ({\n      ...prev,\n      speed: window.autoReader.speed\n    }));\n    if (window.autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async delta => {\n    const newPage = currentPage + delta;\n    if (newPage < 1 || newPage > totalPages) return;\n    const wasAutoReading = readingMode === 'auto-reader' && window.autoReader.intervalId;\n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n\n    // 如果正在自动阅读或节奏阅读，先停止\n    if (wasAutoReading) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n    }\n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n\n    // 更新页码\n    setCurrentPage(newPage);\n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 按当前阅读模式处理内容\n      let processedContent = '';\n      switch (readingMode) {\n        case 'follow-mouse':\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'auto-reader':\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'rhythm':\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n\n      // 更新页面内容\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        contentArea.textContent = '';\n        contentArea.innerHTML = processedContent;\n\n        // 滚动到页面顶部\n        window.scrollTo(0, 0);\n        if (contentArea.scrollTo) {\n          contentArea.scrollTo(0, 0);\n        }\n\n        // 重新启动对应的阅读模式\n        if (wasAutoReading) {\n          setTimeout(initializeAutoReader, 50);\n        } else if (wasRhythmReading && window.rhythmReader) {\n          setTimeout(() => {\n            window.rhythmReader.start();\n          }, 50);\n        }\n      }\n    } catch (error) {\n      console.error('翻页失败:', error);\n    }\n  };\n\n  // 修改后的监听器设置函数\n  const addMouseFollowListeners = () => {\n    if (readingMode !== 'follow-mouse') return;\n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n\n    // 清理旧的监听器\n    contentArea.removeEventListener('mousemove', handleMouseMove);\n    contentArea.removeEventListener('mouseleave', clearAllHighlights);\n\n    // 添加新的监听器\n    contentArea.addEventListener('mousemove', handleMouseMove);\n    contentArea.addEventListener('mouseleave', clearAllHighlights);\n\n    // 确保所有段落都有正确的样式\n    document.querySelectorAll('.pdf-paragraph').forEach(p => {\n      p.style.position = 'relative';\n      p.style.lineHeight = '1.5';\n    });\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = text => {\n    // 分段\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n\n    // 创建HTML内容\n    let htmlContent = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      htmlContent += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 应用静态高亮\n  const applyStaticHighlight = text => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    let htmlContent = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      // 新增强制清理逻辑\n      const cleanParagraph = paragraph.replace(/<span class=\"text-line\">/g, '').replace(/<\\/span>/g, '');\n      const highlightedText = processTextWithHighlight(cleanParagraph);\n      htmlContent += `<p class=\"pdf-paragraph\">${highlightedText}</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 格式化文本用于鼠标跟随高亮模式\n  const formatTextForMouseFollow = text => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    let htmlContent = '<div class=\"pdf-content mouse-follow-content\">';\n    paragraphs.forEach(paragraph => {\n      // 将段落分割成行\n      const lines = paragraph.split('\\n').filter(line => line.trim());\n      htmlContent += `<p class=\"pdf-paragraph\" data-follow=\"true\" style=\"position: relative; line-height: 1.5;\">`;\n      lines.forEach((line, i) => {\n        // 每行用span包裹\n        htmlContent += `<span class=\"text-line\" style=\"display: block;\">${line}</span>`;\n      });\n      htmlContent += `</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 强制初始化字符位置（这是关键步骤！）\n  function forceInitReader() {\n    console.log(\"强制初始化阅读器...\");\n\n    // 1. 如果autoReader或charPositions不存在，创建它们\n    if (typeof window.autoReader === 'undefined') {\n      window.autoReader = {\n        charPositions: [],\n        intervalId: null,\n        currentIndex: 0,\n        speed: 30\n      };\n    }\n\n    // 2. 如果没有字符位置数据，尝试触发它的创建\n    if (!window.autoReader.charPositions || window.autoReader.charPositions.length === 0) {\n      console.log(\"未找到字符位置数据，尝试强制创建...\");\n\n      // 直接使用scanTextPositionsSimple函数\n      scanTextPositionsSimple();\n    }\n    return window.autoReader.charPositions && window.autoReader.charPositions.length > 0;\n  }\n\n  // 简单的文本位置扫描函数\n  function scanTextPositionsSimple() {\n    console.log(\"使用简单文本扫描...\");\n    window.autoReader.charPositions = [];\n    const contentElement = document.querySelector('.page-content');\n    if (!contentElement) {\n      console.error(\"找不到内容容器\");\n      return;\n    }\n\n    // 递归处理文本节点\n    function processTextNodes(element) {\n      if (element.nodeType === Node.TEXT_NODE) {\n        const text = element.textContent;\n        if (!text || text.trim() === '') return;\n\n        // 获取元素的位置信息\n        const range = document.createRange();\n\n        // 为每个字符创建一个独立的范围\n        for (let i = 0; i < text.length; i++) {\n          try {\n            range.setStart(element, i);\n            range.setEnd(element, i + 1);\n            const rect = range.getBoundingClientRect();\n            if (rect.width > 0 && rect.height > 0) {\n              window.autoReader.charPositions.push({\n                char: text[i],\n                x: rect.left + rect.width / 2,\n                y: rect.top + rect.height / 2,\n                element: element.parentElement\n              });\n            }\n          } catch (e) {\n            console.warn(\"无法处理字符\", e);\n          }\n        }\n      } else if (element.nodeType === Node.ELEMENT_NODE) {\n        // 递归处理子元素\n        for (const child of element.childNodes) {\n          processTextNodes(child);\n        }\n      }\n    }\n    processTextNodes(contentElement);\n    console.log(\"扫描完成，找到字符数量:\", window.autoReader.charPositions.length);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1898,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1897,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"upload-btn\",\n        children: [\"\\u9009\\u62E9\\u6587\\u4EF6\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".pdf,.txt\",\n          onChange: handleFileUpload,\n          style: {\n            display: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1902,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1900,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1896,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1912,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mode-selector\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: readingMode,\n              onChange: handleReadingModeChange,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"normal\",\n                children: \"\\u666E\\u901A\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1916,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"static\",\n                children: \"\\u9759\\u6001\\u9AD8\\u4EAE\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1917,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"follow-mouse\",\n                children: \"\\u9F20\\u6807\\u8DDF\\u968F\\u9AD8\\u4EAE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1918,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"auto-reader\",\n                children: \"\\u81EA\\u52A8\\u9605\\u8BFB\\u5668\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1919,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"rhythm\",\n                children: \"\\u8282\\u594F\\u9605\\u8BFB\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1920,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1915,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1914,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mode-selector\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: posMode,\n              onChange: e => setPosMode(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"none\",\n                children: \"\\u65E0\\u8BCD\\u6027\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1925,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"noun\",\n                children: \"\\u540D\\u8BCD\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1926,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"all\",\n                children: \"\\u5168\\u8BCD\\u6027\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1927,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1924,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1923,\n            columnNumber: 13\n          }, this), readingMode === 'auto-reader' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"speed-control\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => adjustSpeed(-100),\n              children: \"-\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1932,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [autoReaderState.speed, \"ms\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1933,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => adjustSpeed(100),\n              children: \"+\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1934,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1931,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1913,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1911,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-content\",\n        children: content ? /*#__PURE__*/_jsxDEV(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: content\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1941,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-state\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u8BF7\\u4E0A\\u4F20PDF\\u6216TXT\\u6587\\u4EF6\\u5F00\\u59CB\\u9605\\u8BFB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1944,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1943,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1939,\n        columnNumber: 9\n      }, this), content && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"page-btn prev\",\n          onClick: () => changePage(-1),\n          disabled: currentPage === 1,\n          children: \"\\u4E0A\\u4E00\\u9875\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1950,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"page-info\",\n          children: [\"\\u7B2C \", currentPage, \" \\u9875 / \\u5171 \", totalPages, \" \\u9875\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1953,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"page-btn next\",\n          onClick: () => changePage(1),\n          disabled: currentPage === totalPages,\n          children: \"\\u4E0B\\u4E00\\u9875\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1956,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1949,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1910,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1895,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"FdIIE1mY5AAmB921foSmrxDLqNQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","pdfjsLib","pdfjsViewer","marked","pdfjs","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","window","currentPage","totalPages","changePage","autoReader","charPositions","intervalId","currentIndex","speed","pageContainer","isScrolling","isPageChanging","cleanup","rhythmReaderGlobal","active","console","log","rhythmReadingInitialized","rhythmReader","readIndices","Set","charElements","start","stop","initializeTextNodes","error","addSpeedSlider","updateTextColors","scrollToCurrentChar","setInterval","moveToNextChar","showNotification","document","body","dataset","rhythmReadingActive","clearInterval","restoreOriginalText","slider","getElementById","remove","message","notification","createElement","id","textContent","style","position","top","left","transform","backgroundColor","color","padding","borderRadius","zIndex","fontSize","appendChild","setTimeout","parentNode","removeChild","contentContainer","querySelector","textNodes","findTextNodes","length","forEach","node","text","nodeValue","trim","fragment","createDocumentFragment","i","char","span","className","rhythmIndex","whitespace","display","margin","border","push","replaceChild","element","childNodes","nodeType","Node","TEXT_NODE","ELEMENT_NODE","index","fontWeight","has","background","add","clickNextPageButton","nextPageSelectors","nextPageButton","selector","elements","querySelectorAll","el","offsetParent","e","buttons","button","toLowerCase","includes","needsRhythmReading","click","rect","getBoundingClientRect","lineHeight","parseInt","getComputedStyle","Math","max","height","isContainerScrollable","scrollHeight","clientHeight","overflowY","containerRect","relativeTop","scrollTop","visibleTop","visibleBottom","scrollBy","behavior","viewportTop","scrollY","viewportBottom","innerHeight","absoluteTop","container","right","boxShadow","alignItems","maxWidth","label","marginRight","input","type","min","step","value","width","valueDisplay","marginLeft","minWidth","self","addEventListener","newSpeed","charSpans","parentNodeMap","Map","parent","set","get","spans","sort","a","b","indexA","indexB","groups","currentGroup","prevIndex","previousSibling","group","map","join","textNode","createTextNode","selectors","foundSelector","readingModeChanged","originalReadingModeChanged","mode","warn","observer","MutationObserver","mutations","importantChanges","some","m","addedNodes","observe","childList","subtree","App","_s","pages","setPages","setCurrentPage","setTotalPages","fileName","setFileName","loading","setLoading","fileRef","file","setFile","pdfInstance","setPdfInstance","extractedTextPages","setExtractedTextPages","readingMode","setReadingMode","posMode","setPosMode","markdownContent","setMarkdownContent","readerContainerRef","autoReadGuideRef","autoReadIntervalRef","content","setContent","pdfDocument","setPdfDocument","autoReaderState","setAutoReaderState","isUserScrolling","scrollTimeout","contentLoaded","current","initializeMouseFollow","handlePdfFile","fileURL","URL","createObjectURL","loadingTask","getDocument","pdf","promise","numPages","extractAndProcessPage","alert","pageNum","page","getPage","getTextContent","viewport","getViewport","scale","isTableOfContents","detectIfTocPage","processTocPage","processContentPage","addMouseFollowListeners","textItems","items","fullText","item","str","hasTocKeywords","test","hasPageNumberPatterns","shortLinesCount","linesWithNumbersCount","lineMap","yKey","round","lines","values","line","lineText","shortLineRatio","numberLineRatio","htmlContent","x","y","sqrt","fontName","spacedText","split","getTextNodeAtPosition","nodes","range","createRange","selectNodeContents","rects","getClientRects","j","bottom","found","processTextWithHighlight","words","result","lastColor","word","random","extractedText","replace","processedContent","formatTextToHtml","applyStaticHighlight","formatTextForMouseFollow","handleTxtFile","pageTexts","paragraph","fontFamily","handleFileUpload","target","files","getAllCharacterPositions","walker","createTreeWalker","NodeFilter","SHOW_TEXT","positions","nextNode","currentNode","setStart","setEnd","filter","p","yDiff","abs","scrollElementToCenter","elementY","targetScrollTop","containerVisibleHeight","scrollTo","absoluteElementY","createReaderCursor","cursor","cssText","head","isSentenceEnd","charPosition","sentenceEndMarks","nextIndex","findSentenceStart","prev","isInVisibleArea","threshold","topThreshold","bottomThreshold","startAutoReader","highlight","pointerEvents","lastScrolledY","scrollSafeZone","charWidth","charHeight","xDiff","_window$autoReader$ch","stopAutoReader","pos","contentRect","relativeX","relativeY","isInRecentlyScrolledArea","needsScroll","scrollAmount","absoluteY","initializeAutoReader","handleReadingModeChange","newMode","cleanupDOM","contentArea","innerHTML","highlights","cleanContent","cloneNode","paragraphs","newParagraph","removeAttribute","handleAutoScroll","updateCursorPosition","force","handleMouseMove","mouseTarget","elementFromPoint","clientX","clientY","classList","contains","tagName","targetParagraph","closest","targetRect","lineHighlight","paragraphRect","transition","clearAllHighlights","addAutoReaderStyles","offsetHeight","fakeEvent","MouseEvent","innerWidth","bubbles","dispatchEvent","adjustSpeed","delta","newPage","wasAutoReading","wasRhythmReading","removeEventListener","cleanParagraph","highlightedText","forceInitReader","scanTextPositionsSimple","contentElement","processTextNodes","parentElement","child","children","_jsxFileName","lineNumber","columnNumber","accept","onChange","onClick","dangerouslySetInnerHTML","__html","disabled","_c","$RefreshReg$"],"sources":["D:/adhd-read-helper/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 自动阅读器全局对象\nwindow.autoReader = {\n  charPositions: [],\n  intervalId: null,\n  currentIndex: 0,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false,\n  cleanup: null\n};\n\n// 添加新的节奏阅读模式代码\n// 全局变量，确保在页面切换后仍然保持状态\nwindow.rhythmReaderGlobal = window.rhythmReaderGlobal || {\n  active: false,\n  speed: 300\n};\n\n// 节奏阅读模式 - 更强大的实现\n(function() {\n  console.log(\"正在初始化节奏阅读模式...\");\n  \n  // 确保只初始化一次\n  if (window.rhythmReadingInitialized) {\n    console.log(\"节奏阅读模式已经初始化过，跳过\");\n    return;\n  }\n  window.rhythmReadingInitialized = true;\n  \n  // 状态变量和功能对象\n  const rhythmReader = {\n    active: false,\n    intervalId: null,\n    speed: 300,\n    currentIndex: 0,\n    readIndices: new Set(),\n    charElements: [],\n    \n    // 启动节奏阅读\n    start: function() {\n      console.log(\"【节奏阅读】启动中...\");\n      \n      // 先停止已有的\n      this.stop(false);\n      \n      // 设置为活动状态\n      this.active = true;\n      \n      // 初始化文本\n      if (!this.initializeTextNodes()) {\n        console.error(\"【节奏阅读】无法初始化文本节点\");\n        return;\n      }\n      \n      // 添加速度滑块\n      this.addSpeedSlider();\n      \n      // 更新颜色\n      this.updateTextColors();\n      \n      // 滚动到开始位置\n      this.scrollToCurrentChar();\n      \n      // 设置阅读间隔\n      this.intervalId = setInterval(() => this.moveToNextChar(), this.speed);\n      \n      console.log(\"【节奏阅读】成功启动\");\n      \n      // 显示提示\n      this.showNotification(\"节奏阅读模式已启动\");\n      \n      // 设置确认开启的标记\n      document.body.dataset.rhythmReadingActive = \"true\";\n    },\n    \n    // 停止节奏阅读\n    stop: function(showNotification = true) {\n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n      }\n      \n      if (this.active) {\n        console.log(\"【节奏阅读】停止中...\");\n        this.active = false;\n        \n        // 恢复原始文本\n        this.restoreOriginalText();\n        \n        // 移除速度滑块\n        const slider = document.getElementById('rhythm-speed-slider');\n        if (slider) slider.remove();\n        \n        if (showNotification) {\n          this.showNotification(\"节奏阅读模式已停止\");\n        }\n        \n        // 清除标记\n        document.body.dataset.rhythmReadingActive = \"false\";\n      }\n    },\n    \n    // 显示通知\n    showNotification: function(message) {\n      let notification = document.getElementById('rhythm-notification');\n      if (notification) notification.remove();\n      \n      notification = document.createElement('div');\n      notification.id = 'rhythm-notification';\n      notification.textContent = message;\n      notification.style.position = 'fixed';\n      notification.style.top = '50%';\n      notification.style.left = '50%';\n      notification.style.transform = 'translate(-50%, -50%)';\n      notification.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';\n      notification.style.color = 'white';\n      notification.style.padding = '15px 25px';\n      notification.style.borderRadius = '5px';\n      notification.style.zIndex = '10001';\n      notification.style.fontSize = '18px';\n      \n      document.body.appendChild(notification);\n      \n      // 2秒后自动消失\n      setTimeout(() => {\n        if (notification && notification.parentNode) {\n          notification.parentNode.removeChild(notification);\n        }\n      }, 2000);\n    },\n    \n    // 初始化文本节点\n    initializeTextNodes: function() {\n      console.log(\"【节奏阅读】初始化文本节点...\");\n      \n      // 重置字符元素数组\n      this.charElements = [];\n      \n      // 获取内容容器\n      const contentContainer = document.querySelector('.page-content') || document.body;\n      \n      // 查找所有文本节点并处理\n      const textNodes = [];\n      this.findTextNodes(contentContainer, textNodes);\n      \n      if (textNodes.length === 0) {\n        console.error(\"【节奏阅读】未找到文本节点\");\n        this.showNotification(\"无法启动节奏阅读：未找到文本内容\");\n        return false;\n      }\n      \n      console.log(`【节奏阅读】找到 ${textNodes.length} 个文本节点`);\n      \n      // 为每个文本节点创建字符span\n      textNodes.forEach(node => {\n        const text = node.nodeValue;\n        if (!text || text.trim() === '') return;\n        \n        // 创建文档片段来存放字符span\n        const fragment = document.createDocumentFragment();\n        \n        // 为每个字符创建span\n        for (let i = 0; i < text.length; i++) {\n          const char = text[i];\n          const span = document.createElement('span');\n          span.textContent = char;\n          span.className = 'rhythm-char';\n          span.dataset.rhythmIndex = this.charElements.length;\n          \n          // 如果是空白字符，添加一个标志\n          if (char.trim() === '') {\n            span.dataset.whitespace = 'true';\n          }\n          \n          // 保持原始样式，不设置背景\n          span.style.display = 'inline';\n          span.style.margin = '0';\n          span.style.padding = '0';\n          span.style.border = 'none';\n          span.style.backgroundColor = 'transparent';\n          \n          fragment.appendChild(span);\n          this.charElements.push(span);\n        }\n        \n        // 替换原始节点\n        if (node.parentNode) {\n          node.parentNode.replaceChild(fragment, node);\n        }\n      });\n      \n      console.log(`【节奏阅读】总共创建了 ${this.charElements.length} 个字符span`);\n      return this.charElements.length > 0;\n    },\n    \n    // 递归查找所有文本节点\n    findTextNodes: function(element, textNodes) {\n      // 处理子节点\n      for (let i = 0; i < element.childNodes.length; i++) {\n        const node = element.childNodes[i];\n        \n        // 如果是文本节点且有内容\n        if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() !== '') {\n          textNodes.push(node);\n        } \n        // 如果是元素节点，递归处理\n        else if (node.nodeType === Node.ELEMENT_NODE) {\n          // 跳过读者UI元素\n          if (node.id === 'rhythm-speed-slider' || \n              node.id === 'rhythm-notification' ||\n              node.className === 'rhythm-char') {\n            continue;\n          }\n          this.findTextNodes(node, textNodes);\n        }\n      }\n    },\n    \n    // 更新文本颜色\n    updateTextColors: function() {\n      // 更新所有字符的颜色\n      this.charElements.forEach((span, index) => {\n        // 确定颜色\n        let color;\n        let fontWeight = 'inherit';\n        \n        if (index === this.currentIndex) {\n          color = '#00aa00'; // 当前阅读的字 - 绿色\n          fontWeight = 'bold';\n        } else if (index === this.currentIndex + 1 || index === this.currentIndex + 2) {\n          color = '#aaaaaa'; // 接下来两个字 - 淡灰色\n        } else if (this.readIndices.has(index)) {\n          color = '#ffffff'; // 已读字符 - 白色（表示已读）\n        } else {\n          color = 'rgba(160, 160, 160, 0.25)'; // 未读字符 - 非常淡的灰色（可见但不明显）\n        }\n        \n        span.style.color = color;\n        span.style.fontWeight = fontWeight;\n        \n        // 确保没有背景\n        span.style.backgroundColor = 'transparent';\n        span.style.background = 'none';\n      });\n    },\n    \n    // 移动到下一个字符\n    moveToNextChar: function() {\n      // 将当前字符标记为已读\n      this.readIndices.add(this.currentIndex);\n      \n      // 移动到下一个非空白字符\n      do {\n        this.currentIndex++;\n        \n        // 检查是否到达末尾\n        if (this.currentIndex >= this.charElements.length) {\n          console.log(\"【节奏阅读】已到达页尾，尝试翻页\");\n          \n          // 尝试点击下一页按钮\n          if (!this.clickNextPageButton()) {\n            // 如果没有找到下一页按钮，完全停止阅读\n            this.stop();\n          }\n          return;\n        }\n      } while (\n        this.currentIndex < this.charElements.length && \n        this.charElements[this.currentIndex] && \n        this.charElements[this.currentIndex].dataset.whitespace === 'true'\n      );\n      \n      // 更新颜色\n      this.updateTextColors();\n      \n      // 滚动到当前字符\n      this.scrollToCurrentChar();\n    },\n    \n    // 尝试自动翻页\n    clickNextPageButton: function() {\n      console.log(\"【节奏阅读】尝试查找并点击下一页按钮\");\n      \n      // 尝试多种可能的选择器来找到下一页按钮\n      const nextPageSelectors = [\n        'button.next-page', \n        'button[aria-label=\"下一页\"]',\n        'a.next-page',\n        'a[aria-label=\"下一页\"]',\n        '.next-page',\n        '#next-page',\n        'button.next',\n        'a.next'\n      ];\n      \n      let nextPageButton = null;\n      \n      // 尝试通过选择器找到按钮\n      for (const selector of nextPageSelectors) {\n        try {\n          const elements = document.querySelectorAll(selector);\n          for (const el of elements) {\n            if (el.offsetParent !== null) { // 检查元素是否可见\n              console.log(`【节奏阅读】找到下一页按钮: ${selector}`);\n              nextPageButton = el;\n              break;\n            }\n          }\n          if (nextPageButton) break;\n        } catch (e) {\n          // 某些选择器可能不被支持，忽略错误\n        }\n      }\n      \n      // 如果没找到，尝试按文本内容查找\n      if (!nextPageButton) {\n        const buttons = document.querySelectorAll('button, a, div[role=\"button\"]');\n        for (const button of buttons) {\n          const text = button.textContent.trim().toLowerCase();\n          if ((text.includes('下一页') || text.includes('next') || text === '>' || text === '→') && \n              button.offsetParent !== null) {\n            console.log(`【节奏阅读】通过文本内容找到下一页按钮: ${text}`);\n            nextPageButton = button;\n            break;\n          }\n        }\n      }\n      \n      if (nextPageButton) {\n        console.log(\"【节奏阅读】模拟点击下一页按钮\");\n        \n        // 保存状态，指示我们需要在新页面上恢复\n        document.body.dataset.needsRhythmReading = \"true\";\n        \n        // 恢复原始文本（准备翻页）\n        this.restoreOriginalText();\n        \n        // 停止计时器\n        if (this.intervalId) {\n          clearInterval(this.intervalId);\n          this.intervalId = null;\n        }\n        \n        // 模拟点击\n        nextPageButton.click();\n        \n        return true;\n      } else {\n        console.log(\"【节奏阅读】未找到下一页按钮\");\n        return false;\n      }\n    },\n    \n    // 滚动到当前字符\n    scrollToCurrentChar: function() {\n      const span = this.charElements[this.currentIndex];\n      if (!span) return;\n      \n      const rect = span.getBoundingClientRect();\n      const contentContainer = document.querySelector('.page-content');\n      \n      // 估计行高\n      const lineHeight = parseInt(window.getComputedStyle(span).lineHeight) || \n                         Math.max(20, rect.height * 1.5);\n      \n      // 确定滚动容器\n      const isContainerScrollable = contentContainer && \n        contentContainer.scrollHeight > contentContainer.clientHeight &&\n        ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n      \n      if (isContainerScrollable) {\n        // 容器滚动\n        const containerRect = contentContainer.getBoundingClientRect();\n        const relativeTop = rect.top - containerRect.top + contentContainer.scrollTop;\n        \n        const visibleTop = contentContainer.scrollTop;\n        const visibleBottom = visibleTop + contentContainer.clientHeight;\n        \n        if (relativeTop < visibleTop + lineHeight || relativeTop > visibleBottom - lineHeight) {\n          contentContainer.scrollBy({\n            top: lineHeight * 2 * (relativeTop > visibleBottom - lineHeight ? 1 : -1),\n            behavior: 'smooth'\n          });\n        }\n      } else {\n        // 窗口滚动\n        const viewportTop = window.scrollY;\n        const viewportBottom = viewportTop + window.innerHeight;\n        const absoluteTop = rect.top + window.scrollY;\n        \n        if (absoluteTop < viewportTop + lineHeight || absoluteTop > viewportBottom - lineHeight) {\n          window.scrollBy({\n            top: lineHeight * 2 * (absoluteTop > viewportBottom - lineHeight ? 1 : -1),\n            behavior: 'smooth'\n          });\n        }\n      }\n    },\n    \n    // 添加速度滑块\n    addSpeedSlider: function() {\n      let slider = document.getElementById('rhythm-speed-slider');\n      if (slider) slider.remove();\n      \n      const container = document.createElement('div');\n      container.id = 'rhythm-speed-slider';\n      container.style.position = 'fixed';\n      container.style.top = '70px';\n      container.style.right = '20px';\n      container.style.backgroundColor = 'white';\n      container.style.padding = '10px';\n      container.style.borderRadius = '5px';\n      container.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';\n      container.style.zIndex = '10000';\n      container.style.display = 'flex';\n      container.style.alignItems = 'center';\n      container.style.maxWidth = '300px';\n      \n      const label = document.createElement('label');\n      label.textContent = '速度: ';\n      label.style.marginRight = '8px';\n      container.appendChild(label);\n      \n      const input = document.createElement('input');\n      input.type = 'range';\n      input.min = '50';\n      input.max = '1000';\n      input.step = '50';\n      input.value = this.speed;\n      input.style.width = '120px';\n      \n      const valueDisplay = document.createElement('span');\n      valueDisplay.textContent = `${this.speed}ms`;\n      valueDisplay.style.marginLeft = '8px';\n      valueDisplay.style.minWidth = '60px';\n      \n      const self = this;\n      input.addEventListener('input', function() {\n        const newSpeed = parseInt(this.value);\n        self.speed = newSpeed;\n        valueDisplay.textContent = `${newSpeed}ms`;\n        \n        if (self.intervalId) {\n          clearInterval(self.intervalId);\n          self.intervalId = setInterval(() => self.moveToNextChar(), newSpeed);\n        }\n      });\n      \n      container.appendChild(input);\n      container.appendChild(valueDisplay);\n      document.body.appendChild(container);\n    },\n    \n    // 恢复原始文本\n    restoreOriginalText: function() {\n      // 获取所有已创建的字符span\n      const charSpans = document.querySelectorAll('.rhythm-char');\n      \n      // 按父节点分组\n      const parentNodeMap = new Map();\n      \n      charSpans.forEach(span => {\n        const parent = span.parentNode;\n        if (!parent) return;\n        \n        if (!parentNodeMap.has(parent)) {\n          parentNodeMap.set(parent, []);\n        }\n        parentNodeMap.get(parent).push(span);\n      });\n      \n      // 对每个父节点，将连续的字符span合并回文本节点\n      parentNodeMap.forEach((spans, parent) => {\n        if (spans.length === 0) return;\n        \n        // 排序spans确保顺序正确\n        spans.sort((a, b) => {\n          const indexA = parseInt(a.dataset.rhythmIndex || '0');\n          const indexB = parseInt(b.dataset.rhythmIndex || '0');\n          return indexA - indexB;\n        });\n        \n        // 根据连续性分组\n        const groups = [];\n        if (spans.length > 0) {\n          let currentGroup = [spans[0]];\n          \n          for (let i = 1; i < spans.length; i++) {\n            const prevIndex = parseInt(spans[i-1].dataset.rhythmIndex || '0');\n            const currentIndex = parseInt(spans[i].dataset.rhythmIndex || '0');\n            \n            if (currentIndex === prevIndex + 1 && spans[i].previousSibling === spans[i-1]) {\n              currentGroup.push(spans[i]);\n            } else {\n              groups.push(currentGroup);\n              currentGroup = [spans[i]];\n            }\n          }\n          \n          groups.push(currentGroup);\n        }\n        \n        // 对每个连续组替换为文本节点\n        groups.forEach(group => {\n          if (group.length === 0) return;\n          \n          try {\n            const text = group.map(span => span.textContent).join('');\n            const textNode = document.createTextNode(text);\n            \n            // 替换第一个span，然后移除其余的\n            if (group[0].parentNode === parent) {\n              parent.replaceChild(textNode, group[0]);\n              for (let i = 1; i < group.length; i++) {\n                if (group[i].parentNode === parent) {\n                  parent.removeChild(group[i]);\n                }\n              }\n            }\n          } catch (e) {\n            console.error(\"【节奏阅读】恢复文本时出错:\", e);\n          }\n        });\n      });\n      \n      // 清除字符元素数组\n      this.charElements = [];\n    }\n  };\n  \n  // 暴露到全局，以便调试和直接调用\n  window.rhythmReader = rhythmReader;\n  \n  // 直接挂钩到可能的下拉选择器\n  console.log(\"【节奏阅读】寻找并挂钩阅读模式选择器...\");\n  \n  // 尝试查找可能的下拉选择器\n  const selectors = [\n    'select[name=\"readingMode\"]',\n    'select.reading-mode',\n    'select#reading-mode',\n    'select[aria-label=\"阅读模式\"]',\n    '.reading-mode-selector'\n  ];\n  \n  let foundSelector = false;\n  \n  for (const selector of selectors) {\n    const elements = document.querySelectorAll(selector);\n    for (const element of elements) {\n      console.log(`【节奏阅读】找到可能的阅读模式选择器: ${selector}`);\n      element.addEventListener('change', function() {\n        const value = this.value.toLowerCase();\n        console.log(`【节奏阅读】阅读模式选择变更为: ${value}`);\n        \n        if (value.includes('rhythm') || value.includes('节奏')) {\n          console.log(\"【节奏阅读】检测到选择了节奏阅读模式\");\n          rhythmReader.start();\n        } else {\n          if (rhythmReader.active) {\n            rhythmReader.stop();\n          }\n        }\n      });\n      foundSelector = true;\n    }\n  }\n  \n  // 重写readingModeChanged函数\n  if (typeof window.readingModeChanged === 'function') {\n    console.log(\"【节奏阅读】检测到现有的readingModeChanged函数，重写它\");\n    \n    const originalReadingModeChanged = window.readingModeChanged;\n    \n    window.readingModeChanged = function(mode) {\n      console.log(`【节奏阅读】readingModeChanged被调用，模式: ${mode}`);\n      \n      // 调用原始函数\n      originalReadingModeChanged(mode);\n      \n      // 添加我们的处理逻辑\n      if (mode === 'rhythm' || mode === 'rhythmReading' || \n          (typeof mode === 'string' && (mode.includes('rhythm') || mode.includes('节奏')))) {\n        console.log(\"【节奏阅读】检测到选择了节奏阅读模式\");\n        rhythmReader.start();\n      } else {\n        if (rhythmReader.active) {\n          rhythmReader.stop();\n        }\n      }\n    };\n    \n    foundSelector = true;\n  }\n  \n  if (!foundSelector) {\n    console.warn(\"【节奏阅读】警告: 未找到可能的阅读模式选择器\");\n    console.log(\"【节奏阅读】可以通过调用 window.rhythmReader.start() 手动启动\");\n  }\n  \n  // 监听页面变化，以便在翻页后重新启动\n  const observer = new MutationObserver((mutations) => {\n    // 只响应重要的DOM变化\n    const importantChanges = mutations.some(m => \n      m.type === 'childList' && m.addedNodes.length > 0);\n    \n    if (importantChanges && document.body.dataset.needsRhythmReading === \"true\") {\n      console.log(\"【节奏阅读】检测到页面变化，尝试恢复节奏阅读\");\n      \n      // 清除标记\n      document.body.dataset.needsRhythmReading = \"false\";\n      \n      // 延迟启动，确保页面完全加载\n      setTimeout(() => {\n        rhythmReader.start();\n      }, 800);\n    }\n  });\n  \n  // 观察body变化\n  observer.observe(document.body, {\n    childList: true,\n    subtree: true\n  });\n  \n  // 添加一个直接触发的方式，用于调试\n  console.log(\"【节奏阅读】初始化完成，可以使用以下方式手动启动:\");\n  console.log(\"- 从界面选择'节奏阅读'选项\");\n  console.log(\"- 执行 window.rhythmReader.start()\");\n})();\n\nconst App = () => {\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const autoReadGuideRef = useRef(null);\n  const autoReadIntervalRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  \n  // 新增自动阅读器状态\n  const [autoReaderState, setAutoReaderState] = useState({\n    currentIndex: 0,\n    charPositions: [],\n    intervalId: null,\n    speed: 300,\n    pageContainer: null,\n    isUserScrolling: false,\n    scrollTimeout: null,\n    contentLoaded: false\n  });\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n    \n    return () => {\n      // 清理自动阅读定时器\n      if (autoReadIntervalRef.current) {\n        clearInterval(autoReadIntervalRef.current);\n      }\n    };\n  }, []);\n  \n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async (file) => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      \n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n      \n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n      \n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n  \n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({ scale: 1.0 });\n      \n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      \n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      \n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async (textContent) => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n    \n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n    \n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n    \n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    \n    const lines = [...lineMap.values()];\n    \n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    \n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    \n    return hasTocKeywords || hasPageNumberPatterns || (shortLineRatio > 0.7 && numberLineRatio > 0.3);\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n    \n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    \n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n      \n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n      \n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n      \n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    \n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && \n              x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = (text) => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    \n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      \n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        \n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    \n    return result;\n  };\n\n  // 修改processContentPage函数\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      \n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch(mode) {\n        case 'normal':\n          // 普通模式 - 简单分段显示\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'static':\n          // 静态高亮模式 - 应用词性标注和颜色高亮\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'follow-mouse':\n          // 鼠标跟随高亮模式 - 分段落但不预先高亮，由鼠标事件触发高亮\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      \n      setContent(processedContent);\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async (file) => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n    \n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain') {\n      handleTxtFile(file);\n    } else {\n      alert('请上传PDF或TXT文件');\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = (container) => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    \n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n      \n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n      \n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          \n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n          \n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width/2,  // 水平中心\n            y: rect.bottom,               // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n    \n    // 过滤无效位置并排序\n    return positions\n      .filter(p => p.char.trim() !== '')\n      .sort((a, b) => {\n        // 先按行排序，同行按列排序\n        const yDiff = a.y - b.y;\n        if (Math.abs(yDiff) > 5) { // 5px阈值判断是否同一行\n          return yDiff;\n        }\n        return a.x - b.x;\n      });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    \n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - (containerVisibleHeight / 2);\n      \n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - (window.innerHeight / 2);\n      \n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    \n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n    \n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    \n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n    \n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length || // 已到末尾\n          positions[nextIndex].char.trim() === '' || // 下一个是空白\n          positions[nextIndex].y > charPosition.y + 5) { // 下一个在新行\n        return true;\n      }\n    }\n    \n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n    \n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n      \n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || \n          current.y > prev.y + 5) { // 有明显换行\n        break;\n      }\n      \n      start--;\n    }\n    \n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n      \n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      \n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n      \n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      \n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (window.autoReader.charPositions.length === 0) {\n      if (window.currentPage < window.totalPages) {\n        window.changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 重置索引到开头\n    window.autoReader.currentIndex = 0;\n    \n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    \n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n    \n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n    \n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none';\n      highlight.style.zIndex = '998';\n      contentContainer.appendChild(highlight);\n    }\n    \n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight &&\n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n    \n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20;\n    \n    // 尝试获取实际行高\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(window.autoReader.charPositions[i].y - window.autoReader.charPositions[i-1].y);\n        if (yDiff > 5) {\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n    \n    // 记录上次滚动的位置\n    let lastScrolledY = -1;\n    const scrollSafeZone = lineHeight * 2.5;\n    \n    // 设置字符大小的估计值\n    let charWidth = 20;\n    let charHeight = lineHeight * 0.8;\n    \n    // 尝试估计字符宽度\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        if (window.autoReader.charPositions[i].x !== window.autoReader.charPositions[i-1].x) {\n          const xDiff = Math.abs(window.autoReader.charPositions[i].x - window.autoReader.charPositions[i-1].x);\n          if (xDiff > 0 && xDiff < 50) {\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    \n    window.autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (window.autoReader.currentIndex < window.autoReader.charPositions.length && \n             window.autoReader.charPositions[window.autoReader.currentIndex]?.char.trim() === '') {\n        window.autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (window.autoReader.currentIndex >= window.autoReader.charPositions.length) {\n        if (window.currentPage < window.totalPages) {\n          window.changePage(1);\n          clearInterval(window.autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n\n      const pos = window.autoReader.charPositions[window.autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      \n      if (cursor && highlight) {\n        const contentRect = contentContainer.getBoundingClientRect();\n        \n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        \n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        \n        highlight.style.left = `${relativeX - charWidth/2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n        \n        // 滚动处理\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        \n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          \n          if (isContainerScrollable) {\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n            \n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            \n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = relativeY;\n            }\n          } else {\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n            \n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            \n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      \n      window.autoReader.currentIndex++;\n      \n    }, window.autoReader.speed);\n    \n    // 在停止自动阅读时清除所有高亮\n    window.autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n      \n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n      \n      // 调用清理函数\n      if (window.autoReader.cleanup) {\n        window.autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n    \n    // 重置翻页状态\n    window.autoReader.isPageChanging = false;\n    \n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n    \n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n    \n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n    \n    // 收集字符位置\n    window.autoReader.charPositions = getAllCharacterPositions(content);\n    \n    // 如果当前页没有内容，尝试翻页\n    if (window.autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !window.autoReader.isPageChanging) {\n        window.autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async (e) => {\n    const newMode = e.target.value;\n    \n    // 停止当前可能正在运行的自动阅读和节奏阅读\n    stopAutoReader();\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    \n    // 清理旧模式\n    cleanupDOM();\n    \n    // 更新状态\n    setReadingMode(newMode);\n    \n    // 应用新模式\n    if (pdfDocument && currentPage > 0) {\n      try {\n        const page = await pdfDocument.getPage(currentPage);\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        let processedContent = '';\n        \n        // 应用对应模式的文本处理\n        switch(newMode) {\n          case 'follow-mouse':\n            processedContent = formatTextForMouseFollow(extractedText);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlight(extractedText);\n            break;\n          case 'auto-reader':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          case 'rhythm':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          default:\n            processedContent = formatTextToHtml(extractedText);\n        }\n        \n        const contentArea = document.querySelector('.page-content');\n        if (contentArea) {\n          contentArea.textContent = '';\n          contentArea.innerHTML = processedContent;\n          \n          // 滚动到页面顶部\n          window.scrollTo(0, 0);\n          if (contentArea.scrollTo) {\n            contentArea.scrollTo(0, 0);\n          }\n          \n          // 立即初始化对应模式\n          if (newMode === 'auto-reader') {\n            setTimeout(initializeAutoReader, 50);\n          } else if (newMode === 'follow-mouse') {\n            setTimeout(initializeMouseFollow, 50);\n          } else if (newMode === 'rhythm') {\n            setTimeout(() => {\n              if (window.rhythmReader) {\n                window.rhythmReader.start();\n              }\n            }, 50);\n          }\n        }\n      } catch (error) {\n        console.error('应用新阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 1. 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll(\n      '.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line, .rhythm-char'\n    );\n    highlights.forEach(el => el.remove());\n    \n    // 2. 移除事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 克隆内容区域以彻底移除所有事件监听器\n      const cleanContent = contentArea.cloneNode(false);\n      cleanContent.innerHTML = contentArea.innerHTML;\n      contentArea.parentNode.replaceChild(cleanContent, contentArea);\n    }\n    \n    // 3. 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 创建新段落并保留基本结构\n      const newParagraph = document.createElement('p');\n      newParagraph.className = 'pdf-paragraph';\n      newParagraph.innerHTML = paragraph.innerHTML\n        .replace(/<span class=\"text-line\">/g, '')\n        .replace(/<\\/span>/g, '')\n        .replace(/<span class=\"rhythm-char\">/g, '')\n        .replace(/<\\/span>/g, '');\n      \n      // 移除特殊属性\n      newParagraph.removeAttribute('data-follow');\n      newParagraph.removeAttribute('style');\n      \n      if (paragraph.parentNode) {\n        paragraph.parentNode.replaceChild(newParagraph, paragraph);\n      }\n    });\n    \n    // 4. 清理自动阅读器\n    stopAutoReader();\n    \n    // 5. 移除节奏阅读速度滑块\n    const slider = document.getElementById('rhythm-speed-slider');\n    if (slider) slider.remove();\n  };\n\n  const handleAutoScroll = () => {\n    window.autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = (e) => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    // 清除所有现有高亮\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n    \n    const mouseTarget = document.elementFromPoint(e.clientX, e.clientY);\n    \n    if (mouseTarget && \n       (mouseTarget.classList.contains('pdf-paragraph') || \n        mouseTarget.tagName === 'P' || \n        mouseTarget.tagName === 'SPAN')) {\n      \n      const targetParagraph = mouseTarget.closest('.pdf-paragraph');\n      if (!targetParagraph) return;\n      \n      // 获取段落文本节点\n      const textNode = getTextNodeAtPosition(targetParagraph, e.clientX, e.clientY);\n      if (!textNode) return;\n      \n      // 获取精确的行位置和尺寸\n      const range = document.createRange();\n      range.selectNodeContents(textNode);\n      const rects = range.getClientRects();\n      \n      // 找到鼠标所在的具体行\n      let targetRect = null;\n      for (let i = 0; i < rects.length; i++) {\n        const rect = rects[i];\n        if (e.clientY >= rect.top && e.clientY <= rect.bottom) {\n          targetRect = rect;\n          break;\n        }\n      }\n      \n      if (targetRect) {\n        // 创建高亮元素\n        const lineHighlight = document.createElement('div');\n        lineHighlight.className = 'line-highlight mouse-highlight';\n        \n        // 计算相对于段落的位置\n        const paragraphRect = targetParagraph.getBoundingClientRect();\n        const top = targetRect.top - paragraphRect.top;\n        const left = targetRect.left - paragraphRect.left;\n        \n        // 设置高亮样式\n        lineHighlight.style.position = 'absolute';\n        lineHighlight.style.left = `${left}px`;\n        lineHighlight.style.top = `${top}px`;\n        lineHighlight.style.width = `${targetRect.width}px`;\n        lineHighlight.style.height = `${targetRect.height}px`;\n        lineHighlight.style.pointerEvents = 'none';\n        lineHighlight.style.backgroundColor = 'rgba(255, 165, 0, 0.3)';\n        lineHighlight.style.borderRadius = '4px';\n        lineHighlight.style.boxShadow = '0 0 8px rgba(255, 165, 0, 0.5)';\n        lineHighlight.style.zIndex = '5';\n        lineHighlight.style.transition = 'all 0.1s ease';\n        \n        // 确保段落有相对定位\n          targetParagraph.style.position = 'relative';\n        targetParagraph.appendChild(lineHighlight);\n      }\n    }\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 新增延迟补偿\n    setTimeout(() => {\n      addMouseFollowListeners();\n      \n      // 强制触发重排\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        void contentArea.offsetHeight;\n        \n        // 模拟鼠标移动事件\n        const fakeEvent = new MouseEvent('mousemove', {\n          clientX: window.innerWidth / 2,\n          clientY: window.innerHeight / 2,\n          bubbles: true\n        });\n        contentArea.dispatchEvent(fakeEvent);\n      }\n    }, 50);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = (delta) => {\n    window.autoReader.speed = Math.max(100, window.autoReader.speed + delta);\n    setAutoReaderState(prev => ({ ...prev, speed: window.autoReader.speed }));\n    \n    if (window.autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async (delta) => {\n    const newPage = currentPage + delta;\n    \n    if (newPage < 1 || newPage > totalPages) return;\n    \n    const wasAutoReading = readingMode === 'auto-reader' && window.autoReader.intervalId;\n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n    \n    // 如果正在自动阅读或节奏阅读，先停止\n    if (wasAutoReading) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n    }\n    \n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    \n    // 更新页码\n    setCurrentPage(newPage);\n    \n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n      // 按当前阅读模式处理内容\n      let processedContent = '';\n      switch(readingMode) {\n        case 'follow-mouse':\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'auto-reader':\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'rhythm':\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      \n      // 更新页面内容\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        contentArea.textContent = '';\n        contentArea.innerHTML = processedContent;\n        \n        // 滚动到页面顶部\n        window.scrollTo(0, 0);\n        if (contentArea.scrollTo) {\n          contentArea.scrollTo(0, 0);\n        }\n        \n        // 重新启动对应的阅读模式\n        if (wasAutoReading) {\n          setTimeout(initializeAutoReader, 50);\n        } else if (wasRhythmReading && window.rhythmReader) {\n          setTimeout(() => {\n            window.rhythmReader.start();\n          }, 50);\n        }\n      }\n    } catch (error) {\n      console.error('翻页失败:', error);\n    }\n  };\n\n  // 修改后的监听器设置函数\n  const addMouseFollowListeners = () => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    \n    // 清理旧的监听器\n    contentArea.removeEventListener('mousemove', handleMouseMove);\n    contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    \n    // 添加新的监听器\n    contentArea.addEventListener('mousemove', handleMouseMove);\n    contentArea.addEventListener('mouseleave', clearAllHighlights);\n    \n    // 确保所有段落都有正确的样式\n    document.querySelectorAll('.pdf-paragraph').forEach(p => {\n      p.style.position = 'relative';\n      p.style.lineHeight = '1.5';\n    });\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = (text) => {\n    // 分段\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    // 创建HTML内容\n    let htmlContent = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      htmlContent += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 应用静态高亮\n  const applyStaticHighlight = (text) => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    let htmlContent = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      // 新增强制清理逻辑\n      const cleanParagraph = paragraph\n        .replace(/<span class=\"text-line\">/g, '')\n        .replace(/<\\/span>/g, '');\n      \n      const highlightedText = processTextWithHighlight(cleanParagraph);\n      htmlContent += `<p class=\"pdf-paragraph\">${highlightedText}</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 格式化文本用于鼠标跟随高亮模式\n  const formatTextForMouseFollow = (text) => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    let htmlContent = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      // 将段落分割成行\n      const lines = paragraph.split('\\n').filter(line => line.trim());\n      htmlContent += `<p class=\"pdf-paragraph\" data-follow=\"true\" style=\"position: relative; line-height: 1.5;\">`;\n      \n      lines.forEach((line, i) => {\n        // 每行用span包裹\n        htmlContent += `<span class=\"text-line\" style=\"display: block;\">${line}</span>`;\n      });\n      \n      htmlContent += `</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 强制初始化字符位置（这是关键步骤！）\n  function forceInitReader() {\n    console.log(\"强制初始化阅读器...\");\n    \n    // 1. 如果autoReader或charPositions不存在，创建它们\n    if (typeof window.autoReader === 'undefined') {\n      window.autoReader = {\n        charPositions: [],\n        intervalId: null,\n        currentIndex: 0,\n        speed: 30\n      };\n    }\n    \n    // 2. 如果没有字符位置数据，尝试触发它的创建\n    if (!window.autoReader.charPositions || window.autoReader.charPositions.length === 0) {\n      console.log(\"未找到字符位置数据，尝试强制创建...\");\n      \n      // 直接使用scanTextPositionsSimple函数\n      scanTextPositionsSimple();\n    }\n    \n    return window.autoReader.charPositions && window.autoReader.charPositions.length > 0;\n  }\n\n  // 简单的文本位置扫描函数\n  function scanTextPositionsSimple() {\n    console.log(\"使用简单文本扫描...\");\n    \n    window.autoReader.charPositions = [];\n    const contentElement = document.querySelector('.page-content');\n    if (!contentElement) {\n      console.error(\"找不到内容容器\");\n      return;\n    }\n    \n    // 递归处理文本节点\n    function processTextNodes(element) {\n      if (element.nodeType === Node.TEXT_NODE) {\n        const text = element.textContent;\n        if (!text || text.trim() === '') return;\n        \n        // 获取元素的位置信息\n        const range = document.createRange();\n        \n        // 为每个字符创建一个独立的范围\n        for (let i = 0; i < text.length; i++) {\n          try {\n            range.setStart(element, i);\n            range.setEnd(element, i + 1);\n            \n            const rect = range.getBoundingClientRect();\n            if (rect.width > 0 && rect.height > 0) {\n              window.autoReader.charPositions.push({\n                char: text[i],\n                x: rect.left + rect.width/2,\n                y: rect.top + rect.height/2,\n                element: element.parentElement\n              });\n            }\n          } catch (e) {\n            console.warn(\"无法处理字符\", e);\n          }\n        }\n      } else if (element.nodeType === Node.ELEMENT_NODE) {\n        // 递归处理子元素\n        for (const child of element.childNodes) {\n          processTextNodes(child);\n        }\n      }\n    }\n    \n    processTextNodes(contentElement);\n    console.log(\"扫描完成，找到字符数量:\", window.autoReader.charPositions.length);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        <div className=\"logo\">\n          <h2>ADHD阅读助手</h2>\n        </div>\n        <label className=\"upload-btn\">\n          选择文件\n          <input\n            type=\"file\"\n            accept=\".pdf,.txt\"\n            onChange={handleFileUpload}\n            style={{ display: 'none' }}\n          />\n        </label>\n      </div>\n      <div className=\"main-content\">\n        <div className=\"header\">\n          <h1>ADHD阅读助手</h1>\n          <div className=\"controls\">\n            <div className=\"mode-selector\">\n              <select value={readingMode} onChange={handleReadingModeChange}>\n                <option value=\"normal\">普通模式</option>\n                <option value=\"static\">静态高亮模式</option>\n                <option value=\"follow-mouse\">鼠标跟随高亮</option>\n                <option value=\"auto-reader\">自动阅读器</option>\n                <option value=\"rhythm\">节奏阅读模式</option>\n              </select>\n            </div>\n            <div className=\"mode-selector\">\n              <select value={posMode} onChange={(e) => setPosMode(e.target.value)}>\n                <option value=\"none\">无词性标注</option>\n                <option value=\"noun\">名词标注</option>\n                <option value=\"all\">全词性标注</option>\n              </select>\n            </div>\n            {readingMode === 'auto-reader' && (\n              <div className=\"speed-control\">\n                <button onClick={() => adjustSpeed(-100)}>-</button>\n                <span>{autoReaderState.speed}ms</span>\n                <button onClick={() => adjustSpeed(100)}>+</button>\n              </div>\n            )}\n          </div>\n        </div>\n        <div className=\"page-content\">\n          {content ? (\n            <div dangerouslySetInnerHTML={{ __html: content }} />\n          ) : (\n            <div className=\"empty-state\">\n              <p>请上传PDF或TXT文件开始阅读</p>\n            </div>\n          )}\n        </div>\n        {content && (\n          <div className=\"nav-buttons\">\n            <button className=\"page-btn prev\" onClick={() => changePage(-1)} disabled={currentPage === 1}>\n              上一页\n            </button>\n            <span className=\"page-info\">\n              第 {currentPage} 页 / 共 {totalPages} 页\n            </span>\n            <button className=\"page-btn next\" onClick={() => changePage(1)} disabled={currentPage === totalPages}>\n              下一页\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}