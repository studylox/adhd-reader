{"ast":null,"code":"var _jsxFileName = \"D:\\\\adhd-read-helper\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 添加全局事件跟踪对象\nwindow.eventTracker = window.eventTracker || {\n  mouseFollowHandlers: []\n};\n\n// 自动阅读器全局对象\nwindow.autoReader = {\n  charPositions: [],\n  intervalId: null,\n  currentIndex: 0,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false,\n  cleanup: null\n};\n\n// 添加新的节奏阅读模式代码\n// 全局变量，确保在页面切换后仍然保持状态\nwindow.rhythmReaderGlobal = window.rhythmReaderGlobal || {\n  active: false,\n  speed: 300\n};\n\n// 节奏阅读模式 - 确保手动翻页后也能自动恢复\n(function () {\n  console.log(\"正在初始化节奏阅读模式...\");\n\n  // 确保只初始化一次\n  if (window.rhythmReadingInitialized) {\n    console.log(\"节奏阅读模式已经初始化过，跳过\");\n    return;\n  }\n  window.rhythmReadingInitialized = true;\n\n  // 存储到localStorage以确保页面刷新后状态持续\n  function setLocalStorage(key, value) {\n    try {\n      localStorage.setItem(key, value);\n    } catch (e) {\n      console.error(\"无法写入localStorage\", e);\n    }\n  }\n  function getLocalStorage(key) {\n    try {\n      return localStorage.getItem(key);\n    } catch (e) {\n      console.error(\"无法读取localStorage\", e);\n      return null;\n    }\n  }\n\n  // 状态变量和功能对象\n  const rhythmReader = {\n    active: false,\n    intervalId: null,\n    speed: 300,\n    currentIndex: 0,\n    readIndices: new Set(),\n    charElements: [],\n    // 启动节奏阅读\n    start: function () {\n      console.log(\"【节奏阅读】启动中...\");\n\n      // 先停止已有的\n      this.stop(false);\n\n      // 设置为活动状态\n      this.active = true;\n      setLocalStorage('rhythmReadingActive', 'true');\n\n      // 初始化文本\n      if (!this.initializeTextNodes()) {\n        console.error(\"【节奏阅读】无法初始化文本节点\");\n        return;\n      }\n\n      // 重要：始终从头开始阅读\n      this.currentIndex = 0;\n      this.readIndices.clear();\n\n      // 添加速度滑块\n      this.addSpeedSlider();\n\n      // 更新颜色\n      this.updateTextColors();\n\n      // 滚动到开始位置\n      this.scrollToCurrentChar();\n\n      // 设置阅读间隔\n      this.intervalId = setInterval(() => this.moveToNextChar(), this.speed);\n      console.log(\"【节奏阅读】成功启动\");\n\n      // 显示提示\n      this.showNotification(\"节奏阅读模式已启动\");\n\n      // 劫持翻页函数 - 重要步骤\n      this.hijackPageTurningFunctions();\n\n      // 设置页面导航事件监听\n      this.setupPageNavigationListeners();\n    },\n    // 停止节奏阅读\n    stop: function (showNotification = true) {\n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n      }\n      if (this.active) {\n        console.log(\"【节奏阅读】停止中...\");\n        this.active = false;\n        setLocalStorage('rhythmReadingActive', 'false');\n\n        // 恢复原始文本\n        this.restoreOriginalText();\n\n        // 移除速度滑块\n        const slider = document.getElementById('rhythm-speed-slider');\n        if (slider) slider.remove();\n        if (showNotification) {\n          this.showNotification(\"节奏阅读模式已停止\");\n        }\n      }\n    },\n    // 显示通知\n    showNotification: function (message) {\n      let notification = document.getElementById('rhythm-notification');\n      if (notification) notification.remove();\n      notification = document.createElement('div');\n      notification.id = 'rhythm-notification';\n      notification.textContent = message;\n      notification.style.position = 'fixed';\n      notification.style.top = '50%';\n      notification.style.left = '50%';\n      notification.style.transform = 'translate(-50%, -50%)';\n      notification.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';\n      notification.style.color = 'white';\n      notification.style.padding = '15px 25px';\n      notification.style.borderRadius = '5px';\n      notification.style.zIndex = '10001';\n      notification.style.fontSize = '18px';\n      document.body.appendChild(notification);\n\n      // 2秒后自动消失\n      setTimeout(() => {\n        if (notification && notification.parentNode) {\n          notification.parentNode.removeChild(notification);\n        }\n      }, 2000);\n    },\n    // 劫持页面翻转函数\n    hijackPageTurningFunctions: function () {\n      // 劫持changePage函数\n      if (typeof window.changePage === 'function' && !window._originalChangePage) {\n        console.log(\"【节奏阅读】劫持changePage函数\");\n        window._originalChangePage = window.changePage;\n        const self = this;\n        window.changePage = function (delta) {\n          console.log(\"【节奏阅读】检测到changePage调用，delta =\", delta);\n\n          // 记录活动状态\n          const wasActive = self.active;\n\n          // 停止当前阅读\n          if (wasActive) {\n            self.stop(false);\n\n            // 保存状态以便在新页面恢复\n            setLocalStorage('rhythmReadingActive', 'true');\n            setLocalStorage('rhythmReadingPending', 'true');\n          }\n\n          // 调用原始翻页函数\n          window._originalChangePage(delta);\n\n          // 页面跳转后应该会重新加载，这里添加一个备用\n          if (wasActive) {\n            setTimeout(() => {\n              if (getLocalStorage('rhythmReadingPending') === 'true') {\n                setLocalStorage('rhythmReadingPending', 'false');\n                console.log(\"【节奏阅读】翻页后重新启动\");\n                self.start();\n              }\n            }, 1000);\n          }\n        };\n      }\n    },\n    // 设置页面导航事件监听\n    setupPageNavigationListeners: function () {\n      // 查找所有可能的翻页按钮\n      console.log(\"【节奏阅读】正在设置页面导航监听\");\n      const possibleButtons = document.querySelectorAll('button, a');\n      const self = this;\n      possibleButtons.forEach(button => {\n        const text = button.textContent.trim().toLowerCase();\n        // 查找可能的翻页按钮\n        if (text.includes('上一页') || text.includes('下一页') || text.includes('prev') || text.includes('next') || text === '<' || text === '>' || text === '←' || text === '→') {\n          console.log(`【节奏阅读】为可能的翻页按钮添加监听: ${text}`);\n\n          // 添加点击事件\n          button.addEventListener('click', function (e) {\n            if (self.active) {\n              console.log(`【节奏阅读】检测到翻页按钮点击: ${text}`);\n\n              // 保存状态到localStorage\n              setLocalStorage('rhythmReadingActive', 'true');\n              setLocalStorage('rhythmReadingPending', 'true');\n\n              // 停止当前的阅读\n              self.stop(false);\n\n              // 不阻止默认事件，允许正常翻页\n            }\n          });\n        }\n      });\n\n      // 监听键盘导航事件\n      document.addEventListener('keydown', function (e) {\n        // 检查是否是翻页快捷键\n        if (['ArrowLeft', 'ArrowRight', 'PageUp', 'PageDown'].includes(e.key)) {\n          if (self.active) {\n            console.log(`【节奏阅读】检测到键盘翻页: ${e.key}`);\n\n            // 保存状态到localStorage\n            setLocalStorage('rhythmReadingActive', 'true');\n            setLocalStorage('rhythmReadingPending', 'true');\n\n            // 停止当前的阅读\n            self.stop(false);\n\n            // 不阻止默认事件，允许正常翻页\n          }\n        }\n      });\n    },\n    // 初始化文本节点\n    initializeTextNodes: function () {\n      console.log(\"【节奏阅读】初始化文本节点...\");\n\n      // 重置字符元素数组\n      this.charElements = [];\n\n      // 获取内容容器\n      const contentContainer = document.querySelector('.page-content') || document.body;\n\n      // 查找所有文本节点并处理\n      const textNodes = [];\n      this.findTextNodes(contentContainer, textNodes);\n      if (textNodes.length === 0) {\n        console.error(\"【节奏阅读】未找到文本节点\");\n        this.showNotification(\"无法启动节奏阅读：未找到文本内容\");\n        return false;\n      }\n      console.log(`【节奏阅读】找到 ${textNodes.length} 个文本节点`);\n\n      // 为每个文本节点创建字符span\n      textNodes.forEach(node => {\n        const text = node.nodeValue;\n        if (!text || text.trim() === '') return;\n\n        // 创建文档片段来存放字符span\n        const fragment = document.createDocumentFragment();\n\n        // 为每个字符创建span\n        for (let i = 0; i < text.length; i++) {\n          const char = text[i];\n          const span = document.createElement('span');\n          span.textContent = char;\n          span.className = 'rhythm-char';\n          span.dataset.rhythmIndex = this.charElements.length;\n\n          // 如果是空白字符，添加一个标志\n          if (char.trim() === '') {\n            span.dataset.whitespace = 'true';\n          }\n\n          // 保持原始样式，不设置背景\n          span.style.display = 'inline';\n          span.style.margin = '0';\n          span.style.padding = '0';\n          span.style.border = 'none';\n          span.style.backgroundColor = 'transparent';\n          fragment.appendChild(span);\n          this.charElements.push(span);\n        }\n\n        // 替换原始节点\n        if (node.parentNode) {\n          node.parentNode.replaceChild(fragment, node);\n        }\n      });\n      console.log(`【节奏阅读】总共创建了 ${this.charElements.length} 个字符span`);\n      return this.charElements.length > 0;\n    },\n    // 递归查找所有文本节点\n    findTextNodes: function (element, textNodes) {\n      // 处理子节点\n      for (let i = 0; i < element.childNodes.length; i++) {\n        const node = element.childNodes[i];\n\n        // 如果是文本节点且有内容\n        if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() !== '') {\n          textNodes.push(node);\n        }\n        // 如果是元素节点，递归处理\n        else if (node.nodeType === Node.ELEMENT_NODE) {\n          // 跳过读者UI元素\n          if (node.id === 'rhythm-speed-slider' || node.id === 'rhythm-notification' || node.className === 'rhythm-char') {\n            continue;\n          }\n          this.findTextNodes(node, textNodes);\n        }\n      }\n    },\n    // 更新文本颜色\n    updateTextColors: function () {\n      // 更新所有字符的颜色\n      this.charElements.forEach((span, index) => {\n        // 确定颜色\n        let color;\n        let fontWeight = 'inherit';\n        if (index === this.currentIndex) {\n          color = '#00aa00'; // 当前阅读的字 - 绿色\n          fontWeight = 'bold';\n        } else if (index === this.currentIndex + 1 || index === this.currentIndex + 2) {\n          color = '#aaaaaa'; // 接下来两个字 - 淡灰色\n        } else if (this.readIndices.has(index)) {\n          color = '#ffffff'; // 已读字符 - 白色（表示已读）\n        } else {\n          color = 'rgba(160, 160, 160, 0.25)'; // 未读字符 - 非常淡的灰色（可见但不明显）\n        }\n        span.style.color = color;\n        span.style.fontWeight = fontWeight;\n\n        // 确保没有背景\n        span.style.backgroundColor = 'transparent';\n        span.style.background = 'none';\n      });\n    },\n    // 移动到下一个字符\n    moveToNextChar: function () {\n      // 将当前字符标记为已读\n      this.readIndices.add(this.currentIndex);\n\n      // 移动到下一个非空白字符\n      do {\n        this.currentIndex++;\n\n        // 检查是否到达末尾\n        if (this.currentIndex >= this.charElements.length) {\n          console.log(\"【节奏阅读】已到达页尾，尝试翻页\");\n\n          // 尝试点击下一页按钮\n          if (!this.clickNextPageButton()) {\n            // 如果没有找到下一页按钮，完全停止阅读\n            this.stop();\n          }\n          return;\n        }\n      } while (this.currentIndex < this.charElements.length && this.charElements[this.currentIndex] && this.charElements[this.currentIndex].dataset.whitespace === 'true');\n\n      // 更新颜色\n      this.updateTextColors();\n\n      // 滚动到当前字符\n      this.scrollToCurrentChar();\n    },\n    // 尝试自动翻页\n    clickNextPageButton: function () {\n      console.log(\"【节奏阅读】尝试查找并点击下一页按钮\");\n\n      // 尝试多种可能的选择器来找到下一页按钮\n      const nextPageSelectors = ['button.next-page', 'button[aria-label=\"下一页\"]', 'a.next-page', 'a[aria-label=\"下一页\"]', '.next-page', '#next-page', 'button.next', 'a.next'];\n      let nextPageButton = null;\n\n      // 尝试通过选择器找到按钮\n      for (const selector of nextPageSelectors) {\n        try {\n          const elements = document.querySelectorAll(selector);\n          for (const el of elements) {\n            if (el.offsetParent !== null) {\n              // 检查元素是否可见\n              console.log(`【节奏阅读】找到下一页按钮: ${selector}`);\n              nextPageButton = el;\n              break;\n            }\n          }\n          if (nextPageButton) break;\n        } catch (e) {\n          // 某些选择器可能不被支持，忽略错误\n        }\n      }\n\n      // 如果没找到，尝试按文本内容查找\n      if (!nextPageButton) {\n        const buttons = document.querySelectorAll('button, a, div[role=\"button\"]');\n        for (const button of buttons) {\n          const text = button.textContent.trim().toLowerCase();\n          if ((text.includes('下一页') || text.includes('next') || text === '>' || text === '→') && button.offsetParent !== null) {\n            console.log(`【节奏阅读】通过文本内容找到下一页按钮: ${text}`);\n            nextPageButton = button;\n            break;\n          }\n        }\n      }\n      if (nextPageButton) {\n        console.log(\"【节奏阅读】模拟点击下一页按钮\");\n\n        // 保存状态\n        setLocalStorage('rhythmReadingActive', 'true');\n        setLocalStorage('rhythmReadingPending', 'true');\n\n        // 恢复原始文本（准备翻页）\n        this.restoreOriginalText();\n\n        // 停止计时器\n        if (this.intervalId) {\n          clearInterval(this.intervalId);\n          this.intervalId = null;\n        }\n\n        // 模拟点击\n        nextPageButton.click();\n        return true;\n      } else {\n        console.log(\"【节奏阅读】未找到下一页按钮\");\n        return false;\n      }\n    },\n    // 滚动到当前字符\n    scrollToCurrentChar: function () {\n      const span = this.charElements[this.currentIndex];\n      if (!span) return;\n      const rect = span.getBoundingClientRect();\n      const contentContainer = document.querySelector('.page-content');\n\n      // 估计行高\n      const lineHeight = parseInt(window.getComputedStyle(span).lineHeight) || Math.max(20, rect.height * 1.5);\n\n      // 确定滚动容器\n      const isContainerScrollable = contentContainer && contentContainer.scrollHeight > contentContainer.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n      if (isContainerScrollable) {\n        // 容器滚动\n        const containerRect = contentContainer.getBoundingClientRect();\n        const relativeTop = rect.top - containerRect.top + contentContainer.scrollTop;\n        const visibleTop = contentContainer.scrollTop;\n        const visibleBottom = visibleTop + contentContainer.clientHeight;\n        if (relativeTop < visibleTop + lineHeight || relativeTop > visibleBottom - lineHeight) {\n          contentContainer.scrollBy({\n            top: lineHeight * 2 * (relativeTop > visibleBottom - lineHeight ? 1 : -1),\n            behavior: 'smooth'\n          });\n        }\n      } else {\n        // 窗口滚动\n        const viewportTop = window.scrollY;\n        const viewportBottom = viewportTop + window.innerHeight;\n        const absoluteTop = rect.top + window.scrollY;\n        if (absoluteTop < viewportTop + lineHeight || absoluteTop > viewportBottom - lineHeight) {\n          window.scrollBy({\n            top: lineHeight * 2 * (absoluteTop > viewportBottom - lineHeight ? 1 : -1),\n            behavior: 'smooth'\n          });\n        }\n      }\n    },\n    // 添加速度滑块\n    addSpeedSlider: function () {\n      let slider = document.getElementById('rhythm-speed-slider');\n      if (slider) slider.remove();\n      const container = document.createElement('div');\n      container.id = 'rhythm-speed-slider';\n      container.style.position = 'fixed';\n      container.style.top = '70px';\n      container.style.right = '20px';\n      container.style.backgroundColor = 'white';\n      container.style.padding = '10px';\n      container.style.borderRadius = '5px';\n      container.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';\n      container.style.zIndex = '10000';\n      container.style.display = 'flex';\n      container.style.alignItems = 'center';\n      container.style.maxWidth = '300px';\n      const label = document.createElement('label');\n      label.textContent = '速度: ';\n      label.style.marginRight = '8px';\n      container.appendChild(label);\n      const input = document.createElement('input');\n      input.type = 'range';\n      input.min = '50';\n      input.max = '1000';\n      input.step = '50';\n      input.value = this.speed;\n      input.style.width = '120px';\n      const valueDisplay = document.createElement('span');\n      valueDisplay.textContent = `${this.speed}ms`;\n      valueDisplay.style.marginLeft = '8px';\n      valueDisplay.style.minWidth = '60px';\n      const self = this;\n      input.addEventListener('input', function () {\n        const newSpeed = parseInt(this.value);\n        self.speed = newSpeed;\n        valueDisplay.textContent = `${newSpeed}ms`;\n        if (self.intervalId) {\n          clearInterval(self.intervalId);\n          self.intervalId = setInterval(() => self.moveToNextChar(), newSpeed);\n        }\n      });\n      container.appendChild(input);\n      container.appendChild(valueDisplay);\n      document.body.appendChild(container);\n    },\n    // 恢复原始文本\n    restoreOriginalText: function () {\n      // 获取所有已创建的字符span\n      const charSpans = document.querySelectorAll('.rhythm-char');\n\n      // 按父节点分组\n      const parentNodeMap = new Map();\n      charSpans.forEach(span => {\n        const parent = span.parentNode;\n        if (!parent) return;\n        if (!parentNodeMap.has(parent)) {\n          parentNodeMap.set(parent, []);\n        }\n        parentNodeMap.get(parent).push(span);\n      });\n\n      // 对每个父节点，将连续的字符span合并回文本节点\n      parentNodeMap.forEach((spans, parent) => {\n        if (spans.length === 0) return;\n\n        // 排序spans确保顺序正确\n        spans.sort((a, b) => {\n          const indexA = parseInt(a.dataset.rhythmIndex || '0');\n          const indexB = parseInt(b.dataset.rhythmIndex || '0');\n          return indexA - indexB;\n        });\n\n        // 根据连续性分组\n        const groups = [];\n        if (spans.length > 0) {\n          let currentGroup = [spans[0]];\n          for (let i = 1; i < spans.length; i++) {\n            const prevIndex = parseInt(spans[i - 1].dataset.rhythmIndex || '0');\n            const currentIndex = parseInt(spans[i].dataset.rhythmIndex || '0');\n            if (currentIndex === prevIndex + 1 && spans[i].previousSibling === spans[i - 1]) {\n              currentGroup.push(spans[i]);\n            } else {\n              groups.push(currentGroup);\n              currentGroup = [spans[i]];\n            }\n          }\n          groups.push(currentGroup);\n        }\n\n        // 对每个连续组替换为文本节点\n        groups.forEach(group => {\n          if (group.length === 0) return;\n          try {\n            const text = group.map(span => span.textContent).join('');\n            const textNode = document.createTextNode(text);\n\n            // 替换第一个span，然后移除其余的\n            if (group[0].parentNode === parent) {\n              parent.replaceChild(textNode, group[0]);\n              for (let i = 1; i < group.length; i++) {\n                if (group[i].parentNode === parent) {\n                  parent.removeChild(group[i]);\n                }\n              }\n            }\n          } catch (e) {\n            console.error(\"【节奏阅读】恢复文本时出错:\", e);\n          }\n        });\n      });\n\n      // 清除字符元素数组\n      this.charElements = [];\n    }\n  };\n\n  // 暴露到全局，以便调试和直接调用\n  window.rhythmReader = rhythmReader;\n\n  // 直接挂钩到可能的下拉选择器\n  console.log(\"【节奏阅读】寻找并挂钩阅读模式选择器...\");\n\n  // 尝试查找可能的下拉选择器\n  const selectors = ['select[name=\"readingMode\"]', 'select.reading-mode', 'select#reading-mode', 'select[aria-label=\"阅读模式\"]', '.reading-mode-selector'];\n  let foundSelector = false;\n  for (const selector of selectors) {\n    const elements = document.querySelectorAll(selector);\n    for (const element of elements) {\n      console.log(`【节奏阅读】找到可能的阅读模式选择器: ${selector}`);\n      element.addEventListener('change', function () {\n        const value = this.value.toLowerCase();\n        console.log(`【节奏阅读】阅读模式选择变更为: ${value}`);\n        if (value.includes('rhythm') || value.includes('节奏')) {\n          console.log(\"【节奏阅读】检测到选择了节奏阅读模式\");\n          rhythmReader.start();\n        } else {\n          if (rhythmReader.active) {\n            rhythmReader.stop();\n          }\n        }\n      });\n      foundSelector = true;\n    }\n  }\n\n  // 重写handleReadingModeChange函数\n  if (typeof window.handleReadingModeChange === 'function') {\n    console.log(\"【节奏阅读】检测到现有的handleReadingModeChange函数，重写它\");\n    const originalReadingModeChanged = window.handleReadingModeChange;\n    window.handleReadingModeChange = function (mode) {\n      console.log(`【节奏阅读】handleReadingModeChange被调用，模式: ${mode}`);\n\n      // 调用原始函数\n      originalReadingModeChanged(mode);\n\n      // 添加我们的处理逻辑\n      if (mode === 'rhythm' || mode === 'rhythmReading' || typeof mode === 'string' && (mode.includes('rhythm') || mode.includes('节奏'))) {\n        console.log(\"【节奏阅读】检测到选择了节奏阅读模式\");\n        rhythmReader.start();\n      } else {\n        if (rhythmReader.active) {\n          rhythmReader.stop();\n        }\n      }\n    };\n    foundSelector = true;\n  }\n  if (!foundSelector) {\n    console.warn(\"【节奏阅读】警告: 未找到可能的阅读模式选择器\");\n    console.log(\"【节奏阅读】可以通过调用 window.rhythmReader.start() 手动启动\");\n  }\n\n  // 监听页面加载完成事件 - 页面变化后自动恢复\n  function setupPageLoadListener() {\n    // 当DOM内容加载完成\n    document.addEventListener('DOMContentLoaded', function () {\n      checkAndRestoreReading();\n    });\n\n    // 当页面完全加载\n    window.addEventListener('load', function () {\n      checkAndRestoreReading();\n    });\n\n    // 监听DOM变化\n    const observer = new MutationObserver(function (mutations) {\n      if (getLocalStorage('rhythmReadingPending') === 'true') {\n        const contentChanges = mutations.filter(m => m.type === 'childList' && m.addedNodes.length > 0);\n        if (contentChanges.length > 0) {\n          console.log(\"【节奏阅读】检测到DOM变化，且有待处理的阅读恢复\");\n          checkAndRestoreReading();\n        }\n      }\n    });\n\n    // 观察body变化\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n\n    // 检查并恢复阅读\n    function checkAndRestoreReading() {\n      if (getLocalStorage('rhythmReadingActive') === 'true' && getLocalStorage('rhythmReadingPending') === 'true') {\n        console.log(\"【节奏阅读】页面加载/变化后，尝试恢复阅读\");\n        setLocalStorage('rhythmReadingPending', 'false');\n\n        // 给页面一点时间完全渲染\n        setTimeout(function () {\n          rhythmReader.start();\n        }, 800);\n      }\n    }\n  }\n\n  // 设置页面加载监听器\n  setupPageLoadListener();\n\n  // 检查是否需要立即恢复阅读状态\n  if (getLocalStorage('rhythmReadingActive') === 'true') {\n    console.log(\"【节奏阅读】检测到之前的阅读状态，准备恢复\");\n    setLocalStorage('rhythmReadingPending', 'false'); // 清除待处理标记\n\n    // 给页面一点时间渲染\n    setTimeout(function () {\n      rhythmReader.start();\n    }, 800);\n  }\n  console.log(\"【节奏阅读】初始化完成\");\n})();\nconst App = () => {\n  _s();\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  const [isTableOfContents, setIsTableOfContents] = useState(false);\n\n  // 实现缺失的函数\n  // 应用深色背景\n  const applyDarkBackground = () => {\n    document.body.classList.add('dark-background');\n\n    // 添加必要的CSS样式\n    if (!document.getElementById('dark-background-style')) {\n      const style = document.createElement('style');\n      style.id = 'dark-background-style';\n      style.textContent = `\n        .dark-background {\n          background-color: #000 !important;\n        }\n        .dark-background .sidebar {\n          background: linear-gradient(145deg, #4834d4, #341f9e) !important;\n        }\n        .dark-background .page-content {\n          background-color: #000 !important;\n        }\n        .dark-background .main-content {\n          background-color: #000 !important;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 恢复正常背景\n  const restoreDarkBackground = () => {\n    document.body.classList.remove('dark-background');\n  };\n\n  // 添加裸眼3D样式\n  const addNakedEye3DStyles = () => {\n    if (!document.getElementById('naked-eye-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'naked-eye-3d-style';\n      style.textContent = `\n        .naked-eye-3d-container {\n          position: relative;\n          perspective: 800px;\n          width: 100%;\n        }\n        \n        .naked-eye-3d-text {\n          display: inline-block;\n          animation: float 3s ease-in-out infinite;\n          text-shadow: 0 0 5px rgba(255,255,255,0.3);\n          padding: 0 4px;\n          color: white;\n          filter: drop-shadow(0 0 5px rgba(120, 220, 255, 0.6));\n        }\n        \n        @keyframes float {\n          0% { transform: translateZ(0px); }\n          50% { transform: translateZ(20px); }\n          100% { transform: translateZ(0px); }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 添加舒适3D样式\n  const addComfortable3DStyles = () => {\n    if (!document.getElementById('comfortable-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'comfortable-3d-style';\n      style.textContent = `\n        .emboss-3d-text {\n          color: #fff;\n          text-shadow: \n            1px 1px 1px rgba(0,0,0,0.5),\n            -1px -1px 1px rgba(255,255,255,0.5);\n          letter-spacing: 1.5px;\n          font-weight: 500;\n        }\n        \n        .float-3d-text {\n          display: inline-block;\n          transform-style: preserve-3d;\n          transform: perspective(500px) translateZ(10px);\n          text-shadow: 0 2px 5px rgba(0,0,0,0.5);\n        }\n        \n        .gradient-3d-text {\n          display: inline-block;\n          background: linear-gradient(to bottom, #fff, #aaa);\n          -webkit-background-clip: text;\n          -webkit-text-fill-color: transparent;\n          text-shadow: 0 2px 4px rgba(0,0,0,0.3);\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 添加闪读样式\n  const addFlashReadingStyles = () => {\n    if (!document.getElementById('flash-reading-style')) {\n      const style = document.createElement('style');\n      style.id = 'flash-reading-style';\n      style.textContent = `\n        .flash-reading-container {\n          position: relative;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          z-index: 1000;\n          padding: 20px;\n        }\n        \n        .flash-reading-display-wrapper {\n          position: relative;\n          margin: 40px 0;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        \n        .flash-reading-display {\n          font-size: 36px;\n          font-weight: bold;\n          text-align: center;\n          color: white;\n          min-height: 80px;\n          max-width: 90%;\n          padding: 20px 40px;\n          position: relative; /* 允许绝对定位的覆盖层 */\n          z-index: 2;\n        }\n        \n        .flash-reading-cover {\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(128, 128, 128, 0.6); /* 灰色遮罩 */\n          border-radius: 8px;\n          z-index: 1; /* 确保在文本后面 */\n        }\n        \n        .flash-reading-controls {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          gap: 20px;\n          margin-bottom: 20px;\n          width: 100%;\n        }\n        \n        .flash-reading-buttons {\n          display: flex;\n          gap: 10px;\n          flex-wrap: wrap;\n          justify-content: center;\n        }\n        \n        .flash-reading-speed {\n          display: flex;\n          align-items: center;\n          color: white;\n          width: 80%;\n          max-width: 400px;\n          gap: 10px;\n        }\n        \n        .flash-reading-slider {\n          flex: 1;\n          height: 8px;\n          appearance: none;\n          background: #555;\n          border-radius: 4px;\n          outline: none;\n        }\n        \n        .flash-reading-slider::-webkit-slider-thumb {\n          appearance: none;\n          width: 20px;\n          height: 20px;\n          border-radius: 50%;\n          background: #6c5ce7;\n          cursor: pointer;\n        }\n        \n        .flash-reading-btn {\n          padding: 10px 20px;\n          border: none;\n          border-radius: 4px;\n          background-color: #6c5ce7;\n          color: white;\n          font-size: 16px;\n          cursor: pointer;\n          transition: background-color 0.2s;\n        }\n        \n        .flash-reading-btn:hover {\n          background-color: #5344c0;\n        }\n        \n        .flash-reading-btn:disabled {\n          background-color: #aaa;\n          cursor: not-allowed;\n        }\n        \n        .flash-reading-progress {\n          color: white;\n          font-size: 14px;\n          margin-top: 10px;\n        }\n        .flash-reading-speed-note {\n          font-size: 12px;\n          color: #ccc;\n          margin-left: 5px;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 初始化闪读模式\n  const initializeFlashReading = () => {\n    // 添加样式\n    addFlashReadingStyles();\n    const sentences = window.flashReadingSentences;\n    if (!sentences || !Array.isArray(sentences) || sentences.length === 0) {\n      console.error('闪读模式: 未找到句子数据');\n      return;\n    }\n\n    // 获取全局UI元素\n    const display = document.getElementById('flash-reading-display');\n    const speedSlider = document.getElementById('flash-reading-speed');\n    const speedValue = document.getElementById('flash-reading-speed-value');\n    const playButton = document.getElementById('flash-reading-play');\n    const pauseButton = document.getElementById('flash-reading-pause');\n    const stopButton = document.getElementById('flash-reading-stop');\n    const prevButton = document.getElementById('flash-reading-prev-sentence');\n    const nextButton = document.getElementById('flash-reading-next-sentence');\n    const progress = document.getElementById('flash-reading-progress');\n    const cover = document.querySelector('.flash-reading-cover');\n    if (!display || !speedSlider || !speedValue || !playButton || !pauseButton || !stopButton || !prevButton || !nextButton || !progress || !cover) {\n      console.error('闪读模式: 未找到UI元素');\n      return;\n    }\n\n    // 创建闪读控制器\n    window.flashReader = {\n      sentences: sentences,\n      currentIndex: 0,\n      interval: null,\n      speed: parseInt(speedSlider.value),\n      isPlaying: false,\n      // 开始闪读\n      start() {\n        if (this.interval) {\n          clearInterval(this.interval);\n        }\n        this.isPlaying = true;\n        playButton.disabled = true;\n        pauseButton.disabled = false;\n        progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n\n        // 显示当前句子\n        this.displayCurrentSentence();\n\n        // 设置闪读间隔\n        this.interval = setInterval(() => {\n          this.currentIndex++;\n          if (this.currentIndex >= this.sentences.length) {\n            this.stop();\n            display.textContent = '阅读完成';\n            return;\n          }\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }, this.speed);\n      },\n      // 显示当前句子\n      displayCurrentSentence() {\n        if (this.currentIndex < this.sentences.length) {\n          const currentSentence = this.sentences[this.currentIndex];\n          display.textContent = currentSentence;\n          display.style.color = 'white'; // 确保文本为白色\n\n          // 调整背景以适应内容\n          setTimeout(() => {\n            const displayRect = display.getBoundingClientRect();\n            // 确保覆盖层完全包裹文本\n            cover.style.width = `${displayRect.width}px`;\n            cover.style.height = `${displayRect.height}px`;\n          }, 10);\n        }\n      },\n      // 暂停闪读\n      pause() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n      },\n      // 停止闪读\n      stop() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        this.currentIndex = 0;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n        display.textContent = '准备开始';\n        progress.textContent = `进度：0 / ${this.sentences.length}`; // 重置进度\n      },\n      // 更新速度\n      updateSpeed(newSpeed) {\n        this.speed = newSpeed;\n        speedValue.textContent = `${newSpeed} ms`;\n\n        // 保存速度设置到本地存储\n        localStorage.setItem('flash-reading-speed', newSpeed);\n\n        // 如果正在播放，重新开始以应用新速度\n        if (this.isPlaying) {\n          clearInterval(this.interval);\n          this.start(); // 直接调用start方法重新开始\n        }\n      },\n      // 返回上一句\n      prevSentence() {\n        if (this.currentIndex > 0) {\n          this.currentIndex--;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n      // 跳到下一句\n      nextSentence() {\n        if (this.currentIndex < this.sentences.length - 1) {\n          this.currentIndex++;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n      // 清理资源\n      cleanup() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        this.currentIndex = 0;\n      }\n    };\n\n    // 添加事件监听器\n    playButton.addEventListener('click', () => {\n      window.flashReader.start();\n    });\n    pauseButton.addEventListener('click', () => {\n      window.flashReader.pause();\n    });\n    stopButton.addEventListener('click', () => {\n      window.flashReader.stop();\n    });\n    speedSlider.addEventListener('input', e => {\n      const newSpeed = parseInt(e.target.value);\n      window.flashReader.updateSpeed(newSpeed);\n    });\n    prevButton.addEventListener('click', () => {\n      window.flashReader.prevSentence();\n    });\n    nextButton.addEventListener('click', () => {\n      window.flashReader.nextSentence();\n    });\n\n    // 初始化\n    const savedSpeed = localStorage.getItem('flash-reading-speed');\n    const initialSpeed = savedSpeed ? parseInt(savedSpeed) : 1000;\n    speedSlider.value = initialSpeed;\n    window.flashReader.updateSpeed(initialSpeed);\n    console.log('闪读模式已初始化，共 ' + sentences.length + ' 个句子');\n  };\n\n  // 创建闪读内容\n  const createFlashReadingContent = text => {\n    return `<div class=\"flash-reading-content\">\n      <p>${text}</p>\n    </div>`;\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 格式化文本用于鼠标跟随\n  const formatTextForMouseFollow = text => {\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个单词添加span，以便于添加高亮效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"follow-word\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\" data-follow=\"true\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用静态高亮\n  const applyStaticHighlight = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为单词随机添加颜色高亮\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      let lastColor = null;\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n          return;\n        }\n\n        // 随机决定是否高亮和使用哪种颜色\n        if (Math.random() < 0.7) {\n          let color;\n          if (lastColor === 'red') {\n            color = 'blue';\n          } else if (lastColor === 'blue') {\n            color = 'red';\n          } else {\n            color = Math.random() < 0.5 ? 'red' : 'blue';\n          }\n          lastColor = color;\n          processedParagraph += `<span class=\"highlight-word ${color}\">${word}</span>`;\n        } else {\n          processedParagraph += word;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用裸眼3D效果\n  const applyNakedEye3dEffect = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content naked-eye-3d-container\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个词添加3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"naked-eye-3d-text\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用舒适3D效果\n  const applyComfortable3dEffect = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个词随机应用不同的3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          processedParagraph += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 初始化裸眼3D\n  const initializeNakedEye3D = () => {\n    // 为裸眼3D文本添加动画\n    const textElements = document.querySelectorAll('.naked-eye-3d-text');\n    textElements.forEach((element, index) => {\n      // 添加随机延迟，使动画错开\n      const delay = Math.random() * 2;\n      element.style.animationDelay = `${delay}s`;\n    });\n  };\n\n  // 初始化节奏阅读\n  const initializeRhythmReading = () => {\n    if (window.rhythmReader && typeof window.rhythmReader.initializeTextNodes === 'function') {\n      window.rhythmReader.initializeTextNodes();\n    }\n  };\n\n  // 启动节奏阅读\n  const startRhythmReading = () => {\n    if (window.rhythmReader && typeof window.rhythmReader.start === 'function') {\n      window.rhythmReader.start();\n    }\n  };\n\n  // 添加鼠标跟随监听器\n  const addMouseFollowListeners = () => {\n    // 获取内容容器\n    const contentArea = document.querySelector('.mouse-follow-content');\n    if (!contentArea) {\n      console.error('未找到鼠标跟随内容区域');\n      return;\n    }\n\n    // 上一个高亮的行\n    let lastHighlightedLine = null;\n\n    // 监听鼠标移动 - 精确的行检测\n    const mouseMoveHandler = e => {\n      // 获取鼠标位置\n      const mouseY = e.clientY;\n\n      // 获取所有行\n      const allLines = contentArea.querySelectorAll('.follow-line');\n      let foundLine = null;\n      let minDistance = Infinity;\n\n      // 寻找鼠标所在的精确行\n      allLines.forEach(line => {\n        const rect = line.getBoundingClientRect();\n        const lineCenter = rect.top + rect.height / 2;\n        const distance = Math.abs(mouseY - lineCenter);\n\n        // 如果鼠标在行范围内，计算到行中心的距离\n        if (mouseY >= rect.top && mouseY <= rect.bottom) {\n          if (distance < minDistance) {\n            minDistance = distance;\n            foundLine = line;\n          }\n        }\n      });\n\n      // 更新高亮状态\n      if (lastHighlightedLine && lastHighlightedLine !== foundLine) {\n        // 移除旧高亮\n        lastHighlightedLine.classList.remove('highlighted');\n      }\n      if (foundLine) {\n        // 添加新高亮\n        foundLine.classList.add('highlighted');\n        lastHighlightedLine = foundLine;\n\n        // 调试输出\n        console.log('当前高亮行:', foundLine.textContent.substring(0, 30) + '...');\n      } else if (lastHighlightedLine) {\n        // 如果没有找到新行，且有上一个高亮行，移除它\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n\n    // 鼠标离开处理\n    const mouseLeaveHandler = () => {\n      // 清除当前高亮\n      if (lastHighlightedLine) {\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n\n    // 存储处理函数引用\n    window.eventTracker = window.eventTracker || {\n      mouseFollowHandlers: []\n    };\n    window.eventTracker.mouseFollowHandlers.push({\n      element: contentArea,\n      event: 'mousemove',\n      handler: mouseMoveHandler\n    }, {\n      element: contentArea,\n      event: 'mouseleave',\n      handler: mouseLeaveHandler\n    });\n\n    // 添加事件监听器\n    contentArea.addEventListener('mousemove', mouseMoveHandler);\n    contentArea.addEventListener('mouseleave', mouseLeaveHandler);\n    console.log('改进的鼠标跟随监听器已初始化');\n  };\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n  }, []);\n\n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async file => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n\n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n\n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n\n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({\n        scale: 1.0\n      });\n\n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async textContent => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n\n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n\n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n\n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    const lines = [...lineMap.values()];\n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    return hasTocKeywords || hasPageNumberPatterns || shortLineRatio > 0.7 && numberLineRatio > 0.3;\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n\n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n\n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n\n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n\n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = text => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    return result;\n  };\n\n  // 处理内容页面 - 按句子划分段落\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n\n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 按句子划分内容（句号、问号、感叹号等作为分隔符）\n      const sentences = splitIntoSentences(extractedText);\n\n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch (mode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          // 使用ADHD友好的静态高亮处理\n          console.log('应用ADHD友好的静态高亮模式');\n          processedContent = formatSimpleHighlightedText(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'rhythm':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          processedContent = createFlashReadingContentFromSentences(sentences);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n      setContent(processedContent);\n\n      // 如果是静态高亮模式，添加延时验证检查\n      if (mode === 'static') {\n        setTimeout(() => {\n          const contentArea = document.querySelector('.adhd-highlight-mode');\n          if (contentArea) {\n            console.log('静态高亮模式元素存在');\n            const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n            console.log(`找到 ${paragraphs.length} 个段落`);\n\n            // 检查样式是否正确应用\n            if (paragraphs.length > 0) {\n              const firstPara = paragraphs[0];\n              const styles = window.getComputedStyle(firstPara);\n              console.log('段落应用的样式:', {\n                color: styles.color,\n                backgroundColor: styles.backgroundColor,\n                fontFamily: styles.fontFamily,\n                fontSize: styles.fontSize\n              });\n            }\n          }\n        }, 200);\n      }\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 将文本分割成句子\n  const splitIntoSentences = text => {\n    // 匹配句号、问号、感叹号后跟空格或结束的模式\n    // 支持中英文标点符号\n    const sentenceRegex = /([.!?。！？；;]+\\s*)/g;\n\n    // 分割文本成句子\n    const sentences = [];\n    let lastIndex = 0;\n    let match;\n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const sentence = text.substring(lastIndex, endIndex).trim();\n\n      // 避免添加空句子\n      if (sentence) {\n        sentences.push(sentence);\n      }\n      lastIndex = endIndex;\n    }\n\n    // 处理最后一部分（如果没有以句号等结尾）\n    if (lastIndex < text.length) {\n      const lastSentence = text.substring(lastIndex).trim();\n      if (lastSentence) {\n        sentences.push(lastSentence);\n      }\n    }\n    return sentences;\n  };\n\n  // 专门为闪读模式分割文本，以任意标点符号为分隔点\n  const splitIntoFlashReadingSegments = text => {\n    // 匹配任意标点符号包括中英文标点\n    const sentenceRegex = /([,.!?:;，。！？：；、]+\\s*)/g;\n\n    // 分割文本成短句\n    const segments = [];\n    let lastIndex = 0;\n    let match;\n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const segment = text.substring(lastIndex, endIndex).trim();\n\n      // 避免添加空段落\n      if (segment) {\n        segments.push(segment);\n      }\n      lastIndex = endIndex;\n    }\n\n    // 处理最后一部分（如果没有以标点符号结尾）\n    if (lastIndex < text.length) {\n      const lastSegment = text.substring(lastIndex).trim();\n      if (lastSegment) {\n        segments.push(lastSegment);\n      }\n    }\n    return segments;\n  };\n\n  // 格式化句子为HTML\n  const formatSentencesToHtml = sentences => {\n    let html = '<div class=\"pdf-content\">';\n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${sentence}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为句子应用静态高亮\n  const applyStaticHighlightToSentences = sentences => {\n    let html = '<div class=\"pdf-content adhd-content\">';\n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n\n      // 简单地为句子添加特定样式的class\n      html += `<p class=\"pdf-paragraph adhd-sentence\">${sentence}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为鼠标跟随模式格式化句子\n  const formatSentencesForMouseFollow = sentences => {\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    sentences.forEach((sentence, index) => {\n      if (sentence.trim() === '') return;\n\n      // 每个句子作为独立行，使用div而不是p标签\n      html += `<div class=\"follow-line\" data-line=\"${index}\" data-sentence=\"${sentence.substring(0, 20)}...\" style=\"color: inherit;\">${sentence}</div>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为舒适3D模式格式化句子\n  const applyComfortable3dEffectToSentences = sentences => {\n    let html = '<div class=\"pdf-content\">';\n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n\n      // 为每个词随机应用不同的3D效果\n      const words = sentence.split(/(\\s+)/);\n      let processedSentence = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedSentence += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          processedSentence += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedSentence}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为闪读模式创建内容\n  const createFlashReadingContentFromSentences = sentences => {\n    // 储存句子到全局变量，用于后续显示\n    window.flashReadingSentences = sentences;\n\n    // 返回闪读界面的HTML结构\n    return `\n      <div class=\"flash-reading-container\">\n        <div class=\"flash-reading-controls\">\n          <div class=\"flash-reading-buttons\">\n            <button id=\"flash-reading-prev-sentence\" class=\"flash-reading-btn\">上一句</button>\n            <button id=\"flash-reading-play\" class=\"flash-reading-btn\">开始</button>\n            <button id=\"flash-reading-pause\" class=\"flash-reading-btn\" disabled>暂停</button>\n            <button id=\"flash-reading-stop\" class=\"flash-reading-btn\">停止</button>\n            <button id=\"flash-reading-next-sentence\" class=\"flash-reading-btn\">下一句</button>\n          </div>\n          <div class=\"flash-reading-speed\">\n            <span>速度：</span>\n            <input type=\"range\" id=\"flash-reading-speed\" min=\"300\" max=\"1700\" step=\"50\" value=\"1000\" class=\"flash-reading-slider\">\n            <span id=\"flash-reading-speed-value\">1000 ms</span>\n            <span class=\"flash-reading-speed-note\">（数值越小，切换越快）</span>\n          </div>\n          <div class=\"flash-reading-progress\">\n            <span id=\"flash-reading-progress\">进度：0 / ${sentences.length}</span>\n          </div>\n        </div>\n        <div class=\"flash-reading-display-wrapper\">\n          <div class=\"flash-reading-cover\"></div> <!-- 这里是闪卡 -->\n          <div id=\"flash-reading-display\" class=\"flash-reading-display\">准备开始</div>\n        </div>\n      </div>`;\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async file => {\n    try {\n      const text = await file.text();\n\n      // 根据阅读模式选择不同的处理方式\n      let processedContent = '';\n      if (readingMode === 'flash-reading') {\n        // 闪读模式下使用特定的分割函数\n        const segments = splitIntoFlashReadingSegments(text);\n        processedContent = createFlashReadingContentFromSentences(segments);\n\n        // 初始化闪读模式\n        setTimeout(() => {\n          initializeFlashReading();\n        }, 100);\n      } else {\n        // 其他模式使用默认的分割方式\n        const sentences = splitIntoSentences(text);\n        switch (readingMode) {\n          case 'normal':\n            processedContent = formatSentencesToHtml(sentences);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlightToSentences(sentences);\n            break;\n          case 'follow-mouse':\n            processedContent = formatSentencesForMouseFollow(sentences);\n            break;\n          case 'comfortable-3d':\n            processedContent = applyComfortable3dEffectToSentences(sentences);\n            break;\n          default:\n            processedContent = formatSentencesToHtml(sentences);\n        }\n      }\n\n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n\n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setContent('<div class=\"error-message\">TXT文件处理失败</div>');\n    }\n  };\n\n  // 处理Markdown文件\n  const handleMarkdownFile = async file => {\n    try {\n      const text = await file.text();\n\n      // 使用marked库转换markdown为HTML\n      let html = '';\n      try {\n        if (window.marked) {\n          html = window.marked.parse(text);\n        } else {\n          // 如果没有marked库，简单地拆分为段落\n          html = `<div>${text.split(\"\\n\\n\").map(p => `<p>${p}</p>`).join(\"\")}</div>`;\n        }\n      } catch (parseError) {\n        console.error('Markdown解析错误:', parseError);\n        html = `<div>${text}</div>`;\n      }\n\n      // 提取纯文本内容\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = html;\n      const plainText = tempDiv.textContent || tempDiv.innerText || '';\n\n      // 分割文本为句子\n      const sentences = splitIntoSentences(plainText);\n\n      // 根据当前阅读模式处理内容\n      let processedContent = '';\n      switch (readingMode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlightToSentences(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          // 使用特定的闪读分割函数重新处理文本\n          const segments = splitIntoFlashReadingSegments(plainText);\n          processedContent = createFlashReadingContentFromSentences(segments);\n\n          // 初始化闪读模式\n          setTimeout(() => {\n            initializeFlashReading();\n          }, 100);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n\n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n\n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('Markdown处理错误:', error);\n      setContent('<div class=\"error-message\">Markdown文件处理失败</div>');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async e => {\n    const uploadedFile = e.target.files[0];\n    if (!uploadedFile) return;\n    setLoading(true);\n    setFileName(uploadedFile.name);\n    try {\n      if (uploadedFile.type === 'application/pdf') {\n        await handlePdfFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/plain' || uploadedFile.name.endsWith('.txt')) {\n        await handleTxtFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/markdown' || uploadedFile.name.endsWith('.md')) {\n        await handleMarkdownFile(uploadedFile);\n      } else {\n        setContent('<div class=\"error-message\">不支持的文件格式</div>');\n      }\n    } catch (error) {\n      console.error('处理文件时出错:', error);\n      setContent('<div class=\"error-message\">处理文件时出错</div>');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = container => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n\n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n\n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n\n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width / 2,\n            // 水平中心\n            y: rect.bottom,\n            // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n\n    // 过滤无效位置并排序\n    return positions.filter(p => p.char.trim() !== '').sort((a, b) => {\n      // 先按行排序，同行按列排序\n      const yDiff = a.y - b.y;\n      if (Math.abs(yDiff) > 5) {\n        // 5px阈值判断是否同一行\n        return yDiff;\n      }\n      return a.x - b.x;\n    });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n\n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - containerVisibleHeight / 2;\n\n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - window.innerHeight / 2;\n\n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n\n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n\n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length ||\n      // 已到末尾\n      positions[nextIndex].char.trim() === '' ||\n      // 下一个是空白\n      positions[nextIndex].y > charPosition.y + 5) {\n        // 下一个在新行\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n\n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n\n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || current.y > prev.y + 5) {\n        // 有明显换行\n        break;\n      }\n      start--;\n    }\n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n\n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n\n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (window.autoReader.charPositions.length === 0) {\n      if (window.currentPage < window.totalPages) {\n        window.changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 重置索引到开头\n    window.autoReader.currentIndex = 0;\n\n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n\n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n\n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none';\n      highlight.style.zIndex = '998';\n      contentContainer.appendChild(highlight);\n    }\n\n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n\n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20;\n\n    // 尝试获取实际行高\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(window.autoReader.charPositions[i].y - window.autoReader.charPositions[i - 1].y);\n        if (yDiff > 5) {\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n\n    // 记录上次滚动的位置\n    let lastScrolledY = -1;\n    const scrollSafeZone = lineHeight * 2.5;\n\n    // 设置字符大小的估计值\n    let charWidth = 20;\n    let charHeight = lineHeight * 0.8;\n\n    // 尝试估计字符宽度\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        if (window.autoReader.charPositions[i].x !== window.autoReader.charPositions[i - 1].x) {\n          const xDiff = Math.abs(window.autoReader.charPositions[i].x - window.autoReader.charPositions[i - 1].x);\n          if (xDiff > 0 && xDiff < 50) {\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    window.autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (window.autoReader.currentIndex < window.autoReader.charPositions.length && ((_window$autoReader$ch = window.autoReader.charPositions[window.autoReader.currentIndex]) === null || _window$autoReader$ch === void 0 ? void 0 : _window$autoReader$ch.char.trim()) === '') {\n        var _window$autoReader$ch;\n        window.autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (window.autoReader.currentIndex >= window.autoReader.charPositions.length) {\n        if (window.currentPage < window.totalPages) {\n          window.changePage(1);\n          clearInterval(window.autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n      const pos = window.autoReader.charPositions[window.autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      if (cursor && highlight) {\n        const contentRect = contentContainer.getBoundingClientRect();\n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        highlight.style.left = `${relativeX - charWidth / 2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n\n        // 滚动处理\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          if (isContainerScrollable) {\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = relativeY;\n            }\n          } else {\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      window.autoReader.currentIndex++;\n    }, window.autoReader.speed);\n\n    // 在停止自动阅读时清除所有高亮\n    window.autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n\n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n\n      // 调用清理函数\n      if (window.autoReader.cleanup) {\n        window.autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n\n    // 重置翻页状态\n    window.autoReader.isPageChanging = false;\n\n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n\n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n\n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n\n    // 收集字符位置\n    window.autoReader.charPositions = getAllCharacterPositions(content);\n\n    // 如果当前页没有内容，尝试翻页\n    if (window.autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !window.autoReader.isPageChanging) {\n        window.autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async e => {\n    const newMode = e.target.value;\n    const prevMode = readingMode;\n    console.log(`切换阅读模式: 从 ${prevMode} 到 ${newMode}`);\n\n    // 更新状态\n    setReadingMode(newMode);\n\n    // 如果有PDF文档和当前页，重新处理当前页内容\n    if (pdfDocument && currentPage > 0) {\n      try {\n        console.log('重新处理当前页面内容');\n        const page = await pdfDocument.getPage(currentPage);\n\n        // 不使用任何额外处理，直接使用最原始的方式重新加载页面\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n\n        // 根据当前模式设置内容\n        if (newMode === 'static') {\n          // 静态高亮模式 - 使用改进的句子处理\n          const html = formatSimpleHighlightedText(sentences);\n          console.log('设置静态高亮内容');\n          setContent(html);\n\n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n            if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n\n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n\n                // 验证文字颜色\n                if (styles.color === 'rgb(51, 51, 51)' || styles.color === '#333333') {\n                  console.log('文字颜色正确应用');\n                } else {\n                  console.warn('文字颜色可能未正确应用:', styles.color);\n                }\n              }\n            } else {\n              console.error('未找到静态高亮模式内容区域');\n            }\n          }, 200);\n        } else if (newMode === 'flash-reading') {\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n\n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n\n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n        } else {\n          // 其他模式保持不变\n          const handler = getContentHandlerForMode(newMode);\n          const processedContent = handler(sentences);\n          setContent(processedContent);\n        }\n      } catch (error) {\n        console.error('应用阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 首先确保移除鼠标跟随监听器\n    removeMouseFollowListeners();\n\n    // 清理节奏阅读器\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n\n    // 清理闪读器\n    if (window.flashReader) {\n      window.flashReader.cleanup();\n    }\n\n    // 清理舒适3D效果\n    const comfortable3DElements = document.querySelectorAll('.emboss-3d-text, .float-3d-text, .gradient-3d-text');\n    comfortable3DElements.forEach(el => el.remove());\n\n    // 清理闪读模式元素\n    const flashReadingElements = document.querySelectorAll('.flash-reading-container, .flash-reading-display, .flash-reading-controls');\n    flashReadingElements.forEach(el => el.remove());\n\n    // 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll('.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line, .rhythm-char');\n    highlights.forEach(el => {\n      if (el.parentNode) el.parentNode.removeChild(el);\n    });\n\n    // 彻底替换内容区域以移除所有事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      var _contentArea$querySel;\n      // 先保存底部翻页控件\n      const bottomPagination = contentArea.querySelector('.bottom-pagination');\n\n      // 深度克隆内容，但不克隆事件监听器\n      const contentHTML = ((_contentArea$querySel = contentArea.querySelector('div[dangerouslySetInnerHTML]')) === null || _contentArea$querySel === void 0 ? void 0 : _contentArea$querySel.innerHTML) || '';\n      const newContentArea = contentArea.cloneNode(false);\n\n      // 创建新的内容容器\n      const newContentContainer = document.createElement('div');\n      newContentContainer.innerHTML = contentHTML;\n      newContentArea.appendChild(newContentContainer);\n\n      // 如果有底部翻页控件，重新添加\n      if (bottomPagination && totalPages > 0) {\n        const newBottomPagination = bottomPagination.cloneNode(true);\n        // 重新绑定事件\n        const prevBtn = newBottomPagination.querySelector('.page-btn:first-child');\n        const nextBtn = newBottomPagination.querySelector('.page-btn:last-child');\n        if (prevBtn) prevBtn.onclick = () => changePage(-1);\n        if (nextBtn) nextBtn.onclick = () => changePage(1);\n        newContentArea.appendChild(newBottomPagination);\n      }\n      if (contentArea.parentNode) {\n        contentArea.parentNode.replaceChild(newContentArea, contentArea);\n      }\n    }\n\n    // 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 移除所有特殊标记和样式\n      paragraph.removeAttribute('data-follow');\n      paragraph.removeAttribute('style');\n\n      // 清理特殊span标签\n      paragraph.innerHTML = paragraph.innerHTML.replace(/<span class=\"text-line\"[^>]*>/g, '').replace(/<span class=\"rhythm-char\"[^>]*>/g, '').replace(/<span class=\"line-highlight[^\"]*\"[^>]*>/g, '').replace(/<span class=\"mouse-highlight[^\"]*\"[^>]*>/g, '').replace(/<\\/span>/g, '');\n    });\n\n    // 移除特殊UI元素\n    const elementsToRemove = ['rhythm-speed-slider', 'rhythm-notification'];\n    elementsToRemove.forEach(id => {\n      const element = document.getElementById(id);\n      if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    });\n\n    // 移除暗色背景\n    document.body.classList.remove('dark-background');\n\n    // 清理闪读模式\n    if (window.flashReader && typeof window.flashReader.cleanup === 'function') {\n      window.flashReader.cleanup();\n    }\n  };\n  const handleAutoScroll = () => {\n    window.autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = e => {\n    if (readingMode !== 'follow-mouse') return;\n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    const rect = contentArea.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    clearAllHighlights();\n    const paragraphs = contentArea.querySelectorAll('p');\n    paragraphs.forEach(paragraph => {\n      const paragraphRect = paragraph.getBoundingClientRect();\n      const paragraphX = paragraphRect.left - rect.left;\n      const paragraphY = paragraphRect.top - rect.top;\n      if (y >= paragraphY && y <= paragraphY + paragraphRect.height) {\n        const words = paragraph.querySelectorAll('span');\n        words.forEach(word => {\n          const wordRect = word.getBoundingClientRect();\n          const wordX = wordRect.left - rect.left;\n          if (x >= wordX && x <= wordX + wordRect.width) {\n            word.classList.add('highlight');\n          }\n        });\n      }\n    });\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 专门用于移除鼠标跟随事件的函数\n  const removeMouseFollowListeners = () => {\n    // 移除记录的所有监听器\n    if (window.eventTracker && window.eventTracker.mouseFollowHandlers) {\n      window.eventTracker.mouseFollowHandlers.forEach(({\n        element,\n        event,\n        handler\n      }) => {\n        if (element && element.removeEventListener) {\n          element.removeEventListener(event, handler);\n        }\n      });\n      window.eventTracker.mouseFollowHandlers = [];\n    }\n\n    // 为安全起见，尝试从document和内容区域移除通用处理函数\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    }\n    document.removeEventListener('mousemove', handleMouseMove);\n\n    // 清除所有当前高亮\n    clearAllHighlights();\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n\n    // 添加底部翻页控件样式\n    const bottomPaginationStyles = document.createElement('style');\n    bottomPaginationStyles.id = 'bottom-pagination-styles';\n    bottomPaginationStyles.innerHTML = `\n      .bottom-pagination {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        padding: 20px 0 30px;\n        margin-top: 30px;\n        width: 100%;\n        background-color: transparent;\n        border-radius: 5px;\n      }\n\n      .bottom-pagination .page-btn {\n        background-color: #6c5ce7;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        padding: 8px 15px;\n        margin: 0 10px;\n        cursor: pointer;\n        font-size: 14px;\n        transition: background-color 0.2s ease;\n      }\n\n      .bottom-pagination .page-btn:hover {\n        background-color: #4834d4;\n      }\n\n      .bottom-pagination .page-btn:disabled {\n        background-color: #aaa;\n        cursor: not-allowed;\n      }\n\n      .bottom-pagination .page-info {\n        font-size: 14px;\n        margin: 0 10px;\n      }\n    `;\n    document.head.appendChild(bottomPaginationStyles);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n    addComfortable3DStyles();\n\n    // 添加鼠标跟随模式的样式\n    const mouseFollowStyle = document.createElement('style');\n    mouseFollowStyle.id = 'intelligent-mouse-follow-style';\n    mouseFollowStyle.textContent = `\n      /* 基础样式 */\n      .mouse-follow-content {\n        position: relative;\n        line-height: 1.8;\n      }\n      \n      .mouse-follow-content .follow-line {\n        position: relative;\n        padding: 8px 16px;\n        margin: 4px 0;\n        border-radius: 6px;\n        transition: all 0.2s ease;\n        display: block;\n        min-height: 1.8em;\n        white-space: normal;\n        word-wrap: break-word;\n        text-indent: 2em;\n      }\n      \n      /* 高亮状态 */\n      .follow-line.highlighted {\n        background-color: #ffa500 !important; /* 橙色背景 */\n        color: #ffffff !important; /* 白色文字 */\n        font-weight: bold !important;\n        font-size: 1.1em; /* 稍微调小字号 */\n        transform: translateX(5px);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n      }\n      \n      \n      /* 平滑过渡效果 */\n      .follow-line {\n        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n      }\n      \n      /* 行间距优化 */\n      .mouse-follow-content .follow-line + .follow-line {\n        margin-top: 4px;\n      }\n      \n      /* 添加行指示器 */\n      .follow-line::before {\n        content: '';\n        position: absolute;\n        left: 0;\n        top: 0;\n        bottom: 0;\n        width: 3px;\n        background: linear-gradient(to bottom, transparent, rgba(255, 255, 255, 0.5), transparent);\n        opacity: 0;\n        transition: opacity 0.2s ease;\n      }\n      \n      .follow-line.highlighted::before {\n        opacity: 1;\n      }\n    `;\n    document.head.appendChild(mouseFollowStyle);\n\n    // 创建深色背景下的ADHD友好高亮样式\n    const style = document.createElement('style');\n    style.id = 'adhd-friendly-highlight-style';\n    style.textContent = `\n      /* ADHD友好的高亮样式 - 适配深色背景 */\n      .adhd-highlight-mode {\n        line-height: 1.8;\n        padding: 20px;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph {\n        margin-bottom: 1.2em;\n        background-color: transparent;\n        padding: 12px 15px;\n        border-radius: 6px;\n        border-left: 3px solid rgba(255, 255, 255, 0.2);\n        transition: all 0.3s ease;\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover {\n        transform: translateX(5px);\n        border-left-color: rgba(255, 255, 255, 0.4);\n      }\n      \n      /* 加粗样式 - 白色加粗 */\n      .adhd-bold {\n        font-weight: 700;\n        color: #ffffff;\n        letter-spacing: 0.02em;\n        font-size: 1.1em;\n        text-shadow: 0 0 1px rgba(255, 255, 255, 0.2);\n      }\n      \n      /* 彩色样式 - 使用鲜明的蓝色 */\n      .adhd-colored {\n        color: #6c5ce7;\n        font-weight: 500;\n        font-size: 1.05em;\n        text-shadow: 0 0 1px rgba(108, 92, 231, 0.2);\n      }\n      \n      /* 正常样式 - 普通白色 */\n      .adhd-normal {\n        color: rgba(255, 255, 255, 0.8);\n        font-size: 1em;\n      }\n\n      /* 添加平滑过渡效果 */\n      .adhd-bold, .adhd-colored, .adhd-normal {\n        transition: all 0.2s ease;\n      }\n\n      /* 悬停效果 */\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-bold {\n        color: #ffffff;\n        text-shadow: 0 0 2px rgba(255, 255, 255, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-colored {\n        color: #8a7ff7;\n        text-shadow: 0 0 2px rgba(138, 127, 247, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-normal {\n        color: rgba(255, 255, 255, 0.9);\n      }\n\n      /* 添加段落间距的视觉引导 */\n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph {\n        margin-top: 1.5em;\n        position: relative;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph::before {\n        content: '';\n        position: absolute;\n        top: -0.75em;\n        left: 0;\n        right: 0;\n        height: 1px;\n        background: linear-gradient(\n          to right,\n          transparent,\n          rgba(255, 255, 255, 0.1),\n          transparent\n        );\n      }\n    `;\n    document.head.appendChild(style);\n\n    // 添加基础鼠标跟随样式\n    const mouseFollowPageStyle = document.createElement('style');\n    mouseFollowPageStyle.id = 'basic-mouse-follow-style';\n    mouseFollowPageStyle.textContent = `\n      .follow-line {\n        padding: 8px 12px;\n        margin: 4px 0;\n        border-radius: 4px;\n        transition: background-color 0.2s ease;\n      }\n      .follow-line.highlighted {\n        background-color: #ffa500;\n        color: #000080;\n        font-weight: bold;\n      }\n    `;\n    document.head.appendChild(mouseFollowPageStyle);\n    return () => {\n      const existingStyle = document.getElementById('adhd-friendly-highlight-style');\n      if (existingStyle) existingStyle.remove();\n      const existingMouseFollowStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (existingMouseFollowStyle) existingMouseFollowStyle.remove();\n      const existingBasicMouseFollowStyle = document.getElementById('basic-mouse-follow-style');\n      if (existingBasicMouseFollowStyle) existingBasicMouseFollowStyle.remove();\n      mouseFollowPageStyle.remove();\n    };\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 清理旧监听器\n    removeMouseFollowListeners();\n\n    // 添加新监听器\n    setTimeout(() => {\n      addMouseFollowListeners();\n\n      // 添加调试辅助 - 显示行边界\n      const contentArea = document.querySelector('.mouse-follow-content');\n      if (contentArea) {\n        const lines = contentArea.querySelectorAll('.follow-line');\n        console.log(`初始化鼠标跟随模式，共 ${lines.length} 行`);\n\n        // 可选：启用可视化调试\n        if (false) {\n          // 设置为true可以启用可视化调试\n          lines.forEach((line, index) => {\n            line.style.border = '1px dashed #888';\n            line.setAttribute('title', `行 ${index + 1}`);\n          });\n        }\n\n        // 验证行高亮效果\n        const firstLine = lines[0];\n        if (firstLine) {\n          console.log('行样式验证:', {\n            padding: window.getComputedStyle(firstLine).padding,\n            margin: window.getComputedStyle(firstLine).margin,\n            fontSize: window.getComputedStyle(firstLine).fontSize,\n            lineHeight: window.getComputedStyle(firstLine).lineHeight\n          });\n        }\n      }\n    }, 100);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = delta => {\n    window.autoReader.speed = Math.max(100, window.autoReader.speed + delta);\n    if (window.autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async delta => {\n    console.log(`翻页请求: 当前页 ${currentPage}, 增量 ${delta}`);\n    const newPage = currentPage + delta;\n    if (newPage < 1 || newPage > totalPages) {\n      console.log('无效页码，不执行翻页');\n      return;\n    }\n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n    const wasFlashReading = readingMode === 'flash-reading' && window.flashReader && window.flashReader.isPlaying;\n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    if (wasFlashReading && window.flashReader) {\n      window.flashReader.cleanup();\n    }\n\n    // 更新页码\n    setCurrentPage(newPage);\n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n\n      // 检查是否为目录页\n      const textContent = await page.getTextContent();\n      const isToc = await detectIfTocPage(textContent);\n      setIsTableOfContents(isToc);\n      if (isToc) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, page.getViewport({\n          scale: 1.0\n        }));\n      } else {\n        // 处理正文页面 - 根据当前阅读模式处理\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n\n        // 根据当前模式设置内容\n        if (readingMode === 'static') {\n          console.log('翻页后应用静态高亮模式');\n          const processedContent = formatSimpleHighlightedText(sentences);\n          setContent(processedContent);\n\n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n            if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n\n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n              }\n            }\n          }, 200);\n        } else if (readingMode === 'flash-reading') {\n          // 如果是闪读模式，则需要特殊处理\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n\n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n\n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n          return; // 已处理，直接返回\n        } else {\n          // 其他模式使用原处理函数\n          await processContentPage(page, readingMode);\n        }\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n    } catch (error) {\n      console.error('页面切换错误:', error);\n    }\n  };\n\n  // ADHD友好的静态高亮处理函数\n  const formatSimpleHighlightedText = sentences => {\n    console.log('开始处理ADHD友好的静态高亮文本，句子数量:', sentences.length);\n    let html = '<div class=\"pdf-content adhd-highlight-mode\">';\n    sentences.forEach((sentence, sentenceIndex) => {\n      if (!sentence || sentence.trim() === '') {\n        console.log(`跳过空句子，索引: ${sentenceIndex}`);\n        return;\n      }\n\n      // 清理和规范化文本\n      const cleanText = sentence.trim().replace(/\\s+/g, ' ') // 规范化空白字符\n      .replace(/&/g, '&amp;') // 转义特殊字符\n      .replace(/</g, '&lt;').replace(/>/g, '&gt;');\n\n      // 处理句子中的单词，为它们添加不同样式\n      const words = cleanText.split(/(\\s+)/);\n      let formattedSentence = '';\n      words.forEach((word, wordIndex) => {\n        if (word.trim() === '') {\n          // 保留空格\n          formattedSentence += word;\n        } else {\n          // 根据位置应用不同的样式类\n          // 三种交替样式: 加粗、彩色、正常\n          const styleClass = wordIndex % 3 === 0 ? 'adhd-bold' : wordIndex % 3 === 1 ? 'adhd-colored' : 'adhd-normal';\n          formattedSentence += `<span class=\"${styleClass}\">${word}</span>`;\n        }\n      });\n      console.log(`处理句子 ${sentenceIndex + 1}:`, cleanText.substring(0, 50) + '...');\n      html += `<p class=\"pdf-paragraph\">${formattedSentence}</p>`;\n    });\n    html += '</div>';\n\n    // 调试输出\n    console.log('生成的ADHD友好静态高亮HTML:', html.substring(0, 200) + '...');\n    return html;\n  };\n\n  // 根据阅读模式获取相应的内容处理函数\n  const getContentHandlerForMode = mode => {\n    switch (mode) {\n      case 'normal':\n        return formatSentencesToHtml;\n      case 'static':\n        return applyStaticHighlightToSentences;\n      case 'follow-mouse':\n        return formatSentencesForMouseFollow;\n      case 'comfortable-3d':\n        return applyComfortable3dEffectToSentences;\n      case 'flash-reading':\n        return sentences => {\n          // 闪读模式使用专门的分割函数重新处理文本\n          return createFlashReadingContentFromSentences(sentences);\n        };\n      default:\n        return formatSentencesToHtml;\n    }\n  };\n\n  // 监听阅读模式和当前页面的变化\n  useEffect(() => {\n    if (readingMode === 'mouse-follow' && currentPage && !isTableOfContents) {\n      // 移除之前的样式\n      const oldStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (oldStyle) {\n        oldStyle.remove();\n      }\n\n      // 添加基础鼠标跟随样式\n      const followModeStyle = document.createElement('style');\n      followModeStyle.id = 'basic-mouse-follow-style';\n      followModeStyle.textContent = `\n        .follow-line {\n          padding: 8px 12px;\n          margin: 4px 0;\n          border-radius: 4px;\n          transition: background-color 0.2s ease;\n        }\n        .follow-line.highlighted {\n          background-color: #ffa500;\n          color: #000080;\n          font-weight: bold;\n        }\n      `;\n      document.head.appendChild(followModeStyle);\n\n      // 处理当前页面内容\n      const page = pdfDocument.getPage(currentPage);\n      const textContent = page.getTextContent();\n      const sentences = textContent.items.map(item => item.str).join(' ').split(/[。！？]/).filter(s => s.trim());\n\n      // 应用基础鼠标跟随格式化\n      setContent(formatSentencesForMouseFollow(sentences));\n\n      // 添加鼠标跟随监听器\n      setTimeout(() => {\n        addMouseFollowListeners();\n      }, 100);\n      return () => {\n        followModeStyle.remove();\n      };\n    }\n  }, [readingMode, currentPage, pdfDocument]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3326,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3325,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reading-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u9605\\u8BFB\\u6A21\\u5F0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3330,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"reading-mode-select\",\n          value: readingMode,\n          onChange: handleReadingModeChange,\n          className: \"mode-select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"normal\",\n            children: \"\\u666E\\u901A\\u6A21\\u5F0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3337,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"static\",\n            children: \"\\u9759\\u6001\\u9AD8\\u4EAE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3338,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"follow-mouse\",\n            children: \"\\u9F20\\u6807\\u8DDF\\u968F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3339,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"rhythm\",\n            children: \"\\u8282\\u594F\\u9605\\u8BFB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3340,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"flash-reading\",\n            children: \"\\u95EA\\u8BFB\\u6A21\\u5F0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3341,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 3331,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3329,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".pdf,.txt,.md\",\n          hidden: true,\n          id: \"file-upload\",\n          onChange: handleFileUpload,\n          ref: fileRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3346,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"upload-btn\",\n          onClick: () => fileRef.current.click(),\n          children: \"\\u4E0A\\u4F20\\u6587\\u4EF6 (.pdf/.txt/.md)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3354,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3345,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 3324,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toolbar\",\n        children: fileName && /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"filename\",\n          children: fileName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3365,\n          columnNumber: 24\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3364,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-content\",\n        ref: readerContainerRef,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: content\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3370,\n          columnNumber: 13\n        }, this), totalPages > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bottom-pagination\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => changePage(-1),\n            disabled: currentPage <= 1,\n            className: \"page-btn\",\n            children: \"\\u4E0A\\u4E00\\u9875\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3374,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"page-info\",\n            children: [\"\\u7B2C \", currentPage, \" / \", totalPages, \" \\u9875\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 3381,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => changePage(1),\n            disabled: currentPage >= totalPages,\n            className: \"page-btn\",\n            children: \"\\u4E0B\\u4E00\\u9875\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3384,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 3373,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3369,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 3363,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 3323,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"x5N0itQI0gqtA84jt63lPsdPeRI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","pdfjsLib","pdfjsViewer","marked","pdfjs","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","window","currentPage","totalPages","changePage","eventTracker","mouseFollowHandlers","autoReader","charPositions","intervalId","currentIndex","speed","pageContainer","isScrolling","isPageChanging","cleanup","rhythmReaderGlobal","active","console","log","rhythmReadingInitialized","setLocalStorage","key","value","localStorage","setItem","e","error","getLocalStorage","getItem","rhythmReader","readIndices","Set","charElements","start","stop","initializeTextNodes","clear","addSpeedSlider","updateTextColors","scrollToCurrentChar","setInterval","moveToNextChar","showNotification","hijackPageTurningFunctions","setupPageNavigationListeners","clearInterval","restoreOriginalText","slider","document","getElementById","remove","message","notification","createElement","id","textContent","style","position","top","left","transform","backgroundColor","color","padding","borderRadius","zIndex","fontSize","body","appendChild","setTimeout","parentNode","removeChild","_originalChangePage","self","delta","wasActive","possibleButtons","querySelectorAll","forEach","button","text","trim","toLowerCase","includes","addEventListener","contentContainer","querySelector","textNodes","findTextNodes","length","node","nodeValue","fragment","createDocumentFragment","i","char","span","className","dataset","rhythmIndex","whitespace","display","margin","border","push","replaceChild","element","childNodes","nodeType","Node","TEXT_NODE","ELEMENT_NODE","index","fontWeight","has","background","add","clickNextPageButton","nextPageSelectors","nextPageButton","selector","elements","el","offsetParent","buttons","click","rect","getBoundingClientRect","lineHeight","parseInt","getComputedStyle","Math","max","height","isContainerScrollable","scrollHeight","clientHeight","overflowY","containerRect","relativeTop","scrollTop","visibleTop","visibleBottom","scrollBy","behavior","viewportTop","scrollY","viewportBottom","innerHeight","absoluteTop","container","right","boxShadow","alignItems","maxWidth","label","marginRight","input","type","min","step","width","valueDisplay","marginLeft","minWidth","newSpeed","charSpans","parentNodeMap","Map","parent","set","get","spans","sort","a","b","indexA","indexB","groups","currentGroup","prevIndex","previousSibling","group","map","join","textNode","createTextNode","selectors","foundSelector","handleReadingModeChange","originalReadingModeChanged","mode","warn","setupPageLoadListener","checkAndRestoreReading","observer","MutationObserver","mutations","contentChanges","filter","m","addedNodes","observe","childList","subtree","App","_s","pages","setPages","setCurrentPage","setTotalPages","fileName","setFileName","loading","setLoading","fileRef","file","setFile","pdfInstance","setPdfInstance","extractedTextPages","setExtractedTextPages","readingMode","setReadingMode","posMode","setPosMode","markdownContent","setMarkdownContent","readerContainerRef","content","setContent","pdfDocument","setPdfDocument","isTableOfContents","setIsTableOfContents","applyDarkBackground","classList","head","restoreDarkBackground","addNakedEye3DStyles","addComfortable3DStyles","addFlashReadingStyles","initializeFlashReading","sentences","flashReadingSentences","Array","isArray","speedSlider","speedValue","playButton","pauseButton","stopButton","prevButton","nextButton","progress","cover","flashReader","interval","isPlaying","disabled","displayCurrentSentence","currentSentence","displayRect","pause","updateSpeed","prevSentence","nextSentence","target","savedSpeed","initialSpeed","createFlashReadingContent","formatTextToHtml","paragraphs","split","html","paragraph","formatTextForMouseFollow","words","processedParagraph","word","applyStaticHighlight","lastColor","random","applyNakedEye3dEffect","applyComfortable3dEffect","effectTypes","effectClass","floor","initializeNakedEye3D","textElements","delay","animationDelay","initializeRhythmReading","startRhythmReading","addMouseFollowListeners","contentArea","lastHighlightedLine","mouseMoveHandler","mouseY","clientY","allLines","foundLine","minDistance","Infinity","line","lineCenter","distance","abs","bottom","substring","mouseLeaveHandler","event","handler","initializeMouseFollow","handlePdfFile","fileURL","URL","createObjectURL","loadingTask","getDocument","pdf","promise","numPages","extractAndProcessPage","alert","pageNum","page","getPage","getTextContent","viewport","getViewport","scale","detectIfTocPage","processTocPage","processContentPage","textItems","items","fullText","item","str","hasTocKeywords","test","hasPageNumberPatterns","shortLinesCount","linesWithNumbersCount","lineMap","yKey","round","lines","values","lineText","shortLineRatio","numberLineRatio","htmlContent","x","y","sqrt","fontName","spacedText","getTextNodeAtPosition","nodes","range","createRange","selectNodeContents","rects","getClientRects","j","found","processTextWithHighlight","result","extractedText","replace","splitIntoSentences","processedContent","formatSentencesToHtml","formatSimpleHighlightedText","formatSentencesForMouseFollow","applyComfortable3dEffectToSentences","createFlashReadingContentFromSentences","firstPara","styles","fontFamily","sentenceRegex","lastIndex","match","exec","endIndex","sentence","lastSentence","splitIntoFlashReadingSegments","segments","segment","lastSegment","applyStaticHighlightToSentences","processedSentence","handleTxtFile","name","handleMarkdownFile","parse","p","parseError","tempDiv","innerHTML","plainText","innerText","handleFileUpload","uploadedFile","files","endsWith","getAllCharacterPositions","walker","createTreeWalker","NodeFilter","SHOW_TEXT","positions","nextNode","currentNode","setStart","setEnd","yDiff","scrollElementToCenter","elementY","targetScrollTop","containerVisibleHeight","scrollTo","absoluteElementY","createReaderCursor","cursor","cssText","isSentenceEnd","charPosition","sentenceEndMarks","nextIndex","findSentenceStart","prev","current","isInVisibleArea","threshold","topThreshold","bottomThreshold","startAutoReader","highlight","pointerEvents","lastScrolledY","scrollSafeZone","charWidth","charHeight","xDiff","_window$autoReader$ch","stopAutoReader","pos","contentRect","relativeX","relativeY","isInRecentlyScrolledArea","needsScroll","scrollAmount","absoluteY","initializeAutoReader","newMode","prevMode","getContentHandlerForMode","cleanupDOM","removeMouseFollowListeners","comfortable3DElements","flashReadingElements","highlights","_contentArea$querySel","bottomPagination","contentHTML","newContentArea","cloneNode","newContentContainer","newBottomPagination","prevBtn","nextBtn","onclick","removeAttribute","elementsToRemove","handleAutoScroll","updateCursorPosition","force","handleMouseMove","clientX","clearAllHighlights","paragraphRect","paragraphX","paragraphY","wordRect","wordX","removeEventListener","addAutoReaderStyles","bottomPaginationStyles","mouseFollowStyle","mouseFollowPageStyle","existingStyle","existingMouseFollowStyle","existingBasicMouseFollowStyle","setAttribute","firstLine","adjustSpeed","newPage","wasRhythmReading","wasFlashReading","isToc","sentenceIndex","cleanText","formattedSentence","wordIndex","styleClass","oldStyle","followModeStyle","s","children","_jsxFileName","lineNumber","columnNumber","onChange","accept","hidden","ref","onClick","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["D:/adhd-read-helper/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 添加全局事件跟踪对象\nwindow.eventTracker = window.eventTracker || {\n  mouseFollowHandlers: []\n};\n\n// 自动阅读器全局对象\nwindow.autoReader = {\n  charPositions: [],\n  intervalId: null,\n  currentIndex: 0,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false,\n  cleanup: null\n};\n\n// 添加新的节奏阅读模式代码\n// 全局变量，确保在页面切换后仍然保持状态\nwindow.rhythmReaderGlobal = window.rhythmReaderGlobal || {\n  active: false,\n  speed: 300\n};\n\n// 节奏阅读模式 - 确保手动翻页后也能自动恢复\n(function() {\n  console.log(\"正在初始化节奏阅读模式...\");\n  \n  // 确保只初始化一次\n  if (window.rhythmReadingInitialized) {\n    console.log(\"节奏阅读模式已经初始化过，跳过\");\n    return;\n  }\n  window.rhythmReadingInitialized = true;\n  \n  // 存储到localStorage以确保页面刷新后状态持续\n  function setLocalStorage(key, value) {\n    try {\n      localStorage.setItem(key, value);\n    } catch (e) {\n      console.error(\"无法写入localStorage\", e);\n    }\n  }\n  \n  function getLocalStorage(key) {\n    try {\n      return localStorage.getItem(key);\n    } catch (e) {\n      console.error(\"无法读取localStorage\", e);\n      return null;\n    }\n  }\n  \n  // 状态变量和功能对象\n  const rhythmReader = {\n    active: false,\n    intervalId: null,\n    speed: 300,\n    currentIndex: 0,\n    readIndices: new Set(),\n    charElements: [],\n    \n    // 启动节奏阅读\n    start: function() {\n      console.log(\"【节奏阅读】启动中...\");\n      \n      // 先停止已有的\n      this.stop(false);\n      \n      // 设置为活动状态\n      this.active = true;\n      setLocalStorage('rhythmReadingActive', 'true');\n      \n      // 初始化文本\n      if (!this.initializeTextNodes()) {\n        console.error(\"【节奏阅读】无法初始化文本节点\");\n        return;\n      }\n      \n      // 重要：始终从头开始阅读\n      this.currentIndex = 0;\n      this.readIndices.clear();\n      \n      // 添加速度滑块\n      this.addSpeedSlider();\n      \n      // 更新颜色\n      this.updateTextColors();\n      \n      // 滚动到开始位置\n      this.scrollToCurrentChar();\n      \n      // 设置阅读间隔\n      this.intervalId = setInterval(() => this.moveToNextChar(), this.speed);\n      \n      console.log(\"【节奏阅读】成功启动\");\n      \n      // 显示提示\n      this.showNotification(\"节奏阅读模式已启动\");\n      \n      // 劫持翻页函数 - 重要步骤\n      this.hijackPageTurningFunctions();\n      \n      // 设置页面导航事件监听\n      this.setupPageNavigationListeners();\n    },\n    \n    // 停止节奏阅读\n    stop: function(showNotification = true) {\n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n      }\n      \n      if (this.active) {\n        console.log(\"【节奏阅读】停止中...\");\n        this.active = false;\n        setLocalStorage('rhythmReadingActive', 'false');\n        \n        // 恢复原始文本\n        this.restoreOriginalText();\n        \n        // 移除速度滑块\n        const slider = document.getElementById('rhythm-speed-slider');\n        if (slider) slider.remove();\n        \n        if (showNotification) {\n          this.showNotification(\"节奏阅读模式已停止\");\n        }\n      }\n    },\n    \n    // 显示通知\n    showNotification: function(message) {\n      let notification = document.getElementById('rhythm-notification');\n      if (notification) notification.remove();\n      \n      notification = document.createElement('div');\n      notification.id = 'rhythm-notification';\n      notification.textContent = message;\n      notification.style.position = 'fixed';\n      notification.style.top = '50%';\n      notification.style.left = '50%';\n      notification.style.transform = 'translate(-50%, -50%)';\n      notification.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';\n      notification.style.color = 'white';\n      notification.style.padding = '15px 25px';\n      notification.style.borderRadius = '5px';\n      notification.style.zIndex = '10001';\n      notification.style.fontSize = '18px';\n      \n      document.body.appendChild(notification);\n      \n      // 2秒后自动消失\n      setTimeout(() => {\n        if (notification && notification.parentNode) {\n          notification.parentNode.removeChild(notification);\n        }\n      }, 2000);\n    },\n    \n    // 劫持页面翻转函数\n    hijackPageTurningFunctions: function() {\n      // 劫持changePage函数\n      if (typeof window.changePage === 'function' && !window._originalChangePage) {\n        console.log(\"【节奏阅读】劫持changePage函数\");\n        window._originalChangePage = window.changePage;\n        \n        const self = this;\n        window.changePage = function(delta) {\n          console.log(\"【节奏阅读】检测到changePage调用，delta =\", delta);\n          \n          // 记录活动状态\n          const wasActive = self.active;\n          \n          // 停止当前阅读\n          if (wasActive) {\n            self.stop(false);\n            \n            // 保存状态以便在新页面恢复\n            setLocalStorage('rhythmReadingActive', 'true'); \n            setLocalStorage('rhythmReadingPending', 'true');\n          }\n          \n          // 调用原始翻页函数\n          window._originalChangePage(delta);\n          \n          // 页面跳转后应该会重新加载，这里添加一个备用\n          if (wasActive) {\n            setTimeout(() => {\n              if (getLocalStorage('rhythmReadingPending') === 'true') {\n                setLocalStorage('rhythmReadingPending', 'false');\n                console.log(\"【节奏阅读】翻页后重新启动\");\n                self.start();\n              }\n            }, 1000);\n          }\n        };\n      }\n    },\n    \n    // 设置页面导航事件监听\n    setupPageNavigationListeners: function() {\n      // 查找所有可能的翻页按钮\n      console.log(\"【节奏阅读】正在设置页面导航监听\");\n      const possibleButtons = document.querySelectorAll('button, a');\n      \n      const self = this;\n      possibleButtons.forEach(button => {\n        const text = button.textContent.trim().toLowerCase();\n        // 查找可能的翻页按钮\n        if (text.includes('上一页') || text.includes('下一页') || \n            text.includes('prev') || text.includes('next') ||\n            text === '<' || text === '>' || text === '←' || text === '→') {\n          \n          console.log(`【节奏阅读】为可能的翻页按钮添加监听: ${text}`);\n          \n          // 添加点击事件\n          button.addEventListener('click', function(e) {\n            if (self.active) {\n              console.log(`【节奏阅读】检测到翻页按钮点击: ${text}`);\n              \n              // 保存状态到localStorage\n              setLocalStorage('rhythmReadingActive', 'true');\n              setLocalStorage('rhythmReadingPending', 'true');\n              \n              // 停止当前的阅读\n              self.stop(false);\n              \n              // 不阻止默认事件，允许正常翻页\n            }\n          });\n        }\n      });\n      \n      // 监听键盘导航事件\n      document.addEventListener('keydown', function(e) {\n        // 检查是否是翻页快捷键\n        if (['ArrowLeft', 'ArrowRight', 'PageUp', 'PageDown'].includes(e.key)) {\n          if (self.active) {\n            console.log(`【节奏阅读】检测到键盘翻页: ${e.key}`);\n            \n            // 保存状态到localStorage\n            setLocalStorage('rhythmReadingActive', 'true');\n            setLocalStorage('rhythmReadingPending', 'true');\n            \n            // 停止当前的阅读\n            self.stop(false);\n            \n            // 不阻止默认事件，允许正常翻页\n          }\n        }\n      });\n    },\n    \n    // 初始化文本节点\n    initializeTextNodes: function() {\n      console.log(\"【节奏阅读】初始化文本节点...\");\n      \n      // 重置字符元素数组\n      this.charElements = [];\n      \n      // 获取内容容器\n      const contentContainer = document.querySelector('.page-content') || document.body;\n      \n      // 查找所有文本节点并处理\n      const textNodes = [];\n      this.findTextNodes(contentContainer, textNodes);\n      \n      if (textNodes.length === 0) {\n        console.error(\"【节奏阅读】未找到文本节点\");\n        this.showNotification(\"无法启动节奏阅读：未找到文本内容\");\n        return false;\n      }\n      \n      console.log(`【节奏阅读】找到 ${textNodes.length} 个文本节点`);\n      \n      // 为每个文本节点创建字符span\n      textNodes.forEach(node => {\n        const text = node.nodeValue;\n        if (!text || text.trim() === '') return;\n        \n        // 创建文档片段来存放字符span\n        const fragment = document.createDocumentFragment();\n        \n        // 为每个字符创建span\n        for (let i = 0; i < text.length; i++) {\n          const char = text[i];\n          const span = document.createElement('span');\n          span.textContent = char;\n          span.className = 'rhythm-char';\n          span.dataset.rhythmIndex = this.charElements.length;\n          \n          // 如果是空白字符，添加一个标志\n          if (char.trim() === '') {\n            span.dataset.whitespace = 'true';\n          }\n          \n          // 保持原始样式，不设置背景\n          span.style.display = 'inline';\n          span.style.margin = '0';\n          span.style.padding = '0';\n          span.style.border = 'none';\n          span.style.backgroundColor = 'transparent';\n          \n          fragment.appendChild(span);\n          this.charElements.push(span);\n        }\n        \n        // 替换原始节点\n        if (node.parentNode) {\n          node.parentNode.replaceChild(fragment, node);\n        }\n      });\n      \n      console.log(`【节奏阅读】总共创建了 ${this.charElements.length} 个字符span`);\n      return this.charElements.length > 0;\n    },\n    \n    // 递归查找所有文本节点\n    findTextNodes: function(element, textNodes) {\n      // 处理子节点\n      for (let i = 0; i < element.childNodes.length; i++) {\n        const node = element.childNodes[i];\n        \n        // 如果是文本节点且有内容\n        if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() !== '') {\n          textNodes.push(node);\n        } \n        // 如果是元素节点，递归处理\n        else if (node.nodeType === Node.ELEMENT_NODE) {\n          // 跳过读者UI元素\n          if (node.id === 'rhythm-speed-slider' || \n              node.id === 'rhythm-notification' ||\n              node.className === 'rhythm-char') {\n            continue;\n          }\n          this.findTextNodes(node, textNodes);\n        }\n      }\n    },\n    \n    // 更新文本颜色\n    updateTextColors: function() {\n      // 更新所有字符的颜色\n      this.charElements.forEach((span, index) => {\n        // 确定颜色\n        let color;\n        let fontWeight = 'inherit';\n        \n        if (index === this.currentIndex) {\n          color = '#00aa00'; // 当前阅读的字 - 绿色\n          fontWeight = 'bold';\n        } else if (index === this.currentIndex + 1 || index === this.currentIndex + 2) {\n          color = '#aaaaaa'; // 接下来两个字 - 淡灰色\n        } else if (this.readIndices.has(index)) {\n          color = '#ffffff'; // 已读字符 - 白色（表示已读）\n        } else {\n          color = 'rgba(160, 160, 160, 0.25)'; // 未读字符 - 非常淡的灰色（可见但不明显）\n        }\n        \n        span.style.color = color;\n        span.style.fontWeight = fontWeight;\n        \n        // 确保没有背景\n        span.style.backgroundColor = 'transparent';\n        span.style.background = 'none';\n      });\n    },\n    \n    // 移动到下一个字符\n    moveToNextChar: function() {\n      // 将当前字符标记为已读\n      this.readIndices.add(this.currentIndex);\n      \n      // 移动到下一个非空白字符\n      do {\n        this.currentIndex++;\n        \n        // 检查是否到达末尾\n        if (this.currentIndex >= this.charElements.length) {\n          console.log(\"【节奏阅读】已到达页尾，尝试翻页\");\n          \n          // 尝试点击下一页按钮\n          if (!this.clickNextPageButton()) {\n            // 如果没有找到下一页按钮，完全停止阅读\n            this.stop();\n          }\n          return;\n        }\n      } while (\n        this.currentIndex < this.charElements.length && \n        this.charElements[this.currentIndex] && \n        this.charElements[this.currentIndex].dataset.whitespace === 'true'\n      );\n      \n      // 更新颜色\n      this.updateTextColors();\n      \n      // 滚动到当前字符\n      this.scrollToCurrentChar();\n    },\n    \n    // 尝试自动翻页\n    clickNextPageButton: function() {\n      console.log(\"【节奏阅读】尝试查找并点击下一页按钮\");\n      \n      // 尝试多种可能的选择器来找到下一页按钮\n      const nextPageSelectors = [\n        'button.next-page', \n        'button[aria-label=\"下一页\"]',\n        'a.next-page',\n        'a[aria-label=\"下一页\"]',\n        '.next-page',\n        '#next-page',\n        'button.next',\n        'a.next'\n      ];\n      \n      let nextPageButton = null;\n      \n      // 尝试通过选择器找到按钮\n      for (const selector of nextPageSelectors) {\n        try {\n          const elements = document.querySelectorAll(selector);\n          for (const el of elements) {\n            if (el.offsetParent !== null) { // 检查元素是否可见\n              console.log(`【节奏阅读】找到下一页按钮: ${selector}`);\n              nextPageButton = el;\n              break;\n            }\n          }\n          if (nextPageButton) break;\n        } catch (e) {\n          // 某些选择器可能不被支持，忽略错误\n        }\n      }\n      \n      // 如果没找到，尝试按文本内容查找\n      if (!nextPageButton) {\n        const buttons = document.querySelectorAll('button, a, div[role=\"button\"]');\n        for (const button of buttons) {\n          const text = button.textContent.trim().toLowerCase();\n          if ((text.includes('下一页') || text.includes('next') || text === '>' || text === '→') && \n              button.offsetParent !== null) {\n            console.log(`【节奏阅读】通过文本内容找到下一页按钮: ${text}`);\n            nextPageButton = button;\n            break;\n          }\n        }\n      }\n      \n      if (nextPageButton) {\n        console.log(\"【节奏阅读】模拟点击下一页按钮\");\n        \n        // 保存状态\n        setLocalStorage('rhythmReadingActive', 'true');\n        setLocalStorage('rhythmReadingPending', 'true');\n        \n        // 恢复原始文本（准备翻页）\n        this.restoreOriginalText();\n        \n        // 停止计时器\n        if (this.intervalId) {\n          clearInterval(this.intervalId);\n          this.intervalId = null;\n        }\n        \n        // 模拟点击\n        nextPageButton.click();\n        \n        return true;\n      } else {\n        console.log(\"【节奏阅读】未找到下一页按钮\");\n        return false;\n      }\n    },\n    \n    // 滚动到当前字符\n    scrollToCurrentChar: function() {\n      const span = this.charElements[this.currentIndex];\n      if (!span) return;\n      \n      const rect = span.getBoundingClientRect();\n      const contentContainer = document.querySelector('.page-content');\n      \n      // 估计行高\n      const lineHeight = parseInt(window.getComputedStyle(span).lineHeight) || \n                         Math.max(20, rect.height * 1.5);\n      \n      // 确定滚动容器\n      const isContainerScrollable = contentContainer && \n        contentContainer.scrollHeight > contentContainer.clientHeight &&\n        ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n      \n      if (isContainerScrollable) {\n        // 容器滚动\n        const containerRect = contentContainer.getBoundingClientRect();\n        const relativeTop = rect.top - containerRect.top + contentContainer.scrollTop;\n        \n        const visibleTop = contentContainer.scrollTop;\n        const visibleBottom = visibleTop + contentContainer.clientHeight;\n        \n        if (relativeTop < visibleTop + lineHeight || relativeTop > visibleBottom - lineHeight) {\n          contentContainer.scrollBy({\n            top: lineHeight * 2 * (relativeTop > visibleBottom - lineHeight ? 1 : -1),\n            behavior: 'smooth'\n          });\n        }\n      } else {\n        // 窗口滚动\n        const viewportTop = window.scrollY;\n        const viewportBottom = viewportTop + window.innerHeight;\n        const absoluteTop = rect.top + window.scrollY;\n        \n        if (absoluteTop < viewportTop + lineHeight || absoluteTop > viewportBottom - lineHeight) {\n          window.scrollBy({\n            top: lineHeight * 2 * (absoluteTop > viewportBottom - lineHeight ? 1 : -1),\n            behavior: 'smooth'\n          });\n        }\n      }\n    },\n    \n    // 添加速度滑块\n    addSpeedSlider: function() {\n      let slider = document.getElementById('rhythm-speed-slider');\n      if (slider) slider.remove();\n      \n      const container = document.createElement('div');\n      container.id = 'rhythm-speed-slider';\n      container.style.position = 'fixed';\n      container.style.top = '70px';\n      container.style.right = '20px';\n      container.style.backgroundColor = 'white';\n      container.style.padding = '10px';\n      container.style.borderRadius = '5px';\n      container.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';\n      container.style.zIndex = '10000';\n      container.style.display = 'flex';\n      container.style.alignItems = 'center';\n      container.style.maxWidth = '300px';\n      \n      const label = document.createElement('label');\n      label.textContent = '速度: ';\n      label.style.marginRight = '8px';\n      container.appendChild(label);\n      \n      const input = document.createElement('input');\n      input.type = 'range';\n      input.min = '50';\n      input.max = '1000';\n      input.step = '50';\n      input.value = this.speed;\n      input.style.width = '120px';\n      \n      const valueDisplay = document.createElement('span');\n      valueDisplay.textContent = `${this.speed}ms`;\n      valueDisplay.style.marginLeft = '8px';\n      valueDisplay.style.minWidth = '60px';\n      \n      const self = this;\n      input.addEventListener('input', function() {\n        const newSpeed = parseInt(this.value);\n        self.speed = newSpeed;\n        valueDisplay.textContent = `${newSpeed}ms`;\n        \n        if (self.intervalId) {\n          clearInterval(self.intervalId);\n          self.intervalId = setInterval(() => self.moveToNextChar(), newSpeed);\n        }\n      });\n      \n      container.appendChild(input);\n      container.appendChild(valueDisplay);\n      document.body.appendChild(container);\n    },\n    \n    // 恢复原始文本\n    restoreOriginalText: function() {\n      // 获取所有已创建的字符span\n      const charSpans = document.querySelectorAll('.rhythm-char');\n      \n      // 按父节点分组\n      const parentNodeMap = new Map();\n      \n      charSpans.forEach(span => {\n        const parent = span.parentNode;\n        if (!parent) return;\n        \n        if (!parentNodeMap.has(parent)) {\n          parentNodeMap.set(parent, []);\n        }\n        parentNodeMap.get(parent).push(span);\n      });\n      \n      // 对每个父节点，将连续的字符span合并回文本节点\n      parentNodeMap.forEach((spans, parent) => {\n        if (spans.length === 0) return;\n        \n        // 排序spans确保顺序正确\n        spans.sort((a, b) => {\n          const indexA = parseInt(a.dataset.rhythmIndex || '0');\n          const indexB = parseInt(b.dataset.rhythmIndex || '0');\n          return indexA - indexB;\n        });\n        \n        // 根据连续性分组\n        const groups = [];\n        if (spans.length > 0) {\n          let currentGroup = [spans[0]];\n          \n          for (let i = 1; i < spans.length; i++) {\n            const prevIndex = parseInt(spans[i-1].dataset.rhythmIndex || '0');\n            const currentIndex = parseInt(spans[i].dataset.rhythmIndex || '0');\n            \n            if (currentIndex === prevIndex + 1 && spans[i].previousSibling === spans[i-1]) {\n              currentGroup.push(spans[i]);\n            } else {\n              groups.push(currentGroup);\n              currentGroup = [spans[i]];\n            }\n          }\n          \n          groups.push(currentGroup);\n        }\n        \n        // 对每个连续组替换为文本节点\n        groups.forEach(group => {\n          if (group.length === 0) return;\n          \n          try {\n            const text = group.map(span => span.textContent).join('');\n            const textNode = document.createTextNode(text);\n            \n            // 替换第一个span，然后移除其余的\n            if (group[0].parentNode === parent) {\n              parent.replaceChild(textNode, group[0]);\n              for (let i = 1; i < group.length; i++) {\n                if (group[i].parentNode === parent) {\n                  parent.removeChild(group[i]);\n                }\n              }\n            }\n          } catch (e) {\n            console.error(\"【节奏阅读】恢复文本时出错:\", e);\n          }\n        });\n      });\n      \n      // 清除字符元素数组\n      this.charElements = [];\n    }\n  };\n  \n  // 暴露到全局，以便调试和直接调用\n  window.rhythmReader = rhythmReader;\n  \n  // 直接挂钩到可能的下拉选择器\n  console.log(\"【节奏阅读】寻找并挂钩阅读模式选择器...\");\n  \n  // 尝试查找可能的下拉选择器\n  const selectors = [\n    'select[name=\"readingMode\"]',\n    'select.reading-mode',\n    'select#reading-mode',\n    'select[aria-label=\"阅读模式\"]',\n    '.reading-mode-selector'\n  ];\n  \n  let foundSelector = false;\n  \n  for (const selector of selectors) {\n    const elements = document.querySelectorAll(selector);\n    for (const element of elements) {\n      console.log(`【节奏阅读】找到可能的阅读模式选择器: ${selector}`);\n      element.addEventListener('change', function() {\n        const value = this.value.toLowerCase();\n        console.log(`【节奏阅读】阅读模式选择变更为: ${value}`);\n        \n        if (value.includes('rhythm') || value.includes('节奏')) {\n          console.log(\"【节奏阅读】检测到选择了节奏阅读模式\");\n          rhythmReader.start();\n        } else {\n          if (rhythmReader.active) {\n            rhythmReader.stop();\n          }\n        }\n      });\n      foundSelector = true;\n    }\n  }\n  \n  // 重写handleReadingModeChange函数\n  if (typeof window.handleReadingModeChange === 'function') {\n    console.log(\"【节奏阅读】检测到现有的handleReadingModeChange函数，重写它\");\n    \n    const originalReadingModeChanged = window.handleReadingModeChange;\n    \n    window.handleReadingModeChange = function(mode) {\n      console.log(`【节奏阅读】handleReadingModeChange被调用，模式: ${mode}`);\n      \n      // 调用原始函数\n      originalReadingModeChanged(mode);\n      \n      // 添加我们的处理逻辑\n      if (mode === 'rhythm' || mode === 'rhythmReading' || \n          (typeof mode === 'string' && (mode.includes('rhythm') || mode.includes('节奏')))) {\n        console.log(\"【节奏阅读】检测到选择了节奏阅读模式\");\n        rhythmReader.start();\n      } else {\n        if (rhythmReader.active) {\n          rhythmReader.stop();\n        }\n      }\n    };\n    \n    foundSelector = true;\n  }\n  \n  if (!foundSelector) {\n    console.warn(\"【节奏阅读】警告: 未找到可能的阅读模式选择器\");\n    console.log(\"【节奏阅读】可以通过调用 window.rhythmReader.start() 手动启动\");\n  }\n  \n  // 监听页面加载完成事件 - 页面变化后自动恢复\n  function setupPageLoadListener() {\n    // 当DOM内容加载完成\n    document.addEventListener('DOMContentLoaded', function() {\n      checkAndRestoreReading();\n    });\n    \n    // 当页面完全加载\n    window.addEventListener('load', function() {\n      checkAndRestoreReading();\n    });\n    \n    // 监听DOM变化\n    const observer = new MutationObserver(function(mutations) {\n      if (getLocalStorage('rhythmReadingPending') === 'true') {\n        const contentChanges = mutations.filter(m => \n          m.type === 'childList' && m.addedNodes.length > 0);\n          \n        if (contentChanges.length > 0) {\n          console.log(\"【节奏阅读】检测到DOM变化，且有待处理的阅读恢复\");\n          checkAndRestoreReading();\n        }\n      }\n    });\n    \n    // 观察body变化\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n    \n    // 检查并恢复阅读\n    function checkAndRestoreReading() {\n      if (getLocalStorage('rhythmReadingActive') === 'true' && \n          getLocalStorage('rhythmReadingPending') === 'true') {\n        \n        console.log(\"【节奏阅读】页面加载/变化后，尝试恢复阅读\");\n        setLocalStorage('rhythmReadingPending', 'false');\n        \n        // 给页面一点时间完全渲染\n        setTimeout(function() {\n          rhythmReader.start();\n        }, 800);\n      }\n    }\n  }\n  \n  // 设置页面加载监听器\n  setupPageLoadListener();\n  \n  // 检查是否需要立即恢复阅读状态\n  if (getLocalStorage('rhythmReadingActive') === 'true') {\n    console.log(\"【节奏阅读】检测到之前的阅读状态，准备恢复\");\n    setLocalStorage('rhythmReadingPending', 'false'); // 清除待处理标记\n    \n    // 给页面一点时间渲染\n    setTimeout(function() {\n      rhythmReader.start();\n    }, 800);\n  }\n  \n  console.log(\"【节奏阅读】初始化完成\");\n})();\n\nconst App = () => {\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  const [isTableOfContents, setIsTableOfContents] = useState(false);\n  \n  // 实现缺失的函数\n  // 应用深色背景\n  const applyDarkBackground = () => {\n    document.body.classList.add('dark-background');\n    \n    // 添加必要的CSS样式\n    if (!document.getElementById('dark-background-style')) {\n      const style = document.createElement('style');\n      style.id = 'dark-background-style';\n      style.textContent = `\n        .dark-background {\n          background-color: #000 !important;\n        }\n        .dark-background .sidebar {\n          background: linear-gradient(145deg, #4834d4, #341f9e) !important;\n        }\n        .dark-background .page-content {\n          background-color: #000 !important;\n        }\n        .dark-background .main-content {\n          background-color: #000 !important;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 恢复正常背景\n  const restoreDarkBackground = () => {\n    document.body.classList.remove('dark-background');\n  };\n  \n  // 添加裸眼3D样式\n  const addNakedEye3DStyles = () => {\n    if (!document.getElementById('naked-eye-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'naked-eye-3d-style';\n      style.textContent = `\n        .naked-eye-3d-container {\n          position: relative;\n          perspective: 800px;\n          width: 100%;\n        }\n        \n        .naked-eye-3d-text {\n          display: inline-block;\n          animation: float 3s ease-in-out infinite;\n          text-shadow: 0 0 5px rgba(255,255,255,0.3);\n          padding: 0 4px;\n          color: white;\n          filter: drop-shadow(0 0 5px rgba(120, 220, 255, 0.6));\n        }\n        \n        @keyframes float {\n          0% { transform: translateZ(0px); }\n          50% { transform: translateZ(20px); }\n          100% { transform: translateZ(0px); }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 添加舒适3D样式\n  const addComfortable3DStyles = () => {\n    if (!document.getElementById('comfortable-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'comfortable-3d-style';\n      style.textContent = `\n        .emboss-3d-text {\n          color: #fff;\n          text-shadow: \n            1px 1px 1px rgba(0,0,0,0.5),\n            -1px -1px 1px rgba(255,255,255,0.5);\n          letter-spacing: 1.5px;\n          font-weight: 500;\n        }\n        \n        .float-3d-text {\n          display: inline-block;\n          transform-style: preserve-3d;\n          transform: perspective(500px) translateZ(10px);\n          text-shadow: 0 2px 5px rgba(0,0,0,0.5);\n        }\n        \n        .gradient-3d-text {\n          display: inline-block;\n          background: linear-gradient(to bottom, #fff, #aaa);\n          -webkit-background-clip: text;\n          -webkit-text-fill-color: transparent;\n          text-shadow: 0 2px 4px rgba(0,0,0,0.3);\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 添加闪读样式\n  const addFlashReadingStyles = () => {\n    if (!document.getElementById('flash-reading-style')) {\n      const style = document.createElement('style');\n      style.id = 'flash-reading-style';\n      style.textContent = `\n        .flash-reading-container {\n          position: relative;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          z-index: 1000;\n          padding: 20px;\n        }\n        \n        .flash-reading-display-wrapper {\n          position: relative;\n          margin: 40px 0;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        \n        .flash-reading-display {\n          font-size: 36px;\n          font-weight: bold;\n          text-align: center;\n          color: white;\n          min-height: 80px;\n          max-width: 90%;\n          padding: 20px 40px;\n          position: relative; /* 允许绝对定位的覆盖层 */\n          z-index: 2;\n        }\n        \n        .flash-reading-cover {\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(128, 128, 128, 0.6); /* 灰色遮罩 */\n          border-radius: 8px;\n          z-index: 1; /* 确保在文本后面 */\n        }\n        \n        .flash-reading-controls {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          gap: 20px;\n          margin-bottom: 20px;\n          width: 100%;\n        }\n        \n        .flash-reading-buttons {\n          display: flex;\n          gap: 10px;\n          flex-wrap: wrap;\n          justify-content: center;\n        }\n        \n        .flash-reading-speed {\n          display: flex;\n          align-items: center;\n          color: white;\n          width: 80%;\n          max-width: 400px;\n          gap: 10px;\n        }\n        \n        .flash-reading-slider {\n          flex: 1;\n          height: 8px;\n          appearance: none;\n          background: #555;\n          border-radius: 4px;\n          outline: none;\n        }\n        \n        .flash-reading-slider::-webkit-slider-thumb {\n          appearance: none;\n          width: 20px;\n          height: 20px;\n          border-radius: 50%;\n          background: #6c5ce7;\n          cursor: pointer;\n        }\n        \n        .flash-reading-btn {\n          padding: 10px 20px;\n          border: none;\n          border-radius: 4px;\n          background-color: #6c5ce7;\n          color: white;\n          font-size: 16px;\n          cursor: pointer;\n          transition: background-color 0.2s;\n        }\n        \n        .flash-reading-btn:hover {\n          background-color: #5344c0;\n        }\n        \n        .flash-reading-btn:disabled {\n          background-color: #aaa;\n          cursor: not-allowed;\n        }\n        \n        .flash-reading-progress {\n          color: white;\n          font-size: 14px;\n          margin-top: 10px;\n        }\n        .flash-reading-speed-note {\n          font-size: 12px;\n          color: #ccc;\n          margin-left: 5px;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 初始化闪读模式\n  const initializeFlashReading = () => {\n    // 添加样式\n    addFlashReadingStyles();\n    \n    const sentences = window.flashReadingSentences;\n    if (!sentences || !Array.isArray(sentences) || sentences.length === 0) {\n      console.error('闪读模式: 未找到句子数据');\n      return;\n    }\n    \n    // 获取全局UI元素\n    const display = document.getElementById('flash-reading-display');\n    const speedSlider = document.getElementById('flash-reading-speed');\n    const speedValue = document.getElementById('flash-reading-speed-value');\n    const playButton = document.getElementById('flash-reading-play');\n    const pauseButton = document.getElementById('flash-reading-pause');\n    const stopButton = document.getElementById('flash-reading-stop');\n    const prevButton = document.getElementById('flash-reading-prev-sentence');\n    const nextButton = document.getElementById('flash-reading-next-sentence');\n    const progress = document.getElementById('flash-reading-progress');\n    const cover = document.querySelector('.flash-reading-cover');\n    \n    if (!display || !speedSlider || !speedValue || !playButton || !pauseButton || !stopButton || !prevButton || !nextButton || !progress || !cover) {\n      console.error('闪读模式: 未找到UI元素');\n      return;\n    }\n    \n    // 创建闪读控制器\n    window.flashReader = {\n      sentences: sentences,\n      currentIndex: 0,\n      interval: null,\n      speed: parseInt(speedSlider.value),\n      isPlaying: false,\n      \n      // 开始闪读\n      start() {\n        if (this.interval) {\n          clearInterval(this.interval);\n        }\n        \n        this.isPlaying = true;\n        playButton.disabled = true;\n        pauseButton.disabled = false;\n        progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        \n        // 显示当前句子\n        this.displayCurrentSentence();\n        \n        // 设置闪读间隔\n        this.interval = setInterval(() => {\n          this.currentIndex++;\n          \n          if (this.currentIndex >= this.sentences.length) {\n            this.stop();\n            display.textContent = '阅读完成';\n            return;\n          }\n          \n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }, this.speed);\n      },\n      \n      // 显示当前句子\n      displayCurrentSentence() {\n        if (this.currentIndex < this.sentences.length) {\n          const currentSentence = this.sentences[this.currentIndex];\n          display.textContent = currentSentence;\n          display.style.color = 'white'; // 确保文本为白色\n          \n          // 调整背景以适应内容\n          setTimeout(() => {\n            const displayRect = display.getBoundingClientRect();\n            // 确保覆盖层完全包裹文本\n            cover.style.width = `${displayRect.width}px`;\n            cover.style.height = `${displayRect.height}px`;\n          }, 10);\n        }\n      },\n      \n      // 暂停闪读\n      pause() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        \n        this.isPlaying = false;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n      },\n      \n      // 停止闪读\n      stop() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        \n        this.isPlaying = false;\n        this.currentIndex = 0;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n        \n        display.textContent = '准备开始';\n        progress.textContent = `进度：0 / ${this.sentences.length}`; // 重置进度\n      },\n      \n      // 更新速度\n      updateSpeed(newSpeed) {\n        this.speed = newSpeed;\n        speedValue.textContent = `${newSpeed} ms`;\n        \n        // 保存速度设置到本地存储\n        localStorage.setItem('flash-reading-speed', newSpeed);\n        \n        // 如果正在播放，重新开始以应用新速度\n        if (this.isPlaying) {\n          clearInterval(this.interval);\n          this.start(); // 直接调用start方法重新开始\n        }\n      },\n\n      // 返回上一句\n      prevSentence() {\n        if (this.currentIndex > 0) {\n          this.currentIndex--;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n\n      // 跳到下一句\n      nextSentence() {\n        if (this.currentIndex < this.sentences.length - 1) {\n          this.currentIndex++;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n\n      // 清理资源\n      cleanup() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        this.currentIndex = 0;\n      }\n    };\n    \n    // 添加事件监听器\n    playButton.addEventListener('click', () => {\n      window.flashReader.start();\n    });\n    \n    pauseButton.addEventListener('click', () => {\n      window.flashReader.pause();\n    });\n    \n    stopButton.addEventListener('click', () => {\n      window.flashReader.stop();\n    });\n    \n    speedSlider.addEventListener('input', (e) => {\n      const newSpeed = parseInt(e.target.value);\n      window.flashReader.updateSpeed(newSpeed);\n    });\n\n    prevButton.addEventListener('click', () => {\n      window.flashReader.prevSentence();\n    });\n\n    nextButton.addEventListener('click', () => {\n      window.flashReader.nextSentence();\n    });\n    \n    // 初始化\n    const savedSpeed = localStorage.getItem('flash-reading-speed');\n    const initialSpeed = savedSpeed ? parseInt(savedSpeed) : 1000;\n    speedSlider.value = initialSpeed;\n    window.flashReader.updateSpeed(initialSpeed);\n    \n    console.log('闪读模式已初始化，共 ' + sentences.length + ' 个句子');\n  };\n  \n  // 创建闪读内容\n  const createFlashReadingContent = (text) => {\n    return `<div class=\"flash-reading-content\">\n      <p>${text}</p>\n    </div>`;\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 格式化文本用于鼠标跟随\n  const formatTextForMouseFollow = (text) => {\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个单词添加span，以便于添加高亮效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"follow-word\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\" data-follow=\"true\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用静态高亮\n  const applyStaticHighlight = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为单词随机添加颜色高亮\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      let lastColor = null;\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n          return;\n        }\n        \n        // 随机决定是否高亮和使用哪种颜色\n        if (Math.random() < 0.7) {\n          let color;\n          if (lastColor === 'red') {\n            color = 'blue';\n          } else if (lastColor === 'blue') {\n            color = 'red';\n          } else {\n            color = Math.random() < 0.5 ? 'red' : 'blue';\n          }\n          lastColor = color;\n          \n          processedParagraph += `<span class=\"highlight-word ${color}\">${word}</span>`;\n        } else {\n          processedParagraph += word;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用裸眼3D效果\n  const applyNakedEye3dEffect = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content naked-eye-3d-container\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个词添加3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"naked-eye-3d-text\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用舒适3D效果\n  const applyComfortable3dEffect = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个词随机应用不同的3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          \n          processedParagraph += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 初始化裸眼3D\n  const initializeNakedEye3D = () => {\n    // 为裸眼3D文本添加动画\n    const textElements = document.querySelectorAll('.naked-eye-3d-text');\n    textElements.forEach((element, index) => {\n      // 添加随机延迟，使动画错开\n      const delay = Math.random() * 2;\n      element.style.animationDelay = `${delay}s`;\n    });\n  };\n\n  // 初始化节奏阅读\n  const initializeRhythmReading = () => {\n    if (window.rhythmReader && typeof window.rhythmReader.initializeTextNodes === 'function') {\n      window.rhythmReader.initializeTextNodes();\n    }\n  };\n  \n  // 启动节奏阅读\n  const startRhythmReading = () => {\n    if (window.rhythmReader && typeof window.rhythmReader.start === 'function') {\n      window.rhythmReader.start();\n    }\n  };\n\n  // 添加鼠标跟随监听器\n  const addMouseFollowListeners = () => {\n    // 获取内容容器\n    const contentArea = document.querySelector('.mouse-follow-content');\n    if (!contentArea) {\n      console.error('未找到鼠标跟随内容区域');\n      return;\n    }\n    \n    // 上一个高亮的行\n    let lastHighlightedLine = null;\n    \n    // 监听鼠标移动 - 精确的行检测\n    const mouseMoveHandler = (e) => {\n      // 获取鼠标位置\n      const mouseY = e.clientY;\n      \n      // 获取所有行\n      const allLines = contentArea.querySelectorAll('.follow-line');\n      let foundLine = null;\n      let minDistance = Infinity;\n      \n      // 寻找鼠标所在的精确行\n      allLines.forEach(line => {\n        const rect = line.getBoundingClientRect();\n        const lineCenter = rect.top + rect.height / 2;\n        const distance = Math.abs(mouseY - lineCenter);\n        \n        // 如果鼠标在行范围内，计算到行中心的距离\n        if (mouseY >= rect.top && mouseY <= rect.bottom) {\n          if (distance < minDistance) {\n            minDistance = distance;\n            foundLine = line;\n          }\n        }\n      });\n      \n      // 更新高亮状态\n      if (lastHighlightedLine && lastHighlightedLine !== foundLine) {\n        // 移除旧高亮\n        lastHighlightedLine.classList.remove('highlighted');\n      }\n      \n      if (foundLine) {\n        // 添加新高亮\n        foundLine.classList.add('highlighted');\n        lastHighlightedLine = foundLine;\n        \n        // 调试输出\n        console.log('当前高亮行:', foundLine.textContent.substring(0, 30) + '...');\n      } else if (lastHighlightedLine) {\n        // 如果没有找到新行，且有上一个高亮行，移除它\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n    \n    // 鼠标离开处理\n    const mouseLeaveHandler = () => {\n      // 清除当前高亮\n      if (lastHighlightedLine) {\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n    \n    // 存储处理函数引用\n    window.eventTracker = window.eventTracker || { mouseFollowHandlers: [] };\n    window.eventTracker.mouseFollowHandlers.push(\n      { element: contentArea, event: 'mousemove', handler: mouseMoveHandler },\n      { element: contentArea, event: 'mouseleave', handler: mouseLeaveHandler }\n    );\n    \n    // 添加事件监听器\n    contentArea.addEventListener('mousemove', mouseMoveHandler);\n    contentArea.addEventListener('mouseleave', mouseLeaveHandler);\n    \n    console.log('改进的鼠标跟随监听器已初始化');\n  };\n  \n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n  }, []);\n  \n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async (file) => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      \n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n      \n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n      \n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n  \n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({ scale: 1.0 });\n      \n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      \n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      \n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async (textContent) => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n    \n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n    \n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n    \n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    \n    const lines = [...lineMap.values()];\n    \n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    \n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    \n    return hasTocKeywords || hasPageNumberPatterns || (shortLineRatio > 0.7 && numberLineRatio > 0.3);\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n    \n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    \n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n      \n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n      \n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n      \n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    \n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && \n              x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = (text) => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    \n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      \n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        \n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    \n    return result;\n  };\n\n  // 处理内容页面 - 按句子划分段落\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      \n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n      // 按句子划分内容（句号、问号、感叹号等作为分隔符）\n      const sentences = splitIntoSentences(extractedText);\n      \n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch(mode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          // 使用ADHD友好的静态高亮处理\n          console.log('应用ADHD友好的静态高亮模式');\n          processedContent = formatSimpleHighlightedText(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'rhythm':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          processedContent = createFlashReadingContentFromSentences(sentences);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n      \n      setContent(processedContent);\n      \n      // 如果是静态高亮模式，添加延时验证检查\n      if (mode === 'static') {\n        setTimeout(() => {\n          const contentArea = document.querySelector('.adhd-highlight-mode');\n          if (contentArea) {\n            console.log('静态高亮模式元素存在');\n            const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n            console.log(`找到 ${paragraphs.length} 个段落`);\n            \n            // 检查样式是否正确应用\n            if (paragraphs.length > 0) {\n              const firstPara = paragraphs[0];\n              const styles = window.getComputedStyle(firstPara);\n              console.log('段落应用的样式:', {\n                color: styles.color,\n                backgroundColor: styles.backgroundColor,\n                fontFamily: styles.fontFamily,\n                fontSize: styles.fontSize\n              });\n            }\n          }\n        }, 200);\n      }\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 将文本分割成句子\n  const splitIntoSentences = (text) => {\n    // 匹配句号、问号、感叹号后跟空格或结束的模式\n    // 支持中英文标点符号\n    const sentenceRegex = /([.!?。！？；;]+\\s*)/g;\n    \n    // 分割文本成句子\n    const sentences = [];\n    let lastIndex = 0;\n    let match;\n    \n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const sentence = text.substring(lastIndex, endIndex).trim();\n      \n      // 避免添加空句子\n      if (sentence) {\n        sentences.push(sentence);\n      }\n      \n      lastIndex = endIndex;\n    }\n    \n    // 处理最后一部分（如果没有以句号等结尾）\n    if (lastIndex < text.length) {\n      const lastSentence = text.substring(lastIndex).trim();\n      if (lastSentence) {\n        sentences.push(lastSentence);\n      }\n    }\n    \n    return sentences;\n  };\n\n  // 专门为闪读模式分割文本，以任意标点符号为分隔点\n  const splitIntoFlashReadingSegments = (text) => {\n    // 匹配任意标点符号包括中英文标点\n    const sentenceRegex = /([,.!?:;，。！？：；、]+\\s*)/g;\n    \n    // 分割文本成短句\n    const segments = [];\n    let lastIndex = 0;\n    let match;\n    \n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const segment = text.substring(lastIndex, endIndex).trim();\n      \n      // 避免添加空段落\n      if (segment) {\n        segments.push(segment);\n      }\n      \n      lastIndex = endIndex;\n    }\n    \n    // 处理最后一部分（如果没有以标点符号结尾）\n    if (lastIndex < text.length) {\n      const lastSegment = text.substring(lastIndex).trim();\n      if (lastSegment) {\n        segments.push(lastSegment);\n      }\n    }\n    \n    return segments;\n  };\n\n  // 格式化句子为HTML\n  const formatSentencesToHtml = (sentences) => {\n    let html = '<div class=\"pdf-content\">';\n    \n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${sentence}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为句子应用静态高亮\n  const applyStaticHighlightToSentences = (sentences) => {\n    let html = '<div class=\"pdf-content adhd-content\">';\n    \n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      \n      // 简单地为句子添加特定样式的class\n      html += `<p class=\"pdf-paragraph adhd-sentence\">${sentence}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为鼠标跟随模式格式化句子\n  const formatSentencesForMouseFollow = (sentences) => {\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    sentences.forEach((sentence, index) => {\n      if (sentence.trim() === '') return;\n      \n      // 每个句子作为独立行，使用div而不是p标签\n      html += `<div class=\"follow-line\" data-line=\"${index}\" data-sentence=\"${sentence.substring(0, 20)}...\" style=\"color: inherit;\">${sentence}</div>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为舒适3D模式格式化句子\n  const applyComfortable3dEffectToSentences = (sentences) => {\n    let html = '<div class=\"pdf-content\">';\n    \n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      \n      // 为每个词随机应用不同的3D效果\n      const words = sentence.split(/(\\s+)/);\n      let processedSentence = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedSentence += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          \n          processedSentence += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedSentence}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为闪读模式创建内容\n  const createFlashReadingContentFromSentences = (sentences) => {\n    // 储存句子到全局变量，用于后续显示\n    window.flashReadingSentences = sentences;\n\n    // 返回闪读界面的HTML结构\n    return `\n      <div class=\"flash-reading-container\">\n        <div class=\"flash-reading-controls\">\n          <div class=\"flash-reading-buttons\">\n            <button id=\"flash-reading-prev-sentence\" class=\"flash-reading-btn\">上一句</button>\n            <button id=\"flash-reading-play\" class=\"flash-reading-btn\">开始</button>\n            <button id=\"flash-reading-pause\" class=\"flash-reading-btn\" disabled>暂停</button>\n            <button id=\"flash-reading-stop\" class=\"flash-reading-btn\">停止</button>\n            <button id=\"flash-reading-next-sentence\" class=\"flash-reading-btn\">下一句</button>\n          </div>\n          <div class=\"flash-reading-speed\">\n            <span>速度：</span>\n            <input type=\"range\" id=\"flash-reading-speed\" min=\"300\" max=\"1700\" step=\"50\" value=\"1000\" class=\"flash-reading-slider\">\n            <span id=\"flash-reading-speed-value\">1000 ms</span>\n            <span class=\"flash-reading-speed-note\">（数值越小，切换越快）</span>\n          </div>\n          <div class=\"flash-reading-progress\">\n            <span id=\"flash-reading-progress\">进度：0 / ${sentences.length}</span>\n          </div>\n        </div>\n        <div class=\"flash-reading-display-wrapper\">\n          <div class=\"flash-reading-cover\"></div> <!-- 这里是闪卡 -->\n          <div id=\"flash-reading-display\" class=\"flash-reading-display\">准备开始</div>\n        </div>\n      </div>`;\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async (file) => {\n    try {\n      const text = await file.text();\n      \n      // 根据阅读模式选择不同的处理方式\n      let processedContent = '';\n      \n      if (readingMode === 'flash-reading') {\n        // 闪读模式下使用特定的分割函数\n        const segments = splitIntoFlashReadingSegments(text);\n        processedContent = createFlashReadingContentFromSentences(segments);\n        \n        // 初始化闪读模式\n        setTimeout(() => {\n          initializeFlashReading();\n        }, 100);\n      } else {\n        // 其他模式使用默认的分割方式\n        const sentences = splitIntoSentences(text);\n        \n        switch(readingMode) {\n          case 'normal':\n            processedContent = formatSentencesToHtml(sentences);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlightToSentences(sentences);\n            break;\n          case 'follow-mouse':\n            processedContent = formatSentencesForMouseFollow(sentences);\n            break;\n          case 'comfortable-3d':\n            processedContent = applyComfortable3dEffectToSentences(sentences);\n            break;\n          default:\n            processedContent = formatSentencesToHtml(sentences);\n        }\n      }\n      \n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n      \n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setContent('<div class=\"error-message\">TXT文件处理失败</div>');\n    }\n  };\n\n  // 处理Markdown文件\n  const handleMarkdownFile = async (file) => {\n    try {\n      const text = await file.text();\n      \n      // 使用marked库转换markdown为HTML\n      let html = '';\n      try {\n        if (window.marked) {\n          html = window.marked.parse(text);\n        } else {\n          // 如果没有marked库，简单地拆分为段落\n          html = `<div>${text.split(\"\\n\\n\").map(p => `<p>${p}</p>`).join(\"\")}</div>`;\n        }\n      } catch (parseError) {\n        console.error('Markdown解析错误:', parseError);\n        html = `<div>${text}</div>`;\n      }\n      \n      // 提取纯文本内容\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = html;\n      const plainText = tempDiv.textContent || tempDiv.innerText || '';\n      \n      // 分割文本为句子\n      const sentences = splitIntoSentences(plainText);\n      \n      // 根据当前阅读模式处理内容\n      let processedContent = '';\n      switch(readingMode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlightToSentences(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          // 使用特定的闪读分割函数重新处理文本\n          const segments = splitIntoFlashReadingSegments(plainText);\n          processedContent = createFlashReadingContentFromSentences(segments);\n          \n          // 初始化闪读模式\n          setTimeout(() => {\n            initializeFlashReading();\n          }, 100);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n      \n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n      \n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('Markdown处理错误:', error);\n      setContent('<div class=\"error-message\">Markdown文件处理失败</div>');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async (e) => {\n    const uploadedFile = e.target.files[0];\n    if (!uploadedFile) return;\n    \n    setLoading(true);\n    setFileName(uploadedFile.name);\n    \n    try {\n      if (uploadedFile.type === 'application/pdf') {\n        await handlePdfFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/plain' || uploadedFile.name.endsWith('.txt')) {\n        await handleTxtFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/markdown' || uploadedFile.name.endsWith('.md')) {\n        await handleMarkdownFile(uploadedFile);\n    } else {\n        setContent('<div class=\"error-message\">不支持的文件格式</div>');\n      }\n    } catch (error) {\n      console.error('处理文件时出错:', error);\n      setContent('<div class=\"error-message\">处理文件时出错</div>');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = (container) => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    \n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n      \n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n      \n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          \n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n          \n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width/2,  // 水平中心\n            y: rect.bottom,               // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n    \n    // 过滤无效位置并排序\n    return positions\n      .filter(p => p.char.trim() !== '')\n      .sort((a, b) => {\n        // 先按行排序，同行按列排序\n        const yDiff = a.y - b.y;\n        if (Math.abs(yDiff) > 5) { // 5px阈值判断是否同一行\n          return yDiff;\n        }\n        return a.x - b.x;\n      });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    \n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - (containerVisibleHeight / 2);\n      \n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - (window.innerHeight / 2);\n      \n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    \n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n    \n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    \n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n    \n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length || // 已到末尾\n          positions[nextIndex].char.trim() === '' || // 下一个是空白\n          positions[nextIndex].y > charPosition.y + 5) { // 下一个在新行\n        return true;\n      }\n    }\n    \n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n    \n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n      \n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || \n          current.y > prev.y + 5) { // 有明显换行\n        break;\n      }\n      \n      start--;\n    }\n    \n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n      \n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      \n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n      \n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      \n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (window.autoReader.charPositions.length === 0) {\n      if (window.currentPage < window.totalPages) {\n        window.changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 重置索引到开头\n    window.autoReader.currentIndex = 0;\n    \n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    \n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n    \n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n    \n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none';\n      highlight.style.zIndex = '998';\n      contentContainer.appendChild(highlight);\n    }\n    \n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight &&\n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n    \n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20;\n    \n    // 尝试获取实际行高\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(window.autoReader.charPositions[i].y - window.autoReader.charPositions[i-1].y);\n        if (yDiff > 5) {\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n    \n    // 记录上次滚动的位置\n    let lastScrolledY = -1;\n    const scrollSafeZone = lineHeight * 2.5;\n    \n    // 设置字符大小的估计值\n    let charWidth = 20;\n    let charHeight = lineHeight * 0.8;\n    \n    // 尝试估计字符宽度\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        if (window.autoReader.charPositions[i].x !== window.autoReader.charPositions[i-1].x) {\n          const xDiff = Math.abs(window.autoReader.charPositions[i].x - window.autoReader.charPositions[i-1].x);\n          if (xDiff > 0 && xDiff < 50) {\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    \n    window.autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (window.autoReader.currentIndex < window.autoReader.charPositions.length && \n             window.autoReader.charPositions[window.autoReader.currentIndex]?.char.trim() === '') {\n        window.autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (window.autoReader.currentIndex >= window.autoReader.charPositions.length) {\n        if (window.currentPage < window.totalPages) {\n          window.changePage(1);\n          clearInterval(window.autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n\n      const pos = window.autoReader.charPositions[window.autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      \n      if (cursor && highlight) {\n        const contentRect = contentContainer.getBoundingClientRect();\n        \n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        \n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        \n        highlight.style.left = `${relativeX - charWidth/2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n        \n        // 滚动处理\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        \n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          \n          if (isContainerScrollable) {\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n            \n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            \n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = relativeY;\n            }\n          } else {\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n            \n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            \n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      \n      window.autoReader.currentIndex++;\n      \n    }, window.autoReader.speed);\n    \n    // 在停止自动阅读时清除所有高亮\n    window.autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n      \n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n      \n      // 调用清理函数\n      if (window.autoReader.cleanup) {\n        window.autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n    \n    // 重置翻页状态\n    window.autoReader.isPageChanging = false;\n    \n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n    \n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n    \n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n    \n    // 收集字符位置\n    window.autoReader.charPositions = getAllCharacterPositions(content);\n    \n    // 如果当前页没有内容，尝试翻页\n    if (window.autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !window.autoReader.isPageChanging) {\n        window.autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async (e) => {\n    const newMode = e.target.value;\n    const prevMode = readingMode;\n    \n    console.log(`切换阅读模式: 从 ${prevMode} 到 ${newMode}`);\n    \n    // 更新状态\n    setReadingMode(newMode);\n    \n    // 如果有PDF文档和当前页，重新处理当前页内容\n    if (pdfDocument && currentPage > 0) {\n      try {\n        console.log('重新处理当前页面内容');\n        const page = await pdfDocument.getPage(currentPage);\n        \n        // 不使用任何额外处理，直接使用最原始的方式重新加载页面\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n        \n        // 根据当前模式设置内容\n        if (newMode === 'static') {\n          // 静态高亮模式 - 使用改进的句子处理\n          const html = formatSimpleHighlightedText(sentences);\n          console.log('设置静态高亮内容');\n          setContent(html);\n          \n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n        if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n              \n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n                \n                // 验证文字颜色\n                if (styles.color === 'rgb(51, 51, 51)' || styles.color === '#333333') {\n                  console.log('文字颜色正确应用');\n                } else {\n                  console.warn('文字颜色可能未正确应用:', styles.color);\n                }\n              }\n            } else {\n              console.error('未找到静态高亮模式内容区域');\n            }\n          }, 200);\n        } else if (newMode === 'flash-reading') {\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n            \n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n            \n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n            \n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n        } else {\n          // 其他模式保持不变\n          const handler = getContentHandlerForMode(newMode);\n          const processedContent = handler(sentences);\n          setContent(processedContent);\n        }\n      } catch (error) {\n        console.error('应用阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 首先确保移除鼠标跟随监听器\n    removeMouseFollowListeners();\n    \n    // 清理节奏阅读器\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    \n    // 清理闪读器\n    if (window.flashReader) {\n      window.flashReader.cleanup();\n    }\n    \n    // 清理舒适3D效果\n    const comfortable3DElements = document.querySelectorAll('.emboss-3d-text, .float-3d-text, .gradient-3d-text');\n    comfortable3DElements.forEach(el => el.remove());\n    \n    // 清理闪读模式元素\n    const flashReadingElements = document.querySelectorAll('.flash-reading-container, .flash-reading-display, .flash-reading-controls');\n    flashReadingElements.forEach(el => el.remove());\n    \n    // 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll(\n      '.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line, .rhythm-char'\n    );\n    highlights.forEach(el => {\n      if (el.parentNode) el.parentNode.removeChild(el);\n    });\n    \n    // 彻底替换内容区域以移除所有事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 先保存底部翻页控件\n      const bottomPagination = contentArea.querySelector('.bottom-pagination');\n      \n      // 深度克隆内容，但不克隆事件监听器\n      const contentHTML = contentArea.querySelector('div[dangerouslySetInnerHTML]')?.innerHTML || '';\n      const newContentArea = contentArea.cloneNode(false);\n      \n      // 创建新的内容容器\n      const newContentContainer = document.createElement('div');\n      newContentContainer.innerHTML = contentHTML;\n      newContentArea.appendChild(newContentContainer);\n      \n      // 如果有底部翻页控件，重新添加\n      if (bottomPagination && totalPages > 0) {\n        const newBottomPagination = bottomPagination.cloneNode(true);\n        // 重新绑定事件\n        const prevBtn = newBottomPagination.querySelector('.page-btn:first-child');\n        const nextBtn = newBottomPagination.querySelector('.page-btn:last-child');\n        if (prevBtn) prevBtn.onclick = () => changePage(-1);\n        if (nextBtn) nextBtn.onclick = () => changePage(1);\n        newContentArea.appendChild(newBottomPagination);\n      }\n      \n      if (contentArea.parentNode) {\n        contentArea.parentNode.replaceChild(newContentArea, contentArea);\n      }\n    }\n    \n    // 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 移除所有特殊标记和样式\n      paragraph.removeAttribute('data-follow');\n      paragraph.removeAttribute('style');\n      \n      // 清理特殊span标签\n      paragraph.innerHTML = paragraph.innerHTML\n        .replace(/<span class=\"text-line\"[^>]*>/g, '')\n        .replace(/<span class=\"rhythm-char\"[^>]*>/g, '')\n        .replace(/<span class=\"line-highlight[^\"]*\"[^>]*>/g, '')\n        .replace(/<span class=\"mouse-highlight[^\"]*\"[^>]*>/g, '')\n        .replace(/<\\/span>/g, '');\n    });\n    \n    // 移除特殊UI元素\n    const elementsToRemove = [\n      'rhythm-speed-slider',\n      'rhythm-notification'\n    ];\n    \n    elementsToRemove.forEach(id => {\n      const element = document.getElementById(id);\n      if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    });\n    \n    // 移除暗色背景\n    document.body.classList.remove('dark-background');\n    \n    // 清理闪读模式\n    if (window.flashReader && typeof window.flashReader.cleanup === 'function') {\n      window.flashReader.cleanup();\n    }\n  };\n\n  const handleAutoScroll = () => {\n    window.autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = (e) => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    \n    const rect = contentArea.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    \n    clearAllHighlights();\n    \n    const paragraphs = contentArea.querySelectorAll('p');\n    paragraphs.forEach(paragraph => {\n      const paragraphRect = paragraph.getBoundingClientRect();\n      const paragraphX = paragraphRect.left - rect.left;\n      const paragraphY = paragraphRect.top - rect.top;\n      \n      if (y >= paragraphY && y <= paragraphY + paragraphRect.height) {\n        const words = paragraph.querySelectorAll('span');\n        words.forEach(word => {\n          const wordRect = word.getBoundingClientRect();\n          const wordX = wordRect.left - rect.left;\n          \n          if (x >= wordX && x <= wordX + wordRect.width) {\n            word.classList.add('highlight');\n          }\n        });\n      }\n    });\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 专门用于移除鼠标跟随事件的函数\n  const removeMouseFollowListeners = () => {\n    // 移除记录的所有监听器\n    if (window.eventTracker && window.eventTracker.mouseFollowHandlers) {\n      window.eventTracker.mouseFollowHandlers.forEach(({element, event, handler}) => {\n        if (element && element.removeEventListener) {\n          element.removeEventListener(event, handler);\n        }\n      });\n      window.eventTracker.mouseFollowHandlers = [];\n    }\n    \n    // 为安全起见，尝试从document和内容区域移除通用处理函数\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    }\n    \n    document.removeEventListener('mousemove', handleMouseMove);\n    \n    // 清除所有当前高亮\n    clearAllHighlights();\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n    \n    // 添加底部翻页控件样式\n    const bottomPaginationStyles = document.createElement('style');\n    bottomPaginationStyles.id = 'bottom-pagination-styles';\n    bottomPaginationStyles.innerHTML = `\n      .bottom-pagination {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        padding: 20px 0 30px;\n        margin-top: 30px;\n        width: 100%;\n        background-color: transparent;\n        border-radius: 5px;\n      }\n\n      .bottom-pagination .page-btn {\n        background-color: #6c5ce7;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        padding: 8px 15px;\n        margin: 0 10px;\n        cursor: pointer;\n        font-size: 14px;\n        transition: background-color 0.2s ease;\n      }\n\n      .bottom-pagination .page-btn:hover {\n        background-color: #4834d4;\n      }\n\n      .bottom-pagination .page-btn:disabled {\n        background-color: #aaa;\n        cursor: not-allowed;\n      }\n\n      .bottom-pagination .page-info {\n        font-size: 14px;\n        margin: 0 10px;\n      }\n    `;\n    document.head.appendChild(bottomPaginationStyles);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n    addComfortable3DStyles();\n    \n    // 添加鼠标跟随模式的样式\n    const mouseFollowStyle = document.createElement('style');\n    mouseFollowStyle.id = 'intelligent-mouse-follow-style';\n    mouseFollowStyle.textContent = `\n      /* 基础样式 */\n      .mouse-follow-content {\n        position: relative;\n        line-height: 1.8;\n      }\n      \n      .mouse-follow-content .follow-line {\n        position: relative;\n        padding: 8px 16px;\n        margin: 4px 0;\n        border-radius: 6px;\n        transition: all 0.2s ease;\n        display: block;\n        min-height: 1.8em;\n        white-space: normal;\n        word-wrap: break-word;\n        text-indent: 2em;\n      }\n      \n      /* 高亮状态 */\n      .follow-line.highlighted {\n        background-color: #ffa500 !important; /* 橙色背景 */\n        color: #ffffff !important; /* 白色文字 */\n        font-weight: bold !important;\n        font-size: 1.1em; /* 稍微调小字号 */\n        transform: translateX(5px);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n      }\n      \n      \n      /* 平滑过渡效果 */\n      .follow-line {\n        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n      }\n      \n      /* 行间距优化 */\n      .mouse-follow-content .follow-line + .follow-line {\n        margin-top: 4px;\n      }\n      \n      /* 添加行指示器 */\n      .follow-line::before {\n        content: '';\n        position: absolute;\n        left: 0;\n        top: 0;\n        bottom: 0;\n        width: 3px;\n        background: linear-gradient(to bottom, transparent, rgba(255, 255, 255, 0.5), transparent);\n        opacity: 0;\n        transition: opacity 0.2s ease;\n      }\n      \n      .follow-line.highlighted::before {\n        opacity: 1;\n      }\n    `;\n    document.head.appendChild(mouseFollowStyle);\n    \n    // 创建深色背景下的ADHD友好高亮样式\n    const style = document.createElement('style');\n    style.id = 'adhd-friendly-highlight-style';\n    style.textContent = `\n      /* ADHD友好的高亮样式 - 适配深色背景 */\n      .adhd-highlight-mode {\n        line-height: 1.8;\n        padding: 20px;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph {\n        margin-bottom: 1.2em;\n        background-color: transparent;\n        padding: 12px 15px;\n        border-radius: 6px;\n        border-left: 3px solid rgba(255, 255, 255, 0.2);\n        transition: all 0.3s ease;\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover {\n        transform: translateX(5px);\n        border-left-color: rgba(255, 255, 255, 0.4);\n      }\n      \n      /* 加粗样式 - 白色加粗 */\n      .adhd-bold {\n        font-weight: 700;\n        color: #ffffff;\n        letter-spacing: 0.02em;\n        font-size: 1.1em;\n        text-shadow: 0 0 1px rgba(255, 255, 255, 0.2);\n      }\n      \n      /* 彩色样式 - 使用鲜明的蓝色 */\n      .adhd-colored {\n        color: #6c5ce7;\n        font-weight: 500;\n        font-size: 1.05em;\n        text-shadow: 0 0 1px rgba(108, 92, 231, 0.2);\n      }\n      \n      /* 正常样式 - 普通白色 */\n      .adhd-normal {\n        color: rgba(255, 255, 255, 0.8);\n        font-size: 1em;\n      }\n\n      /* 添加平滑过渡效果 */\n      .adhd-bold, .adhd-colored, .adhd-normal {\n        transition: all 0.2s ease;\n      }\n\n      /* 悬停效果 */\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-bold {\n        color: #ffffff;\n        text-shadow: 0 0 2px rgba(255, 255, 255, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-colored {\n        color: #8a7ff7;\n        text-shadow: 0 0 2px rgba(138, 127, 247, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-normal {\n        color: rgba(255, 255, 255, 0.9);\n      }\n\n      /* 添加段落间距的视觉引导 */\n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph {\n        margin-top: 1.5em;\n        position: relative;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph::before {\n        content: '';\n        position: absolute;\n        top: -0.75em;\n        left: 0;\n        right: 0;\n        height: 1px;\n        background: linear-gradient(\n          to right,\n          transparent,\n          rgba(255, 255, 255, 0.1),\n          transparent\n        );\n      }\n    `;\n    document.head.appendChild(style);\n    \n    // 添加基础鼠标跟随样式\n    const mouseFollowPageStyle = document.createElement('style');\n    mouseFollowPageStyle.id = 'basic-mouse-follow-style';\n    mouseFollowPageStyle.textContent = `\n      .follow-line {\n        padding: 8px 12px;\n        margin: 4px 0;\n        border-radius: 4px;\n        transition: background-color 0.2s ease;\n      }\n      .follow-line.highlighted {\n        background-color: #ffa500;\n        color: #000080;\n        font-weight: bold;\n      }\n    `;\n    document.head.appendChild(mouseFollowPageStyle);\n    \n    return () => {\n      const existingStyle = document.getElementById('adhd-friendly-highlight-style');\n      if (existingStyle) existingStyle.remove();\n      \n      const existingMouseFollowStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (existingMouseFollowStyle) existingMouseFollowStyle.remove();\n      \n      const existingBasicMouseFollowStyle = document.getElementById('basic-mouse-follow-style');\n      if (existingBasicMouseFollowStyle) existingBasicMouseFollowStyle.remove();\n      \n      mouseFollowPageStyle.remove();\n    };\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 清理旧监听器\n    removeMouseFollowListeners();\n    \n    // 添加新监听器\n    setTimeout(() => {\n      addMouseFollowListeners();\n      \n      // 添加调试辅助 - 显示行边界\n      const contentArea = document.querySelector('.mouse-follow-content');\n      if (contentArea) {\n        const lines = contentArea.querySelectorAll('.follow-line');\n        console.log(`初始化鼠标跟随模式，共 ${lines.length} 行`);\n        \n        // 可选：启用可视化调试\n        if (false) { // 设置为true可以启用可视化调试\n          lines.forEach((line, index) => {\n            line.style.border = '1px dashed #888';\n            line.setAttribute('title', `行 ${index+1}`);\n          });\n        }\n        \n        // 验证行高亮效果\n        const firstLine = lines[0];\n        if (firstLine) {\n          console.log('行样式验证:', {\n            padding: window.getComputedStyle(firstLine).padding,\n            margin: window.getComputedStyle(firstLine).margin,\n            fontSize: window.getComputedStyle(firstLine).fontSize,\n            lineHeight: window.getComputedStyle(firstLine).lineHeight\n          });\n        }\n      }\n    }, 100);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = (delta) => {\n    window.autoReader.speed = Math.max(100, window.autoReader.speed + delta);\n    \n    if (window.autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async (delta) => {\n    console.log(`翻页请求: 当前页 ${currentPage}, 增量 ${delta}`);\n    const newPage = currentPage + delta;\n    \n    if (newPage < 1 || newPage > totalPages) {\n      console.log('无效页码，不执行翻页');\n          return;\n        }\n        \n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n    const wasFlashReading = readingMode === 'flash-reading' && window.flashReader && window.flashReader.isPlaying;\n    \n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    \n    if (wasFlashReading && window.flashReader) {\n      window.flashReader.cleanup();\n    }\n    \n    // 更新页码\n    setCurrentPage(newPage);\n    \n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n      \n      // 检查是否为目录页\n      const textContent = await page.getTextContent();\n      const isToc = await detectIfTocPage(textContent);\n      setIsTableOfContents(isToc);\n      \n      if (isToc) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, page.getViewport({ scale: 1.0 }));\n      } else {\n        // 处理正文页面 - 根据当前阅读模式处理\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n        \n        // 根据当前模式设置内容\n        if (readingMode === 'static') {\n          console.log('翻页后应用静态高亮模式');\n          const processedContent = formatSimpleHighlightedText(sentences);\n          setContent(processedContent);\n          \n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n            if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n              \n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n              }\n            }\n          }, 200);\n        } else if (readingMode === 'flash-reading') {\n          // 如果是闪读模式，则需要特殊处理\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n            \n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n            \n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n            \n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n          return; // 已处理，直接返回\n        } else {\n          // 其他模式使用原处理函数\n          await processContentPage(page, readingMode);\n        }\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n    } catch (error) {\n      console.error('页面切换错误:', error);\n    }\n  };\n\n  // ADHD友好的静态高亮处理函数\n  const formatSimpleHighlightedText = (sentences) => {\n    console.log('开始处理ADHD友好的静态高亮文本，句子数量:', sentences.length);\n    \n    let html = '<div class=\"pdf-content adhd-highlight-mode\">';\n    \n    sentences.forEach((sentence, sentenceIndex) => {\n      if (!sentence || sentence.trim() === '') {\n        console.log(`跳过空句子，索引: ${sentenceIndex}`);\n      return;\n    }\n    \n      // 清理和规范化文本\n      const cleanText = sentence\n        .trim()\n        .replace(/\\s+/g, ' ')  // 规范化空白字符\n        .replace(/&/g, '&amp;')  // 转义特殊字符\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n      \n      // 处理句子中的单词，为它们添加不同样式\n      const words = cleanText.split(/(\\s+)/);\n      let formattedSentence = '';\n      \n      words.forEach((word, wordIndex) => {\n        if (word.trim() === '') {\n          // 保留空格\n          formattedSentence += word;\n      } else {\n          // 根据位置应用不同的样式类\n          // 三种交替样式: 加粗、彩色、正常\n          const styleClass = wordIndex % 3 === 0 ? 'adhd-bold' : \n                           wordIndex % 3 === 1 ? 'adhd-colored' : 'adhd-normal';\n          \n          formattedSentence += `<span class=\"${styleClass}\">${word}</span>`;\n        }\n      });\n      \n      console.log(`处理句子 ${sentenceIndex + 1}:`, cleanText.substring(0, 50) + '...');\n      html += `<p class=\"pdf-paragraph\">${formattedSentence}</p>`;\n    });\n    \n    html += '</div>';\n    \n    // 调试输出\n    console.log('生成的ADHD友好静态高亮HTML:', html.substring(0, 200) + '...');\n    \n    return html;\n  };\n\n  // 根据阅读模式获取相应的内容处理函数\n  const getContentHandlerForMode = (mode) => {\n    switch(mode) {\n      case 'normal': return formatSentencesToHtml;\n      case 'static': return applyStaticHighlightToSentences;\n      case 'follow-mouse': return formatSentencesForMouseFollow;\n      case 'comfortable-3d': return applyComfortable3dEffectToSentences;\n      case 'flash-reading': \n        return (sentences) => {\n          // 闪读模式使用专门的分割函数重新处理文本\n          return createFlashReadingContentFromSentences(sentences);\n        };\n      default: return formatSentencesToHtml;\n    }\n  };\n\n  // 监听阅读模式和当前页面的变化\n  useEffect(() => {\n    if (readingMode === 'mouse-follow' && currentPage && !isTableOfContents) {\n      // 移除之前的样式\n      const oldStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (oldStyle) {\n        oldStyle.remove();\n      }\n      \n      // 添加基础鼠标跟随样式\n      const followModeStyle = document.createElement('style');\n      followModeStyle.id = 'basic-mouse-follow-style';\n      followModeStyle.textContent = `\n        .follow-line {\n          padding: 8px 12px;\n          margin: 4px 0;\n          border-radius: 4px;\n          transition: background-color 0.2s ease;\n        }\n        .follow-line.highlighted {\n          background-color: #ffa500;\n          color: #000080;\n          font-weight: bold;\n        }\n      `;\n      document.head.appendChild(followModeStyle);\n      \n      // 处理当前页面内容\n      const page = pdfDocument.getPage(currentPage);\n      const textContent = page.getTextContent();\n      const sentences = textContent.items\n        .map(item => item.str)\n        .join(' ')\n        .split(/[。！？]/)\n        .filter(s => s.trim());\n      \n      // 应用基础鼠标跟随格式化\n      setContent(formatSentencesForMouseFollow(sentences));\n      \n      // 添加鼠标跟随监听器\n      setTimeout(() => {\n        addMouseFollowListeners();\n      }, 100);\n      \n      return () => {\n        followModeStyle.remove();\n      };\n    }\n  }, [readingMode, currentPage, pdfDocument]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        <div className=\"logo\">\n          <h2>ADHD阅读助手</h2>\n        </div>\n        \n        <div className=\"reading-controls\">\n          <h3>阅读模式</h3>\n          <select \n            id=\"reading-mode-select\" \n            value={readingMode} \n            onChange={handleReadingModeChange}\n            className=\"mode-select\"\n          >\n            <option value=\"normal\">普通模式</option>\n            <option value=\"static\">静态高亮</option>\n            <option value=\"follow-mouse\">鼠标跟随</option>\n            <option value=\"rhythm\">节奏阅读</option>\n            <option value=\"flash-reading\">闪读模式</option>\n          </select>\n        </div>\n        \n        <div className=\"upload-section\">\n          <input\n            type=\"file\"\n            accept=\".pdf,.txt,.md\" \n            hidden\n            id=\"file-upload\"\n            onChange={handleFileUpload}\n            ref={fileRef}\n          />\n          <button \n            className=\"upload-btn\"\n            onClick={() => fileRef.current.click()}\n          >\n            上传文件 (.pdf/.txt/.md)\n          </button>\n      </div>\n            </div>\n      \n      <div className=\"main-content\">\n        <div className=\"toolbar\">\n          {fileName && <h3 className=\"filename\">{fileName}</h3>}\n          {/* 移除了原有翻页控件 */}\n            </div>\n        \n        <div className=\"page-content\" ref={readerContainerRef}>\n            <div dangerouslySetInnerHTML={{ __html: content }} />\n          \n          {totalPages > 0 && (\n            <div className=\"bottom-pagination\">\n              <button \n                onClick={() => changePage(-1)} \n                disabled={currentPage <= 1}\n                className=\"page-btn\"\n              >\n                上一页\n              </button>\n            <span className=\"page-info\">\n                第 {currentPage} / {totalPages} 页\n              </span>\n              <button \n                onClick={() => changePage(1)} \n                disabled={currentPage >= totalPages}\n                className=\"page-btn\"\n              >\n                下一页\n              </button>\n          </div>\n        )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App; \n"],"mappings":"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,SAAS,GAAG;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDlW,QAAQ,CAAC6L,IAAI,CAACzK,WAAW,CAACwa,sBAAsB,CAAC;EACnD,CAAC;;EAED;EACAtf,SAAS,CAAC,MAAM;IACdqf,mBAAmB,CAAC,CAAC;IACrB3P,sBAAsB,CAAC,CAAC;;IAExB;IACA,MAAM6P,gBAAgB,GAAG7b,QAAQ,CAACK,aAAa,CAAC,OAAO,CAAC;IACxDwb,gBAAgB,CAACvb,EAAE,GAAG,gCAAgC;IACtDub,gBAAgB,CAACtb,WAAW,GAAG;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDP,QAAQ,CAAC6L,IAAI,CAACzK,WAAW,CAACya,gBAAgB,CAAC;;IAE3C;IACA,MAAMrb,KAAK,GAAGR,QAAQ,CAACK,aAAa,CAAC,OAAO,CAAC;IAC7CG,KAAK,CAACF,EAAE,GAAG,+BAA+B;IAC1CE,KAAK,CAACD,WAAW,GAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}