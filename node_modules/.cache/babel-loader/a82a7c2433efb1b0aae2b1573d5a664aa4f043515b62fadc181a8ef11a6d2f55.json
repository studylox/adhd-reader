{"ast":null,"code":"var _jsxFileName = \"D:\\\\adhd-read-helper\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 添加全局事件跟踪对象\nwindow.eventTracker = window.eventTracker || {\n  mouseFollowHandlers: []\n};\n\n// 简化自动阅读器全局对象\nwindow.autoReader = {\n  charPositions: [],\n  intervalId: null,\n  currentIndex: 0,\n  speed: 300,\n  active: false\n};\n\n// 添加新的节奏阅读模式代码\n// 全局变量，确保在页面切换后仍然保持状态\nwindow.rhythmReaderGlobal = window.rhythmReaderGlobal || {\n  active: false,\n  speed: 300\n};\n\n// 关键函数：确保光标存在\nfunction ensureReaderCursorExists() {\n  console.log(\"【自动阅读】检查并确保光标存在\");\n  const contentContainer = document.querySelector('.page-content');\n  if (!contentContainer) {\n    console.error(\"【自动阅读】错误：找不到内容容器\");\n    return false;\n  }\n\n  // 强制设置容器样式\n  contentContainer.style.position = contentContainer.style.position || 'relative';\n\n  // 检查光标是否存在\n  let cursor = document.getElementById('auto-reader-cursor');\n  if (!cursor || !document.body.contains(cursor)) {\n    console.log(\"【自动阅读】光标不存在，创建新光标\");\n\n    // 移除可能的残留元素\n    if (cursor) cursor.remove();\n\n    // 创建新光标\n    cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 12px;\n      height: 12px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translate(-50%, -50%);\n      box-shadow: 0 0 10px #00ff00;\n      z-index: 9999;\n      opacity: 1;\n      transition: none;\n    `;\n    contentContainer.appendChild(cursor);\n  } else {\n    console.log(\"【自动阅读】光标已存在\");\n    // 确保光标可见\n    cursor.style.display = 'block';\n    cursor.style.opacity = '1';\n  }\n\n  // 检查高亮元素是否存在\n  let highlight = document.getElementById('auto-reader-highlight');\n  if (!highlight || !document.body.contains(highlight)) {\n    console.log(\"【自动阅读】高亮不存在，创建新高亮\");\n\n    // 移除可能的残留元素\n    if (highlight) highlight.remove();\n\n    // 创建新高亮\n    highlight = document.createElement('div');\n    highlight.id = 'auto-reader-highlight';\n    highlight.style.cssText = `\n      position: absolute;\n      width: 20px;\n      height: 20px;\n      background-color: rgba(0, 255, 0, 0.3);\n      border-radius: 2px;\n      pointer-events: none;\n      z-index: 998;\n      opacity: 1;\n      transition: none;\n    `;\n    contentContainer.appendChild(highlight);\n  } else {\n    console.log(\"【自动阅读】高亮已存在\");\n    // 确保高亮可见\n    highlight.style.display = 'block';\n    highlight.style.opacity = '1';\n  }\n  return true;\n}\n\n// 节奏阅读模式 - 确保手动翻页后也能自动恢复\n(function () {\n  console.log(\"正在初始化节奏阅读模式...\");\n\n  // 确保只初始化一次\n  if (window.rhythmReadingInitialized) {\n    console.log(\"节奏阅读模式已经初始化过，跳过\");\n    return;\n  }\n  window.rhythmReadingInitialized = true;\n\n  // 改进的存储函数，同时使用session和local storage提高可靠性\n  function setStorage(key, value) {\n    try {\n      sessionStorage.setItem(key, value);\n      localStorage.setItem(key, value);\n    } catch (e) {\n      console.error(\"无法写入存储\", e);\n    }\n  }\n  function getStorage(key) {\n    try {\n      // 优先使用sessionStorage，这样更适合单次会话\n      return sessionStorage.getItem(key) || localStorage.getItem(key);\n    } catch (e) {\n      console.error(\"无法读取存储\", e);\n      return null;\n    }\n  }\n\n  // 状态变量和功能对象\n  const rhythmReader = {\n    active: false,\n    intervalId: null,\n    speed: 300,\n    currentIndex: 0,\n    readIndices: new Set(),\n    charElements: [],\n    pageTransitionInProgress: false,\n    // 初始化文本节点\n    initializeTextNodes: function () {\n      console.log(\"【节奏阅读】初始化文本节点...\");\n\n      // 重置字符元素数组\n      this.charElements = [];\n\n      // 获取内容容器\n      const contentContainer = document.querySelector('.page-content');\n      if (!contentContainer) {\n        console.error(\"【节奏阅读】找不到内容容器\");\n        return false;\n      }\n\n      // 查找所有文本节点并处理\n      const textNodes = [];\n      this.findTextNodes(contentContainer, textNodes);\n      if (textNodes.length === 0) {\n        console.error(\"【节奏阅读】未找到文本节点\");\n        this.showNotification(\"无法启动节奏阅读：未找到文本内容\");\n        return false;\n      }\n      console.log(`【节奏阅读】找到 ${textNodes.length} 个文本节点`);\n\n      // 为每个文本节点创建字符span\n      textNodes.forEach(node => {\n        const text = node.nodeValue;\n        if (!text || text.trim() === '') return;\n\n        // 创建文档片段来存放字符span\n        const fragment = document.createDocumentFragment();\n\n        // 为每个字符创建span\n        for (let i = 0; i < text.length; i++) {\n          const char = text[i];\n          const span = document.createElement('span');\n          span.textContent = char;\n          span.className = 'rhythm-char';\n          span.dataset.rhythmIndex = this.charElements.length;\n\n          // 如果是空白字符，添加一个标志\n          if (char.trim() === '') {\n            span.dataset.whitespace = 'true';\n          }\n\n          // 保持原始样式，不设置背景\n          span.style.display = 'inline';\n          span.style.margin = '0';\n          span.style.padding = '0';\n          span.style.border = 'none';\n          span.style.backgroundColor = 'transparent';\n          fragment.appendChild(span);\n          this.charElements.push(span);\n        }\n\n        // 替换原始节点\n        if (node.parentNode) {\n          node.parentNode.replaceChild(fragment, node);\n        }\n      });\n      console.log(`【节奏阅读】总共创建了 ${this.charElements.length} 个字符span`);\n      return this.charElements.length > 0;\n    },\n    // 递归查找所有文本节点\n    findTextNodes: function (element, textNodes) {\n      // 处理子节点\n      for (let i = 0; i < element.childNodes.length; i++) {\n        const node = element.childNodes[i];\n\n        // 如果是文本节点且有内容\n        if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() !== '') {\n          textNodes.push(node);\n        }\n        // 如果是元素节点，递归处理\n        else if (node.nodeType === Node.ELEMENT_NODE) {\n          // 跳过读者UI元素\n          if (node.id === 'rhythm-speed-slider' || node.id === 'rhythm-notification' || node.className === 'rhythm-char') {\n            continue;\n          }\n          this.findTextNodes(node, textNodes);\n        }\n      }\n    },\n    // 更新文本颜色\n    updateTextColors: function () {\n      // 更新所有字符的颜色\n      this.charElements.forEach((span, index) => {\n        // 确定颜色\n        let color;\n        let fontWeight = 'inherit';\n        if (index === this.currentIndex) {\n          color = '#00aa00'; // 当前阅读的字 - 绿色\n          fontWeight = 'bold';\n        } else if (index === this.currentIndex + 1 || index === this.currentIndex + 2) {\n          color = '#aaaaaa'; // 接下来两个字 - 淡灰色\n        } else if (this.readIndices.has(index)) {\n          color = '#ffffff'; // 已读字符 - 白色（表示已读）\n        } else {\n          color = 'rgba(160, 160, 160, 0.25)'; // 未读字符 - 非常淡的灰色（可见但不明显）\n        }\n        span.style.color = color;\n        span.style.fontWeight = fontWeight;\n\n        // 确保没有背景\n        span.style.backgroundColor = 'transparent';\n        span.style.background = 'none';\n      });\n    },\n    // 移动到下一个字符\n    moveToNextChar: function () {\n      // 将当前字符标记为已读\n      this.readIndices.add(this.currentIndex);\n\n      // 移动到下一个非空白字符\n      do {\n        this.currentIndex++;\n\n        // 检查是否到达末尾\n        if (this.currentIndex >= this.charElements.length) {\n          console.log(\"【节奏阅读】已到达页尾，尝试翻页\");\n\n          // 尝试点击下一页按钮\n          if (!this.clickNextPageButton()) {\n            // 如果没有找到下一页按钮，完全停止阅读\n            this.stop();\n          }\n          return;\n        }\n      } while (this.currentIndex < this.charElements.length && this.charElements[this.currentIndex] && this.charElements[this.currentIndex].dataset.whitespace === 'true');\n\n      // 更新颜色\n      this.updateTextColors();\n\n      // 滚动到当前字符\n      this.scrollToCurrentChar();\n    },\n    // 滚动到当前字符\n    scrollToCurrentChar: function () {\n      const span = this.charElements[this.currentIndex];\n      if (!span) return;\n      const rect = span.getBoundingClientRect();\n      const contentContainer = document.querySelector('.page-content');\n\n      // 估计行高\n      const lineHeight = parseInt(window.getComputedStyle(span).lineHeight) || Math.max(20, rect.height * 1.5);\n\n      // 确定滚动容器\n      const isContainerScrollable = contentContainer && contentContainer.scrollHeight > contentContainer.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n      if (isContainerScrollable) {\n        // 容器滚动\n        const containerRect = contentContainer.getBoundingClientRect();\n        const relativeTop = rect.top - containerRect.top + contentContainer.scrollTop;\n        const visibleTop = contentContainer.scrollTop;\n        const visibleBottom = visibleTop + contentContainer.clientHeight;\n        if (relativeTop < visibleTop + lineHeight || relativeTop > visibleBottom - lineHeight) {\n          contentContainer.scrollBy({\n            top: lineHeight * 2 * (relativeTop > visibleBottom - lineHeight ? 1 : -1),\n            behavior: 'smooth'\n          });\n        }\n      } else {\n        // 窗口滚动\n        const viewportTop = window.scrollY;\n        const viewportBottom = viewportTop + window.innerHeight;\n        const absoluteTop = rect.top + window.scrollY;\n        if (absoluteTop < viewportTop + lineHeight || absoluteTop > viewportBottom - lineHeight) {\n          window.scrollBy({\n            top: lineHeight * 2 * (absoluteTop > viewportBottom - lineHeight ? 1 : -1),\n            behavior: 'smooth'\n          });\n        }\n      }\n    },\n    // 添加速度滑块\n    addSpeedSlider: function () {\n      let slider = document.getElementById('rhythm-speed-slider');\n      if (slider) slider.remove();\n      const container = document.createElement('div');\n      container.id = 'rhythm-speed-slider';\n      container.style.position = 'fixed';\n      container.style.top = '70px';\n      container.style.right = '20px';\n      container.style.backgroundColor = 'white';\n      container.style.padding = '10px';\n      container.style.borderRadius = '5px';\n      container.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';\n      container.style.zIndex = '10000';\n      container.style.display = 'flex';\n      container.style.alignItems = 'center';\n      container.style.maxWidth = '300px';\n      const label = document.createElement('label');\n      label.textContent = '速度: ';\n      label.style.marginRight = '8px';\n      container.appendChild(label);\n      const input = document.createElement('input');\n      input.type = 'range';\n      input.min = '50';\n      input.max = '1000';\n      input.step = '50';\n      input.value = this.speed;\n      input.style.width = '120px';\n      const valueDisplay = document.createElement('span');\n      valueDisplay.textContent = `${this.speed}ms`;\n      valueDisplay.style.marginLeft = '8px';\n      valueDisplay.style.minWidth = '60px';\n      const self = this;\n      input.addEventListener('input', function () {\n        const newSpeed = parseInt(this.value);\n        self.speed = newSpeed;\n        valueDisplay.textContent = `${newSpeed}ms`;\n        if (self.intervalId) {\n          clearInterval(self.intervalId);\n          self.intervalId = setInterval(() => self.moveToNextChar(), newSpeed);\n        }\n      });\n      container.appendChild(input);\n      container.appendChild(valueDisplay);\n      document.body.appendChild(container);\n    },\n    // 恢复原始文本\n    restoreOriginalText: function () {\n      // 获取所有已创建的字符span\n      const charSpans = document.querySelectorAll('.rhythm-char');\n\n      // 按父节点分组\n      const parentNodeMap = new Map();\n      charSpans.forEach(span => {\n        const parent = span.parentNode;\n        if (!parent) return;\n        if (!parentNodeMap.has(parent)) {\n          parentNodeMap.set(parent, []);\n        }\n        parentNodeMap.get(parent).push(span);\n      });\n\n      // 对每个父节点，将连续的字符span合并回文本节点\n      parentNodeMap.forEach((spans, parent) => {\n        if (spans.length === 0) return;\n\n        // 排序spans确保顺序正确\n        spans.sort((a, b) => {\n          const indexA = parseInt(a.dataset.rhythmIndex || '0');\n          const indexB = parseInt(b.dataset.rhythmIndex || '0');\n          return indexA - indexB;\n        });\n\n        // 根据连续性分组\n        const groups = [];\n        if (spans.length > 0) {\n          let currentGroup = [spans[0]];\n          for (let i = 1; i < spans.length; i++) {\n            const prevIndex = parseInt(spans[i - 1].dataset.rhythmIndex || '0');\n            const currentIndex = parseInt(spans[i].dataset.rhythmIndex || '0');\n            if (currentIndex === prevIndex + 1 && spans[i].previousSibling === spans[i - 1]) {\n              currentGroup.push(spans[i]);\n            } else {\n              groups.push(currentGroup);\n              currentGroup = [spans[i]];\n            }\n          }\n          groups.push(currentGroup);\n        }\n\n        // 对每个连续组替换为文本节点\n        groups.forEach(group => {\n          if (group.length === 0) return;\n          try {\n            const text = group.map(span => span.textContent).join('');\n            const textNode = document.createTextNode(text);\n\n            // 替换第一个span，然后移除其余的\n            if (group[0].parentNode === parent) {\n              parent.replaceChild(textNode, group[0]);\n              for (let i = 1; i < group.length; i++) {\n                if (group[i].parentNode === parent) {\n                  parent.removeChild(group[i]);\n                }\n              }\n            }\n          } catch (e) {\n            console.error(\"【节奏阅读】恢复文本时出错:\", e);\n          }\n        });\n      });\n\n      // 清除字符元素数组\n      this.charElements = [];\n    },\n    // 启动节奏阅读\n    start: function () {\n      console.log(\"【节奏阅读】启动中...\");\n\n      // 检查是否正在进行页面转换\n      if (this.pageTransitionInProgress) {\n        console.log(\"【节奏阅读】页面转换正在进行中，延迟启动\");\n        setTimeout(() => this.start(), 500);\n        return;\n      }\n\n      // 先停止已有的\n      this.stop(false);\n\n      // 设置为活动状态\n      this.active = true;\n      setStorage('rhythmReadingActive', 'true');\n\n      // 初始化文本\n      if (!this.initializeTextNodes()) {\n        console.error(\"【节奏阅读】无法初始化文本节点\");\n        return;\n      }\n\n      // 重要：始终从头开始阅读\n      this.currentIndex = 0;\n      this.readIndices.clear();\n\n      // 添加速度滑块\n      this.addSpeedSlider();\n\n      // 更新颜色\n      this.updateTextColors();\n\n      // 滚动到开始位置\n      this.scrollToCurrentChar();\n\n      // 设置阅读间隔\n      this.intervalId = setInterval(() => this.moveToNextChar(), this.speed);\n      console.log(\"【节奏阅读】成功启动\");\n\n      // 显示提示\n      this.showNotification(\"节奏阅读模式已启动\");\n\n      // 劫持翻页函数 - 重要步骤\n      this.hijackPageTurningFunctions();\n\n      // 设置页面导航事件监听\n      this.setupPageNavigationListeners();\n    },\n    // 停止节奏阅读\n    stop: function (showNotification = true) {\n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n      }\n      if (this.active) {\n        console.log(\"【节奏阅读】停止中...\");\n        this.active = false;\n\n        // 仅当不是因翻页而停止时才清除活动状态\n        if (!this.pageTransitionInProgress) {\n          setStorage('rhythmReadingActive', 'false');\n        }\n\n        // 恢复原始文本\n        this.restoreOriginalText();\n\n        // 移除速度滑块\n        const slider = document.getElementById('rhythm-speed-slider');\n        if (slider) slider.remove();\n        if (showNotification) {\n          this.showNotification(\"节奏阅读模式已停止\");\n        }\n      }\n    },\n    // 显示通知\n    showNotification: function (message) {\n      let notification = document.getElementById('rhythm-notification');\n      if (notification) notification.remove();\n      notification = document.createElement('div');\n      notification.id = 'rhythm-notification';\n      notification.textContent = message;\n      notification.style.position = 'fixed';\n      notification.style.top = '50%';\n      notification.style.left = '50%';\n      notification.style.transform = 'translate(-50%, -50%)';\n      notification.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';\n      notification.style.color = 'white';\n      notification.style.padding = '15px 25px';\n      notification.style.borderRadius = '5px';\n      notification.style.zIndex = '10001';\n      notification.style.fontSize = '18px';\n      document.body.appendChild(notification);\n\n      // 2秒后自动消失\n      setTimeout(() => {\n        if (notification && notification.parentNode) {\n          notification.parentNode.removeChild(notification);\n        }\n      }, 2000);\n    },\n    // 劫持页面翻转函数 - 改进版本\n    hijackPageTurningFunctions: function () {\n      if (typeof window.changePage === 'function' && !window._originalChangePage) {\n        console.log(\"【节奏阅读】劫持changePage函数\");\n        window._originalChangePage = window.changePage;\n        const self = this;\n        window.changePage = function (page) {\n          console.log(\"【节奏阅读】检测到changePage调用，参数:\", page);\n          const wasActive = self.active;\n          self.pageTransitionInProgress = true;\n          if (wasActive) {\n            self.stop(false);\n            setStorage('rhythmReadingActive', 'true');\n            setStorage('rhythmReadingPending', 'true');\n            document.body.dataset.rhythmReadingActive = 'true';\n          }\n          try {\n            if (page === undefined || page === null) {\n              console.warn('【节奏阅读】安全处理：page参数为空');\n              page = {};\n            }\n            if (typeof page === 'object' && !page.something) {\n              console.log('【节奏阅读】添加空的something对象防止错误');\n              page.something = {\n                active: false\n              };\n            }\n            window._originalChangePage(page);\n          } catch (err) {\n            console.error(\"【节奏阅读】翻页函数执行出错:\", err);\n            self.clickNextPageButton();\n          }\n          setTimeout(() => {\n            self.pageTransitionInProgress = false;\n            if (wasActive && getStorage('rhythmReadingPending') === 'true') {\n              setStorage('rhythmReadingPending', 'false');\n              console.log(\"【节奏阅读】翻页后重新启动\");\n              setTimeout(() => self.start(), 500);\n            }\n          }, 1000);\n        };\n      }\n    },\n    // 设置页面导航事件监听 - 加强版\n    setupPageNavigationListeners: function () {\n      // 查找所有可能的翻页按钮\n      console.log(\"【节奏阅读】正在设置页面导航监听\");\n      const self = this;\n\n      // 使用事件委托来捕获所有可能的点击\n      document.addEventListener('click', function (e) {\n        // 检查点击的元素是否可能是翻页按钮\n        let target = e.target;\n        while (target && target !== document.body) {\n          // 检查是否是翻页元素\n          if (target.tagName === 'BUTTON' || target.tagName === 'A' || target.getAttribute('role') === 'button') {\n            const text = (target.textContent || '').trim().toLowerCase();\n            const ariaLabel = (target.getAttribute('aria-label') || '').toLowerCase();\n\n            // 检查是否是翻页元素\n            if (text.includes('上一页') || text.includes('下一页') || text.includes('prev') || text.includes('next') || ariaLabel.includes('page') || ariaLabel.includes('页') || text === '<' || text === '>' || text === '←' || text === '→') {\n              if (self.active) {\n                console.log(`【节奏阅读】检测到可能的翻页元素点击: ${text || ariaLabel}`);\n\n                // 标记页面转换开始\n                self.pageTransitionInProgress = true;\n\n                // 保存状态到存储\n                setStorage('rhythmReadingActive', 'true');\n                setStorage('rhythmReadingPending', 'true');\n                document.body.dataset.rhythmReadingActive = 'true';\n\n                // 停止当前的阅读\n                self.stop(false);\n\n                // 添加延迟执行的监听器，确保数据在页面加载后恢复\n                setTimeout(() => {\n                  self.pageTransitionInProgress = false;\n                  if (getStorage('rhythmReadingPending') === 'true') {\n                    setStorage('rhythmReadingPending', 'false');\n                    self.start();\n                  }\n                }, 1500);\n              }\n              break;\n            }\n          }\n          target = target.parentNode;\n        }\n      });\n\n      // 监听键盘导航事件\n      document.addEventListener('keydown', function (e) {\n        // 检查是否是翻页快捷键\n        if (['ArrowLeft', 'ArrowRight', 'PageUp', 'PageDown'].includes(e.key)) {\n          if (self.active) {\n            console.log(`【节奏阅读】检测到键盘翻页: ${e.key}`);\n\n            // 保存状态到存储\n            setStorage('rhythmReadingActive', 'true');\n            setStorage('rhythmReadingPending', 'true');\n\n            // 标记页面转换开始\n            self.pageTransitionInProgress = true;\n\n            // 停止当前的阅读\n            self.stop(false);\n\n            // 添加延迟执行的监听器\n            setTimeout(() => {\n              self.pageTransitionInProgress = false;\n              if (getStorage('rhythmReadingPending') === 'true') {\n                setStorage('rhythmReadingPending', 'false');\n                self.start();\n              }\n            }, 1500);\n          }\n        }\n      });\n\n      // 添加popstate监听器捕获浏览器前进/后退导航\n      window.addEventListener('popstate', function () {\n        if (self.active) {\n          console.log(\"【节奏阅读】检测到历史导航事件\");\n\n          // 保存状态\n          setStorage('rhythmReadingActive', 'true');\n          setStorage('rhythmReadingPending', 'true');\n\n          // 标记页面转换开始\n          self.pageTransitionInProgress = true;\n\n          // 停止当前阅读\n          self.stop(false);\n\n          // 延迟恢复\n          setTimeout(() => {\n            self.pageTransitionInProgress = false;\n            if (getStorage('rhythmReadingPending') === 'true') {\n              setStorage('rhythmReadingPending', 'false');\n              self.start();\n            }\n          }, 1500);\n        }\n      });\n    },\n    // 改进的自动翻页函数，更精确地处理状态保存\n    clickNextPageButton: function () {\n      console.log(\"【节奏阅读】尝试查找并点击下一页按钮\");\n\n      // 查找下一页按钮\n      const nextPageSelectors = ['button.next-page', 'button[aria-label=\"下一页\"]', 'a.next-page', 'a[aria-label=\"下一页\"]', '.next-page', '#next-page', 'button.next', 'a.next'];\n      let nextPageButton = null;\n\n      // 尝试通过选择器找到按钮\n      for (const selector of nextPageSelectors) {\n        try {\n          const elements = document.querySelectorAll(selector);\n          for (const el of elements) {\n            if (el.offsetParent !== null) {\n              // 检查元素是否可见\n              console.log(`【节奏阅读】找到下一页按钮: ${selector}`);\n              nextPageButton = el;\n              break;\n            }\n          }\n          if (nextPageButton) break;\n        } catch (e) {\n          // 某些选择器可能不被支持，忽略错误\n        }\n      }\n\n      // 如果没找到，尝试按文本内容查找\n      if (!nextPageButton) {\n        const buttons = document.querySelectorAll('button, a, div[role=\"button\"]');\n        for (const button of buttons) {\n          const text = button.textContent.trim().toLowerCase();\n          if ((text.includes('下一页') || text.includes('next') || text === '>' || text === '→') && button.offsetParent !== null) {\n            console.log(`【节奏阅读】通过文本内容找到下一页按钮: ${text}`);\n            nextPageButton = button;\n            break;\n          }\n        }\n      }\n      if (nextPageButton) {\n        console.log(\"【节奏阅读】模拟点击下一页按钮\");\n\n        // 明确标记页面转换开始\n        this.pageTransitionInProgress = true;\n\n        // 保存状态\n        setStorage('rhythmReadingActive', 'true');\n        setStorage('rhythmReadingPending', 'true');\n        document.body.dataset.rhythmReadingActive = 'true';\n\n        // 恢复原始文本\n        this.restoreOriginalText();\n\n        // 停止计时器\n        if (this.intervalId) {\n          clearInterval(this.intervalId);\n          this.intervalId = null;\n        }\n\n        // 模拟点击\n        nextPageButton.click();\n\n        // 延迟结束页面转换状态\n        setTimeout(() => {\n          this.pageTransitionInProgress = false;\n        }, 1000);\n        return true;\n      } else {\n        console.log(\"【节奏阅读】未找到下一页按钮\");\n        return false;\n      }\n    }\n  };\n\n  // 暴露到全局，以便调试和直接调用\n  window.rhythmReader = rhythmReader;\n\n  // 额外添加一个全局安全函数用于检查节奏阅读状态\n  window.isRhythmActive = function () {\n    return rhythmReader.active || getStorage('rhythmReadingActive') === 'true';\n  };\n\n  // 添加一个停止函数供外部安全调用\n  window.stopRhythmSafely = function () {\n    try {\n      setStorage('rhythmReadingActive', 'false');\n      setStorage('rhythmReadingPending', 'false');\n      if (rhythmReader && typeof rhythmReader.stop === 'function') {\n        rhythmReader.stop();\n      }\n    } catch (e) {\n      console.error(\"停止节奏阅读出错\", e);\n    }\n  };\n\n  // 设置页面加载监听器，确保页面转换后能恢复\n  function setupPageLoadListener() {\n    // DOM内容加载和完全加载的事件监听...\n\n    // 改进的页面变化监测\n    const observer = new MutationObserver(function (mutations) {\n      // 检测到内容变化且有待处理的节奏阅读时\n      if (getStorage('rhythmReadingPending') === 'true') {\n        const contentChanges = mutations.some(m => m.type === 'childList' && m.addedNodes.length > 5); // 使用更高的阈值，确保是真正的内容变化\n\n        if (contentChanges) {\n          console.log(\"【节奏阅读】检测到大量DOM变化，可能是页面切换\");\n\n          // 给页面一点时间稳定下来\n          setTimeout(() => {\n            if (getStorage('rhythmReadingPending') === 'true') {\n              console.log(\"【节奏阅读】页面内容变化后，尝试恢复阅读\");\n              setStorage('rhythmReadingPending', 'false');\n              if (!rhythmReader.pageTransitionInProgress) {\n                rhythmReader.start();\n              }\n            }\n          }, 800);\n        }\n      }\n    });\n\n    // 观察body变化\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  }\n\n  // 设置页面加载监听器\n  setupPageLoadListener();\n\n  // 检查是否需要立即恢复阅读状态\n  if (getStorage('rhythmReadingActive') === 'true') {\n    console.log(\"【节奏阅读】检测到之前的阅读状态，准备恢复\");\n    setStorage('rhythmReadingPending', 'false');\n    setTimeout(function () {\n      rhythmReader.start();\n    }, 800);\n  }\n  console.log(\"【节奏阅读】初始化完成\");\n})();\nconst App = () => {\n  _s();\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const autoReadGuideRef = useRef(null);\n  const autoReadIntervalRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n\n  // 新增自动阅读器状态\n  const [autoReaderState, setAutoReaderState] = useState({\n    currentIndex: 0,\n    charPositions: [],\n    intervalId: null,\n    speed: 300,\n    pageContainer: null,\n    isUserScrolling: false,\n    scrollTimeout: null,\n    contentLoaded: false\n  });\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n    return () => {\n      // 清理自动阅读定时器\n      if (autoReadIntervalRef.current) {\n        clearInterval(autoReadIntervalRef.current);\n      }\n    };\n  }, []);\n\n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async file => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n\n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n\n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n\n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({\n        scale: 1.0\n      });\n\n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async textContent => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n\n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n\n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n\n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    const lines = [...lineMap.values()];\n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    return hasTocKeywords || hasPageNumberPatterns || shortLineRatio > 0.7 && numberLineRatio > 0.3;\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n\n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n\n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n\n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n\n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = text => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    return result;\n  };\n\n  // 修改processContentPage函数\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n\n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch (mode) {\n        case 'normal':\n          // 普通模式 - 简单分段显示\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'static':\n          // 静态高亮模式 - 应用词性标注和颜色高亮\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'follow-mouse':\n          // 鼠标跟随高亮模式 - 分段落但不预先高亮，由鼠标事件触发高亮\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      setContent(processedContent);\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async file => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain') {\n      handleTxtFile(file);\n    } else {\n      alert('请上传PDF或TXT文件');\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = container => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n\n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n\n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n\n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width / 2,\n            // 水平中心\n            y: rect.bottom,\n            // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n\n    // 过滤无效位置并排序\n    return positions.filter(p => p.char.trim() !== '').sort((a, b) => {\n      // 先按行排序，同行按列排序\n      const yDiff = a.y - b.y;\n      if (Math.abs(yDiff) > 5) {\n        // 5px阈值判断是否同一行\n        return yDiff;\n      }\n      return a.x - b.x;\n    });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n\n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - containerVisibleHeight / 2;\n\n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - window.innerHeight / 2;\n\n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n\n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n\n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length ||\n      // 已到末尾\n      positions[nextIndex].char.trim() === '' ||\n      // 下一个是空白\n      positions[nextIndex].y > charPosition.y + 5) {\n        // 下一个在新行\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n\n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n\n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || current.y > prev.y + 5) {\n        // 有明显换行\n        break;\n      }\n      start--;\n    }\n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n\n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n\n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读\n  function startAutoReader() {\n    console.log(\"【自动阅读】启动\");\n\n    // 停止可能存在的实例\n    stopAutoReader();\n\n    // 标记为活跃\n    window.autoReader.active = true;\n    sessionStorage.setItem('autoReaderActive', 'true');\n\n    // 确保光标存在\n    if (!ensureReaderCursorExists()) {\n      console.error(\"【自动阅读】无法创建光标，中止启动\");\n      return;\n    }\n\n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n\n    // 如果没有字符位置数据，重新扫描\n    if (window.autoReader.charPositions.length === 0) {\n      console.log(\"【自动阅读】扫描字符位置\");\n      window.autoReader.charPositions = getAllCharacterPositions(contentContainer);\n      console.log(`【自动阅读】找到 ${window.autoReader.charPositions.length} 个字符位置`);\n    }\n\n    // 如果没有内容且不是最后一页，尝试翻页\n    if (window.autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages) {\n        console.log(\"【自动阅读】当前页无内容，尝试翻页\");\n        sessionStorage.setItem('autoReaderShouldResume', 'true');\n        changePage(1);\n        return;\n      }\n    }\n\n    // 重置索引\n    window.autoReader.currentIndex = 0;\n\n    // 设置阅读间隔\n    window.autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (window.autoReader.currentIndex < window.autoReader.charPositions.length && ((_window$autoReader$ch = window.autoReader.charPositions[window.autoReader.currentIndex]) === null || _window$autoReader$ch === void 0 ? void 0 : _window$autoReader$ch.char.trim()) === '') {\n        var _window$autoReader$ch;\n        window.autoReader.currentIndex++;\n      }\n\n      // 到达页尾处理\n      if (window.autoReader.currentIndex >= window.autoReader.charPositions.length) {\n        console.log(\"【自动阅读】已到达页尾\");\n\n        // 如果不是最后一页，尝试翻页\n        if (currentPage < totalPages) {\n          console.log(\"【自动阅读】准备翻页\");\n          clearInterval(window.autoReader.intervalId);\n          window.autoReader.intervalId = null;\n\n          // 设置应恢复标志\n          sessionStorage.setItem('autoReaderShouldResume', 'true');\n\n          // 先隐藏光标，避免可能的闪烁\n          const cursor = document.getElementById('auto-reader-cursor');\n          const highlight = document.getElementById('auto-reader-highlight');\n          if (cursor) cursor.style.opacity = '0';\n          if (highlight) highlight.style.opacity = '0';\n\n          // 执行翻页\n          setTimeout(() => {\n            changePage(1);\n          }, 100);\n        } else {\n          // 最后一页，停止阅读\n          stopAutoReader();\n        }\n        return;\n      }\n\n      // 更新光标位置\n      updateReaderCursorPosition();\n\n      // 前进到下一个字符\n      window.autoReader.currentIndex++;\n    }, window.autoReader.speed);\n  }\n\n  // 更新光标位置\n  function updateReaderCursorPosition() {\n    // 确保元素存在\n    if (!ensureReaderCursorExists()) return;\n    const cursor = document.getElementById('auto-reader-cursor');\n    const highlight = document.getElementById('auto-reader-highlight');\n    const contentContainer = document.querySelector('.page-content');\n    if (!cursor || !highlight || !contentContainer) {\n      console.error(\"【自动阅读】无法找到必要的元素\");\n      return;\n    }\n    const pos = window.autoReader.charPositions[window.autoReader.currentIndex];\n    if (!pos) return;\n\n    // 计算位置\n    const contentRect = contentContainer.getBoundingClientRect();\n    const relativeX = pos.x - contentRect.left;\n    const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n\n    // 设置位置\n    cursor.style.left = `${relativeX}px`;\n    cursor.style.top = `${relativeY}px`;\n    highlight.style.left = `${relativeX - 10}px`;\n    highlight.style.top = `${relativeY - 20}px`;\n\n    // 确保元素可见\n    cursor.style.display = 'block';\n    cursor.style.opacity = '1';\n    highlight.style.display = 'block';\n    highlight.style.opacity = '1';\n\n    // 滚动到可见区域\n    const scrollTarget = relativeY;\n\n    // 判断是否需要滚动\n    const viewportTop = contentContainer.scrollTop;\n    const viewportBottom = viewportTop + contentContainer.clientHeight;\n    const buffer = 100; // 缓冲区\n\n    if (scrollTarget < viewportTop + buffer || scrollTarget > viewportBottom - buffer) {\n      contentContainer.scrollTo({\n        top: scrollTarget - contentContainer.clientHeight / 2,\n        behavior: 'smooth'\n      });\n    }\n  }\n\n  // 停止自动阅读\n  function stopAutoReader() {\n    console.log(\"【自动阅读】停止\");\n    if (window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n    }\n    window.autoReader.active = false;\n    sessionStorage.removeItem('autoReaderActive');\n    sessionStorage.removeItem('autoReaderShouldResume');\n\n    // 光标可以保留，只是隐藏起来\n    const cursor = document.getElementById('auto-reader-cursor');\n    const highlight = document.getElementById('auto-reader-highlight');\n    if (cursor) cursor.style.opacity = '0';\n    if (highlight) highlight.style.opacity = '0';\n  }\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async e => {\n    const newMode = e.target.value;\n    const prevMode = readingMode;\n\n    // 如果是从裸眼3D模式或舒适3D模式切换出来，恢复背景色\n    if (prevMode === 'naked-eye-3d' || prevMode === 'comfortable-3d') {\n      restoreDarkBackground();\n    }\n\n    // 停止当前可能正在运行的自动阅读和节奏阅读\n    stopAutoReader();\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    if (window.flashReader && window.flashReader.cleanup) {\n      window.flashReader.cleanup();\n    }\n\n    // 清理旧模式\n    cleanupDOM();\n\n    // 更新状态\n    setReadingMode(newMode);\n\n    // 应用新模式\n    if (pdfDocument && currentPage > 0) {\n      try {\n        const page = await pdfDocument.getPage(currentPage);\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        let processedContent = '';\n\n        // 应用对应模式的文本处理\n        switch (newMode) {\n          case 'follow-mouse':\n            processedContent = formatTextForMouseFollow(extractedText);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlight(extractedText);\n            break;\n          case 'auto-reader':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          case 'rhythm':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          case 'naked-eye-3d':\n            processedContent = applyNakedEye3dEffect(extractedText);\n            setTimeout(applyDarkBackground, 50);\n            break;\n          case 'comfortable-3d':\n            processedContent = applyComfortable3dEffect(extractedText);\n            setTimeout(applyDarkBackground, 50);\n            break;\n          case 'flash-reading':\n            addFlashReadingStyles();\n            processedContent = createFlashReadingContent(extractedText);\n            setTimeout(applyDarkBackground, 50);\n            setTimeout(initializeFlashReading, 100);\n            break;\n          default:\n            processedContent = formatTextToHtml(extractedText);\n        }\n        const contentArea = document.querySelector('.page-content');\n        if (contentArea) {\n          contentArea.textContent = '';\n          contentArea.innerHTML = processedContent;\n\n          // 滚动到页面顶部\n          window.scrollTo(0, 0);\n          if (contentArea.scrollTo) {\n            contentArea.scrollTo(0, 0);\n          }\n\n          // 立即初始化对应模式\n          if (newMode === 'auto-reader') {\n            setTimeout(initializeAutoReader, 50);\n          } else if (newMode === 'follow-mouse') {\n            setTimeout(initializeMouseFollow, 50);\n          } else if (newMode === 'rhythm') {\n            setTimeout(() => {\n              if (window.rhythmReader) {\n                window.rhythmReader.start();\n              }\n            }, 50);\n          } else if (newMode === 'naked-eye-3d') {\n            setTimeout(() => {\n              initializeNakedEye3D();\n              applyDarkBackground();\n            }, 50);\n          } else if (newMode === 'comfortable-3d') {\n            setTimeout(() => {\n              applyDarkBackground();\n            }, 50);\n          }\n        }\n      } catch (error) {\n        console.error('应用新阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 首先确保移除鼠标跟随监听器\n    removeMouseFollowListeners();\n\n    // 清理自动阅读器\n    if (window.autoReader && window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n    }\n\n    // 清理节奏阅读器\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n\n    // 清理闪读器\n    if (window.flashReader) {\n      window.flashReader.cleanup();\n    }\n\n    // 清理裸眼3D效果\n    const threeDElements = document.querySelectorAll('.naked-eye-3d');\n    threeDElements.forEach(el => el.remove());\n\n    // 清理舒适3D效果\n    const comfortable3DElements = document.querySelectorAll('.emboss-3d-text, .float-3d-text, .gradient-3d-text');\n    comfortable3DElements.forEach(el => el.remove());\n\n    // 清理闪读模式元素\n    const flashReadingElements = document.querySelectorAll('.flash-reading-container, .flash-reading-display, .flash-reading-controls');\n    flashReadingElements.forEach(el => el.remove());\n\n    // 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll('.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line, .rhythm-char');\n    highlights.forEach(el => {\n      if (el.parentNode) el.parentNode.removeChild(el);\n    });\n\n    // 彻底替换内容区域以移除所有事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 深度克隆内容，但不克隆事件监听器\n      const contentHTML = contentArea.innerHTML;\n      const newContentArea = contentArea.cloneNode(false);\n      newContentArea.innerHTML = contentHTML;\n      if (contentArea.parentNode) {\n        contentArea.parentNode.replaceChild(newContentArea, contentArea);\n      }\n    }\n\n    // 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 移除所有特殊标记和样式\n      paragraph.removeAttribute('data-follow');\n      paragraph.removeAttribute('style');\n\n      // 清理特殊span标签\n      paragraph.innerHTML = paragraph.innerHTML.replace(/<span class=\"text-line\"[^>]*>/g, '').replace(/<span class=\"rhythm-char\"[^>]*>/g, '').replace(/<span class=\"line-highlight[^\"]*\"[^>]*>/g, '').replace(/<span class=\"mouse-highlight[^\"]*\"[^>]*>/g, '').replace(/<\\/span>/g, '');\n    });\n\n    // 移除特殊UI元素\n    const elementsToRemove = ['rhythm-speed-slider', 'rhythm-notification', 'auto-reader-cursor', 'auto-reader-highlight'];\n    elementsToRemove.forEach(id => {\n      const element = document.getElementById(id);\n      if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    });\n\n    // 移除暗色背景\n    document.body.classList.remove('dark-background');\n  };\n  const handleAutoScroll = () => {\n    window.autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = e => {\n    if (readingMode !== 'follow-mouse') return;\n\n    // 清除所有现有高亮\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n    const mouseTarget = document.elementFromPoint(e.clientX, e.clientY);\n    if (mouseTarget && (mouseTarget.classList.contains('pdf-paragraph') || mouseTarget.tagName === 'P' || mouseTarget.tagName === 'SPAN')) {\n      const targetParagraph = mouseTarget.closest('.pdf-paragraph');\n      if (!targetParagraph) return;\n\n      // 获取段落文本节点\n      const textNode = getTextNodeAtPosition(targetParagraph, e.clientX, e.clientY);\n      if (!textNode) return;\n\n      // 获取精确的行位置和尺寸\n      const range = document.createRange();\n      range.selectNodeContents(textNode);\n      const rects = range.getClientRects();\n\n      // 找到鼠标所在的具体行\n      let targetRect = null;\n      for (let i = 0; i < rects.length; i++) {\n        const rect = rects[i];\n        if (e.clientY >= rect.top && e.clientY <= rect.bottom) {\n          targetRect = rect;\n          break;\n        }\n      }\n      if (targetRect) {\n        // 创建高亮元素\n        const lineHighlight = document.createElement('div');\n        lineHighlight.className = 'line-highlight mouse-highlight';\n\n        // 计算相对于段落的位置\n        const paragraphRect = targetParagraph.getBoundingClientRect();\n        const top = targetRect.top - paragraphRect.top;\n        const left = targetRect.left - paragraphRect.left;\n\n        // 设置高亮样式\n        lineHighlight.style.position = 'absolute';\n        lineHighlight.style.left = `${left}px`;\n        lineHighlight.style.top = `${top}px`;\n        lineHighlight.style.width = `${targetRect.width}px`;\n        lineHighlight.style.height = `${targetRect.height}px`;\n        lineHighlight.style.pointerEvents = 'none';\n        lineHighlight.style.backgroundColor = 'rgba(255, 165, 0, 0.3)';\n        lineHighlight.style.borderRadius = '4px';\n        lineHighlight.style.boxShadow = '0 0 8px rgba(255, 165, 0, 0.5)';\n        lineHighlight.style.zIndex = '5';\n        lineHighlight.style.transition = 'all 0.1s ease';\n\n        // 确保段落有相对定位\n        targetParagraph.style.position = 'relative';\n        targetParagraph.appendChild(lineHighlight);\n      }\n    }\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 专门用于移除鼠标跟随事件的函数\n  const removeMouseFollowListeners = () => {\n    // 移除记录的所有监听器\n    if (window.eventTracker && window.eventTracker.mouseFollowHandlers) {\n      window.eventTracker.mouseFollowHandlers.forEach(({\n        element,\n        event,\n        handler\n      }) => {\n        if (element && element.removeEventListener) {\n          element.removeEventListener(event, handler);\n        }\n      });\n      window.eventTracker.mouseFollowHandlers = [];\n    }\n\n    // 为安全起见，尝试从document和内容区域移除通用处理函数\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    }\n    document.removeEventListener('mousemove', handleMouseMove);\n\n    // 清除所有当前高亮\n    clearAllHighlights();\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n    addNakedEye3DStyles();\n    addComfortable3DStyles();\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 新增延迟补偿\n    setTimeout(() => {\n      addMouseFollowListeners();\n\n      // 强制触发重排\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        void contentArea.offsetHeight;\n\n        // 模拟鼠标移动事件\n        const fakeEvent = new MouseEvent('mousemove', {\n          clientX: window.innerWidth / 2,\n          clientY: window.innerHeight / 2,\n          bubbles: true\n        });\n        contentArea.dispatchEvent(fakeEvent);\n      }\n    }, 50);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = delta => {\n    window.autoReader.speed = Math.max(100, window.autoReader.speed + delta);\n    setAutoReaderState(prev => ({\n      ...prev,\n      speed: window.autoReader.speed\n    }));\n    if (window.autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async delta => {\n    const newPage = currentPage + delta;\n    if (newPage < 1 || newPage > totalPages) return;\n    const wasAutoReading = readingMode === 'auto-reader' && window.autoReader.intervalId;\n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n    const wasFlashReading = readingMode === 'flash-reading' && window.flashReader && window.flashReader.isPlaying;\n\n    // 如果正在自动阅读或节奏阅读，先停止\n    if (wasAutoReading) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n    }\n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    if (wasFlashReading && window.flashReader) {\n      window.flashReader.cleanup();\n    }\n\n    // 更新页码\n    setCurrentPage(newPage);\n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 按当前阅读模式处理内容\n      let processedContent = '';\n      switch (readingMode) {\n        case 'follow-mouse':\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'auto-reader':\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'rhythm':\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'naked-eye-3d':\n          processedContent = applyNakedEye3dEffect(extractedText);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffect(extractedText);\n          break;\n        case 'flash-reading':\n          processedContent = createFlashReadingContent(extractedText);\n          setTimeout(() => {\n            initializeFlashReading();\n            if (wasFlashReading) {\n              const startBtn = document.getElementById('flash-reading-start');\n              if (startBtn) startBtn.click();\n            }\n          }, 100);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n\n      // 更新页面内容\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        contentArea.textContent = '';\n        contentArea.innerHTML = processedContent;\n\n        // 滚动到页面顶部\n        window.scrollTo(0, 0);\n        if (contentArea.scrollTo) {\n          contentArea.scrollTo(0, 0);\n        }\n\n        // 重新启动对应的阅读模式\n        if (wasAutoReading) {\n          setTimeout(initializeAutoReader, 50);\n        } else if (wasRhythmReading && window.rhythmReader) {\n          setTimeout(() => {\n            window.rhythmReader.start();\n          }, 50);\n        } else if (readingMode === 'naked-eye-3d') {\n          setTimeout(() => {\n            initializeNakedEye3D();\n            applyDarkBackground();\n          }, 50);\n        } else if (readingMode === 'comfortable-3d') {\n          setTimeout(() => {\n            applyDarkBackground();\n          }, 50);\n        }\n      }\n    } catch (error) {\n      console.error('翻页失败:', error);\n    }\n  };\n\n  // 修改后的监听器设置函数\n  const addMouseFollowListeners = () => {\n    if (readingMode !== 'follow-mouse') return;\n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n\n    // 清理旧的监听器\n    contentArea.removeEventListener('mousemove', handleMouseMove);\n    contentArea.removeEventListener('mouseleave', clearAllHighlights);\n\n    // 添加新的监听器\n    contentArea.addEventListener('mousemove', handleMouseMove);\n    contentArea.addEventListener('mouseleave', clearAllHighlights);\n\n    // 确保所有段落都有正确的样式\n    document.querySelectorAll('.pdf-paragraph').forEach(p => {\n      p.style.position = 'relative';\n      p.style.lineHeight = '1.5';\n    });\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = text => {\n    // 分段\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n\n    // 创建HTML内容\n    let htmlContent = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      htmlContent += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 应用静态高亮\n  const applyStaticHighlight = text => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    let htmlContent = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      // 新增强制清理逻辑\n      const cleanParagraph = paragraph.replace(/<span class=\"text-line\">/g, '').replace(/<\\/span>/g, '');\n      const highlightedText = processTextWithHighlight(cleanParagraph);\n      htmlContent += `<p class=\"pdf-paragraph\">${highlightedText}</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 格式化文本用于鼠标跟随高亮模式\n  const formatTextForMouseFollow = text => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    let htmlContent = '<div class=\"pdf-content mouse-follow-content\">';\n    paragraphs.forEach(paragraph => {\n      // 将段落分割成行\n      const lines = paragraph.split('\\n').filter(line => line.trim());\n      htmlContent += `<p class=\"pdf-paragraph\" data-follow=\"true\" style=\"position: relative; line-height: 1.5;\">`;\n      lines.forEach((line, i) => {\n        // 每行用span包裹\n        htmlContent += `<span class=\"text-line\" style=\"display: block;\">${line}</span>`;\n      });\n      htmlContent += `</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 强制初始化字符位置（这是关键步骤！）\n  function forceInitReader() {\n    console.log(\"强制初始化阅读器...\");\n\n    // 1. 如果autoReader或charPositions不存在，创建它们\n    if (typeof window.autoReader === 'undefined') {\n      window.autoReader = {\n        charPositions: [],\n        intervalId: null,\n        currentIndex: 0,\n        speed: 30\n      };\n    }\n\n    // 2. 如果没有字符位置数据，尝试触发它的创建\n    if (!window.autoReader.charPositions || window.autoReader.charPositions.length === 0) {\n      console.log(\"未找到字符位置数据，尝试强制创建...\");\n\n      // 直接使用scanTextPositionsSimple函数\n      scanTextPositionsSimple();\n    }\n    return window.autoReader.charPositions && window.autoReader.charPositions.length > 0;\n  }\n\n  // 简单的文本位置扫描函数\n  function scanTextPositionsSimple() {\n    console.log(\"使用简单文本扫描...\");\n    window.autoReader.charPositions = [];\n    const contentElement = document.querySelector('.page-content');\n    if (!contentElement) {\n      console.error(\"找不到内容容器\");\n      return;\n    }\n\n    // 递归处理文本节点\n    function processTextNodes(element) {\n      if (element.nodeType === Node.TEXT_NODE) {\n        const text = element.textContent;\n        if (!text || text.trim() === '') return;\n\n        // 获取元素的位置信息\n        const range = document.createRange();\n\n        // 为每个字符创建一个独立的范围\n        for (let i = 0; i < text.length; i++) {\n          try {\n            range.setStart(element, i);\n            range.setEnd(element, i + 1);\n            const rect = range.getBoundingClientRect();\n            if (rect.width > 0 && rect.height > 0) {\n              window.autoReader.charPositions.push({\n                char: text[i],\n                x: rect.left + rect.width / 2,\n                y: rect.top + rect.height / 2,\n                element: element.parentElement\n              });\n            }\n          } catch (e) {\n            console.warn(\"无法处理字符\", e);\n          }\n        }\n      } else if (element.nodeType === Node.ELEMENT_NODE) {\n        // 递归处理子元素\n        for (const child of element.childNodes) {\n          processTextNodes(child);\n        }\n      }\n    }\n    processTextNodes(contentElement);\n    console.log(\"扫描完成，找到字符数量:\", window.autoReader.charPositions.length);\n  }\n\n  // 处理文本应用裸眼3D效果\n  const applyNakedEye3dEffect = text => {\n    // 分段落处理\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    let htmlContent = '<div class=\"pdf-content naked-eye-3d-content\">';\n    paragraphs.forEach(paragraph => {\n      // 清理可能存在的标签\n      const cleanParagraph = paragraph.replace(/<span[^>]*>/g, '').replace(/<\\/span>/g, '');\n\n      // 分词处理，为一小部分词添加3D效果\n      const words = cleanParagraph.split(/(\\s+|[,.!?，。！？])/);\n      let processedText = '';\n      words.forEach(word => {\n        if (!word || /^\\s+$/.test(word) || /^[,.!?，。！？]$/.test(word)) {\n          // 保持空格和标点原样，但使其为白色\n          processedText += `<span class=\"normal-text\">${word}</span>`;\n          return;\n        }\n\n        // 约20%的单词应用3D效果\n        if (Math.random() < 0.2) {\n          // 创建裸眼3D效果\n          processedText += `<span class=\"naked-eye-3d-text\">${word}</span>`;\n        } else {\n          // 非3D文字显示为白色\n          processedText += `<span class=\"normal-text\">${word}</span>`;\n        }\n      });\n\n      // 包装成段落，应用ADHD友好的样式\n      htmlContent += `<p class=\"pdf-paragraph adhd-friendly\">${processedText}</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 添加裸眼3D样式\n  const addNakedEye3DStyles = () => {\n    // 避免重复添加\n    if (document.getElementById('naked-eye-3d-styles')) return;\n    const style = document.createElement('style');\n    style.id = 'naked-eye-3d-styles';\n    style.textContent = `\n      /* 深色背景以确保白色文字可见 */\n      .naked-eye-3d-content {\n        background-color: #222;\n        padding: 20px;\n        border-radius: 8px;\n      }\n      \n      /* 普通文字（白色） */\n      .normal-text {\n        color: white;\n        display: inline-block;\n        margin: 0;\n        padding: 0;\n      }\n      \n      /* 3D文字基本样式 */\n      .naked-eye-3d-text {\n        position: relative;\n        display: inline-block;\n        transform-style: preserve-3d;\n        color: white;  /* 基础颜色也是白色 */\n      }\n      \n      /* 3D效果 - 红色偏移 */\n      .naked-eye-3d-text::before {\n        content: attr(data-text);\n        position: absolute;\n        top: 0;\n        left: 0;\n        z-index: -1;\n        color: rgba(255, 0, 0, 0.8);\n        transform: translateX(-3px);\n      }\n      \n      /* 3D效果 - 青色偏移 */\n      .naked-eye-3d-text::after {\n        content: attr(data-text);\n        position: absolute;\n        top: 0;\n        left: 0;\n        z-index: -1;\n        color: rgba(0, 255, 255, 0.8);\n        transform: translateX(3px);\n      }\n      \n      /* ADHD友好样式 */\n      .adhd-friendly {\n        font-size: 1.1em;\n        line-height: 1.8;\n        color: white;\n        padding: 15px 0;\n      }\n    `;\n    document.head.appendChild(style);\n  };\n\n  // 在裸眼3D模式初始化后处理元素\n  const initializeNakedEye3D = () => {\n    // 为裸眼3D文本元素添加文本内容作为data属性\n    document.querySelectorAll('.naked-eye-3d-text').forEach(el => {\n      el.setAttribute('data-text', el.textContent);\n    });\n\n    // 确保深色背景已应用\n    applyDarkBackground();\n  };\n\n  // 在切换到裸眼3D模式时应用深色背景\n  const applyDarkBackground = () => {\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.style.backgroundColor = '#222';\n    }\n  };\n\n  // 在离开裸眼3D模式时恢复背景\n  const restoreDarkBackground = () => {\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.style.backgroundColor = '';\n    }\n  };\n\n  // 添加改进的3D文字样式\n  const addComfortable3DStyles = () => {\n    // 避免重复添加\n    if (document.getElementById('comfortable-3d-styles')) return;\n    const style = document.createElement('style');\n    style.id = 'comfortable-3d-styles';\n    style.textContent = `\n      /* 深色背景 */\n      .comfortable-3d-content {\n        background-color: #222;\n        padding: 20px;\n        border-radius: 8px;\n      }\n      \n      /* 普通文字（白色） */\n      .normal-text {\n        color: white;\n        display: inline-block;\n        margin: 0;\n        padding: 0;\n      }\n      \n      /* 柔和浮雕效果 */\n      .emboss-3d-text {\n        display: inline-block;\n        color: #ff0000;\n        text-shadow: \n          -1px -1px 1px rgba(255,0,0,0.6),\n          1px 1px 1px rgba(255,0,0,0.6);\n        position: relative;\n        font-weight: bold;\n        margin: 0;\n        padding: 0;\n      }\n      \n      /* 悬浮效果 */\n      .float-3d-text {\n        display: inline-block;\n        color: #ff0000;\n        position: relative;\n        transform: translateY(-2px);\n        text-shadow: 0 4px 3px rgba(255,0,0,0.5);\n        margin: 0;\n        padding: 0;\n      }\n      \n      /* 渐变效果 */\n      .gradient-3d-text {\n        display: inline-block;\n        background: linear-gradient(to bottom, #ff0000 30%, #ff6666 100%);\n        -webkit-background-clip: text;\n        background-clip: text;\n        -webkit-text-fill-color: transparent;\n        text-fill-color: transparent;\n        text-shadow: 0px 2px 2px rgba(255,0,0,0.2);\n        font-weight: bold;\n        margin: 0;\n        padding: 0;\n      }\n      \n      /* ADHD友好样式 */\n      .adhd-friendly {\n        font-size: 1.1em;\n        line-height: 1.8;\n        color: white;\n        padding: 15px 0;\n      }\n    `;\n    document.head.appendChild(style);\n  };\n\n  // 处理文本应用多种柔和3D效果\n  const applyComfortable3dEffect = text => {\n    // 分段落处理\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    let htmlContent = '<div class=\"pdf-content comfortable-3d-content\">';\n\n    // 3D效果类型数组\n    const effectClasses = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n    paragraphs.forEach(paragraph => {\n      // 清理可能存在的标签\n      const cleanParagraph = paragraph.replace(/<span[^>]*>/g, '').replace(/<\\/span>/g, '');\n\n      // 分词处理\n      const words = cleanParagraph.split(/(\\s+|[,.!?，。！？])/);\n      let processedText = '';\n      words.forEach(word => {\n        if (!word || /^\\s+$/.test(word) || /^[,.!?，。！？]$/.test(word)) {\n          // 保持空格和标点原样，但使其为白色\n          processedText += `<span class=\"normal-text\">${word}</span>`;\n          return;\n        }\n\n        // 约20%的单词应用3D效果\n        if (Math.random() < 0.2) {\n          // 随机选择一种3D效果\n          const effectClass = effectClasses[Math.floor(Math.random() * effectClasses.length)];\n          processedText += `<span class=\"${effectClass}\">${word}</span>`;\n        } else {\n          // 非3D文字显示为白色\n          processedText += `<span class=\"normal-text\">${word}</span>`;\n        }\n      });\n\n      // 包装成段落，应用ADHD友好的样式\n      htmlContent += `<p class=\"pdf-paragraph adhd-friendly\">${processedText}</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 添加闪读模式样式\n  const addFlashReadingStyles = () => {\n    if (document.getElementById('flash-reading-styles')) return;\n    const style = document.createElement('style');\n    style.id = 'flash-reading-styles';\n    style.textContent = `\n      .flash-reading-container {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        height: 80vh;\n        width: 100%;\n        background-color: #222;\n        color: white;\n      }\n      \n      .flash-reading-display {\n        font-size: 2em;\n        min-height: 3em;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        text-align: center;\n        padding: 20px;\n        margin: 40px 0;\n        width: 80%;\n        max-width: 800px;\n        border-radius: 10px;\n        background-color: rgba(255,255,255,0.05);\n        transition: background-color 0.3s ease;\n      }\n      \n      @keyframes flash-in {\n        0% { opacity: 0; transform: scale(0.95); }\n        100% { opacity: 1; transform: scale(1); }\n      }\n      \n      .flash-reading-animate {\n        animation: flash-in 0.3s ease forwards;\n      }\n      \n      .flash-reading-controls {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        width: 80%;\n        max-width: 600px;\n        background-color: rgba(255,255,255,0.1);\n        padding: 20px;\n        border-radius: 10px;\n      }\n      \n      .flash-reading-slider-container {\n        width: 100%;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        margin-bottom: 15px;\n      }\n      \n      .flash-reading-slider {\n        width: 100%;\n        margin: 10px 0;\n      }\n      \n      .flash-reading-buttons {\n        display: flex;\n        gap: 10px;\n        margin-top: 15px;\n      }\n      \n      .flash-reading-button {\n        padding: 8px 16px;\n        background-color: #4CAF50;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        cursor: pointer;\n        font-size: 16px;\n      }\n      \n      .flash-reading-button:hover {\n        background-color: #3e8e41;\n      }\n      \n      .flash-reading-button.pause {\n        background-color: #f44336;\n      }\n      \n      .flash-reading-button.pause:hover {\n        background-color: #d32f2f;\n      }\n      \n      .flash-reading-stats {\n        margin-top: 15px;\n        font-size: 14px;\n        color: #aaa;\n      }\n    `;\n    document.head.appendChild(style);\n  };\n\n  // 将文本分割成句子\n  const splitTextIntoSentences = text => {\n    // 匹配任意标点符号\n    const punctuationPattern = /[,.!?，。！？；;：:、]/g;\n    const sentences = [];\n    let lastIndex = 0;\n    let match;\n    while ((match = punctuationPattern.exec(text)) !== null) {\n      const endIndex = match.index + 1; // 包含标点符号\n      const sentence = text.slice(lastIndex, endIndex).trim();\n      if (sentence) {\n        sentences.push(sentence);\n      }\n      lastIndex = endIndex;\n    }\n\n    // 处理剩余的文本\n    if (lastIndex < text.length) {\n      const remainingText = text.slice(lastIndex).trim();\n      if (remainingText) {\n        sentences.push(remainingText);\n      }\n    }\n    return sentences;\n  };\n\n  // 创建闪读模式的HTML结构\n  const createFlashReadingContent = text => {\n    const sentences = splitTextIntoSentences(text);\n    window.flashReader = {\n      sentences: sentences,\n      currentIndex: 0,\n      isPlaying: false,\n      speed: 1000,\n      intervalId: null\n    };\n    let htmlContent = `\n      <div class=\"flash-reading-container\">\n        <div id=\"flash-reading-display\" class=\"flash-reading-display\">\n          点击\"开始\"按钮开始闪读\n        </div>\n        \n        <div class=\"flash-reading-controls\">\n          <div class=\"flash-reading-slider-container\">\n            <label for=\"flash-reading-speed\">\n              速度: <span id=\"flash-reading-speed-value\">1000ms</span>\n            </label>\n            <input \n              type=\"range\" \n              id=\"flash-reading-speed\" \n              class=\"flash-reading-slider\" \n              min=\"200\" \n              max=\"3000\" \n              step=\"100\" \n              value=\"1000\"\n            >\n          </div>\n          \n          <div class=\"flash-reading-buttons\">\n            <button id=\"flash-reading-start\" class=\"flash-reading-button\">开始</button>\n            <button id=\"flash-reading-pause\" class=\"flash-reading-button pause\" disabled>暂停</button>\n            <button id=\"flash-reading-prev\" class=\"flash-reading-button\">上一句</button>\n            <button id=\"flash-reading-next\" class=\"flash-reading-button\">下一句</button>\n          </div>\n          \n          <div class=\"flash-reading-stats\">\n            进度: <span id=\"flash-reading-progress\">0/${sentences.length}</span>\n          </div>\n        </div>\n      </div>\n    `;\n    return htmlContent;\n  };\n\n  // 初始化闪读模式的控制逻辑\n  const initializeFlashReading = () => {\n    const displayEl = document.getElementById('flash-reading-display');\n    const speedSlider = document.getElementById('flash-reading-speed');\n    const speedValue = document.getElementById('flash-reading-speed-value');\n    const startBtn = document.getElementById('flash-reading-start');\n    const pauseBtn = document.getElementById('flash-reading-pause');\n    const prevBtn = document.getElementById('flash-reading-prev');\n    const nextBtn = document.getElementById('flash-reading-next');\n    const progressEl = document.getElementById('flash-reading-progress');\n    if (!displayEl || !speedSlider || !speedValue || !startBtn || !pauseBtn || !prevBtn || !nextBtn || !progressEl) {\n      console.error('闪读模式初始化失败：缺少必要的DOM元素');\n      return;\n    }\n    const reader = window.flashReader;\n    if (!reader || !Array.isArray(reader.sentences) || reader.sentences.length === 0) {\n      displayEl.textContent = '没有可用的文本内容';\n      return;\n    }\n    const updateProgress = () => {\n      progressEl.textContent = `${reader.currentIndex + 1}/${reader.sentences.length}`;\n    };\n    const displayCurrentSentence = () => {\n      if (reader.currentIndex >= 0 && reader.currentIndex < reader.sentences.length) {\n        displayEl.classList.remove('flash-reading-animate');\n        displayEl.textContent = reader.sentences[reader.currentIndex];\n        void displayEl.offsetWidth;\n        displayEl.classList.add('flash-reading-animate');\n        updateProgress();\n      }\n    };\n    const advanceToNextSentence = () => {\n      if (reader.currentIndex < reader.sentences.length - 1) {\n        reader.currentIndex++;\n        displayCurrentSentence();\n      } else {\n        stopFlashReading();\n        displayEl.textContent = '阅读完成！';\n      }\n    };\n    const startFlashReading = () => {\n      if (reader.isPlaying) return;\n      reader.isPlaying = true;\n      startBtn.disabled = true;\n      pauseBtn.disabled = false;\n      displayCurrentSentence();\n      reader.intervalId = setInterval(() => {\n        advanceToNextSentence();\n      }, reader.speed);\n    };\n    const pauseFlashReading = () => {\n      if (!reader.isPlaying) return;\n      if (reader.intervalId) {\n        clearInterval(reader.intervalId);\n        reader.intervalId = null;\n      }\n      reader.isPlaying = false;\n      startBtn.disabled = false;\n      pauseBtn.disabled = true;\n    };\n    const stopFlashReading = () => {\n      if (reader.intervalId) {\n        clearInterval(reader.intervalId);\n        reader.intervalId = null;\n      }\n      reader.isPlaying = false;\n      startBtn.disabled = false;\n      pauseBtn.disabled = true;\n    };\n    const showPreviousSentence = () => {\n      if (reader.currentIndex > 0) {\n        pauseFlashReading();\n        reader.currentIndex--;\n        displayCurrentSentence();\n      }\n    };\n    const showNextSentence = () => {\n      if (reader.currentIndex < reader.sentences.length - 1) {\n        pauseFlashReading();\n        reader.currentIndex++;\n        displayCurrentSentence();\n      }\n    };\n    speedSlider.addEventListener('input', function () {\n      const newSpeed = parseInt(this.value);\n      reader.speed = newSpeed;\n      speedValue.textContent = `${newSpeed}ms`;\n      if (reader.isPlaying) {\n        clearInterval(reader.intervalId);\n        reader.intervalId = setInterval(() => {\n          advanceToNextSentence();\n        }, reader.speed);\n      }\n    });\n    startBtn.addEventListener('click', startFlashReading);\n    pauseBtn.addEventListener('click', pauseFlashReading);\n    prevBtn.addEventListener('click', showPreviousSentence);\n    nextBtn.addEventListener('click', showNextSentence);\n    const handleKeydown = function (event) {\n      if (document.activeElement.tagName === 'INPUT') return;\n      switch (event.key) {\n        case ' ':\n          reader.isPlaying ? pauseFlashReading() : startFlashReading();\n          event.preventDefault();\n          break;\n        case 'ArrowLeft':\n          showPreviousSentence();\n          event.preventDefault();\n          break;\n        case 'ArrowRight':\n          showNextSentence();\n          event.preventDefault();\n          break;\n      }\n    };\n    document.addEventListener('keydown', handleKeydown);\n    reader.cleanup = () => {\n      document.removeEventListener('keydown', handleKeydown);\n      stopFlashReading();\n    };\n    updateProgress();\n  };\n\n  // 初始化自动阅读器\n  const initializeAutoReader = () => {\n    console.log(\"【自动阅读】初始化中...\");\n\n    // 确保全局对象存在\n    if (!window.autoReader) {\n      window.autoReader = {\n        charPositions: [],\n        intervalId: null,\n        currentIndex: 0,\n        speed: 300,\n        isActive: false\n      };\n    }\n\n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) {\n      console.error(\"【自动阅读】错误：找不到内容容器\");\n      return;\n    }\n\n    // 确保容器有正确的定位\n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n\n    // 扫描字符位置\n    window.autoReader.charPositions = getAllCharacterPositions(contentContainer);\n    console.log(`【自动阅读】找到 ${window.autoReader.charPositions.length} 个字符位置`);\n\n    // 如果没有找到字符位置，尝试使用简单扫描\n    if (window.autoReader.charPositions.length === 0) {\n      console.log(\"【自动阅读】尝试使用简单扫描...\");\n      scanTextPositionsSimple();\n    }\n\n    // 如果还是没有字符位置，显示错误\n    if (window.autoReader.charPositions.length === 0) {\n      console.error(\"【自动阅读】错误：无法获取字符位置\");\n      return;\n    }\n\n    // 重置索引\n    window.autoReader.currentIndex = 0;\n\n    // 创建视觉元素\n    createAutoReaderElements(contentContainer);\n\n    // 开始阅读\n    startAutoReader();\n  };\n\n  // 创建自动阅读视觉元素\n  function createAutoReaderElements(container) {\n    console.log(\"【自动阅读】创建视觉元素\");\n\n    // 移除可能存在的旧元素\n    const oldCursor = document.getElementById('auto-reader-cursor');\n    if (oldCursor && oldCursor.parentNode) {\n      oldCursor.parentNode.removeChild(oldCursor);\n    }\n    const oldHighlight = document.getElementById('auto-reader-highlight');\n    if (oldHighlight && oldHighlight.parentNode) {\n      oldHighlight.parentNode.removeChild(oldHighlight);\n    }\n\n    // 创建光标\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 12px;\n      height: 12px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translate(-50%, -50%);\n      box-shadow: 0 0 10px #00ff00;\n      z-index: 9999;\n      opacity: 1;\n      transition: none;\n    `;\n    container.appendChild(cursor);\n\n    // 创建高亮\n    const highlight = document.createElement('div');\n    highlight.id = 'auto-reader-highlight';\n    highlight.style.cssText = `\n      position: absolute;\n      width: 20px;\n      height: 20px;\n      background-color: rgba(0, 255, 0, 0.3);\n      border-radius: 2px;\n      pointer-events: none;\n      z-index: 998;\n      opacity: 1;\n      transition: none;\n    `;\n    container.appendChild(highlight);\n    console.log(\"【自动阅读】视觉元素创建完成\");\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2911,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2910,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"upload-btn\",\n        children: [\"\\u9009\\u62E9\\u6587\\u4EF6\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".pdf,.txt\",\n          onChange: handleFileUpload,\n          style: {\n            display: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2915,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2913,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2909,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2925,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mode-selector\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: readingMode,\n              onChange: handleReadingModeChange,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"normal\",\n                children: \"\\u666E\\u901A\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2929,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"static\",\n                children: \"\\u9759\\u6001\\u9AD8\\u4EAE\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2930,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"follow-mouse\",\n                children: \"\\u9F20\\u6807\\u8DDF\\u968F\\u9AD8\\u4EAE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2931,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"auto-reader\",\n                children: \"\\u81EA\\u52A8\\u9605\\u8BFB\\u5668\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2932,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"rhythm\",\n                children: \"\\u8282\\u594F\\u9605\\u8BFB\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2933,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"flash-reading\",\n                children: \"\\u95EA\\u8BFB\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2934,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"comfortable-3d\",\n                children: \"\\u8212\\u90023D\\u6587\\u5B57\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2935,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2928,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2927,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mode-selector\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: posMode,\n              onChange: e => setPosMode(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"none\",\n                children: \"\\u65E0\\u8BCD\\u6027\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2940,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"noun\",\n                children: \"\\u540D\\u8BCD\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2941,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"all\",\n                children: \"\\u5168\\u8BCD\\u6027\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2942,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2939,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2938,\n            columnNumber: 13\n          }, this), readingMode === 'auto-reader' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"speed-control\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => adjustSpeed(-100),\n              children: \"-\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2947,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [autoReaderState.speed, \"ms\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2948,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => adjustSpeed(100),\n              children: \"+\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2949,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2946,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2926,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2924,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-content\",\n        children: content ? /*#__PURE__*/_jsxDEV(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: content\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2956,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-state\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u8BF7\\u4E0A\\u4F20PDF\\u6216TXT\\u6587\\u4EF6\\u5F00\\u59CB\\u9605\\u8BFB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2959,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2958,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2954,\n        columnNumber: 9\n      }, this), content && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"page-btn prev\",\n          onClick: () => changePage(-1),\n          disabled: currentPage === 1,\n          children: \"\\u4E0A\\u4E00\\u9875\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2965,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"page-info\",\n          children: [\"\\u7B2C \", currentPage, \" \\u9875 / \\u5171 \", totalPages, \" \\u9875\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2968,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"page-btn next\",\n          onClick: () => changePage(1),\n          disabled: currentPage === totalPages,\n          children: \"\\u4E0B\\u4E00\\u9875\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2971,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2964,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2923,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 2908,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"FdIIE1mY5AAmB921foSmrxDLqNQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","pdfjsLib","pdfjsViewer","marked","pdfjs","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","window","currentPage","totalPages","changePage","eventTracker","mouseFollowHandlers","autoReader","charPositions","intervalId","currentIndex","speed","active","rhythmReaderGlobal","ensureReaderCursorExists","console","log","contentContainer","document","querySelector","error","style","position","cursor","getElementById","body","contains","remove","createElement","id","cssText","appendChild","display","opacity","highlight","rhythmReadingInitialized","setStorage","key","value","sessionStorage","setItem","localStorage","e","getStorage","getItem","rhythmReader","readIndices","Set","charElements","pageTransitionInProgress","initializeTextNodes","textNodes","findTextNodes","length","showNotification","forEach","node","text","nodeValue","trim","fragment","createDocumentFragment","i","char","span","textContent","className","dataset","rhythmIndex","whitespace","margin","padding","border","backgroundColor","push","parentNode","replaceChild","element","childNodes","nodeType","Node","TEXT_NODE","ELEMENT_NODE","updateTextColors","index","color","fontWeight","has","background","moveToNextChar","add","clickNextPageButton","stop","scrollToCurrentChar","rect","getBoundingClientRect","lineHeight","parseInt","getComputedStyle","Math","max","height","isContainerScrollable","scrollHeight","clientHeight","includes","overflowY","containerRect","relativeTop","top","scrollTop","visibleTop","visibleBottom","scrollBy","behavior","viewportTop","scrollY","viewportBottom","innerHeight","absoluteTop","addSpeedSlider","slider","container","right","borderRadius","boxShadow","zIndex","alignItems","maxWidth","label","marginRight","input","type","min","step","width","valueDisplay","marginLeft","minWidth","self","addEventListener","newSpeed","clearInterval","setInterval","restoreOriginalText","charSpans","querySelectorAll","parentNodeMap","Map","parent","set","get","spans","sort","a","b","indexA","indexB","groups","currentGroup","prevIndex","previousSibling","group","map","join","textNode","createTextNode","removeChild","start","setTimeout","clear","hijackPageTurningFunctions","setupPageNavigationListeners","message","notification","left","transform","fontSize","_originalChangePage","page","wasActive","rhythmReadingActive","undefined","warn","something","err","target","tagName","getAttribute","toLowerCase","ariaLabel","nextPageSelectors","nextPageButton","selector","elements","el","offsetParent","buttons","button","click","isRhythmActive","stopRhythmSafely","setupPageLoadListener","observer","MutationObserver","mutations","contentChanges","some","m","addedNodes","observe","childList","subtree","App","_s","pages","setPages","setCurrentPage","setTotalPages","fileName","setFileName","loading","setLoading","fileRef","file","setFile","pdfInstance","setPdfInstance","extractedTextPages","setExtractedTextPages","readingMode","setReadingMode","posMode","setPosMode","markdownContent","setMarkdownContent","readerContainerRef","autoReadGuideRef","autoReadIntervalRef","content","setContent","pdfDocument","setPdfDocument","autoReaderState","setAutoReaderState","pageContainer","isUserScrolling","scrollTimeout","contentLoaded","current","initializeMouseFollow","handlePdfFile","fileURL","URL","createObjectURL","loadingTask","getDocument","pdf","promise","numPages","extractAndProcessPage","alert","pageNum","getPage","getTextContent","viewport","getViewport","scale","isTableOfContents","detectIfTocPage","processTocPage","processContentPage","addMouseFollowListeners","textItems","items","fullText","item","str","hasTocKeywords","test","hasPageNumberPatterns","shortLinesCount","linesWithNumbersCount","lineMap","yKey","round","lines","values","line","lineText","shortLineRatio","numberLineRatio","htmlContent","x","y","sqrt","fontName","spacedText","split","getTextNodeAtPosition","nodes","range","createRange","selectNodeContents","rects","getClientRects","j","bottom","found","processTextWithHighlight","words","result","lastColor","word","random","mode","extractedText","replace","processedContent","formatTextToHtml","applyStaticHighlight","formatTextForMouseFollow","handleTxtFile","pageTexts","paragraph","fontFamily","handleFileUpload","files","getAllCharacterPositions","walker","createTreeWalker","NodeFilter","SHOW_TEXT","positions","nextNode","currentNode","setStart","setEnd","filter","p","yDiff","abs","scrollElementToCenter","elementY","targetScrollTop","containerVisibleHeight","scrollTo","absoluteElementY","createReaderCursor","head","isSentenceEnd","charPosition","sentenceEndMarks","nextIndex","findSentenceStart","prev","isInVisibleArea","threshold","topThreshold","bottomThreshold","startAutoReader","stopAutoReader","_window$autoReader$ch","updateReaderCursorPosition","pos","contentRect","relativeX","relativeY","scrollTarget","buffer","removeItem","handleReadingModeChange","newMode","prevMode","restoreDarkBackground","flashReader","cleanup","cleanupDOM","applyNakedEye3dEffect","applyDarkBackground","applyComfortable3dEffect","addFlashReadingStyles","createFlashReadingContent","initializeFlashReading","contentArea","innerHTML","initializeAutoReader","initializeNakedEye3D","removeMouseFollowListeners","threeDElements","comfortable3DElements","flashReadingElements","highlights","contentHTML","newContentArea","cloneNode","paragraphs","removeAttribute","elementsToRemove","classList","handleAutoScroll","isScrolling","updateCursorPosition","force","handleMouseMove","mouseTarget","elementFromPoint","clientX","clientY","targetParagraph","closest","targetRect","lineHighlight","paragraphRect","pointerEvents","transition","clearAllHighlights","event","handler","removeEventListener","addAutoReaderStyles","addNakedEye3DStyles","addComfortable3DStyles","offsetHeight","fakeEvent","MouseEvent","innerWidth","bubbles","dispatchEvent","adjustSpeed","delta","newPage","wasAutoReading","wasRhythmReading","wasFlashReading","isPlaying","startBtn","cleanParagraph","highlightedText","forceInitReader","scanTextPositionsSimple","contentElement","processTextNodes","parentElement","child","processedText","setAttribute","effectClasses","effectClass","floor","splitTextIntoSentences","punctuationPattern","sentences","lastIndex","match","exec","endIndex","sentence","slice","remainingText","displayEl","speedSlider","speedValue","pauseBtn","prevBtn","nextBtn","progressEl","reader","Array","isArray","updateProgress","displayCurrentSentence","offsetWidth","advanceToNextSentence","stopFlashReading","startFlashReading","disabled","pauseFlashReading","showPreviousSentence","showNextSentence","handleKeydown","activeElement","preventDefault","isActive","createAutoReaderElements","oldCursor","oldHighlight","children","_jsxFileName","lineNumber","columnNumber","accept","onChange","onClick","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["D:/adhd-read-helper/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 添加全局事件跟踪对象\nwindow.eventTracker = window.eventTracker || {\n  mouseFollowHandlers: []\n};\n\n// 简化自动阅读器全局对象\nwindow.autoReader = {\n  charPositions: [],\n  intervalId: null,\n  currentIndex: 0,\n  speed: 300,\n  active: false\n};\n\n// 添加新的节奏阅读模式代码\n// 全局变量，确保在页面切换后仍然保持状态\nwindow.rhythmReaderGlobal = window.rhythmReaderGlobal || {\n  active: false,\n  speed: 300\n};\n\n// 关键函数：确保光标存在\nfunction ensureReaderCursorExists() {\n  console.log(\"【自动阅读】检查并确保光标存在\");\n  \n  const contentContainer = document.querySelector('.page-content');\n  if (!contentContainer) {\n    console.error(\"【自动阅读】错误：找不到内容容器\");\n    return false;\n  }\n  \n  // 强制设置容器样式\n  contentContainer.style.position = contentContainer.style.position || 'relative';\n  \n  // 检查光标是否存在\n  let cursor = document.getElementById('auto-reader-cursor');\n  if (!cursor || !document.body.contains(cursor)) {\n    console.log(\"【自动阅读】光标不存在，创建新光标\");\n    \n    // 移除可能的残留元素\n    if (cursor) cursor.remove();\n    \n    // 创建新光标\n    cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 12px;\n      height: 12px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translate(-50%, -50%);\n      box-shadow: 0 0 10px #00ff00;\n      z-index: 9999;\n      opacity: 1;\n      transition: none;\n    `;\n    contentContainer.appendChild(cursor);\n  } else {\n    console.log(\"【自动阅读】光标已存在\");\n    // 确保光标可见\n    cursor.style.display = 'block';\n    cursor.style.opacity = '1';\n  }\n  \n  // 检查高亮元素是否存在\n  let highlight = document.getElementById('auto-reader-highlight');\n  if (!highlight || !document.body.contains(highlight)) {\n    console.log(\"【自动阅读】高亮不存在，创建新高亮\");\n    \n    // 移除可能的残留元素\n    if (highlight) highlight.remove();\n    \n    // 创建新高亮\n    highlight = document.createElement('div');\n    highlight.id = 'auto-reader-highlight';\n    highlight.style.cssText = `\n      position: absolute;\n      width: 20px;\n      height: 20px;\n      background-color: rgba(0, 255, 0, 0.3);\n      border-radius: 2px;\n      pointer-events: none;\n      z-index: 998;\n      opacity: 1;\n      transition: none;\n    `;\n    contentContainer.appendChild(highlight);\n  } else {\n    console.log(\"【自动阅读】高亮已存在\");\n    // 确保高亮可见\n    highlight.style.display = 'block';\n    highlight.style.opacity = '1';\n  }\n  \n  return true;\n}\n\n// 节奏阅读模式 - 确保手动翻页后也能自动恢复\n(function() {\n  console.log(\"正在初始化节奏阅读模式...\");\n  \n  // 确保只初始化一次\n  if (window.rhythmReadingInitialized) {\n    console.log(\"节奏阅读模式已经初始化过，跳过\");\n    return;\n  }\n  window.rhythmReadingInitialized = true;\n  \n  // 改进的存储函数，同时使用session和local storage提高可靠性\n  function setStorage(key, value) {\n    try {\n      sessionStorage.setItem(key, value);\n      localStorage.setItem(key, value);\n    } catch (e) {\n      console.error(\"无法写入存储\", e);\n    }\n  }\n  \n  function getStorage(key) {\n    try {\n      // 优先使用sessionStorage，这样更适合单次会话\n      return sessionStorage.getItem(key) || localStorage.getItem(key);\n    } catch (e) {\n      console.error(\"无法读取存储\", e);\n      return null;\n    }\n  }\n  \n  // 状态变量和功能对象\n  const rhythmReader = {\n    active: false,\n    intervalId: null,\n    speed: 300,\n    currentIndex: 0,\n    readIndices: new Set(),\n    charElements: [],\n    pageTransitionInProgress: false,\n    \n    // 初始化文本节点\n    initializeTextNodes: function() {\n      console.log(\"【节奏阅读】初始化文本节点...\");\n      \n    // 重置字符元素数组\n      this.charElements = [];\n    \n    // 获取内容容器\n      const contentContainer = document.querySelector('.page-content');\n      if (!contentContainer) {\n        console.error(\"【节奏阅读】找不到内容容器\");\n        return false;\n      }\n    \n    // 查找所有文本节点并处理\n    const textNodes = [];\n      this.findTextNodes(contentContainer, textNodes);\n    \n    if (textNodes.length === 0) {\n        console.error(\"【节奏阅读】未找到文本节点\");\n        this.showNotification(\"无法启动节奏阅读：未找到文本内容\");\n      return false;\n    }\n    \n      console.log(`【节奏阅读】找到 ${textNodes.length} 个文本节点`);\n    \n    // 为每个文本节点创建字符span\n    textNodes.forEach(node => {\n      const text = node.nodeValue;\n      if (!text || text.trim() === '') return;\n      \n      // 创建文档片段来存放字符span\n      const fragment = document.createDocumentFragment();\n      \n      // 为每个字符创建span\n      for (let i = 0; i < text.length; i++) {\n        const char = text[i];\n        const span = document.createElement('span');\n        span.textContent = char;\n        span.className = 'rhythm-char';\n        span.dataset.rhythmIndex = this.charElements.length;\n        \n        // 如果是空白字符，添加一个标志\n        if (char.trim() === '') {\n          span.dataset.whitespace = 'true';\n        }\n        \n          // 保持原始样式，不设置背景\n        span.style.display = 'inline';\n        span.style.margin = '0';\n        span.style.padding = '0';\n        span.style.border = 'none';\n        span.style.backgroundColor = 'transparent';\n        \n        fragment.appendChild(span);\n          this.charElements.push(span);\n      }\n      \n      // 替换原始节点\n      if (node.parentNode) {\n        node.parentNode.replaceChild(fragment, node);\n      }\n    });\n    \n      console.log(`【节奏阅读】总共创建了 ${this.charElements.length} 个字符span`);\n      return this.charElements.length > 0;\n    },\n  \n  // 递归查找所有文本节点\n    findTextNodes: function(element, textNodes) {\n    // 处理子节点\n    for (let i = 0; i < element.childNodes.length; i++) {\n      const node = element.childNodes[i];\n      \n      // 如果是文本节点且有内容\n      if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() !== '') {\n        textNodes.push(node);\n      } \n      // 如果是元素节点，递归处理\n      else if (node.nodeType === Node.ELEMENT_NODE) {\n        // 跳过读者UI元素\n        if (node.id === 'rhythm-speed-slider' || \n              node.id === 'rhythm-notification' ||\n            node.className === 'rhythm-char') {\n          continue;\n        }\n          this.findTextNodes(node, textNodes);\n      }\n    }\n    },\n  \n  // 更新文本颜色\n    updateTextColors: function() {\n    // 更新所有字符的颜色\n      this.charElements.forEach((span, index) => {\n      // 确定颜色\n      let color;\n      let fontWeight = 'inherit';\n      \n        if (index === this.currentIndex) {\n        color = '#00aa00'; // 当前阅读的字 - 绿色\n        fontWeight = 'bold';\n        } else if (index === this.currentIndex + 1 || index === this.currentIndex + 2) {\n        color = '#aaaaaa'; // 接下来两个字 - 淡灰色\n        } else if (this.readIndices.has(index)) {\n        color = '#ffffff'; // 已读字符 - 白色（表示已读）\n      } else {\n        color = 'rgba(160, 160, 160, 0.25)'; // 未读字符 - 非常淡的灰色（可见但不明显）\n      }\n      \n      span.style.color = color;\n      span.style.fontWeight = fontWeight;\n      \n      // 确保没有背景\n      span.style.backgroundColor = 'transparent';\n      span.style.background = 'none';\n    });\n    },\n  \n  // 移动到下一个字符\n    moveToNextChar: function() {\n    // 将当前字符标记为已读\n      this.readIndices.add(this.currentIndex);\n    \n    // 移动到下一个非空白字符\n    do {\n        this.currentIndex++;\n      \n      // 检查是否到达末尾\n        if (this.currentIndex >= this.charElements.length) {\n          console.log(\"【节奏阅读】已到达页尾，尝试翻页\");\n          \n          // 尝试点击下一页按钮\n          if (!this.clickNextPageButton()) {\n            // 如果没有找到下一页按钮，完全停止阅读\n            this.stop();\n          }\n          return;\n      }\n    } while (\n        this.currentIndex < this.charElements.length && \n        this.charElements[this.currentIndex] && \n        this.charElements[this.currentIndex].dataset.whitespace === 'true'\n    );\n    \n    // 更新颜色\n      this.updateTextColors();\n    \n    // 滚动到当前字符\n      this.scrollToCurrentChar();\n    },\n  \n  // 滚动到当前字符\n    scrollToCurrentChar: function() {\n      const span = this.charElements[this.currentIndex];\n    if (!span) return;\n    \n    const rect = span.getBoundingClientRect();\n    const contentContainer = document.querySelector('.page-content');\n    \n    // 估计行高\n    const lineHeight = parseInt(window.getComputedStyle(span).lineHeight) || \n                       Math.max(20, rect.height * 1.5);\n    \n    // 确定滚动容器\n    const isContainerScrollable = contentContainer && \n      contentContainer.scrollHeight > contentContainer.clientHeight &&\n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n    \n    if (isContainerScrollable) {\n      // 容器滚动\n      const containerRect = contentContainer.getBoundingClientRect();\n      const relativeTop = rect.top - containerRect.top + contentContainer.scrollTop;\n      \n      const visibleTop = contentContainer.scrollTop;\n      const visibleBottom = visibleTop + contentContainer.clientHeight;\n      \n      if (relativeTop < visibleTop + lineHeight || relativeTop > visibleBottom - lineHeight) {\n        contentContainer.scrollBy({\n          top: lineHeight * 2 * (relativeTop > visibleBottom - lineHeight ? 1 : -1),\n          behavior: 'smooth'\n        });\n      }\n    } else {\n      // 窗口滚动\n      const viewportTop = window.scrollY;\n      const viewportBottom = viewportTop + window.innerHeight;\n      const absoluteTop = rect.top + window.scrollY;\n      \n      if (absoluteTop < viewportTop + lineHeight || absoluteTop > viewportBottom - lineHeight) {\n        window.scrollBy({\n          top: lineHeight * 2 * (absoluteTop > viewportBottom - lineHeight ? 1 : -1),\n          behavior: 'smooth'\n        });\n      }\n    }\n    },\n    \n    // 添加速度滑块\n    addSpeedSlider: function() {\n      let slider = document.getElementById('rhythm-speed-slider');\n      if (slider) slider.remove();\n      \n      const container = document.createElement('div');\n      container.id = 'rhythm-speed-slider';\n      container.style.position = 'fixed';\n      container.style.top = '70px';\n      container.style.right = '20px';\n      container.style.backgroundColor = 'white';\n      container.style.padding = '10px';\n      container.style.borderRadius = '5px';\n      container.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';\n      container.style.zIndex = '10000';\n      container.style.display = 'flex';\n      container.style.alignItems = 'center';\n      container.style.maxWidth = '300px';\n      \n      const label = document.createElement('label');\n      label.textContent = '速度: ';\n      label.style.marginRight = '8px';\n      container.appendChild(label);\n      \n      const input = document.createElement('input');\n      input.type = 'range';\n      input.min = '50';\n      input.max = '1000';\n      input.step = '50';\n      input.value = this.speed;\n      input.style.width = '120px';\n      \n      const valueDisplay = document.createElement('span');\n      valueDisplay.textContent = `${this.speed}ms`;\n      valueDisplay.style.marginLeft = '8px';\n      valueDisplay.style.minWidth = '60px';\n      \n      const self = this;\n      input.addEventListener('input', function() {\n        const newSpeed = parseInt(this.value);\n        self.speed = newSpeed;\n        valueDisplay.textContent = `${newSpeed}ms`;\n        \n        if (self.intervalId) {\n          clearInterval(self.intervalId);\n          self.intervalId = setInterval(() => self.moveToNextChar(), newSpeed);\n        }\n      });\n      \n      container.appendChild(input);\n      container.appendChild(valueDisplay);\n      document.body.appendChild(container);\n    },\n  \n  // 恢复原始文本\n    restoreOriginalText: function() {\n    // 获取所有已创建的字符span\n    const charSpans = document.querySelectorAll('.rhythm-char');\n    \n    // 按父节点分组\n    const parentNodeMap = new Map();\n    \n    charSpans.forEach(span => {\n      const parent = span.parentNode;\n      if (!parent) return;\n      \n      if (!parentNodeMap.has(parent)) {\n        parentNodeMap.set(parent, []);\n      }\n      parentNodeMap.get(parent).push(span);\n    });\n    \n    // 对每个父节点，将连续的字符span合并回文本节点\n    parentNodeMap.forEach((spans, parent) => {\n      if (spans.length === 0) return;\n      \n      // 排序spans确保顺序正确\n      spans.sort((a, b) => {\n        const indexA = parseInt(a.dataset.rhythmIndex || '0');\n        const indexB = parseInt(b.dataset.rhythmIndex || '0');\n        return indexA - indexB;\n      });\n      \n      // 根据连续性分组\n      const groups = [];\n        if (spans.length > 0) {\n      let currentGroup = [spans[0]];\n      \n      for (let i = 1; i < spans.length; i++) {\n        const prevIndex = parseInt(spans[i-1].dataset.rhythmIndex || '0');\n        const currentIndex = parseInt(spans[i].dataset.rhythmIndex || '0');\n        \n        if (currentIndex === prevIndex + 1 && spans[i].previousSibling === spans[i-1]) {\n          currentGroup.push(spans[i]);\n        } else {\n          groups.push(currentGroup);\n          currentGroup = [spans[i]];\n        }\n      }\n      \n      groups.push(currentGroup);\n        }\n      \n      // 对每个连续组替换为文本节点\n      groups.forEach(group => {\n        if (group.length === 0) return;\n        \n        try {\n          const text = group.map(span => span.textContent).join('');\n          const textNode = document.createTextNode(text);\n          \n          // 替换第一个span，然后移除其余的\n          if (group[0].parentNode === parent) {\n            parent.replaceChild(textNode, group[0]);\n            for (let i = 1; i < group.length; i++) {\n              if (group[i].parentNode === parent) {\n                parent.removeChild(group[i]);\n              }\n            }\n          }\n        } catch (e) {\n            console.error(\"【节奏阅读】恢复文本时出错:\", e);\n        }\n      });\n    });\n    \n    // 清除字符元素数组\n      this.charElements = [];\n    },\n  \n  // 启动节奏阅读\n    start: function() {\n      console.log(\"【节奏阅读】启动中...\");\n      \n      // 检查是否正在进行页面转换\n      if (this.pageTransitionInProgress) {\n        console.log(\"【节奏阅读】页面转换正在进行中，延迟启动\");\n        setTimeout(() => this.start(), 500);\n        return;\n      }\n    \n    // 先停止已有的\n      this.stop(false);\n    \n    // 设置为活动状态\n      this.active = true;\n      setStorage('rhythmReadingActive', 'true');\n    \n    // 初始化文本\n      if (!this.initializeTextNodes()) {\n        console.error(\"【节奏阅读】无法初始化文本节点\");\n        return;\n      }\n\n      // 重要：始终从头开始阅读\n      this.currentIndex = 0;\n      this.readIndices.clear();\n      \n      // 添加速度滑块\n      this.addSpeedSlider();\n    \n    // 更新颜色\n      this.updateTextColors();\n    \n    // 滚动到开始位置\n      this.scrollToCurrentChar();\n    \n    // 设置阅读间隔\n      this.intervalId = setInterval(() => this.moveToNextChar(), this.speed);\n      \n      console.log(\"【节奏阅读】成功启动\");\n      \n      // 显示提示\n      this.showNotification(\"节奏阅读模式已启动\");\n      \n      // 劫持翻页函数 - 重要步骤\n      this.hijackPageTurningFunctions();\n      \n      // 设置页面导航事件监听\n      this.setupPageNavigationListeners();\n    },\n    \n    // 停止节奏阅读\n    stop: function(showNotification = true) {\n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n      }\n      \n      if (this.active) {\n        console.log(\"【节奏阅读】停止中...\");\n        this.active = false;\n        \n        // 仅当不是因翻页而停止时才清除活动状态\n        if (!this.pageTransitionInProgress) {\n          setStorage('rhythmReadingActive', 'false');\n        }\n        \n        // 恢复原始文本\n        this.restoreOriginalText();\n        \n        // 移除速度滑块\n        const slider = document.getElementById('rhythm-speed-slider');\n        if (slider) slider.remove();\n        \n        if (showNotification) {\n          this.showNotification(\"节奏阅读模式已停止\");\n        }\n      }\n    },\n    \n    // 显示通知\n    showNotification: function(message) {\n      let notification = document.getElementById('rhythm-notification');\n      if (notification) notification.remove();\n      \n      notification = document.createElement('div');\n      notification.id = 'rhythm-notification';\n      notification.textContent = message;\n      notification.style.position = 'fixed';\n      notification.style.top = '50%';\n      notification.style.left = '50%';\n      notification.style.transform = 'translate(-50%, -50%)';\n      notification.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';\n      notification.style.color = 'white';\n      notification.style.padding = '15px 25px';\n      notification.style.borderRadius = '5px';\n      notification.style.zIndex = '10001';\n      notification.style.fontSize = '18px';\n      \n      document.body.appendChild(notification);\n      \n      // 2秒后自动消失\n      setTimeout(() => {\n        if (notification && notification.parentNode) {\n          notification.parentNode.removeChild(notification);\n        }\n      }, 2000);\n    },\n    \n    // 劫持页面翻转函数 - 改进版本\n    hijackPageTurningFunctions: function() {\n      if (typeof window.changePage === 'function' && !window._originalChangePage) {\n        console.log(\"【节奏阅读】劫持changePage函数\");\n        window._originalChangePage = window.changePage;\n        \n        const self = this;\n        window.changePage = function(page) {\n          console.log(\"【节奏阅读】检测到changePage调用，参数:\", page);\n          \n          const wasActive = self.active;\n          self.pageTransitionInProgress = true;\n          \n          if (wasActive) {\n            self.stop(false);\n            setStorage('rhythmReadingActive', 'true'); \n            setStorage('rhythmReadingPending', 'true');\n            document.body.dataset.rhythmReadingActive = 'true';\n          }\n          \n          try {\n            if (page === undefined || page === null) {\n              console.warn('【节奏阅读】安全处理：page参数为空');\n              page = {};\n            }\n            \n            if (typeof page === 'object' && !page.something) {\n              console.log('【节奏阅读】添加空的something对象防止错误');\n              page.something = { active: false };\n            }\n            \n            window._originalChangePage(page);\n          } catch (err) {\n            console.error(\"【节奏阅读】翻页函数执行出错:\", err);\n            self.clickNextPageButton();\n          }\n          \n          setTimeout(() => {\n            self.pageTransitionInProgress = false;\n            \n            if (wasActive && getStorage('rhythmReadingPending') === 'true') {\n              setStorage('rhythmReadingPending', 'false');\n              console.log(\"【节奏阅读】翻页后重新启动\");\n              setTimeout(() => self.start(), 500);\n            }\n          }, 1000);\n        };\n      }\n    },\n    \n    // 设置页面导航事件监听 - 加强版\n    setupPageNavigationListeners: function() {\n      // 查找所有可能的翻页按钮\n      console.log(\"【节奏阅读】正在设置页面导航监听\");\n      \n      const self = this;\n      \n      // 使用事件委托来捕获所有可能的点击\n      document.addEventListener('click', function(e) {\n        // 检查点击的元素是否可能是翻页按钮\n        let target = e.target;\n        while (target && target !== document.body) {\n          // 检查是否是翻页元素\n          if (target.tagName === 'BUTTON' || target.tagName === 'A' || \n              target.getAttribute('role') === 'button') {\n            \n            const text = (target.textContent || '').trim().toLowerCase();\n            const ariaLabel = (target.getAttribute('aria-label') || '').toLowerCase();\n            \n            // 检查是否是翻页元素\n            if (text.includes('上一页') || text.includes('下一页') || \n                text.includes('prev') || text.includes('next') ||\n                ariaLabel.includes('page') || ariaLabel.includes('页') ||\n                text === '<' || text === '>' || text === '←' || text === '→') {\n              \n              if (self.active) {\n                console.log(`【节奏阅读】检测到可能的翻页元素点击: ${text || ariaLabel}`);\n                \n                // 标记页面转换开始\n                self.pageTransitionInProgress = true;\n                \n                // 保存状态到存储\n                setStorage('rhythmReadingActive', 'true');\n                setStorage('rhythmReadingPending', 'true');\n                document.body.dataset.rhythmReadingActive = 'true';\n                \n                // 停止当前的阅读\n                self.stop(false);\n                \n                // 添加延迟执行的监听器，确保数据在页面加载后恢复\n                setTimeout(() => {\n                  self.pageTransitionInProgress = false;\n                  \n                  if (getStorage('rhythmReadingPending') === 'true') {\n                    setStorage('rhythmReadingPending', 'false');\n                    self.start();\n                  }\n                }, 1500);\n              }\n              \n              break;\n            }\n          }\n          \n          target = target.parentNode;\n        }\n      });\n      \n      // 监听键盘导航事件\n      document.addEventListener('keydown', function(e) {\n        // 检查是否是翻页快捷键\n        if (['ArrowLeft', 'ArrowRight', 'PageUp', 'PageDown'].includes(e.key)) {\n          if (self.active) {\n            console.log(`【节奏阅读】检测到键盘翻页: ${e.key}`);\n            \n            // 保存状态到存储\n            setStorage('rhythmReadingActive', 'true');\n            setStorage('rhythmReadingPending', 'true');\n            \n            // 标记页面转换开始\n            self.pageTransitionInProgress = true;\n            \n            // 停止当前的阅读\n            self.stop(false);\n            \n            // 添加延迟执行的监听器\n            setTimeout(() => {\n              self.pageTransitionInProgress = false;\n              \n              if (getStorage('rhythmReadingPending') === 'true') {\n                setStorage('rhythmReadingPending', 'false');\n                self.start();\n              }\n            }, 1500);\n          }\n        }\n      });\n      \n      // 添加popstate监听器捕获浏览器前进/后退导航\n      window.addEventListener('popstate', function() {\n        if (self.active) {\n          console.log(\"【节奏阅读】检测到历史导航事件\");\n          \n          // 保存状态\n          setStorage('rhythmReadingActive', 'true');\n          setStorage('rhythmReadingPending', 'true');\n          \n          // 标记页面转换开始\n          self.pageTransitionInProgress = true;\n          \n          // 停止当前阅读\n          self.stop(false);\n          \n          // 延迟恢复\n          setTimeout(() => {\n            self.pageTransitionInProgress = false;\n            \n            if (getStorage('rhythmReadingPending') === 'true') {\n              setStorage('rhythmReadingPending', 'false');\n              self.start();\n            }\n          }, 1500);\n        }\n      });\n    },\n    \n    // 改进的自动翻页函数，更精确地处理状态保存\n    clickNextPageButton: function() {\n      console.log(\"【节奏阅读】尝试查找并点击下一页按钮\");\n      \n      // 查找下一页按钮\n      const nextPageSelectors = [\n        'button.next-page', \n        'button[aria-label=\"下一页\"]',\n        'a.next-page',\n        'a[aria-label=\"下一页\"]',\n        '.next-page',\n        '#next-page',\n        'button.next',\n        'a.next'\n      ];\n      \n      let nextPageButton = null;\n      \n      // 尝试通过选择器找到按钮\n      for (const selector of nextPageSelectors) {\n        try {\n          const elements = document.querySelectorAll(selector);\n          for (const el of elements) {\n            if (el.offsetParent !== null) { // 检查元素是否可见\n              console.log(`【节奏阅读】找到下一页按钮: ${selector}`);\n              nextPageButton = el;\n              break;\n            }\n          }\n          if (nextPageButton) break;\n        } catch (e) {\n          // 某些选择器可能不被支持，忽略错误\n        }\n      }\n      \n      // 如果没找到，尝试按文本内容查找\n      if (!nextPageButton) {\n        const buttons = document.querySelectorAll('button, a, div[role=\"button\"]');\n        for (const button of buttons) {\n          const text = button.textContent.trim().toLowerCase();\n          if ((text.includes('下一页') || text.includes('next') || text === '>' || text === '→') && \n              button.offsetParent !== null) {\n            console.log(`【节奏阅读】通过文本内容找到下一页按钮: ${text}`);\n            nextPageButton = button;\n            break;\n          }\n        }\n      }\n      \n      if (nextPageButton) {\n        console.log(\"【节奏阅读】模拟点击下一页按钮\");\n        \n        // 明确标记页面转换开始\n        this.pageTransitionInProgress = true;\n        \n        // 保存状态\n        setStorage('rhythmReadingActive', 'true');\n        setStorage('rhythmReadingPending', 'true');\n        document.body.dataset.rhythmReadingActive = 'true';\n        \n        // 恢复原始文本\n        this.restoreOriginalText();\n        \n        // 停止计时器\n        if (this.intervalId) {\n          clearInterval(this.intervalId);\n          this.intervalId = null;\n        }\n        \n        // 模拟点击\n        nextPageButton.click();\n        \n        // 延迟结束页面转换状态\n        setTimeout(() => {\n          this.pageTransitionInProgress = false;\n        }, 1000);\n        \n        return true;\n  } else {\n        console.log(\"【节奏阅读】未找到下一页按钮\");\n        return false;\n      }\n    }\n  };\n  \n  // 暴露到全局，以便调试和直接调用\n  window.rhythmReader = rhythmReader;\n  \n  // 额外添加一个全局安全函数用于检查节奏阅读状态\n  window.isRhythmActive = function() {\n    return rhythmReader.active || getStorage('rhythmReadingActive') === 'true';\n  };\n  \n  // 添加一个停止函数供外部安全调用\n  window.stopRhythmSafely = function() {\n    try {\n      setStorage('rhythmReadingActive', 'false');\n      setStorage('rhythmReadingPending', 'false');\n      \n      if (rhythmReader && typeof rhythmReader.stop === 'function') {\n        rhythmReader.stop();\n      }\n    } catch (e) {\n      console.error(\"停止节奏阅读出错\", e);\n    }\n  };\n  \n  // 设置页面加载监听器，确保页面转换后能恢复\n  function setupPageLoadListener() {\n    // DOM内容加载和完全加载的事件监听...\n    \n    // 改进的页面变化监测\n    const observer = new MutationObserver(function(mutations) {\n      // 检测到内容变化且有待处理的节奏阅读时\n      if (getStorage('rhythmReadingPending') === 'true') {\n        const contentChanges = mutations.some(m => \n          m.type === 'childList' && m.addedNodes.length > 5); // 使用更高的阈值，确保是真正的内容变化\n          \n        if (contentChanges) {\n          console.log(\"【节奏阅读】检测到大量DOM变化，可能是页面切换\");\n          \n          // 给页面一点时间稳定下来\n          setTimeout(() => {\n            if (getStorage('rhythmReadingPending') === 'true') {\n              console.log(\"【节奏阅读】页面内容变化后，尝试恢复阅读\");\n              setStorage('rhythmReadingPending', 'false');\n              \n              if (!rhythmReader.pageTransitionInProgress) {\n                rhythmReader.start();\n              }\n            }\n          }, 800);\n        }\n      }\n    });\n    \n    // 观察body变化\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  }\n  \n  // 设置页面加载监听器\n  setupPageLoadListener();\n  \n  // 检查是否需要立即恢复阅读状态\n  if (getStorage('rhythmReadingActive') === 'true') {\n    console.log(\"【节奏阅读】检测到之前的阅读状态，准备恢复\");\n    setStorage('rhythmReadingPending', 'false');\n    \n    setTimeout(function() {\n      rhythmReader.start();\n    }, 800);\n  }\n  \n  console.log(\"【节奏阅读】初始化完成\");\n})();\n\nconst App = () => {\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const autoReadGuideRef = useRef(null);\n  const autoReadIntervalRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  \n  // 新增自动阅读器状态\n  const [autoReaderState, setAutoReaderState] = useState({\n    currentIndex: 0,\n    charPositions: [],\n    intervalId: null,\n    speed: 300,\n    pageContainer: null,\n    isUserScrolling: false,\n    scrollTimeout: null,\n    contentLoaded: false\n  });\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n    \n    return () => {\n      // 清理自动阅读定时器\n      if (autoReadIntervalRef.current) {\n        clearInterval(autoReadIntervalRef.current);\n      }\n    };\n  }, []);\n  \n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async (file) => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      \n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n      \n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n      \n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n  \n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({ scale: 1.0 });\n      \n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      \n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      \n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async (textContent) => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n    \n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n    \n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n    \n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    \n    const lines = [...lineMap.values()];\n    \n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    \n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    \n    return hasTocKeywords || hasPageNumberPatterns || (shortLineRatio > 0.7 && numberLineRatio > 0.3);\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n    \n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    \n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n      \n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n      \n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n      \n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    \n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && \n              x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = (text) => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    \n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      \n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        \n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    \n    return result;\n  };\n\n  // 修改processContentPage函数\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      \n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch(mode) {\n        case 'normal':\n          // 普通模式 - 简单分段显示\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'static':\n          // 静态高亮模式 - 应用词性标注和颜色高亮\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'follow-mouse':\n          // 鼠标跟随高亮模式 - 分段落但不预先高亮，由鼠标事件触发高亮\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      \n      setContent(processedContent);\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async (file) => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n    \n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain') {\n      handleTxtFile(file);\n    } else {\n      alert('请上传PDF或TXT文件');\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = (container) => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    \n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n      \n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n      \n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          \n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n          \n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width/2,  // 水平中心\n            y: rect.bottom,               // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n    \n    // 过滤无效位置并排序\n    return positions\n      .filter(p => p.char.trim() !== '')\n      .sort((a, b) => {\n        // 先按行排序，同行按列排序\n        const yDiff = a.y - b.y;\n        if (Math.abs(yDiff) > 5) { // 5px阈值判断是否同一行\n          return yDiff;\n        }\n        return a.x - b.x;\n      });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    \n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - (containerVisibleHeight / 2);\n      \n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - (window.innerHeight / 2);\n      \n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    \n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n    \n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    \n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n    \n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length || // 已到末尾\n          positions[nextIndex].char.trim() === '' || // 下一个是空白\n          positions[nextIndex].y > charPosition.y + 5) { // 下一个在新行\n        return true;\n      }\n    }\n    \n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n    \n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n      \n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || \n          current.y > prev.y + 5) { // 有明显换行\n        break;\n      }\n      \n      start--;\n    }\n    \n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n      \n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      \n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n      \n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      \n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读\n  function startAutoReader() {\n    console.log(\"【自动阅读】启动\");\n    \n    // 停止可能存在的实例\n    stopAutoReader();\n    \n    // 标记为活跃\n    window.autoReader.active = true;\n    sessionStorage.setItem('autoReaderActive', 'true');\n    \n    // 确保光标存在\n    if (!ensureReaderCursorExists()) {\n      console.error(\"【自动阅读】无法创建光标，中止启动\");\n      return;\n    }\n    \n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    \n    // 如果没有字符位置数据，重新扫描\n    if (window.autoReader.charPositions.length === 0) {\n      console.log(\"【自动阅读】扫描字符位置\");\n      window.autoReader.charPositions = getAllCharacterPositions(contentContainer);\n      console.log(`【自动阅读】找到 ${window.autoReader.charPositions.length} 个字符位置`);\n    }\n    \n    // 如果没有内容且不是最后一页，尝试翻页\n    if (window.autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages) {\n        console.log(\"【自动阅读】当前页无内容，尝试翻页\");\n        sessionStorage.setItem('autoReaderShouldResume', 'true');\n        changePage(1);\n        return;\n      }\n    }\n    \n    // 重置索引\n    window.autoReader.currentIndex = 0;\n    \n    // 设置阅读间隔\n    window.autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (window.autoReader.currentIndex < window.autoReader.charPositions.length && \n             window.autoReader.charPositions[window.autoReader.currentIndex]?.char.trim() === '') {\n        window.autoReader.currentIndex++;\n      }\n      \n      // 到达页尾处理\n      if (window.autoReader.currentIndex >= window.autoReader.charPositions.length) {\n        console.log(\"【自动阅读】已到达页尾\");\n        \n        // 如果不是最后一页，尝试翻页\n        if (currentPage < totalPages) {\n          console.log(\"【自动阅读】准备翻页\");\n          clearInterval(window.autoReader.intervalId);\n          window.autoReader.intervalId = null;\n          \n          // 设置应恢复标志\n          sessionStorage.setItem('autoReaderShouldResume', 'true');\n          \n          // 先隐藏光标，避免可能的闪烁\n          const cursor = document.getElementById('auto-reader-cursor');\n          const highlight = document.getElementById('auto-reader-highlight');\n          \n          if (cursor) cursor.style.opacity = '0';\n          if (highlight) highlight.style.opacity = '0';\n          \n          // 执行翻页\n          setTimeout(() => {\n            changePage(1);\n          }, 100);\n        } else {\n          // 最后一页，停止阅读\n          stopAutoReader();\n        }\n        return;\n      }\n      \n      // 更新光标位置\n      updateReaderCursorPosition();\n      \n      // 前进到下一个字符\n      window.autoReader.currentIndex++;\n      \n    }, window.autoReader.speed);\n  }\n\n  // 更新光标位置\n  function updateReaderCursorPosition() {\n    // 确保元素存在\n    if (!ensureReaderCursorExists()) return;\n    \n    const cursor = document.getElementById('auto-reader-cursor');\n    const highlight = document.getElementById('auto-reader-highlight');\n    const contentContainer = document.querySelector('.page-content');\n    \n    if (!cursor || !highlight || !contentContainer) {\n      console.error(\"【自动阅读】无法找到必要的元素\");\n      return;\n    }\n    \n    const pos = window.autoReader.charPositions[window.autoReader.currentIndex];\n    if (!pos) return;\n    \n    // 计算位置\n    const contentRect = contentContainer.getBoundingClientRect();\n    const relativeX = pos.x - contentRect.left;\n    const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n    \n    // 设置位置\n    cursor.style.left = `${relativeX}px`;\n    cursor.style.top = `${relativeY}px`;\n    \n    highlight.style.left = `${relativeX - 10}px`;\n    highlight.style.top = `${relativeY - 20}px`;\n    \n    // 确保元素可见\n    cursor.style.display = 'block';\n    cursor.style.opacity = '1';\n    highlight.style.display = 'block';\n    highlight.style.opacity = '1';\n    \n    // 滚动到可见区域\n    const scrollTarget = relativeY;\n    \n    // 判断是否需要滚动\n    const viewportTop = contentContainer.scrollTop;\n    const viewportBottom = viewportTop + contentContainer.clientHeight;\n    const buffer = 100; // 缓冲区\n    \n    if (scrollTarget < viewportTop + buffer || scrollTarget > viewportBottom - buffer) {\n      contentContainer.scrollTo({\n        top: scrollTarget - contentContainer.clientHeight / 2,\n        behavior: 'smooth'\n      });\n    }\n  }\n\n  // 停止自动阅读\n  function stopAutoReader() {\n    console.log(\"【自动阅读】停止\");\n    \n    if (window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n    }\n    \n    window.autoReader.active = false;\n    sessionStorage.removeItem('autoReaderActive');\n    sessionStorage.removeItem('autoReaderShouldResume');\n    \n    // 光标可以保留，只是隐藏起来\n    const cursor = document.getElementById('auto-reader-cursor');\n    const highlight = document.getElementById('auto-reader-highlight');\n    \n    if (cursor) cursor.style.opacity = '0';\n    if (highlight) highlight.style.opacity = '0';\n  }\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async (e) => {\n    const newMode = e.target.value;\n    const prevMode = readingMode;\n    \n    // 如果是从裸眼3D模式或舒适3D模式切换出来，恢复背景色\n    if (prevMode === 'naked-eye-3d' || prevMode === 'comfortable-3d') {\n      restoreDarkBackground();\n    }\n    \n    // 停止当前可能正在运行的自动阅读和节奏阅读\n    stopAutoReader();\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    if (window.flashReader && window.flashReader.cleanup) {\n      window.flashReader.cleanup();\n    }\n    \n    // 清理旧模式\n    cleanupDOM();\n    \n    // 更新状态\n    setReadingMode(newMode);\n    \n    // 应用新模式\n    if (pdfDocument && currentPage > 0) {\n      try {\n        const page = await pdfDocument.getPage(currentPage);\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        let processedContent = '';\n        \n        // 应用对应模式的文本处理\n        switch(newMode) {\n          case 'follow-mouse':\n            processedContent = formatTextForMouseFollow(extractedText);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlight(extractedText);\n            break;\n          case 'auto-reader':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          case 'rhythm':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          case 'naked-eye-3d':\n            processedContent = applyNakedEye3dEffect(extractedText);\n            setTimeout(applyDarkBackground, 50);\n            break;\n          case 'comfortable-3d':\n            processedContent = applyComfortable3dEffect(extractedText);\n            setTimeout(applyDarkBackground, 50);\n            break;\n          case 'flash-reading':\n            addFlashReadingStyles();\n            processedContent = createFlashReadingContent(extractedText);\n            setTimeout(applyDarkBackground, 50);\n            setTimeout(initializeFlashReading, 100);\n            break;\n          default:\n            processedContent = formatTextToHtml(extractedText);\n        }\n        \n        const contentArea = document.querySelector('.page-content');\n        if (contentArea) {\n          contentArea.textContent = '';\n          contentArea.innerHTML = processedContent;\n          \n          // 滚动到页面顶部\n          window.scrollTo(0, 0);\n          if (contentArea.scrollTo) {\n            contentArea.scrollTo(0, 0);\n          }\n          \n          // 立即初始化对应模式\n          if (newMode === 'auto-reader') {\n            setTimeout(initializeAutoReader, 50);\n          } else if (newMode === 'follow-mouse') {\n            setTimeout(initializeMouseFollow, 50);\n          } else if (newMode === 'rhythm') {\n            setTimeout(() => {\n              if (window.rhythmReader) {\n                window.rhythmReader.start();\n              }\n            }, 50);\n          } else if (newMode === 'naked-eye-3d') {\n            setTimeout(() => {\n              initializeNakedEye3D();\n              applyDarkBackground();\n            }, 50);\n          } else if (newMode === 'comfortable-3d') {\n            setTimeout(() => {\n              applyDarkBackground();\n            }, 50);\n          }\n        }\n      } catch (error) {\n        console.error('应用新阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 首先确保移除鼠标跟随监听器\n    removeMouseFollowListeners();\n    \n    // 清理自动阅读器\n    if (window.autoReader && window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n    }\n    \n    // 清理节奏阅读器\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    \n    // 清理闪读器\n    if (window.flashReader) {\n      window.flashReader.cleanup();\n    }\n    \n    // 清理裸眼3D效果\n    const threeDElements = document.querySelectorAll('.naked-eye-3d');\n    threeDElements.forEach(el => el.remove());\n    \n    // 清理舒适3D效果\n    const comfortable3DElements = document.querySelectorAll('.emboss-3d-text, .float-3d-text, .gradient-3d-text');\n    comfortable3DElements.forEach(el => el.remove());\n    \n    // 清理闪读模式元素\n    const flashReadingElements = document.querySelectorAll('.flash-reading-container, .flash-reading-display, .flash-reading-controls');\n    flashReadingElements.forEach(el => el.remove());\n    \n    // 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll(\n      '.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line, .rhythm-char'\n    );\n    highlights.forEach(el => {\n      if (el.parentNode) el.parentNode.removeChild(el);\n    });\n    \n    // 彻底替换内容区域以移除所有事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 深度克隆内容，但不克隆事件监听器\n      const contentHTML = contentArea.innerHTML;\n      const newContentArea = contentArea.cloneNode(false);\n      newContentArea.innerHTML = contentHTML;\n      \n      if (contentArea.parentNode) {\n        contentArea.parentNode.replaceChild(newContentArea, contentArea);\n      }\n    }\n    \n    // 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 移除所有特殊标记和样式\n      paragraph.removeAttribute('data-follow');\n      paragraph.removeAttribute('style');\n      \n      // 清理特殊span标签\n      paragraph.innerHTML = paragraph.innerHTML\n        .replace(/<span class=\"text-line\"[^>]*>/g, '')\n        .replace(/<span class=\"rhythm-char\"[^>]*>/g, '')\n        .replace(/<span class=\"line-highlight[^\"]*\"[^>]*>/g, '')\n        .replace(/<span class=\"mouse-highlight[^\"]*\"[^>]*>/g, '')\n        .replace(/<\\/span>/g, '');\n    });\n    \n    // 移除特殊UI元素\n    const elementsToRemove = [\n      'rhythm-speed-slider',\n      'rhythm-notification',\n      'auto-reader-cursor',\n      'auto-reader-highlight'\n    ];\n    \n    elementsToRemove.forEach(id => {\n      const element = document.getElementById(id);\n      if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    });\n    \n    // 移除暗色背景\n    document.body.classList.remove('dark-background');\n  };\n\n  const handleAutoScroll = () => {\n    window.autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = (e) => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    // 清除所有现有高亮\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n    \n    const mouseTarget = document.elementFromPoint(e.clientX, e.clientY);\n    \n    if (mouseTarget && \n       (mouseTarget.classList.contains('pdf-paragraph') || \n        mouseTarget.tagName === 'P' || \n        mouseTarget.tagName === 'SPAN')) {\n      \n      const targetParagraph = mouseTarget.closest('.pdf-paragraph');\n      if (!targetParagraph) return;\n      \n      // 获取段落文本节点\n      const textNode = getTextNodeAtPosition(targetParagraph, e.clientX, e.clientY);\n      if (!textNode) return;\n      \n      // 获取精确的行位置和尺寸\n      const range = document.createRange();\n      range.selectNodeContents(textNode);\n      const rects = range.getClientRects();\n      \n      // 找到鼠标所在的具体行\n      let targetRect = null;\n      for (let i = 0; i < rects.length; i++) {\n        const rect = rects[i];\n        if (e.clientY >= rect.top && e.clientY <= rect.bottom) {\n          targetRect = rect;\n          break;\n        }\n      }\n      \n      if (targetRect) {\n        // 创建高亮元素\n        const lineHighlight = document.createElement('div');\n        lineHighlight.className = 'line-highlight mouse-highlight';\n        \n        // 计算相对于段落的位置\n        const paragraphRect = targetParagraph.getBoundingClientRect();\n        const top = targetRect.top - paragraphRect.top;\n        const left = targetRect.left - paragraphRect.left;\n        \n        // 设置高亮样式\n        lineHighlight.style.position = 'absolute';\n        lineHighlight.style.left = `${left}px`;\n        lineHighlight.style.top = `${top}px`;\n        lineHighlight.style.width = `${targetRect.width}px`;\n        lineHighlight.style.height = `${targetRect.height}px`;\n        lineHighlight.style.pointerEvents = 'none';\n        lineHighlight.style.backgroundColor = 'rgba(255, 165, 0, 0.3)';\n        lineHighlight.style.borderRadius = '4px';\n        lineHighlight.style.boxShadow = '0 0 8px rgba(255, 165, 0, 0.5)';\n        lineHighlight.style.zIndex = '5';\n        lineHighlight.style.transition = 'all 0.1s ease';\n        \n        // 确保段落有相对定位\n          targetParagraph.style.position = 'relative';\n        targetParagraph.appendChild(lineHighlight);\n      }\n    }\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 专门用于移除鼠标跟随事件的函数\n  const removeMouseFollowListeners = () => {\n    // 移除记录的所有监听器\n    if (window.eventTracker && window.eventTracker.mouseFollowHandlers) {\n      window.eventTracker.mouseFollowHandlers.forEach(({element, event, handler}) => {\n        if (element && element.removeEventListener) {\n          element.removeEventListener(event, handler);\n        }\n      });\n      window.eventTracker.mouseFollowHandlers = [];\n    }\n    \n    // 为安全起见，尝试从document和内容区域移除通用处理函数\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    }\n    \n    document.removeEventListener('mousemove', handleMouseMove);\n    \n    // 清除所有当前高亮\n    clearAllHighlights();\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n    addNakedEye3DStyles();\n    addComfortable3DStyles();\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 新增延迟补偿\n    setTimeout(() => {\n      addMouseFollowListeners();\n      \n      // 强制触发重排\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        void contentArea.offsetHeight;\n        \n        // 模拟鼠标移动事件\n        const fakeEvent = new MouseEvent('mousemove', {\n          clientX: window.innerWidth / 2,\n          clientY: window.innerHeight / 2,\n          bubbles: true\n        });\n        contentArea.dispatchEvent(fakeEvent);\n      }\n    }, 50);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = (delta) => {\n    window.autoReader.speed = Math.max(100, window.autoReader.speed + delta);\n    setAutoReaderState(prev => ({ ...prev, speed: window.autoReader.speed }));\n    \n    if (window.autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async (delta) => {\n    const newPage = currentPage + delta;\n    \n    if (newPage < 1 || newPage > totalPages) return;\n    \n    const wasAutoReading = readingMode === 'auto-reader' && window.autoReader.intervalId;\n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n    const wasFlashReading = readingMode === 'flash-reading' && window.flashReader && window.flashReader.isPlaying;\n    \n    // 如果正在自动阅读或节奏阅读，先停止\n    if (wasAutoReading) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n    }\n    \n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    \n    if (wasFlashReading && window.flashReader) {\n      window.flashReader.cleanup();\n    }\n    \n    // 更新页码\n    setCurrentPage(newPage);\n    \n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n      // 按当前阅读模式处理内容\n      let processedContent = '';\n      switch(readingMode) {\n        case 'follow-mouse':\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'auto-reader':\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'rhythm':\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'naked-eye-3d':\n          processedContent = applyNakedEye3dEffect(extractedText);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffect(extractedText);\n          break;\n        case 'flash-reading':\n          processedContent = createFlashReadingContent(extractedText);\n          setTimeout(() => {\n            initializeFlashReading();\n            if (wasFlashReading) {\n              const startBtn = document.getElementById('flash-reading-start');\n              if (startBtn) startBtn.click();\n            }\n          }, 100);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      \n      // 更新页面内容\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        contentArea.textContent = '';\n        contentArea.innerHTML = processedContent;\n        \n        // 滚动到页面顶部\n        window.scrollTo(0, 0);\n        if (contentArea.scrollTo) {\n          contentArea.scrollTo(0, 0);\n        }\n        \n        // 重新启动对应的阅读模式\n        if (wasAutoReading) {\n          setTimeout(initializeAutoReader, 50);\n        } else if (wasRhythmReading && window.rhythmReader) {\n          setTimeout(() => {\n            window.rhythmReader.start();\n          }, 50);\n        } else if (readingMode === 'naked-eye-3d') {\n          setTimeout(() => {\n            initializeNakedEye3D();\n            applyDarkBackground();\n          }, 50);\n        } else if (readingMode === 'comfortable-3d') {\n          setTimeout(() => {\n            applyDarkBackground();\n          }, 50);\n        }\n      }\n    } catch (error) {\n      console.error('翻页失败:', error);\n    }\n  };\n\n  // 修改后的监听器设置函数\n  const addMouseFollowListeners = () => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    \n    // 清理旧的监听器\n    contentArea.removeEventListener('mousemove', handleMouseMove);\n    contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    \n    // 添加新的监听器\n    contentArea.addEventListener('mousemove', handleMouseMove);\n    contentArea.addEventListener('mouseleave', clearAllHighlights);\n    \n    // 确保所有段落都有正确的样式\n    document.querySelectorAll('.pdf-paragraph').forEach(p => {\n      p.style.position = 'relative';\n      p.style.lineHeight = '1.5';\n    });\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = (text) => {\n    // 分段\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    // 创建HTML内容\n    let htmlContent = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      htmlContent += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 应用静态高亮\n  const applyStaticHighlight = (text) => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    let htmlContent = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      // 新增强制清理逻辑\n      const cleanParagraph = paragraph\n        .replace(/<span class=\"text-line\">/g, '')\n        .replace(/<\\/span>/g, '');\n      \n      const highlightedText = processTextWithHighlight(cleanParagraph);\n      htmlContent += `<p class=\"pdf-paragraph\">${highlightedText}</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 格式化文本用于鼠标跟随高亮模式\n  const formatTextForMouseFollow = (text) => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    let htmlContent = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      // 将段落分割成行\n      const lines = paragraph.split('\\n').filter(line => line.trim());\n      htmlContent += `<p class=\"pdf-paragraph\" data-follow=\"true\" style=\"position: relative; line-height: 1.5;\">`;\n      \n      lines.forEach((line, i) => {\n        // 每行用span包裹\n        htmlContent += `<span class=\"text-line\" style=\"display: block;\">${line}</span>`;\n      });\n      \n      htmlContent += `</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 强制初始化字符位置（这是关键步骤！）\n  function forceInitReader() {\n    console.log(\"强制初始化阅读器...\");\n    \n    // 1. 如果autoReader或charPositions不存在，创建它们\n    if (typeof window.autoReader === 'undefined') {\n      window.autoReader = {\n        charPositions: [],\n        intervalId: null,\n        currentIndex: 0,\n        speed: 30\n      };\n    }\n    \n    // 2. 如果没有字符位置数据，尝试触发它的创建\n    if (!window.autoReader.charPositions || window.autoReader.charPositions.length === 0) {\n      console.log(\"未找到字符位置数据，尝试强制创建...\");\n      \n      // 直接使用scanTextPositionsSimple函数\n      scanTextPositionsSimple();\n    }\n    \n    return window.autoReader.charPositions && window.autoReader.charPositions.length > 0;\n  }\n\n  // 简单的文本位置扫描函数\n  function scanTextPositionsSimple() {\n    console.log(\"使用简单文本扫描...\");\n    \n    window.autoReader.charPositions = [];\n    const contentElement = document.querySelector('.page-content');\n    if (!contentElement) {\n      console.error(\"找不到内容容器\");\n      return;\n    }\n    \n    // 递归处理文本节点\n    function processTextNodes(element) {\n      if (element.nodeType === Node.TEXT_NODE) {\n        const text = element.textContent;\n        if (!text || text.trim() === '') return;\n        \n        // 获取元素的位置信息\n        const range = document.createRange();\n        \n        // 为每个字符创建一个独立的范围\n        for (let i = 0; i < text.length; i++) {\n          try {\n            range.setStart(element, i);\n            range.setEnd(element, i + 1);\n            \n            const rect = range.getBoundingClientRect();\n            if (rect.width > 0 && rect.height > 0) {\n              window.autoReader.charPositions.push({\n                char: text[i],\n                x: rect.left + rect.width/2,\n                y: rect.top + rect.height/2,\n                element: element.parentElement\n              });\n            }\n          } catch (e) {\n            console.warn(\"无法处理字符\", e);\n          }\n        }\n      } else if (element.nodeType === Node.ELEMENT_NODE) {\n        // 递归处理子元素\n        for (const child of element.childNodes) {\n          processTextNodes(child);\n        }\n      }\n    }\n    \n    processTextNodes(contentElement);\n    console.log(\"扫描完成，找到字符数量:\", window.autoReader.charPositions.length);\n  }\n\n  // 处理文本应用裸眼3D效果\n  const applyNakedEye3dEffect = (text) => {\n    // 分段落处理\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    let htmlContent = '<div class=\"pdf-content naked-eye-3d-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      // 清理可能存在的标签\n      const cleanParagraph = paragraph\n        .replace(/<span[^>]*>/g, '')\n        .replace(/<\\/span>/g, '');\n      \n      // 分词处理，为一小部分词添加3D效果\n      const words = cleanParagraph.split(/(\\s+|[,.!?，。！？])/);\n      let processedText = '';\n      \n      words.forEach(word => {\n        if (!word || /^\\s+$/.test(word) || /^[,.!?，。！？]$/.test(word)) {\n          // 保持空格和标点原样，但使其为白色\n          processedText += `<span class=\"normal-text\">${word}</span>`;\n          return;\n        }\n        \n        // 约20%的单词应用3D效果\n        if (Math.random() < 0.2) {\n          // 创建裸眼3D效果\n          processedText += `<span class=\"naked-eye-3d-text\">${word}</span>`;\n        } else {\n          // 非3D文字显示为白色\n          processedText += `<span class=\"normal-text\">${word}</span>`;\n        }\n      });\n      \n      // 包装成段落，应用ADHD友好的样式\n      htmlContent += `<p class=\"pdf-paragraph adhd-friendly\">${processedText}</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 添加裸眼3D样式\n  const addNakedEye3DStyles = () => {\n    // 避免重复添加\n    if (document.getElementById('naked-eye-3d-styles')) return;\n    \n    const style = document.createElement('style');\n    style.id = 'naked-eye-3d-styles';\n    style.textContent = `\n      /* 深色背景以确保白色文字可见 */\n      .naked-eye-3d-content {\n        background-color: #222;\n        padding: 20px;\n        border-radius: 8px;\n      }\n      \n      /* 普通文字（白色） */\n      .normal-text {\n        color: white;\n        display: inline-block;\n        margin: 0;\n        padding: 0;\n      }\n      \n      /* 3D文字基本样式 */\n      .naked-eye-3d-text {\n        position: relative;\n        display: inline-block;\n        transform-style: preserve-3d;\n        color: white;  /* 基础颜色也是白色 */\n      }\n      \n      /* 3D效果 - 红色偏移 */\n      .naked-eye-3d-text::before {\n        content: attr(data-text);\n        position: absolute;\n        top: 0;\n        left: 0;\n        z-index: -1;\n        color: rgba(255, 0, 0, 0.8);\n        transform: translateX(-3px);\n      }\n      \n      /* 3D效果 - 青色偏移 */\n      .naked-eye-3d-text::after {\n        content: attr(data-text);\n        position: absolute;\n        top: 0;\n        left: 0;\n        z-index: -1;\n        color: rgba(0, 255, 255, 0.8);\n        transform: translateX(3px);\n      }\n      \n      /* ADHD友好样式 */\n      .adhd-friendly {\n        font-size: 1.1em;\n        line-height: 1.8;\n        color: white;\n        padding: 15px 0;\n      }\n    `;\n    document.head.appendChild(style);\n  };\n\n  // 在裸眼3D模式初始化后处理元素\n  const initializeNakedEye3D = () => {\n    // 为裸眼3D文本元素添加文本内容作为data属性\n    document.querySelectorAll('.naked-eye-3d-text').forEach(el => {\n      el.setAttribute('data-text', el.textContent);\n    });\n    \n    // 确保深色背景已应用\n    applyDarkBackground();\n  };\n\n  // 在切换到裸眼3D模式时应用深色背景\n  const applyDarkBackground = () => {\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.style.backgroundColor = '#222';\n    }\n  };\n\n  // 在离开裸眼3D模式时恢复背景\n  const restoreDarkBackground = () => {\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.style.backgroundColor = '';\n    }\n  };\n\n  // 添加改进的3D文字样式\n  const addComfortable3DStyles = () => {\n    // 避免重复添加\n    if (document.getElementById('comfortable-3d-styles')) return;\n    \n    const style = document.createElement('style');\n    style.id = 'comfortable-3d-styles';\n    style.textContent = `\n      /* 深色背景 */\n      .comfortable-3d-content {\n        background-color: #222;\n        padding: 20px;\n        border-radius: 8px;\n      }\n      \n      /* 普通文字（白色） */\n      .normal-text {\n        color: white;\n        display: inline-block;\n        margin: 0;\n        padding: 0;\n      }\n      \n      /* 柔和浮雕效果 */\n      .emboss-3d-text {\n        display: inline-block;\n        color: #ff0000;\n        text-shadow: \n          -1px -1px 1px rgba(255,0,0,0.6),\n          1px 1px 1px rgba(255,0,0,0.6);\n        position: relative;\n        font-weight: bold;\n        margin: 0;\n        padding: 0;\n      }\n      \n      /* 悬浮效果 */\n      .float-3d-text {\n        display: inline-block;\n        color: #ff0000;\n        position: relative;\n        transform: translateY(-2px);\n        text-shadow: 0 4px 3px rgba(255,0,0,0.5);\n        margin: 0;\n        padding: 0;\n      }\n      \n      /* 渐变效果 */\n      .gradient-3d-text {\n        display: inline-block;\n        background: linear-gradient(to bottom, #ff0000 30%, #ff6666 100%);\n        -webkit-background-clip: text;\n        background-clip: text;\n        -webkit-text-fill-color: transparent;\n        text-fill-color: transparent;\n        text-shadow: 0px 2px 2px rgba(255,0,0,0.2);\n        font-weight: bold;\n        margin: 0;\n        padding: 0;\n      }\n      \n      /* ADHD友好样式 */\n      .adhd-friendly {\n        font-size: 1.1em;\n        line-height: 1.8;\n        color: white;\n        padding: 15px 0;\n      }\n    `;\n    document.head.appendChild(style);\n  };\n\n  // 处理文本应用多种柔和3D效果\n  const applyComfortable3dEffect = (text) => {\n    // 分段落处理\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    let htmlContent = '<div class=\"pdf-content comfortable-3d-content\">';\n    \n    // 3D效果类型数组\n    const effectClasses = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n    \n    paragraphs.forEach(paragraph => {\n      // 清理可能存在的标签\n      const cleanParagraph = paragraph\n        .replace(/<span[^>]*>/g, '')\n        .replace(/<\\/span>/g, '');\n      \n      // 分词处理\n      const words = cleanParagraph.split(/(\\s+|[,.!?，。！？])/);\n      let processedText = '';\n      \n      words.forEach(word => {\n        if (!word || /^\\s+$/.test(word) || /^[,.!?，。！？]$/.test(word)) {\n          // 保持空格和标点原样，但使其为白色\n          processedText += `<span class=\"normal-text\">${word}</span>`;\n          return;\n        }\n        \n        // 约20%的单词应用3D效果\n        if (Math.random() < 0.2) {\n          // 随机选择一种3D效果\n          const effectClass = effectClasses[Math.floor(Math.random() * effectClasses.length)];\n          processedText += `<span class=\"${effectClass}\">${word}</span>`;\n        } else {\n          // 非3D文字显示为白色\n          processedText += `<span class=\"normal-text\">${word}</span>`;\n        }\n      });\n      \n      // 包装成段落，应用ADHD友好的样式\n      htmlContent += `<p class=\"pdf-paragraph adhd-friendly\">${processedText}</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 添加闪读模式样式\n  const addFlashReadingStyles = () => {\n    if (document.getElementById('flash-reading-styles')) return;\n    \n    const style = document.createElement('style');\n    style.id = 'flash-reading-styles';\n    style.textContent = `\n      .flash-reading-container {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        height: 80vh;\n        width: 100%;\n        background-color: #222;\n        color: white;\n      }\n      \n      .flash-reading-display {\n        font-size: 2em;\n        min-height: 3em;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        text-align: center;\n        padding: 20px;\n        margin: 40px 0;\n        width: 80%;\n        max-width: 800px;\n        border-radius: 10px;\n        background-color: rgba(255,255,255,0.05);\n        transition: background-color 0.3s ease;\n      }\n      \n      @keyframes flash-in {\n        0% { opacity: 0; transform: scale(0.95); }\n        100% { opacity: 1; transform: scale(1); }\n      }\n      \n      .flash-reading-animate {\n        animation: flash-in 0.3s ease forwards;\n      }\n      \n      .flash-reading-controls {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        width: 80%;\n        max-width: 600px;\n        background-color: rgba(255,255,255,0.1);\n        padding: 20px;\n        border-radius: 10px;\n      }\n      \n      .flash-reading-slider-container {\n        width: 100%;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        margin-bottom: 15px;\n      }\n      \n      .flash-reading-slider {\n        width: 100%;\n        margin: 10px 0;\n      }\n      \n      .flash-reading-buttons {\n        display: flex;\n        gap: 10px;\n        margin-top: 15px;\n      }\n      \n      .flash-reading-button {\n        padding: 8px 16px;\n        background-color: #4CAF50;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        cursor: pointer;\n        font-size: 16px;\n      }\n      \n      .flash-reading-button:hover {\n        background-color: #3e8e41;\n      }\n      \n      .flash-reading-button.pause {\n        background-color: #f44336;\n      }\n      \n      .flash-reading-button.pause:hover {\n        background-color: #d32f2f;\n      }\n      \n      .flash-reading-stats {\n        margin-top: 15px;\n        font-size: 14px;\n        color: #aaa;\n      }\n    `;\n    document.head.appendChild(style);\n  };\n\n  // 将文本分割成句子\n  const splitTextIntoSentences = (text) => {\n    // 匹配任意标点符号\n    const punctuationPattern = /[,.!?，。！？；;：:、]/g;\n    const sentences = [];\n    let lastIndex = 0;\n    \n    let match;\n    while ((match = punctuationPattern.exec(text)) !== null) {\n      const endIndex = match.index + 1; // 包含标点符号\n      const sentence = text.slice(lastIndex, endIndex).trim();\n      \n      if (sentence) {\n        sentences.push(sentence);\n      }\n      \n      lastIndex = endIndex;\n    }\n    \n    // 处理剩余的文本\n    if (lastIndex < text.length) {\n      const remainingText = text.slice(lastIndex).trim();\n      if (remainingText) {\n        sentences.push(remainingText);\n      }\n    }\n    \n    return sentences;\n  };\n\n  // 创建闪读模式的HTML结构\n  const createFlashReadingContent = (text) => {\n    const sentences = splitTextIntoSentences(text);\n    \n    window.flashReader = {\n      sentences: sentences,\n      currentIndex: 0,\n      isPlaying: false,\n      speed: 1000,\n      intervalId: null\n    };\n    \n    let htmlContent = `\n      <div class=\"flash-reading-container\">\n        <div id=\"flash-reading-display\" class=\"flash-reading-display\">\n          点击\"开始\"按钮开始闪读\n        </div>\n        \n        <div class=\"flash-reading-controls\">\n          <div class=\"flash-reading-slider-container\">\n            <label for=\"flash-reading-speed\">\n              速度: <span id=\"flash-reading-speed-value\">1000ms</span>\n            </label>\n            <input \n              type=\"range\" \n              id=\"flash-reading-speed\" \n              class=\"flash-reading-slider\" \n              min=\"200\" \n              max=\"3000\" \n              step=\"100\" \n              value=\"1000\"\n            >\n          </div>\n          \n          <div class=\"flash-reading-buttons\">\n            <button id=\"flash-reading-start\" class=\"flash-reading-button\">开始</button>\n            <button id=\"flash-reading-pause\" class=\"flash-reading-button pause\" disabled>暂停</button>\n            <button id=\"flash-reading-prev\" class=\"flash-reading-button\">上一句</button>\n            <button id=\"flash-reading-next\" class=\"flash-reading-button\">下一句</button>\n          </div>\n          \n          <div class=\"flash-reading-stats\">\n            进度: <span id=\"flash-reading-progress\">0/${sentences.length}</span>\n          </div>\n        </div>\n      </div>\n    `;\n    \n    return htmlContent;\n  };\n\n  // 初始化闪读模式的控制逻辑\n  const initializeFlashReading = () => {\n    const displayEl = document.getElementById('flash-reading-display');\n    const speedSlider = document.getElementById('flash-reading-speed');\n    const speedValue = document.getElementById('flash-reading-speed-value');\n    const startBtn = document.getElementById('flash-reading-start');\n    const pauseBtn = document.getElementById('flash-reading-pause');\n    const prevBtn = document.getElementById('flash-reading-prev');\n    const nextBtn = document.getElementById('flash-reading-next');\n    const progressEl = document.getElementById('flash-reading-progress');\n    \n    if (!displayEl || !speedSlider || !speedValue || !startBtn || \n        !pauseBtn || !prevBtn || !nextBtn || !progressEl) {\n      console.error('闪读模式初始化失败：缺少必要的DOM元素');\n      return;\n    }\n    \n    const reader = window.flashReader;\n    if (!reader || !Array.isArray(reader.sentences) || reader.sentences.length === 0) {\n      displayEl.textContent = '没有可用的文本内容';\n      return;\n    }\n    \n    const updateProgress = () => {\n      progressEl.textContent = `${reader.currentIndex + 1}/${reader.sentences.length}`;\n    };\n    \n    const displayCurrentSentence = () => {\n      if (reader.currentIndex >= 0 && reader.currentIndex < reader.sentences.length) {\n        displayEl.classList.remove('flash-reading-animate');\n        displayEl.textContent = reader.sentences[reader.currentIndex];\n        void displayEl.offsetWidth;\n        displayEl.classList.add('flash-reading-animate');\n        updateProgress();\n      }\n    };\n    \n    const advanceToNextSentence = () => {\n      if (reader.currentIndex < reader.sentences.length - 1) {\n        reader.currentIndex++;\n        displayCurrentSentence();\n      } else {\n        stopFlashReading();\n        displayEl.textContent = '阅读完成！';\n      }\n    };\n    \n    const startFlashReading = () => {\n      if (reader.isPlaying) return;\n      \n      reader.isPlaying = true;\n      startBtn.disabled = true;\n      pauseBtn.disabled = false;\n      \n      displayCurrentSentence();\n      \n      reader.intervalId = setInterval(() => {\n        advanceToNextSentence();\n      }, reader.speed);\n    };\n    \n    const pauseFlashReading = () => {\n      if (!reader.isPlaying) return;\n      \n      if (reader.intervalId) {\n        clearInterval(reader.intervalId);\n        reader.intervalId = null;\n      }\n      \n      reader.isPlaying = false;\n      startBtn.disabled = false;\n      pauseBtn.disabled = true;\n    };\n    \n    const stopFlashReading = () => {\n      if (reader.intervalId) {\n        clearInterval(reader.intervalId);\n        reader.intervalId = null;\n      }\n      \n      reader.isPlaying = false;\n      startBtn.disabled = false;\n      pauseBtn.disabled = true;\n    };\n    \n    const showPreviousSentence = () => {\n      if (reader.currentIndex > 0) {\n        pauseFlashReading();\n        reader.currentIndex--;\n        displayCurrentSentence();\n      }\n    };\n    \n    const showNextSentence = () => {\n      if (reader.currentIndex < reader.sentences.length - 1) {\n        pauseFlashReading();\n        reader.currentIndex++;\n        displayCurrentSentence();\n      }\n    };\n    \n    speedSlider.addEventListener('input', function() {\n      const newSpeed = parseInt(this.value);\n      reader.speed = newSpeed;\n      speedValue.textContent = `${newSpeed}ms`;\n      \n      if (reader.isPlaying) {\n        clearInterval(reader.intervalId);\n        reader.intervalId = setInterval(() => {\n          advanceToNextSentence();\n        }, reader.speed);\n      }\n    });\n    \n    startBtn.addEventListener('click', startFlashReading);\n    pauseBtn.addEventListener('click', pauseFlashReading);\n    prevBtn.addEventListener('click', showPreviousSentence);\n    nextBtn.addEventListener('click', showNextSentence);\n    \n    const handleKeydown = function(event) {\n      if (document.activeElement.tagName === 'INPUT') return;\n      \n      switch(event.key) {\n        case ' ':\n          reader.isPlaying ? pauseFlashReading() : startFlashReading();\n          event.preventDefault();\n          break;\n        case 'ArrowLeft':\n          showPreviousSentence();\n          event.preventDefault();\n          break;\n        case 'ArrowRight':\n          showNextSentence();\n          event.preventDefault();\n          break;\n      }\n    };\n    \n    document.addEventListener('keydown', handleKeydown);\n    \n    reader.cleanup = () => {\n      document.removeEventListener('keydown', handleKeydown);\n      stopFlashReading();\n    };\n    \n    updateProgress();\n  };\n\n  // 初始化自动阅读器\n  const initializeAutoReader = () => {\n    console.log(\"【自动阅读】初始化中...\");\n    \n    // 确保全局对象存在\n    if (!window.autoReader) {\n      window.autoReader = {\n        charPositions: [],\n        intervalId: null,\n        currentIndex: 0,\n        speed: 300,\n        isActive: false\n      };\n    }\n    \n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) {\n      console.error(\"【自动阅读】错误：找不到内容容器\");\n      return;\n    }\n    \n    // 确保容器有正确的定位\n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n    \n    // 扫描字符位置\n    window.autoReader.charPositions = getAllCharacterPositions(contentContainer);\n    console.log(`【自动阅读】找到 ${window.autoReader.charPositions.length} 个字符位置`);\n    \n    // 如果没有找到字符位置，尝试使用简单扫描\n    if (window.autoReader.charPositions.length === 0) {\n      console.log(\"【自动阅读】尝试使用简单扫描...\");\n      scanTextPositionsSimple();\n    }\n    \n    // 如果还是没有字符位置，显示错误\n    if (window.autoReader.charPositions.length === 0) {\n      console.error(\"【自动阅读】错误：无法获取字符位置\");\n      return;\n    }\n    \n    // 重置索引\n    window.autoReader.currentIndex = 0;\n    \n    // 创建视觉元素\n    createAutoReaderElements(contentContainer);\n    \n    // 开始阅读\n    startAutoReader();\n  };\n\n  // 创建自动阅读视觉元素\n  function createAutoReaderElements(container) {\n    console.log(\"【自动阅读】创建视觉元素\");\n    \n    // 移除可能存在的旧元素\n    const oldCursor = document.getElementById('auto-reader-cursor');\n    if (oldCursor && oldCursor.parentNode) {\n      oldCursor.parentNode.removeChild(oldCursor);\n    }\n    \n    const oldHighlight = document.getElementById('auto-reader-highlight');\n    if (oldHighlight && oldHighlight.parentNode) {\n      oldHighlight.parentNode.removeChild(oldHighlight);\n    }\n    \n    // 创建光标\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 12px;\n      height: 12px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translate(-50%, -50%);\n      box-shadow: 0 0 10px #00ff00;\n      z-index: 9999;\n      opacity: 1;\n      transition: none;\n    `;\n    container.appendChild(cursor);\n    \n    // 创建高亮\n    const highlight = document.createElement('div');\n    highlight.id = 'auto-reader-highlight';\n    highlight.style.cssText = `\n      position: absolute;\n      width: 20px;\n      height: 20px;\n      background-color: rgba(0, 255, 0, 0.3);\n      border-radius: 2px;\n      pointer-events: none;\n      z-index: 998;\n      opacity: 1;\n      transition: none;\n    `;\n    container.appendChild(highlight);\n    \n    console.log(\"【自动阅读】视觉元素创建完成\");\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        <div className=\"logo\">\n          <h2>ADHD阅读助手</h2>\n        </div>\n        <label className=\"upload-btn\">\n          选择文件\n          <input\n            type=\"file\"\n            accept=\".pdf,.txt\"\n            onChange={handleFileUpload}\n            style={{ display: 'none' }}\n          />\n        </label>\n      </div>\n      <div className=\"main-content\">\n        <div className=\"header\">\n          <h1>ADHD阅读助手</h1>\n          <div className=\"controls\">\n            <div className=\"mode-selector\">\n              <select value={readingMode} onChange={handleReadingModeChange}>\n                <option value=\"normal\">普通模式</option>\n                <option value=\"static\">静态高亮模式</option>\n                <option value=\"follow-mouse\">鼠标跟随高亮</option>\n                <option value=\"auto-reader\">自动阅读器</option>\n                <option value=\"rhythm\">节奏阅读模式</option>\n                <option value=\"flash-reading\">闪读模式</option>\n                <option value=\"comfortable-3d\">舒适3D文字</option>\n              </select>\n            </div>\n            <div className=\"mode-selector\">\n              <select value={posMode} onChange={(e) => setPosMode(e.target.value)}>\n                <option value=\"none\">无词性标注</option>\n                <option value=\"noun\">名词标注</option>\n                <option value=\"all\">全词性标注</option>\n              </select>\n            </div>\n            {readingMode === 'auto-reader' && (\n              <div className=\"speed-control\">\n                <button onClick={() => adjustSpeed(-100)}>-</button>\n                <span>{autoReaderState.speed}ms</span>\n                <button onClick={() => adjustSpeed(100)}>+</button>\n              </div>\n            )}\n          </div>\n        </div>\n        <div className=\"page-content\">\n          {content ? (\n            <div dangerouslySetInnerHTML={{ __html: content }} />\n          ) : (\n            <div className=\"empty-state\">\n              <p>请上传PDF或TXT文件开始阅读</p>\n            </div>\n          )}\n        </div>\n        {content && (\n          <div className=\"nav-buttons\">\n            <button className=\"page-btn prev\" onClick={() => changePage(-1)} disabled={currentPage === 1}>\n              上一页\n            </button>\n            <span className=\"page-info\">\n              第 {currentPage} 页 / 共 {totalPages} 页\n            </span>\n            <button className=\"page-btn next\" onClick={() => changePage(1)} disabled={currentPage === totalPages}>\n              下一页\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}