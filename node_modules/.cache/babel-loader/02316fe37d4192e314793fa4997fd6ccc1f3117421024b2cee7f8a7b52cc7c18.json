{"ast":null,"code":"var _jsxFileName = \"D:\\\\adhd-read-helper\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 添加全局事件跟踪对象\nwindow.eventTracker = window.eventTracker || {\n  mouseFollowHandlers: []\n};\n\n// 自动阅读器全局对象\nwindow.autoReader = {\n  charPositions: [],\n  intervalId: null,\n  currentIndex: 0,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false,\n  cleanup: null\n};\n\n// 创建统一的全局命名空间，确保在页面切换后仍然保持状态\nwindow.rhythmReader = window.rhythmReader || {\n  active: false,\n  speed: 150,\n  pagesRead: 0,\n  intervalId: null,\n  pageTransitioning: false // 新增：翻页状态锁\n};\n\n// 节奏阅读模式 - 增强控制版\n(function () {\n  console.log(\"节奏阅读模式 - 增强控制版初始化\");\n\n  // 配置参数\n  const defaultSpeed = window.rhythmReader.speed || 150;\n  const minSpeed = 30;\n  const maxSpeed = 400;\n  const speedStep = 10;\n\n  // 状态变量\n  let charElements = [];\n  let currentIndex = 0;\n  let readIndices = new Set();\n  let pageObserver = null; // 用于保存页面观察器引用\n\n  // 查找下一页按钮\n  const findNextPageButton = function () {\n    const selectors = ['.next-page', '.next', '#next', '[aria-label=\"下一页\"]', '[aria-label=\"Next\"]'];\n    for (const selector of selectors) {\n      try {\n        const buttons = document.querySelectorAll(selector);\n        for (const btn of buttons) {\n          if (btn.offsetParent !== null) {\n            return btn;\n          }\n        }\n      } catch (e) {}\n    }\n    const allButtons = document.querySelectorAll('button, a, div[role=\"button\"]');\n    for (const btn of allButtons) {\n      const text = (btn.textContent || '').trim().toLowerCase();\n      if (text === '下一页' || text === 'next' || text === '>' || text === '→') {\n        if (btn.offsetParent !== null) {\n          return btn;\n        }\n      }\n    }\n    return null;\n  };\n\n  // 修复的自动翻页函数\n  const autoTurnPage = function () {\n    console.log(\"尝试自动翻页...\");\n\n    // 防止重复翻页 - 如果正在翻页过程中，直接返回\n    if (window.rhythmReader.pageTransitioning) {\n      console.log(\"已经在翻页过程中，忽略此次调用\");\n      return;\n    }\n    const nextButton = findNextPageButton();\n    if (!nextButton) {\n      console.log(\"未找到下一页按钮\");\n      showMessage(\"已读完当前页，但未找到下一页按钮\");\n      return;\n    }\n\n    // 设置翻页状态锁\n    window.rhythmReader.pageTransitioning = true;\n\n    // 停止当前阅读\n    if (window.rhythmReader.intervalId) {\n      clearInterval(window.rhythmReader.intervalId);\n      window.rhythmReader.intervalId = null;\n    }\n\n    // 停止之前的观察器\n    if (pageObserver) {\n      pageObserver.disconnect();\n      pageObserver = null;\n    }\n    window.rhythmReader.pagesRead++;\n    console.log(`已读完第 ${window.rhythmReader.pagesRead} 页，点击下一页按钮`);\n\n    // 点击前先标记所有当前的内容元素\n    const contentBefore = document.querySelectorAll('p, div, article, section');\n    const elementsBeforeClick = new Set();\n    contentBefore.forEach(el => elementsBeforeClick.add(el));\n\n    // 点击下一页按钮\n    nextButton.click();\n\n    // 使用防抖的方式处理页面加载完成后的操作\n    let stabilityTimer = null;\n    let contentStable = false;\n    pageObserver = new MutationObserver(mutations => {\n      // 清除之前的定时器\n      if (stabilityTimer) {\n        clearTimeout(stabilityTimer);\n      }\n\n      // 检查是否有新内容\n      const contentNow = document.querySelectorAll('p, div, article, section');\n      let hasNewContent = false;\n      contentNow.forEach(el => {\n        if (!elementsBeforeClick.has(el)) {\n          hasNewContent = true;\n        }\n      });\n      if (hasNewContent && !contentStable) {\n        console.log(\"检测到新内容，等待页面稳定...\");\n\n        // 设置延迟，等待页面完全加载并稳定\n        stabilityTimer = setTimeout(() => {\n          console.log(\"页面稳定，准备开始阅读\");\n          contentStable = true;\n\n          // 确保只执行一次\n          pageObserver.disconnect();\n          pageObserver = null;\n\n          // 延迟启动阅读，给页面足够的渲染时间\n          setTimeout(() => {\n            window.rhythmReader.pageTransitioning = false;\n            startReading();\n          }, 1200);\n        }, 1000);\n      }\n    });\n\n    // 监控整个文档的变化\n    pageObserver.observe(document.body, {\n      childList: true,\n      subtree: true,\n      attributes: false,\n      characterData: false\n    });\n\n    // 设置超时保护，防止卡死\n    setTimeout(() => {\n      if (window.rhythmReader.pageTransitioning) {\n        console.log(\"翻页超时保护触发\");\n        if (pageObserver) {\n          pageObserver.disconnect();\n          pageObserver = null;\n        }\n        window.rhythmReader.pageTransitioning = false;\n      }\n    }, 10000);\n  };\n\n  // 改进的清理函数，确保释放所有资源\n  const cleanup = function () {\n    console.log(\"执行清理...\");\n\n    // 停止所有定时器\n    if (window.rhythmReader.intervalId) {\n      clearInterval(window.rhythmReader.intervalId);\n      window.rhythmReader.intervalId = null;\n    }\n\n    // 停止观察器\n    if (pageObserver) {\n      pageObserver.disconnect();\n      pageObserver = null;\n    }\n\n    // 重置翻页状态\n    window.rhythmReader.pageTransitioning = false;\n    try {\n      document.querySelectorAll('.rhythm-char').forEach(span => {\n        if (span.parentNode) {\n          span.parentNode.replaceChild(document.createTextNode(span.textContent), span);\n        }\n      });\n    } catch (e) {\n      console.error(\"清理文本失败:\", e);\n    }\n    charElements = [];\n    currentIndex = 0;\n    readIndices = new Set();\n    window.rhythmReader.active = false;\n\n    // 清理UI元素\n    const elementsToRemove = ['rhythm-control-panel', 'rhythm-speed-controller', 'rhythm-speed-container', 'simple-speed-container', 'rhythm-speed-slider-container'];\n    elementsToRemove.forEach(id => {\n      const element = document.getElementById(id);\n      if (element) element.remove();\n    });\n  };\n\n  // 改进的通知函数 - 使用非阻塞方式\n  const showMessage = function (message) {\n    console.log(message);\n\n    // 创建临时消息元素而不是使用alert\n    const msgElement = document.createElement('div');\n    msgElement.textContent = message;\n    msgElement.style.cssText = `\n      position: fixed;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      background: rgba(0,0,0,0.8);\n      color: white;\n      padding: 15px 20px;\n      border-radius: 5px;\n      z-index: 9999999;\n      font-size: 16px;\n    `;\n    document.body.appendChild(msgElement);\n    setTimeout(() => {\n      msgElement.remove();\n    }, 3000);\n  };\n\n  // 启动阅读\n  const startReading = function () {\n    console.log(\"启动节奏阅读...\");\n\n    // 清理之前的实例\n    cleanup();\n    const container = document.querySelector('.pdf-content') || document.querySelector('[class*=\"pdf\"]') || document.querySelector('article') || document.querySelector('main') || document.body;\n    const textNodes = [];\n    const findText = function (element) {\n      for (let i = 0; i < element.childNodes.length; i++) {\n        const node = element.childNodes[i];\n        if (node.nodeType === 3 && node.nodeValue.trim() !== '') {\n          textNodes.push(node);\n        } else if (node.nodeType === 1 && !['SCRIPT', 'STYLE', 'BUTTON', 'INPUT', 'SELECT', 'NOSCRIPT'].includes(node.tagName)) {\n          findText(node);\n        }\n      }\n    };\n    findText(container);\n    if (textNodes.length === 0) {\n      showMessage(\"错误: 未找到文本内容\");\n      return;\n    }\n    try {\n      textNodes.forEach(node => {\n        if (!node.nodeValue || !node.parentNode) return;\n        const text = node.nodeValue;\n        const fragment = document.createDocumentFragment();\n        for (let i = 0; i < text.length; i++) {\n          const span = document.createElement('span');\n          span.textContent = text[i];\n          span.className = 'rhythm-char';\n          span.dataset.index = charElements.length;\n          fragment.appendChild(span);\n          charElements.push(span);\n        }\n        node.parentNode.replaceChild(fragment, node);\n      });\n    } catch (e) {\n      console.error(\"处理文本失败:\", e);\n      showMessage(\"生成节奏阅读效果失败\");\n      return;\n    }\n    if (charElements.length === 0) {\n      showMessage(\"未找到可读内容\");\n      return;\n    }\n    window.rhythmReader.active = true;\n    currentIndex = 0;\n    updateDisplay();\n    window.rhythmReader.intervalId = setInterval(nextChar, window.rhythmReader.speed);\n\n    // 创建速度控制器\n    createSpeedController();\n  };\n\n  // 更新显示\n  const updateDisplay = function () {\n    charElements.forEach((span, index) => {\n      if (index === currentIndex) {\n        span.style.color = 'green';\n        span.style.fontWeight = 'bold';\n      } else if (readIndices.has(index)) {\n        span.style.color = ''; // 恢复正常颜色\n      } else {\n        span.style.color = 'rgba(200,200,200,0.3)';\n      }\n    });\n  };\n\n  // 检查是否在视口中\n  const isInViewport = function (element) {\n    const rect = element.getBoundingClientRect();\n    return rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth);\n  };\n\n  // 下一个字符\n  const nextChar = function () {\n    if (!window.rhythmReader.active || !charElements.length) return;\n    readIndices.add(currentIndex);\n    currentIndex++;\n    if (currentIndex >= charElements.length) {\n      if (window.rhythmReader.intervalId) {\n        clearInterval(window.rhythmReader.intervalId);\n        window.rhythmReader.intervalId = null;\n      }\n      console.log(\"当前页已读完，尝试翻页\");\n      autoTurnPage();\n      return;\n    }\n    updateDisplay();\n\n    // 确保当前字符可见\n    const currentChar = charElements[currentIndex];\n    if (currentChar && !isInViewport(currentChar)) {\n      currentChar.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center'\n      });\n    }\n  };\n\n  // 创建统一的速度控制器\n  const createSpeedController = function () {\n    // 检查是否已存在\n    let existingController = document.getElementById('rhythm-speed-controller');\n    if (existingController) existingController.remove();\n\n    // 创建容器\n    const container = document.createElement('div');\n    container.id = 'rhythm-speed-controller';\n    container.style.cssText = `\n      position: fixed;\n      top: 10px;\n      right: 10px;\n      background: rgba(255,255,255,0.9);\n      padding: 10px;\n      border-radius: 5px;\n      box-shadow: 0 2px 8px rgba(0,0,0,0.2);\n      z-index: 9999999;\n      display: flex;\n      flex-direction: column;\n      font-family: Arial, sans-serif;\n    `;\n\n    // 标题\n    const title = document.createElement('div');\n    title.textContent = '节奏阅读控制';\n    title.style.cssText = `\n      font-weight: bold;\n      margin-bottom: 8px;\n      text-align: center;\n    `;\n    container.appendChild(title);\n\n    // 速度显示\n    const speedDisplay = document.createElement('div');\n    speedDisplay.textContent = `速度: ${window.rhythmReader.speed}ms`;\n    speedDisplay.id = 'rhythm-speed-display';\n    speedDisplay.style.cssText = `\n      margin-bottom: 8px;\n      text-align: center;\n      font-size: 14px;\n    `;\n    container.appendChild(speedDisplay);\n\n    // 速度滑块\n    const slider = document.createElement('input');\n    slider.type = 'range';\n    slider.min = minSpeed.toString();\n    slider.max = maxSpeed.toString();\n    slider.step = speedStep.toString();\n    slider.value = window.rhythmReader.speed.toString();\n    slider.style.width = '100%';\n    slider.oninput = function () {\n      const newSpeed = parseInt(this.value);\n      window.rhythmReader.speed = newSpeed;\n      speedDisplay.textContent = `速度: ${newSpeed}ms`;\n      if (window.rhythmReader.intervalId) {\n        clearInterval(window.rhythmReader.intervalId);\n        window.rhythmReader.intervalId = setInterval(nextChar, newSpeed);\n      }\n    };\n    container.appendChild(slider);\n\n    // 按钮容器\n    const buttonContainer = document.createElement('div');\n    buttonContainer.style.cssText = `\n      display: flex;\n      justify-content: space-between;\n      margin-top: 8px;\n    `;\n\n    // 暂停/继续按钮\n    const pauseButton = document.createElement('button');\n    pauseButton.textContent = '暂停';\n    pauseButton.style.cssText = `\n      flex: 1;\n      margin-right: 5px;\n      padding: 5px;\n      cursor: pointer;\n    `;\n    pauseButton.onclick = function () {\n      if (window.rhythmReader.intervalId) {\n        clearInterval(window.rhythmReader.intervalId);\n        window.rhythmReader.intervalId = null;\n        this.textContent = '继续';\n      } else {\n        window.rhythmReader.intervalId = setInterval(nextChar, window.rhythmReader.speed);\n        this.textContent = '暂停';\n      }\n    };\n    buttonContainer.appendChild(pauseButton);\n\n    // 停止按钮\n    const stopButton = document.createElement('button');\n    stopButton.textContent = '停止';\n    stopButton.style.cssText = `\n      flex: 1;\n      margin-left: 5px;\n      padding: 5px;\n      cursor: pointer;\n    `;\n    stopButton.onclick = cleanup;\n    buttonContainer.appendChild(stopButton);\n    container.appendChild(buttonContainer);\n    document.body.appendChild(container);\n  };\n\n  // 添加测试按钮\n  const addTestButton = function () {\n    // 检查是否已存在\n    let existingButton = document.getElementById('rhythm-test-button');\n    if (existingButton) return;\n    const button = document.createElement('button');\n    button.id = 'rhythm-test-button';\n    button.textContent = '开启节奏阅读';\n    button.style.cssText = `\n      position: fixed;\n      top: 10px;\n      right: 10px;\n      z-index: 999999;\n      background: #4CAF50;\n      color: white;\n      padding: 8px 12px;\n      border: none;\n      border-radius: 4px;\n      font-size: 14px;\n      cursor: pointer;\n      box-shadow: 0 2px 5px rgba(0,0,0,0.2);\n    `;\n    button.onclick = startReading;\n    document.body.appendChild(button);\n  };\n\n  // 初始化\n  const initialize = function () {\n    console.log(\"初始化节奏阅读组件...\");\n\n    // 页面加载后添加测试按钮\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', addTestButton);\n    } else {\n      addTestButton();\n    }\n\n    // 提供API接口\n    window.rhythmReader.start = startReading;\n    window.rhythmReader.stop = cleanup;\n    window.rhythmReader.updateSpeed = function (newSpeed) {\n      window.rhythmReader.speed = newSpeed;\n\n      // 更新速度显示\n      const display = document.getElementById('rhythm-speed-display');\n      if (display) display.textContent = `速度: ${newSpeed}ms`;\n\n      // 更新定时器\n      if (window.rhythmReader.intervalId) {\n        clearInterval(window.rhythmReader.intervalId);\n        window.rhythmReader.intervalId = setInterval(nextChar, newSpeed);\n      }\n      return true;\n    };\n  };\n\n  // 执行初始化\n  initialize();\n  console.log(\"节奏阅读模式初始化完成 - 增强控制版\");\n})();\n\n// 定义一个全局函数用于从应用代码中启动节奏阅读\nwindow.activateRhythmReadingMode = function () {\n  console.log(\"尝试从应用代码中启动节奏阅读模式\");\n  if (window.rhythmReader) {\n    if (window.rhythmReader.active) {\n      console.log(\"节奏阅读模式已经在运行\");\n    } else {\n      window.rhythmReader.start();\n    }\n  } else {\n    console.error(\"节奏阅读模式未初始化\");\n    alert(\"无法启动节奏阅读模式：组件未初始化\");\n  }\n};\n\n// 更新初始化函数\nconst initializeRhythmReading = () => {\n  // 不再自动初始化，而是等待用户选择\n  console.log(\"节奏阅读模式准备就绪，等待用户选择\");\n};\n\n// 更新启动函数\nconst startRhythmReading = () => {\n  if (window.rhythmReader && typeof window.rhythmReader.start === 'function') {\n    window.rhythmReader.start();\n  }\n};\n\n// 节奏阅读模式 - 自动翻页版\n(function () {\n  console.log(\"节奏阅读模式 - 自动翻页版初始化\");\n\n  // 状态变量\n  let isActive = false;\n  let intervalId = null;\n  let charElements = [];\n  let currentIndex = 0;\n  let readIndices = new Set();\n\n  // 进度监控 - 记录已读页数\n  let pagesRead = 0;\n\n  // 查找下一页按钮的帮助函数\n  const findNextPageButton = function () {\n    // 常见的选择器\n    const selectors = ['.next-page', '.next', '#next', '[aria-label=\"下一页\"]', '[aria-label=\"Next\"]', 'button:contains(\"下一页\")', 'button:contains(\"Next\")'];\n    for (const selector of selectors) {\n      try {\n        const buttons = document.querySelectorAll(selector);\n        for (const btn of buttons) {\n          if (btn.offsetParent !== null) {\n            // 确保按钮可见\n            return btn;\n          }\n        }\n      } catch (e) {}\n    }\n\n    // 如果通过选择器找不到，尝试通过文本内容查找\n    const allButtons = document.querySelectorAll('button, a, div[role=\"button\"]');\n    for (const btn of allButtons) {\n      const text = (btn.textContent || '').trim().toLowerCase();\n      if (text === '下一页' || text === 'next' || text === '>' || text === '→') {\n        if (btn.offsetParent !== null) {\n          return btn;\n        }\n      }\n    }\n    return null;\n  };\n\n  // 自动翻页函数\n  const autoTurnPage = function () {\n    console.log(\"尝试自动翻页...\");\n\n    // 找到下一页按钮\n    const nextButton = findNextPageButton();\n    if (!nextButton) {\n      console.log(\"未找到下一页按钮\");\n      showMessage(\"已读完当前页，但未找到下一页按钮\");\n      return;\n    }\n\n    // 暂停当前阅读\n    if (intervalId) {\n      clearInterval(intervalId);\n      intervalId = null;\n    }\n\n    // 增加已读页数\n    pagesRead++;\n    console.log(`已读完第 ${pagesRead} 页，点击下一页按钮`);\n\n    // 模拟点击下一页按钮\n    nextButton.click();\n\n    // 监听DOM变化，等待新页面加载\n    const observer = new MutationObserver(mutations => {\n      // 检查新内容是否已加载\n      const contentAdded = mutations.some(mutation => mutation.type === 'childList' && mutation.addedNodes.length > 0);\n      if (contentAdded) {\n        console.log(\"检测到新内容已加载\");\n        // 停止观察\n        observer.disconnect();\n\n        // 延迟一下，确保新页面完全加载\n        setTimeout(() => {\n          // 重新启动节奏阅读模式\n          console.log(\"在新页面上重新启动节奏阅读模式\");\n          startReading();\n        }, 800);\n      }\n    });\n\n    // 开始观察文档变化\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  };\n\n  // 清理函数\n  const cleanup = function () {\n    console.log(\"执行清理...\");\n    if (intervalId) {\n      clearInterval(intervalId);\n      intervalId = null;\n    }\n    try {\n      document.querySelectorAll('.rhythm-char').forEach(span => {\n        if (span.parentNode) {\n          span.parentNode.replaceChild(document.createTextNode(span.textContent), span);\n        }\n      });\n    } catch (e) {\n      console.error(\"清理文本失败:\", e);\n    }\n    charElements = [];\n    currentIndex = 0;\n    readIndices = new Set();\n    isActive = false;\n    pagesRead = 0;\n    const button = document.getElementById('rhythm-control-button');\n    if (button) button.remove();\n  };\n\n  // 简单通知\n  const showMessage = function (message) {\n    console.log(message);\n    alert(message);\n  };\n\n  // 添加控制按钮\n  const addButton = function () {\n    const existingButton = document.getElementById('rhythm-control-button');\n    if (existingButton) existingButton.remove();\n    const button = document.createElement('button');\n    button.id = 'rhythm-control-button';\n    button.textContent = '暂停节奏阅读';\n    button.style.cssText = `\n      position: fixed;\n      bottom: 20px;\n      right: 20px;\n      z-index: 999999;\n      background: #4CAF50;\n      color: white;\n      padding: 10px 15px;\n      border: none;\n      border-radius: 5px;\n      font-size: 16px;\n      font-weight: bold;\n      cursor: pointer;\n    `;\n    button.onclick = function () {\n      if (intervalId) {\n        // 暂停\n        if (intervalId) {\n          clearInterval(intervalId);\n          intervalId = null;\n        }\n        button.textContent = '继续节奏阅读';\n        button.style.background = '#2196F3';\n      } else {\n        // 继续\n        intervalId = setInterval(nextChar, 300);\n        button.textContent = '暂停节奏阅读';\n        button.style.background = '#4CAF50';\n      }\n    };\n    document.body.appendChild(button);\n    return button;\n  };\n\n  // 启动阅读\n  const startReading = function () {\n    console.log(\"启动节奏阅读...\");\n\n    // 清理之前的实例\n    cleanup();\n\n    // 查找内容容器\n    const container = document.querySelector('.pdf-content') || document.querySelector('[class*=\"pdf\"]') || document.querySelector('article') || document.querySelector('main') || document.body;\n\n    // 查找所有文本节点\n    const textNodes = [];\n    const findText = function (element) {\n      for (let i = 0; i < element.childNodes.length; i++) {\n        const node = element.childNodes[i];\n        if (node.nodeType === 3 && node.nodeValue.trim() !== '') {\n          textNodes.push(node);\n        } else if (node.nodeType === 1 && !['SCRIPT', 'STYLE', 'BUTTON', 'INPUT', 'SELECT', 'NOSCRIPT'].includes(node.tagName)) {\n          findText(node);\n        }\n      }\n    };\n    findText(container);\n    if (textNodes.length === 0) {\n      showMessage(\"错误: 未找到文本内容\");\n      return;\n    }\n\n    // 处理文本节点\n    try {\n      textNodes.forEach(node => {\n        if (!node.nodeValue || !node.parentNode) return;\n        const text = node.nodeValue;\n        const fragment = document.createDocumentFragment();\n        for (let i = 0; i < text.length; i++) {\n          const span = document.createElement('span');\n          span.textContent = text[i];\n          span.className = 'rhythm-char';\n          span.dataset.index = charElements.length;\n          fragment.appendChild(span);\n          charElements.push(span);\n        }\n        node.parentNode.replaceChild(fragment, node);\n      });\n    } catch (e) {\n      console.error(\"处理文本失败:\", e);\n      showMessage(\"生成节奏阅读效果失败\");\n      return;\n    }\n    if (charElements.length === 0) {\n      showMessage(\"未找到可读内容\");\n      return;\n    }\n\n    // 激活状态\n    isActive = true;\n    currentIndex = 0;\n\n    // 更新显示\n    updateDisplay();\n\n    // 开始阅读\n    intervalId = setInterval(nextChar, 300);\n    addButton();\n  };\n\n  // 更新显示\n  const updateDisplay = function () {\n    charElements.forEach((span, index) => {\n      if (index === currentIndex) {\n        span.style.color = 'green';\n        span.style.fontWeight = 'bold';\n      } else if (readIndices.has(index)) {\n        span.style.color = 'white';\n      } else {\n        span.style.color = 'rgba(200,200,200,0.3)';\n      }\n    });\n  };\n\n  // 下一个字符\n  const nextChar = function () {\n    if (!isActive || !charElements.length) return;\n    readIndices.add(currentIndex);\n    currentIndex++;\n    if (currentIndex >= charElements.length) {\n      // 当前页已读完\n      if (intervalId) {\n        clearInterval(intervalId);\n        intervalId = null;\n      }\n      console.log(\"当前页已读完，尝试翻页\");\n      autoTurnPage(); // 尝试自动翻页\n      return;\n    }\n    updateDisplay();\n  };\n\n  // 处理模式切换\n  const handleModeChange = function (mode) {\n    console.log(\"模式更改为:\", mode);\n    if (mode !== 'rhythm' && mode !== 'rhythmReading' && isActive) {\n      cleanup();\n    }\n  };\n\n  // 重写模式切换函数\n  const originalFunction = window.readingModeChanged;\n  window.readingModeChanged = function (mode) {\n    if (typeof originalFunction === 'function') {\n      try {\n        originalFunction(mode);\n      } catch (e) {}\n    }\n    handleModeChange(mode);\n  };\n\n  // 添加测试按钮\n  const addTestButton = function () {\n    const button = document.createElement('button');\n    button.id = 'rhythm-test-button';\n    button.textContent = '测试节奏阅读';\n    button.style.cssText = `\n      position: fixed;\n      top: 10px;\n      right: 10px;\n      z-index: 999999;\n      background: #ff9800;\n      color: white;\n      padding: 8px;\n      border: none;\n      border-radius: 4px;\n      font-size: 14px;\n      cursor: pointer;\n    `;\n    button.onclick = startReading; // 直接启动阅读\n    document.body.appendChild(button);\n  };\n\n  // 初始化\n  const initialize = function () {\n    console.log(\"初始化节奏阅读组件...\");\n    addTestButton();\n  };\n\n  // 等待DOM加载完成\n  document.addEventListener('DOMContentLoaded', initialize);\n\n  // 暴露全局API\n  window.manualStartRhythmReading = startReading;\n  console.log(\"节奏阅读模式初始化完成 - 自动翻页版\");\n})();\nconst App = () => {\n  _s();\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  const [isTableOfContents, setIsTableOfContents] = useState(false);\n\n  // 实现缺失的函数\n  // 应用深色背景\n  const applyDarkBackground = () => {\n    document.body.classList.add('dark-background');\n\n    // 添加必要的CSS样式\n    if (!document.getElementById('dark-background-style')) {\n      const style = document.createElement('style');\n      style.id = 'dark-background-style';\n      style.textContent = `\n        .dark-background {\n          background-color: #000 !important;\n        }\n        .dark-background .sidebar {\n          background: linear-gradient(145deg, #4834d4, #341f9e) !important;\n        }\n        .dark-background .page-content {\n          background-color: #000 !important;\n        }\n        .dark-background .main-content {\n          background-color: #000 !important;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 恢复正常背景\n  const restoreDarkBackground = () => {\n    document.body.classList.remove('dark-background');\n  };\n\n  // 添加裸眼3D样式\n  const addNakedEye3DStyles = () => {\n    if (!document.getElementById('naked-eye-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'naked-eye-3d-style';\n      style.textContent = `\n        .naked-eye-3d-container {\n          position: relative;\n          perspective: 800px;\n          width: 100%;\n        }\n        \n        .naked-eye-3d-text {\n          display: inline-block;\n          animation: float 3s ease-in-out infinite;\n          text-shadow: 0 0 5px rgba(255,255,255,0.3);\n          padding: 0 4px;\n          color: white;\n          filter: drop-shadow(0 0 5px rgba(120, 220, 255, 0.6));\n        }\n        \n        @keyframes float {\n          0% { transform: translateZ(0px); }\n          50% { transform: translateZ(20px); }\n          100% { transform: translateZ(0px); }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 添加舒适3D样式\n  const addComfortable3DStyles = () => {\n    if (!document.getElementById('comfortable-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'comfortable-3d-style';\n      style.textContent = `\n        .emboss-3d-text {\n          color: #fff;\n          text-shadow: \n            1px 1px 1px rgba(0,0,0,0.5),\n            -1px -1px 1px rgba(255,255,255,0.5);\n          letter-spacing: 1.5px;\n          font-weight: 500;\n        }\n        \n        .float-3d-text {\n          display: inline-block;\n          transform-style: preserve-3d;\n          transform: perspective(500px) translateZ(10px);\n          text-shadow: 0 2px 5px rgba(0,0,0,0.5);\n        }\n        \n        .gradient-3d-text {\n          display: inline-block;\n          background: linear-gradient(to bottom, #fff, #aaa);\n          -webkit-background-clip: text;\n          -webkit-text-fill-color: transparent;\n          text-shadow: 0 2px 4px rgba(0,0,0,0.3);\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 添加闪读样式\n  const addFlashReadingStyles = () => {\n    if (!document.getElementById('flash-reading-style')) {\n      const style = document.createElement('style');\n      style.id = 'flash-reading-style';\n      style.textContent = `\n        .flash-reading-container {\n          position: relative;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          z-index: 1000;\n          padding: 20px;\n        }\n        \n        .flash-reading-display-wrapper {\n          position: relative;\n          margin: 40px 0;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        \n        .flash-reading-display {\n          font-size: 36px;\n          font-weight: bold;\n          text-align: center;\n          color: white;\n          min-height: 80px;\n          max-width: 90%;\n          padding: 20px 40px;\n          position: relative; /* 允许绝对定位的覆盖层 */\n          z-index: 2;\n        }\n        \n        .flash-reading-cover {\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(128, 128, 128, 0.6); /* 灰色遮罩 */\n          border-radius: 8px;\n          z-index: 1; /* 确保在文本后面 */\n        }\n        \n        .flash-reading-controls {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          gap: 20px;\n          margin-bottom: 20px;\n          width: 100%;\n        }\n        \n        .flash-reading-buttons {\n          display: flex;\n          gap: 10px;\n          flex-wrap: wrap;\n          justify-content: center;\n        }\n        \n        .flash-reading-speed {\n          display: flex;\n          align-items: center;\n          color: white;\n          width: 80%;\n          max-width: 400px;\n          gap: 10px;\n        }\n        \n        .flash-reading-slider {\n          flex: 1;\n          height: 8px;\n          appearance: none;\n          background: #555;\n          border-radius: 4px;\n          outline: none;\n        }\n        \n        .flash-reading-slider::-webkit-slider-thumb {\n          appearance: none;\n          width: 20px;\n          height: 20px;\n          border-radius: 50%;\n          background: #6c5ce7;\n          cursor: pointer;\n        }\n        \n        .flash-reading-btn {\n          padding: 10px 20px;\n          border: none;\n          border-radius: 4px;\n          background-color: #6c5ce7;\n          color: white;\n          font-size: 16px;\n          cursor: pointer;\n          transition: background-color 0.2s;\n        }\n        \n        .flash-reading-btn:hover {\n          background-color: #5344c0;\n        }\n        \n        .flash-reading-btn:disabled {\n          background-color: #aaa;\n          cursor: not-allowed;\n        }\n        \n        .flash-reading-progress {\n          color: white;\n          font-size: 14px;\n          margin-top: 10px;\n        }\n        .flash-reading-speed-note {\n          font-size: 12px;\n          color: #ccc;\n          margin-left: 5px;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 初始化闪读模式\n  const initializeFlashReading = () => {\n    // 添加样式\n    addFlashReadingStyles();\n    const sentences = window.flashReadingSentences;\n    if (!sentences || !Array.isArray(sentences) || sentences.length === 0) {\n      console.error('闪读模式: 未找到句子数据');\n      return;\n    }\n\n    // 获取全局UI元素\n    const display = document.getElementById('flash-reading-display');\n    const speedSlider = document.getElementById('flash-reading-speed');\n    const speedValue = document.getElementById('flash-reading-speed-value');\n    const playButton = document.getElementById('flash-reading-play');\n    const pauseButton = document.getElementById('flash-reading-pause');\n    const stopButton = document.getElementById('flash-reading-stop');\n    const prevButton = document.getElementById('flash-reading-prev-sentence');\n    const nextButton = document.getElementById('flash-reading-next-sentence');\n    const progress = document.getElementById('flash-reading-progress');\n    const cover = document.querySelector('.flash-reading-cover');\n    if (!display || !speedSlider || !speedValue || !playButton || !pauseButton || !stopButton || !prevButton || !nextButton || !progress || !cover) {\n      console.error('闪读模式: 未找到UI元素');\n      return;\n    }\n\n    // 创建闪读控制器\n    window.flashReader = {\n      sentences: sentences,\n      currentIndex: 0,\n      interval: null,\n      speed: parseInt(speedSlider.value),\n      isPlaying: false,\n      // 开始闪读\n      start() {\n        if (this.interval) {\n          clearInterval(this.interval);\n        }\n        this.isPlaying = true;\n        playButton.disabled = true;\n        pauseButton.disabled = false;\n        progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n\n        // 显示当前句子\n        this.displayCurrentSentence();\n\n        // 设置闪读间隔\n        this.interval = setInterval(() => {\n          this.currentIndex++;\n          if (this.currentIndex >= this.sentences.length) {\n            this.stop();\n            display.textContent = '阅读完成';\n            return;\n          }\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }, this.speed);\n      },\n      // 显示当前句子\n      displayCurrentSentence() {\n        if (this.currentIndex < this.sentences.length) {\n          const currentSentence = this.sentences[this.currentIndex];\n          display.textContent = currentSentence;\n          display.style.color = 'white'; // 确保文本为白色\n\n          // 调整背景以适应内容\n          setTimeout(() => {\n            const displayRect = display.getBoundingClientRect();\n            // 确保覆盖层完全包裹文本\n            cover.style.width = `${displayRect.width}px`;\n            cover.style.height = `${displayRect.height}px`;\n          }, 10);\n        }\n      },\n      // 暂停闪读\n      pause() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n      },\n      // 停止闪读\n      stop() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        this.currentIndex = 0;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n        display.textContent = '准备开始';\n        progress.textContent = `进度：0 / ${this.sentences.length}`; // 重置进度\n      },\n      // 更新速度\n      updateSpeed(newSpeed) {\n        this.speed = newSpeed;\n        speedValue.textContent = `${newSpeed} ms`;\n\n        // 保存速度设置到本地存储\n        localStorage.setItem('flash-reading-speed', newSpeed);\n\n        // 如果正在播放，重新开始以应用新速度\n        if (this.isPlaying) {\n          clearInterval(this.interval);\n          this.start(); // 直接调用start方法重新开始\n        }\n      },\n      // 返回上一句\n      prevSentence() {\n        if (this.currentIndex > 0) {\n          this.currentIndex--;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n      // 跳到下一句\n      nextSentence() {\n        if (this.currentIndex < this.sentences.length - 1) {\n          this.currentIndex++;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n      // 清理资源\n      cleanup() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        this.currentIndex = 0;\n      }\n    };\n\n    // 添加事件监听器\n    playButton.addEventListener('click', () => {\n      window.flashReader.start();\n    });\n    pauseButton.addEventListener('click', () => {\n      window.flashReader.pause();\n    });\n    stopButton.addEventListener('click', () => {\n      window.flashReader.stop();\n    });\n    speedSlider.addEventListener('input', e => {\n      const newSpeed = parseInt(e.target.value);\n      window.flashReader.updateSpeed(newSpeed);\n    });\n    prevButton.addEventListener('click', () => {\n      window.flashReader.prevSentence();\n    });\n    nextButton.addEventListener('click', () => {\n      window.flashReader.nextSentence();\n    });\n\n    // 初始化\n    const savedSpeed = localStorage.getItem('flash-reading-speed');\n    const initialSpeed = savedSpeed ? parseInt(savedSpeed) : 1000;\n    speedSlider.value = initialSpeed;\n    window.flashReader.updateSpeed(initialSpeed);\n    console.log('闪读模式已初始化，共 ' + sentences.length + ' 个句子');\n  };\n\n  // 创建闪读内容\n  const createFlashReadingContent = text => {\n    return `<div class=\"flash-reading-content\">\n      <p>${text}</p>\n    </div>`;\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 格式化文本用于鼠标跟随\n  const formatTextForMouseFollow = text => {\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个单词添加span，以便于添加高亮效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"follow-word\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\" data-follow=\"true\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用静态高亮\n  const applyStaticHighlight = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为单词随机添加颜色高亮\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      let lastColor = null;\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n          return;\n        }\n\n        // 随机决定是否高亮和使用哪种颜色\n        if (Math.random() < 0.7) {\n          let color;\n          if (lastColor === 'red') {\n            color = 'blue';\n          } else if (lastColor === 'blue') {\n            color = 'red';\n          } else {\n            color = Math.random() < 0.5 ? 'red' : 'blue';\n          }\n          lastColor = color;\n          processedParagraph += `<span class=\"highlight-word ${color}\">${word}</span>`;\n        } else {\n          processedParagraph += word;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用裸眼3D效果\n  const applyNakedEye3dEffect = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content naked-eye-3d-container\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个词添加3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"naked-eye-3d-text\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用舒适3D效果\n  const applyComfortable3dEffect = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个词随机应用不同的3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          processedParagraph += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 初始化裸眼3D\n  const initializeNakedEye3D = () => {\n    // 为裸眼3D文本添加动画\n    const textElements = document.querySelectorAll('.naked-eye-3d-text');\n    textElements.forEach((element, index) => {\n      // 添加随机延迟，使动画错开\n      const delay = Math.random() * 2;\n      element.style.animationDelay = `${delay}s`;\n    });\n  };\n\n  // 添加鼠标跟随监听器\n  const addMouseFollowListeners = () => {\n    // 获取内容容器\n    const contentArea = document.querySelector('.mouse-follow-content');\n    if (!contentArea) {\n      console.error('未找到鼠标跟随内容区域');\n      return;\n    }\n\n    // 上一个高亮的行\n    let lastHighlightedLine = null;\n\n    // 监听鼠标移动 - 精确的行检测\n    const mouseMoveHandler = e => {\n      // 获取鼠标位置\n      const mouseY = e.clientY;\n\n      // 获取所有行\n      const allLines = contentArea.querySelectorAll('.follow-line');\n      let foundLine = null;\n      let minDistance = Infinity;\n\n      // 寻找鼠标所在的精确行\n      allLines.forEach(line => {\n        const rect = line.getBoundingClientRect();\n        const lineCenter = rect.top + rect.height / 2;\n        const distance = Math.abs(mouseY - lineCenter);\n\n        // 如果鼠标在行范围内，计算到行中心的距离\n        if (mouseY >= rect.top && mouseY <= rect.bottom) {\n          if (distance < minDistance) {\n            minDistance = distance;\n            foundLine = line;\n          }\n        }\n      });\n\n      // 更新高亮状态\n      if (lastHighlightedLine && lastHighlightedLine !== foundLine) {\n        // 移除旧高亮\n        lastHighlightedLine.classList.remove('highlighted');\n      }\n      if (foundLine) {\n        // 添加新高亮\n        foundLine.classList.add('highlighted');\n        lastHighlightedLine = foundLine;\n\n        // 调试输出\n        console.log('当前高亮行:', foundLine.textContent.substring(0, 30) + '...');\n      } else if (lastHighlightedLine) {\n        // 如果没有找到新行，且有上一个高亮行，移除它\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n\n    // 鼠标离开处理\n    const mouseLeaveHandler = () => {\n      // 清除当前高亮\n      if (lastHighlightedLine) {\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n\n    // 存储处理函数引用\n    window.eventTracker = window.eventTracker || {\n      mouseFollowHandlers: []\n    };\n    window.eventTracker.mouseFollowHandlers.push({\n      element: contentArea,\n      event: 'mousemove',\n      handler: mouseMoveHandler\n    }, {\n      element: contentArea,\n      event: 'mouseleave',\n      handler: mouseLeaveHandler\n    });\n\n    // 添加事件监听器\n    contentArea.addEventListener('mousemove', mouseMoveHandler);\n    contentArea.addEventListener('mouseleave', mouseLeaveHandler);\n    console.log('改进的鼠标跟随监听器已初始化');\n  };\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n  }, []);\n\n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async file => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n\n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n\n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n\n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({\n        scale: 1.0\n      });\n\n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async textContent => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n\n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n\n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n\n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    const lines = [...lineMap.values()];\n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    return hasTocKeywords || hasPageNumberPatterns || shortLineRatio > 0.7 && numberLineRatio > 0.3;\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n\n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n\n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n\n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n\n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = text => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    return result;\n  };\n\n  // 处理内容页面 - 按句子划分段落\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n\n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 按句子划分内容（句号、问号、感叹号等作为分隔符）\n      const sentences = splitIntoSentences(extractedText);\n\n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch (mode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          // 使用ADHD友好的静态高亮处理\n          console.log('应用ADHD友好的静态高亮模式');\n          processedContent = formatSimpleHighlightedText(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'rhythm':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          processedContent = createFlashReadingContentFromSentences(sentences);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n      setContent(processedContent);\n\n      // 如果是静态高亮模式，添加延时验证检查\n      if (mode === 'static') {\n        setTimeout(() => {\n          const contentArea = document.querySelector('.adhd-highlight-mode');\n          if (contentArea) {\n            console.log('静态高亮模式元素存在');\n            const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n            console.log(`找到 ${paragraphs.length} 个段落`);\n\n            // 检查样式是否正确应用\n            if (paragraphs.length > 0) {\n              const firstPara = paragraphs[0];\n              const styles = window.getComputedStyle(firstPara);\n              console.log('段落应用的样式:', {\n                color: styles.color,\n                backgroundColor: styles.backgroundColor,\n                fontFamily: styles.fontFamily,\n                fontSize: styles.fontSize\n              });\n            }\n          }\n        }, 200);\n      }\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 将文本分割成句子\n  const splitIntoSentences = text => {\n    // 匹配句号、问号、感叹号后跟空格或结束的模式\n    // 支持中英文标点符号\n    const sentenceRegex = /([.!?。！？；;]+\\s*)/g;\n\n    // 分割文本成句子\n    const sentences = [];\n    let lastIndex = 0;\n    let match;\n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const sentence = text.substring(lastIndex, endIndex).trim();\n\n      // 避免添加空句子\n      if (sentence) {\n        sentences.push(sentence);\n      }\n      lastIndex = endIndex;\n    }\n\n    // 处理最后一部分（如果没有以句号等结尾）\n    if (lastIndex < text.length) {\n      const lastSentence = text.substring(lastIndex).trim();\n      if (lastSentence) {\n        sentences.push(lastSentence);\n      }\n    }\n    return sentences;\n  };\n\n  // 专门为闪读模式分割文本，以任意标点符号为分隔点\n  const splitIntoFlashReadingSegments = text => {\n    // 匹配任意标点符号包括中英文标点\n    const sentenceRegex = /([,.!?:;，。！？：；、]+\\s*)/g;\n\n    // 分割文本成短句\n    const segments = [];\n    let lastIndex = 0;\n    let match;\n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const segment = text.substring(lastIndex, endIndex).trim();\n\n      // 避免添加空段落\n      if (segment) {\n        segments.push(segment);\n      }\n      lastIndex = endIndex;\n    }\n\n    // 处理最后一部分（如果没有以标点符号结尾）\n    if (lastIndex < text.length) {\n      const lastSegment = text.substring(lastIndex).trim();\n      if (lastSegment) {\n        segments.push(lastSegment);\n      }\n    }\n    return segments;\n  };\n\n  // 格式化句子为HTML\n  const formatSentencesToHtml = sentences => {\n    let html = '<div class=\"pdf-content\">';\n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${sentence}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为句子应用静态高亮\n  const applyStaticHighlightToSentences = sentences => {\n    let html = '<div class=\"pdf-content adhd-content\">';\n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n\n      // 简单地为句子添加特定样式的class\n      html += `<p class=\"pdf-paragraph adhd-sentence\">${sentence}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为鼠标跟随模式格式化句子\n  const formatSentencesForMouseFollow = sentences => {\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    sentences.forEach((sentence, index) => {\n      if (sentence.trim() === '') return;\n\n      // 每个句子作为独立行，使用div而不是p标签\n      html += `<div class=\"follow-line\" data-line=\"${index}\" data-sentence=\"${sentence.substring(0, 20)}...\" style=\"color: inherit;\">${sentence}</div>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为舒适3D模式格式化句子\n  const applyComfortable3dEffectToSentences = sentences => {\n    let html = '<div class=\"pdf-content\">';\n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n\n      // 为每个词随机应用不同的3D效果\n      const words = sentence.split(/(\\s+)/);\n      let processedSentence = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedSentence += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          processedSentence += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedSentence}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为闪读模式创建内容\n  const createFlashReadingContentFromSentences = sentences => {\n    // 储存句子到全局变量，用于后续显示\n    window.flashReadingSentences = sentences;\n\n    // 返回闪读界面的HTML结构\n    return `\n      <div class=\"flash-reading-container\">\n        <div class=\"flash-reading-controls\">\n          <div class=\"flash-reading-buttons\">\n            <button id=\"flash-reading-prev-sentence\" class=\"flash-reading-btn\">上一句</button>\n            <button id=\"flash-reading-play\" class=\"flash-reading-btn\">开始</button>\n            <button id=\"flash-reading-pause\" class=\"flash-reading-btn\" disabled>暂停</button>\n            <button id=\"flash-reading-stop\" class=\"flash-reading-btn\">停止</button>\n            <button id=\"flash-reading-next-sentence\" class=\"flash-reading-btn\">下一句</button>\n          </div>\n          <div class=\"flash-reading-speed\">\n            <span>速度：</span>\n            <input type=\"range\" id=\"flash-reading-speed\" min=\"300\" max=\"1700\" step=\"50\" value=\"1000\" class=\"flash-reading-slider\">\n            <span id=\"flash-reading-speed-value\">1000 ms</span>\n            <span class=\"flash-reading-speed-note\">（数值越小，切换越快）</span>\n          </div>\n          <div class=\"flash-reading-progress\">\n            <span id=\"flash-reading-progress\">进度：0 / ${sentences.length}</span>\n          </div>\n        </div>\n        <div class=\"flash-reading-display-wrapper\">\n          <div class=\"flash-reading-cover\"></div> <!-- 这里是闪卡 -->\n          <div id=\"flash-reading-display\" class=\"flash-reading-display\">准备开始</div>\n        </div>\n      </div>`;\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async file => {\n    try {\n      const text = await file.text();\n\n      // 根据阅读模式选择不同的处理方式\n      let processedContent = '';\n      if (readingMode === 'flash-reading') {\n        // 闪读模式下使用特定的分割函数\n        const segments = splitIntoFlashReadingSegments(text);\n        processedContent = createFlashReadingContentFromSentences(segments);\n\n        // 初始化闪读模式\n        setTimeout(() => {\n          initializeFlashReading();\n        }, 100);\n      } else {\n        // 其他模式使用默认的分割方式\n        const sentences = splitIntoSentences(text);\n        switch (readingMode) {\n          case 'normal':\n            processedContent = formatSentencesToHtml(sentences);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlightToSentences(sentences);\n            break;\n          case 'follow-mouse':\n            processedContent = formatSentencesForMouseFollow(sentences);\n            break;\n          case 'comfortable-3d':\n            processedContent = applyComfortable3dEffectToSentences(sentences);\n            break;\n          default:\n            processedContent = formatSentencesToHtml(sentences);\n        }\n      }\n\n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n\n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setContent('<div class=\"error-message\">TXT文件处理失败</div>');\n    }\n  };\n\n  // 处理Markdown文件\n  const handleMarkdownFile = async file => {\n    try {\n      const text = await file.text();\n\n      // 使用marked库转换markdown为HTML\n      let html = '';\n      try {\n        if (window.marked) {\n          html = window.marked.parse(text);\n        } else {\n          // 如果没有marked库，简单地拆分为段落\n          html = `<div>${text.split(\"\\n\\n\").map(p => `<p>${p}</p>`).join(\"\")}</div>`;\n        }\n      } catch (parseError) {\n        console.error('Markdown解析错误:', parseError);\n        html = `<div>${text}</div>`;\n      }\n\n      // 提取纯文本内容\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = html;\n      const plainText = tempDiv.textContent || tempDiv.innerText || '';\n\n      // 分割文本为句子\n      const sentences = splitIntoSentences(plainText);\n\n      // 根据当前阅读模式处理内容\n      let processedContent = '';\n      switch (readingMode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlightToSentences(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          // 使用特定的闪读分割函数重新处理文本\n          const segments = splitIntoFlashReadingSegments(plainText);\n          processedContent = createFlashReadingContentFromSentences(segments);\n\n          // 初始化闪读模式\n          setTimeout(() => {\n            initializeFlashReading();\n          }, 100);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n\n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n\n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('Markdown处理错误:', error);\n      setContent('<div class=\"error-message\">Markdown文件处理失败</div>');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async e => {\n    const uploadedFile = e.target.files[0];\n    if (!uploadedFile) return;\n    setLoading(true);\n    setFileName(uploadedFile.name);\n    try {\n      if (uploadedFile.type === 'application/pdf') {\n        await handlePdfFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/plain' || uploadedFile.name.endsWith('.txt')) {\n        await handleTxtFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/markdown' || uploadedFile.name.endsWith('.md')) {\n        await handleMarkdownFile(uploadedFile);\n      } else {\n        setContent('<div class=\"error-message\">不支持的文件格式</div>');\n      }\n    } catch (error) {\n      console.error('处理文件时出错:', error);\n      setContent('<div class=\"error-message\">处理文件时出错</div>');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = container => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n\n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n\n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n\n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width / 2,\n            // 水平中心\n            y: rect.bottom,\n            // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n\n    // 过滤无效位置并排序\n    return positions.filter(p => p.char.trim() !== '').sort((a, b) => {\n      // 先按行排序，同行按列排序\n      const yDiff = a.y - b.y;\n      if (Math.abs(yDiff) > 5) {\n        // 5px阈值判断是否同一行\n        return yDiff;\n      }\n      return a.x - b.x;\n    });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n\n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - containerVisibleHeight / 2;\n\n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - window.innerHeight / 2;\n\n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n\n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n\n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length ||\n      // 已到末尾\n      positions[nextIndex].char.trim() === '' ||\n      // 下一个是空白\n      positions[nextIndex].y > charPosition.y + 5) {\n        // 下一个在新行\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n\n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n\n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || current.y > prev.y + 5) {\n        // 有明显换行\n        break;\n      }\n      start--;\n    }\n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n\n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n\n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (window.autoReader.charPositions.length === 0) {\n      if (window.currentPage < window.totalPages) {\n        window.changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 重置索引到开头\n    window.autoReader.currentIndex = 0;\n\n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n\n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n\n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none';\n      highlight.style.zIndex = '998';\n      contentContainer.appendChild(highlight);\n    }\n\n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n\n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20;\n\n    // 尝试获取实际行高\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(window.autoReader.charPositions[i].y - window.autoReader.charPositions[i - 1].y);\n        if (yDiff > 5) {\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n\n    // 记录上次滚动的位置\n    let lastScrolledY = -1;\n    const scrollSafeZone = lineHeight * 2.5;\n\n    // 设置字符大小的估计值\n    let charWidth = 20;\n    let charHeight = lineHeight * 0.8;\n\n    // 尝试估计字符宽度\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        if (window.autoReader.charPositions[i].x !== window.autoReader.charPositions[i - 1].x) {\n          const xDiff = Math.abs(window.autoReader.charPositions[i].x - window.autoReader.charPositions[i - 1].x);\n          if (xDiff > 0 && xDiff < 50) {\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    window.autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (window.autoReader.currentIndex < window.autoReader.charPositions.length && ((_window$autoReader$ch = window.autoReader.charPositions[window.autoReader.currentIndex]) === null || _window$autoReader$ch === void 0 ? void 0 : _window$autoReader$ch.char.trim()) === '') {\n        var _window$autoReader$ch;\n        window.autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (window.autoReader.currentIndex >= window.autoReader.charPositions.length) {\n        if (window.currentPage < window.totalPages) {\n          window.changePage(1);\n          clearInterval(window.autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n      const pos = window.autoReader.charPositions[window.autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      if (cursor && highlight) {\n        const contentRect = contentContainer.getBoundingClientRect();\n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        highlight.style.left = `${relativeX - charWidth / 2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n\n        // 滚动处理\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          if (isContainerScrollable) {\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = relativeY;\n            }\n          } else {\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      window.autoReader.currentIndex++;\n    }, window.autoReader.speed);\n\n    // 在停止自动阅读时清除所有高亮\n    window.autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n\n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n\n      // 调用清理函数\n      if (window.autoReader.cleanup) {\n        window.autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n\n    // 重置翻页状态\n    window.autoReader.isPageChanging = false;\n\n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n\n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n\n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n\n    // 收集字符位置\n    window.autoReader.charPositions = getAllCharacterPositions(content);\n\n    // 如果当前页没有内容，尝试翻页\n    if (window.autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !window.autoReader.isPageChanging) {\n        window.autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async e => {\n    const newMode = e.target.value;\n    const prevMode = readingMode;\n    console.log(`切换阅读模式: 从 ${prevMode} 到 ${newMode}`);\n\n    // 更新状态\n    setReadingMode(newMode);\n\n    // 如果有PDF文档和当前页，重新处理当前页内容\n    if (pdfDocument && currentPage > 0) {\n      try {\n        console.log('重新处理当前页面内容');\n        const page = await pdfDocument.getPage(currentPage);\n\n        // 不使用任何额外处理，直接使用最原始的方式重新加载页面\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n\n        // 根据当前模式设置内容\n        if (newMode === 'static') {\n          // 静态高亮模式 - 使用改进的句子处理\n          const html = formatSimpleHighlightedText(sentences);\n          console.log('设置静态高亮内容');\n          setContent(html);\n\n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n            if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n\n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n\n                // 验证文字颜色\n                if (styles.color === 'rgb(51, 51, 51)' || styles.color === '#333333') {\n                  console.log('文字颜色正确应用');\n                } else {\n                  console.warn('文字颜色可能未正确应用:', styles.color);\n                }\n              }\n            } else {\n              console.error('未找到静态高亮模式内容区域');\n            }\n          }, 200);\n        } else if (newMode === 'flash-reading') {\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n\n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n\n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n        } else {\n          // 其他模式保持不变\n          const handler = getContentHandlerForMode(newMode);\n          const processedContent = handler(sentences);\n          setContent(processedContent);\n        }\n      } catch (error) {\n        console.error('应用阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 首先确保移除鼠标跟随监听器\n    removeMouseFollowListeners();\n\n    // 清理节奏阅读器\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n\n    // 清理闪读器\n    if (window.flashReader) {\n      window.flashReader.cleanup();\n    }\n\n    // 清理舒适3D效果\n    const comfortable3DElements = document.querySelectorAll('.emboss-3d-text, .float-3d-text, .gradient-3d-text');\n    comfortable3DElements.forEach(el => el.remove());\n\n    // 清理闪读模式元素\n    const flashReadingElements = document.querySelectorAll('.flash-reading-container, .flash-reading-display, .flash-reading-controls');\n    flashReadingElements.forEach(el => el.remove());\n\n    // 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll('.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line, .rhythm-char');\n    highlights.forEach(el => {\n      if (el.parentNode) el.parentNode.removeChild(el);\n    });\n\n    // 彻底替换内容区域以移除所有事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      var _contentArea$querySel;\n      // 先保存底部翻页控件\n      const bottomPagination = contentArea.querySelector('.bottom-pagination');\n\n      // 深度克隆内容，但不克隆事件监听器\n      const contentHTML = ((_contentArea$querySel = contentArea.querySelector('div[dangerouslySetInnerHTML]')) === null || _contentArea$querySel === void 0 ? void 0 : _contentArea$querySel.innerHTML) || '';\n      const newContentArea = contentArea.cloneNode(false);\n\n      // 创建新的内容容器\n      const newContentContainer = document.createElement('div');\n      newContentContainer.innerHTML = contentHTML;\n      newContentArea.appendChild(newContentContainer);\n\n      // 如果有底部翻页控件，重新添加\n      if (bottomPagination && totalPages > 0) {\n        const newBottomPagination = bottomPagination.cloneNode(true);\n        // 重新绑定事件\n        const prevBtn = newBottomPagination.querySelector('.page-btn:first-child');\n        const nextBtn = newBottomPagination.querySelector('.page-btn:last-child');\n        if (prevBtn) prevBtn.onclick = () => changePage(-1);\n        if (nextBtn) nextBtn.onclick = () => changePage(1);\n        newContentArea.appendChild(newBottomPagination);\n      }\n      if (contentArea.parentNode) {\n        contentArea.parentNode.replaceChild(newContentArea, contentArea);\n      }\n    }\n\n    // 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 移除所有特殊标记和样式\n      paragraph.removeAttribute('data-follow');\n      paragraph.removeAttribute('style');\n\n      // 清理特殊span标签\n      paragraph.innerHTML = paragraph.innerHTML.replace(/<span class=\"text-line\"[^>]*>/g, '').replace(/<span class=\"rhythm-char\"[^>]*>/g, '').replace(/<span class=\"line-highlight[^\"]*\"[^>]*>/g, '').replace(/<span class=\"mouse-highlight[^\"]*\"[^>]*>/g, '').replace(/<\\/span>/g, '');\n    });\n\n    // 移除特殊UI元素\n    const elementsToRemove = ['rhythm-speed-slider', 'rhythm-notification'];\n    elementsToRemove.forEach(id => {\n      const element = document.getElementById(id);\n      if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    });\n\n    // 移除暗色背景\n    document.body.classList.remove('dark-background');\n\n    // 清理闪读模式\n    if (window.flashReader && typeof window.flashReader.cleanup === 'function') {\n      window.flashReader.cleanup();\n    }\n  };\n  const handleAutoScroll = () => {\n    window.autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = e => {\n    if (readingMode !== 'follow-mouse') return;\n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    const rect = contentArea.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    clearAllHighlights();\n    const paragraphs = contentArea.querySelectorAll('p');\n    paragraphs.forEach(paragraph => {\n      const paragraphRect = paragraph.getBoundingClientRect();\n      const paragraphX = paragraphRect.left - rect.left;\n      const paragraphY = paragraphRect.top - rect.top;\n      if (y >= paragraphY && y <= paragraphY + paragraphRect.height) {\n        const words = paragraph.querySelectorAll('span');\n        words.forEach(word => {\n          const wordRect = word.getBoundingClientRect();\n          const wordX = wordRect.left - rect.left;\n          if (x >= wordX && x <= wordX + wordRect.width) {\n            word.classList.add('highlight');\n          }\n        });\n      }\n    });\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 专门用于移除鼠标跟随事件的函数\n  const removeMouseFollowListeners = () => {\n    // 移除记录的所有监听器\n    if (window.eventTracker && window.eventTracker.mouseFollowHandlers) {\n      window.eventTracker.mouseFollowHandlers.forEach(({\n        element,\n        event,\n        handler\n      }) => {\n        if (element && element.removeEventListener) {\n          element.removeEventListener(event, handler);\n        }\n      });\n      window.eventTracker.mouseFollowHandlers = [];\n    }\n\n    // 为安全起见，尝试从document和内容区域移除通用处理函数\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    }\n    document.removeEventListener('mousemove', handleMouseMove);\n\n    // 清除所有当前高亮\n    clearAllHighlights();\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n\n    // 添加底部翻页控件样式\n    const bottomPaginationStyles = document.createElement('style');\n    bottomPaginationStyles.id = 'bottom-pagination-styles';\n    bottomPaginationStyles.innerHTML = `\n      .bottom-pagination {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        padding: 20px 0 30px;\n        margin-top: 30px;\n        width: 100%;\n        background-color: transparent;\n        border-radius: 5px;\n      }\n\n      .bottom-pagination .page-btn {\n        background-color: #6c5ce7;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        padding: 8px 15px;\n        margin: 0 10px;\n        cursor: pointer;\n        font-size: 14px;\n        transition: background-color 0.2s ease;\n      }\n\n      .bottom-pagination .page-btn:hover {\n        background-color: #4834d4;\n      }\n\n      .bottom-pagination .page-btn:disabled {\n        background-color: #aaa;\n        cursor: not-allowed;\n      }\n\n      .bottom-pagination .page-info {\n        font-size: 14px;\n        margin: 0 10px;\n      }\n    `;\n    document.head.appendChild(bottomPaginationStyles);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n    addComfortable3DStyles();\n\n    // 添加鼠标跟随模式的样式\n    const mouseFollowStyle = document.createElement('style');\n    mouseFollowStyle.id = 'intelligent-mouse-follow-style';\n    mouseFollowStyle.textContent = `\n      /* 基础样式 */\n      .mouse-follow-content {\n        position: relative;\n        line-height: 1.8;\n      }\n      \n      .mouse-follow-content .follow-line {\n        position: relative;\n        padding: 8px 16px;\n        margin: 4px 0;\n        border-radius: 6px;\n        transition: all 0.2s ease;\n        display: block;\n        min-height: 1.8em;\n        white-space: normal;\n        word-wrap: break-word;\n        text-indent: 2em;\n      }\n      \n      /* 高亮状态 */\n      .follow-line.highlighted {\n        background-color: #ffa500 !important; /* 橙色背景 */\n        color: #ffffff !important; /* 白色文字 */\n        font-weight: bold !important;\n        font-size: 1.1em; /* 稍微调小字号 */\n        transform: translateX(5px);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n      }\n      \n      \n      /* 平滑过渡效果 */\n      .follow-line {\n        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n      }\n      \n      /* 行间距优化 */\n      .mouse-follow-content .follow-line + .follow-line {\n        margin-top: 4px;\n      }\n      \n      /* 添加行指示器 */\n      .follow-line::before {\n        content: '';\n        position: absolute;\n        left: 0;\n        top: 0;\n        bottom: 0;\n        width: 3px;\n        background: linear-gradient(to bottom, transparent, rgba(255, 255, 255, 0.5), transparent);\n        opacity: 0;\n        transition: opacity 0.2s ease;\n      }\n      \n      .follow-line.highlighted::before {\n        opacity: 1;\n      }\n    `;\n    document.head.appendChild(mouseFollowStyle);\n\n    // 创建深色背景下的ADHD友好高亮样式\n    const style = document.createElement('style');\n    style.id = 'adhd-friendly-highlight-style';\n    style.textContent = `\n      /* ADHD友好的高亮样式 - 适配深色背景 */\n      .adhd-highlight-mode {\n        line-height: 1.8;\n        padding: 20px;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph {\n        margin-bottom: 1.2em;\n        background-color: transparent;\n        padding: 12px 15px;\n        border-radius: 6px;\n        border-left: 3px solid rgba(255, 255, 255, 0.2);\n        transition: all 0.3s ease;\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover {\n        transform: translateX(5px);\n        border-left-color: rgba(255, 255, 255, 0.4);\n      }\n      \n      /* 加粗样式 - 白色加粗 */\n      .adhd-bold {\n        font-weight: 700;\n        color: #ffffff;\n        letter-spacing: 0.02em;\n        font-size: 1.1em;\n        text-shadow: 0 0 1px rgba(255, 255, 255, 0.2);\n      }\n      \n      /* 彩色样式 - 使用鲜明的蓝色 */\n      .adhd-colored {\n        color: #6c5ce7;\n        font-weight: 500;\n        font-size: 1.05em;\n        text-shadow: 0 0 1px rgba(108, 92, 231, 0.2);\n      }\n      \n      /* 正常样式 - 普通白色 */\n      .adhd-normal {\n        color: rgba(255, 255, 255, 0.8);\n        font-size: 1em;\n      }\n\n      /* 添加平滑过渡效果 */\n      .adhd-bold, .adhd-colored, .adhd-normal {\n        transition: all 0.2s ease;\n      }\n\n      /* 悬停效果 */\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-bold {\n        color: #ffffff;\n        text-shadow: 0 0 2px rgba(255, 255, 255, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-colored {\n        color: #8a7ff7;\n        text-shadow: 0 0 2px rgba(138, 127, 247, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-normal {\n        color: rgba(255, 255, 255, 0.9);\n      }\n\n      /* 添加段落间距的视觉引导 */\n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph {\n        margin-top: 1.5em;\n        position: relative;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph::before {\n        content: '';\n        position: absolute;\n        top: -0.75em;\n        left: 0;\n        right: 0;\n        height: 1px;\n        background: linear-gradient(\n          to right,\n          transparent,\n          rgba(255, 255, 255, 0.1),\n          transparent\n        );\n      }\n    `;\n    document.head.appendChild(style);\n\n    // 添加基础鼠标跟随样式\n    const mouseFollowPageStyle = document.createElement('style');\n    mouseFollowPageStyle.id = 'basic-mouse-follow-style';\n    mouseFollowPageStyle.textContent = `\n      .follow-line {\n        padding: 8px 12px;\n        margin: 4px 0;\n        border-radius: 4px;\n        transition: background-color 0.2s ease;\n      }\n      .follow-line.highlighted {\n        background-color: #ffa500;\n        color: #000080;\n        font-weight: bold;\n      }\n    `;\n    document.head.appendChild(mouseFollowPageStyle);\n    return () => {\n      const existingStyle = document.getElementById('adhd-friendly-highlight-style');\n      if (existingStyle) existingStyle.remove();\n      const existingMouseFollowStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (existingMouseFollowStyle) existingMouseFollowStyle.remove();\n      const existingBasicMouseFollowStyle = document.getElementById('basic-mouse-follow-style');\n      if (existingBasicMouseFollowStyle) existingBasicMouseFollowStyle.remove();\n      mouseFollowPageStyle.remove();\n    };\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 清理旧监听器\n    removeMouseFollowListeners();\n\n    // 添加新监听器\n    setTimeout(() => {\n      addMouseFollowListeners();\n\n      // 添加调试辅助 - 显示行边界\n      const contentArea = document.querySelector('.mouse-follow-content');\n      if (contentArea) {\n        const lines = contentArea.querySelectorAll('.follow-line');\n        console.log(`初始化鼠标跟随模式，共 ${lines.length} 行`);\n\n        // 可选：启用可视化调试\n        if (false) {\n          // 设置为true可以启用可视化调试\n          lines.forEach((line, index) => {\n            line.style.border = '1px dashed #888';\n            line.setAttribute('title', `行 ${index + 1}`);\n          });\n        }\n\n        // 验证行高亮效果\n        const firstLine = lines[0];\n        if (firstLine) {\n          console.log('行样式验证:', {\n            padding: window.getComputedStyle(firstLine).padding,\n            margin: window.getComputedStyle(firstLine).margin,\n            fontSize: window.getComputedStyle(firstLine).fontSize,\n            lineHeight: window.getComputedStyle(firstLine).lineHeight\n          });\n        }\n      }\n    }, 100);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = delta => {\n    window.autoReader.speed = Math.max(100, window.autoReader.speed + delta);\n    if (window.autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async delta => {\n    console.log(`翻页请求: 当前页 ${currentPage}, 增量 ${delta}`);\n    const newPage = currentPage + delta;\n    if (newPage < 1 || newPage > totalPages) {\n      console.log('无效页码，不执行翻页');\n      return;\n    }\n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n    const wasFlashReading = readingMode === 'flash-reading' && window.flashReader && window.flashReader.isPlaying;\n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    if (wasFlashReading && window.flashReader) {\n      window.flashReader.cleanup();\n    }\n\n    // 更新页码\n    setCurrentPage(newPage);\n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n\n      // 检查是否为目录页\n      const textContent = await page.getTextContent();\n      const isToc = await detectIfTocPage(textContent);\n      setIsTableOfContents(isToc);\n      if (isToc) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, page.getViewport({\n          scale: 1.0\n        }));\n      } else {\n        // 处理正文页面 - 根据当前阅读模式处理\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n\n        // 根据当前模式设置内容\n        if (readingMode === 'static') {\n          console.log('翻页后应用静态高亮模式');\n          const processedContent = formatSimpleHighlightedText(sentences);\n          setContent(processedContent);\n\n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n            if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n\n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n              }\n            }\n          }, 200);\n        } else if (readingMode === 'flash-reading') {\n          // 如果是闪读模式，则需要特殊处理\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n\n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n\n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n          return; // 已处理，直接返回\n        } else {\n          // 其他模式使用原处理函数\n          await processContentPage(page, readingMode);\n        }\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n    } catch (error) {\n      console.error('页面切换错误:', error);\n    }\n  };\n\n  // ADHD友好的静态高亮处理函数\n  const formatSimpleHighlightedText = sentences => {\n    console.log('开始处理ADHD友好的静态高亮文本，句子数量:', sentences.length);\n    let html = '<div class=\"pdf-content adhd-highlight-mode\">';\n    sentences.forEach((sentence, sentenceIndex) => {\n      if (!sentence || sentence.trim() === '') {\n        console.log(`跳过空句子，索引: ${sentenceIndex}`);\n        return;\n      }\n\n      // 清理和规范化文本\n      const cleanText = sentence.trim().replace(/\\s+/g, ' ') // 规范化空白字符\n      .replace(/&/g, '&amp;') // 转义特殊字符\n      .replace(/</g, '&lt;').replace(/>/g, '&gt;');\n\n      // 处理句子中的单词，为它们添加不同样式\n      const words = cleanText.split(/(\\s+)/);\n      let formattedSentence = '';\n      words.forEach((word, wordIndex) => {\n        if (word.trim() === '') {\n          // 保留空格\n          formattedSentence += word;\n        } else {\n          // 根据位置应用不同的样式类\n          // 三种交替样式: 加粗、彩色、正常\n          const styleClass = wordIndex % 3 === 0 ? 'adhd-bold' : wordIndex % 3 === 1 ? 'adhd-colored' : 'adhd-normal';\n          formattedSentence += `<span class=\"${styleClass}\">${word}</span>`;\n        }\n      });\n      console.log(`处理句子 ${sentenceIndex + 1}:`, cleanText.substring(0, 50) + '...');\n      html += `<p class=\"pdf-paragraph\">${formattedSentence}</p>`;\n    });\n    html += '</div>';\n\n    // 调试输出\n    console.log('生成的ADHD友好静态高亮HTML:', html.substring(0, 200) + '...');\n    return html;\n  };\n\n  // 根据阅读模式获取相应的内容处理函数\n  const getContentHandlerForMode = mode => {\n    switch (mode) {\n      case 'normal':\n        return formatSentencesToHtml;\n      case 'static':\n        return applyStaticHighlightToSentences;\n      case 'follow-mouse':\n        return formatSentencesForMouseFollow;\n      case 'comfortable-3d':\n        return applyComfortable3dEffectToSentences;\n      case 'flash-reading':\n        return sentences => {\n          // 闪读模式使用专门的分割函数重新处理文本\n          return createFlashReadingContentFromSentences(sentences);\n        };\n      default:\n        return formatSentencesToHtml;\n    }\n  };\n\n  // 监听阅读模式和当前页面的变化\n  useEffect(() => {\n    if (readingMode === 'mouse-follow' && currentPage && !isTableOfContents) {\n      // 移除之前的样式\n      const oldStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (oldStyle) {\n        oldStyle.remove();\n      }\n\n      // 添加基础鼠标跟随样式\n      const followModeStyle = document.createElement('style');\n      followModeStyle.id = 'basic-mouse-follow-style';\n      followModeStyle.textContent = `\n        .follow-line {\n          padding: 8px 12px;\n          margin: 4px 0;\n          border-radius: 4px;\n          transition: background-color 0.2s ease;\n        }\n        .follow-line.highlighted {\n          background-color: #ffa500;\n          color: #000080;\n        font-weight: bold;\n        }\n      `;\n      document.head.appendChild(followModeStyle);\n\n      // 处理当前页面内容\n      const page = pdfDocument.getPage(currentPage);\n      const textContent = page.getTextContent();\n      const sentences = textContent.items.map(item => item.str).join(' ').split(/[。！？]/).filter(s => s.trim());\n\n      // 应用基础鼠标跟随格式化\n      setContent(formatSentencesForMouseFollow(sentences));\n\n      // 添加鼠标跟随监听器\n      setTimeout(() => {\n        addMouseFollowListeners();\n      }, 100);\n      return () => {\n        followModeStyle.remove();\n      };\n    }\n  }, [readingMode, currentPage, pdfDocument]);\n\n  // 添加全局节奏阅读速度控制器\n  (function () {\n    console.log(\"初始化全局节奏阅读速度控制器\");\n\n    // 配置参数和状态变量\n    let readingSpeed = 150; // 默认速度改为150ms，更快\n\n    // 创建独立的速度滑块UI\n    function createRhythmSpeedSlider() {\n      console.log(\"创建节奏阅读速度控制器...\");\n\n      // 先检查是否已存在\n      let existingSlider = document.getElementById('rhythm-speed-slider-container');\n      if (existingSlider) existingSlider.remove();\n\n      // 创建容器\n      const container = document.createElement('div');\n      container.id = 'rhythm-speed-slider-container';\n      container.style.cssText = `\n        position: fixed;\n        top: 50px;\n        right: 10px;\n        background: transparent;\n        padding: 5px;\n        z-index: 9999999;\n        display: flex;\n        flex-direction: column;\n        width: 60px;\n      `;\n\n      // 添加标签\n      const label = document.createElement('div');\n      label.textContent = readingSpeed + \"ms\";\n      label.id = 'rhythm-speed-label';\n      label.style.cssText = `\n        color: #333;\n        font-size: 12px;\n        font-weight: bold;\n        margin-bottom: 5px;\n        text-align: center;\n      `;\n      container.appendChild(label);\n\n      // 添加滑块\n      const slider = document.createElement('input');\n      slider.type = 'range';\n      slider.min = '30'; // 最小值调整为30ms\n      slider.max = '400'; // 最大值调整为400ms\n      slider.step = '10'; // 步长改为10ms，更精细\n      slider.value = readingSpeed;\n      slider.style.cssText = `\n        width: 150px;\n        height: 20px;\n        transform: rotate(90deg);\n        transform-origin: left center;\n        margin: 70px 0 0 -45px;\n      `;\n\n      // 滑块事件\n      slider.oninput = function () {\n        readingSpeed = parseInt(this.value);\n        label.textContent = readingSpeed + \"ms\";\n        console.log(\"节奏阅读速度已调整为:\", readingSpeed);\n\n        // 尝试使用全局节奏阅读控制接口\n        if (window.rhythmReading && typeof window.rhythmReading.updateSpeed === 'function') {\n          window.rhythmReading.updateSpeed(readingSpeed);\n          return;\n        }\n\n        // 如果全局接口不可用，使用备用方法\n        // 更新全局变量中的速度值\n        window.rhythmReadingSpeed = readingSpeed;\n\n        // 查找当前活动的节奏阅读实例并更新速度\n        const updateActiveRhythmReader = function () {\n          // 不直接引用intervalId和nextChar变量\n          /* 原代码会导致错误\n          if (typeof intervalId !== 'undefined' && intervalId) {\n            clearInterval(intervalId);\n            intervalId = setInterval(nextChar, readingSpeed);\n            console.log(\"已更新节奏阅读模式速度\");\n          }\n          */\n\n          // 如果是自动翻页版本的节奏阅读\n          if (window.rhythmReader && typeof window.rhythmReader.updateSpeed === 'function') {\n            window.rhythmReader.updateSpeed(readingSpeed);\n            console.log(\"已更新rhythmReader速度\");\n          }\n\n          // 查找全局作用域中的其他intervalId实例\n          for (let key in window) {\n            if (key.includes('rhythm') && key.includes('Interval') && window[key]) {\n              try {\n                clearInterval(window[key]);\n                // 不直接引用nextChar变量\n                if (typeof window['nextChar'] === 'function') {\n                  window[key] = setInterval(window['nextChar'], readingSpeed);\n                } else if (typeof window['advanceChar'] === 'function') {\n                  window[key] = setInterval(window['advanceChar'], readingSpeed);\n                } else if (typeof window['moveToNextChar'] === 'function') {\n                  window[key] = setInterval(window['moveToNextChar'], readingSpeed);\n                } else {\n                  console.log(`找到interval ${key} 但未找到对应的nextChar函数`);\n                  continue;\n                }\n                console.log(\"已更新\", key, \"的速度\");\n              } catch (e) {\n                console.error(\"更新\", key, \"速度失败\", e);\n              }\n            }\n          }\n        };\n        updateActiveRhythmReader();\n      };\n      container.appendChild(slider);\n      document.body.appendChild(container);\n      console.log(\"节奏阅读速度控制器已添加到DOM！\");\n      return container;\n    }\n\n    // 页面加载完成后添加滑块\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', function () {\n        setTimeout(createRhythmSpeedSlider, 1000);\n      });\n    } else {\n      setTimeout(createRhythmSpeedSlider, 1000);\n    }\n\n    // 暴露给全局，供其他脚本使用\n    window.createRhythmSpeedSlider = createRhythmSpeedSlider;\n    window.rhythmReadingSpeed = readingSpeed;\n  })();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3609,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3608,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reading-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u9605\\u8BFB\\u6A21\\u5F0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3613,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"reading-mode-select\",\n          value: readingMode,\n          onChange: handleReadingModeChange,\n          className: \"mode-select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"normal\",\n            children: \"\\u666E\\u901A\\u6A21\\u5F0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3620,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"static\",\n            children: \"\\u9759\\u6001\\u9AD8\\u4EAE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3621,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"follow-mouse\",\n            children: \"\\u9F20\\u6807\\u8DDF\\u968F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3622,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"rhythm\",\n            children: \"\\u8282\\u594F\\u9605\\u8BFB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3623,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"flash-reading\",\n            children: \"\\u95EA\\u8BFB\\u6A21\\u5F0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3624,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 3614,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3612,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".pdf,.txt,.md\",\n          hidden: true,\n          id: \"file-upload\",\n          onChange: handleFileUpload,\n          ref: fileRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3629,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"upload-btn\",\n          onClick: () => fileRef.current.click(),\n          children: \"\\u4E0A\\u4F20\\u6587\\u4EF6 (.pdf/.txt/.md)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3637,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3628,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 3607,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toolbar\",\n        children: fileName && /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"filename\",\n          children: fileName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3648,\n          columnNumber: 24\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3647,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-content\",\n        ref: readerContainerRef,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: content\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3653,\n          columnNumber: 13\n        }, this), totalPages > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bottom-pagination\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => changePage(-1),\n            disabled: currentPage <= 1,\n            className: \"page-btn\",\n            children: \"\\u4E0A\\u4E00\\u9875\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3657,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"page-info\",\n            children: [\"\\u7B2C \", currentPage, \" / \", totalPages, \" \\u9875\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 3664,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => changePage(1),\n            disabled: currentPage >= totalPages,\n            className: \"page-btn\",\n            children: \"\\u4E0B\\u4E00\\u9875\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3667,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 3656,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3652,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 3646,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 3606,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"x5N0itQI0gqtA84jt63lPsdPeRI=\");\n_c = App;\nexport default App;\n\n// 添加全局访问点，用于节奏阅读速度控制\n(function setupRhythmReadingGlobals() {\n  // 检查文档是否已加载\n  const whenDocumentReady = fn => {\n    if (document.readyState !== 'loading') {\n      fn();\n    } else {\n      document.addEventListener('DOMContentLoaded', fn);\n    }\n  };\n  whenDocumentReady(() => {\n    // 创建全局命名空间\n    window.rhythmReading = window.rhythmReading || {};\n\n    // 尝试查找节奏阅读的nextChar函数和intervalId\n    let foundNextChar = false;\n\n    // 设置全局监听，捕获所有setInterval调用\n    const originalSetInterval = window.setInterval;\n    window.setInterval = function (fn, delay) {\n      const intervalId = originalSetInterval.apply(this, arguments);\n\n      // 检测是否为节奏阅读相关的interval\n      if (fn.toString().includes('nextChar') || fn.toString().includes('readIndices') || fn.toString().includes('currentIndex++')) {\n        console.log(\"捕获到节奏阅读interval:\", intervalId);\n        window.rhythmReading.activeIntervalId = intervalId;\n        window.rhythmReading.nextCharFn = fn;\n        window.rhythmReading.currentDelay = delay;\n        foundNextChar = true;\n      }\n      return intervalId;\n    };\n\n    // 暴露更新速度的函数\n    window.rhythmReading.updateSpeed = function (newSpeed) {\n      if (window.rhythmReading.activeIntervalId) {\n        clearInterval(window.rhythmReading.activeIntervalId);\n        if (window.rhythmReading.nextCharFn) {\n          window.rhythmReading.activeIntervalId = setInterval(window.rhythmReading.nextCharFn, newSpeed);\n          window.rhythmReading.currentDelay = newSpeed;\n          console.log(\"节奏阅读速度已更新为:\", newSpeed);\n          return true;\n        }\n      }\n\n      // 如果找不到活动的interval，尝试遍历所有可能的节奏阅读实例\n      for (let key in window) {\n        if (key.toLowerCase().includes('rhythm') && window[key]) {\n          // 如果是对象且有updateSpeed方法\n          if (typeof window[key] === 'object' && typeof window[key].updateSpeed === 'function') {\n            try {\n              window[key].updateSpeed(newSpeed);\n              console.log(\"已更新\", key, \"的速度\");\n              return true;\n            } catch (e) {\n              console.error(\"更新\", key, \"速度失败\", e);\n            }\n          }\n        }\n      }\n      console.warn(\"未找到活动的节奏阅读实例\");\n      return false;\n    };\n    console.log(\"节奏阅读全局控制已设置\");\n  });\n})();\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","pdfjsLib","pdfjsViewer","marked","pdfjs","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","window","currentPage","totalPages","changePage","eventTracker","mouseFollowHandlers","autoReader","charPositions","intervalId","currentIndex","speed","pageContainer","isScrolling","isPageChanging","cleanup","rhythmReader","active","pagesRead","pageTransitioning","console","log","defaultSpeed","minSpeed","maxSpeed","speedStep","charElements","readIndices","Set","pageObserver","findNextPageButton","selectors","selector","buttons","document","querySelectorAll","btn","offsetParent","e","allButtons","text","textContent","trim","toLowerCase","autoTurnPage","nextButton","showMessage","clearInterval","disconnect","contentBefore","elementsBeforeClick","forEach","el","add","click","stabilityTimer","contentStable","MutationObserver","mutations","clearTimeout","contentNow","hasNewContent","has","setTimeout","startReading","observe","body","childList","subtree","attributes","characterData","span","parentNode","replaceChild","createTextNode","error","elementsToRemove","id","element","getElementById","remove","message","msgElement","createElement","style","cssText","appendChild","container","querySelector","textNodes","findText","i","childNodes","length","node","nodeType","nodeValue","push","includes","tagName","fragment","createDocumentFragment","className","dataset","index","updateDisplay","setInterval","nextChar","createSpeedController","color","fontWeight","isInViewport","rect","getBoundingClientRect","top","left","bottom","innerHeight","documentElement","clientHeight","right","innerWidth","clientWidth","currentChar","scrollIntoView","behavior","block","existingController","title","speedDisplay","slider","type","min","toString","max","step","value","width","oninput","newSpeed","parseInt","buttonContainer","pauseButton","onclick","stopButton","addTestButton","existingButton","button","initialize","readyState","addEventListener","start","stop","updateSpeed","display","activateRhythmReadingMode","alert","initializeRhythmReading","startRhythmReading","isActive","observer","contentAdded","some","mutation","addedNodes","addButton","background","handleModeChange","mode","originalFunction","readingModeChanged","manualStartRhythmReading","App","_s","pages","setPages","setCurrentPage","setTotalPages","fileName","setFileName","loading","setLoading","fileRef","file","setFile","pdfInstance","setPdfInstance","extractedTextPages","setExtractedTextPages","readingMode","setReadingMode","posMode","setPosMode","markdownContent","setMarkdownContent","readerContainerRef","content","setContent","pdfDocument","setPdfDocument","isTableOfContents","setIsTableOfContents","applyDarkBackground","classList","head","restoreDarkBackground","addNakedEye3DStyles","addComfortable3DStyles","addFlashReadingStyles","initializeFlashReading","sentences","flashReadingSentences","Array","isArray","speedSlider","speedValue","playButton","prevButton","progress","cover","flashReader","interval","isPlaying","disabled","displayCurrentSentence","currentSentence","displayRect","height","pause","localStorage","setItem","prevSentence","nextSentence","target","savedSpeed","getItem","initialSpeed","createFlashReadingContent","formatTextToHtml","paragraphs","split","html","paragraph","formatTextForMouseFollow","words","processedParagraph","word","applyStaticHighlight","lastColor","Math","random","applyNakedEye3dEffect","applyComfortable3dEffect","effectTypes","effectClass","floor","initializeNakedEye3D","textElements","delay","animationDelay","addMouseFollowListeners","contentArea","lastHighlightedLine","mouseMoveHandler","mouseY","clientY","allLines","foundLine","minDistance","Infinity","line","lineCenter","distance","abs","substring","mouseLeaveHandler","event","handler","initializeMouseFollow","handlePdfFile","fileURL","URL","createObjectURL","loadingTask","getDocument","pdf","promise","numPages","extractAndProcessPage","pageNum","page","getPage","getTextContent","viewport","getViewport","scale","detectIfTocPage","processTocPage","processContentPage","textItems","items","fullText","map","item","str","join","hasTocKeywords","test","hasPageNumberPatterns","shortLinesCount","linesWithNumbersCount","lineMap","Map","yKey","round","transform","set","get","lines","values","lineText","shortLineRatio","numberLineRatio","htmlContent","x","y","fontSize","sqrt","fontName","spacedText","getTextNodeAtPosition","nodes","Node","TEXT_NODE","range","createRange","selectNodeContents","rects","getClientRects","j","ELEMENT_NODE","found","processTextWithHighlight","result","extractedText","replace","splitIntoSentences","processedContent","formatSentencesToHtml","formatSimpleHighlightedText","formatSentencesForMouseFollow","applyComfortable3dEffectToSentences","createFlashReadingContentFromSentences","firstPara","styles","getComputedStyle","backgroundColor","fontFamily","sentenceRegex","lastIndex","match","exec","endIndex","sentence","lastSentence","splitIntoFlashReadingSegments","segments","segment","lastSegment","applyStaticHighlightToSentences","processedSentence","handleTxtFile","name","handleMarkdownFile","parse","p","parseError","tempDiv","innerHTML","plainText","innerText","handleFileUpload","uploadedFile","files","endsWith","getAllCharacterPositions","walker","createTreeWalker","NodeFilter","SHOW_TEXT","positions","nextNode","currentNode","setStart","setEnd","char","warn","filter","sort","a","b","yDiff","scrollElementToCenter","elementY","isContainerScrollable","scrollHeight","overflowY","targetScrollTop","containerVisibleHeight","scrollTo","absoluteElementY","createReaderCursor","cursor","isSentenceEnd","charPosition","sentenceEndMarks","nextIndex","findSentenceStart","prev","current","isInVisibleArea","threshold","visibleTop","scrollTop","visibleBottom","topThreshold","bottomThreshold","scrollY","startAutoReader","contentContainer","position","highlight","borderRadius","pointerEvents","zIndex","lineHeight","lastScrolledY","scrollSafeZone","charWidth","charHeight","xDiff","_window$autoReader$ch","stopAutoReader","pos","contentRect","relativeX","relativeY","isInRecentlyScrolledArea","needsScroll","scrollAmount","scrollBy","absoluteY","initializeAutoReader","handleReadingModeChange","newMode","prevMode","getContentHandlerForMode","cleanupDOM","removeMouseFollowListeners","comfortable3DElements","flashReadingElements","highlights","removeChild","_contentArea$querySel","bottomPagination","contentHTML","newContentArea","cloneNode","newContentContainer","newBottomPagination","prevBtn","nextBtn","removeAttribute","handleAutoScroll","updateCursorPosition","force","handleMouseMove","clientX","clearAllHighlights","paragraphRect","paragraphX","paragraphY","wordRect","wordX","removeEventListener","addAutoReaderStyles","bottomPaginationStyles","mouseFollowStyle","mouseFollowPageStyle","existingStyle","existingMouseFollowStyle","existingBasicMouseFollowStyle","border","setAttribute","firstLine","padding","margin","adjustSpeed","delta","newPage","wasRhythmReading","rhythmReaderGlobal","wasFlashReading","isToc","sentenceIndex","cleanText","formattedSentence","wordIndex","styleClass","oldStyle","followModeStyle","s","readingSpeed","createRhythmSpeedSlider","existingSlider","label","rhythmReading","rhythmReadingSpeed","updateActiveRhythmReader","key","children","_jsxFileName","lineNumber","columnNumber","onChange","accept","hidden","ref","onClick","dangerouslySetInnerHTML","__html","_c","setupRhythmReadingGlobals","whenDocumentReady","fn","foundNextChar","originalSetInterval","apply","arguments","activeIntervalId","nextCharFn","currentDelay","$RefreshReg$"],"sources":["D:/adhd-read-helper/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 添加全局事件跟踪对象\nwindow.eventTracker = window.eventTracker || {\n  mouseFollowHandlers: []\n};\n\n// 自动阅读器全局对象\nwindow.autoReader = {\n  charPositions: [],\n  intervalId: null,\n  currentIndex: 0,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false,\n  cleanup: null\n};\n\n// 创建统一的全局命名空间，确保在页面切换后仍然保持状态\nwindow.rhythmReader = window.rhythmReader || {\n  active: false,\n  speed: 150,\n  pagesRead: 0,\n  intervalId: null,\n  pageTransitioning: false  // 新增：翻页状态锁\n};\n\n// 节奏阅读模式 - 增强控制版\n(function() {\n  console.log(\"节奏阅读模式 - 增强控制版初始化\");\n  \n  // 配置参数\n  const defaultSpeed = window.rhythmReader.speed || 150;\n  const minSpeed = 30;\n  const maxSpeed = 400;\n  const speedStep = 10;\n  \n  // 状态变量\n  let charElements = [];\n  let currentIndex = 0;\n  let readIndices = new Set();\n  let pageObserver = null;  // 用于保存页面观察器引用\n  \n  // 查找下一页按钮\n  const findNextPageButton = function() {\n    const selectors = [\n      '.next-page',\n      '.next',\n      '#next',\n      '[aria-label=\"下一页\"]',\n      '[aria-label=\"Next\"]'\n    ];\n    \n    for (const selector of selectors) {\n      try {\n        const buttons = document.querySelectorAll(selector);\n        for (const btn of buttons) {\n          if (btn.offsetParent !== null) {\n            return btn;\n          }\n        }\n      } catch(e) {}\n    }\n    \n    const allButtons = document.querySelectorAll('button, a, div[role=\"button\"]');\n    for (const btn of allButtons) {\n      const text = (btn.textContent || '').trim().toLowerCase();\n      if (text === '下一页' || text === 'next' || text === '>' || text === '→') {\n        if (btn.offsetParent !== null) {\n          return btn;\n        }\n      }\n    }\n    \n    return null;\n  };\n  \n  // 修复的自动翻页函数\n  const autoTurnPage = function() {\n    console.log(\"尝试自动翻页...\");\n    \n    // 防止重复翻页 - 如果正在翻页过程中，直接返回\n    if (window.rhythmReader.pageTransitioning) {\n      console.log(\"已经在翻页过程中，忽略此次调用\");\n      return;\n    }\n    \n    const nextButton = findNextPageButton();\n    \n    if (!nextButton) {\n      console.log(\"未找到下一页按钮\");\n      showMessage(\"已读完当前页，但未找到下一页按钮\");\n      return;\n    }\n    \n    // 设置翻页状态锁\n    window.rhythmReader.pageTransitioning = true;\n    \n    // 停止当前阅读\n    if (window.rhythmReader.intervalId) {\n      clearInterval(window.rhythmReader.intervalId);\n      window.rhythmReader.intervalId = null;\n    }\n    \n    // 停止之前的观察器\n    if (pageObserver) {\n      pageObserver.disconnect();\n      pageObserver = null;\n    }\n    \n    window.rhythmReader.pagesRead++;\n    console.log(`已读完第 ${window.rhythmReader.pagesRead} 页，点击下一页按钮`);\n    \n    // 点击前先标记所有当前的内容元素\n    const contentBefore = document.querySelectorAll('p, div, article, section');\n    const elementsBeforeClick = new Set();\n    contentBefore.forEach(el => elementsBeforeClick.add(el));\n    \n    // 点击下一页按钮\n    nextButton.click();\n    \n    // 使用防抖的方式处理页面加载完成后的操作\n    let stabilityTimer = null;\n    let contentStable = false;\n    \n    pageObserver = new MutationObserver((mutations) => {\n      // 清除之前的定时器\n      if (stabilityTimer) {\n        clearTimeout(stabilityTimer);\n      }\n      \n      // 检查是否有新内容\n      const contentNow = document.querySelectorAll('p, div, article, section');\n      let hasNewContent = false;\n      \n      contentNow.forEach(el => {\n        if (!elementsBeforeClick.has(el)) {\n          hasNewContent = true;\n        }\n      });\n      \n      if (hasNewContent && !contentStable) {\n        console.log(\"检测到新内容，等待页面稳定...\");\n        \n        // 设置延迟，等待页面完全加载并稳定\n        stabilityTimer = setTimeout(() => {\n          console.log(\"页面稳定，准备开始阅读\");\n          contentStable = true;\n          \n          // 确保只执行一次\n          pageObserver.disconnect();\n          pageObserver = null;\n          \n          // 延迟启动阅读，给页面足够的渲染时间\n          setTimeout(() => {\n            window.rhythmReader.pageTransitioning = false;\n            startReading();\n          }, 1200);\n        }, 1000);\n      }\n    });\n    \n    // 监控整个文档的变化\n    pageObserver.observe(document.body, {\n      childList: true,\n      subtree: true,\n      attributes: false,\n      characterData: false\n    });\n    \n    // 设置超时保护，防止卡死\n    setTimeout(() => {\n      if (window.rhythmReader.pageTransitioning) {\n        console.log(\"翻页超时保护触发\");\n        if (pageObserver) {\n          pageObserver.disconnect();\n          pageObserver = null;\n        }\n        window.rhythmReader.pageTransitioning = false;\n      }\n    }, 10000);\n  };\n  \n  // 改进的清理函数，确保释放所有资源\n  const cleanup = function() {\n    console.log(\"执行清理...\");\n    \n    // 停止所有定时器\n    if (window.rhythmReader.intervalId) {\n      clearInterval(window.rhythmReader.intervalId);\n      window.rhythmReader.intervalId = null;\n    }\n    \n    // 停止观察器\n    if (pageObserver) {\n      pageObserver.disconnect();\n      pageObserver = null;\n    }\n    \n    // 重置翻页状态\n    window.rhythmReader.pageTransitioning = false;\n    \n    try {\n      document.querySelectorAll('.rhythm-char').forEach(span => {\n        if (span.parentNode) {\n          span.parentNode.replaceChild(document.createTextNode(span.textContent), span);\n        }\n      });\n    } catch(e) {\n      console.error(\"清理文本失败:\", e);\n    }\n    \n    charElements = [];\n    currentIndex = 0;\n    readIndices = new Set();\n    window.rhythmReader.active = false;\n    \n    // 清理UI元素\n    const elementsToRemove = [\n      'rhythm-control-panel',\n      'rhythm-speed-controller',\n      'rhythm-speed-container',\n      'simple-speed-container',\n      'rhythm-speed-slider-container'\n    ];\n    \n    elementsToRemove.forEach(id => {\n      const element = document.getElementById(id);\n      if (element) element.remove();\n    });\n  };\n  \n  // 改进的通知函数 - 使用非阻塞方式\n  const showMessage = function(message) {\n    console.log(message);\n    \n    // 创建临时消息元素而不是使用alert\n    const msgElement = document.createElement('div');\n    msgElement.textContent = message;\n    msgElement.style.cssText = `\n      position: fixed;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      background: rgba(0,0,0,0.8);\n      color: white;\n      padding: 15px 20px;\n      border-radius: 5px;\n      z-index: 9999999;\n      font-size: 16px;\n    `;\n    \n    document.body.appendChild(msgElement);\n    \n    setTimeout(() => {\n      msgElement.remove();\n    }, 3000);\n  };\n  \n  // 启动阅读\n  const startReading = function() {\n    console.log(\"启动节奏阅读...\");\n    \n    // 清理之前的实例\n    cleanup();\n    \n    const container = document.querySelector('.pdf-content') || \n                      document.querySelector('[class*=\"pdf\"]') || \n                      document.querySelector('article') || \n                      document.querySelector('main') || \n                      document.body;\n    \n    const textNodes = [];\n    const findText = function(element) {\n      for (let i = 0; i < element.childNodes.length; i++) {\n        const node = element.childNodes[i];\n        if (node.nodeType === 3 && node.nodeValue.trim() !== '') {\n          textNodes.push(node);\n        } else if (node.nodeType === 1 && \n                  !['SCRIPT', 'STYLE', 'BUTTON', 'INPUT', 'SELECT', 'NOSCRIPT'].includes(node.tagName)) {\n          findText(node);\n        }\n      }\n    };\n    findText(container);\n    \n    if (textNodes.length === 0) {\n      showMessage(\"错误: 未找到文本内容\");\n          return;\n      }\n    \n    try {\n      textNodes.forEach(node => {\n        if (!node.nodeValue || !node.parentNode) return;\n      \n        const text = node.nodeValue;\n        const fragment = document.createDocumentFragment();\n      \n        for (let i = 0; i < text.length; i++) {\n          const span = document.createElement('span');\n          span.textContent = text[i];\n          span.className = 'rhythm-char';\n          span.dataset.index = charElements.length;\n          \n          fragment.appendChild(span);\n          charElements.push(span);\n        }\n        \n        node.parentNode.replaceChild(fragment, node);\n      });\n    } catch(e) {\n      console.error(\"处理文本失败:\", e);\n      showMessage(\"生成节奏阅读效果失败\");\n      return;\n    }\n    \n    if (charElements.length === 0) {\n      showMessage(\"未找到可读内容\");\n      return;\n    }\n    \n    window.rhythmReader.active = true;\n    currentIndex = 0;\n    \n    updateDisplay();\n    window.rhythmReader.intervalId = setInterval(nextChar, window.rhythmReader.speed);\n    \n    // 创建速度控制器\n    createSpeedController();\n  };\n  \n  // 更新显示\n  const updateDisplay = function() {\n    charElements.forEach((span, index) => {\n      if (index === currentIndex) {\n        span.style.color = 'green';\n        span.style.fontWeight = 'bold';\n      } else if (readIndices.has(index)) {\n        span.style.color = '';  // 恢复正常颜色\n      } else {\n        span.style.color = 'rgba(200,200,200,0.3)';\n      }\n    });\n  };\n  \n  // 检查是否在视口中\n  const isInViewport = function(element) {\n    const rect = element.getBoundingClientRect();\n    return (\n      rect.top >= 0 &&\n      rect.left >= 0 &&\n      rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n      rect.right <= (window.innerWidth || document.documentElement.clientWidth)\n    );\n  };\n  \n  // 下一个字符\n  const nextChar = function() {\n    if (!window.rhythmReader.active || !charElements.length) return;\n    \n    readIndices.add(currentIndex);\n    \n    currentIndex++;\n    if (currentIndex >= charElements.length) {\n      if (window.rhythmReader.intervalId) {\n        clearInterval(window.rhythmReader.intervalId);\n        window.rhythmReader.intervalId = null;\n      }\n      console.log(\"当前页已读完，尝试翻页\");\n      autoTurnPage();\n      return;\n    }\n    \n    updateDisplay();\n    \n    // 确保当前字符可见\n    const currentChar = charElements[currentIndex];\n    if (currentChar && !isInViewport(currentChar)) {\n      currentChar.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center'\n      });\n    }\n  };\n  \n  // 创建统一的速度控制器\n  const createSpeedController = function() {\n    // 检查是否已存在\n    let existingController = document.getElementById('rhythm-speed-controller');\n    if (existingController) existingController.remove();\n    \n    // 创建容器\n      const container = document.createElement('div');\n    container.id = 'rhythm-speed-controller';\n    container.style.cssText = `\n      position: fixed;\n      top: 10px;\n      right: 10px;\n      background: rgba(255,255,255,0.9);\n      padding: 10px;\n      border-radius: 5px;\n      box-shadow: 0 2px 8px rgba(0,0,0,0.2);\n      z-index: 9999999;\n      display: flex;\n      flex-direction: column;\n      font-family: Arial, sans-serif;\n    `;\n    \n    // 标题\n    const title = document.createElement('div');\n    title.textContent = '节奏阅读控制';\n    title.style.cssText = `\n      font-weight: bold;\n      margin-bottom: 8px;\n      text-align: center;\n    `;\n    container.appendChild(title);\n    \n    // 速度显示\n    const speedDisplay = document.createElement('div');\n    speedDisplay.textContent = `速度: ${window.rhythmReader.speed}ms`;\n    speedDisplay.id = 'rhythm-speed-display';\n    speedDisplay.style.cssText = `\n      margin-bottom: 8px;\n      text-align: center;\n      font-size: 14px;\n    `;\n    container.appendChild(speedDisplay);\n    \n    // 速度滑块\n    const slider = document.createElement('input');\n    slider.type = 'range';\n    slider.min = minSpeed.toString();\n    slider.max = maxSpeed.toString();\n    slider.step = speedStep.toString();\n    slider.value = window.rhythmReader.speed.toString();\n    slider.style.width = '100%';\n    \n    slider.oninput = function() {\n        const newSpeed = parseInt(this.value);\n      window.rhythmReader.speed = newSpeed;\n      speedDisplay.textContent = `速度: ${newSpeed}ms`;\n      \n      if (window.rhythmReader.intervalId) {\n        clearInterval(window.rhythmReader.intervalId);\n        window.rhythmReader.intervalId = setInterval(nextChar, newSpeed);\n      }\n    };\n    container.appendChild(slider);\n    \n    // 按钮容器\n    const buttonContainer = document.createElement('div');\n    buttonContainer.style.cssText = `\n      display: flex;\n      justify-content: space-between;\n      margin-top: 8px;\n    `;\n    \n    // 暂停/继续按钮\n    const pauseButton = document.createElement('button');\n    pauseButton.textContent = '暂停';\n    pauseButton.style.cssText = `\n      flex: 1;\n      margin-right: 5px;\n      padding: 5px;\n      cursor: pointer;\n    `;\n    \n    pauseButton.onclick = function() {\n      if (window.rhythmReader.intervalId) {\n        clearInterval(window.rhythmReader.intervalId);\n        window.rhythmReader.intervalId = null;\n        this.textContent = '继续';\n      } else {\n        window.rhythmReader.intervalId = setInterval(nextChar, window.rhythmReader.speed);\n        this.textContent = '暂停';\n      }\n    };\n    buttonContainer.appendChild(pauseButton);\n    \n    // 停止按钮\n    const stopButton = document.createElement('button');\n    stopButton.textContent = '停止';\n    stopButton.style.cssText = `\n      flex: 1;\n      margin-left: 5px;\n      padding: 5px;\n      cursor: pointer;\n    `;\n    \n    stopButton.onclick = cleanup;\n    buttonContainer.appendChild(stopButton);\n    \n    container.appendChild(buttonContainer);\n      document.body.appendChild(container);\n  };\n  \n  // 添加测试按钮\n  const addTestButton = function() {\n    // 检查是否已存在\n    let existingButton = document.getElementById('rhythm-test-button');\n    if (existingButton) return;\n    \n    const button = document.createElement('button');\n    button.id = 'rhythm-test-button';\n    button.textContent = '开启节奏阅读';\n    button.style.cssText = `\n      position: fixed;\n      top: 10px;\n      right: 10px;\n      z-index: 999999;\n      background: #4CAF50;\n      color: white;\n      padding: 8px 12px;\n      border: none;\n      border-radius: 4px;\n      font-size: 14px;\n      cursor: pointer;\n      box-shadow: 0 2px 5px rgba(0,0,0,0.2);\n    `;\n    \n    button.onclick = startReading;\n    document.body.appendChild(button);\n  };\n  \n  // 初始化\n  const initialize = function() {\n    console.log(\"初始化节奏阅读组件...\");\n    \n    // 页面加载后添加测试按钮\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', addTestButton);\n    } else {\n      addTestButton();\n    }\n    \n    // 提供API接口\n    window.rhythmReader.start = startReading;\n    window.rhythmReader.stop = cleanup;\n    window.rhythmReader.updateSpeed = function(newSpeed) {\n      window.rhythmReader.speed = newSpeed;\n      \n      // 更新速度显示\n      const display = document.getElementById('rhythm-speed-display');\n      if (display) display.textContent = `速度: ${newSpeed}ms`;\n      \n      // 更新定时器\n      if (window.rhythmReader.intervalId) {\n        clearInterval(window.rhythmReader.intervalId);\n        window.rhythmReader.intervalId = setInterval(nextChar, newSpeed);\n      }\n      \n      return true;\n    };\n  };\n  \n  // 执行初始化\n  initialize();\n  \n  console.log(\"节奏阅读模式初始化完成 - 增强控制版\");\n})();\n\n// 定义一个全局函数用于从应用代码中启动节奏阅读\nwindow.activateRhythmReadingMode = function() {\n  console.log(\"尝试从应用代码中启动节奏阅读模式\");\n  if (window.rhythmReader) {\n    if (window.rhythmReader.active) {\n      console.log(\"节奏阅读模式已经在运行\");\n        } else {\n      window.rhythmReader.start();\n    }\n  } else {\n    console.error(\"节奏阅读模式未初始化\");\n    alert(\"无法启动节奏阅读模式：组件未初始化\");\n  }\n};\n\n// 更新初始化函数\nconst initializeRhythmReading = () => {\n  // 不再自动初始化，而是等待用户选择\n  console.log(\"节奏阅读模式准备就绪，等待用户选择\");\n};\n\n// 更新启动函数\nconst startRhythmReading = () => {\n  if (window.rhythmReader && typeof window.rhythmReader.start === 'function') {\n    window.rhythmReader.start();\n  }\n};\n\n// 节奏阅读模式 - 自动翻页版\n(function() {\n  console.log(\"节奏阅读模式 - 自动翻页版初始化\");\n  \n  // 状态变量\n  let isActive = false;\n  let intervalId = null;\n  let charElements = [];\n  let currentIndex = 0;\n  let readIndices = new Set();\n  \n  // 进度监控 - 记录已读页数\n  let pagesRead = 0;\n  \n  // 查找下一页按钮的帮助函数\n  const findNextPageButton = function() {\n    // 常见的选择器\n    const selectors = [\n      '.next-page',\n      '.next',\n      '#next',\n      '[aria-label=\"下一页\"]',\n      '[aria-label=\"Next\"]',\n      'button:contains(\"下一页\")', \n      'button:contains(\"Next\")'\n    ];\n    \n    for (const selector of selectors) {\n      try {\n        const buttons = document.querySelectorAll(selector);\n        for (const btn of buttons) {\n          if (btn.offsetParent !== null) { // 确保按钮可见\n            return btn;\n          }\n        }\n      } catch(e) {}\n    }\n    \n    // 如果通过选择器找不到，尝试通过文本内容查找\n    const allButtons = document.querySelectorAll('button, a, div[role=\"button\"]');\n    for (const btn of allButtons) {\n      const text = (btn.textContent || '').trim().toLowerCase();\n      if (text === '下一页' || text === 'next' || text === '>' || text === '→') {\n        if (btn.offsetParent !== null) {\n          return btn;\n        }\n      }\n    }\n    \n    return null;\n  };\n  \n  // 自动翻页函数\n  const autoTurnPage = function() {\n    console.log(\"尝试自动翻页...\");\n    \n    // 找到下一页按钮\n    const nextButton = findNextPageButton();\n    \n    if (!nextButton) {\n      console.log(\"未找到下一页按钮\");\n      showMessage(\"已读完当前页，但未找到下一页按钮\");\n        return;\n      }\n    \n    // 暂停当前阅读\n    if (intervalId) {\n      clearInterval(intervalId);\n      intervalId = null;\n    }\n    \n    // 增加已读页数\n    pagesRead++;\n    console.log(`已读完第 ${pagesRead} 页，点击下一页按钮`);\n    \n    // 模拟点击下一页按钮\n    nextButton.click();\n    \n    // 监听DOM变化，等待新页面加载\n    const observer = new MutationObserver((mutations) => {\n      // 检查新内容是否已加载\n      const contentAdded = mutations.some(mutation => \n        mutation.type === 'childList' && mutation.addedNodes.length > 0\n      );\n      \n      if (contentAdded) {\n        console.log(\"检测到新内容已加载\");\n        // 停止观察\n        observer.disconnect();\n        \n        // 延迟一下，确保新页面完全加载\n        setTimeout(() => {\n          // 重新启动节奏阅读模式\n          console.log(\"在新页面上重新启动节奏阅读模式\");\n          startReading();\n        }, 800);\n      }\n    });\n    \n    // 开始观察文档变化\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  };\n  \n  // 清理函数\n  const cleanup = function() {\n    console.log(\"执行清理...\");\n    \n    if (intervalId) {\n      clearInterval(intervalId);\n      intervalId = null;\n    }\n    \n    try {\n      document.querySelectorAll('.rhythm-char').forEach(span => {\n        if (span.parentNode) {\n          span.parentNode.replaceChild(document.createTextNode(span.textContent), span);\n        }\n      });\n    } catch(e) {\n      console.error(\"清理文本失败:\", e);\n    }\n    \n    charElements = [];\n    currentIndex = 0;\n    readIndices = new Set();\n    isActive = false;\n    pagesRead = 0;\n    \n    const button = document.getElementById('rhythm-control-button');\n    if (button) button.remove();\n  };\n  \n  // 简单通知\n  const showMessage = function(message) {\n    console.log(message);\n    alert(message);\n  };\n  \n  // 添加控制按钮\n  const addButton = function() {\n    const existingButton = document.getElementById('rhythm-control-button');\n    if (existingButton) existingButton.remove();\n    \n    const button = document.createElement('button');\n    button.id = 'rhythm-control-button';\n    button.textContent = '暂停节奏阅读';\n    button.style.cssText = `\n      position: fixed;\n      bottom: 20px;\n      right: 20px;\n      z-index: 999999;\n      background: #4CAF50;\n      color: white;\n      padding: 10px 15px;\n      border: none;\n      border-radius: 5px;\n      font-size: 16px;\n      font-weight: bold;\n      cursor: pointer;\n    `;\n    \n    button.onclick = function() {\n      if (intervalId) {\n        // 暂停\n        if (intervalId) {\n          clearInterval(intervalId);\n          intervalId = null;\n        }\n        button.textContent = '继续节奏阅读';\n        button.style.background = '#2196F3';\n        } else {\n        // 继续\n        intervalId = setInterval(nextChar, 300);\n        button.textContent = '暂停节奏阅读';\n        button.style.background = '#4CAF50';\n      }\n    };\n    \n    document.body.appendChild(button);\n    return button;\n  };\n  \n  // 启动阅读\n  const startReading = function() {\n    console.log(\"启动节奏阅读...\");\n    \n    // 清理之前的实例\n    cleanup();\n    \n    // 查找内容容器\n    const container = document.querySelector('.pdf-content') || \n                      document.querySelector('[class*=\"pdf\"]') || \n                      document.querySelector('article') || \n                      document.querySelector('main') || \n                      document.body;\n    \n    // 查找所有文本节点\n    const textNodes = [];\n    const findText = function(element) {\n      for (let i = 0; i < element.childNodes.length; i++) {\n        const node = element.childNodes[i];\n        if (node.nodeType === 3 && node.nodeValue.trim() !== '') {\n          textNodes.push(node);\n        } else if (node.nodeType === 1 && \n                  !['SCRIPT', 'STYLE', 'BUTTON', 'INPUT', 'SELECT', 'NOSCRIPT'].includes(node.tagName)) {\n          findText(node);\n        }\n      }\n    };\n    findText(container);\n    \n    if (textNodes.length === 0) {\n      showMessage(\"错误: 未找到文本内容\");\n      return;\n    }\n    \n    // 处理文本节点\n    try {\n      textNodes.forEach(node => {\n        if (!node.nodeValue || !node.parentNode) return;\n        \n        const text = node.nodeValue;\n        const fragment = document.createDocumentFragment();\n        \n        for (let i = 0; i < text.length; i++) {\n          const span = document.createElement('span');\n          span.textContent = text[i];\n          span.className = 'rhythm-char';\n          span.dataset.index = charElements.length;\n          \n          fragment.appendChild(span);\n          charElements.push(span);\n        }\n        \n        node.parentNode.replaceChild(fragment, node);\n      });\n    } catch(e) {\n      console.error(\"处理文本失败:\", e);\n      showMessage(\"生成节奏阅读效果失败\");\n      return;\n    }\n    \n    if (charElements.length === 0) {\n      showMessage(\"未找到可读内容\");\n      return;\n    }\n    \n    // 激活状态\n    isActive = true;\n    currentIndex = 0;\n    \n    // 更新显示\n    updateDisplay();\n    \n    // 开始阅读\n    intervalId = setInterval(nextChar, 300);\n    \n    addButton();\n  };\n  \n  // 更新显示\n  const updateDisplay = function() {\n    charElements.forEach((span, index) => {\n      if (index === currentIndex) {\n        span.style.color = 'green';\n        span.style.fontWeight = 'bold';\n      } else if (readIndices.has(index)) {\n        span.style.color = 'white';\n      } else {\n        span.style.color = 'rgba(200,200,200,0.3)';\n      }\n    });\n  };\n  \n  // 下一个字符\n  const nextChar = function() {\n    if (!isActive || !charElements.length) return;\n    \n    readIndices.add(currentIndex);\n    \n    currentIndex++;\n    if (currentIndex >= charElements.length) {\n      // 当前页已读完\n      if (intervalId) {\n        clearInterval(intervalId);\n        intervalId = null;\n      }\n      console.log(\"当前页已读完，尝试翻页\");\n      autoTurnPage(); // 尝试自动翻页\n        return;\n      }\n    \n    updateDisplay();\n  };\n  \n  // 处理模式切换\n  const handleModeChange = function(mode) {\n    console.log(\"模式更改为:\", mode);\n    \n    if (mode !== 'rhythm' && mode !== 'rhythmReading' && isActive) {\n      cleanup();\n    }\n  };\n  \n  // 重写模式切换函数\n  const originalFunction = window.readingModeChanged;\n  window.readingModeChanged = function(mode) {\n    if (typeof originalFunction === 'function') {\n      try {\n        originalFunction(mode);\n      } catch(e) {}\n    }\n    \n    handleModeChange(mode);\n  };\n  \n  // 添加测试按钮\n  const addTestButton = function() {\n    const button = document.createElement('button');\n    button.id = 'rhythm-test-button';\n    button.textContent = '测试节奏阅读';\n    button.style.cssText = `\n      position: fixed;\n      top: 10px;\n      right: 10px;\n      z-index: 999999;\n      background: #ff9800;\n      color: white;\n      padding: 8px;\n      border: none;\n      border-radius: 4px;\n      font-size: 14px;\n      cursor: pointer;\n    `;\n    \n    button.onclick = startReading;  // 直接启动阅读\n    document.body.appendChild(button);\n  };\n  \n  // 初始化\n  const initialize = function() {\n    console.log(\"初始化节奏阅读组件...\");\n    \n    addTestButton();\n  };\n  \n  // 等待DOM加载完成\n  document.addEventListener('DOMContentLoaded', initialize);\n  \n  // 暴露全局API\n  window.manualStartRhythmReading = startReading;\n  \n  console.log(\"节奏阅读模式初始化完成 - 自动翻页版\");\n})();\n\nconst App = () => {\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  const [isTableOfContents, setIsTableOfContents] = useState(false);\n  \n  // 实现缺失的函数\n  // 应用深色背景\n  const applyDarkBackground = () => {\n    document.body.classList.add('dark-background');\n    \n    // 添加必要的CSS样式\n    if (!document.getElementById('dark-background-style')) {\n      const style = document.createElement('style');\n      style.id = 'dark-background-style';\n      style.textContent = `\n        .dark-background {\n          background-color: #000 !important;\n        }\n        .dark-background .sidebar {\n          background: linear-gradient(145deg, #4834d4, #341f9e) !important;\n        }\n        .dark-background .page-content {\n          background-color: #000 !important;\n        }\n        .dark-background .main-content {\n          background-color: #000 !important;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 恢复正常背景\n  const restoreDarkBackground = () => {\n    document.body.classList.remove('dark-background');\n  };\n  \n  // 添加裸眼3D样式\n  const addNakedEye3DStyles = () => {\n    if (!document.getElementById('naked-eye-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'naked-eye-3d-style';\n      style.textContent = `\n        .naked-eye-3d-container {\n          position: relative;\n          perspective: 800px;\n          width: 100%;\n        }\n        \n        .naked-eye-3d-text {\n          display: inline-block;\n          animation: float 3s ease-in-out infinite;\n          text-shadow: 0 0 5px rgba(255,255,255,0.3);\n          padding: 0 4px;\n          color: white;\n          filter: drop-shadow(0 0 5px rgba(120, 220, 255, 0.6));\n        }\n        \n        @keyframes float {\n          0% { transform: translateZ(0px); }\n          50% { transform: translateZ(20px); }\n          100% { transform: translateZ(0px); }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 添加舒适3D样式\n  const addComfortable3DStyles = () => {\n    if (!document.getElementById('comfortable-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'comfortable-3d-style';\n      style.textContent = `\n        .emboss-3d-text {\n          color: #fff;\n          text-shadow: \n            1px 1px 1px rgba(0,0,0,0.5),\n            -1px -1px 1px rgba(255,255,255,0.5);\n          letter-spacing: 1.5px;\n          font-weight: 500;\n        }\n        \n        .float-3d-text {\n          display: inline-block;\n          transform-style: preserve-3d;\n          transform: perspective(500px) translateZ(10px);\n          text-shadow: 0 2px 5px rgba(0,0,0,0.5);\n        }\n        \n        .gradient-3d-text {\n          display: inline-block;\n          background: linear-gradient(to bottom, #fff, #aaa);\n          -webkit-background-clip: text;\n          -webkit-text-fill-color: transparent;\n          text-shadow: 0 2px 4px rgba(0,0,0,0.3);\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 添加闪读样式\n  const addFlashReadingStyles = () => {\n    if (!document.getElementById('flash-reading-style')) {\n      const style = document.createElement('style');\n      style.id = 'flash-reading-style';\n      style.textContent = `\n        .flash-reading-container {\n          position: relative;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          z-index: 1000;\n          padding: 20px;\n        }\n        \n        .flash-reading-display-wrapper {\n          position: relative;\n          margin: 40px 0;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        \n        .flash-reading-display {\n          font-size: 36px;\n          font-weight: bold;\n          text-align: center;\n          color: white;\n          min-height: 80px;\n          max-width: 90%;\n          padding: 20px 40px;\n          position: relative; /* 允许绝对定位的覆盖层 */\n          z-index: 2;\n        }\n        \n        .flash-reading-cover {\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(128, 128, 128, 0.6); /* 灰色遮罩 */\n          border-radius: 8px;\n          z-index: 1; /* 确保在文本后面 */\n        }\n        \n        .flash-reading-controls {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          gap: 20px;\n          margin-bottom: 20px;\n          width: 100%;\n        }\n        \n        .flash-reading-buttons {\n          display: flex;\n          gap: 10px;\n          flex-wrap: wrap;\n          justify-content: center;\n        }\n        \n        .flash-reading-speed {\n          display: flex;\n          align-items: center;\n          color: white;\n          width: 80%;\n          max-width: 400px;\n          gap: 10px;\n        }\n        \n        .flash-reading-slider {\n          flex: 1;\n          height: 8px;\n          appearance: none;\n          background: #555;\n          border-radius: 4px;\n          outline: none;\n        }\n        \n        .flash-reading-slider::-webkit-slider-thumb {\n          appearance: none;\n          width: 20px;\n          height: 20px;\n          border-radius: 50%;\n          background: #6c5ce7;\n          cursor: pointer;\n        }\n        \n        .flash-reading-btn {\n          padding: 10px 20px;\n          border: none;\n          border-radius: 4px;\n          background-color: #6c5ce7;\n          color: white;\n          font-size: 16px;\n          cursor: pointer;\n          transition: background-color 0.2s;\n        }\n        \n        .flash-reading-btn:hover {\n          background-color: #5344c0;\n        }\n        \n        .flash-reading-btn:disabled {\n          background-color: #aaa;\n          cursor: not-allowed;\n        }\n        \n        .flash-reading-progress {\n          color: white;\n          font-size: 14px;\n          margin-top: 10px;\n        }\n        .flash-reading-speed-note {\n          font-size: 12px;\n          color: #ccc;\n          margin-left: 5px;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 初始化闪读模式\n  const initializeFlashReading = () => {\n    // 添加样式\n    addFlashReadingStyles();\n    \n    const sentences = window.flashReadingSentences;\n    if (!sentences || !Array.isArray(sentences) || sentences.length === 0) {\n      console.error('闪读模式: 未找到句子数据');\n        return;\n      }\n    \n    // 获取全局UI元素\n    const display = document.getElementById('flash-reading-display');\n    const speedSlider = document.getElementById('flash-reading-speed');\n    const speedValue = document.getElementById('flash-reading-speed-value');\n    const playButton = document.getElementById('flash-reading-play');\n    const pauseButton = document.getElementById('flash-reading-pause');\n    const stopButton = document.getElementById('flash-reading-stop');\n    const prevButton = document.getElementById('flash-reading-prev-sentence');\n    const nextButton = document.getElementById('flash-reading-next-sentence');\n    const progress = document.getElementById('flash-reading-progress');\n    const cover = document.querySelector('.flash-reading-cover');\n    \n    if (!display || !speedSlider || !speedValue || !playButton || !pauseButton || !stopButton || !prevButton || !nextButton || !progress || !cover) {\n      console.error('闪读模式: 未找到UI元素');\n        return;\n      }\n\n    // 创建闪读控制器\n    window.flashReader = {\n      sentences: sentences,\n      currentIndex: 0,\n      interval: null,\n      speed: parseInt(speedSlider.value),\n      isPlaying: false,\n      \n      // 开始闪读\n      start() {\n        if (this.interval) {\n          clearInterval(this.interval);\n        }\n        \n        this.isPlaying = true;\n        playButton.disabled = true;\n        pauseButton.disabled = false;\n        progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        \n        // 显示当前句子\n        this.displayCurrentSentence();\n        \n        // 设置闪读间隔\n        this.interval = setInterval(() => {\n          this.currentIndex++;\n          \n          if (this.currentIndex >= this.sentences.length) {\n            this.stop();\n            display.textContent = '阅读完成';\n            return;\n          }\n          \n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }, this.speed);\n      },\n      \n      // 显示当前句子\n      displayCurrentSentence() {\n        if (this.currentIndex < this.sentences.length) {\n          const currentSentence = this.sentences[this.currentIndex];\n          display.textContent = currentSentence;\n          display.style.color = 'white'; // 确保文本为白色\n          \n          // 调整背景以适应内容\n          setTimeout(() => {\n            const displayRect = display.getBoundingClientRect();\n            // 确保覆盖层完全包裹文本\n            cover.style.width = `${displayRect.width}px`;\n            cover.style.height = `${displayRect.height}px`;\n          }, 10);\n        }\n      },\n      \n      // 暂停闪读\n      pause() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        \n        this.isPlaying = false;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n      },\n      \n      // 停止闪读\n      stop() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        \n        this.isPlaying = false;\n        this.currentIndex = 0;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n        \n        display.textContent = '准备开始';\n        progress.textContent = `进度：0 / ${this.sentences.length}`; // 重置进度\n      },\n      \n      // 更新速度\n      updateSpeed(newSpeed) {\n        this.speed = newSpeed;\n        speedValue.textContent = `${newSpeed} ms`;\n        \n        // 保存速度设置到本地存储\n        localStorage.setItem('flash-reading-speed', newSpeed);\n        \n        // 如果正在播放，重新开始以应用新速度\n        if (this.isPlaying) {\n          clearInterval(this.interval);\n          this.start(); // 直接调用start方法重新开始\n        }\n      },\n\n      // 返回上一句\n      prevSentence() {\n        if (this.currentIndex > 0) {\n          this.currentIndex--;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n\n      // 跳到下一句\n      nextSentence() {\n        if (this.currentIndex < this.sentences.length - 1) {\n          this.currentIndex++;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n\n      // 清理资源\n      cleanup() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        this.currentIndex = 0;\n      }\n    };\n    \n    // 添加事件监听器\n    playButton.addEventListener('click', () => {\n      window.flashReader.start();\n    });\n    \n    pauseButton.addEventListener('click', () => {\n      window.flashReader.pause();\n    });\n    \n    stopButton.addEventListener('click', () => {\n      window.flashReader.stop();\n    });\n    \n    speedSlider.addEventListener('input', (e) => {\n      const newSpeed = parseInt(e.target.value);\n      window.flashReader.updateSpeed(newSpeed);\n    });\n\n    prevButton.addEventListener('click', () => {\n      window.flashReader.prevSentence();\n    });\n\n    nextButton.addEventListener('click', () => {\n      window.flashReader.nextSentence();\n    });\n    \n    // 初始化\n    const savedSpeed = localStorage.getItem('flash-reading-speed');\n    const initialSpeed = savedSpeed ? parseInt(savedSpeed) : 1000;\n    speedSlider.value = initialSpeed;\n    window.flashReader.updateSpeed(initialSpeed);\n    \n    console.log('闪读模式已初始化，共 ' + sentences.length + ' 个句子');\n  };\n  \n  // 创建闪读内容\n  const createFlashReadingContent = (text) => {\n    return `<div class=\"flash-reading-content\">\n      <p>${text}</p>\n    </div>`;\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 格式化文本用于鼠标跟随\n  const formatTextForMouseFollow = (text) => {\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个单词添加span，以便于添加高亮效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"follow-word\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\" data-follow=\"true\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用静态高亮\n  const applyStaticHighlight = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为单词随机添加颜色高亮\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      let lastColor = null;\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n          return;\n        }\n        \n        // 随机决定是否高亮和使用哪种颜色\n        if (Math.random() < 0.7) {\n          let color;\n          if (lastColor === 'red') {\n            color = 'blue';\n          } else if (lastColor === 'blue') {\n            color = 'red';\n  } else {\n            color = Math.random() < 0.5 ? 'red' : 'blue';\n          }\n          lastColor = color;\n          \n          processedParagraph += `<span class=\"highlight-word ${color}\">${word}</span>`;\n        } else {\n          processedParagraph += word;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用裸眼3D效果\n  const applyNakedEye3dEffect = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content naked-eye-3d-container\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个词添加3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"naked-eye-3d-text\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用舒适3D效果\n  const applyComfortable3dEffect = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个词随机应用不同的3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n  } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          \n          processedParagraph += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 初始化裸眼3D\n  const initializeNakedEye3D = () => {\n    // 为裸眼3D文本添加动画\n    const textElements = document.querySelectorAll('.naked-eye-3d-text');\n    textElements.forEach((element, index) => {\n      // 添加随机延迟，使动画错开\n      const delay = Math.random() * 2;\n      element.style.animationDelay = `${delay}s`;\n    });\n  };\n\n  // 添加鼠标跟随监听器\n  const addMouseFollowListeners = () => {\n    // 获取内容容器\n    const contentArea = document.querySelector('.mouse-follow-content');\n    if (!contentArea) {\n      console.error('未找到鼠标跟随内容区域');\n      return;\n    }\n    \n    // 上一个高亮的行\n    let lastHighlightedLine = null;\n    \n    // 监听鼠标移动 - 精确的行检测\n    const mouseMoveHandler = (e) => {\n      // 获取鼠标位置\n      const mouseY = e.clientY;\n      \n      // 获取所有行\n      const allLines = contentArea.querySelectorAll('.follow-line');\n      let foundLine = null;\n      let minDistance = Infinity;\n      \n      // 寻找鼠标所在的精确行\n      allLines.forEach(line => {\n        const rect = line.getBoundingClientRect();\n        const lineCenter = rect.top + rect.height / 2;\n        const distance = Math.abs(mouseY - lineCenter);\n        \n        // 如果鼠标在行范围内，计算到行中心的距离\n        if (mouseY >= rect.top && mouseY <= rect.bottom) {\n          if (distance < minDistance) {\n            minDistance = distance;\n            foundLine = line;\n        }\n      }\n    });\n    \n      // 更新高亮状态\n      if (lastHighlightedLine && lastHighlightedLine !== foundLine) {\n        // 移除旧高亮\n        lastHighlightedLine.classList.remove('highlighted');\n      }\n      \n      if (foundLine) {\n        // 添加新高亮\n        foundLine.classList.add('highlighted');\n        lastHighlightedLine = foundLine;\n        \n        // 调试输出\n        console.log('当前高亮行:', foundLine.textContent.substring(0, 30) + '...');\n      } else if (lastHighlightedLine) {\n        // 如果没有找到新行，且有上一个高亮行，移除它\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n    \n    // 鼠标离开处理\n    const mouseLeaveHandler = () => {\n      // 清除当前高亮\n      if (lastHighlightedLine) {\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n    \n    // 存储处理函数引用\n    window.eventTracker = window.eventTracker || { mouseFollowHandlers: [] };\n    window.eventTracker.mouseFollowHandlers.push(\n      { element: contentArea, event: 'mousemove', handler: mouseMoveHandler },\n      { element: contentArea, event: 'mouseleave', handler: mouseLeaveHandler }\n    );\n    \n    // 添加事件监听器\n    contentArea.addEventListener('mousemove', mouseMoveHandler);\n    contentArea.addEventListener('mouseleave', mouseLeaveHandler);\n    \n    console.log('改进的鼠标跟随监听器已初始化');\n  };\n  \n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n  }, []);\n  \n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async (file) => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      \n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n      \n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n      \n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n  \n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({ scale: 1.0 });\n      \n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      \n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      \n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async (textContent) => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n    \n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n    \n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n    \n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    \n    const lines = [...lineMap.values()];\n    \n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    \n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    \n    return hasTocKeywords || hasPageNumberPatterns || (shortLineRatio > 0.7 && numberLineRatio > 0.3);\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n    \n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    \n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n      \n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n      \n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n      \n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    \n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && \n              x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = (text) => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    \n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      \n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        \n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    \n    return result;\n  };\n\n  // 处理内容页面 - 按句子划分段落\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      \n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n      // 按句子划分内容（句号、问号、感叹号等作为分隔符）\n      const sentences = splitIntoSentences(extractedText);\n      \n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch(mode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          // 使用ADHD友好的静态高亮处理\n          console.log('应用ADHD友好的静态高亮模式');\n          processedContent = formatSimpleHighlightedText(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'rhythm':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          processedContent = createFlashReadingContentFromSentences(sentences);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n      \n      setContent(processedContent);\n      \n      // 如果是静态高亮模式，添加延时验证检查\n      if (mode === 'static') {\n        setTimeout(() => {\n          const contentArea = document.querySelector('.adhd-highlight-mode');\n          if (contentArea) {\n            console.log('静态高亮模式元素存在');\n            const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n            console.log(`找到 ${paragraphs.length} 个段落`);\n            \n            // 检查样式是否正确应用\n            if (paragraphs.length > 0) {\n              const firstPara = paragraphs[0];\n              const styles = window.getComputedStyle(firstPara);\n              console.log('段落应用的样式:', {\n                color: styles.color,\n                backgroundColor: styles.backgroundColor,\n                fontFamily: styles.fontFamily,\n                fontSize: styles.fontSize\n              });\n            }\n          }\n        }, 200);\n      }\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 将文本分割成句子\n  const splitIntoSentences = (text) => {\n    // 匹配句号、问号、感叹号后跟空格或结束的模式\n    // 支持中英文标点符号\n    const sentenceRegex = /([.!?。！？；;]+\\s*)/g;\n    \n    // 分割文本成句子\n    const sentences = [];\n    let lastIndex = 0;\n    let match;\n    \n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const sentence = text.substring(lastIndex, endIndex).trim();\n      \n      // 避免添加空句子\n      if (sentence) {\n        sentences.push(sentence);\n      }\n      \n      lastIndex = endIndex;\n    }\n    \n    // 处理最后一部分（如果没有以句号等结尾）\n    if (lastIndex < text.length) {\n      const lastSentence = text.substring(lastIndex).trim();\n      if (lastSentence) {\n        sentences.push(lastSentence);\n      }\n    }\n    \n    return sentences;\n  };\n\n  // 专门为闪读模式分割文本，以任意标点符号为分隔点\n  const splitIntoFlashReadingSegments = (text) => {\n    // 匹配任意标点符号包括中英文标点\n    const sentenceRegex = /([,.!?:;，。！？：；、]+\\s*)/g;\n    \n    // 分割文本成短句\n    const segments = [];\n    let lastIndex = 0;\n    let match;\n    \n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const segment = text.substring(lastIndex, endIndex).trim();\n      \n      // 避免添加空段落\n      if (segment) {\n        segments.push(segment);\n      }\n      \n      lastIndex = endIndex;\n    }\n    \n    // 处理最后一部分（如果没有以标点符号结尾）\n    if (lastIndex < text.length) {\n      const lastSegment = text.substring(lastIndex).trim();\n      if (lastSegment) {\n        segments.push(lastSegment);\n      }\n    }\n    \n    return segments;\n  };\n\n  // 格式化句子为HTML\n  const formatSentencesToHtml = (sentences) => {\n    let html = '<div class=\"pdf-content\">';\n    \n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${sentence}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为句子应用静态高亮\n  const applyStaticHighlightToSentences = (sentences) => {\n    let html = '<div class=\"pdf-content adhd-content\">';\n    \n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      \n      // 简单地为句子添加特定样式的class\n      html += `<p class=\"pdf-paragraph adhd-sentence\">${sentence}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为鼠标跟随模式格式化句子\n  const formatSentencesForMouseFollow = (sentences) => {\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    sentences.forEach((sentence, index) => {\n      if (sentence.trim() === '') return;\n      \n      // 每个句子作为独立行，使用div而不是p标签\n      html += `<div class=\"follow-line\" data-line=\"${index}\" data-sentence=\"${sentence.substring(0, 20)}...\" style=\"color: inherit;\">${sentence}</div>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为舒适3D模式格式化句子\n  const applyComfortable3dEffectToSentences = (sentences) => {\n    let html = '<div class=\"pdf-content\">';\n    \n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      \n      // 为每个词随机应用不同的3D效果\n      const words = sentence.split(/(\\s+)/);\n      let processedSentence = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedSentence += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          \n          processedSentence += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedSentence}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为闪读模式创建内容\n  const createFlashReadingContentFromSentences = (sentences) => {\n    // 储存句子到全局变量，用于后续显示\n    window.flashReadingSentences = sentences;\n\n    // 返回闪读界面的HTML结构\n    return `\n      <div class=\"flash-reading-container\">\n        <div class=\"flash-reading-controls\">\n          <div class=\"flash-reading-buttons\">\n            <button id=\"flash-reading-prev-sentence\" class=\"flash-reading-btn\">上一句</button>\n            <button id=\"flash-reading-play\" class=\"flash-reading-btn\">开始</button>\n            <button id=\"flash-reading-pause\" class=\"flash-reading-btn\" disabled>暂停</button>\n            <button id=\"flash-reading-stop\" class=\"flash-reading-btn\">停止</button>\n            <button id=\"flash-reading-next-sentence\" class=\"flash-reading-btn\">下一句</button>\n          </div>\n          <div class=\"flash-reading-speed\">\n            <span>速度：</span>\n            <input type=\"range\" id=\"flash-reading-speed\" min=\"300\" max=\"1700\" step=\"50\" value=\"1000\" class=\"flash-reading-slider\">\n            <span id=\"flash-reading-speed-value\">1000 ms</span>\n            <span class=\"flash-reading-speed-note\">（数值越小，切换越快）</span>\n          </div>\n          <div class=\"flash-reading-progress\">\n            <span id=\"flash-reading-progress\">进度：0 / ${sentences.length}</span>\n          </div>\n        </div>\n        <div class=\"flash-reading-display-wrapper\">\n          <div class=\"flash-reading-cover\"></div> <!-- 这里是闪卡 -->\n          <div id=\"flash-reading-display\" class=\"flash-reading-display\">准备开始</div>\n        </div>\n      </div>`;\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async (file) => {\n    try {\n      const text = await file.text();\n      \n      // 根据阅读模式选择不同的处理方式\n      let processedContent = '';\n      \n      if (readingMode === 'flash-reading') {\n        // 闪读模式下使用特定的分割函数\n        const segments = splitIntoFlashReadingSegments(text);\n        processedContent = createFlashReadingContentFromSentences(segments);\n        \n        // 初始化闪读模式\n        setTimeout(() => {\n          initializeFlashReading();\n        }, 100);\n      } else {\n        // 其他模式使用默认的分割方式\n        const sentences = splitIntoSentences(text);\n        \n        switch(readingMode) {\n          case 'normal':\n            processedContent = formatSentencesToHtml(sentences);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlightToSentences(sentences);\n            break;\n          case 'follow-mouse':\n            processedContent = formatSentencesForMouseFollow(sentences);\n            break;\n          case 'comfortable-3d':\n            processedContent = applyComfortable3dEffectToSentences(sentences);\n            break;\n          default:\n            processedContent = formatSentencesToHtml(sentences);\n        }\n      }\n      \n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n      \n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setContent('<div class=\"error-message\">TXT文件处理失败</div>');\n    }\n  };\n\n  // 处理Markdown文件\n  const handleMarkdownFile = async (file) => {\n    try {\n      const text = await file.text();\n      \n      // 使用marked库转换markdown为HTML\n      let html = '';\n      try {\n        if (window.marked) {\n          html = window.marked.parse(text);\n        } else {\n          // 如果没有marked库，简单地拆分为段落\n          html = `<div>${text.split(\"\\n\\n\").map(p => `<p>${p}</p>`).join(\"\")}</div>`;\n        }\n      } catch (parseError) {\n        console.error('Markdown解析错误:', parseError);\n        html = `<div>${text}</div>`;\n      }\n      \n      // 提取纯文本内容\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = html;\n      const plainText = tempDiv.textContent || tempDiv.innerText || '';\n      \n      // 分割文本为句子\n      const sentences = splitIntoSentences(plainText);\n      \n      // 根据当前阅读模式处理内容\n      let processedContent = '';\n      switch(readingMode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlightToSentences(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          // 使用特定的闪读分割函数重新处理文本\n          const segments = splitIntoFlashReadingSegments(plainText);\n          processedContent = createFlashReadingContentFromSentences(segments);\n          \n          // 初始化闪读模式\n          setTimeout(() => {\n            initializeFlashReading();\n          }, 100);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n      \n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n      \n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('Markdown处理错误:', error);\n      setContent('<div class=\"error-message\">Markdown文件处理失败</div>');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async (e) => {\n    const uploadedFile = e.target.files[0];\n    if (!uploadedFile) return;\n    \n    setLoading(true);\n    setFileName(uploadedFile.name);\n    \n    try {\n      if (uploadedFile.type === 'application/pdf') {\n        await handlePdfFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/plain' || uploadedFile.name.endsWith('.txt')) {\n        await handleTxtFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/markdown' || uploadedFile.name.endsWith('.md')) {\n        await handleMarkdownFile(uploadedFile);\n    } else {\n        setContent('<div class=\"error-message\">不支持的文件格式</div>');\n      }\n    } catch (error) {\n      console.error('处理文件时出错:', error);\n      setContent('<div class=\"error-message\">处理文件时出错</div>');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = (container) => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    \n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n      \n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n      \n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          \n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n          \n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width/2,  // 水平中心\n            y: rect.bottom,               // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n    \n    // 过滤无效位置并排序\n    return positions\n      .filter(p => p.char.trim() !== '')\n      .sort((a, b) => {\n        // 先按行排序，同行按列排序\n        const yDiff = a.y - b.y;\n        if (Math.abs(yDiff) > 5) { // 5px阈值判断是否同一行\n          return yDiff;\n        }\n        return a.x - b.x;\n      });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    \n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - (containerVisibleHeight / 2);\n      \n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - (window.innerHeight / 2);\n      \n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    \n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n    \n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    \n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n    \n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length || // 已到末尾\n          positions[nextIndex].char.trim() === '' || // 下一个是空白\n          positions[nextIndex].y > charPosition.y + 5) { // 下一个在新行\n        return true;\n      }\n    }\n    \n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n    \n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n      \n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || \n          current.y > prev.y + 5) { // 有明显换行\n        break;\n      }\n      \n      start--;\n    }\n    \n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n      \n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      \n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n      \n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      \n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (window.autoReader.charPositions.length === 0) {\n      if (window.currentPage < window.totalPages) {\n        window.changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 重置索引到开头\n    window.autoReader.currentIndex = 0;\n    \n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    \n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n    \n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n    \n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none';\n      highlight.style.zIndex = '998';\n      contentContainer.appendChild(highlight);\n    }\n    \n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight &&\n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n    \n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20;\n    \n    // 尝试获取实际行高\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(window.autoReader.charPositions[i].y - window.autoReader.charPositions[i-1].y);\n        if (yDiff > 5) {\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n    \n    // 记录上次滚动的位置\n    let lastScrolledY = -1;\n    const scrollSafeZone = lineHeight * 2.5;\n    \n    // 设置字符大小的估计值\n    let charWidth = 20;\n    let charHeight = lineHeight * 0.8;\n    \n    // 尝试估计字符宽度\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        if (window.autoReader.charPositions[i].x !== window.autoReader.charPositions[i-1].x) {\n          const xDiff = Math.abs(window.autoReader.charPositions[i].x - window.autoReader.charPositions[i-1].x);\n          if (xDiff > 0 && xDiff < 50) {\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    \n    window.autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (window.autoReader.currentIndex < window.autoReader.charPositions.length && \n             window.autoReader.charPositions[window.autoReader.currentIndex]?.char.trim() === '') {\n        window.autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (window.autoReader.currentIndex >= window.autoReader.charPositions.length) {\n        if (window.currentPage < window.totalPages) {\n          window.changePage(1);\n          clearInterval(window.autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n\n      const pos = window.autoReader.charPositions[window.autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      \n      if (cursor && highlight) {\n        const contentRect = contentContainer.getBoundingClientRect();\n        \n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        \n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        \n        highlight.style.left = `${relativeX - charWidth/2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n        \n        // 滚动处理\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        \n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          \n          if (isContainerScrollable) {\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n            \n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            \n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = relativeY;\n            }\n          } else {\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n            \n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            \n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      \n      window.autoReader.currentIndex++;\n      \n    }, window.autoReader.speed);\n    \n    // 在停止自动阅读时清除所有高亮\n    window.autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n      \n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n      \n      // 调用清理函数\n      if (window.autoReader.cleanup) {\n        window.autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n    \n    // 重置翻页状态\n    window.autoReader.isPageChanging = false;\n    \n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n    \n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n    \n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n    \n    // 收集字符位置\n    window.autoReader.charPositions = getAllCharacterPositions(content);\n    \n    // 如果当前页没有内容，尝试翻页\n    if (window.autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !window.autoReader.isPageChanging) {\n        window.autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async (e) => {\n    const newMode = e.target.value;\n    const prevMode = readingMode;\n    \n    console.log(`切换阅读模式: 从 ${prevMode} 到 ${newMode}`);\n    \n    // 更新状态\n    setReadingMode(newMode);\n    \n    // 如果有PDF文档和当前页，重新处理当前页内容\n    if (pdfDocument && currentPage > 0) {\n      try {\n        console.log('重新处理当前页面内容');\n        const page = await pdfDocument.getPage(currentPage);\n        \n        // 不使用任何额外处理，直接使用最原始的方式重新加载页面\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n        \n        // 根据当前模式设置内容\n        if (newMode === 'static') {\n          // 静态高亮模式 - 使用改进的句子处理\n          const html = formatSimpleHighlightedText(sentences);\n          console.log('设置静态高亮内容');\n          setContent(html);\n          \n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n        if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n              \n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n                \n                // 验证文字颜色\n                if (styles.color === 'rgb(51, 51, 51)' || styles.color === '#333333') {\n                  console.log('文字颜色正确应用');\n                } else {\n                  console.warn('文字颜色可能未正确应用:', styles.color);\n                }\n              }\n            } else {\n              console.error('未找到静态高亮模式内容区域');\n            }\n          }, 200);\n        } else if (newMode === 'flash-reading') {\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n            \n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n            \n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n            \n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n        } else {\n          // 其他模式保持不变\n          const handler = getContentHandlerForMode(newMode);\n          const processedContent = handler(sentences);\n          setContent(processedContent);\n        }\n      } catch (error) {\n        console.error('应用阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 首先确保移除鼠标跟随监听器\n    removeMouseFollowListeners();\n    \n    // 清理节奏阅读器\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    \n    // 清理闪读器\n    if (window.flashReader) {\n      window.flashReader.cleanup();\n    }\n    \n    // 清理舒适3D效果\n    const comfortable3DElements = document.querySelectorAll('.emboss-3d-text, .float-3d-text, .gradient-3d-text');\n    comfortable3DElements.forEach(el => el.remove());\n    \n    // 清理闪读模式元素\n    const flashReadingElements = document.querySelectorAll('.flash-reading-container, .flash-reading-display, .flash-reading-controls');\n    flashReadingElements.forEach(el => el.remove());\n    \n    // 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll(\n      '.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line, .rhythm-char'\n    );\n    highlights.forEach(el => {\n      if (el.parentNode) el.parentNode.removeChild(el);\n    });\n    \n    // 彻底替换内容区域以移除所有事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 先保存底部翻页控件\n      const bottomPagination = contentArea.querySelector('.bottom-pagination');\n      \n      // 深度克隆内容，但不克隆事件监听器\n      const contentHTML = contentArea.querySelector('div[dangerouslySetInnerHTML]')?.innerHTML || '';\n      const newContentArea = contentArea.cloneNode(false);\n      \n      // 创建新的内容容器\n      const newContentContainer = document.createElement('div');\n      newContentContainer.innerHTML = contentHTML;\n      newContentArea.appendChild(newContentContainer);\n      \n      // 如果有底部翻页控件，重新添加\n      if (bottomPagination && totalPages > 0) {\n        const newBottomPagination = bottomPagination.cloneNode(true);\n        // 重新绑定事件\n        const prevBtn = newBottomPagination.querySelector('.page-btn:first-child');\n        const nextBtn = newBottomPagination.querySelector('.page-btn:last-child');\n        if (prevBtn) prevBtn.onclick = () => changePage(-1);\n        if (nextBtn) nextBtn.onclick = () => changePage(1);\n        newContentArea.appendChild(newBottomPagination);\n      }\n      \n      if (contentArea.parentNode) {\n        contentArea.parentNode.replaceChild(newContentArea, contentArea);\n      }\n    }\n    \n    // 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 移除所有特殊标记和样式\n      paragraph.removeAttribute('data-follow');\n      paragraph.removeAttribute('style');\n      \n      // 清理特殊span标签\n      paragraph.innerHTML = paragraph.innerHTML\n        .replace(/<span class=\"text-line\"[^>]*>/g, '')\n        .replace(/<span class=\"rhythm-char\"[^>]*>/g, '')\n        .replace(/<span class=\"line-highlight[^\"]*\"[^>]*>/g, '')\n        .replace(/<span class=\"mouse-highlight[^\"]*\"[^>]*>/g, '')\n        .replace(/<\\/span>/g, '');\n    });\n    \n    // 移除特殊UI元素\n    const elementsToRemove = [\n      'rhythm-speed-slider',\n      'rhythm-notification'\n    ];\n    \n    elementsToRemove.forEach(id => {\n      const element = document.getElementById(id);\n      if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    });\n    \n    // 移除暗色背景\n    document.body.classList.remove('dark-background');\n    \n    // 清理闪读模式\n    if (window.flashReader && typeof window.flashReader.cleanup === 'function') {\n      window.flashReader.cleanup();\n    }\n  };\n\n  const handleAutoScroll = () => {\n    window.autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = (e) => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    \n    const rect = contentArea.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    \n    clearAllHighlights();\n    \n    const paragraphs = contentArea.querySelectorAll('p');\n    paragraphs.forEach(paragraph => {\n      const paragraphRect = paragraph.getBoundingClientRect();\n      const paragraphX = paragraphRect.left - rect.left;\n      const paragraphY = paragraphRect.top - rect.top;\n      \n      if (y >= paragraphY && y <= paragraphY + paragraphRect.height) {\n        const words = paragraph.querySelectorAll('span');\n        words.forEach(word => {\n          const wordRect = word.getBoundingClientRect();\n          const wordX = wordRect.left - rect.left;\n          \n          if (x >= wordX && x <= wordX + wordRect.width) {\n            word.classList.add('highlight');\n          }\n        });\n      }\n    });\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 专门用于移除鼠标跟随事件的函数\n  const removeMouseFollowListeners = () => {\n    // 移除记录的所有监听器\n    if (window.eventTracker && window.eventTracker.mouseFollowHandlers) {\n      window.eventTracker.mouseFollowHandlers.forEach(({element, event, handler}) => {\n        if (element && element.removeEventListener) {\n          element.removeEventListener(event, handler);\n        }\n      });\n      window.eventTracker.mouseFollowHandlers = [];\n    }\n    \n    // 为安全起见，尝试从document和内容区域移除通用处理函数\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    }\n    \n    document.removeEventListener('mousemove', handleMouseMove);\n    \n    // 清除所有当前高亮\n    clearAllHighlights();\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n    \n    // 添加底部翻页控件样式\n    const bottomPaginationStyles = document.createElement('style');\n    bottomPaginationStyles.id = 'bottom-pagination-styles';\n    bottomPaginationStyles.innerHTML = `\n      .bottom-pagination {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        padding: 20px 0 30px;\n        margin-top: 30px;\n        width: 100%;\n        background-color: transparent;\n        border-radius: 5px;\n      }\n\n      .bottom-pagination .page-btn {\n        background-color: #6c5ce7;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        padding: 8px 15px;\n        margin: 0 10px;\n        cursor: pointer;\n        font-size: 14px;\n        transition: background-color 0.2s ease;\n      }\n\n      .bottom-pagination .page-btn:hover {\n        background-color: #4834d4;\n      }\n\n      .bottom-pagination .page-btn:disabled {\n        background-color: #aaa;\n        cursor: not-allowed;\n      }\n\n      .bottom-pagination .page-info {\n        font-size: 14px;\n        margin: 0 10px;\n      }\n    `;\n    document.head.appendChild(bottomPaginationStyles);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n    addComfortable3DStyles();\n    \n    // 添加鼠标跟随模式的样式\n    const mouseFollowStyle = document.createElement('style');\n    mouseFollowStyle.id = 'intelligent-mouse-follow-style';\n    mouseFollowStyle.textContent = `\n      /* 基础样式 */\n      .mouse-follow-content {\n        position: relative;\n        line-height: 1.8;\n      }\n      \n      .mouse-follow-content .follow-line {\n        position: relative;\n        padding: 8px 16px;\n        margin: 4px 0;\n        border-radius: 6px;\n        transition: all 0.2s ease;\n        display: block;\n        min-height: 1.8em;\n        white-space: normal;\n        word-wrap: break-word;\n        text-indent: 2em;\n      }\n      \n      /* 高亮状态 */\n      .follow-line.highlighted {\n        background-color: #ffa500 !important; /* 橙色背景 */\n        color: #ffffff !important; /* 白色文字 */\n        font-weight: bold !important;\n        font-size: 1.1em; /* 稍微调小字号 */\n        transform: translateX(5px);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n      }\n      \n      \n      /* 平滑过渡效果 */\n      .follow-line {\n        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n      }\n      \n      /* 行间距优化 */\n      .mouse-follow-content .follow-line + .follow-line {\n        margin-top: 4px;\n      }\n      \n      /* 添加行指示器 */\n      .follow-line::before {\n        content: '';\n        position: absolute;\n        left: 0;\n        top: 0;\n        bottom: 0;\n        width: 3px;\n        background: linear-gradient(to bottom, transparent, rgba(255, 255, 255, 0.5), transparent);\n        opacity: 0;\n        transition: opacity 0.2s ease;\n      }\n      \n      .follow-line.highlighted::before {\n        opacity: 1;\n      }\n    `;\n    document.head.appendChild(mouseFollowStyle);\n    \n    // 创建深色背景下的ADHD友好高亮样式\n    const style = document.createElement('style');\n    style.id = 'adhd-friendly-highlight-style';\n    style.textContent = `\n      /* ADHD友好的高亮样式 - 适配深色背景 */\n      .adhd-highlight-mode {\n        line-height: 1.8;\n        padding: 20px;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph {\n        margin-bottom: 1.2em;\n        background-color: transparent;\n        padding: 12px 15px;\n        border-radius: 6px;\n        border-left: 3px solid rgba(255, 255, 255, 0.2);\n        transition: all 0.3s ease;\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover {\n        transform: translateX(5px);\n        border-left-color: rgba(255, 255, 255, 0.4);\n      }\n      \n      /* 加粗样式 - 白色加粗 */\n      .adhd-bold {\n        font-weight: 700;\n        color: #ffffff;\n        letter-spacing: 0.02em;\n        font-size: 1.1em;\n        text-shadow: 0 0 1px rgba(255, 255, 255, 0.2);\n      }\n      \n      /* 彩色样式 - 使用鲜明的蓝色 */\n      .adhd-colored {\n        color: #6c5ce7;\n        font-weight: 500;\n        font-size: 1.05em;\n        text-shadow: 0 0 1px rgba(108, 92, 231, 0.2);\n      }\n      \n      /* 正常样式 - 普通白色 */\n      .adhd-normal {\n        color: rgba(255, 255, 255, 0.8);\n        font-size: 1em;\n      }\n\n      /* 添加平滑过渡效果 */\n      .adhd-bold, .adhd-colored, .adhd-normal {\n        transition: all 0.2s ease;\n      }\n\n      /* 悬停效果 */\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-bold {\n        color: #ffffff;\n        text-shadow: 0 0 2px rgba(255, 255, 255, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-colored {\n        color: #8a7ff7;\n        text-shadow: 0 0 2px rgba(138, 127, 247, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-normal {\n        color: rgba(255, 255, 255, 0.9);\n      }\n\n      /* 添加段落间距的视觉引导 */\n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph {\n        margin-top: 1.5em;\n        position: relative;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph::before {\n        content: '';\n        position: absolute;\n        top: -0.75em;\n        left: 0;\n        right: 0;\n        height: 1px;\n        background: linear-gradient(\n          to right,\n          transparent,\n          rgba(255, 255, 255, 0.1),\n          transparent\n        );\n      }\n    `;\n    document.head.appendChild(style);\n    \n    // 添加基础鼠标跟随样式\n    const mouseFollowPageStyle = document.createElement('style');\n    mouseFollowPageStyle.id = 'basic-mouse-follow-style';\n    mouseFollowPageStyle.textContent = `\n      .follow-line {\n        padding: 8px 12px;\n        margin: 4px 0;\n        border-radius: 4px;\n        transition: background-color 0.2s ease;\n      }\n      .follow-line.highlighted {\n        background-color: #ffa500;\n        color: #000080;\n        font-weight: bold;\n      }\n    `;\n    document.head.appendChild(mouseFollowPageStyle);\n    \n    return () => {\n      const existingStyle = document.getElementById('adhd-friendly-highlight-style');\n      if (existingStyle) existingStyle.remove();\n      \n      const existingMouseFollowStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (existingMouseFollowStyle) existingMouseFollowStyle.remove();\n      \n      const existingBasicMouseFollowStyle = document.getElementById('basic-mouse-follow-style');\n      if (existingBasicMouseFollowStyle) existingBasicMouseFollowStyle.remove();\n      \n      mouseFollowPageStyle.remove();\n    };\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 清理旧监听器\n    removeMouseFollowListeners();\n    \n    // 添加新监听器\n    setTimeout(() => {\n      addMouseFollowListeners();\n      \n      // 添加调试辅助 - 显示行边界\n      const contentArea = document.querySelector('.mouse-follow-content');\n      if (contentArea) {\n        const lines = contentArea.querySelectorAll('.follow-line');\n        console.log(`初始化鼠标跟随模式，共 ${lines.length} 行`);\n        \n        // 可选：启用可视化调试\n        if (false) { // 设置为true可以启用可视化调试\n          lines.forEach((line, index) => {\n            line.style.border = '1px dashed #888';\n            line.setAttribute('title', `行 ${index+1}`);\n          });\n        }\n        \n        // 验证行高亮效果\n        const firstLine = lines[0];\n        if (firstLine) {\n          console.log('行样式验证:', {\n            padding: window.getComputedStyle(firstLine).padding,\n            margin: window.getComputedStyle(firstLine).margin,\n            fontSize: window.getComputedStyle(firstLine).fontSize,\n            lineHeight: window.getComputedStyle(firstLine).lineHeight\n          });\n        }\n      }\n    }, 100);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = (delta) => {\n    window.autoReader.speed = Math.max(100, window.autoReader.speed + delta);\n    \n    if (window.autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async (delta) => {\n    console.log(`翻页请求: 当前页 ${currentPage}, 增量 ${delta}`);\n    const newPage = currentPage + delta;\n    \n    if (newPage < 1 || newPage > totalPages) {\n      console.log('无效页码，不执行翻页');\n          return;\n        }\n        \n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n    const wasFlashReading = readingMode === 'flash-reading' && window.flashReader && window.flashReader.isPlaying;\n    \n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    \n    if (wasFlashReading && window.flashReader) {\n      window.flashReader.cleanup();\n    }\n    \n    // 更新页码\n    setCurrentPage(newPage);\n    \n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n      \n      // 检查是否为目录页\n      const textContent = await page.getTextContent();\n      const isToc = await detectIfTocPage(textContent);\n      setIsTableOfContents(isToc);\n      \n      if (isToc) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, page.getViewport({ scale: 1.0 }));\n      } else {\n        // 处理正文页面 - 根据当前阅读模式处理\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n        \n        // 根据当前模式设置内容\n        if (readingMode === 'static') {\n          console.log('翻页后应用静态高亮模式');\n          const processedContent = formatSimpleHighlightedText(sentences);\n          setContent(processedContent);\n          \n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n            if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n              \n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n              }\n            }\n          }, 200);\n        } else if (readingMode === 'flash-reading') {\n          // 如果是闪读模式，则需要特殊处理\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n            \n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n            \n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n            \n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n          return; // 已处理，直接返回\n        } else {\n          // 其他模式使用原处理函数\n          await processContentPage(page, readingMode);\n        }\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n    } catch (error) {\n      console.error('页面切换错误:', error);\n    }\n  };\n\n  // ADHD友好的静态高亮处理函数\n  const formatSimpleHighlightedText = (sentences) => {\n    console.log('开始处理ADHD友好的静态高亮文本，句子数量:', sentences.length);\n    \n    let html = '<div class=\"pdf-content adhd-highlight-mode\">';\n    \n    sentences.forEach((sentence, sentenceIndex) => {\n      if (!sentence || sentence.trim() === '') {\n        console.log(`跳过空句子，索引: ${sentenceIndex}`);\n      return;\n    }\n    \n      // 清理和规范化文本\n      const cleanText = sentence\n        .trim()\n        .replace(/\\s+/g, ' ')  // 规范化空白字符\n        .replace(/&/g, '&amp;')  // 转义特殊字符\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n      \n      // 处理句子中的单词，为它们添加不同样式\n      const words = cleanText.split(/(\\s+)/);\n      let formattedSentence = '';\n      \n      words.forEach((word, wordIndex) => {\n        if (word.trim() === '') {\n          // 保留空格\n          formattedSentence += word;\n      } else {\n          // 根据位置应用不同的样式类\n          // 三种交替样式: 加粗、彩色、正常\n          const styleClass = wordIndex % 3 === 0 ? 'adhd-bold' : \n                           wordIndex % 3 === 1 ? 'adhd-colored' : 'adhd-normal';\n          \n          formattedSentence += `<span class=\"${styleClass}\">${word}</span>`;\n        }\n      });\n      \n      console.log(`处理句子 ${sentenceIndex + 1}:`, cleanText.substring(0, 50) + '...');\n      html += `<p class=\"pdf-paragraph\">${formattedSentence}</p>`;\n    });\n    \n    html += '</div>';\n    \n    // 调试输出\n    console.log('生成的ADHD友好静态高亮HTML:', html.substring(0, 200) + '...');\n    \n    return html;\n  };\n\n  // 根据阅读模式获取相应的内容处理函数\n  const getContentHandlerForMode = (mode) => {\n    switch(mode) {\n      case 'normal': return formatSentencesToHtml;\n      case 'static': return applyStaticHighlightToSentences;\n      case 'follow-mouse': return formatSentencesForMouseFollow;\n      case 'comfortable-3d': return applyComfortable3dEffectToSentences;\n      case 'flash-reading': \n        return (sentences) => {\n          // 闪读模式使用专门的分割函数重新处理文本\n          return createFlashReadingContentFromSentences(sentences);\n        };\n      default: return formatSentencesToHtml;\n    }\n  };\n\n  // 监听阅读模式和当前页面的变化\n  useEffect(() => {\n    if (readingMode === 'mouse-follow' && currentPage && !isTableOfContents) {\n      // 移除之前的样式\n      const oldStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (oldStyle) {\n        oldStyle.remove();\n      }\n      \n      // 添加基础鼠标跟随样式\n      const followModeStyle = document.createElement('style');\n      followModeStyle.id = 'basic-mouse-follow-style';\n      followModeStyle.textContent = `\n        .follow-line {\n          padding: 8px 12px;\n          margin: 4px 0;\n          border-radius: 4px;\n          transition: background-color 0.2s ease;\n        }\n        .follow-line.highlighted {\n          background-color: #ffa500;\n          color: #000080;\n        font-weight: bold;\n        }\n      `;\n      document.head.appendChild(followModeStyle);\n      \n      // 处理当前页面内容\n      const page = pdfDocument.getPage(currentPage);\n      const textContent = page.getTextContent();\n      const sentences = textContent.items\n        .map(item => item.str)\n        .join(' ')\n        .split(/[。！？]/)\n        .filter(s => s.trim());\n      \n      // 应用基础鼠标跟随格式化\n      setContent(formatSentencesForMouseFollow(sentences));\n      \n      // 添加鼠标跟随监听器\n      setTimeout(() => {\n        addMouseFollowListeners();\n      }, 100);\n      \n      return () => {\n        followModeStyle.remove();\n      };\n    }\n  }, [readingMode, currentPage, pdfDocument]);\n\n  // 添加全局节奏阅读速度控制器\n  (function() {\n    console.log(\"初始化全局节奏阅读速度控制器\");\n\n    // 配置参数和状态变量\n    let readingSpeed = 150; // 默认速度改为150ms，更快\n    \n    // 创建独立的速度滑块UI\n    function createRhythmSpeedSlider() {\n      console.log(\"创建节奏阅读速度控制器...\");\n      \n      // 先检查是否已存在\n      let existingSlider = document.getElementById('rhythm-speed-slider-container');\n      if (existingSlider) existingSlider.remove();\n      \n      // 创建容器\n      const container = document.createElement('div');\n      container.id = 'rhythm-speed-slider-container';\n      container.style.cssText = `\n        position: fixed;\n        top: 50px;\n        right: 10px;\n        background: transparent;\n        padding: 5px;\n        z-index: 9999999;\n        display: flex;\n        flex-direction: column;\n        width: 60px;\n      `;\n      \n      // 添加标签\n      const label = document.createElement('div');\n      label.textContent = readingSpeed + \"ms\";\n      label.id = 'rhythm-speed-label';\n      label.style.cssText = `\n        color: #333;\n        font-size: 12px;\n        font-weight: bold;\n        margin-bottom: 5px;\n        text-align: center;\n      `;\n      container.appendChild(label);\n      \n      // 添加滑块\n      const slider = document.createElement('input');\n      slider.type = 'range';\n      slider.min = '30';  // 最小值调整为30ms\n      slider.max = '400'; // 最大值调整为400ms\n      slider.step = '10'; // 步长改为10ms，更精细\n      slider.value = readingSpeed;\n      slider.style.cssText = `\n        width: 150px;\n        height: 20px;\n        transform: rotate(90deg);\n        transform-origin: left center;\n        margin: 70px 0 0 -45px;\n      `;\n      \n      // 滑块事件\n      slider.oninput = function() {\n        readingSpeed = parseInt(this.value);\n        label.textContent = readingSpeed + \"ms\";\n        \n        console.log(\"节奏阅读速度已调整为:\", readingSpeed);\n        \n        // 尝试使用全局节奏阅读控制接口\n        if (window.rhythmReading && typeof window.rhythmReading.updateSpeed === 'function') {\n          window.rhythmReading.updateSpeed(readingSpeed);\n          return;\n        }\n        \n        // 如果全局接口不可用，使用备用方法\n        // 更新全局变量中的速度值\n        window.rhythmReadingSpeed = readingSpeed;\n        \n        // 查找当前活动的节奏阅读实例并更新速度\n        const updateActiveRhythmReader = function() {\n          // 不直接引用intervalId和nextChar变量\n          /* 原代码会导致错误\n          if (typeof intervalId !== 'undefined' && intervalId) {\n            clearInterval(intervalId);\n            intervalId = setInterval(nextChar, readingSpeed);\n            console.log(\"已更新节奏阅读模式速度\");\n          }\n          */\n          \n          // 如果是自动翻页版本的节奏阅读\n          if (window.rhythmReader && typeof window.rhythmReader.updateSpeed === 'function') {\n            window.rhythmReader.updateSpeed(readingSpeed);\n            console.log(\"已更新rhythmReader速度\");\n          }\n          \n          // 查找全局作用域中的其他intervalId实例\n          for (let key in window) {\n            if (key.includes('rhythm') && key.includes('Interval') && window[key]) {\n              try {\n                clearInterval(window[key]);\n                // 不直接引用nextChar变量\n                if (typeof window['nextChar'] === 'function') {\n                  window[key] = setInterval(window['nextChar'], readingSpeed);\n                } else if (typeof window['advanceChar'] === 'function') {\n                  window[key] = setInterval(window['advanceChar'], readingSpeed);\n                } else if (typeof window['moveToNextChar'] === 'function') {\n                  window[key] = setInterval(window['moveToNextChar'], readingSpeed);\n                } else {\n                  console.log(`找到interval ${key} 但未找到对应的nextChar函数`);\n                  continue;\n                }\n                console.log(\"已更新\", key, \"的速度\");\n              } catch(e) {\n                console.error(\"更新\", key, \"速度失败\", e);\n              }\n            }\n          }\n        };\n        \n        updateActiveRhythmReader();\n      };\n      \n      container.appendChild(slider);\n      document.body.appendChild(container);\n      console.log(\"节奏阅读速度控制器已添加到DOM！\");\n      return container;\n    }\n    \n    // 页面加载完成后添加滑块\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', function() {\n        setTimeout(createRhythmSpeedSlider, 1000);\n      });\n    } else {\n      setTimeout(createRhythmSpeedSlider, 1000);\n    }\n    \n    // 暴露给全局，供其他脚本使用\n    window.createRhythmSpeedSlider = createRhythmSpeedSlider;\n    window.rhythmReadingSpeed = readingSpeed;\n  })();\n\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        <div className=\"logo\">\n          <h2>ADHD阅读助手</h2>\n        </div>\n        \n        <div className=\"reading-controls\">\n          <h3>阅读模式</h3>\n          <select \n            id=\"reading-mode-select\" \n            value={readingMode} \n            onChange={handleReadingModeChange}\n            className=\"mode-select\"\n          >\n            <option value=\"normal\">普通模式</option>\n            <option value=\"static\">静态高亮</option>\n            <option value=\"follow-mouse\">鼠标跟随</option>\n            <option value=\"rhythm\">节奏阅读</option>\n            <option value=\"flash-reading\">闪读模式</option>\n          </select>\n        </div>\n        \n        <div className=\"upload-section\">\n            <input \n            type=\"file\"\n            accept=\".pdf,.txt,.md\" \n            hidden\n            id=\"file-upload\"\n            onChange={handleFileUpload}\n            ref={fileRef}\n          />\n          <button \n            className=\"upload-btn\"\n            onClick={() => fileRef.current.click()}\n          >\n            上传文件 (.pdf/.txt/.md)\n          </button>\n      </div>\n          </div>\n          \n      <div className=\"main-content\">\n        <div className=\"toolbar\">\n          {fileName && <h3 className=\"filename\">{fileName}</h3>}\n          {/* 移除了原有翻页控件 */}\n          </div>\n          \n        <div className=\"page-content\" ref={readerContainerRef}>\n            <div dangerouslySetInnerHTML={{ __html: content }} />\n          \n          {totalPages > 0 && (\n            <div className=\"bottom-pagination\">\n              <button \n                onClick={() => changePage(-1)} \n                disabled={currentPage <= 1}\n                className=\"page-btn\"\n              >\n                上一页\n              </button>\n            <span className=\"page-info\">\n                第 {currentPage} / {totalPages} 页\n              </span>\n              <button \n                onClick={() => changePage(1)} \n                disabled={currentPage >= totalPages}\n                className=\"page-btn\"\n              >\n                下一页\n              </button>\n          </div>\n        )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App; \n\n// 添加全局访问点，用于节奏阅读速度控制\n(function setupRhythmReadingGlobals() {\n  // 检查文档是否已加载\n  const whenDocumentReady = (fn) => {\n    if (document.readyState !== 'loading') {\n      fn();\n      } else {\n      document.addEventListener('DOMContentLoaded', fn);\n    }\n  };\n  \n  whenDocumentReady(() => {\n    // 创建全局命名空间\n    window.rhythmReading = window.rhythmReading || {};\n    \n    // 尝试查找节奏阅读的nextChar函数和intervalId\n    let foundNextChar = false;\n    \n    // 设置全局监听，捕获所有setInterval调用\n    const originalSetInterval = window.setInterval;\n    window.setInterval = function(fn, delay) {\n      const intervalId = originalSetInterval.apply(this, arguments);\n      \n      // 检测是否为节奏阅读相关的interval\n      if (fn.toString().includes('nextChar') || \n          fn.toString().includes('readIndices') || \n          fn.toString().includes('currentIndex++')) {\n        console.log(\"捕获到节奏阅读interval:\", intervalId);\n        window.rhythmReading.activeIntervalId = intervalId;\n        window.rhythmReading.nextCharFn = fn;\n        window.rhythmReading.currentDelay = delay;\n        foundNextChar = true;\n      }\n      \n      return intervalId;\n    };\n    \n    // 暴露更新速度的函数\n    window.rhythmReading.updateSpeed = function(newSpeed) {\n      if (window.rhythmReading.activeIntervalId) {\n        clearInterval(window.rhythmReading.activeIntervalId);\n        if (window.rhythmReading.nextCharFn) {\n          window.rhythmReading.activeIntervalId = \n            setInterval(window.rhythmReading.nextCharFn, newSpeed);\n          window.rhythmReading.currentDelay = newSpeed;\n          console.log(\"节奏阅读速度已更新为:\", newSpeed);\n          return true;\n        }\n      }\n      \n      // 如果找不到活动的interval，尝试遍历所有可能的节奏阅读实例\n      for (let key in window) {\n        if (key.toLowerCase().includes('rhythm') && window[key]) {\n          // 如果是对象且有updateSpeed方法\n          if (typeof window[key] === 'object' && typeof window[key].updateSpeed === 'function') {\n            try {\n              window[key].updateSpeed(newSpeed);\n              console.log(\"已更新\", key, \"的速度\");\n              return true;\n            } catch(e) {\n              console.error(\"更新\", key, \"速度失败\", e);\n            }\n          }\n        }\n      }\n      \n      console.warn(\"未找到活动的节奏阅读实例\");\n      return false;\n    };\n    \n    console.log(\"节奏阅读全局控制已设置\");\n  });\n})(); \n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAO,KAAKC,QAAQ,MAAM,YAAY;AACtC,OAAO,KAAKC,WAAW,MAAM,2BAA2B;AACxD,SAASC,MAAM,QAAQ,QAAQ,CAAC,CAAC;AACjC,OAAO,qBAAqB;AAC5B,SAASC,KAAK,QAAQ,YAAY;;AAElC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAL,QAAQ,CAACM,mBAAmB,CAACC,SAAS,GAAG,2CAA2CP,QAAQ,CAACQ,OAAO,oBAAoB;;AAExH;AACAC,MAAM,CAACC,WAAW,GAAG,CAAC;AACtBD,MAAM,CAACE,UAAU,GAAG,CAAC;AACrBF,MAAM,CAACG,UAAU,GAAG,IAAI;;AAExB;AACAH,MAAM,CAACI,YAAY,GAAGJ,MAAM,CAACI,YAAY,IAAI;EAC3CC,mBAAmB,EAAE;AACvB,CAAC;;AAED;AACAL,MAAM,CAACM,UAAU,GAAG;EAClBC,aAAa,EAAE,EAAE;EACjBC,UAAU,EAAE,IAAI;EAChBC,YAAY,EAAE,CAAC;EACfC,KAAK,EAAE,GAAG;EACVC,aAAa,EAAE,IAAI;EACnBC,WAAW,EAAE,KAAK;EAClBX,WAAW,EAAE,CAAC;EACdY,cAAc,EAAE,KAAK;EACrBC,OAAO,EAAE;AACX,CAAC;;AAED;AACAd,MAAM,CAACe,YAAY,GAAGf,MAAM,CAACe,YAAY,IAAI;EAC3CC,MAAM,EAAE,KAAK;EACbN,KAAK,EAAE,GAAG;EACVO,SAAS,EAAE,CAAC;EACZT,UAAU,EAAE,IAAI;EAChBU,iBAAiB,EAAE,KAAK,CAAE;AAC5B,CAAC;;AAED;AACA,CAAC,YAAW;EACVC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;;EAEhC;EACA,MAAMC,YAAY,GAAGrB,MAAM,CAACe,YAAY,CAACL,KAAK,IAAI,GAAG;EACrD,MAAMY,QAAQ,GAAG,EAAE;EACnB,MAAMC,QAAQ,GAAG,GAAG;EACpB,MAAMC,SAAS,GAAG,EAAE;;EAEpB;EACA,IAAIC,YAAY,GAAG,EAAE;EACrB,IAAIhB,YAAY,GAAG,CAAC;EACpB,IAAIiB,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC3B,IAAIC,YAAY,GAAG,IAAI,CAAC,CAAE;;EAE1B;EACA,MAAMC,kBAAkB,GAAG,SAAAA,CAAA,EAAW;IACpC,MAAMC,SAAS,GAAG,CAChB,YAAY,EACZ,OAAO,EACP,OAAO,EACP,oBAAoB,EACpB,qBAAqB,CACtB;IAED,KAAK,MAAMC,QAAQ,IAAID,SAAS,EAAE;MAChC,IAAI;QACF,MAAME,OAAO,GAAGC,QAAQ,CAACC,gBAAgB,CAACH,QAAQ,CAAC;QACnD,KAAK,MAAMI,GAAG,IAAIH,OAAO,EAAE;UACzB,IAAIG,GAAG,CAACC,YAAY,KAAK,IAAI,EAAE;YAC7B,OAAOD,GAAG;UACZ;QACF;MACF,CAAC,CAAC,OAAME,CAAC,EAAE,CAAC;IACd;IAEA,MAAMC,UAAU,GAAGL,QAAQ,CAACC,gBAAgB,CAAC,+BAA+B,CAAC;IAC7E,KAAK,MAAMC,GAAG,IAAIG,UAAU,EAAE;MAC5B,MAAMC,IAAI,GAAG,CAACJ,GAAG,CAACK,WAAW,IAAI,EAAE,EAAEC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACzD,IAAIH,IAAI,KAAK,KAAK,IAAIA,IAAI,KAAK,MAAM,IAAIA,IAAI,KAAK,GAAG,IAAIA,IAAI,KAAK,GAAG,EAAE;QACrE,IAAIJ,GAAG,CAACC,YAAY,KAAK,IAAI,EAAE;UAC7B,OAAOD,GAAG;QACZ;MACF;IACF;IAEA,OAAO,IAAI;EACb,CAAC;;EAED;EACA,MAAMQ,YAAY,GAAG,SAAAA,CAAA,EAAW;IAC9BxB,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;;IAExB;IACA,IAAIpB,MAAM,CAACe,YAAY,CAACG,iBAAiB,EAAE;MACzCC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;MAC9B;IACF;IAEA,MAAMwB,UAAU,GAAGf,kBAAkB,CAAC,CAAC;IAEvC,IAAI,CAACe,UAAU,EAAE;MACfzB,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;MACvByB,WAAW,CAAC,kBAAkB,CAAC;MAC/B;IACF;;IAEA;IACA7C,MAAM,CAACe,YAAY,CAACG,iBAAiB,GAAG,IAAI;;IAE5C;IACA,IAAIlB,MAAM,CAACe,YAAY,CAACP,UAAU,EAAE;MAClCsC,aAAa,CAAC9C,MAAM,CAACe,YAAY,CAACP,UAAU,CAAC;MAC7CR,MAAM,CAACe,YAAY,CAACP,UAAU,GAAG,IAAI;IACvC;;IAEA;IACA,IAAIoB,YAAY,EAAE;MAChBA,YAAY,CAACmB,UAAU,CAAC,CAAC;MACzBnB,YAAY,GAAG,IAAI;IACrB;IAEA5B,MAAM,CAACe,YAAY,CAACE,SAAS,EAAE;IAC/BE,OAAO,CAACC,GAAG,CAAC,QAAQpB,MAAM,CAACe,YAAY,CAACE,SAAS,YAAY,CAAC;;IAE9D;IACA,MAAM+B,aAAa,GAAGf,QAAQ,CAACC,gBAAgB,CAAC,0BAA0B,CAAC;IAC3E,MAAMe,mBAAmB,GAAG,IAAItB,GAAG,CAAC,CAAC;IACrCqB,aAAa,CAACE,OAAO,CAACC,EAAE,IAAIF,mBAAmB,CAACG,GAAG,CAACD,EAAE,CAAC,CAAC;;IAExD;IACAP,UAAU,CAACS,KAAK,CAAC,CAAC;;IAElB;IACA,IAAIC,cAAc,GAAG,IAAI;IACzB,IAAIC,aAAa,GAAG,KAAK;IAEzB3B,YAAY,GAAG,IAAI4B,gBAAgB,CAAEC,SAAS,IAAK;MACjD;MACA,IAAIH,cAAc,EAAE;QAClBI,YAAY,CAACJ,cAAc,CAAC;MAC9B;;MAEA;MACA,MAAMK,UAAU,GAAG1B,QAAQ,CAACC,gBAAgB,CAAC,0BAA0B,CAAC;MACxE,IAAI0B,aAAa,GAAG,KAAK;MAEzBD,UAAU,CAACT,OAAO,CAACC,EAAE,IAAI;QACvB,IAAI,CAACF,mBAAmB,CAACY,GAAG,CAACV,EAAE,CAAC,EAAE;UAChCS,aAAa,GAAG,IAAI;QACtB;MACF,CAAC,CAAC;MAEF,IAAIA,aAAa,IAAI,CAACL,aAAa,EAAE;QACnCpC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;;QAE/B;QACAkC,cAAc,GAAGQ,UAAU,CAAC,MAAM;UAChC3C,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;UAC1BmC,aAAa,GAAG,IAAI;;UAEpB;UACA3B,YAAY,CAACmB,UAAU,CAAC,CAAC;UACzBnB,YAAY,GAAG,IAAI;;UAEnB;UACAkC,UAAU,CAAC,MAAM;YACf9D,MAAM,CAACe,YAAY,CAACG,iBAAiB,GAAG,KAAK;YAC7C6C,YAAY,CAAC,CAAC;UAChB,CAAC,EAAE,IAAI,CAAC;QACV,CAAC,EAAE,IAAI,CAAC;MACV;IACF,CAAC,CAAC;;IAEF;IACAnC,YAAY,CAACoC,OAAO,CAAC/B,QAAQ,CAACgC,IAAI,EAAE;MAClCC,SAAS,EAAE,IAAI;MACfC,OAAO,EAAE,IAAI;MACbC,UAAU,EAAE,KAAK;MACjBC,aAAa,EAAE;IACjB,CAAC,CAAC;;IAEF;IACAP,UAAU,CAAC,MAAM;MACf,IAAI9D,MAAM,CAACe,YAAY,CAACG,iBAAiB,EAAE;QACzCC,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;QACvB,IAAIQ,YAAY,EAAE;UAChBA,YAAY,CAACmB,UAAU,CAAC,CAAC;UACzBnB,YAAY,GAAG,IAAI;QACrB;QACA5B,MAAM,CAACe,YAAY,CAACG,iBAAiB,GAAG,KAAK;MAC/C;IACF,CAAC,EAAE,KAAK,CAAC;EACX,CAAC;;EAED;EACA,MAAMJ,OAAO,GAAG,SAAAA,CAAA,EAAW;IACzBK,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;;IAEtB;IACA,IAAIpB,MAAM,CAACe,YAAY,CAACP,UAAU,EAAE;MAClCsC,aAAa,CAAC9C,MAAM,CAACe,YAAY,CAACP,UAAU,CAAC;MAC7CR,MAAM,CAACe,YAAY,CAACP,UAAU,GAAG,IAAI;IACvC;;IAEA;IACA,IAAIoB,YAAY,EAAE;MAChBA,YAAY,CAACmB,UAAU,CAAC,CAAC;MACzBnB,YAAY,GAAG,IAAI;IACrB;;IAEA;IACA5B,MAAM,CAACe,YAAY,CAACG,iBAAiB,GAAG,KAAK;IAE7C,IAAI;MACFe,QAAQ,CAACC,gBAAgB,CAAC,cAAc,CAAC,CAACgB,OAAO,CAACoB,IAAI,IAAI;QACxD,IAAIA,IAAI,CAACC,UAAU,EAAE;UACnBD,IAAI,CAACC,UAAU,CAACC,YAAY,CAACvC,QAAQ,CAACwC,cAAc,CAACH,IAAI,CAAC9B,WAAW,CAAC,EAAE8B,IAAI,CAAC;QAC/E;MACF,CAAC,CAAC;IACJ,CAAC,CAAC,OAAMjC,CAAC,EAAE;MACTlB,OAAO,CAACuD,KAAK,CAAC,SAAS,EAAErC,CAAC,CAAC;IAC7B;IAEAZ,YAAY,GAAG,EAAE;IACjBhB,YAAY,GAAG,CAAC;IAChBiB,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC;IACvB3B,MAAM,CAACe,YAAY,CAACC,MAAM,GAAG,KAAK;;IAElC;IACA,MAAM2D,gBAAgB,GAAG,CACvB,sBAAsB,EACtB,yBAAyB,EACzB,wBAAwB,EACxB,wBAAwB,EACxB,+BAA+B,CAChC;IAEDA,gBAAgB,CAACzB,OAAO,CAAC0B,EAAE,IAAI;MAC7B,MAAMC,OAAO,GAAG5C,QAAQ,CAAC6C,cAAc,CAACF,EAAE,CAAC;MAC3C,IAAIC,OAAO,EAAEA,OAAO,CAACE,MAAM,CAAC,CAAC;IAC/B,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMlC,WAAW,GAAG,SAAAA,CAASmC,OAAO,EAAE;IACpC7D,OAAO,CAACC,GAAG,CAAC4D,OAAO,CAAC;;IAEpB;IACA,MAAMC,UAAU,GAAGhD,QAAQ,CAACiD,aAAa,CAAC,KAAK,CAAC;IAChDD,UAAU,CAACzC,WAAW,GAAGwC,OAAO;IAChCC,UAAU,CAACE,KAAK,CAACC,OAAO,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IAEDnD,QAAQ,CAACgC,IAAI,CAACoB,WAAW,CAACJ,UAAU,CAAC;IAErCnB,UAAU,CAAC,MAAM;MACfmB,UAAU,CAACF,MAAM,CAAC,CAAC;IACrB,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;;EAED;EACA,MAAMhB,YAAY,GAAG,SAAAA,CAAA,EAAW;IAC9B5C,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;;IAExB;IACAN,OAAO,CAAC,CAAC;IAET,MAAMwE,SAAS,GAAGrD,QAAQ,CAACsD,aAAa,CAAC,cAAc,CAAC,IACtCtD,QAAQ,CAACsD,aAAa,CAAC,gBAAgB,CAAC,IACxCtD,QAAQ,CAACsD,aAAa,CAAC,SAAS,CAAC,IACjCtD,QAAQ,CAACsD,aAAa,CAAC,MAAM,CAAC,IAC9BtD,QAAQ,CAACgC,IAAI;IAE/B,MAAMuB,SAAS,GAAG,EAAE;IACpB,MAAMC,QAAQ,GAAG,SAAAA,CAASZ,OAAO,EAAE;MACjC,KAAK,IAAIa,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,OAAO,CAACc,UAAU,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;QAClD,MAAMG,IAAI,GAAGhB,OAAO,CAACc,UAAU,CAACD,CAAC,CAAC;QAClC,IAAIG,IAAI,CAACC,QAAQ,KAAK,CAAC,IAAID,IAAI,CAACE,SAAS,CAACtD,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;UACvD+C,SAAS,CAACQ,IAAI,CAACH,IAAI,CAAC;QACtB,CAAC,MAAM,IAAIA,IAAI,CAACC,QAAQ,KAAK,CAAC,IACpB,CAAC,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,UAAU,CAAC,CAACG,QAAQ,CAACJ,IAAI,CAACK,OAAO,CAAC,EAAE;UAC9FT,QAAQ,CAACI,IAAI,CAAC;QAChB;MACF;IACF,CAAC;IACDJ,QAAQ,CAACH,SAAS,CAAC;IAEnB,IAAIE,SAAS,CAACI,MAAM,KAAK,CAAC,EAAE;MAC1B/C,WAAW,CAAC,aAAa,CAAC;MACtB;IACJ;IAEF,IAAI;MACF2C,SAAS,CAACtC,OAAO,CAAC2C,IAAI,IAAI;QACxB,IAAI,CAACA,IAAI,CAACE,SAAS,IAAI,CAACF,IAAI,CAACtB,UAAU,EAAE;QAEzC,MAAMhC,IAAI,GAAGsD,IAAI,CAACE,SAAS;QAC3B,MAAMI,QAAQ,GAAGlE,QAAQ,CAACmE,sBAAsB,CAAC,CAAC;QAElD,KAAK,IAAIV,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnD,IAAI,CAACqD,MAAM,EAAEF,CAAC,EAAE,EAAE;UACpC,MAAMpB,IAAI,GAAGrC,QAAQ,CAACiD,aAAa,CAAC,MAAM,CAAC;UAC3CZ,IAAI,CAAC9B,WAAW,GAAGD,IAAI,CAACmD,CAAC,CAAC;UAC1BpB,IAAI,CAAC+B,SAAS,GAAG,aAAa;UAC9B/B,IAAI,CAACgC,OAAO,CAACC,KAAK,GAAG9E,YAAY,CAACmE,MAAM;UAExCO,QAAQ,CAACd,WAAW,CAACf,IAAI,CAAC;UAC1B7C,YAAY,CAACuE,IAAI,CAAC1B,IAAI,CAAC;QACzB;QAEAuB,IAAI,CAACtB,UAAU,CAACC,YAAY,CAAC2B,QAAQ,EAAEN,IAAI,CAAC;MAC9C,CAAC,CAAC;IACJ,CAAC,CAAC,OAAMxD,CAAC,EAAE;MACTlB,OAAO,CAACuD,KAAK,CAAC,SAAS,EAAErC,CAAC,CAAC;MAC3BQ,WAAW,CAAC,YAAY,CAAC;MACzB;IACF;IAEA,IAAIpB,YAAY,CAACmE,MAAM,KAAK,CAAC,EAAE;MAC7B/C,WAAW,CAAC,SAAS,CAAC;MACtB;IACF;IAEA7C,MAAM,CAACe,YAAY,CAACC,MAAM,GAAG,IAAI;IACjCP,YAAY,GAAG,CAAC;IAEhB+F,aAAa,CAAC,CAAC;IACfxG,MAAM,CAACe,YAAY,CAACP,UAAU,GAAGiG,WAAW,CAACC,QAAQ,EAAE1G,MAAM,CAACe,YAAY,CAACL,KAAK,CAAC;;IAEjF;IACAiG,qBAAqB,CAAC,CAAC;EACzB,CAAC;;EAED;EACA,MAAMH,aAAa,GAAG,SAAAA,CAAA,EAAW;IAC/B/E,YAAY,CAACyB,OAAO,CAAC,CAACoB,IAAI,EAAEiC,KAAK,KAAK;MACpC,IAAIA,KAAK,KAAK9F,YAAY,EAAE;QAC1B6D,IAAI,CAACa,KAAK,CAACyB,KAAK,GAAG,OAAO;QAC1BtC,IAAI,CAACa,KAAK,CAAC0B,UAAU,GAAG,MAAM;MAChC,CAAC,MAAM,IAAInF,WAAW,CAACmC,GAAG,CAAC0C,KAAK,CAAC,EAAE;QACjCjC,IAAI,CAACa,KAAK,CAACyB,KAAK,GAAG,EAAE,CAAC,CAAE;MAC1B,CAAC,MAAM;QACLtC,IAAI,CAACa,KAAK,CAACyB,KAAK,GAAG,uBAAuB;MAC5C;IACF,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAME,YAAY,GAAG,SAAAA,CAASjC,OAAO,EAAE;IACrC,MAAMkC,IAAI,GAAGlC,OAAO,CAACmC,qBAAqB,CAAC,CAAC;IAC5C,OACED,IAAI,CAACE,GAAG,IAAI,CAAC,IACbF,IAAI,CAACG,IAAI,IAAI,CAAC,IACdH,IAAI,CAACI,MAAM,KAAKnH,MAAM,CAACoH,WAAW,IAAInF,QAAQ,CAACoF,eAAe,CAACC,YAAY,CAAC,IAC5EP,IAAI,CAACQ,KAAK,KAAKvH,MAAM,CAACwH,UAAU,IAAIvF,QAAQ,CAACoF,eAAe,CAACI,WAAW,CAAC;EAE7E,CAAC;;EAED;EACA,MAAMf,QAAQ,GAAG,SAAAA,CAAA,EAAW;IAC1B,IAAI,CAAC1G,MAAM,CAACe,YAAY,CAACC,MAAM,IAAI,CAACS,YAAY,CAACmE,MAAM,EAAE;IAEzDlE,WAAW,CAAC0B,GAAG,CAAC3C,YAAY,CAAC;IAE7BA,YAAY,EAAE;IACd,IAAIA,YAAY,IAAIgB,YAAY,CAACmE,MAAM,EAAE;MACvC,IAAI5F,MAAM,CAACe,YAAY,CAACP,UAAU,EAAE;QAClCsC,aAAa,CAAC9C,MAAM,CAACe,YAAY,CAACP,UAAU,CAAC;QAC7CR,MAAM,CAACe,YAAY,CAACP,UAAU,GAAG,IAAI;MACvC;MACAW,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;MAC1BuB,YAAY,CAAC,CAAC;MACd;IACF;IAEA6D,aAAa,CAAC,CAAC;;IAEf;IACA,MAAMkB,WAAW,GAAGjG,YAAY,CAAChB,YAAY,CAAC;IAC9C,IAAIiH,WAAW,IAAI,CAACZ,YAAY,CAACY,WAAW,CAAC,EAAE;MAC7CA,WAAW,CAACC,cAAc,CAAC;QACzBC,QAAQ,EAAE,QAAQ;QAClBC,KAAK,EAAE;MACT,CAAC,CAAC;IACJ;EACF,CAAC;;EAED;EACA,MAAMlB,qBAAqB,GAAG,SAAAA,CAAA,EAAW;IACvC;IACA,IAAImB,kBAAkB,GAAG7F,QAAQ,CAAC6C,cAAc,CAAC,yBAAyB,CAAC;IAC3E,IAAIgD,kBAAkB,EAAEA,kBAAkB,CAAC/C,MAAM,CAAC,CAAC;;IAEnD;IACE,MAAMO,SAAS,GAAGrD,QAAQ,CAACiD,aAAa,CAAC,KAAK,CAAC;IACjDI,SAAS,CAACV,EAAE,GAAG,yBAAyB;IACxCU,SAAS,CAACH,KAAK,CAACC,OAAO,GAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;IAED;IACA,MAAM2C,KAAK,GAAG9F,QAAQ,CAACiD,aAAa,CAAC,KAAK,CAAC;IAC3C6C,KAAK,CAACvF,WAAW,GAAG,QAAQ;IAC5BuF,KAAK,CAAC5C,KAAK,CAACC,OAAO,GAAG;AAC1B;AACA;AACA;AACA,KAAK;IACDE,SAAS,CAACD,WAAW,CAAC0C,KAAK,CAAC;;IAE5B;IACA,MAAMC,YAAY,GAAG/F,QAAQ,CAACiD,aAAa,CAAC,KAAK,CAAC;IAClD8C,YAAY,CAACxF,WAAW,GAAG,OAAOxC,MAAM,CAACe,YAAY,CAACL,KAAK,IAAI;IAC/DsH,YAAY,CAACpD,EAAE,GAAG,sBAAsB;IACxCoD,YAAY,CAAC7C,KAAK,CAACC,OAAO,GAAG;AACjC;AACA;AACA;AACA,KAAK;IACDE,SAAS,CAACD,WAAW,CAAC2C,YAAY,CAAC;;IAEnC;IACA,MAAMC,MAAM,GAAGhG,QAAQ,CAACiD,aAAa,CAAC,OAAO,CAAC;IAC9C+C,MAAM,CAACC,IAAI,GAAG,OAAO;IACrBD,MAAM,CAACE,GAAG,GAAG7G,QAAQ,CAAC8G,QAAQ,CAAC,CAAC;IAChCH,MAAM,CAACI,GAAG,GAAG9G,QAAQ,CAAC6G,QAAQ,CAAC,CAAC;IAChCH,MAAM,CAACK,IAAI,GAAG9G,SAAS,CAAC4G,QAAQ,CAAC,CAAC;IAClCH,MAAM,CAACM,KAAK,GAAGvI,MAAM,CAACe,YAAY,CAACL,KAAK,CAAC0H,QAAQ,CAAC,CAAC;IACnDH,MAAM,CAAC9C,KAAK,CAACqD,KAAK,GAAG,MAAM;IAE3BP,MAAM,CAACQ,OAAO,GAAG,YAAW;MACxB,MAAMC,QAAQ,GAAGC,QAAQ,CAAC,IAAI,CAACJ,KAAK,CAAC;MACvCvI,MAAM,CAACe,YAAY,CAACL,KAAK,GAAGgI,QAAQ;MACpCV,YAAY,CAACxF,WAAW,GAAG,OAAOkG,QAAQ,IAAI;MAE9C,IAAI1I,MAAM,CAACe,YAAY,CAACP,UAAU,EAAE;QAClCsC,aAAa,CAAC9C,MAAM,CAACe,YAAY,CAACP,UAAU,CAAC;QAC7CR,MAAM,CAACe,YAAY,CAACP,UAAU,GAAGiG,WAAW,CAACC,QAAQ,EAAEgC,QAAQ,CAAC;MAClE;IACF,CAAC;IACDpD,SAAS,CAACD,WAAW,CAAC4C,MAAM,CAAC;;IAE7B;IACA,MAAMW,eAAe,GAAG3G,QAAQ,CAACiD,aAAa,CAAC,KAAK,CAAC;IACrD0D,eAAe,CAACzD,KAAK,CAACC,OAAO,GAAG;AACpC;AACA;AACA;AACA,KAAK;;IAED;IACA,MAAMyD,WAAW,GAAG5G,QAAQ,CAACiD,aAAa,CAAC,QAAQ,CAAC;IACpD2D,WAAW,CAACrG,WAAW,GAAG,IAAI;IAC9BqG,WAAW,CAAC1D,KAAK,CAACC,OAAO,GAAG;AAChC;AACA;AACA;AACA;AACA,KAAK;IAEDyD,WAAW,CAACC,OAAO,GAAG,YAAW;MAC/B,IAAI9I,MAAM,CAACe,YAAY,CAACP,UAAU,EAAE;QAClCsC,aAAa,CAAC9C,MAAM,CAACe,YAAY,CAACP,UAAU,CAAC;QAC7CR,MAAM,CAACe,YAAY,CAACP,UAAU,GAAG,IAAI;QACrC,IAAI,CAACgC,WAAW,GAAG,IAAI;MACzB,CAAC,MAAM;QACLxC,MAAM,CAACe,YAAY,CAACP,UAAU,GAAGiG,WAAW,CAACC,QAAQ,EAAE1G,MAAM,CAACe,YAAY,CAACL,KAAK,CAAC;QACjF,IAAI,CAAC8B,WAAW,GAAG,IAAI;MACzB;IACF,CAAC;IACDoG,eAAe,CAACvD,WAAW,CAACwD,WAAW,CAAC;;IAExC;IACA,MAAME,UAAU,GAAG9G,QAAQ,CAACiD,aAAa,CAAC,QAAQ,CAAC;IACnD6D,UAAU,CAACvG,WAAW,GAAG,IAAI;IAC7BuG,UAAU,CAAC5D,KAAK,CAACC,OAAO,GAAG;AAC/B;AACA;AACA;AACA;AACA,KAAK;IAED2D,UAAU,CAACD,OAAO,GAAGhI,OAAO;IAC5B8H,eAAe,CAACvD,WAAW,CAAC0D,UAAU,CAAC;IAEvCzD,SAAS,CAACD,WAAW,CAACuD,eAAe,CAAC;IACpC3G,QAAQ,CAACgC,IAAI,CAACoB,WAAW,CAACC,SAAS,CAAC;EACxC,CAAC;;EAED;EACA,MAAM0D,aAAa,GAAG,SAAAA,CAAA,EAAW;IAC/B;IACA,IAAIC,cAAc,GAAGhH,QAAQ,CAAC6C,cAAc,CAAC,oBAAoB,CAAC;IAClE,IAAImE,cAAc,EAAE;IAEpB,MAAMC,MAAM,GAAGjH,QAAQ,CAACiD,aAAa,CAAC,QAAQ,CAAC;IAC/CgE,MAAM,CAACtE,EAAE,GAAG,oBAAoB;IAChCsE,MAAM,CAAC1G,WAAW,GAAG,QAAQ;IAC7B0G,MAAM,CAAC/D,KAAK,CAACC,OAAO,GAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IAED8D,MAAM,CAACJ,OAAO,GAAG/E,YAAY;IAC7B9B,QAAQ,CAACgC,IAAI,CAACoB,WAAW,CAAC6D,MAAM,CAAC;EACnC,CAAC;;EAED;EACA,MAAMC,UAAU,GAAG,SAAAA,CAAA,EAAW;IAC5BhI,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;;IAE3B;IACA,IAAIa,QAAQ,CAACmH,UAAU,KAAK,SAAS,EAAE;MACrCnH,QAAQ,CAACoH,gBAAgB,CAAC,kBAAkB,EAAEL,aAAa,CAAC;IAC9D,CAAC,MAAM;MACLA,aAAa,CAAC,CAAC;IACjB;;IAEA;IACAhJ,MAAM,CAACe,YAAY,CAACuI,KAAK,GAAGvF,YAAY;IACxC/D,MAAM,CAACe,YAAY,CAACwI,IAAI,GAAGzI,OAAO;IAClCd,MAAM,CAACe,YAAY,CAACyI,WAAW,GAAG,UAASd,QAAQ,EAAE;MACnD1I,MAAM,CAACe,YAAY,CAACL,KAAK,GAAGgI,QAAQ;;MAEpC;MACA,MAAMe,OAAO,GAAGxH,QAAQ,CAAC6C,cAAc,CAAC,sBAAsB,CAAC;MAC/D,IAAI2E,OAAO,EAAEA,OAAO,CAACjH,WAAW,GAAG,OAAOkG,QAAQ,IAAI;;MAEtD;MACA,IAAI1I,MAAM,CAACe,YAAY,CAACP,UAAU,EAAE;QAClCsC,aAAa,CAAC9C,MAAM,CAACe,YAAY,CAACP,UAAU,CAAC;QAC7CR,MAAM,CAACe,YAAY,CAACP,UAAU,GAAGiG,WAAW,CAACC,QAAQ,EAAEgC,QAAQ,CAAC;MAClE;MAEA,OAAO,IAAI;IACb,CAAC;EACH,CAAC;;EAED;EACAS,UAAU,CAAC,CAAC;EAEZhI,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;AACpC,CAAC,EAAE,CAAC;;AAEJ;AACApB,MAAM,CAAC0J,yBAAyB,GAAG,YAAW;EAC5CvI,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;EAC/B,IAAIpB,MAAM,CAACe,YAAY,EAAE;IACvB,IAAIf,MAAM,CAACe,YAAY,CAACC,MAAM,EAAE;MAC9BG,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;IACxB,CAAC,MAAM;MACTpB,MAAM,CAACe,YAAY,CAACuI,KAAK,CAAC,CAAC;IAC7B;EACF,CAAC,MAAM;IACLnI,OAAO,CAACuD,KAAK,CAAC,YAAY,CAAC;IAC3BiF,KAAK,CAAC,mBAAmB,CAAC;EAC5B;AACF,CAAC;;AAED;AACA,MAAMC,uBAAuB,GAAGA,CAAA,KAAM;EACpC;EACAzI,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;AAClC,CAAC;;AAED;AACA,MAAMyI,kBAAkB,GAAGA,CAAA,KAAM;EAC/B,IAAI7J,MAAM,CAACe,YAAY,IAAI,OAAOf,MAAM,CAACe,YAAY,CAACuI,KAAK,KAAK,UAAU,EAAE;IAC1EtJ,MAAM,CAACe,YAAY,CAACuI,KAAK,CAAC,CAAC;EAC7B;AACF,CAAC;;AAED;AACA,CAAC,YAAW;EACVnI,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;;EAEhC;EACA,IAAI0I,QAAQ,GAAG,KAAK;EACpB,IAAItJ,UAAU,GAAG,IAAI;EACrB,IAAIiB,YAAY,GAAG,EAAE;EACrB,IAAIhB,YAAY,GAAG,CAAC;EACpB,IAAIiB,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC;;EAE3B;EACA,IAAIV,SAAS,GAAG,CAAC;;EAEjB;EACA,MAAMY,kBAAkB,GAAG,SAAAA,CAAA,EAAW;IACpC;IACA,MAAMC,SAAS,GAAG,CAChB,YAAY,EACZ,OAAO,EACP,OAAO,EACP,oBAAoB,EACpB,qBAAqB,EACrB,wBAAwB,EACxB,yBAAyB,CAC1B;IAED,KAAK,MAAMC,QAAQ,IAAID,SAAS,EAAE;MAChC,IAAI;QACF,MAAME,OAAO,GAAGC,QAAQ,CAACC,gBAAgB,CAACH,QAAQ,CAAC;QACnD,KAAK,MAAMI,GAAG,IAAIH,OAAO,EAAE;UACzB,IAAIG,GAAG,CAACC,YAAY,KAAK,IAAI,EAAE;YAAE;YAC/B,OAAOD,GAAG;UACZ;QACF;MACF,CAAC,CAAC,OAAME,CAAC,EAAE,CAAC;IACd;;IAEA;IACA,MAAMC,UAAU,GAAGL,QAAQ,CAACC,gBAAgB,CAAC,+BAA+B,CAAC;IAC7E,KAAK,MAAMC,GAAG,IAAIG,UAAU,EAAE;MAC5B,MAAMC,IAAI,GAAG,CAACJ,GAAG,CAACK,WAAW,IAAI,EAAE,EAAEC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACzD,IAAIH,IAAI,KAAK,KAAK,IAAIA,IAAI,KAAK,MAAM,IAAIA,IAAI,KAAK,GAAG,IAAIA,IAAI,KAAK,GAAG,EAAE;QACrE,IAAIJ,GAAG,CAACC,YAAY,KAAK,IAAI,EAAE;UAC7B,OAAOD,GAAG;QACZ;MACF;IACF;IAEA,OAAO,IAAI;EACb,CAAC;;EAED;EACA,MAAMQ,YAAY,GAAG,SAAAA,CAAA,EAAW;IAC9BxB,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;;IAExB;IACA,MAAMwB,UAAU,GAAGf,kBAAkB,CAAC,CAAC;IAEvC,IAAI,CAACe,UAAU,EAAE;MACfzB,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;MACvByB,WAAW,CAAC,kBAAkB,CAAC;MAC7B;IACF;;IAEF;IACA,IAAIrC,UAAU,EAAE;MACdsC,aAAa,CAACtC,UAAU,CAAC;MACzBA,UAAU,GAAG,IAAI;IACnB;;IAEA;IACAS,SAAS,EAAE;IACXE,OAAO,CAACC,GAAG,CAAC,QAAQH,SAAS,YAAY,CAAC;;IAE1C;IACA2B,UAAU,CAACS,KAAK,CAAC,CAAC;;IAElB;IACA,MAAM0G,QAAQ,GAAG,IAAIvG,gBAAgB,CAAEC,SAAS,IAAK;MACnD;MACA,MAAMuG,YAAY,GAAGvG,SAAS,CAACwG,IAAI,CAACC,QAAQ,IAC1CA,QAAQ,CAAChC,IAAI,KAAK,WAAW,IAAIgC,QAAQ,CAACC,UAAU,CAACvE,MAAM,GAAG,CAChE,CAAC;MAED,IAAIoE,YAAY,EAAE;QAChB7I,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;QACxB;QACA2I,QAAQ,CAAChH,UAAU,CAAC,CAAC;;QAErB;QACAe,UAAU,CAAC,MAAM;UACf;UACA3C,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;UAC9B2C,YAAY,CAAC,CAAC;QAChB,CAAC,EAAE,GAAG,CAAC;MACT;IACF,CAAC,CAAC;;IAEF;IACAgG,QAAQ,CAAC/F,OAAO,CAAC/B,QAAQ,CAACgC,IAAI,EAAE;MAC9BC,SAAS,EAAE,IAAI;MACfC,OAAO,EAAE;IACX,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMrD,OAAO,GAAG,SAAAA,CAAA,EAAW;IACzBK,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IAEtB,IAAIZ,UAAU,EAAE;MACdsC,aAAa,CAACtC,UAAU,CAAC;MACzBA,UAAU,GAAG,IAAI;IACnB;IAEA,IAAI;MACFyB,QAAQ,CAACC,gBAAgB,CAAC,cAAc,CAAC,CAACgB,OAAO,CAACoB,IAAI,IAAI;QACxD,IAAIA,IAAI,CAACC,UAAU,EAAE;UACnBD,IAAI,CAACC,UAAU,CAACC,YAAY,CAACvC,QAAQ,CAACwC,cAAc,CAACH,IAAI,CAAC9B,WAAW,CAAC,EAAE8B,IAAI,CAAC;QAC/E;MACF,CAAC,CAAC;IACJ,CAAC,CAAC,OAAMjC,CAAC,EAAE;MACTlB,OAAO,CAACuD,KAAK,CAAC,SAAS,EAAErC,CAAC,CAAC;IAC7B;IAEAZ,YAAY,GAAG,EAAE;IACjBhB,YAAY,GAAG,CAAC;IAChBiB,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC;IACvBmI,QAAQ,GAAG,KAAK;IAChB7I,SAAS,GAAG,CAAC;IAEb,MAAMiI,MAAM,GAAGjH,QAAQ,CAAC6C,cAAc,CAAC,uBAAuB,CAAC;IAC/D,IAAIoE,MAAM,EAAEA,MAAM,CAACnE,MAAM,CAAC,CAAC;EAC7B,CAAC;;EAED;EACA,MAAMlC,WAAW,GAAG,SAAAA,CAASmC,OAAO,EAAE;IACpC7D,OAAO,CAACC,GAAG,CAAC4D,OAAO,CAAC;IACpB2E,KAAK,CAAC3E,OAAO,CAAC;EAChB,CAAC;;EAED;EACA,MAAMoF,SAAS,GAAG,SAAAA,CAAA,EAAW;IAC3B,MAAMnB,cAAc,GAAGhH,QAAQ,CAAC6C,cAAc,CAAC,uBAAuB,CAAC;IACvE,IAAImE,cAAc,EAAEA,cAAc,CAAClE,MAAM,CAAC,CAAC;IAE3C,MAAMmE,MAAM,GAAGjH,QAAQ,CAACiD,aAAa,CAAC,QAAQ,CAAC;IAC/CgE,MAAM,CAACtE,EAAE,GAAG,uBAAuB;IACnCsE,MAAM,CAAC1G,WAAW,GAAG,QAAQ;IAC7B0G,MAAM,CAAC/D,KAAK,CAACC,OAAO,GAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IAED8D,MAAM,CAACJ,OAAO,GAAG,YAAW;MAC1B,IAAItI,UAAU,EAAE;QACd;QACA,IAAIA,UAAU,EAAE;UACdsC,aAAa,CAACtC,UAAU,CAAC;UACzBA,UAAU,GAAG,IAAI;QACnB;QACA0I,MAAM,CAAC1G,WAAW,GAAG,QAAQ;QAC7B0G,MAAM,CAAC/D,KAAK,CAACkF,UAAU,GAAG,SAAS;MACnC,CAAC,MAAM;QACP;QACA7J,UAAU,GAAGiG,WAAW,CAACC,QAAQ,EAAE,GAAG,CAAC;QACvCwC,MAAM,CAAC1G,WAAW,GAAG,QAAQ;QAC7B0G,MAAM,CAAC/D,KAAK,CAACkF,UAAU,GAAG,SAAS;MACrC;IACF,CAAC;IAEDpI,QAAQ,CAACgC,IAAI,CAACoB,WAAW,CAAC6D,MAAM,CAAC;IACjC,OAAOA,MAAM;EACf,CAAC;;EAED;EACA,MAAMnF,YAAY,GAAG,SAAAA,CAAA,EAAW;IAC9B5C,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;;IAExB;IACAN,OAAO,CAAC,CAAC;;IAET;IACA,MAAMwE,SAAS,GAAGrD,QAAQ,CAACsD,aAAa,CAAC,cAAc,CAAC,IACtCtD,QAAQ,CAACsD,aAAa,CAAC,gBAAgB,CAAC,IACxCtD,QAAQ,CAACsD,aAAa,CAAC,SAAS,CAAC,IACjCtD,QAAQ,CAACsD,aAAa,CAAC,MAAM,CAAC,IAC9BtD,QAAQ,CAACgC,IAAI;;IAE/B;IACA,MAAMuB,SAAS,GAAG,EAAE;IACpB,MAAMC,QAAQ,GAAG,SAAAA,CAASZ,OAAO,EAAE;MACjC,KAAK,IAAIa,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,OAAO,CAACc,UAAU,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;QAClD,MAAMG,IAAI,GAAGhB,OAAO,CAACc,UAAU,CAACD,CAAC,CAAC;QAClC,IAAIG,IAAI,CAACC,QAAQ,KAAK,CAAC,IAAID,IAAI,CAACE,SAAS,CAACtD,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;UACvD+C,SAAS,CAACQ,IAAI,CAACH,IAAI,CAAC;QACtB,CAAC,MAAM,IAAIA,IAAI,CAACC,QAAQ,KAAK,CAAC,IACpB,CAAC,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,UAAU,CAAC,CAACG,QAAQ,CAACJ,IAAI,CAACK,OAAO,CAAC,EAAE;UAC9FT,QAAQ,CAACI,IAAI,CAAC;QAChB;MACF;IACF,CAAC;IACDJ,QAAQ,CAACH,SAAS,CAAC;IAEnB,IAAIE,SAAS,CAACI,MAAM,KAAK,CAAC,EAAE;MAC1B/C,WAAW,CAAC,aAAa,CAAC;MAC1B;IACF;;IAEA;IACA,IAAI;MACF2C,SAAS,CAACtC,OAAO,CAAC2C,IAAI,IAAI;QACxB,IAAI,CAACA,IAAI,CAACE,SAAS,IAAI,CAACF,IAAI,CAACtB,UAAU,EAAE;QAEzC,MAAMhC,IAAI,GAAGsD,IAAI,CAACE,SAAS;QAC3B,MAAMI,QAAQ,GAAGlE,QAAQ,CAACmE,sBAAsB,CAAC,CAAC;QAElD,KAAK,IAAIV,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnD,IAAI,CAACqD,MAAM,EAAEF,CAAC,EAAE,EAAE;UACpC,MAAMpB,IAAI,GAAGrC,QAAQ,CAACiD,aAAa,CAAC,MAAM,CAAC;UAC3CZ,IAAI,CAAC9B,WAAW,GAAGD,IAAI,CAACmD,CAAC,CAAC;UAC1BpB,IAAI,CAAC+B,SAAS,GAAG,aAAa;UAC9B/B,IAAI,CAACgC,OAAO,CAACC,KAAK,GAAG9E,YAAY,CAACmE,MAAM;UAExCO,QAAQ,CAACd,WAAW,CAACf,IAAI,CAAC;UAC1B7C,YAAY,CAACuE,IAAI,CAAC1B,IAAI,CAAC;QACzB;QAEAuB,IAAI,CAACtB,UAAU,CAACC,YAAY,CAAC2B,QAAQ,EAAEN,IAAI,CAAC;MAC9C,CAAC,CAAC;IACJ,CAAC,CAAC,OAAMxD,CAAC,EAAE;MACTlB,OAAO,CAACuD,KAAK,CAAC,SAAS,EAAErC,CAAC,CAAC;MAC3BQ,WAAW,CAAC,YAAY,CAAC;MACzB;IACF;IAEA,IAAIpB,YAAY,CAACmE,MAAM,KAAK,CAAC,EAAE;MAC7B/C,WAAW,CAAC,SAAS,CAAC;MACtB;IACF;;IAEA;IACAiH,QAAQ,GAAG,IAAI;IACfrJ,YAAY,GAAG,CAAC;;IAEhB;IACA+F,aAAa,CAAC,CAAC;;IAEf;IACAhG,UAAU,GAAGiG,WAAW,CAACC,QAAQ,EAAE,GAAG,CAAC;IAEvC0D,SAAS,CAAC,CAAC;EACb,CAAC;;EAED;EACA,MAAM5D,aAAa,GAAG,SAAAA,CAAA,EAAW;IAC/B/E,YAAY,CAACyB,OAAO,CAAC,CAACoB,IAAI,EAAEiC,KAAK,KAAK;MACpC,IAAIA,KAAK,KAAK9F,YAAY,EAAE;QAC1B6D,IAAI,CAACa,KAAK,CAACyB,KAAK,GAAG,OAAO;QAC1BtC,IAAI,CAACa,KAAK,CAAC0B,UAAU,GAAG,MAAM;MAChC,CAAC,MAAM,IAAInF,WAAW,CAACmC,GAAG,CAAC0C,KAAK,CAAC,EAAE;QACjCjC,IAAI,CAACa,KAAK,CAACyB,KAAK,GAAG,OAAO;MAC5B,CAAC,MAAM;QACLtC,IAAI,CAACa,KAAK,CAACyB,KAAK,GAAG,uBAAuB;MAC5C;IACF,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMF,QAAQ,GAAG,SAAAA,CAAA,EAAW;IAC1B,IAAI,CAACoD,QAAQ,IAAI,CAACrI,YAAY,CAACmE,MAAM,EAAE;IAEvClE,WAAW,CAAC0B,GAAG,CAAC3C,YAAY,CAAC;IAE7BA,YAAY,EAAE;IACd,IAAIA,YAAY,IAAIgB,YAAY,CAACmE,MAAM,EAAE;MACvC;MACA,IAAIpF,UAAU,EAAE;QACdsC,aAAa,CAACtC,UAAU,CAAC;QACzBA,UAAU,GAAG,IAAI;MACnB;MACAW,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;MAC1BuB,YAAY,CAAC,CAAC,CAAC,CAAC;MACd;IACF;IAEF6D,aAAa,CAAC,CAAC;EACjB,CAAC;;EAED;EACA,MAAM8D,gBAAgB,GAAG,SAAAA,CAASC,IAAI,EAAE;IACtCpJ,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEmJ,IAAI,CAAC;IAE3B,IAAIA,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,eAAe,IAAIT,QAAQ,EAAE;MAC7DhJ,OAAO,CAAC,CAAC;IACX;EACF,CAAC;;EAED;EACA,MAAM0J,gBAAgB,GAAGxK,MAAM,CAACyK,kBAAkB;EAClDzK,MAAM,CAACyK,kBAAkB,GAAG,UAASF,IAAI,EAAE;IACzC,IAAI,OAAOC,gBAAgB,KAAK,UAAU,EAAE;MAC1C,IAAI;QACFA,gBAAgB,CAACD,IAAI,CAAC;MACxB,CAAC,CAAC,OAAMlI,CAAC,EAAE,CAAC;IACd;IAEAiI,gBAAgB,CAACC,IAAI,CAAC;EACxB,CAAC;;EAED;EACA,MAAMvB,aAAa,GAAG,SAAAA,CAAA,EAAW;IAC/B,MAAME,MAAM,GAAGjH,QAAQ,CAACiD,aAAa,CAAC,QAAQ,CAAC;IAC/CgE,MAAM,CAACtE,EAAE,GAAG,oBAAoB;IAChCsE,MAAM,CAAC1G,WAAW,GAAG,QAAQ;IAC7B0G,MAAM,CAAC/D,KAAK,CAACC,OAAO,GAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IAED8D,MAAM,CAACJ,OAAO,GAAG/E,YAAY,CAAC,CAAE;IAChC9B,QAAQ,CAACgC,IAAI,CAACoB,WAAW,CAAC6D,MAAM,CAAC;EACnC,CAAC;;EAED;EACA,MAAMC,UAAU,GAAG,SAAAA,CAAA,EAAW;IAC5BhI,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAE3B4H,aAAa,CAAC,CAAC;EACjB,CAAC;;EAED;EACA/G,QAAQ,CAACoH,gBAAgB,CAAC,kBAAkB,EAAEF,UAAU,CAAC;;EAEzD;EACAnJ,MAAM,CAAC0K,wBAAwB,GAAG3G,YAAY;EAE9C5C,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;AACpC,CAAC,EAAE,CAAC;AAEJ,MAAMuJ,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAG1L,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACa,WAAW,EAAE8K,cAAc,CAAC,GAAG3L,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACc,UAAU,EAAE8K,aAAa,CAAC,GAAG5L,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAAC6L,QAAQ,EAAEC,WAAW,CAAC,GAAG9L,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAAC+L,OAAO,EAAEC,UAAU,CAAC,GAAGhM,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAMiM,OAAO,GAAGhM,MAAM,CAAC,IAAI,CAAC;EAC5B,MAAM,CAACiM,IAAI,EAAEC,OAAO,CAAC,GAAGnM,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACoM,WAAW,EAAEC,cAAc,CAAC,GAAGrM,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACsM,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGvM,QAAQ,CAAC,EAAE,CAAC;EAChE,MAAM,CAACwM,WAAW,EAAEC,cAAc,CAAC,GAAGzM,QAAQ,CAAC,QAAQ,CAAC;EACxD,MAAM,CAAC0M,OAAO,EAAEC,UAAU,CAAC,GAAG3M,QAAQ,CAAC,MAAM,CAAC;EAC9C,MAAM,CAAC4M,eAAe,EAAEC,kBAAkB,CAAC,GAAG7M,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM8M,kBAAkB,GAAG7M,MAAM,CAAC,IAAI,CAAC;EACvC,MAAM,CAAC8M,OAAO,EAAEC,UAAU,CAAC,GAAGhN,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACiN,WAAW,EAAEC,cAAc,CAAC,GAAGlN,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACmN,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGpN,QAAQ,CAAC,KAAK,CAAC;;EAEjE;EACA;EACA,MAAMqN,mBAAmB,GAAGA,CAAA,KAAM;IAChCxK,QAAQ,CAACgC,IAAI,CAACyI,SAAS,CAACtJ,GAAG,CAAC,iBAAiB,CAAC;;IAE9C;IACA,IAAI,CAACnB,QAAQ,CAAC6C,cAAc,CAAC,uBAAuB,CAAC,EAAE;MACrD,MAAMK,KAAK,GAAGlD,QAAQ,CAACiD,aAAa,CAAC,OAAO,CAAC;MAC7CC,KAAK,CAACP,EAAE,GAAG,uBAAuB;MAClCO,KAAK,CAAC3C,WAAW,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;MACDP,QAAQ,CAAC0K,IAAI,CAACtH,WAAW,CAACF,KAAK,CAAC;IAClC;EACF,CAAC;;EAED;EACA,MAAMyH,qBAAqB,GAAGA,CAAA,KAAM;IAClC3K,QAAQ,CAACgC,IAAI,CAACyI,SAAS,CAAC3H,MAAM,CAAC,iBAAiB,CAAC;EACnD,CAAC;;EAED;EACA,MAAM8H,mBAAmB,GAAGA,CAAA,KAAM;IAChC,IAAI,CAAC5K,QAAQ,CAAC6C,cAAc,CAAC,oBAAoB,CAAC,EAAE;MAClD,MAAMK,KAAK,GAAGlD,QAAQ,CAACiD,aAAa,CAAC,OAAO,CAAC;MAC7CC,KAAK,CAACP,EAAE,GAAG,oBAAoB;MAC/BO,KAAK,CAAC3C,WAAW,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;MACDP,QAAQ,CAAC0K,IAAI,CAACtH,WAAW,CAACF,KAAK,CAAC;IAClC;EACF,CAAC;;EAED;EACA,MAAM2H,sBAAsB,GAAGA,CAAA,KAAM;IACnC,IAAI,CAAC7K,QAAQ,CAAC6C,cAAc,CAAC,sBAAsB,CAAC,EAAE;MACpD,MAAMK,KAAK,GAAGlD,QAAQ,CAACiD,aAAa,CAAC,OAAO,CAAC;MAC7CC,KAAK,CAACP,EAAE,GAAG,sBAAsB;MACjCO,KAAK,CAAC3C,WAAW,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;MACDP,QAAQ,CAAC0K,IAAI,CAACtH,WAAW,CAACF,KAAK,CAAC;IAClC;EACF,CAAC;;EAED;EACA,MAAM4H,qBAAqB,GAAGA,CAAA,KAAM;IAClC,IAAI,CAAC9K,QAAQ,CAAC6C,cAAc,CAAC,qBAAqB,CAAC,EAAE;MACnD,MAAMK,KAAK,GAAGlD,QAAQ,CAACiD,aAAa,CAAC,OAAO,CAAC;MAC7CC,KAAK,CAACP,EAAE,GAAG,qBAAqB;MAChCO,KAAK,CAAC3C,WAAW,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;MACDP,QAAQ,CAAC0K,IAAI,CAACtH,WAAW,CAACF,KAAK,CAAC;IAClC;EACF,CAAC;;EAED;EACA,MAAM6H,sBAAsB,GAAGA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AEN,kBAAkB,CAAC;IACnE;IAEA5b,QAAQ,CAACkc,mBAAmB,CAAC,WAAW,EAAER,eAAe,CAAC;;IAE1D;IACAE,kBAAkB,CAAC,CAAC;EACtB,CAAC;;EAED;EACA,MAAMO,mBAAmB,GAAGA,CAAA,KAAM;IAChC,MAAMjZ,KAAK,GAAGlD,QAAQ,CAACiD,aAAa,CAAC,OAAO,CAAC;IAC7CC,KAAK,CAAC3C,WAAW,GAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDP,QAAQ,CAAC0K,IAAI,CAACtH,WAAW,CAACF,KAAK,CAAC;;IAEhC;IACA,MAAMkZ,sBAAsB,GAAGpc,QAAQ,CAACiD,aAAa,CAAC,OAAO,CAAC;IAC9DmZ,sBAAsB,CAACzZ,EAAE,GAAG,0BAA0B;IACtDyZ,sBAAsB,CAAC5G,SAAS,GAAG;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDxV,QAAQ,CAAC0K,IAAI,CAACtH,WAAW,CAACgZ,sBAAsB,CAAC;EACnD,CAAC;;EAED;EACA/e,SAAS,CAAC,MAAM;IACd8e,mBAAmB,CAAC,CAAC;IACrBtR,sBAAsB,CAAC,CAAC;;IAExB;IACA,MAAMwR,gBAAgB,GAAGrc,QAAQ,CAACiD,aAAa,CAAC,OAAO,CAAC;IACxDoZ,gBAAgB,CAAC1Z,EAAE,GAAG,gCAAgC;IACtD0Z,gBAAgB,CAAC9b,WAAW,GAAG;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDP,QAAQ,CAAC0K,IAAI,CAACtH,WAAW,CAACiZ,gBAAgB,CAAC;;IAE3C;IACA,MAAMnZ,KAAK,GAAGlD,QAAQ,CAACiD,aAAa,CAAC,OAAO,CAAC;IAC7CC,KAAK,CAACP,EAAE,GAAG,+BAA+B;IAC1CO,KAAK,CAAC3C,WAAW,GAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDP,QAAQ,CAAC0K,IAAI,CAACtH,WAAW,CAACF,KAAK,CAAC;;IAEhC;IACA,MAAMoZ,oBAAoB,GAAGtc,QAAQ,CAACiD,aAAa,CAAC,OAAO,CAAC;IAC5DqZ,oBAAoB,CAAC3Z,EAAE,GAAG,0BAA0B;IACpD2Z,oBAAoB,CAAC/b,WAAW,GAAG;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDP,QAAQ,CAAC0K,IAAI,CAACtH,WAAW,CAACkZ,oBAAoB,CAAC;IAE/C,OAAO,MAAM;MACX,MAAMC,aAAa,GAAGvc,QAAQ,CAAC6C,cAAc,CAAC,+BAA+B,CAAC;MAC9E,IAAI0Z,aAAa,EAAEA,aAAa,CAACzZ,MAAM,CAAC,CAAC;MAEzC,MAAM0Z,wBAAwB,GAAGxc,QAAQ,CAAC6C,cAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}