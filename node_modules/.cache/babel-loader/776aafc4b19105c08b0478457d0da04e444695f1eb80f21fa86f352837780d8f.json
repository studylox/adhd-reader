{"ast":null,"code":"var _jsxFileName = \"D:\\\\adhd-read-helper\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 添加全局事件跟踪对象\nwindow.eventTracker = window.eventTracker || {\n  mouseFollowHandlers: []\n};\n\n// 自动阅读器全局对象\nwindow.autoReader = {\n  charPositions: [],\n  intervalId: null,\n  currentIndex: 0,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false,\n  cleanup: null\n};\n\n// 添加新的节奏阅读模式代码\n// 全局变量，确保在页面切换后仍然保持状态\nwindow.rhythmReaderGlobal = window.rhythmReaderGlobal || {\n  active: false,\n  speed: 300\n};\n\n// 节奏阅读模式\nconst rhythmReader = {\n  active: false,\n  intervalId: null,\n  speed: 300,\n  currentIndex: 0,\n  readIndices: new Set(),\n  charElements: [] // 存储字符元素的引用\n};\n\n// 启动节奏阅读\nfunction startRhythmReading() {\n  console.log(\"启动节奏阅读模式\");\n\n  // 停止已有的阅读活动\n  stopRhythmReading();\n\n  // 初始化文本（将文本节点拆分成单个字符的span）\n  if (!initializeTextNodes()) {\n    alert(\"无法初始化文本节点\");\n    return;\n  }\n\n  // 设置为活动状态\n  rhythmReader.active = true;\n  rhythmReader.currentIndex = 0;\n  rhythmReader.readIndices.clear();\n\n  // 添加速度滑块\n  addSpeedSlider();\n\n  // 更新颜色\n  updateTextColors();\n\n  // 滚动到开始位置\n  scrollToCurrentChar();\n\n  // 设置阅读间隔\n  rhythmReader.intervalId = setInterval(moveToNextChar, rhythmReader.speed);\n}\n\n// 初始化文本节点（将文本分解为单独的字符span）\nfunction initializeTextNodes() {\n  // 重置字符元素数组\n  rhythmReader.charElements = [];\n\n  // 获取内容容器\n  const contentContainer = document.querySelector('.page-content');\n  if (!contentContainer) return false;\n\n  // 查找所有文本节点并处理\n  const textNodes = [];\n  findTextNodes(contentContainer, textNodes);\n  if (textNodes.length === 0) {\n    console.error(\"未找到文本节点\");\n    return false;\n  }\n  console.log(`找到 ${textNodes.length} 个文本节点`);\n\n  // 为每个文本节点创建字符span\n  textNodes.forEach(node => {\n    const text = node.nodeValue;\n    if (!text || text.trim() === '') return;\n\n    // 创建文档片段来存放字符span\n    const fragment = document.createDocumentFragment();\n\n    // 获取父元素计算样式以保持一致性\n    const parentStyles = window.getComputedStyle(node.parentNode);\n\n    // 为每个字符创建span\n    for (let i = 0; i < text.length; i++) {\n      const char = text[i];\n      const span = document.createElement('span');\n      span.textContent = char;\n      span.className = 'rhythm-char';\n      span.dataset.rhythmIndex = rhythmReader.charElements.length;\n\n      // 如果是空白字符，添加一个标志\n      if (char.trim() === '') {\n        span.dataset.whitespace = 'true';\n      }\n\n      // 保持原始样式，重要：不设置任何背景\n      span.style.display = 'inline';\n      span.style.margin = '0';\n      span.style.padding = '0';\n      span.style.border = 'none';\n      span.style.backgroundColor = 'transparent';\n      fragment.appendChild(span);\n      rhythmReader.charElements.push(span);\n    }\n\n    // 替换原始节点\n    if (node.parentNode) {\n      node.parentNode.replaceChild(fragment, node);\n    }\n  });\n  console.log(`总共创建了 ${rhythmReader.charElements.length} 个字符span`);\n  return rhythmReader.charElements.length > 0;\n}\n\n// 递归查找所有文本节点\nfunction findTextNodes(element, textNodes) {\n  // 处理子节点\n  for (let i = 0; i < element.childNodes.length; i++) {\n    const node = element.childNodes[i];\n\n    // 如果是文本节点且有内容\n    if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() !== '') {\n      textNodes.push(node);\n    }\n    // 如果是元素节点，递归处理\n    else if (node.nodeType === Node.ELEMENT_NODE) {\n      // 跳过读者UI元素\n      if (node.id === 'rhythm-speed-slider' || node.id === 'rhythm-reading-button' || node.className === 'rhythm-char') {\n        continue;\n      }\n      findTextNodes(node, textNodes);\n    }\n  }\n}\n\n// 更新文本颜色 - 修正后的颜色方案\nfunction updateTextColors() {\n  // 更新所有字符的颜色\n  rhythmReader.charElements.forEach((span, index) => {\n    // 确定颜色\n    let color;\n    let fontWeight = 'inherit';\n    if (index === rhythmReader.currentIndex) {\n      color = '#00aa00'; // 当前阅读的字 - 绿色\n      fontWeight = 'bold';\n    } else if (index === rhythmReader.currentIndex + 1 || index === rhythmReader.currentIndex + 2) {\n      color = '#aaaaaa'; // 接下来两个字 - 淡灰色\n    } else if (rhythmReader.readIndices.has(index)) {\n      color = '#ffffff'; // 已读字符 - 白色（表示已读）\n    } else {\n      color = 'rgba(160, 160, 160, 0.25)'; // 未读字符 - 非常淡的灰色（可见但不明显）\n    }\n    span.style.color = color;\n    span.style.fontWeight = fontWeight;\n\n    // 确保没有背景\n    span.style.backgroundColor = 'transparent';\n    span.style.background = 'none';\n  });\n}\n\n// 移动到下一个字符\nfunction moveToNextChar() {\n  // 将当前字符标记为已读\n  rhythmReader.readIndices.add(rhythmReader.currentIndex);\n\n  // 移动到下一个非空白字符\n  do {\n    rhythmReader.currentIndex++;\n\n    // 检查是否到达末尾\n    if (rhythmReader.currentIndex >= rhythmReader.charElements.length) {\n      // 尝试使用App组件的changePage函数翻页\n      if (typeof window.changePage === 'function') {\n        console.log(\"节奏阅读：尝试翻到下一页\");\n        window.changePage(1);\n        stopRhythmReading();\n\n        // 在页面加载完成后重新启动\n        setTimeout(startRhythmReading, 1000);\n      } else {\n        console.log(\"节奏阅读：已到达内容末尾\");\n        stopRhythmReading();\n      }\n      return;\n    }\n  } while (rhythmReader.charElements[rhythmReader.currentIndex].dataset.whitespace === 'true');\n\n  // 更新颜色\n  updateTextColors();\n\n  // 滚动到当前字符\n  scrollToCurrentChar();\n}\n\n// 滚动到当前字符\nfunction scrollToCurrentChar() {\n  const span = rhythmReader.charElements[rhythmReader.currentIndex];\n  if (!span) return;\n  const rect = span.getBoundingClientRect();\n  const contentContainer = document.querySelector('.page-content');\n\n  // 估计行高\n  const lineHeight = parseInt(window.getComputedStyle(span).lineHeight) || Math.max(20, rect.height * 1.5);\n\n  // 确定滚动容器\n  const isContainerScrollable = contentContainer && contentContainer.scrollHeight > contentContainer.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n  if (isContainerScrollable) {\n    // 容器滚动\n    const containerRect = contentContainer.getBoundingClientRect();\n    const relativeTop = rect.top - containerRect.top + contentContainer.scrollTop;\n    const visibleTop = contentContainer.scrollTop;\n    const visibleBottom = visibleTop + contentContainer.clientHeight;\n    if (relativeTop < visibleTop + lineHeight || relativeTop > visibleBottom - lineHeight) {\n      contentContainer.scrollBy({\n        top: lineHeight * 2 * (relativeTop > visibleBottom - lineHeight ? 1 : -1),\n        behavior: 'smooth'\n      });\n    }\n  } else {\n    // 窗口滚动\n    const viewportTop = window.scrollY;\n    const viewportBottom = viewportTop + window.innerHeight;\n    const absoluteTop = rect.top + window.scrollY;\n    if (absoluteTop < viewportTop + lineHeight || absoluteTop > viewportBottom - lineHeight) {\n      window.scrollBy({\n        top: lineHeight * 2 * (absoluteTop > viewportBottom - lineHeight ? 1 : -1),\n        behavior: 'smooth'\n      });\n    }\n  }\n}\n\n// 停止节奏阅读\nfunction stopRhythmReading() {\n  if (rhythmReader.intervalId) {\n    clearInterval(rhythmReader.intervalId);\n    rhythmReader.intervalId = null;\n  }\n  rhythmReader.active = false;\n\n  // 恢复原始文本样式\n  restoreOriginalText();\n\n  // 移除速度滑块\n  const slider = document.getElementById('rhythm-speed-slider');\n  if (slider) slider.remove();\n}\n\n// 恢复原始文本\nfunction restoreOriginalText() {\n  // 获取所有已创建的字符span\n  const charSpans = document.querySelectorAll('.rhythm-char');\n\n  // 按父节点分组\n  const parentNodeMap = new Map();\n  charSpans.forEach(span => {\n    const parent = span.parentNode;\n    if (!parent) return;\n    if (!parentNodeMap.has(parent)) {\n      parentNodeMap.set(parent, []);\n    }\n    parentNodeMap.get(parent).push(span);\n  });\n\n  // 对每个父节点，将连续的字符span合并回文本节点\n  parentNodeMap.forEach((spans, parent) => {\n    // 排序spans确保顺序正确\n    spans.sort((a, b) => {\n      const indexA = parseInt(a.dataset.rhythmIndex || '0');\n      const indexB = parseInt(b.dataset.rhythmIndex || '0');\n      return indexA - indexB;\n    });\n\n    // 根据连续性分组\n    const groups = [];\n    let currentGroup = [spans[0]];\n    for (let i = 1; i < spans.length; i++) {\n      const prevIndex = parseInt(spans[i - 1].dataset.rhythmIndex || '0');\n      const currentIndex = parseInt(spans[i].dataset.rhythmIndex || '0');\n      if (currentIndex === prevIndex + 1 && spans[i].previousSibling === spans[i - 1]) {\n        currentGroup.push(spans[i]);\n      } else {\n        groups.push(currentGroup);\n        currentGroup = [spans[i]];\n      }\n    }\n    groups.push(currentGroup);\n\n    // 对每个连续组替换为文本节点\n    groups.forEach(group => {\n      if (group.length === 0) return;\n      const text = group.map(span => span.textContent).join('');\n      const textNode = document.createTextNode(text);\n\n      // 替换第一个span，然后移除其余的\n      parent.replaceChild(textNode, group[0]);\n      for (let i = 1; i < group.length; i++) {\n        if (group[i].parentNode === parent) {\n          parent.removeChild(group[i]);\n        }\n      }\n    });\n  });\n\n  // 清除字符元素数组\n  rhythmReader.charElements = [];\n}\n\n// 添加速度滑块\nfunction addSpeedSlider() {\n  let slider = document.getElementById('rhythm-speed-slider');\n  if (slider) return;\n  const container = document.createElement('div');\n  container.id = 'rhythm-speed-slider';\n  container.style.position = 'fixed';\n  container.style.bottom = '20px';\n  container.style.left = '50%';\n  container.style.transform = 'translateX(-50%)';\n  container.style.backgroundColor = 'white';\n  container.style.padding = '10px';\n  container.style.borderRadius = '5px';\n  container.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';\n  container.style.zIndex = '10000';\n  container.style.display = 'flex';\n  container.style.alignItems = 'center';\n  const label = document.createElement('label');\n  label.textContent = '阅读速度: ';\n  label.style.marginRight = '8px';\n  container.appendChild(label);\n  const input = document.createElement('input');\n  input.type = 'range';\n  input.min = '50';\n  input.max = '1000';\n  input.step = '50';\n  input.value = rhythmReader.speed;\n  input.style.width = '200px';\n  const valueDisplay = document.createElement('span');\n  valueDisplay.textContent = `${rhythmReader.speed}ms`;\n  valueDisplay.style.marginLeft = '8px';\n  valueDisplay.style.minWidth = '60px';\n  input.addEventListener('input', function () {\n    const newSpeed = parseInt(this.value);\n    rhythmReader.speed = newSpeed;\n    valueDisplay.textContent = `${newSpeed}ms`;\n    if (rhythmReader.intervalId) {\n      clearInterval(rhythmReader.intervalId);\n      rhythmReader.intervalId = setInterval(moveToNextChar, newSpeed);\n    }\n  });\n  container.appendChild(input);\n  container.appendChild(valueDisplay);\n  document.body.appendChild(container);\n}\n\n// 添加节奏阅读按钮\nfunction addRhythmReadingButton() {\n  if (document.getElementById('rhythm-reading-button')) {\n    document.getElementById('rhythm-reading-button').remove();\n  }\n  const button = document.createElement('button');\n  button.id = 'rhythm-reading-button';\n  button.textContent = '节奏阅读';\n  button.style.position = 'fixed';\n  button.style.top = '20px';\n  button.style.right = '20px';\n  button.style.padding = '8px 16px';\n  button.style.backgroundColor = '#4CAF50';\n  button.style.color = 'white';\n  button.style.border = 'none';\n  button.style.borderRadius = '4px';\n  button.style.cursor = 'pointer';\n  button.style.zIndex = '10000';\n  button.style.fontSize = '16px';\n  button.addEventListener('click', function () {\n    if (rhythmReader.active) {\n      stopRhythmReading();\n      this.textContent = '节奏阅读';\n      this.style.backgroundColor = '#4CAF50';\n    } else {\n      startRhythmReading();\n      this.textContent = '停止节奏阅读';\n      this.style.backgroundColor = '#f44336';\n    }\n  });\n  document.body.appendChild(button);\n}\n\n// 执行函数，添加按钮\naddRhythmReadingButton();\nconst App = () => {\n  _s();\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  const [isTableOfContents, setIsTableOfContents] = useState(false);\n\n  // 实现缺失的函数\n  // 应用深色背景\n  const applyDarkBackground = () => {\n    document.body.classList.add('dark-background');\n\n    // 添加必要的CSS样式\n    if (!document.getElementById('dark-background-style')) {\n      const style = document.createElement('style');\n      style.id = 'dark-background-style';\n      style.textContent = `\n        .dark-background {\n          background-color: #000 !important;\n        }\n        .dark-background .sidebar {\n          background: linear-gradient(145deg, #4834d4, #341f9e) !important;\n        }\n        .dark-background .page-content {\n          background-color: #000 !important;\n        }\n        .dark-background .main-content {\n          background-color: #000 !important;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 恢复正常背景\n  const restoreDarkBackground = () => {\n    document.body.classList.remove('dark-background');\n  };\n\n  // 添加裸眼3D样式\n  const addNakedEye3DStyles = () => {\n    if (!document.getElementById('naked-eye-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'naked-eye-3d-style';\n      style.textContent = `\n        .naked-eye-3d-container {\n          position: relative;\n          perspective: 800px;\n          width: 100%;\n        }\n        \n        .naked-eye-3d-text {\n          display: inline-block;\n          animation: float 3s ease-in-out infinite;\n          text-shadow: 0 0 5px rgba(255,255,255,0.3);\n          padding: 0 4px;\n          color: white;\n          filter: drop-shadow(0 0 5px rgba(120, 220, 255, 0.6));\n        }\n        \n        @keyframes float {\n          0% { transform: translateZ(0px); }\n          50% { transform: translateZ(20px); }\n          100% { transform: translateZ(0px); }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 添加舒适3D样式\n  const addComfortable3DStyles = () => {\n    if (!document.getElementById('comfortable-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'comfortable-3d-style';\n      style.textContent = `\n        .emboss-3d-text {\n          color: #fff;\n          text-shadow: \n            1px 1px 1px rgba(0,0,0,0.5),\n            -1px -1px 1px rgba(255,255,255,0.5);\n          letter-spacing: 1.5px;\n          font-weight: 500;\n        }\n        \n        .float-3d-text {\n          display: inline-block;\n          transform-style: preserve-3d;\n          transform: perspective(500px) translateZ(10px);\n          text-shadow: 0 2px 5px rgba(0,0,0,0.5);\n        }\n        \n        .gradient-3d-text {\n          display: inline-block;\n          background: linear-gradient(to bottom, #fff, #aaa);\n          -webkit-background-clip: text;\n          -webkit-text-fill-color: transparent;\n          text-shadow: 0 2px 4px rgba(0,0,0,0.3);\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 添加闪读样式\n  const addFlashReadingStyles = () => {\n    if (!document.getElementById('flash-reading-style')) {\n      const style = document.createElement('style');\n      style.id = 'flash-reading-style';\n      style.textContent = `\n        .flash-reading-container {\n          position: relative;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          z-index: 1000;\n          padding: 20px;\n        }\n        \n        .flash-reading-display-wrapper {\n          position: relative;\n          margin: 40px 0;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        \n        .flash-reading-display {\n          font-size: 36px;\n          font-weight: bold;\n          text-align: center;\n          color: white;\n          min-height: 80px;\n          max-width: 90%;\n          padding: 20px 40px;\n          position: relative; /* 允许绝对定位的覆盖层 */\n          z-index: 2;\n        }\n        \n        .flash-reading-cover {\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(128, 128, 128, 0.6); /* 灰色遮罩 */\n          border-radius: 8px;\n          z-index: 1; /* 确保在文本后面 */\n        }\n        \n        .flash-reading-controls {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          gap: 20px;\n          margin-bottom: 20px;\n          width: 100%;\n        }\n        \n        .flash-reading-buttons {\n          display: flex;\n          gap: 10px;\n          flex-wrap: wrap;\n          justify-content: center;\n        }\n        \n        .flash-reading-speed {\n          display: flex;\n          align-items: center;\n          color: white;\n          width: 80%;\n          max-width: 400px;\n          gap: 10px;\n        }\n        \n        .flash-reading-slider {\n          flex: 1;\n          height: 8px;\n          appearance: none;\n          background: #555;\n          border-radius: 4px;\n          outline: none;\n        }\n        \n        .flash-reading-slider::-webkit-slider-thumb {\n          appearance: none;\n          width: 20px;\n          height: 20px;\n          border-radius: 50%;\n          background: #6c5ce7;\n          cursor: pointer;\n        }\n        \n        .flash-reading-btn {\n          padding: 10px 20px;\n          border: none;\n          border-radius: 4px;\n          background-color: #6c5ce7;\n          color: white;\n          font-size: 16px;\n          cursor: pointer;\n          transition: background-color 0.2s;\n        }\n        \n        .flash-reading-btn:hover {\n          background-color: #5344c0;\n        }\n        \n        .flash-reading-btn:disabled {\n          background-color: #aaa;\n          cursor: not-allowed;\n        }\n        \n        .flash-reading-progress {\n          color: white;\n          font-size: 14px;\n          margin-top: 10px;\n        }\n        .flash-reading-speed-note {\n          font-size: 12px;\n          color: #ccc;\n          margin-left: 5px;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 初始化闪读模式\n  const initializeFlashReading = () => {\n    // 添加样式\n    addFlashReadingStyles();\n    const sentences = window.flashReadingSentences;\n    if (!sentences || !Array.isArray(sentences) || sentences.length === 0) {\n      console.error('闪读模式: 未找到句子数据');\n      return;\n    }\n\n    // 获取全局UI元素\n    const display = document.getElementById('flash-reading-display');\n    const speedSlider = document.getElementById('flash-reading-speed');\n    const speedValue = document.getElementById('flash-reading-speed-value');\n    const playButton = document.getElementById('flash-reading-play');\n    const pauseButton = document.getElementById('flash-reading-pause');\n    const stopButton = document.getElementById('flash-reading-stop');\n    const prevButton = document.getElementById('flash-reading-prev-sentence');\n    const nextButton = document.getElementById('flash-reading-next-sentence');\n    const progress = document.getElementById('flash-reading-progress');\n    const cover = document.querySelector('.flash-reading-cover');\n    if (!display || !speedSlider || !speedValue || !playButton || !pauseButton || !stopButton || !prevButton || !nextButton || !progress || !cover) {\n      console.error('闪读模式: 未找到UI元素');\n      return;\n    }\n\n    // 创建闪读控制器\n    window.flashReader = {\n      sentences: sentences,\n      currentIndex: 0,\n      interval: null,\n      speed: parseInt(speedSlider.value),\n      isPlaying: false,\n      // 开始闪读\n      start() {\n        if (this.interval) {\n          clearInterval(this.interval);\n        }\n        this.isPlaying = true;\n        playButton.disabled = true;\n        pauseButton.disabled = false;\n        progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n\n        // 显示当前句子\n        this.displayCurrentSentence();\n\n        // 设置闪读间隔\n        this.interval = setInterval(() => {\n          this.currentIndex++;\n          if (this.currentIndex >= this.sentences.length) {\n            this.stop();\n            display.textContent = '阅读完成';\n            return;\n          }\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }, this.speed);\n      },\n      // 显示当前句子\n      displayCurrentSentence() {\n        if (this.currentIndex < this.sentences.length) {\n          const currentSentence = this.sentences[this.currentIndex];\n          display.textContent = currentSentence;\n          display.style.color = 'white'; // 确保文本为白色\n\n          // 调整背景以适应内容\n          setTimeout(() => {\n            const displayRect = display.getBoundingClientRect();\n            // 确保覆盖层完全包裹文本\n            cover.style.width = `${displayRect.width}px`;\n            cover.style.height = `${displayRect.height}px`;\n          }, 10);\n        }\n      },\n      // 暂停闪读\n      pause() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n      },\n      // 停止闪读\n      stop() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        this.currentIndex = 0;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n        display.textContent = '准备开始';\n        progress.textContent = `进度：0 / ${this.sentences.length}`; // 重置进度\n      },\n      // 更新速度\n      updateSpeed(newSpeed) {\n        this.speed = newSpeed;\n        speedValue.textContent = `${newSpeed} ms`;\n\n        // 保存速度设置到本地存储\n        localStorage.setItem('flash-reading-speed', newSpeed);\n\n        // 如果正在播放，重新开始以应用新速度\n        if (this.isPlaying) {\n          clearInterval(this.interval);\n          this.start(); // 直接调用start方法重新开始\n        }\n      },\n      // 返回上一句\n      prevSentence() {\n        if (this.currentIndex > 0) {\n          this.currentIndex--;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n      // 跳到下一句\n      nextSentence() {\n        if (this.currentIndex < this.sentences.length - 1) {\n          this.currentIndex++;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n      // 清理资源\n      cleanup() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        this.currentIndex = 0;\n      }\n    };\n\n    // 添加事件监听器\n    playButton.addEventListener('click', () => {\n      window.flashReader.start();\n    });\n    pauseButton.addEventListener('click', () => {\n      window.flashReader.pause();\n    });\n    stopButton.addEventListener('click', () => {\n      window.flashReader.stop();\n    });\n    speedSlider.addEventListener('input', e => {\n      const newSpeed = parseInt(e.target.value);\n      window.flashReader.updateSpeed(newSpeed);\n    });\n    prevButton.addEventListener('click', () => {\n      window.flashReader.prevSentence();\n    });\n    nextButton.addEventListener('click', () => {\n      window.flashReader.nextSentence();\n    });\n\n    // 初始化\n    const savedSpeed = localStorage.getItem('flash-reading-speed');\n    const initialSpeed = savedSpeed ? parseInt(savedSpeed) : 1000;\n    speedSlider.value = initialSpeed;\n    window.flashReader.updateSpeed(initialSpeed);\n    console.log('闪读模式已初始化，共 ' + sentences.length + ' 个句子');\n  };\n\n  // 创建闪读内容\n  const createFlashReadingContent = text => {\n    return `<div class=\"flash-reading-content\">\n      <p>${text}</p>\n    </div>`;\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 格式化文本用于鼠标跟随\n  const formatTextForMouseFollow = text => {\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个单词添加span，以便于添加高亮效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"follow-word\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\" data-follow=\"true\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用静态高亮\n  const applyStaticHighlight = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为单词随机添加颜色高亮\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      let lastColor = null;\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n          return;\n        }\n\n        // 随机决定是否高亮和使用哪种颜色\n        if (Math.random() < 0.7) {\n          let color;\n          if (lastColor === 'red') {\n            color = 'blue';\n          } else if (lastColor === 'blue') {\n            color = 'red';\n          } else {\n            color = Math.random() < 0.5 ? 'red' : 'blue';\n          }\n          lastColor = color;\n          processedParagraph += `<span class=\"highlight-word ${color}\">${word}</span>`;\n        } else {\n          processedParagraph += word;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用裸眼3D效果\n  const applyNakedEye3dEffect = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content naked-eye-3d-container\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个词添加3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"naked-eye-3d-text\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用舒适3D效果\n  const applyComfortable3dEffect = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个词随机应用不同的3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          processedParagraph += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 初始化裸眼3D\n  const initializeNakedEye3D = () => {\n    // 为裸眼3D文本添加动画\n    const textElements = document.querySelectorAll('.naked-eye-3d-text');\n    textElements.forEach((element, index) => {\n      // 添加随机延迟，使动画错开\n      const delay = Math.random() * 2;\n      element.style.animationDelay = `${delay}s`;\n    });\n  };\n\n  // 初始化节奏阅读\n  const initializeRhythmReading = () => {\n    if (window.rhythmReader && typeof window.rhythmReader.initializeTextNodes === 'function') {\n      window.rhythmReader.initializeTextNodes();\n    }\n  };\n\n  // 启动节奏阅读\n  const startRhythmReading = () => {\n    if (window.rhythmReader && typeof window.rhythmReader.start === 'function') {\n      window.rhythmReader.start();\n    }\n  };\n\n  // 添加鼠标跟随监听器\n  const addMouseFollowListeners = () => {\n    // 获取内容容器\n    const contentArea = document.querySelector('.mouse-follow-content');\n    if (!contentArea) {\n      console.error('未找到鼠标跟随内容区域');\n      return;\n    }\n\n    // 上一个高亮的行\n    let lastHighlightedLine = null;\n\n    // 监听鼠标移动 - 精确的行检测\n    const mouseMoveHandler = e => {\n      // 获取鼠标位置\n      const mouseY = e.clientY;\n\n      // 获取所有行\n      const allLines = contentArea.querySelectorAll('.follow-line');\n      let foundLine = null;\n      let minDistance = Infinity;\n\n      // 寻找鼠标所在的精确行\n      allLines.forEach(line => {\n        const rect = line.getBoundingClientRect();\n        const lineCenter = rect.top + rect.height / 2;\n        const distance = Math.abs(mouseY - lineCenter);\n\n        // 如果鼠标在行范围内，计算到行中心的距离\n        if (mouseY >= rect.top && mouseY <= rect.bottom) {\n          if (distance < minDistance) {\n            minDistance = distance;\n            foundLine = line;\n          }\n        }\n      });\n\n      // 更新高亮状态\n      if (lastHighlightedLine && lastHighlightedLine !== foundLine) {\n        // 移除旧高亮\n        lastHighlightedLine.classList.remove('highlighted');\n      }\n      if (foundLine) {\n        // 添加新高亮\n        foundLine.classList.add('highlighted');\n        lastHighlightedLine = foundLine;\n\n        // 调试输出\n        console.log('当前高亮行:', foundLine.textContent.substring(0, 30) + '...');\n      } else if (lastHighlightedLine) {\n        // 如果没有找到新行，且有上一个高亮行，移除它\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n\n    // 鼠标离开处理\n    const mouseLeaveHandler = () => {\n      // 清除当前高亮\n      if (lastHighlightedLine) {\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n\n    // 存储处理函数引用\n    window.eventTracker = window.eventTracker || {\n      mouseFollowHandlers: []\n    };\n    window.eventTracker.mouseFollowHandlers.push({\n      element: contentArea,\n      event: 'mousemove',\n      handler: mouseMoveHandler\n    }, {\n      element: contentArea,\n      event: 'mouseleave',\n      handler: mouseLeaveHandler\n    });\n\n    // 添加事件监听器\n    contentArea.addEventListener('mousemove', mouseMoveHandler);\n    contentArea.addEventListener('mouseleave', mouseLeaveHandler);\n    console.log('改进的鼠标跟随监听器已初始化');\n  };\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n  }, []);\n\n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async file => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n\n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n\n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n\n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({\n        scale: 1.0\n      });\n\n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async textContent => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n\n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n\n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n\n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    const lines = [...lineMap.values()];\n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    return hasTocKeywords || hasPageNumberPatterns || shortLineRatio > 0.7 && numberLineRatio > 0.3;\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n\n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n\n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n\n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n\n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = text => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    return result;\n  };\n\n  // 处理内容页面 - 按句子划分段落\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n\n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 按句子划分内容（句号、问号、感叹号等作为分隔符）\n      const sentences = splitIntoSentences(extractedText);\n\n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch (mode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          // 使用ADHD友好的静态高亮处理\n          console.log('应用ADHD友好的静态高亮模式');\n          processedContent = formatSimpleHighlightedText(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'rhythm':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          processedContent = createFlashReadingContentFromSentences(sentences);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n      setContent(processedContent);\n\n      // 如果是静态高亮模式，添加延时验证检查\n      if (mode === 'static') {\n        setTimeout(() => {\n          const contentArea = document.querySelector('.adhd-highlight-mode');\n          if (contentArea) {\n            console.log('静态高亮模式元素存在');\n            const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n            console.log(`找到 ${paragraphs.length} 个段落`);\n\n            // 检查样式是否正确应用\n            if (paragraphs.length > 0) {\n              const firstPara = paragraphs[0];\n              const styles = window.getComputedStyle(firstPara);\n              console.log('段落应用的样式:', {\n                color: styles.color,\n                backgroundColor: styles.backgroundColor,\n                fontFamily: styles.fontFamily,\n                fontSize: styles.fontSize\n              });\n            }\n          }\n        }, 200);\n      }\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 将文本分割成句子\n  const splitIntoSentences = text => {\n    // 匹配句号、问号、感叹号后跟空格或结束的模式\n    // 支持中英文标点符号\n    const sentenceRegex = /([.!?。！？；;]+\\s*)/g;\n\n    // 分割文本成句子\n    const sentences = [];\n    let lastIndex = 0;\n    let match;\n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const sentence = text.substring(lastIndex, endIndex).trim();\n\n      // 避免添加空句子\n      if (sentence) {\n        sentences.push(sentence);\n      }\n      lastIndex = endIndex;\n    }\n\n    // 处理最后一部分（如果没有以句号等结尾）\n    if (lastIndex < text.length) {\n      const lastSentence = text.substring(lastIndex).trim();\n      if (lastSentence) {\n        sentences.push(lastSentence);\n      }\n    }\n    return sentences;\n  };\n\n  // 专门为闪读模式分割文本，以任意标点符号为分隔点\n  const splitIntoFlashReadingSegments = text => {\n    // 匹配任意标点符号包括中英文标点\n    const sentenceRegex = /([,.!?:;，。！？：；、]+\\s*)/g;\n\n    // 分割文本成短句\n    const segments = [];\n    let lastIndex = 0;\n    let match;\n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const segment = text.substring(lastIndex, endIndex).trim();\n\n      // 避免添加空段落\n      if (segment) {\n        segments.push(segment);\n      }\n      lastIndex = endIndex;\n    }\n\n    // 处理最后一部分（如果没有以标点符号结尾）\n    if (lastIndex < text.length) {\n      const lastSegment = text.substring(lastIndex).trim();\n      if (lastSegment) {\n        segments.push(lastSegment);\n      }\n    }\n    return segments;\n  };\n\n  // 格式化句子为HTML\n  const formatSentencesToHtml = sentences => {\n    let html = '<div class=\"pdf-content\">';\n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${sentence}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为句子应用静态高亮\n  const applyStaticHighlightToSentences = sentences => {\n    let html = '<div class=\"pdf-content adhd-content\">';\n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n\n      // 简单地为句子添加特定样式的class\n      html += `<p class=\"pdf-paragraph adhd-sentence\">${sentence}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为鼠标跟随模式格式化句子\n  const formatSentencesForMouseFollow = sentences => {\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    sentences.forEach((sentence, index) => {\n      if (sentence.trim() === '') return;\n\n      // 每个句子作为独立行，使用div而不是p标签\n      html += `<div class=\"follow-line\" data-line=\"${index}\" data-sentence=\"${sentence.substring(0, 20)}...\" style=\"color: inherit;\">${sentence}</div>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为舒适3D模式格式化句子\n  const applyComfortable3dEffectToSentences = sentences => {\n    let html = '<div class=\"pdf-content\">';\n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n\n      // 为每个词随机应用不同的3D效果\n      const words = sentence.split(/(\\s+)/);\n      let processedSentence = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedSentence += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          processedSentence += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedSentence}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为闪读模式创建内容\n  const createFlashReadingContentFromSentences = sentences => {\n    // 储存句子到全局变量，用于后续显示\n    window.flashReadingSentences = sentences;\n\n    // 返回闪读界面的HTML结构\n    return `\n      <div class=\"flash-reading-container\">\n        <div class=\"flash-reading-controls\">\n          <div class=\"flash-reading-buttons\">\n            <button id=\"flash-reading-prev-sentence\" class=\"flash-reading-btn\">上一句</button>\n            <button id=\"flash-reading-play\" class=\"flash-reading-btn\">开始</button>\n            <button id=\"flash-reading-pause\" class=\"flash-reading-btn\" disabled>暂停</button>\n            <button id=\"flash-reading-stop\" class=\"flash-reading-btn\">停止</button>\n            <button id=\"flash-reading-next-sentence\" class=\"flash-reading-btn\">下一句</button>\n          </div>\n          <div class=\"flash-reading-speed\">\n            <span>速度：</span>\n            <input type=\"range\" id=\"flash-reading-speed\" min=\"300\" max=\"1700\" step=\"50\" value=\"1000\" class=\"flash-reading-slider\">\n            <span id=\"flash-reading-speed-value\">1000 ms</span>\n            <span class=\"flash-reading-speed-note\">（数值越小，切换越快）</span>\n          </div>\n          <div class=\"flash-reading-progress\">\n            <span id=\"flash-reading-progress\">进度：0 / ${sentences.length}</span>\n          </div>\n        </div>\n        <div class=\"flash-reading-display-wrapper\">\n          <div class=\"flash-reading-cover\"></div> <!-- 这里是闪卡 -->\n          <div id=\"flash-reading-display\" class=\"flash-reading-display\">准备开始</div>\n        </div>\n      </div>`;\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async file => {\n    try {\n      const text = await file.text();\n\n      // 根据阅读模式选择不同的处理方式\n      let processedContent = '';\n      if (readingMode === 'flash-reading') {\n        // 闪读模式下使用特定的分割函数\n        const segments = splitIntoFlashReadingSegments(text);\n        processedContent = createFlashReadingContentFromSentences(segments);\n\n        // 初始化闪读模式\n        setTimeout(() => {\n          initializeFlashReading();\n        }, 100);\n      } else {\n        // 其他模式使用默认的分割方式\n        const sentences = splitIntoSentences(text);\n        switch (readingMode) {\n          case 'normal':\n            processedContent = formatSentencesToHtml(sentences);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlightToSentences(sentences);\n            break;\n          case 'follow-mouse':\n            processedContent = formatSentencesForMouseFollow(sentences);\n            break;\n          case 'comfortable-3d':\n            processedContent = applyComfortable3dEffectToSentences(sentences);\n            break;\n          default:\n            processedContent = formatSentencesToHtml(sentences);\n        }\n      }\n\n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n\n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setContent('<div class=\"error-message\">TXT文件处理失败</div>');\n    }\n  };\n\n  // 处理Markdown文件\n  const handleMarkdownFile = async file => {\n    try {\n      const text = await file.text();\n\n      // 使用marked库转换markdown为HTML\n      let html = '';\n      try {\n        if (window.marked) {\n          html = window.marked.parse(text);\n        } else {\n          // 如果没有marked库，简单地拆分为段落\n          html = `<div>${text.split(\"\\n\\n\").map(p => `<p>${p}</p>`).join(\"\")}</div>`;\n        }\n      } catch (parseError) {\n        console.error('Markdown解析错误:', parseError);\n        html = `<div>${text}</div>`;\n      }\n\n      // 提取纯文本内容\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = html;\n      const plainText = tempDiv.textContent || tempDiv.innerText || '';\n\n      // 分割文本为句子\n      const sentences = splitIntoSentences(plainText);\n\n      // 根据当前阅读模式处理内容\n      let processedContent = '';\n      switch (readingMode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlightToSentences(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          // 使用特定的闪读分割函数重新处理文本\n          const segments = splitIntoFlashReadingSegments(plainText);\n          processedContent = createFlashReadingContentFromSentences(segments);\n\n          // 初始化闪读模式\n          setTimeout(() => {\n            initializeFlashReading();\n          }, 100);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n\n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n\n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('Markdown处理错误:', error);\n      setContent('<div class=\"error-message\">Markdown文件处理失败</div>');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async e => {\n    const uploadedFile = e.target.files[0];\n    if (!uploadedFile) return;\n    setLoading(true);\n    setFileName(uploadedFile.name);\n    try {\n      if (uploadedFile.type === 'application/pdf') {\n        await handlePdfFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/plain' || uploadedFile.name.endsWith('.txt')) {\n        await handleTxtFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/markdown' || uploadedFile.name.endsWith('.md')) {\n        await handleMarkdownFile(uploadedFile);\n      } else {\n        setContent('<div class=\"error-message\">不支持的文件格式</div>');\n      }\n    } catch (error) {\n      console.error('处理文件时出错:', error);\n      setContent('<div class=\"error-message\">处理文件时出错</div>');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = container => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n\n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n\n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n\n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width / 2,\n            // 水平中心\n            y: rect.bottom,\n            // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n\n    // 过滤无效位置并排序\n    return positions.filter(p => p.char.trim() !== '').sort((a, b) => {\n      // 先按行排序，同行按列排序\n      const yDiff = a.y - b.y;\n      if (Math.abs(yDiff) > 5) {\n        // 5px阈值判断是否同一行\n        return yDiff;\n      }\n      return a.x - b.x;\n    });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n\n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - containerVisibleHeight / 2;\n\n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - window.innerHeight / 2;\n\n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n\n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n\n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length ||\n      // 已到末尾\n      positions[nextIndex].char.trim() === '' ||\n      // 下一个是空白\n      positions[nextIndex].y > charPosition.y + 5) {\n        // 下一个在新行\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n\n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n\n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || current.y > prev.y + 5) {\n        // 有明显换行\n        break;\n      }\n      start--;\n    }\n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n\n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n\n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (window.autoReader.charPositions.length === 0) {\n      if (window.currentPage < window.totalPages) {\n        window.changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 重置索引到开头\n    window.autoReader.currentIndex = 0;\n\n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n\n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n\n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none';\n      highlight.style.zIndex = '998';\n      contentContainer.appendChild(highlight);\n    }\n\n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n\n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20;\n\n    // 尝试获取实际行高\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(window.autoReader.charPositions[i].y - window.autoReader.charPositions[i - 1].y);\n        if (yDiff > 5) {\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n\n    // 记录上次滚动的位置\n    let lastScrolledY = -1;\n    const scrollSafeZone = lineHeight * 2.5;\n\n    // 设置字符大小的估计值\n    let charWidth = 20;\n    let charHeight = lineHeight * 0.8;\n\n    // 尝试估计字符宽度\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        if (window.autoReader.charPositions[i].x !== window.autoReader.charPositions[i - 1].x) {\n          const xDiff = Math.abs(window.autoReader.charPositions[i].x - window.autoReader.charPositions[i - 1].x);\n          if (xDiff > 0 && xDiff < 50) {\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    window.autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (window.autoReader.currentIndex < window.autoReader.charPositions.length && ((_window$autoReader$ch = window.autoReader.charPositions[window.autoReader.currentIndex]) === null || _window$autoReader$ch === void 0 ? void 0 : _window$autoReader$ch.char.trim()) === '') {\n        var _window$autoReader$ch;\n        window.autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (window.autoReader.currentIndex >= window.autoReader.charPositions.length) {\n        if (window.currentPage < window.totalPages) {\n          window.changePage(1);\n          clearInterval(window.autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n      const pos = window.autoReader.charPositions[window.autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      if (cursor && highlight) {\n        const contentRect = contentContainer.getBoundingClientRect();\n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        highlight.style.left = `${relativeX - charWidth / 2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n\n        // 滚动处理\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          if (isContainerScrollable) {\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = relativeY;\n            }\n          } else {\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      window.autoReader.currentIndex++;\n    }, window.autoReader.speed);\n\n    // 在停止自动阅读时清除所有高亮\n    window.autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n\n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n\n      // 调用清理函数\n      if (window.autoReader.cleanup) {\n        window.autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n\n    // 重置翻页状态\n    window.autoReader.isPageChanging = false;\n\n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n\n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n\n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n\n    // 收集字符位置\n    window.autoReader.charPositions = getAllCharacterPositions(content);\n\n    // 如果当前页没有内容，尝试翻页\n    if (window.autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !window.autoReader.isPageChanging) {\n        window.autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async e => {\n    const newMode = e.target.value;\n    const prevMode = readingMode;\n    console.log(`切换阅读模式: 从 ${prevMode} 到 ${newMode}`);\n\n    // 更新状态\n    setReadingMode(newMode);\n\n    // 如果有PDF文档和当前页，重新处理当前页内容\n    if (pdfDocument && currentPage > 0) {\n      try {\n        console.log('重新处理当前页面内容');\n        const page = await pdfDocument.getPage(currentPage);\n\n        // 不使用任何额外处理，直接使用最原始的方式重新加载页面\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n\n        // 根据当前模式设置内容\n        if (newMode === 'static') {\n          // 静态高亮模式 - 使用改进的句子处理\n          const html = formatSimpleHighlightedText(sentences);\n          console.log('设置静态高亮内容');\n          setContent(html);\n\n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n            if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n\n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n\n                // 验证文字颜色\n                if (styles.color === 'rgb(51, 51, 51)' || styles.color === '#333333') {\n                  console.log('文字颜色正确应用');\n                } else {\n                  console.warn('文字颜色可能未正确应用:', styles.color);\n                }\n              }\n            } else {\n              console.error('未找到静态高亮模式内容区域');\n            }\n          }, 200);\n        } else if (newMode === 'flash-reading') {\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n\n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n\n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n        } else {\n          // 其他模式保持不变\n          const handler = getContentHandlerForMode(newMode);\n          const processedContent = handler(sentences);\n          setContent(processedContent);\n        }\n      } catch (error) {\n        console.error('应用阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 首先确保移除鼠标跟随监听器\n    removeMouseFollowListeners();\n\n    // 清理节奏阅读器\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n\n    // 清理闪读器\n    if (window.flashReader) {\n      window.flashReader.cleanup();\n    }\n\n    // 清理舒适3D效果\n    const comfortable3DElements = document.querySelectorAll('.emboss-3d-text, .float-3d-text, .gradient-3d-text');\n    comfortable3DElements.forEach(el => el.remove());\n\n    // 清理闪读模式元素\n    const flashReadingElements = document.querySelectorAll('.flash-reading-container, .flash-reading-display, .flash-reading-controls');\n    flashReadingElements.forEach(el => el.remove());\n\n    // 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll('.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line, .rhythm-char');\n    highlights.forEach(el => {\n      if (el.parentNode) el.parentNode.removeChild(el);\n    });\n\n    // 彻底替换内容区域以移除所有事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      var _contentArea$querySel;\n      // 先保存底部翻页控件\n      const bottomPagination = contentArea.querySelector('.bottom-pagination');\n\n      // 深度克隆内容，但不克隆事件监听器\n      const contentHTML = ((_contentArea$querySel = contentArea.querySelector('div[dangerouslySetInnerHTML]')) === null || _contentArea$querySel === void 0 ? void 0 : _contentArea$querySel.innerHTML) || '';\n      const newContentArea = contentArea.cloneNode(false);\n\n      // 创建新的内容容器\n      const newContentContainer = document.createElement('div');\n      newContentContainer.innerHTML = contentHTML;\n      newContentArea.appendChild(newContentContainer);\n\n      // 如果有底部翻页控件，重新添加\n      if (bottomPagination && totalPages > 0) {\n        const newBottomPagination = bottomPagination.cloneNode(true);\n        // 重新绑定事件\n        const prevBtn = newBottomPagination.querySelector('.page-btn:first-child');\n        const nextBtn = newBottomPagination.querySelector('.page-btn:last-child');\n        if (prevBtn) prevBtn.onclick = () => changePage(-1);\n        if (nextBtn) nextBtn.onclick = () => changePage(1);\n        newContentArea.appendChild(newBottomPagination);\n      }\n      if (contentArea.parentNode) {\n        contentArea.parentNode.replaceChild(newContentArea, contentArea);\n      }\n    }\n\n    // 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 移除所有特殊标记和样式\n      paragraph.removeAttribute('data-follow');\n      paragraph.removeAttribute('style');\n\n      // 清理特殊span标签\n      paragraph.innerHTML = paragraph.innerHTML.replace(/<span class=\"text-line\"[^>]*>/g, '').replace(/<span class=\"rhythm-char\"[^>]*>/g, '').replace(/<span class=\"line-highlight[^\"]*\"[^>]*>/g, '').replace(/<span class=\"mouse-highlight[^\"]*\"[^>]*>/g, '').replace(/<\\/span>/g, '');\n    });\n\n    // 移除特殊UI元素\n    const elementsToRemove = ['rhythm-speed-slider', 'rhythm-notification'];\n    elementsToRemove.forEach(id => {\n      const element = document.getElementById(id);\n      if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    });\n\n    // 移除暗色背景\n    document.body.classList.remove('dark-background');\n\n    // 清理闪读模式\n    if (window.flashReader && typeof window.flashReader.cleanup === 'function') {\n      window.flashReader.cleanup();\n    }\n  };\n  const handleAutoScroll = () => {\n    window.autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = e => {\n    if (readingMode !== 'follow-mouse') return;\n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    const rect = contentArea.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    clearAllHighlights();\n    const paragraphs = contentArea.querySelectorAll('p');\n    paragraphs.forEach(paragraph => {\n      const paragraphRect = paragraph.getBoundingClientRect();\n      const paragraphX = paragraphRect.left - rect.left;\n      const paragraphY = paragraphRect.top - rect.top;\n      if (y >= paragraphY && y <= paragraphY + paragraphRect.height) {\n        const words = paragraph.querySelectorAll('span');\n        words.forEach(word => {\n          const wordRect = word.getBoundingClientRect();\n          const wordX = wordRect.left - rect.left;\n          if (x >= wordX && x <= wordX + wordRect.width) {\n            word.classList.add('highlight');\n          }\n        });\n      }\n    });\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 专门用于移除鼠标跟随事件的函数\n  const removeMouseFollowListeners = () => {\n    // 移除记录的所有监听器\n    if (window.eventTracker && window.eventTracker.mouseFollowHandlers) {\n      window.eventTracker.mouseFollowHandlers.forEach(({\n        element,\n        event,\n        handler\n      }) => {\n        if (element && element.removeEventListener) {\n          element.removeEventListener(event, handler);\n        }\n      });\n      window.eventTracker.mouseFollowHandlers = [];\n    }\n\n    // 为安全起见，尝试从document和内容区域移除通用处理函数\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    }\n    document.removeEventListener('mousemove', handleMouseMove);\n\n    // 清除所有当前高亮\n    clearAllHighlights();\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n\n    // 添加底部翻页控件样式\n    const bottomPaginationStyles = document.createElement('style');\n    bottomPaginationStyles.id = 'bottom-pagination-styles';\n    bottomPaginationStyles.innerHTML = `\n      .bottom-pagination {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        padding: 20px 0 30px;\n        margin-top: 30px;\n        width: 100%;\n        background-color: transparent;\n        border-radius: 5px;\n      }\n\n      .bottom-pagination .page-btn {\n        background-color: #6c5ce7;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        padding: 8px 15px;\n        margin: 0 10px;\n        cursor: pointer;\n        font-size: 14px;\n        transition: background-color 0.2s ease;\n      }\n\n      .bottom-pagination .page-btn:hover {\n        background-color: #4834d4;\n      }\n\n      .bottom-pagination .page-btn:disabled {\n        background-color: #aaa;\n        cursor: not-allowed;\n      }\n\n      .bottom-pagination .page-info {\n        font-size: 14px;\n        margin: 0 10px;\n      }\n    `;\n    document.head.appendChild(bottomPaginationStyles);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n    addComfortable3DStyles();\n\n    // 添加鼠标跟随模式的样式\n    const mouseFollowStyle = document.createElement('style');\n    mouseFollowStyle.id = 'intelligent-mouse-follow-style';\n    mouseFollowStyle.textContent = `\n      /* 基础样式 */\n      .mouse-follow-content {\n        position: relative;\n        line-height: 1.8;\n      }\n      \n      .mouse-follow-content .follow-line {\n        position: relative;\n        padding: 8px 16px;\n        margin: 4px 0;\n        border-radius: 6px;\n        transition: all 0.2s ease;\n        display: block;\n        min-height: 1.8em;\n        white-space: normal;\n        word-wrap: break-word;\n        text-indent: 2em;\n      }\n      \n      /* 高亮状态 */\n      .follow-line.highlighted {\n        background-color: #ffa500 !important; /* 橙色背景 */\n        color: #ffffff !important; /* 白色文字 */\n        font-weight: bold !important;\n        font-size: 1.1em; /* 稍微调小字号 */\n        transform: translateX(5px);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n      }\n      \n      \n      /* 平滑过渡效果 */\n      .follow-line {\n        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n      }\n      \n      /* 行间距优化 */\n      .mouse-follow-content .follow-line + .follow-line {\n        margin-top: 4px;\n      }\n      \n      /* 添加行指示器 */\n      .follow-line::before {\n        content: '';\n        position: absolute;\n        left: 0;\n        top: 0;\n        bottom: 0;\n        width: 3px;\n        background: linear-gradient(to bottom, transparent, rgba(255, 255, 255, 0.5), transparent);\n        opacity: 0;\n        transition: opacity 0.2s ease;\n      }\n      \n      .follow-line.highlighted::before {\n        opacity: 1;\n      }\n    `;\n    document.head.appendChild(mouseFollowStyle);\n\n    // 创建深色背景下的ADHD友好高亮样式\n    const style = document.createElement('style');\n    style.id = 'adhd-friendly-highlight-style';\n    style.textContent = `\n      /* ADHD友好的高亮样式 - 适配深色背景 */\n      .adhd-highlight-mode {\n        line-height: 1.8;\n        padding: 20px;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph {\n        margin-bottom: 1.2em;\n        background-color: transparent;\n        padding: 12px 15px;\n        border-radius: 6px;\n        border-left: 3px solid rgba(255, 255, 255, 0.2);\n        transition: all 0.3s ease;\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover {\n        transform: translateX(5px);\n        border-left-color: rgba(255, 255, 255, 0.4);\n      }\n      \n      /* 加粗样式 - 白色加粗 */\n      .adhd-bold {\n        font-weight: 700;\n        color: #ffffff;\n        letter-spacing: 0.02em;\n        font-size: 1.1em;\n        text-shadow: 0 0 1px rgba(255, 255, 255, 0.2);\n      }\n      \n      /* 彩色样式 - 使用鲜明的蓝色 */\n      .adhd-colored {\n        color: #6c5ce7;\n        font-weight: 500;\n        font-size: 1.05em;\n        text-shadow: 0 0 1px rgba(108, 92, 231, 0.2);\n      }\n      \n      /* 正常样式 - 普通白色 */\n      .adhd-normal {\n        color: rgba(255, 255, 255, 0.8);\n        font-size: 1em;\n      }\n\n      /* 添加平滑过渡效果 */\n      .adhd-bold, .adhd-colored, .adhd-normal {\n        transition: all 0.2s ease;\n      }\n\n      /* 悬停效果 */\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-bold {\n        color: #ffffff;\n        text-shadow: 0 0 2px rgba(255, 255, 255, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-colored {\n        color: #8a7ff7;\n        text-shadow: 0 0 2px rgba(138, 127, 247, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-normal {\n        color: rgba(255, 255, 255, 0.9);\n      }\n\n      /* 添加段落间距的视觉引导 */\n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph {\n        margin-top: 1.5em;\n        position: relative;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph::before {\n        content: '';\n        position: absolute;\n        top: -0.75em;\n        left: 0;\n        right: 0;\n        height: 1px;\n        background: linear-gradient(\n          to right,\n          transparent,\n          rgba(255, 255, 255, 0.1),\n          transparent\n        );\n      }\n    `;\n    document.head.appendChild(style);\n\n    // 添加基础鼠标跟随样式\n    const mouseFollowPageStyle = document.createElement('style');\n    mouseFollowPageStyle.id = 'basic-mouse-follow-style';\n    mouseFollowPageStyle.textContent = `\n      .follow-line {\n        padding: 8px 12px;\n        margin: 4px 0;\n        border-radius: 4px;\n        transition: background-color 0.2s ease;\n      }\n      .follow-line.highlighted {\n        background-color: #ffa500;\n        color: #000080;\n        font-weight: bold;\n      }\n    `;\n    document.head.appendChild(mouseFollowPageStyle);\n    return () => {\n      const existingStyle = document.getElementById('adhd-friendly-highlight-style');\n      if (existingStyle) existingStyle.remove();\n      const existingMouseFollowStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (existingMouseFollowStyle) existingMouseFollowStyle.remove();\n      const existingBasicMouseFollowStyle = document.getElementById('basic-mouse-follow-style');\n      if (existingBasicMouseFollowStyle) existingBasicMouseFollowStyle.remove();\n      mouseFollowPageStyle.remove();\n    };\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 清理旧监听器\n    removeMouseFollowListeners();\n\n    // 添加新监听器\n    setTimeout(() => {\n      addMouseFollowListeners();\n\n      // 添加调试辅助 - 显示行边界\n      const contentArea = document.querySelector('.mouse-follow-content');\n      if (contentArea) {\n        const lines = contentArea.querySelectorAll('.follow-line');\n        console.log(`初始化鼠标跟随模式，共 ${lines.length} 行`);\n\n        // 可选：启用可视化调试\n        if (false) {\n          // 设置为true可以启用可视化调试\n          lines.forEach((line, index) => {\n            line.style.border = '1px dashed #888';\n            line.setAttribute('title', `行 ${index + 1}`);\n          });\n        }\n\n        // 验证行高亮效果\n        const firstLine = lines[0];\n        if (firstLine) {\n          console.log('行样式验证:', {\n            padding: window.getComputedStyle(firstLine).padding,\n            margin: window.getComputedStyle(firstLine).margin,\n            fontSize: window.getComputedStyle(firstLine).fontSize,\n            lineHeight: window.getComputedStyle(firstLine).lineHeight\n          });\n        }\n      }\n    }, 100);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = delta => {\n    window.autoReader.speed = Math.max(100, window.autoReader.speed + delta);\n    if (window.autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async delta => {\n    console.log(`翻页请求: 当前页 ${currentPage}, 增量 ${delta}`);\n    const newPage = currentPage + delta;\n    if (newPage < 1 || newPage > totalPages) {\n      console.log('无效页码，不执行翻页');\n      return;\n    }\n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n    const wasFlashReading = readingMode === 'flash-reading' && window.flashReader && window.flashReader.isPlaying;\n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    if (wasFlashReading && window.flashReader) {\n      window.flashReader.cleanup();\n    }\n\n    // 更新页码\n    setCurrentPage(newPage);\n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n\n      // 检查是否为目录页\n      const textContent = await page.getTextContent();\n      const isToc = await detectIfTocPage(textContent);\n      setIsTableOfContents(isToc);\n      if (isToc) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, page.getViewport({\n          scale: 1.0\n        }));\n      } else {\n        // 处理正文页面 - 根据当前阅读模式处理\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n\n        // 根据当前模式设置内容\n        if (readingMode === 'static') {\n          console.log('翻页后应用静态高亮模式');\n          const processedContent = formatSimpleHighlightedText(sentences);\n          setContent(processedContent);\n\n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n            if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n\n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n              }\n            }\n          }, 200);\n        } else if (readingMode === 'flash-reading') {\n          // 如果是闪读模式，则需要特殊处理\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n\n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n\n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n          return; // 已处理，直接返回\n        } else {\n          // 其他模式使用原处理函数\n          await processContentPage(page, readingMode);\n        }\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n    } catch (error) {\n      console.error('页面切换错误:', error);\n    }\n  };\n\n  // ADHD友好的静态高亮处理函数\n  const formatSimpleHighlightedText = sentences => {\n    console.log('开始处理ADHD友好的静态高亮文本，句子数量:', sentences.length);\n    let html = '<div class=\"pdf-content adhd-highlight-mode\">';\n    sentences.forEach((sentence, sentenceIndex) => {\n      if (!sentence || sentence.trim() === '') {\n        console.log(`跳过空句子，索引: ${sentenceIndex}`);\n        return;\n      }\n\n      // 清理和规范化文本\n      const cleanText = sentence.trim().replace(/\\s+/g, ' ') // 规范化空白字符\n      .replace(/&/g, '&amp;') // 转义特殊字符\n      .replace(/</g, '&lt;').replace(/>/g, '&gt;');\n\n      // 处理句子中的单词，为它们添加不同样式\n      const words = cleanText.split(/(\\s+)/);\n      let formattedSentence = '';\n      words.forEach((word, wordIndex) => {\n        if (word.trim() === '') {\n          // 保留空格\n          formattedSentence += word;\n        } else {\n          // 根据位置应用不同的样式类\n          // 三种交替样式: 加粗、彩色、正常\n          const styleClass = wordIndex % 3 === 0 ? 'adhd-bold' : wordIndex % 3 === 1 ? 'adhd-colored' : 'adhd-normal';\n          formattedSentence += `<span class=\"${styleClass}\">${word}</span>`;\n        }\n      });\n      console.log(`处理句子 ${sentenceIndex + 1}:`, cleanText.substring(0, 50) + '...');\n      html += `<p class=\"pdf-paragraph\">${formattedSentence}</p>`;\n    });\n    html += '</div>';\n\n    // 调试输出\n    console.log('生成的ADHD友好静态高亮HTML:', html.substring(0, 200) + '...');\n    return html;\n  };\n\n  // 根据阅读模式获取相应的内容处理函数\n  const getContentHandlerForMode = mode => {\n    switch (mode) {\n      case 'normal':\n        return formatSentencesToHtml;\n      case 'static':\n        return applyStaticHighlightToSentences;\n      case 'follow-mouse':\n        return formatSentencesForMouseFollow;\n      case 'comfortable-3d':\n        return applyComfortable3dEffectToSentences;\n      case 'flash-reading':\n        return sentences => {\n          // 闪读模式使用专门的分割函数重新处理文本\n          return createFlashReadingContentFromSentences(sentences);\n        };\n      default:\n        return formatSentencesToHtml;\n    }\n  };\n\n  // 监听阅读模式和当前页面的变化\n  useEffect(() => {\n    if (readingMode === 'mouse-follow' && currentPage && !isTableOfContents) {\n      // 移除之前的样式\n      const oldStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (oldStyle) {\n        oldStyle.remove();\n      }\n\n      // 添加基础鼠标跟随样式\n      const followModeStyle = document.createElement('style');\n      followModeStyle.id = 'basic-mouse-follow-style';\n      followModeStyle.textContent = `\n        .follow-line {\n          padding: 8px 12px;\n          margin: 4px 0;\n          border-radius: 4px;\n          transition: background-color 0.2s ease;\n        }\n        .follow-line.highlighted {\n          background-color: #ffa500;\n          color: #000080;\n          font-weight: bold;\n        }\n      `;\n      document.head.appendChild(followModeStyle);\n\n      // 处理当前页面内容\n      const page = pdfDocument.getPage(currentPage);\n      const textContent = page.getTextContent();\n      const sentences = textContent.items.map(item => item.str).join(' ').split(/[。！？]/).filter(s => s.trim());\n\n      // 应用基础鼠标跟随格式化\n      setContent(formatSentencesForMouseFollow(sentences));\n\n      // 添加鼠标跟随监听器\n      setTimeout(() => {\n        addMouseFollowListeners();\n      }, 100);\n      return () => {\n        followModeStyle.remove();\n      };\n    }\n  }, [readingMode, currentPage, pdfDocument]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2974,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2973,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reading-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u9605\\u8BFB\\u6A21\\u5F0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2978,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"reading-mode-select\",\n          value: readingMode,\n          onChange: handleReadingModeChange,\n          className: \"mode-select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"normal\",\n            children: \"\\u666E\\u901A\\u6A21\\u5F0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2985,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"static\",\n            children: \"\\u9759\\u6001\\u9AD8\\u4EAE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2986,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"follow-mouse\",\n            children: \"\\u9F20\\u6807\\u8DDF\\u968F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2987,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"rhythm\",\n            children: \"\\u8282\\u594F\\u9605\\u8BFB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2988,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"flash-reading\",\n            children: \"\\u95EA\\u8BFB\\u6A21\\u5F0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2989,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2979,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2977,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".pdf,.txt,.md\",\n          hidden: true,\n          id: \"file-upload\",\n          onChange: handleFileUpload,\n          ref: fileRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2994,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"upload-btn\",\n          onClick: () => fileRef.current.click(),\n          children: \"\\u4E0A\\u4F20\\u6587\\u4EF6 (.pdf/.txt/.md)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3002,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2993,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2972,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toolbar\",\n        children: fileName && /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"filename\",\n          children: fileName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3013,\n          columnNumber: 24\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3012,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-content\",\n        ref: readerContainerRef,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: content\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3018,\n          columnNumber: 13\n        }, this), totalPages > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bottom-pagination\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => changePage(-1),\n            disabled: currentPage <= 1,\n            className: \"page-btn\",\n            children: \"\\u4E0A\\u4E00\\u9875\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3022,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"page-info\",\n            children: [\"\\u7B2C \", currentPage, \" / \", totalPages, \" \\u9875\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 3029,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => changePage(1),\n            disabled: currentPage >= totalPages,\n            className: \"page-btn\",\n            children: \"\\u4E0B\\u4E00\\u9875\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3032,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 3021,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3017,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 3011,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 2971,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"x5N0itQI0gqtA84jt63lPsdPeRI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","pdfjsLib","pdfjsViewer","marked","pdfjs","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","window","currentPage","totalPages","changePage","eventTracker","mouseFollowHandlers","autoReader","charPositions","intervalId","currentIndex","speed","pageContainer","isScrolling","isPageChanging","cleanup","rhythmReaderGlobal","active","rhythmReader","readIndices","Set","charElements","startRhythmReading","console","log","stopRhythmReading","initializeTextNodes","alert","clear","addSpeedSlider","updateTextColors","scrollToCurrentChar","setInterval","moveToNextChar","contentContainer","document","querySelector","textNodes","findTextNodes","length","error","forEach","node","text","nodeValue","trim","fragment","createDocumentFragment","parentStyles","getComputedStyle","parentNode","i","char","span","createElement","textContent","className","dataset","rhythmIndex","whitespace","style","display","margin","padding","border","backgroundColor","appendChild","push","replaceChild","element","childNodes","nodeType","Node","TEXT_NODE","ELEMENT_NODE","id","index","color","fontWeight","has","background","add","setTimeout","rect","getBoundingClientRect","lineHeight","parseInt","Math","max","height","isContainerScrollable","scrollHeight","clientHeight","includes","overflowY","containerRect","relativeTop","top","scrollTop","visibleTop","visibleBottom","scrollBy","behavior","viewportTop","scrollY","viewportBottom","innerHeight","absoluteTop","clearInterval","restoreOriginalText","slider","getElementById","remove","charSpans","querySelectorAll","parentNodeMap","Map","parent","set","get","spans","sort","a","b","indexA","indexB","groups","currentGroup","prevIndex","previousSibling","group","map","join","textNode","createTextNode","removeChild","container","position","bottom","left","transform","borderRadius","boxShadow","zIndex","alignItems","label","marginRight","input","type","min","step","value","width","valueDisplay","marginLeft","minWidth","addEventListener","newSpeed","body","addRhythmReadingButton","button","right","cursor","fontSize","App","_s","pages","setPages","setCurrentPage","setTotalPages","fileName","setFileName","loading","setLoading","fileRef","file","setFile","pdfInstance","setPdfInstance","extractedTextPages","setExtractedTextPages","readingMode","setReadingMode","posMode","setPosMode","markdownContent","setMarkdownContent","readerContainerRef","content","setContent","pdfDocument","setPdfDocument","isTableOfContents","setIsTableOfContents","applyDarkBackground","classList","head","restoreDarkBackground","addNakedEye3DStyles","addComfortable3DStyles","addFlashReadingStyles","initializeFlashReading","sentences","flashReadingSentences","Array","isArray","speedSlider","speedValue","playButton","pauseButton","stopButton","prevButton","nextButton","progress","cover","flashReader","interval","isPlaying","start","disabled","displayCurrentSentence","stop","currentSentence","displayRect","pause","updateSpeed","localStorage","setItem","prevSentence","nextSentence","e","target","savedSpeed","getItem","initialSpeed","createFlashReadingContent","formatTextToHtml","paragraphs","split","html","paragraph","formatTextForMouseFollow","words","processedParagraph","word","applyStaticHighlight","lastColor","random","applyNakedEye3dEffect","applyComfortable3dEffect","effectTypes","effectClass","floor","initializeNakedEye3D","textElements","delay","animationDelay","initializeRhythmReading","addMouseFollowListeners","contentArea","lastHighlightedLine","mouseMoveHandler","mouseY","clientY","allLines","foundLine","minDistance","Infinity","line","lineCenter","distance","abs","substring","mouseLeaveHandler","event","handler","initializeMouseFollow","handlePdfFile","fileURL","URL","createObjectURL","loadingTask","getDocument","pdf","promise","numPages","extractAndProcessPage","pageNum","page","getPage","getTextContent","viewport","getViewport","scale","detectIfTocPage","processTocPage","processContentPage","textItems","items","fullText","item","str","hasTocKeywords","test","hasPageNumberPatterns","shortLinesCount","linesWithNumbersCount","lineMap","yKey","round","lines","values","lineText","shortLineRatio","numberLineRatio","htmlContent","x","y","sqrt","fontName","toLowerCase","spacedText","getTextNodeAtPosition","nodes","range","createRange","selectNodeContents","rects","getClientRects","j","found","processTextWithHighlight","result","mode","extractedText","replace","splitIntoSentences","processedContent","formatSentencesToHtml","formatSimpleHighlightedText","formatSentencesForMouseFollow","applyComfortable3dEffectToSentences","createFlashReadingContentFromSentences","firstPara","styles","fontFamily","sentenceRegex","lastIndex","match","exec","endIndex","sentence","lastSentence","splitIntoFlashReadingSegments","segments","segment","lastSegment","applyStaticHighlightToSentences","processedSentence","handleTxtFile","name","handleMarkdownFile","parse","p","parseError","tempDiv","innerHTML","plainText","innerText","handleFileUpload","uploadedFile","files","endsWith","getAllCharacterPositions","walker","createTreeWalker","NodeFilter","SHOW_TEXT","positions","nextNode","currentNode","setStart","setEnd","warn","filter","yDiff","scrollElementToCenter","elementY","targetScrollTop","containerVisibleHeight","scrollTo","absoluteElementY","createReaderCursor","cssText","isSentenceEnd","charPosition","sentenceEndMarks","nextIndex","findSentenceStart","prev","current","isInVisibleArea","threshold","topThreshold","bottomThreshold","startAutoReader","highlight","pointerEvents","lastScrolledY","scrollSafeZone","charWidth","charHeight","xDiff","_window$autoReader$ch","stopAutoReader","pos","contentRect","relativeX","relativeY","isInRecentlyScrolledArea","needsScroll","scrollAmount","absoluteY","initializeAutoReader","handleReadingModeChange","newMode","prevMode","getContentHandlerForMode","cleanupDOM","removeMouseFollowListeners","comfortable3DElements","el","flashReadingElements","highlights","_contentArea$querySel","bottomPagination","contentHTML","newContentArea","cloneNode","newContentContainer","newBottomPagination","prevBtn","nextBtn","onclick","removeAttribute","elementsToRemove","handleAutoScroll","updateCursorPosition","force","handleMouseMove","clientX","clearAllHighlights","paragraphRect","paragraphX","paragraphY","wordRect","wordX","removeEventListener","addAutoReaderStyles","bottomPaginationStyles","mouseFollowStyle","mouseFollowPageStyle","existingStyle","existingMouseFollowStyle","existingBasicMouseFollowStyle","setAttribute","firstLine","adjustSpeed","delta","newPage","wasRhythmReading","wasFlashReading","isToc","sentenceIndex","cleanText","formattedSentence","wordIndex","styleClass","oldStyle","followModeStyle","s","children","_jsxFileName","lineNumber","columnNumber","onChange","accept","hidden","ref","onClick","click","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["D:/adhd-read-helper/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 添加全局事件跟踪对象\nwindow.eventTracker = window.eventTracker || {\n  mouseFollowHandlers: []\n};\n\n// 自动阅读器全局对象\nwindow.autoReader = {\n  charPositions: [],\n  intervalId: null,\n  currentIndex: 0,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false,\n  cleanup: null\n};\n\n// 添加新的节奏阅读模式代码\n// 全局变量，确保在页面切换后仍然保持状态\nwindow.rhythmReaderGlobal = window.rhythmReaderGlobal || {\n  active: false,\n  speed: 300\n};\n\n// 节奏阅读模式\nconst rhythmReader = {\n  active: false,\n  intervalId: null,\n  speed: 300,\n  currentIndex: 0,\n  readIndices: new Set(),\n  charElements: [] // 存储字符元素的引用\n};\n\n// 启动节奏阅读\nfunction startRhythmReading() {\n  console.log(\"启动节奏阅读模式\");\n  \n  // 停止已有的阅读活动\n  stopRhythmReading();\n  \n  // 初始化文本（将文本节点拆分成单个字符的span）\n  if (!initializeTextNodes()) {\n    alert(\"无法初始化文本节点\");\n    return;\n  }\n  \n  // 设置为活动状态\n  rhythmReader.active = true;\n  rhythmReader.currentIndex = 0;\n  rhythmReader.readIndices.clear();\n  \n  // 添加速度滑块\n  addSpeedSlider();\n  \n  // 更新颜色\n  updateTextColors();\n  \n  // 滚动到开始位置\n  scrollToCurrentChar();\n  \n  // 设置阅读间隔\n  rhythmReader.intervalId = setInterval(moveToNextChar, rhythmReader.speed);\n}\n\n// 初始化文本节点（将文本分解为单独的字符span）\nfunction initializeTextNodes() {\n  // 重置字符元素数组\n  rhythmReader.charElements = [];\n  \n  // 获取内容容器\n  const contentContainer = document.querySelector('.page-content');\n  if (!contentContainer) return false;\n  \n  // 查找所有文本节点并处理\n  const textNodes = [];\n  findTextNodes(contentContainer, textNodes);\n  \n  if (textNodes.length === 0) {\n    console.error(\"未找到文本节点\");\n    return false;\n  }\n  \n  console.log(`找到 ${textNodes.length} 个文本节点`);\n  \n  // 为每个文本节点创建字符span\n  textNodes.forEach(node => {\n    const text = node.nodeValue;\n    if (!text || text.trim() === '') return;\n    \n    // 创建文档片段来存放字符span\n    const fragment = document.createDocumentFragment();\n    \n    // 获取父元素计算样式以保持一致性\n    const parentStyles = window.getComputedStyle(node.parentNode);\n    \n    // 为每个字符创建span\n    for (let i = 0; i < text.length; i++) {\n      const char = text[i];\n      const span = document.createElement('span');\n      span.textContent = char;\n      span.className = 'rhythm-char';\n      span.dataset.rhythmIndex = rhythmReader.charElements.length;\n      \n      // 如果是空白字符，添加一个标志\n      if (char.trim() === '') {\n        span.dataset.whitespace = 'true';\n      }\n      \n      // 保持原始样式，重要：不设置任何背景\n      span.style.display = 'inline';\n      span.style.margin = '0';\n      span.style.padding = '0';\n      span.style.border = 'none';\n      span.style.backgroundColor = 'transparent';\n      \n      fragment.appendChild(span);\n      rhythmReader.charElements.push(span);\n    }\n    \n    // 替换原始节点\n    if (node.parentNode) {\n      node.parentNode.replaceChild(fragment, node);\n    }\n  });\n  \n  console.log(`总共创建了 ${rhythmReader.charElements.length} 个字符span`);\n  return rhythmReader.charElements.length > 0;\n}\n\n// 递归查找所有文本节点\nfunction findTextNodes(element, textNodes) {\n  // 处理子节点\n  for (let i = 0; i < element.childNodes.length; i++) {\n    const node = element.childNodes[i];\n    \n    // 如果是文本节点且有内容\n    if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() !== '') {\n      textNodes.push(node);\n    } \n    // 如果是元素节点，递归处理\n    else if (node.nodeType === Node.ELEMENT_NODE) {\n      // 跳过读者UI元素\n      if (node.id === 'rhythm-speed-slider' || \n          node.id === 'rhythm-reading-button' ||\n          node.className === 'rhythm-char') {\n        continue;\n      }\n      findTextNodes(node, textNodes);\n    }\n  }\n}\n\n// 更新文本颜色 - 修正后的颜色方案\nfunction updateTextColors() {\n  // 更新所有字符的颜色\n  rhythmReader.charElements.forEach((span, index) => {\n    // 确定颜色\n    let color;\n    let fontWeight = 'inherit';\n    \n    if (index === rhythmReader.currentIndex) {\n      color = '#00aa00'; // 当前阅读的字 - 绿色\n      fontWeight = 'bold';\n    } else if (index === rhythmReader.currentIndex + 1 || index === rhythmReader.currentIndex + 2) {\n      color = '#aaaaaa'; // 接下来两个字 - 淡灰色\n    } else if (rhythmReader.readIndices.has(index)) {\n      color = '#ffffff'; // 已读字符 - 白色（表示已读）\n    } else {\n      color = 'rgba(160, 160, 160, 0.25)'; // 未读字符 - 非常淡的灰色（可见但不明显）\n    }\n    \n    span.style.color = color;\n    span.style.fontWeight = fontWeight;\n    \n    // 确保没有背景\n    span.style.backgroundColor = 'transparent';\n    span.style.background = 'none';\n  });\n}\n\n// 移动到下一个字符\nfunction moveToNextChar() {\n  // 将当前字符标记为已读\n  rhythmReader.readIndices.add(rhythmReader.currentIndex);\n  \n  // 移动到下一个非空白字符\n  do {\n    rhythmReader.currentIndex++;\n    \n    // 检查是否到达末尾\n    if (rhythmReader.currentIndex >= rhythmReader.charElements.length) {\n      // 尝试使用App组件的changePage函数翻页\n      if (typeof window.changePage === 'function') {\n        console.log(\"节奏阅读：尝试翻到下一页\");\n        window.changePage(1);\n        stopRhythmReading();\n        \n        // 在页面加载完成后重新启动\n        setTimeout(startRhythmReading, 1000);\n      } else {\n        console.log(\"节奏阅读：已到达内容末尾\");\n        stopRhythmReading();\n      }\n      return;\n    }\n  } while (\n    rhythmReader.charElements[rhythmReader.currentIndex].dataset.whitespace === 'true'\n  );\n  \n  // 更新颜色\n  updateTextColors();\n  \n  // 滚动到当前字符\n  scrollToCurrentChar();\n}\n\n// 滚动到当前字符\nfunction scrollToCurrentChar() {\n  const span = rhythmReader.charElements[rhythmReader.currentIndex];\n  if (!span) return;\n  \n  const rect = span.getBoundingClientRect();\n  const contentContainer = document.querySelector('.page-content');\n  \n  // 估计行高\n  const lineHeight = parseInt(window.getComputedStyle(span).lineHeight) || \n                     Math.max(20, rect.height * 1.5);\n  \n  // 确定滚动容器\n  const isContainerScrollable = contentContainer && \n    contentContainer.scrollHeight > contentContainer.clientHeight &&\n    ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n  \n  if (isContainerScrollable) {\n    // 容器滚动\n    const containerRect = contentContainer.getBoundingClientRect();\n    const relativeTop = rect.top - containerRect.top + contentContainer.scrollTop;\n    \n    const visibleTop = contentContainer.scrollTop;\n    const visibleBottom = visibleTop + contentContainer.clientHeight;\n    \n    if (relativeTop < visibleTop + lineHeight || relativeTop > visibleBottom - lineHeight) {\n      contentContainer.scrollBy({\n        top: lineHeight * 2 * (relativeTop > visibleBottom - lineHeight ? 1 : -1),\n        behavior: 'smooth'\n      });\n    }\n  } else {\n    // 窗口滚动\n    const viewportTop = window.scrollY;\n    const viewportBottom = viewportTop + window.innerHeight;\n    const absoluteTop = rect.top + window.scrollY;\n    \n    if (absoluteTop < viewportTop + lineHeight || absoluteTop > viewportBottom - lineHeight) {\n      window.scrollBy({\n        top: lineHeight * 2 * (absoluteTop > viewportBottom - lineHeight ? 1 : -1),\n        behavior: 'smooth'\n      });\n    }\n  }\n}\n\n// 停止节奏阅读\nfunction stopRhythmReading() {\n  if (rhythmReader.intervalId) {\n    clearInterval(rhythmReader.intervalId);\n    rhythmReader.intervalId = null;\n  }\n  \n  rhythmReader.active = false;\n  \n  // 恢复原始文本样式\n  restoreOriginalText();\n  \n  // 移除速度滑块\n  const slider = document.getElementById('rhythm-speed-slider');\n  if (slider) slider.remove();\n}\n\n// 恢复原始文本\nfunction restoreOriginalText() {\n  // 获取所有已创建的字符span\n  const charSpans = document.querySelectorAll('.rhythm-char');\n  \n  // 按父节点分组\n  const parentNodeMap = new Map();\n  \n  charSpans.forEach(span => {\n    const parent = span.parentNode;\n    if (!parent) return;\n    \n    if (!parentNodeMap.has(parent)) {\n      parentNodeMap.set(parent, []);\n    }\n    parentNodeMap.get(parent).push(span);\n  });\n  \n  // 对每个父节点，将连续的字符span合并回文本节点\n  parentNodeMap.forEach((spans, parent) => {\n    // 排序spans确保顺序正确\n    spans.sort((a, b) => {\n      const indexA = parseInt(a.dataset.rhythmIndex || '0');\n      const indexB = parseInt(b.dataset.rhythmIndex || '0');\n      return indexA - indexB;\n    });\n    \n    // 根据连续性分组\n    const groups = [];\n    let currentGroup = [spans[0]];\n    \n    for (let i = 1; i < spans.length; i++) {\n      const prevIndex = parseInt(spans[i-1].dataset.rhythmIndex || '0');\n      const currentIndex = parseInt(spans[i].dataset.rhythmIndex || '0');\n      \n      if (currentIndex === prevIndex + 1 && spans[i].previousSibling === spans[i-1]) {\n        currentGroup.push(spans[i]);\n      } else {\n        groups.push(currentGroup);\n        currentGroup = [spans[i]];\n      }\n    }\n    groups.push(currentGroup);\n    \n    // 对每个连续组替换为文本节点\n    groups.forEach(group => {\n      if (group.length === 0) return;\n      \n      const text = group.map(span => span.textContent).join('');\n      const textNode = document.createTextNode(text);\n      \n      // 替换第一个span，然后移除其余的\n      parent.replaceChild(textNode, group[0]);\n      for (let i = 1; i < group.length; i++) {\n        if (group[i].parentNode === parent) {\n          parent.removeChild(group[i]);\n        }\n      }\n    });\n  });\n  \n  // 清除字符元素数组\n  rhythmReader.charElements = [];\n}\n\n// 添加速度滑块\nfunction addSpeedSlider() {\n  let slider = document.getElementById('rhythm-speed-slider');\n  if (slider) return;\n  \n  const container = document.createElement('div');\n  container.id = 'rhythm-speed-slider';\n  container.style.position = 'fixed';\n  container.style.bottom = '20px';\n  container.style.left = '50%';\n  container.style.transform = 'translateX(-50%)';\n  container.style.backgroundColor = 'white';\n  container.style.padding = '10px';\n  container.style.borderRadius = '5px';\n  container.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';\n  container.style.zIndex = '10000';\n  container.style.display = 'flex';\n  container.style.alignItems = 'center';\n  \n  const label = document.createElement('label');\n  label.textContent = '阅读速度: ';\n  label.style.marginRight = '8px';\n  container.appendChild(label);\n  \n  const input = document.createElement('input');\n  input.type = 'range';\n  input.min = '50';\n  input.max = '1000';\n  input.step = '50';\n  input.value = rhythmReader.speed;\n  input.style.width = '200px';\n  \n  const valueDisplay = document.createElement('span');\n  valueDisplay.textContent = `${rhythmReader.speed}ms`;\n  valueDisplay.style.marginLeft = '8px';\n  valueDisplay.style.minWidth = '60px';\n  \n  input.addEventListener('input', function() {\n    const newSpeed = parseInt(this.value);\n    rhythmReader.speed = newSpeed;\n    valueDisplay.textContent = `${newSpeed}ms`;\n    \n    if (rhythmReader.intervalId) {\n      clearInterval(rhythmReader.intervalId);\n      rhythmReader.intervalId = setInterval(moveToNextChar, newSpeed);\n    }\n  });\n  \n  container.appendChild(input);\n  container.appendChild(valueDisplay);\n  document.body.appendChild(container);\n}\n\n// 添加节奏阅读按钮\nfunction addRhythmReadingButton() {\n  if (document.getElementById('rhythm-reading-button')) {\n    document.getElementById('rhythm-reading-button').remove();\n  }\n  \n  const button = document.createElement('button');\n  button.id = 'rhythm-reading-button';\n  button.textContent = '节奏阅读';\n  button.style.position = 'fixed';\n  button.style.top = '20px';\n  button.style.right = '20px';\n  button.style.padding = '8px 16px';\n  button.style.backgroundColor = '#4CAF50';\n  button.style.color = 'white';\n  button.style.border = 'none';\n  button.style.borderRadius = '4px';\n  button.style.cursor = 'pointer';\n  button.style.zIndex = '10000';\n  button.style.fontSize = '16px';\n  \n  button.addEventListener('click', function() {\n    if (rhythmReader.active) {\n      stopRhythmReading();\n      this.textContent = '节奏阅读';\n      this.style.backgroundColor = '#4CAF50';\n    } else {\n      startRhythmReading();\n      this.textContent = '停止节奏阅读';\n      this.style.backgroundColor = '#f44336';\n    }\n  });\n  \n  document.body.appendChild(button);\n}\n\n// 执行函数，添加按钮\naddRhythmReadingButton();\n\nconst App = () => {\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  const [isTableOfContents, setIsTableOfContents] = useState(false);\n  \n  // 实现缺失的函数\n  // 应用深色背景\n  const applyDarkBackground = () => {\n    document.body.classList.add('dark-background');\n    \n    // 添加必要的CSS样式\n    if (!document.getElementById('dark-background-style')) {\n      const style = document.createElement('style');\n      style.id = 'dark-background-style';\n      style.textContent = `\n        .dark-background {\n          background-color: #000 !important;\n        }\n        .dark-background .sidebar {\n          background: linear-gradient(145deg, #4834d4, #341f9e) !important;\n        }\n        .dark-background .page-content {\n          background-color: #000 !important;\n        }\n        .dark-background .main-content {\n          background-color: #000 !important;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 恢复正常背景\n  const restoreDarkBackground = () => {\n    document.body.classList.remove('dark-background');\n  };\n  \n  // 添加裸眼3D样式\n  const addNakedEye3DStyles = () => {\n    if (!document.getElementById('naked-eye-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'naked-eye-3d-style';\n      style.textContent = `\n        .naked-eye-3d-container {\n          position: relative;\n          perspective: 800px;\n          width: 100%;\n        }\n        \n        .naked-eye-3d-text {\n          display: inline-block;\n          animation: float 3s ease-in-out infinite;\n          text-shadow: 0 0 5px rgba(255,255,255,0.3);\n          padding: 0 4px;\n          color: white;\n          filter: drop-shadow(0 0 5px rgba(120, 220, 255, 0.6));\n        }\n        \n        @keyframes float {\n          0% { transform: translateZ(0px); }\n          50% { transform: translateZ(20px); }\n          100% { transform: translateZ(0px); }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 添加舒适3D样式\n  const addComfortable3DStyles = () => {\n    if (!document.getElementById('comfortable-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'comfortable-3d-style';\n      style.textContent = `\n        .emboss-3d-text {\n          color: #fff;\n          text-shadow: \n            1px 1px 1px rgba(0,0,0,0.5),\n            -1px -1px 1px rgba(255,255,255,0.5);\n          letter-spacing: 1.5px;\n          font-weight: 500;\n        }\n        \n        .float-3d-text {\n          display: inline-block;\n          transform-style: preserve-3d;\n          transform: perspective(500px) translateZ(10px);\n          text-shadow: 0 2px 5px rgba(0,0,0,0.5);\n        }\n        \n        .gradient-3d-text {\n          display: inline-block;\n          background: linear-gradient(to bottom, #fff, #aaa);\n          -webkit-background-clip: text;\n          -webkit-text-fill-color: transparent;\n          text-shadow: 0 2px 4px rgba(0,0,0,0.3);\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 添加闪读样式\n  const addFlashReadingStyles = () => {\n    if (!document.getElementById('flash-reading-style')) {\n      const style = document.createElement('style');\n      style.id = 'flash-reading-style';\n      style.textContent = `\n        .flash-reading-container {\n          position: relative;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          z-index: 1000;\n          padding: 20px;\n        }\n        \n        .flash-reading-display-wrapper {\n          position: relative;\n          margin: 40px 0;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        \n        .flash-reading-display {\n          font-size: 36px;\n          font-weight: bold;\n          text-align: center;\n          color: white;\n          min-height: 80px;\n          max-width: 90%;\n          padding: 20px 40px;\n          position: relative; /* 允许绝对定位的覆盖层 */\n          z-index: 2;\n        }\n        \n        .flash-reading-cover {\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(128, 128, 128, 0.6); /* 灰色遮罩 */\n          border-radius: 8px;\n          z-index: 1; /* 确保在文本后面 */\n        }\n        \n        .flash-reading-controls {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          gap: 20px;\n          margin-bottom: 20px;\n          width: 100%;\n        }\n        \n        .flash-reading-buttons {\n          display: flex;\n          gap: 10px;\n          flex-wrap: wrap;\n          justify-content: center;\n        }\n        \n        .flash-reading-speed {\n          display: flex;\n          align-items: center;\n          color: white;\n          width: 80%;\n          max-width: 400px;\n          gap: 10px;\n        }\n        \n        .flash-reading-slider {\n          flex: 1;\n          height: 8px;\n          appearance: none;\n          background: #555;\n          border-radius: 4px;\n          outline: none;\n        }\n        \n        .flash-reading-slider::-webkit-slider-thumb {\n          appearance: none;\n          width: 20px;\n          height: 20px;\n          border-radius: 50%;\n          background: #6c5ce7;\n          cursor: pointer;\n        }\n        \n        .flash-reading-btn {\n          padding: 10px 20px;\n          border: none;\n          border-radius: 4px;\n          background-color: #6c5ce7;\n          color: white;\n          font-size: 16px;\n          cursor: pointer;\n          transition: background-color 0.2s;\n        }\n        \n        .flash-reading-btn:hover {\n          background-color: #5344c0;\n        }\n        \n        .flash-reading-btn:disabled {\n          background-color: #aaa;\n          cursor: not-allowed;\n        }\n        \n        .flash-reading-progress {\n          color: white;\n          font-size: 14px;\n          margin-top: 10px;\n        }\n        .flash-reading-speed-note {\n          font-size: 12px;\n          color: #ccc;\n          margin-left: 5px;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 初始化闪读模式\n  const initializeFlashReading = () => {\n    // 添加样式\n    addFlashReadingStyles();\n    \n    const sentences = window.flashReadingSentences;\n    if (!sentences || !Array.isArray(sentences) || sentences.length === 0) {\n      console.error('闪读模式: 未找到句子数据');\n      return;\n    }\n    \n    // 获取全局UI元素\n    const display = document.getElementById('flash-reading-display');\n    const speedSlider = document.getElementById('flash-reading-speed');\n    const speedValue = document.getElementById('flash-reading-speed-value');\n    const playButton = document.getElementById('flash-reading-play');\n    const pauseButton = document.getElementById('flash-reading-pause');\n    const stopButton = document.getElementById('flash-reading-stop');\n    const prevButton = document.getElementById('flash-reading-prev-sentence');\n    const nextButton = document.getElementById('flash-reading-next-sentence');\n    const progress = document.getElementById('flash-reading-progress');\n    const cover = document.querySelector('.flash-reading-cover');\n    \n    if (!display || !speedSlider || !speedValue || !playButton || !pauseButton || !stopButton || !prevButton || !nextButton || !progress || !cover) {\n      console.error('闪读模式: 未找到UI元素');\n      return;\n    }\n    \n    // 创建闪读控制器\n    window.flashReader = {\n      sentences: sentences,\n      currentIndex: 0,\n      interval: null,\n      speed: parseInt(speedSlider.value),\n      isPlaying: false,\n      \n      // 开始闪读\n      start() {\n        if (this.interval) {\n          clearInterval(this.interval);\n        }\n        \n        this.isPlaying = true;\n        playButton.disabled = true;\n        pauseButton.disabled = false;\n        progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        \n        // 显示当前句子\n        this.displayCurrentSentence();\n        \n        // 设置闪读间隔\n        this.interval = setInterval(() => {\n          this.currentIndex++;\n          \n          if (this.currentIndex >= this.sentences.length) {\n            this.stop();\n            display.textContent = '阅读完成';\n            return;\n          }\n          \n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }, this.speed);\n      },\n      \n      // 显示当前句子\n      displayCurrentSentence() {\n        if (this.currentIndex < this.sentences.length) {\n          const currentSentence = this.sentences[this.currentIndex];\n          display.textContent = currentSentence;\n          display.style.color = 'white'; // 确保文本为白色\n          \n          // 调整背景以适应内容\n          setTimeout(() => {\n            const displayRect = display.getBoundingClientRect();\n            // 确保覆盖层完全包裹文本\n            cover.style.width = `${displayRect.width}px`;\n            cover.style.height = `${displayRect.height}px`;\n          }, 10);\n        }\n      },\n      \n      // 暂停闪读\n      pause() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        \n        this.isPlaying = false;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n      },\n      \n      // 停止闪读\n      stop() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        \n        this.isPlaying = false;\n        this.currentIndex = 0;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n        \n        display.textContent = '准备开始';\n        progress.textContent = `进度：0 / ${this.sentences.length}`; // 重置进度\n      },\n      \n      // 更新速度\n      updateSpeed(newSpeed) {\n        this.speed = newSpeed;\n        speedValue.textContent = `${newSpeed} ms`;\n        \n        // 保存速度设置到本地存储\n        localStorage.setItem('flash-reading-speed', newSpeed);\n        \n        // 如果正在播放，重新开始以应用新速度\n        if (this.isPlaying) {\n          clearInterval(this.interval);\n          this.start(); // 直接调用start方法重新开始\n        }\n      },\n\n      // 返回上一句\n      prevSentence() {\n        if (this.currentIndex > 0) {\n          this.currentIndex--;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n\n      // 跳到下一句\n      nextSentence() {\n        if (this.currentIndex < this.sentences.length - 1) {\n          this.currentIndex++;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n\n      // 清理资源\n      cleanup() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        this.currentIndex = 0;\n      }\n    };\n    \n    // 添加事件监听器\n    playButton.addEventListener('click', () => {\n      window.flashReader.start();\n    });\n    \n    pauseButton.addEventListener('click', () => {\n      window.flashReader.pause();\n    });\n    \n    stopButton.addEventListener('click', () => {\n      window.flashReader.stop();\n    });\n    \n    speedSlider.addEventListener('input', (e) => {\n      const newSpeed = parseInt(e.target.value);\n      window.flashReader.updateSpeed(newSpeed);\n    });\n\n    prevButton.addEventListener('click', () => {\n      window.flashReader.prevSentence();\n    });\n\n    nextButton.addEventListener('click', () => {\n      window.flashReader.nextSentence();\n    });\n    \n    // 初始化\n    const savedSpeed = localStorage.getItem('flash-reading-speed');\n    const initialSpeed = savedSpeed ? parseInt(savedSpeed) : 1000;\n    speedSlider.value = initialSpeed;\n    window.flashReader.updateSpeed(initialSpeed);\n    \n    console.log('闪读模式已初始化，共 ' + sentences.length + ' 个句子');\n  };\n  \n  // 创建闪读内容\n  const createFlashReadingContent = (text) => {\n    return `<div class=\"flash-reading-content\">\n      <p>${text}</p>\n    </div>`;\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 格式化文本用于鼠标跟随\n  const formatTextForMouseFollow = (text) => {\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个单词添加span，以便于添加高亮效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"follow-word\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\" data-follow=\"true\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用静态高亮\n  const applyStaticHighlight = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为单词随机添加颜色高亮\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      let lastColor = null;\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n          return;\n        }\n        \n        // 随机决定是否高亮和使用哪种颜色\n        if (Math.random() < 0.7) {\n          let color;\n          if (lastColor === 'red') {\n            color = 'blue';\n          } else if (lastColor === 'blue') {\n            color = 'red';\n          } else {\n            color = Math.random() < 0.5 ? 'red' : 'blue';\n          }\n          lastColor = color;\n          \n          processedParagraph += `<span class=\"highlight-word ${color}\">${word}</span>`;\n        } else {\n          processedParagraph += word;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用裸眼3D效果\n  const applyNakedEye3dEffect = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content naked-eye-3d-container\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个词添加3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"naked-eye-3d-text\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用舒适3D效果\n  const applyComfortable3dEffect = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个词随机应用不同的3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          \n          processedParagraph += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 初始化裸眼3D\n  const initializeNakedEye3D = () => {\n    // 为裸眼3D文本添加动画\n    const textElements = document.querySelectorAll('.naked-eye-3d-text');\n    textElements.forEach((element, index) => {\n      // 添加随机延迟，使动画错开\n      const delay = Math.random() * 2;\n      element.style.animationDelay = `${delay}s`;\n    });\n  };\n\n  // 初始化节奏阅读\n  const initializeRhythmReading = () => {\n    if (window.rhythmReader && typeof window.rhythmReader.initializeTextNodes === 'function') {\n      window.rhythmReader.initializeTextNodes();\n    }\n  };\n  \n  // 启动节奏阅读\n  const startRhythmReading = () => {\n    if (window.rhythmReader && typeof window.rhythmReader.start === 'function') {\n      window.rhythmReader.start();\n    }\n  };\n\n  // 添加鼠标跟随监听器\n  const addMouseFollowListeners = () => {\n    // 获取内容容器\n    const contentArea = document.querySelector('.mouse-follow-content');\n    if (!contentArea) {\n      console.error('未找到鼠标跟随内容区域');\n      return;\n    }\n    \n    // 上一个高亮的行\n    let lastHighlightedLine = null;\n    \n    // 监听鼠标移动 - 精确的行检测\n    const mouseMoveHandler = (e) => {\n      // 获取鼠标位置\n      const mouseY = e.clientY;\n      \n      // 获取所有行\n      const allLines = contentArea.querySelectorAll('.follow-line');\n      let foundLine = null;\n      let minDistance = Infinity;\n      \n      // 寻找鼠标所在的精确行\n      allLines.forEach(line => {\n        const rect = line.getBoundingClientRect();\n        const lineCenter = rect.top + rect.height / 2;\n        const distance = Math.abs(mouseY - lineCenter);\n        \n        // 如果鼠标在行范围内，计算到行中心的距离\n        if (mouseY >= rect.top && mouseY <= rect.bottom) {\n          if (distance < minDistance) {\n            minDistance = distance;\n            foundLine = line;\n          }\n        }\n      });\n      \n      // 更新高亮状态\n      if (lastHighlightedLine && lastHighlightedLine !== foundLine) {\n        // 移除旧高亮\n        lastHighlightedLine.classList.remove('highlighted');\n      }\n      \n      if (foundLine) {\n        // 添加新高亮\n        foundLine.classList.add('highlighted');\n        lastHighlightedLine = foundLine;\n        \n        // 调试输出\n        console.log('当前高亮行:', foundLine.textContent.substring(0, 30) + '...');\n      } else if (lastHighlightedLine) {\n        // 如果没有找到新行，且有上一个高亮行，移除它\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n    \n    // 鼠标离开处理\n    const mouseLeaveHandler = () => {\n      // 清除当前高亮\n      if (lastHighlightedLine) {\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n    \n    // 存储处理函数引用\n    window.eventTracker = window.eventTracker || { mouseFollowHandlers: [] };\n    window.eventTracker.mouseFollowHandlers.push(\n      { element: contentArea, event: 'mousemove', handler: mouseMoveHandler },\n      { element: contentArea, event: 'mouseleave', handler: mouseLeaveHandler }\n    );\n    \n    // 添加事件监听器\n    contentArea.addEventListener('mousemove', mouseMoveHandler);\n    contentArea.addEventListener('mouseleave', mouseLeaveHandler);\n    \n    console.log('改进的鼠标跟随监听器已初始化');\n  };\n  \n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n  }, []);\n  \n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async (file) => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      \n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n      \n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n      \n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n  \n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({ scale: 1.0 });\n      \n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      \n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      \n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async (textContent) => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n    \n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n    \n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n    \n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    \n    const lines = [...lineMap.values()];\n    \n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    \n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    \n    return hasTocKeywords || hasPageNumberPatterns || (shortLineRatio > 0.7 && numberLineRatio > 0.3);\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n    \n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    \n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n      \n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n      \n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n      \n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    \n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && \n              x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = (text) => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    \n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      \n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        \n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    \n    return result;\n  };\n\n  // 处理内容页面 - 按句子划分段落\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      \n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n      // 按句子划分内容（句号、问号、感叹号等作为分隔符）\n      const sentences = splitIntoSentences(extractedText);\n      \n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch(mode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          // 使用ADHD友好的静态高亮处理\n          console.log('应用ADHD友好的静态高亮模式');\n          processedContent = formatSimpleHighlightedText(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'rhythm':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          processedContent = createFlashReadingContentFromSentences(sentences);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n      \n      setContent(processedContent);\n      \n      // 如果是静态高亮模式，添加延时验证检查\n      if (mode === 'static') {\n        setTimeout(() => {\n          const contentArea = document.querySelector('.adhd-highlight-mode');\n          if (contentArea) {\n            console.log('静态高亮模式元素存在');\n            const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n            console.log(`找到 ${paragraphs.length} 个段落`);\n            \n            // 检查样式是否正确应用\n            if (paragraphs.length > 0) {\n              const firstPara = paragraphs[0];\n              const styles = window.getComputedStyle(firstPara);\n              console.log('段落应用的样式:', {\n                color: styles.color,\n                backgroundColor: styles.backgroundColor,\n                fontFamily: styles.fontFamily,\n                fontSize: styles.fontSize\n              });\n            }\n          }\n        }, 200);\n      }\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 将文本分割成句子\n  const splitIntoSentences = (text) => {\n    // 匹配句号、问号、感叹号后跟空格或结束的模式\n    // 支持中英文标点符号\n    const sentenceRegex = /([.!?。！？；;]+\\s*)/g;\n    \n    // 分割文本成句子\n    const sentences = [];\n    let lastIndex = 0;\n    let match;\n    \n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const sentence = text.substring(lastIndex, endIndex).trim();\n      \n      // 避免添加空句子\n      if (sentence) {\n        sentences.push(sentence);\n      }\n      \n      lastIndex = endIndex;\n    }\n    \n    // 处理最后一部分（如果没有以句号等结尾）\n    if (lastIndex < text.length) {\n      const lastSentence = text.substring(lastIndex).trim();\n      if (lastSentence) {\n        sentences.push(lastSentence);\n      }\n    }\n    \n    return sentences;\n  };\n\n  // 专门为闪读模式分割文本，以任意标点符号为分隔点\n  const splitIntoFlashReadingSegments = (text) => {\n    // 匹配任意标点符号包括中英文标点\n    const sentenceRegex = /([,.!?:;，。！？：；、]+\\s*)/g;\n    \n    // 分割文本成短句\n    const segments = [];\n    let lastIndex = 0;\n    let match;\n    \n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const segment = text.substring(lastIndex, endIndex).trim();\n      \n      // 避免添加空段落\n      if (segment) {\n        segments.push(segment);\n      }\n      \n      lastIndex = endIndex;\n    }\n    \n    // 处理最后一部分（如果没有以标点符号结尾）\n    if (lastIndex < text.length) {\n      const lastSegment = text.substring(lastIndex).trim();\n      if (lastSegment) {\n        segments.push(lastSegment);\n      }\n    }\n    \n    return segments;\n  };\n\n  // 格式化句子为HTML\n  const formatSentencesToHtml = (sentences) => {\n    let html = '<div class=\"pdf-content\">';\n    \n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${sentence}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为句子应用静态高亮\n  const applyStaticHighlightToSentences = (sentences) => {\n    let html = '<div class=\"pdf-content adhd-content\">';\n    \n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      \n      // 简单地为句子添加特定样式的class\n      html += `<p class=\"pdf-paragraph adhd-sentence\">${sentence}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为鼠标跟随模式格式化句子\n  const formatSentencesForMouseFollow = (sentences) => {\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    sentences.forEach((sentence, index) => {\n      if (sentence.trim() === '') return;\n      \n      // 每个句子作为独立行，使用div而不是p标签\n      html += `<div class=\"follow-line\" data-line=\"${index}\" data-sentence=\"${sentence.substring(0, 20)}...\" style=\"color: inherit;\">${sentence}</div>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为舒适3D模式格式化句子\n  const applyComfortable3dEffectToSentences = (sentences) => {\n    let html = '<div class=\"pdf-content\">';\n    \n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      \n      // 为每个词随机应用不同的3D效果\n      const words = sentence.split(/(\\s+)/);\n      let processedSentence = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedSentence += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          \n          processedSentence += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedSentence}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为闪读模式创建内容\n  const createFlashReadingContentFromSentences = (sentences) => {\n    // 储存句子到全局变量，用于后续显示\n    window.flashReadingSentences = sentences;\n\n    // 返回闪读界面的HTML结构\n    return `\n      <div class=\"flash-reading-container\">\n        <div class=\"flash-reading-controls\">\n          <div class=\"flash-reading-buttons\">\n            <button id=\"flash-reading-prev-sentence\" class=\"flash-reading-btn\">上一句</button>\n            <button id=\"flash-reading-play\" class=\"flash-reading-btn\">开始</button>\n            <button id=\"flash-reading-pause\" class=\"flash-reading-btn\" disabled>暂停</button>\n            <button id=\"flash-reading-stop\" class=\"flash-reading-btn\">停止</button>\n            <button id=\"flash-reading-next-sentence\" class=\"flash-reading-btn\">下一句</button>\n          </div>\n          <div class=\"flash-reading-speed\">\n            <span>速度：</span>\n            <input type=\"range\" id=\"flash-reading-speed\" min=\"300\" max=\"1700\" step=\"50\" value=\"1000\" class=\"flash-reading-slider\">\n            <span id=\"flash-reading-speed-value\">1000 ms</span>\n            <span class=\"flash-reading-speed-note\">（数值越小，切换越快）</span>\n          </div>\n          <div class=\"flash-reading-progress\">\n            <span id=\"flash-reading-progress\">进度：0 / ${sentences.length}</span>\n          </div>\n        </div>\n        <div class=\"flash-reading-display-wrapper\">\n          <div class=\"flash-reading-cover\"></div> <!-- 这里是闪卡 -->\n          <div id=\"flash-reading-display\" class=\"flash-reading-display\">准备开始</div>\n        </div>\n      </div>`;\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async (file) => {\n    try {\n      const text = await file.text();\n      \n      // 根据阅读模式选择不同的处理方式\n      let processedContent = '';\n      \n      if (readingMode === 'flash-reading') {\n        // 闪读模式下使用特定的分割函数\n        const segments = splitIntoFlashReadingSegments(text);\n        processedContent = createFlashReadingContentFromSentences(segments);\n        \n        // 初始化闪读模式\n        setTimeout(() => {\n          initializeFlashReading();\n        }, 100);\n      } else {\n        // 其他模式使用默认的分割方式\n        const sentences = splitIntoSentences(text);\n        \n        switch(readingMode) {\n          case 'normal':\n            processedContent = formatSentencesToHtml(sentences);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlightToSentences(sentences);\n            break;\n          case 'follow-mouse':\n            processedContent = formatSentencesForMouseFollow(sentences);\n            break;\n          case 'comfortable-3d':\n            processedContent = applyComfortable3dEffectToSentences(sentences);\n            break;\n          default:\n            processedContent = formatSentencesToHtml(sentences);\n        }\n      }\n      \n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n      \n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setContent('<div class=\"error-message\">TXT文件处理失败</div>');\n    }\n  };\n\n  // 处理Markdown文件\n  const handleMarkdownFile = async (file) => {\n    try {\n      const text = await file.text();\n      \n      // 使用marked库转换markdown为HTML\n      let html = '';\n      try {\n        if (window.marked) {\n          html = window.marked.parse(text);\n        } else {\n          // 如果没有marked库，简单地拆分为段落\n          html = `<div>${text.split(\"\\n\\n\").map(p => `<p>${p}</p>`).join(\"\")}</div>`;\n        }\n      } catch (parseError) {\n        console.error('Markdown解析错误:', parseError);\n        html = `<div>${text}</div>`;\n      }\n      \n      // 提取纯文本内容\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = html;\n      const plainText = tempDiv.textContent || tempDiv.innerText || '';\n      \n      // 分割文本为句子\n      const sentences = splitIntoSentences(plainText);\n      \n      // 根据当前阅读模式处理内容\n      let processedContent = '';\n      switch(readingMode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlightToSentences(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          // 使用特定的闪读分割函数重新处理文本\n          const segments = splitIntoFlashReadingSegments(plainText);\n          processedContent = createFlashReadingContentFromSentences(segments);\n          \n          // 初始化闪读模式\n          setTimeout(() => {\n            initializeFlashReading();\n          }, 100);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n      \n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n      \n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('Markdown处理错误:', error);\n      setContent('<div class=\"error-message\">Markdown文件处理失败</div>');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async (e) => {\n    const uploadedFile = e.target.files[0];\n    if (!uploadedFile) return;\n    \n    setLoading(true);\n    setFileName(uploadedFile.name);\n    \n    try {\n      if (uploadedFile.type === 'application/pdf') {\n        await handlePdfFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/plain' || uploadedFile.name.endsWith('.txt')) {\n        await handleTxtFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/markdown' || uploadedFile.name.endsWith('.md')) {\n        await handleMarkdownFile(uploadedFile);\n    } else {\n        setContent('<div class=\"error-message\">不支持的文件格式</div>');\n      }\n    } catch (error) {\n      console.error('处理文件时出错:', error);\n      setContent('<div class=\"error-message\">处理文件时出错</div>');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = (container) => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    \n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n      \n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n      \n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          \n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n          \n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width/2,  // 水平中心\n            y: rect.bottom,               // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n    \n    // 过滤无效位置并排序\n    return positions\n      .filter(p => p.char.trim() !== '')\n      .sort((a, b) => {\n        // 先按行排序，同行按列排序\n        const yDiff = a.y - b.y;\n        if (Math.abs(yDiff) > 5) { // 5px阈值判断是否同一行\n          return yDiff;\n        }\n        return a.x - b.x;\n      });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    \n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - (containerVisibleHeight / 2);\n      \n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - (window.innerHeight / 2);\n      \n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    \n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n    \n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    \n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n    \n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length || // 已到末尾\n          positions[nextIndex].char.trim() === '' || // 下一个是空白\n          positions[nextIndex].y > charPosition.y + 5) { // 下一个在新行\n        return true;\n      }\n    }\n    \n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n    \n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n      \n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || \n          current.y > prev.y + 5) { // 有明显换行\n        break;\n      }\n      \n      start--;\n    }\n    \n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n      \n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      \n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n      \n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      \n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (window.autoReader.charPositions.length === 0) {\n      if (window.currentPage < window.totalPages) {\n        window.changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 重置索引到开头\n    window.autoReader.currentIndex = 0;\n    \n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    \n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n    \n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n    \n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none';\n      highlight.style.zIndex = '998';\n      contentContainer.appendChild(highlight);\n    }\n    \n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight &&\n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n    \n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20;\n    \n    // 尝试获取实际行高\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(window.autoReader.charPositions[i].y - window.autoReader.charPositions[i-1].y);\n        if (yDiff > 5) {\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n    \n    // 记录上次滚动的位置\n    let lastScrolledY = -1;\n    const scrollSafeZone = lineHeight * 2.5;\n    \n    // 设置字符大小的估计值\n    let charWidth = 20;\n    let charHeight = lineHeight * 0.8;\n    \n    // 尝试估计字符宽度\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        if (window.autoReader.charPositions[i].x !== window.autoReader.charPositions[i-1].x) {\n          const xDiff = Math.abs(window.autoReader.charPositions[i].x - window.autoReader.charPositions[i-1].x);\n          if (xDiff > 0 && xDiff < 50) {\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    \n    window.autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (window.autoReader.currentIndex < window.autoReader.charPositions.length && \n             window.autoReader.charPositions[window.autoReader.currentIndex]?.char.trim() === '') {\n        window.autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (window.autoReader.currentIndex >= window.autoReader.charPositions.length) {\n        if (window.currentPage < window.totalPages) {\n          window.changePage(1);\n          clearInterval(window.autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n\n      const pos = window.autoReader.charPositions[window.autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      \n      if (cursor && highlight) {\n        const contentRect = contentContainer.getBoundingClientRect();\n        \n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        \n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        \n        highlight.style.left = `${relativeX - charWidth/2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n        \n        // 滚动处理\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        \n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          \n          if (isContainerScrollable) {\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n            \n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            \n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = relativeY;\n            }\n          } else {\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n            \n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            \n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      \n      window.autoReader.currentIndex++;\n      \n    }, window.autoReader.speed);\n    \n    // 在停止自动阅读时清除所有高亮\n    window.autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n      \n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n      \n      // 调用清理函数\n      if (window.autoReader.cleanup) {\n        window.autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n    \n    // 重置翻页状态\n    window.autoReader.isPageChanging = false;\n    \n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n    \n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n    \n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n    \n    // 收集字符位置\n    window.autoReader.charPositions = getAllCharacterPositions(content);\n    \n    // 如果当前页没有内容，尝试翻页\n    if (window.autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !window.autoReader.isPageChanging) {\n        window.autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async (e) => {\n    const newMode = e.target.value;\n    const prevMode = readingMode;\n    \n    console.log(`切换阅读模式: 从 ${prevMode} 到 ${newMode}`);\n    \n    // 更新状态\n    setReadingMode(newMode);\n    \n    // 如果有PDF文档和当前页，重新处理当前页内容\n    if (pdfDocument && currentPage > 0) {\n      try {\n        console.log('重新处理当前页面内容');\n        const page = await pdfDocument.getPage(currentPage);\n        \n        // 不使用任何额外处理，直接使用最原始的方式重新加载页面\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n        \n        // 根据当前模式设置内容\n        if (newMode === 'static') {\n          // 静态高亮模式 - 使用改进的句子处理\n          const html = formatSimpleHighlightedText(sentences);\n          console.log('设置静态高亮内容');\n          setContent(html);\n          \n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n        if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n              \n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n                \n                // 验证文字颜色\n                if (styles.color === 'rgb(51, 51, 51)' || styles.color === '#333333') {\n                  console.log('文字颜色正确应用');\n                } else {\n                  console.warn('文字颜色可能未正确应用:', styles.color);\n                }\n              }\n            } else {\n              console.error('未找到静态高亮模式内容区域');\n            }\n          }, 200);\n        } else if (newMode === 'flash-reading') {\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n            \n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n            \n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n            \n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n        } else {\n          // 其他模式保持不变\n          const handler = getContentHandlerForMode(newMode);\n          const processedContent = handler(sentences);\n          setContent(processedContent);\n        }\n      } catch (error) {\n        console.error('应用阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 首先确保移除鼠标跟随监听器\n    removeMouseFollowListeners();\n    \n    // 清理节奏阅读器\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    \n    // 清理闪读器\n    if (window.flashReader) {\n      window.flashReader.cleanup();\n    }\n    \n    // 清理舒适3D效果\n    const comfortable3DElements = document.querySelectorAll('.emboss-3d-text, .float-3d-text, .gradient-3d-text');\n    comfortable3DElements.forEach(el => el.remove());\n    \n    // 清理闪读模式元素\n    const flashReadingElements = document.querySelectorAll('.flash-reading-container, .flash-reading-display, .flash-reading-controls');\n    flashReadingElements.forEach(el => el.remove());\n    \n    // 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll(\n      '.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line, .rhythm-char'\n    );\n    highlights.forEach(el => {\n      if (el.parentNode) el.parentNode.removeChild(el);\n    });\n    \n    // 彻底替换内容区域以移除所有事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 先保存底部翻页控件\n      const bottomPagination = contentArea.querySelector('.bottom-pagination');\n      \n      // 深度克隆内容，但不克隆事件监听器\n      const contentHTML = contentArea.querySelector('div[dangerouslySetInnerHTML]')?.innerHTML || '';\n      const newContentArea = contentArea.cloneNode(false);\n      \n      // 创建新的内容容器\n      const newContentContainer = document.createElement('div');\n      newContentContainer.innerHTML = contentHTML;\n      newContentArea.appendChild(newContentContainer);\n      \n      // 如果有底部翻页控件，重新添加\n      if (bottomPagination && totalPages > 0) {\n        const newBottomPagination = bottomPagination.cloneNode(true);\n        // 重新绑定事件\n        const prevBtn = newBottomPagination.querySelector('.page-btn:first-child');\n        const nextBtn = newBottomPagination.querySelector('.page-btn:last-child');\n        if (prevBtn) prevBtn.onclick = () => changePage(-1);\n        if (nextBtn) nextBtn.onclick = () => changePage(1);\n        newContentArea.appendChild(newBottomPagination);\n      }\n      \n      if (contentArea.parentNode) {\n        contentArea.parentNode.replaceChild(newContentArea, contentArea);\n      }\n    }\n    \n    // 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 移除所有特殊标记和样式\n      paragraph.removeAttribute('data-follow');\n      paragraph.removeAttribute('style');\n      \n      // 清理特殊span标签\n      paragraph.innerHTML = paragraph.innerHTML\n        .replace(/<span class=\"text-line\"[^>]*>/g, '')\n        .replace(/<span class=\"rhythm-char\"[^>]*>/g, '')\n        .replace(/<span class=\"line-highlight[^\"]*\"[^>]*>/g, '')\n        .replace(/<span class=\"mouse-highlight[^\"]*\"[^>]*>/g, '')\n        .replace(/<\\/span>/g, '');\n    });\n    \n    // 移除特殊UI元素\n    const elementsToRemove = [\n      'rhythm-speed-slider',\n      'rhythm-notification'\n    ];\n    \n    elementsToRemove.forEach(id => {\n      const element = document.getElementById(id);\n      if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    });\n    \n    // 移除暗色背景\n    document.body.classList.remove('dark-background');\n    \n    // 清理闪读模式\n    if (window.flashReader && typeof window.flashReader.cleanup === 'function') {\n      window.flashReader.cleanup();\n    }\n  };\n\n  const handleAutoScroll = () => {\n    window.autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = (e) => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    \n    const rect = contentArea.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    \n    clearAllHighlights();\n    \n    const paragraphs = contentArea.querySelectorAll('p');\n    paragraphs.forEach(paragraph => {\n      const paragraphRect = paragraph.getBoundingClientRect();\n      const paragraphX = paragraphRect.left - rect.left;\n      const paragraphY = paragraphRect.top - rect.top;\n      \n      if (y >= paragraphY && y <= paragraphY + paragraphRect.height) {\n        const words = paragraph.querySelectorAll('span');\n        words.forEach(word => {\n          const wordRect = word.getBoundingClientRect();\n          const wordX = wordRect.left - rect.left;\n          \n          if (x >= wordX && x <= wordX + wordRect.width) {\n            word.classList.add('highlight');\n          }\n        });\n      }\n    });\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 专门用于移除鼠标跟随事件的函数\n  const removeMouseFollowListeners = () => {\n    // 移除记录的所有监听器\n    if (window.eventTracker && window.eventTracker.mouseFollowHandlers) {\n      window.eventTracker.mouseFollowHandlers.forEach(({element, event, handler}) => {\n        if (element && element.removeEventListener) {\n          element.removeEventListener(event, handler);\n        }\n      });\n      window.eventTracker.mouseFollowHandlers = [];\n    }\n    \n    // 为安全起见，尝试从document和内容区域移除通用处理函数\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    }\n    \n    document.removeEventListener('mousemove', handleMouseMove);\n    \n    // 清除所有当前高亮\n    clearAllHighlights();\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n    \n    // 添加底部翻页控件样式\n    const bottomPaginationStyles = document.createElement('style');\n    bottomPaginationStyles.id = 'bottom-pagination-styles';\n    bottomPaginationStyles.innerHTML = `\n      .bottom-pagination {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        padding: 20px 0 30px;\n        margin-top: 30px;\n        width: 100%;\n        background-color: transparent;\n        border-radius: 5px;\n      }\n\n      .bottom-pagination .page-btn {\n        background-color: #6c5ce7;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        padding: 8px 15px;\n        margin: 0 10px;\n        cursor: pointer;\n        font-size: 14px;\n        transition: background-color 0.2s ease;\n      }\n\n      .bottom-pagination .page-btn:hover {\n        background-color: #4834d4;\n      }\n\n      .bottom-pagination .page-btn:disabled {\n        background-color: #aaa;\n        cursor: not-allowed;\n      }\n\n      .bottom-pagination .page-info {\n        font-size: 14px;\n        margin: 0 10px;\n      }\n    `;\n    document.head.appendChild(bottomPaginationStyles);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n    addComfortable3DStyles();\n    \n    // 添加鼠标跟随模式的样式\n    const mouseFollowStyle = document.createElement('style');\n    mouseFollowStyle.id = 'intelligent-mouse-follow-style';\n    mouseFollowStyle.textContent = `\n      /* 基础样式 */\n      .mouse-follow-content {\n        position: relative;\n        line-height: 1.8;\n      }\n      \n      .mouse-follow-content .follow-line {\n        position: relative;\n        padding: 8px 16px;\n        margin: 4px 0;\n        border-radius: 6px;\n        transition: all 0.2s ease;\n        display: block;\n        min-height: 1.8em;\n        white-space: normal;\n        word-wrap: break-word;\n        text-indent: 2em;\n      }\n      \n      /* 高亮状态 */\n      .follow-line.highlighted {\n        background-color: #ffa500 !important; /* 橙色背景 */\n        color: #ffffff !important; /* 白色文字 */\n        font-weight: bold !important;\n        font-size: 1.1em; /* 稍微调小字号 */\n        transform: translateX(5px);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n      }\n      \n      \n      /* 平滑过渡效果 */\n      .follow-line {\n        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n      }\n      \n      /* 行间距优化 */\n      .mouse-follow-content .follow-line + .follow-line {\n        margin-top: 4px;\n      }\n      \n      /* 添加行指示器 */\n      .follow-line::before {\n        content: '';\n        position: absolute;\n        left: 0;\n        top: 0;\n        bottom: 0;\n        width: 3px;\n        background: linear-gradient(to bottom, transparent, rgba(255, 255, 255, 0.5), transparent);\n        opacity: 0;\n        transition: opacity 0.2s ease;\n      }\n      \n      .follow-line.highlighted::before {\n        opacity: 1;\n      }\n    `;\n    document.head.appendChild(mouseFollowStyle);\n    \n    // 创建深色背景下的ADHD友好高亮样式\n    const style = document.createElement('style');\n    style.id = 'adhd-friendly-highlight-style';\n    style.textContent = `\n      /* ADHD友好的高亮样式 - 适配深色背景 */\n      .adhd-highlight-mode {\n        line-height: 1.8;\n        padding: 20px;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph {\n        margin-bottom: 1.2em;\n        background-color: transparent;\n        padding: 12px 15px;\n        border-radius: 6px;\n        border-left: 3px solid rgba(255, 255, 255, 0.2);\n        transition: all 0.3s ease;\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover {\n        transform: translateX(5px);\n        border-left-color: rgba(255, 255, 255, 0.4);\n      }\n      \n      /* 加粗样式 - 白色加粗 */\n      .adhd-bold {\n        font-weight: 700;\n        color: #ffffff;\n        letter-spacing: 0.02em;\n        font-size: 1.1em;\n        text-shadow: 0 0 1px rgba(255, 255, 255, 0.2);\n      }\n      \n      /* 彩色样式 - 使用鲜明的蓝色 */\n      .adhd-colored {\n        color: #6c5ce7;\n        font-weight: 500;\n        font-size: 1.05em;\n        text-shadow: 0 0 1px rgba(108, 92, 231, 0.2);\n      }\n      \n      /* 正常样式 - 普通白色 */\n      .adhd-normal {\n        color: rgba(255, 255, 255, 0.8);\n        font-size: 1em;\n      }\n\n      /* 添加平滑过渡效果 */\n      .adhd-bold, .adhd-colored, .adhd-normal {\n        transition: all 0.2s ease;\n      }\n\n      /* 悬停效果 */\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-bold {\n        color: #ffffff;\n        text-shadow: 0 0 2px rgba(255, 255, 255, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-colored {\n        color: #8a7ff7;\n        text-shadow: 0 0 2px rgba(138, 127, 247, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-normal {\n        color: rgba(255, 255, 255, 0.9);\n      }\n\n      /* 添加段落间距的视觉引导 */\n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph {\n        margin-top: 1.5em;\n        position: relative;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph::before {\n        content: '';\n        position: absolute;\n        top: -0.75em;\n        left: 0;\n        right: 0;\n        height: 1px;\n        background: linear-gradient(\n          to right,\n          transparent,\n          rgba(255, 255, 255, 0.1),\n          transparent\n        );\n      }\n    `;\n    document.head.appendChild(style);\n    \n    // 添加基础鼠标跟随样式\n    const mouseFollowPageStyle = document.createElement('style');\n    mouseFollowPageStyle.id = 'basic-mouse-follow-style';\n    mouseFollowPageStyle.textContent = `\n      .follow-line {\n        padding: 8px 12px;\n        margin: 4px 0;\n        border-radius: 4px;\n        transition: background-color 0.2s ease;\n      }\n      .follow-line.highlighted {\n        background-color: #ffa500;\n        color: #000080;\n        font-weight: bold;\n      }\n    `;\n    document.head.appendChild(mouseFollowPageStyle);\n    \n    return () => {\n      const existingStyle = document.getElementById('adhd-friendly-highlight-style');\n      if (existingStyle) existingStyle.remove();\n      \n      const existingMouseFollowStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (existingMouseFollowStyle) existingMouseFollowStyle.remove();\n      \n      const existingBasicMouseFollowStyle = document.getElementById('basic-mouse-follow-style');\n      if (existingBasicMouseFollowStyle) existingBasicMouseFollowStyle.remove();\n      \n      mouseFollowPageStyle.remove();\n    };\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 清理旧监听器\n    removeMouseFollowListeners();\n    \n    // 添加新监听器\n    setTimeout(() => {\n      addMouseFollowListeners();\n      \n      // 添加调试辅助 - 显示行边界\n      const contentArea = document.querySelector('.mouse-follow-content');\n      if (contentArea) {\n        const lines = contentArea.querySelectorAll('.follow-line');\n        console.log(`初始化鼠标跟随模式，共 ${lines.length} 行`);\n        \n        // 可选：启用可视化调试\n        if (false) { // 设置为true可以启用可视化调试\n          lines.forEach((line, index) => {\n            line.style.border = '1px dashed #888';\n            line.setAttribute('title', `行 ${index+1}`);\n          });\n        }\n        \n        // 验证行高亮效果\n        const firstLine = lines[0];\n        if (firstLine) {\n          console.log('行样式验证:', {\n            padding: window.getComputedStyle(firstLine).padding,\n            margin: window.getComputedStyle(firstLine).margin,\n            fontSize: window.getComputedStyle(firstLine).fontSize,\n            lineHeight: window.getComputedStyle(firstLine).lineHeight\n          });\n        }\n      }\n    }, 100);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = (delta) => {\n    window.autoReader.speed = Math.max(100, window.autoReader.speed + delta);\n    \n    if (window.autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async (delta) => {\n    console.log(`翻页请求: 当前页 ${currentPage}, 增量 ${delta}`);\n    const newPage = currentPage + delta;\n    \n    if (newPage < 1 || newPage > totalPages) {\n      console.log('无效页码，不执行翻页');\n          return;\n        }\n        \n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n    const wasFlashReading = readingMode === 'flash-reading' && window.flashReader && window.flashReader.isPlaying;\n    \n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    \n    if (wasFlashReading && window.flashReader) {\n      window.flashReader.cleanup();\n    }\n    \n    // 更新页码\n    setCurrentPage(newPage);\n    \n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n      \n      // 检查是否为目录页\n      const textContent = await page.getTextContent();\n      const isToc = await detectIfTocPage(textContent);\n      setIsTableOfContents(isToc);\n      \n      if (isToc) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, page.getViewport({ scale: 1.0 }));\n      } else {\n        // 处理正文页面 - 根据当前阅读模式处理\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n        \n        // 根据当前模式设置内容\n        if (readingMode === 'static') {\n          console.log('翻页后应用静态高亮模式');\n          const processedContent = formatSimpleHighlightedText(sentences);\n          setContent(processedContent);\n          \n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n            if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n              \n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n              }\n            }\n          }, 200);\n        } else if (readingMode === 'flash-reading') {\n          // 如果是闪读模式，则需要特殊处理\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n            \n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n            \n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n            \n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n          return; // 已处理，直接返回\n        } else {\n          // 其他模式使用原处理函数\n          await processContentPage(page, readingMode);\n        }\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n    } catch (error) {\n      console.error('页面切换错误:', error);\n    }\n  };\n\n  // ADHD友好的静态高亮处理函数\n  const formatSimpleHighlightedText = (sentences) => {\n    console.log('开始处理ADHD友好的静态高亮文本，句子数量:', sentences.length);\n    \n    let html = '<div class=\"pdf-content adhd-highlight-mode\">';\n    \n    sentences.forEach((sentence, sentenceIndex) => {\n      if (!sentence || sentence.trim() === '') {\n        console.log(`跳过空句子，索引: ${sentenceIndex}`);\n      return;\n    }\n    \n      // 清理和规范化文本\n      const cleanText = sentence\n        .trim()\n        .replace(/\\s+/g, ' ')  // 规范化空白字符\n        .replace(/&/g, '&amp;')  // 转义特殊字符\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n      \n      // 处理句子中的单词，为它们添加不同样式\n      const words = cleanText.split(/(\\s+)/);\n      let formattedSentence = '';\n      \n      words.forEach((word, wordIndex) => {\n        if (word.trim() === '') {\n          // 保留空格\n          formattedSentence += word;\n      } else {\n          // 根据位置应用不同的样式类\n          // 三种交替样式: 加粗、彩色、正常\n          const styleClass = wordIndex % 3 === 0 ? 'adhd-bold' : \n                           wordIndex % 3 === 1 ? 'adhd-colored' : 'adhd-normal';\n          \n          formattedSentence += `<span class=\"${styleClass}\">${word}</span>`;\n        }\n      });\n      \n      console.log(`处理句子 ${sentenceIndex + 1}:`, cleanText.substring(0, 50) + '...');\n      html += `<p class=\"pdf-paragraph\">${formattedSentence}</p>`;\n    });\n    \n    html += '</div>';\n    \n    // 调试输出\n    console.log('生成的ADHD友好静态高亮HTML:', html.substring(0, 200) + '...');\n    \n    return html;\n  };\n\n  // 根据阅读模式获取相应的内容处理函数\n  const getContentHandlerForMode = (mode) => {\n    switch(mode) {\n      case 'normal': return formatSentencesToHtml;\n      case 'static': return applyStaticHighlightToSentences;\n      case 'follow-mouse': return formatSentencesForMouseFollow;\n      case 'comfortable-3d': return applyComfortable3dEffectToSentences;\n      case 'flash-reading': \n        return (sentences) => {\n          // 闪读模式使用专门的分割函数重新处理文本\n          return createFlashReadingContentFromSentences(sentences);\n        };\n      default: return formatSentencesToHtml;\n    }\n  };\n\n  // 监听阅读模式和当前页面的变化\n  useEffect(() => {\n    if (readingMode === 'mouse-follow' && currentPage && !isTableOfContents) {\n      // 移除之前的样式\n      const oldStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (oldStyle) {\n        oldStyle.remove();\n      }\n      \n      // 添加基础鼠标跟随样式\n      const followModeStyle = document.createElement('style');\n      followModeStyle.id = 'basic-mouse-follow-style';\n      followModeStyle.textContent = `\n        .follow-line {\n          padding: 8px 12px;\n          margin: 4px 0;\n          border-radius: 4px;\n          transition: background-color 0.2s ease;\n        }\n        .follow-line.highlighted {\n          background-color: #ffa500;\n          color: #000080;\n          font-weight: bold;\n        }\n      `;\n      document.head.appendChild(followModeStyle);\n      \n      // 处理当前页面内容\n      const page = pdfDocument.getPage(currentPage);\n      const textContent = page.getTextContent();\n      const sentences = textContent.items\n        .map(item => item.str)\n        .join(' ')\n        .split(/[。！？]/)\n        .filter(s => s.trim());\n      \n      // 应用基础鼠标跟随格式化\n      setContent(formatSentencesForMouseFollow(sentences));\n      \n      // 添加鼠标跟随监听器\n      setTimeout(() => {\n        addMouseFollowListeners();\n      }, 100);\n      \n      return () => {\n        followModeStyle.remove();\n      };\n    }\n  }, [readingMode, currentPage, pdfDocument]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        <div className=\"logo\">\n          <h2>ADHD阅读助手</h2>\n        </div>\n        \n        <div className=\"reading-controls\">\n          <h3>阅读模式</h3>\n          <select \n            id=\"reading-mode-select\" \n            value={readingMode} \n            onChange={handleReadingModeChange}\n            className=\"mode-select\"\n          >\n            <option value=\"normal\">普通模式</option>\n            <option value=\"static\">静态高亮</option>\n            <option value=\"follow-mouse\">鼠标跟随</option>\n            <option value=\"rhythm\">节奏阅读</option>\n            <option value=\"flash-reading\">闪读模式</option>\n          </select>\n        </div>\n        \n        <div className=\"upload-section\">\n          <input\n            type=\"file\"\n            accept=\".pdf,.txt,.md\" \n            hidden\n            id=\"file-upload\"\n            onChange={handleFileUpload}\n            ref={fileRef}\n          />\n          <button \n            className=\"upload-btn\"\n            onClick={() => fileRef.current.click()}\n          >\n            上传文件 (.pdf/.txt/.md)\n          </button>\n      </div>\n            </div>\n      \n      <div className=\"main-content\">\n        <div className=\"toolbar\">\n          {fileName && <h3 className=\"filename\">{fileName}</h3>}\n          {/* 移除了原有翻页控件 */}\n            </div>\n        \n        <div className=\"page-content\" ref={readerContainerRef}>\n            <div dangerouslySetInnerHTML={{ __html: content }} />\n          \n          {totalPages > 0 && (\n            <div className=\"bottom-pagination\">\n              <button \n                onClick={() => changePage(-1)} \n                disabled={currentPage <= 1}\n                className=\"page-btn\"\n              >\n                上一页\n              </button>\n            <span className=\"page-info\">\n                第 {currentPage} / {totalPages} 页\n              </span>\n              <button \n                onClick={() => changePage(1)} \n                disabled={currentPage >= totalPages}\n                className=\"page-btn\"\n              >\n                下一页\n              </button>\n          </div>\n        )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App; \n"],"mappings":"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CAAC;;IAE1D;IACAE,kBAAkB,CAAC,CAAC;EACtB,CAAC;;EAED;EACA,MAAMO,mBAAmB,GAAGA,CAAA,KAAM;IAChC,MAAM9Y,KAAK,GAAGzB,QAAQ,CAACmB,aAAa,CAAC,OAAO,CAAC;IAC7CM,KAAK,CAACL,WAAW,GAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDpB,QAAQ,CAACiK,IAAI,CAAClI,WAAW,CAACN,KAAK,CAAC;;IAEhC;IACA,MAAM+Y,sBAAsB,GAAGxa,QAAQ,CAACmB,aAAa,CAAC,OAAO,CAAC;IAC9DqZ,sBAAsB,CAAChY,EAAE,GAAG,0BAA0B;IACtDgY,sBAAsB,CAAC7F,SAAS,GAAG;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACD3U,QAAQ,CAACiK,IAAI,CAAClI,WAAW,CAACyY,sBAAsB,CAAC;EACnD,CAAC;;EAED;EACApd,SAAS,CAAC,MAAM;IACdmd,mBAAmB,CAAC,CAAC;IACrBnQ,sBAAsB,CAAC,CAAC;;IAExB;IACA,MAAMqQ,gBAAgB,GAAGza,QAAQ,CAACmB,aAAa,CAAC,OAAO,CAAC;IACxDsZ,gBAAgB,CAACjY,EAAE,GAAG,gCAAgC;IACtDiY,gBAAgB,CAACrZ,WAAW,GAAG;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDpB,QAAQ,CAACiK,IAAI,CAAClI,WAAW,CAAC0Y,gBAAgB,CAAC;;IAE3C;IACA,MAAMhZ,KAAK,GAAGzB,QAAQ,CAACmB,aAAa,CAAC,OAAO,CAAC;IAC7CM,KAAK,CAACe,EAAE,GAAG,+BAA+B;IAC1Cf,KAAK,CAACL,WAAW,GAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDpB,QAAQ,CAACiK,IAAI,CAAClI,WAAW,CAACN,KAAK,CAAC;;IAEhC;IACA,MAAMiZ,oBAAoB,GAAG1a,QAAQ,CAACmB,aAAa,CAAC,OAAO,CAAC;IAC5DuZ,oBAAoB,CAAClY,EAAE,GAAG,0BAA0B;IACpDkY,oBAAoB,CAACtZ,WAAW,GAAG;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDpB,QAAQ,CAACiK,IAAI,CAAClI,WAAW,CAAC2Y,oBAAoB,CAAC;IAE/C,OAAO,MAAM;MACX,MAAMC,aAAa,GAAG3a,QAAQ,CAAC4E,cAAc,CAAC,+BAA+B,CAAC;MAC9E,IAAI+V,aAAa,EAAEA,aAAa,CAAC9V,MAAM,CAAC,CAAC;MAEzC,MAAM+V,wBAAwB,GAAG5a,QAAQ,CAAC4E,cAAc,CAAC,gCAAgC,CAAC;MAC1F,IAAIgW,wBAAwB,EAAEA,wBAAwB,CAAC/V,MAAM,CAAC,CAAC;MAE/D,MAAMgW,6BAA6B,GAAG7a,QAAQ,CAAC4E,cAAc,CAAC,0BAA0B,CAAC;MACzF,IAAIiW,6BAA6B,EAAEA,6BAA6B,CAAChW,MAAM,CAAC,CAAC;MAEzE6V,oBAAoB,CAAC7V,MAAM,CAAC,CAAC;IAC/B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMoK,qBAAqB,GAAGA,CAAA,KAAM;IAClC;IACAyJ,0BAA0B,CAAC,CAAC;;IAE5B;IACA3V,UAAU,CAAC,MAAM;MACfgL,uBAAuB,CAAC,CAAC;;MAEzB;MACA,MAAMC,WAAW,GAAGhO,QAAQ,CAACC,aAAa,CAAC,uBAAuB,CAAC;MACnE,IAAI+N,WAAW,EAAE;QACf,MAAMmD,KAAK,GAAGnD,WAAW,CAACjJ,gBAAgB,CAAC,cAAc,CAAC;QAC1D3F,OAAO,CAACC,GAAG,CAAC,eAAe8R,KAAK,CAAC/Q,MAAM,IAAI,CAAC;;QAE5C;QACA,IAAI,KAAK,EAAE;UAAE;UACX+Q,KAAK,CAAC7Q,OAAO,CAAC,CAACmO,IAAI,EAAEhM,KAAK,KAAK;YAC7BgM,IAAI,CAAChN,KAAK,CAACI,MAAM,GAAG,iBAAiB;YACrC4M,IAAI,CAACqM,YAAY,CAAC,OAAO,EAAE,KAAKrY,KAAK,GAAC,CAAC,EAAE,CAAC;UAC5C,CAAC,CAAC;QACJ;;QAEA;QACA,MAAMsY,SAAS,GAAG5J,KAAK,CAAC,CAAC,CAAC;QAC1B,IAAI4J,SAAS,EAAE;UACb3b,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAE;YACpBuC,OAAO,EAAE9D,MAAM,CAACgD,gBAAgB,CAACia,SAAS,CAAC,CAACnZ,OAAO;YACnDD,MAAM,EAAE7D,MAAM,CAACgD,gBAAgB,CAACia,SAAS,CAAC,CAACpZ,MAAM;YACjDqG,QAAQ,EAAElK,MAAM,CAACgD,gBAAgB,CAACia,SAAS,CAAC,CAAC/S,QAAQ;YACrD9E,UAAU,EAAEpF,MAAM,CAACgD,gBAAgB,CAACia,SAAS,CAAC,CAAC7X;UACjD,CAAC,CAAC;QACJ;MACF;IACF,CAAC,EAAE,GAAG,CAAC;EACT,CAAC;;EAED;EACA,MAAM8X,WAAW,GAAIC,KAAK,IAAK;IAC7Bnd,MAAM,CAACM,UAAU,CAACI,KAAK,GAAG4E,IAAI,CAACC,GAAG,CAAC,GAAG,EAAEvF,MAAM,CAACM,UAAU,CAACI,KAAK,GAAGyc,KAAK,CAAC;IAExE,IAAInd,MAAM,CAACM,UAAU,CAACE,UAAU,EAAE;MAChCqZ,cAAc,CAAC,CAAC;MAChBT,eAAe,CAAC,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAMjZ,UAAU,GAAG,MAAOgd,KAAK,IAAK;IAClC7b,OAAO,CAACC,GAAG,CAAC,aAAatB,WAAW,QAAQkd,KAAK,EAAE,CAAC;IACpD,MAAMC,OAAO,GAAGnd,WAAW,GAAGkd,KAAK;IAEnC,IAAIC,OAAO,GAAG,CAAC,IAAIA,OAAO,GAAGld,UAAU,EAAE;MACvCoB,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;MACrB;IACF;IAEJ,MAAM8b,gBAAgB,GAAGjS,WAAW,KAAK,QAAQ,IAAIpL,MAAM,CAACe,kBAAkB,CAACC,MAAM;IACrF,MAAMsc,eAAe,GAAGlS,WAAW,KAAK,eAAe,IAAIpL,MAAM,CAACsN,WAAW,IAAItN,MAAM,CAACsN,WAAW,CAACE,SAAS;IAE7G,IAAI6P,gBAAgB,IAAIrd,MAAM,CAACiB,YAAY,EAAE;MAC3CjB,MAAM,CAACiB,YAAY,CAAC2M,IAAI,CAAC,CAAC;IAC5B;IAEA,IAAI0P,eAAe,IAAItd,MAAM,CAACsN,WAAW,EAAE;MACzCtN,MAAM,CAACsN,WAAW,CAACxM,OAAO,CAAC,CAAC;IAC9B;;IAEA;IACAyJ,cAAc,CAAC6S,OAAO,CAAC;IAEvB,IAAI;MACF;MACA,MAAMrL,IAAI,GAAG,MAAMlG,WAAW,CAACmG,OAAO,CAACoL,OAAO,CAAC;;MAE/C;MACA,MAAM9Z,WAAW,GAAG,MAAMyO,IAAI,CAACE,cAAc,CAAC,CAAC;MAC/C,MAAMsL,KAAK,GAAG,MAAMlL,eAAe,CAAC/O,WAAW,CAAC;MAChD0I,oBAAoB,CAACuR,KAAK,CAAC;MAE3B,IAAIA,KAAK,EAAE;QACT;QACA,MAAMjL,cAAc,CAAChP,WAAW,EAAEyO,IAAI,CAACI,WAAW,CAAC;UAAEC,KAAK,EAAE;QAAI,CAAC,CAAC,CAAC;MACrE,CAAC,MAAM;QACL;QACA,MAAMI,SAAS,GAAGlP,WAAW,CAACmP,KAAK;QACnC,IAAIoC,aAAa,GAAGrC,SAAS,CAACtK,GAAG,CAACyK,IAAI,IAAIA,IAAI,CAACC,GAAG,CAAC,CAACzK,IAAI,CAAC,GAAG,CAAC;QAC7D0M,aAAa,GAAGA,aAAa,CAACC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAClS,IAAI,CAAC,CAAC;;QAEzD;QACA,MAAM6J,SAAS,GAAGsI,kBAAkB,CAACF,aAAa,CAAC;;QAEnD;QACA,IAAIzJ,WAAW,KAAK,QAAQ,EAAE;UAC5B9J,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;UAC1B,MAAMyT,gBAAgB,GAAGE,2BAA2B,CAACzI,SAAS,CAAC;UAC/Db,UAAU,CAACoJ,gBAAgB,CAAC;;UAE5B;UACA/P,UAAU,CAAC,MAAM;YACf,MAAMiL,WAAW,GAAGhO,QAAQ,CAACC,aAAa,CAAC,sBAAsB,CAAC;YAClE,IAAI+N,WAAW,EAAE;cACf5O,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;cACzB,MAAMqN,UAAU,GAAGsB,WAAW,CAACjJ,gBAAgB,CAAC,gBAAgB,CAAC;cACjE3F,OAAO,CAACC,GAAG,CAAC,MAAMqN,UAAU,CAACtM,MAAM,MAAM,CAAC;;cAE1C;cACA,IAAIsM,UAAU,CAACtM,MAAM,GAAG,CAAC,EAAE;gBACzB,MAAMgT,SAAS,GAAG1G,UAAU,CAAC,CAAC,CAAC;gBAC/B,MAAM2G,MAAM,GAAGvV,MAAM,CAACgD,gBAAgB,CAACsS,SAAS,CAAC;gBACjDhU,OAAO,CAACC,GAAG,CAAC,UAAU,EAAE;kBACtBqD,KAAK,EAAE2Q,MAAM,CAAC3Q,KAAK;kBACnBZ,eAAe,EAAEuR,MAAM,CAACvR,eAAe;kBACvCwR,UAAU,EAAED,MAAM,CAACC,UAAU;kBAC7BtL,QAAQ,EAAEqL,MAAM,CAACrL;gBACnB,CAAC,CAAC;cACJ;YACF;UACF,CAAC,EAAE,GAAG,CAAC;QACT,CAAC,MAAM,IAAIkB,WAAW,KAAK,eAAe,EAAE;UAC1C;UACA,IAAI;YACF,MAAM2G,IAAI,GAAG,MAAMlG,WAAW,CAACmG,OAAO,CAAC/R,WAAW,CAAC;YACnD,MAAMqD,WAAW,GAAG,MAAMyO,IAAI,CAACE,cAAc,CAAC,CAAC;YAC/C,MAAMO,SAAS,GAAGlP,WAAW,CAACmP,KAAK;YACnC,IAAIoC,aAAa,GAAGrC,SAAS,CAACtK,GAAG,CAACyK,IAAI,IAAIA,IAAI,CAACC,GAAG,CAAC,CAACzK,IAAI,CAAC,GAAG,CAAC;YAC7D0M,aAAa,GAAGA,aAAa,CAACC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAClS,IAAI,CAAC,CAAC;;YAEzD;YACA,MAAMqT,QAAQ,GAAGD,6BAA6B,CAACnB,aAAa,CAAC;;YAE7D;YACA,MAAMG,gBAAgB,GAAGK,sCAAsC,CAACY,QAAQ,CAAC;YACzErK,UAAU,CAACoJ,gBAAgB,CAAC;;YAE5B;YACA/P,UAAU,CAAC,MAAM;cACfuH,sBAAsB,CAAC,CAAC;YAC1B,CAAC,EAAE,GAAG,CAAC;UACT,CAAC,CAAC,OAAOjK,KAAK,EAAE;YACdjB,OAAO,CAACiB,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;UACpC;UACA,OAAO,CAAC;QACV,CAAC,MAAM;UACL;UACA,MAAMgQ,kBAAkB,CAACR,IAAI,EAAE3G,WAAW,CAAC;QAC7C;MACF;;MAEA;MACA,IAAIA,WAAW,KAAK,cAAc,EAAE;QAClCnG,UAAU,CAAC,MAAM;UACfgL,uBAAuB,CAAC,CAAC;QAC3B,CAAC,EAAE,EAAE,CAAC;MACR;IACF,CAAC,CAAC,OAAO1N,KAAK,EAAE;MACdjB,OAAO,CAACiB,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;IACjC;EACF,CAAC;;EAED;EACA,MAAM2S,2BAA2B,GAAIzI,SAAS,IAAK;IACjDnL,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEkL,SAAS,CAACnK,MAAM,CAAC;IAExD,IAAIwM,IAAI,GAAG,+CAA+C;IAE1DrC,SAAS,CAACjK,OAAO,CAAC,CAACsT,QAAQ,EAAE0H,aAAa,KAAK;MAC7C,IAAI,CAAC1H,QAAQ,IAAIA,QAAQ,CAAClT,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QACvCtB,OAAO,CAACC,GAAG,CAAC,aAAaic,aAAa,EAAE,CAAC;QAC3C;MACF;;MAEE;MACA,MAAMC,SAAS,GAAG3H,QAAQ,CACvBlT,IAAI,CAAC,CAAC,CACNkS,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAE;MAAA,CACtBA,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAE;MAAA,CACxBA,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CACrBA,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC;;MAExB;MACA,MAAM7F,KAAK,GAAGwO,SAAS,CAAC5O,KAAK,CAAC,OAAO,CAAC;MACtC,IAAI6O,iBAAiB,GAAG,EAAE;MAE1BzO,KAAK,CAACzM,OAAO,CAAC,CAAC2M,IAAI,EAAEwO,SAAS,KAAK;QACjC,IAAIxO,IAAI,CAACvM,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;UACtB;UACA8a,iBAAiB,IAAIvO,IAAI;QAC7B,CAAC,MAAM;UACH;UACA;UACA,MAAMyO,UAAU,GAAGD,SAAS,GAAG,CAAC,KAAK,CAAC,GAAG,WAAW,GACnCA,SAAS,GAAG,CAAC,KAAK,CAAC,GAAG,cAAc,GAAG,aAAa;UAErED,iBAAiB,IAAI,gBAAgBE,UAAU,KAAKzO,IAAI,SAAS;QACnE;MACF,CAAC,CAAC;MAEF7N,OAAO,CAACC,GAAG,CAAC,QAAQic,aAAa,GAAG,CAAC,GAAG,EAAEC,SAAS,CAAC1M,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;MAC7EjC,IAAI,IAAI,4BAA4B4O,iBAAiB,MAAM;IAC7D,CAAC,CAAC;IAEF5O,IAAI,IAAI,QAAQ;;IAEhB;IACAxN,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEuN,IAAI,CAACiC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK,CAAC;IAEjE,OAAOjC,IAAI;EACb,CAAC;;EAED;EACA,MAAM4L,wBAAwB,GAAI9F,IAAI,IAAK;IACzC,QAAOA,IAAI;MACT,KAAK,QAAQ;QAAE,OAAOK,qBAAqB;MAC3C,KAAK,QAAQ;QAAE,OAAOmB,+BAA+B;MACrD,KAAK,cAAc;QAAE,OAAOjB,6BAA6B;MACzD,KAAK,gBAAgB;QAAE,OAAOC,mCAAmC;MACjE,KAAK,eAAe;QAClB,OAAQ3I,SAAS,IAAK;UACpB;UACA,OAAO4I,sCAAsC,CAAC5I,SAAS,CAAC;QAC1D,CAAC;MACH;QAAS,OAAOwI,qBAAqB;IACvC;EACF,CAAC;;EAED;EACA3V,SAAS,CAAC,MAAM;IACd,IAAI8L,WAAW,KAAK,cAAc,IAAInL,WAAW,IAAI,CAAC8L,iBAAiB,EAAE;MACvE;MACA,MAAM8R,QAAQ,GAAG3b,QAAQ,CAAC4E,cAAc,CAAC,gCAAgC,CAAC;MAC1E,IAAI+W,QAAQ,EAAE;QACZA,QAAQ,CAAC9W,MAAM,CAAC,CAAC;MACnB;;MAEA;MACA,MAAM+W,eAAe,GAAG5b,QAAQ,CAACmB,aAAa,CAAC,OAAO,CAAC;MACvDya,eAAe,CAACpZ,EAAE,GAAG,0BAA0B;MAC/CoZ,eAAe,CAACxa,WAAW,GAAG;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;MACDpB,QAAQ,CAACiK,IAAI,CAAClI,WAAW,CAAC6Z,eAAe,CAAC;;MAE1C;MACA,MAAM/L,IAAI,GAAGlG,WAAW,CAACmG,OAAO,CAAC/R,WAAW,CAAC;MAC7C,MAAMqD,WAAW,GAAGyO,IAAI,CAACE,cAAc,CAAC,CAAC;MACzC,MAAMxF,SAAS,GAAGnJ,WAAW,CAACmP,KAAK,CAChCvK,GAAG,CAACyK,IAAI,IAAIA,IAAI,CAACC,GAAG,CAAC,CACrBzK,IAAI,CAAC,GAAG,CAAC,CACT0G,KAAK,CAAC,OAAO,CAAC,CACdkJ,MAAM,CAACgG,CAAC,IAAIA,CAAC,CAACnb,IAAI,CAAC,CAAC,CAAC;;MAExB;MACAgJ,UAAU,CAACuJ,6BAA6B,CAAC1I,SAAS,CAAC,CAAC;;MAEpD;MACAxH,UAAU,CAAC,MAAM;QACfgL,uBAAuB,CAAC,CAAC;MAC3B,CAAC,EAAE,GAAG,CAAC;MAEP,OAAO,MAAM;QACX6N,eAAe,CAAC/W,MAAM,CAAC,CAAC;MAC1B,CAAC;IACH;EACF,CAAC,EAAE,CAACqE,WAAW,EAAEnL,WAAW,EAAE4L,WAAW,CAAC,CAAC;EAE3C,oBACEjM,OAAA;IAAK2D,SAAS,EAAC,KAAK;IAAAya,QAAA,gBAClBpe,OAAA;MAAK2D,SAAS,EAAC,SAAS;MAAAya,QAAA,gBACtBpe,OAAA;QAAK2D,SAAS,EAAC,MAAM;QAAAya,QAAA,eACnBpe,OAAA;UAAAoe,QAAA,EAAI;QAAQ;UAAAvT,QAAA,EAAAwT,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAA1T,QAAA,EAAAwT,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACd,CAAC,eAENve,OAAA;QAAK2D,SAAS,EAAC,kBAAkB;QAAAya,QAAA,gBAC/Bpe,OAAA;UAAAoe,QAAA,EAAI;QAAI;UAAAvT,QAAA,EAAAwT,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACbve,OAAA;UACE8E,EAAE,EAAC,qBAAqB;UACxB4E,KAAK,EAAE8B,WAAY;UACnBgT,QAAQ,EAAE7D,uBAAwB;UAClChX,SAAS,EAAC,aAAa;UAAAya,QAAA,gBAEvBpe,OAAA;YAAQ0J,KAAK,EAAC,QAAQ;YAAA0U,QAAA,EAAC;UAAI;YAAAvT,QAAA,EAAAwT,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACpCve,OAAA;YAAQ0J,KAAK,EAAC,QAAQ;YAAA0U,QAAA,EAAC;UAAI;YAAAvT,QAAA,EAAAwT,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACpCve,OAAA;YAAQ0J,KAAK,EAAC,cAAc;YAAA0U,QAAA,EAAC;UAAI;YAAAvT,QAAA,EAAAwT,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC1Cve,OAAA;YAAQ0J,KAAK,EAAC,QAAQ;YAAA0U,QAAA,EAAC;UAAI;YAAAvT,QAAA,EAAAwT,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACpCve,OAAA;YAAQ0J,KAAK,EAAC,eAAe;YAAA0U,QAAA,EAAC;UAAI;YAAAvT,QAAA,EAAAwT,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAA1T,QAAA,EAAAwT,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrC,CAAC;MAAA;QAAA1T,QAAA,EAAAwT,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,eAENve,OAAA;QAAK2D,SAAS,EAAC,gBAAgB;QAAAya,QAAA,gBAC7Bpe,OAAA;UACEuJ,IAAI,EAAC,MAAM;UACXkV,MAAM,EAAC,eAAe;UACtBC,MAAM;UACN5Z,EAAE,EAAC,aAAa;UAChB0Z,QAAQ,EAAEpH,gBAAiB;UAC3BuH,GAAG,EAAE1T;QAAQ;UAAAJ,QAAA,EAAAwT,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACd,CAAC,eACFve,OAAA;UACE2D,SAAS,EAAC,YAAY;UACtBib,OAAO,EAAEA,CAAA,KAAM3T,OAAO,CAACkO,OAAO,CAAC0F,KAAK,CAAC,CAAE;UAAAT,QAAA,EACxC;QAED;UAAAvT,QAAA,EAAAwT,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAA1T,QAAA,EAAAwT,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC;IAAA;MAAA1T,QAAA,EAAAwT,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACK,CAAC,eAEZve,OAAA;MAAK2D,SAAS,EAAC,cAAc;MAAAya,QAAA,gBAC3Bpe,OAAA;QAAK2D,SAAS,EAAC,SAAS;QAAAya,QAAA,EACrBvT,QAAQ,iBAAI7K,OAAA;UAAI2D,SAAS,EAAC,UAAU;UAAAya,QAAA,EAAEvT;QAAQ;UAAAA,QAAA,EAAAwT,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK;MAAC;QAAA1T,QAAA,EAAAwT,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAE9C,CAAC,eAEVve,OAAA;QAAK2D,SAAS,EAAC,cAAc;QAACgb,GAAG,EAAE7S,kBAAmB;QAAAsS,QAAA,gBAClDpe,OAAA;UAAK8e,uBAAuB,EAAE;YAAEC,MAAM,EAAEhT;UAAQ;QAAE;UAAAlB,QAAA,EAAAwT,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,EAEtDje,UAAU,GAAG,CAAC,iBACbN,OAAA;UAAK2D,SAAS,EAAC,mBAAmB;UAAAya,QAAA,gBAChCpe,OAAA;YACE4e,OAAO,EAAEA,CAAA,KAAMre,UAAU,CAAC,CAAC,CAAC,CAAE;YAC9BuN,QAAQ,EAAEzN,WAAW,IAAI,CAAE;YAC3BsD,SAAS,EAAC,UAAU;YAAAya,QAAA,EACrB;UAED;YAAAvT,QAAA,EAAAwT,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACXve,OAAA;YAAM2D,SAAS,EAAC,WAAW;YAAAya,QAAA,GAAC,SACtB,EAAC/d,WAAW,EAAC,KAAG,EAACC,UAAU,EAAC,SAChC;UAAA;YAAAuK,QAAA,EAAAwT,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eACPve,OAAA;YACE4e,OAAO,EAAEA,CAAA,KAAMre,UAAU,CAAC,CAAC,CAAE;YAC7BuN,QAAQ,EAAEzN,WAAW,IAAIC,UAAW;YACpCqD,SAAS,EAAC,UAAU;YAAAya,QAAA,EACrB;UAED;YAAAvT,QAAA,EAAAwT,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAA1T,QAAA,EAAAwT,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACR,CACN;MAAA;QAAA1T,QAAA,EAAAwT,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC;IAAA;MAAA1T,QAAA,EAAAwT,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAA1T,QAAA,EAAAwT,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC/T,EAAA,CA/hFID,GAAG;AAAAyU,EAAA,GAAHzU,GAAG;AAiiFT,eAAeA,GAAG;AAAC,IAAAyU,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}