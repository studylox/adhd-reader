{"ast":null,"code":"var _jsxFileName = \"D:\\\\adhd-read-helper\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 添加全局事件跟踪对象\nwindow.eventTracker = window.eventTracker || {\n  mouseFollowHandlers: []\n};\n\n// 自动阅读器全局对象\nwindow.autoReader = {\n  charPositions: [],\n  intervalId: null,\n  currentIndex: 0,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false,\n  cleanup: null\n};\n\n// 添加新的节奏阅读模式代码\n// 全局变量，确保在页面切换后仍然保持状态\nwindow.rhythmReaderGlobal = window.rhythmReaderGlobal || {\n  active: false,\n  speed: 300\n};\n\n// 节奏阅读模式 - 仅限阅读区域版本\n(function () {\n  console.log(\"节奏阅读模式初始化中...\");\n\n  // 停止任何现有实例\n  if (window.rhythmReader && window.rhythmReader.stop) {\n    window.rhythmReader.stop();\n  }\n\n  // UI通知函数\n  const showNotification = function (message, type = 'info') {\n    console.log(\"显示通知:\", message, type);\n\n    // 移除已有的通知\n    const existingNotification = document.getElementById('rhythm-notification');\n    if (existingNotification) {\n      existingNotification.remove();\n    }\n\n    // 创建通知元素\n    const notification = document.createElement('div');\n    notification.id = 'rhythm-notification';\n\n    // 根据类型设置颜色\n    const bgColor = type === 'info' ? '#3498db' : type === 'success' ? '#2ecc71' : type === 'warning' ? '#f1c40f' : '#e74c3c';\n\n    // 使用内联样式确保不被覆盖\n    notification.innerHTML = `\n      <div style=\"\n        position: fixed;\n        top: 20px;\n        left: 50%;\n        transform: translateX(-50%);\n        background-color: ${bgColor};\n        color: white;\n        padding: 12px 24px;\n        border-radius: 4px;\n        box-shadow: 0 3px 10px rgba(0,0,0,0.3);\n        z-index: 999999;\n        font-size: 16px;\n        font-weight: bold;\n        text-align: center;\n        min-width: 200px;\n        pointer-events: none;\n      \">${message}</div>\n    `;\n    document.body.appendChild(notification);\n\n    // 自动隐藏\n    setTimeout(() => {\n      if (notification.parentNode) {\n        notification.remove();\n      }\n    }, 2500);\n  };\n\n  // 节奏阅读功能\n  const rhythmReader = {\n    active: false,\n    intervalId: null,\n    speed: 300,\n    currentIndex: 0,\n    readIndices: new Set(),\n    charElements: [],\n    showNotification: showNotification,\n    // 暴露通知函数\n\n    // 启动节奏阅读\n    start: function () {\n      // 已经启动则不重复操作\n      if (this.active) return;\n      console.log(\"启动节奏阅读模式\");\n\n      // 显示通知\n      showNotification(\"节奏阅读模式已开启\", \"success\");\n\n      // 设置为活动状态\n      this.active = true;\n\n      // 初始化文本 - 这里是关键改进部分\n      if (!this.initializeTextNodes()) {\n        console.error(\"无法初始化文本节点\");\n        this.active = false;\n        showNotification(\"无法启动节奏阅读模式：未找到内容区域\", \"error\");\n        return;\n      }\n\n      // 重置阅读位置\n      this.currentIndex = 0;\n      this.readIndices.clear();\n\n      // 添加速度滑块\n      this.addSpeedSlider();\n\n      // 更新颜色\n      this.updateTextColors();\n\n      // 滚动到开始位置\n      this.scrollToCurrentChar();\n\n      // 设置阅读间隔\n      this.intervalId = setInterval(() => this.moveToNextChar(), this.speed);\n    },\n    // 停止节奏阅读\n    stop: function () {\n      if (!this.active) return;\n      console.log(\"停止节奏阅读模式\");\n\n      // 显示通知\n      showNotification(\"节奏阅读模式已关闭\", \"info\");\n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n      }\n      this.active = false;\n\n      // 恢复原始文本\n      this.restoreOriginalText();\n\n      // 移除速度滑块\n      const slider = document.getElementById('rhythm-speed-slider');\n      if (slider) slider.remove();\n    },\n    // 完全重写 - 初始化文本节点，只针对阅读区域\n    initializeTextNodes: function () {\n      // 重置字符元素数组\n      this.charElements = [];\n\n      // 尝试找到主要阅读区域容器\n      const contentSelectors = [\n      // PDF应用特定选择器 - 添加在最前面优先级最高\n      '.pdf-content', '.page-content', '.pdf-container', '#pdf-content', '#pdf-container',\n      // PDF段落和文本元素\n      '.pdf-paragraph', '.pdf-text', '.pdf-line',\n      // 常见的文章/阅读内容容器选择器\n      'article', '.article', '.post', '.content', '.post-content', '.article-content', '.entry-content', '.main-content', '.reading-content', '.book-content', '.chapter-content', '#content', '#main-content', '#article-content', '[role=\"main\"]', 'main', '.page-content'];\n      let contentContainer = null;\n\n      // 尝试找到阅读区域容器\n      for (const selector of contentSelectors) {\n        const elements = document.querySelectorAll(selector);\n        for (const element of elements) {\n          // 确认元素可见且有内容\n          if (element.offsetParent !== null && element.textContent.trim().length > 50) {\n            // 降低长度要求以匹配更多内容\n            contentContainer = element;\n            console.log(`找到阅读区域: ${selector}`);\n            break;\n          }\n        }\n        if (contentContainer) break;\n      }\n\n      // 如果没有找到明确的阅读区域，尝试直接查找PDF段落元素\n      if (!contentContainer) {\n        console.log(\"未找到明确的阅读区域容器，尝试直接查找PDF段落元素\");\n        const pdfParagraphs = document.querySelectorAll('.pdf-paragraph');\n        if (pdfParagraphs && pdfParagraphs.length > 0) {\n          console.log(`找到 ${pdfParagraphs.length} 个PDF段落元素，使用它们的父元素作为内容容器`);\n\n          // 使用第一个段落的父元素作为内容容器\n          contentContainer = pdfParagraphs[0].parentElement;\n\n          // 直接处理段落元素\n          for (const paragraph of pdfParagraphs) {\n            if (paragraph.textContent.trim().length > 0) {\n              const textNode = document.createTextNode(paragraph.textContent);\n              const textNodes = [textNode];\n\n              // 为每个文本节点创建字符span\n              textNodes.forEach(node => {\n                const text = node.nodeValue;\n                if (!text || text.trim() === '') return;\n\n                // 创建文档片段来存放字符span\n                const fragment = document.createDocumentFragment();\n\n                // 为每个字符创建span\n                for (let i = 0; i < text.length; i++) {\n                  const char = text[i];\n                  const span = document.createElement('span');\n                  span.textContent = char;\n                  span.className = 'rhythm-char';\n                  span.dataset.rhythmIndex = this.charElements.length;\n\n                  // 如果是空白字符，添加一个标志\n                  if (char.trim() === '') {\n                    span.dataset.whitespace = 'true';\n                  }\n\n                  // 设置样式\n                  span.style.cssText = `\n                    display: inline;\n                    margin: 0;\n                    padding: 0;\n                    border: none;\n                    background-color: transparent;\n                  `;\n                  fragment.appendChild(span);\n                  this.charElements.push(span);\n                }\n\n                // 清空段落原有内容并添加处理后的span元素\n                while (paragraph.firstChild) {\n                  paragraph.removeChild(paragraph.firstChild);\n                }\n                paragraph.appendChild(fragment);\n              });\n            }\n          }\n          console.log(`直接处理段落元素后创建了 ${this.charElements.length} 个字符span`);\n          return this.charElements.length > 0;\n        }\n      }\n\n      // 如果没有找到明确的阅读区域，尝试基于文本密度识别\n      if (!contentContainer) {\n        console.log(\"未找到明确的阅读区域，尝试基于文本密度识别\");\n        contentContainer = this.findContentByTextDensity();\n      }\n\n      // 如果仍然没有找到，使用body但严格过滤\n      if (!contentContainer) {\n        console.log(\"未找到阅读区域，使用body但严格过滤\");\n        contentContainer = document.body;\n      }\n\n      // 查找文本节点并处理\n      const textNodes = [];\n      this.findTextNodes(contentContainer, textNodes);\n      console.log(`找到 ${textNodes.length} 个文本节点`);\n      if (textNodes.length === 0) {\n        console.error(\"未找到任何文本节点\");\n        return false;\n      }\n\n      // 为每个文本节点创建字符span\n      textNodes.forEach(node => {\n        const text = node.nodeValue;\n        if (!text || text.trim() === '') return;\n\n        // 创建文档片段来存放字符span\n        const fragment = document.createDocumentFragment();\n\n        // 为每个字符创建span\n        for (let i = 0; i < text.length; i++) {\n          const char = text[i];\n          const span = document.createElement('span');\n          span.textContent = char;\n          span.className = 'rhythm-char';\n          span.dataset.rhythmIndex = this.charElements.length;\n\n          // 如果是空白字符，添加一个标志\n          if (char.trim() === '') {\n            span.dataset.whitespace = 'true';\n          }\n\n          // 设置样式\n          span.style.cssText = `\n            display: inline;\n            margin: 0;\n            padding: 0;\n            border: none;\n            background-color: transparent;\n          `;\n          fragment.appendChild(span);\n          this.charElements.push(span);\n        }\n\n        // 替换原始节点\n        if (node.parentNode) {\n          node.parentNode.replaceChild(fragment, node);\n        }\n      });\n      console.log(`总共创建了 ${this.charElements.length} 个字符span`);\n      return this.charElements.length > 0;\n    },\n    // 新增 - 基于文本密度识别主要内容区域\n    findContentByTextDensity: function () {\n      // 获取所有可能的内容容器\n      const possibleContainers = Array.from(document.body.querySelectorAll('div, section, main, article'));\n\n      // 计算每个容器的文本密度分数\n      const containerScores = possibleContainers.map(container => {\n        // 跳过隐藏元素\n        if (container.offsetParent === null) return {\n          container,\n          score: 0\n        };\n\n        // 跳过已知的UI容器\n        const id = container.id || '';\n        const className = container.className || '';\n        if (/header|footer|nav|menu|sidebar|toolbar|comment|share|related/i.test(id) || /header|footer|nav|menu|sidebar|toolbar|comment|share|related/i.test(className)) {\n          return {\n            container,\n            score: 0\n          };\n        }\n\n        // 计算文本密度\n        const text = container.textContent || '';\n        const textLength = text.trim().length;\n\n        // 计算文本密度分数 - 考虑文本长度和段落数量\n        let score = textLength;\n\n        // 加分：包含段落标签是个好迹象\n        const paragraphs = container.querySelectorAll('p');\n        if (paragraphs.length > 0) {\n          score += paragraphs.length * 50;\n        }\n\n        // 减分：包含太多链接是内容区域的反向指标\n        const links = container.querySelectorAll('a');\n        if (links.length > 5) {\n          score -= links.length * 10;\n        }\n\n        // 减分：包含表单元素通常不是内容区域\n        const formElements = container.querySelectorAll('input, button, select');\n        if (formElements.length > 0) {\n          score -= formElements.length * 20;\n        }\n        return {\n          container,\n          score\n        };\n      });\n\n      // 按分数降序排序\n      containerScores.sort((a, b) => b.score - a.score);\n\n      // 返回分数最高的容器\n      if (containerScores.length > 0 && containerScores[0].score > 100) {\n        console.log(`基于文本密度找到内容区域，分数: ${containerScores[0].score}`);\n        return containerScores[0].container;\n      }\n      return null;\n    },\n    // 完全重写 - 更严格地筛选文本节点，排除UI元素\n    findTextNodes: function (element, textNodes) {\n      // 判断是否为UI元素的辅助函数\n      const isUIElement = node => {\n        if (!(node instanceof Element)) return false;\n\n        // 如果是PDF段落元素，则不要排除\n        if (node.classList && (node.classList.contains('pdf-paragraph') || node.classList.contains('pdf-text') || node.classList.contains('pdf-content'))) {\n          return false;\n        }\n\n        // 1. 通过标签名排除\n        const tagName = node.tagName.toLowerCase();\n        const uiTags = ['nav', 'header', 'footer', 'button', 'input', 'select', 'option', 'textarea', 'form', 'label'];\n        if (uiTags.includes(tagName)) return true;\n\n        // 2. 通过ID和类名排除\n        const id = (node.id || '').toLowerCase();\n        const className = (node.className || '').toString().toLowerCase();\n\n        // 常见的UI关键词\n        const uiKeywords = ['nav', 'navigation', 'menu', 'header', 'footer', 'sidebar', 'toolbar', 'control', 'button', 'tab', 'pagination', 'next', 'prev', 'previous', 'upload', 'download', 'search', 'title', 'heading', 'breadcrumb', 'action', 'toolbar'];\n\n        // 移除\"page\"关键词，避免误判PDF页面内容\n\n        for (const keyword of uiKeywords) {\n          if (id.includes(keyword) || className.includes(keyword)) {\n            return true;\n          }\n        }\n\n        // 3. 通过角色属性排除\n        const role = node.getAttribute('role');\n        if (role && ['button', 'navigation', 'menu', 'tab', 'tablist', 'toolbar', 'menubar', 'menuitem'].includes(role)) {\n          return true;\n        }\n\n        // 4. 通过样式排除固定位置的元素\n        const style = window.getComputedStyle(node);\n        if (style.position === 'fixed' || style.position === 'sticky') {\n          return true;\n        }\n        return false;\n      };\n\n      // 判断祖先元素是否为UI元素\n      const hasUIAncestor = node => {\n        let current = node.parentElement;\n        while (current && current !== document.body) {\n          if (isUIElement(current)) {\n            return true;\n          }\n          current = current.parentElement;\n        }\n        return false;\n      };\n\n      // 递归处理子节点\n      for (let i = 0; i < element.childNodes.length; i++) {\n        const node = element.childNodes[i];\n\n        // 如果是文本节点且有内容\n        if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() !== '') {\n          // 不处理UI元素中的文本\n          if (!hasUIAncestor(node) && !isUIElement(node.parentElement)) {\n            // 放宽长度限制，允许更短的文本片段\n            if (node.nodeValue.trim().length > 0) {\n              textNodes.push(node);\n            }\n          }\n        }\n        // 特殊处理PDF段落元素\n        else if (node.nodeType === Node.ELEMENT_NODE && node.classList && node.classList.contains('pdf-paragraph')) {\n          // 为PDF段落元素创建一个文本节点\n          const text = node.textContent;\n          if (text && text.trim() !== '') {\n            const textNode = document.createTextNode(text);\n            textNodes.push(textNode);\n            console.log(\"添加PDF段落文本:\", text.substring(0, 30) + (text.length > 30 ? \"...\" : \"\"));\n          }\n        }\n        // 如果是元素节点且不是UI元素，递归处理\n        else if (node.nodeType === Node.ELEMENT_NODE && !isUIElement(node) && !hasUIAncestor(node)) {\n          this.findTextNodes(node, textNodes);\n        }\n      }\n    },\n    // 其他方法保持不变...\n    updateTextColors: function () {\n      if (this.charElements.length === 0) return;\n      this.charElements.forEach((span, index) => {\n        // 确定颜色\n        let color;\n        let fontWeight = 'inherit';\n        if (index === this.currentIndex) {\n          color = '#00aa00'; // 当前阅读的字 - 绿色\n          fontWeight = 'bold';\n        } else if (index === this.currentIndex + 1 || index === this.currentIndex + 2) {\n          color = '#aaaaaa'; // 接下来两个字 - 淡灰色\n        } else if (this.readIndices.has(index)) {\n          color = '#ffffff'; // 已读字符 - 白色（表示已读）\n        } else {\n          color = 'rgba(160, 160, 160, 0.25)'; // 未读字符 - 非常淡的灰色\n        }\n        span.style.color = color;\n        span.style.fontWeight = fontWeight;\n      });\n    },\n    // 移动到下一个字符\n    moveToNextChar: function () {\n      if (!this.active || this.charElements.length === 0) return;\n\n      // 将当前字符标记为已读\n      this.readIndices.add(this.currentIndex);\n\n      // 移动到下一个非空白字符\n      do {\n        this.currentIndex++;\n\n        // 检查是否到达末尾\n        if (this.currentIndex >= this.charElements.length) {\n          console.log(\"已到达页尾\");\n          // 显示通知\n          showNotification(\"已到达文章末尾\", \"info\");\n          this.stop();\n          return;\n        }\n      } while (this.currentIndex < this.charElements.length && this.charElements[this.currentIndex] && this.charElements[this.currentIndex].dataset.whitespace === 'true');\n\n      // 更新颜色\n      this.updateTextColors();\n\n      // 滚动到当前字符\n      this.scrollToCurrentChar();\n    },\n    // 滚动到当前字符\n    scrollToCurrentChar: function () {\n      const span = this.charElements[this.currentIndex];\n      if (!span) return;\n      const rect = span.getBoundingClientRect();\n\n      // 窗口滚动\n      const viewportHeight = window.innerHeight;\n      const idealPosition = viewportHeight * 0.4; // 屏幕40%的位置\n\n      window.scrollTo({\n        top: window.scrollY + rect.top - idealPosition,\n        behavior: 'smooth'\n      });\n    },\n    // 添加速度滑块\n    addSpeedSlider: function () {\n      let slider = document.getElementById('rhythm-speed-slider');\n      if (slider) slider.remove();\n      const container = document.createElement('div');\n      container.id = 'rhythm-speed-slider';\n      container.style.cssText = `\n        position: fixed;\n        top: 70px;\n        right: 20px;\n        background-color: rgba(0, 0, 0, 0.7);\n        padding: 10px;\n        border-radius: 5px;\n        box-shadow: 0 2px 5px rgba(0,0,0,0.2);\n        z-index: 10000;\n        display: flex;\n        align-items: center;\n        max-width: 300px;\n        color: white;\n      `;\n      const label = document.createElement('label');\n      label.textContent = '速度: ';\n      label.style.marginRight = '8px';\n      container.appendChild(label);\n      const input = document.createElement('input');\n      input.type = 'range';\n      input.min = '50';\n      input.max = '800';\n      input.step = '50';\n      input.value = this.speed;\n      input.style.width = '120px';\n      const valueDisplay = document.createElement('span');\n      valueDisplay.textContent = `${this.speed}ms`;\n      valueDisplay.style.marginLeft = '8px';\n      valueDisplay.style.minWidth = '60px';\n      const self = this;\n      input.addEventListener('input', function () {\n        const newSpeed = parseInt(this.value);\n        self.speed = newSpeed;\n        valueDisplay.textContent = `${newSpeed}ms`;\n        if (self.intervalId) {\n          clearInterval(self.intervalId);\n          self.intervalId = setInterval(() => self.moveToNextChar(), newSpeed);\n        }\n      });\n      container.appendChild(input);\n      container.appendChild(valueDisplay);\n      document.body.appendChild(container);\n    },\n    // 恢复原始文本\n    restoreOriginalText: function () {\n      const charSpans = document.querySelectorAll('.rhythm-char');\n      if (charSpans.length === 0) return;\n\n      // 按父节点分组\n      const parentNodeMap = new Map();\n      charSpans.forEach(span => {\n        const parent = span.parentNode;\n        if (!parent) return;\n        if (!parentNodeMap.has(parent)) {\n          parentNodeMap.set(parent, []);\n        }\n        parentNodeMap.get(parent).push(span);\n      });\n\n      // 对每个父节点，将连续的字符span合并回文本节点\n      parentNodeMap.forEach((spans, parent) => {\n        if (spans.length === 0) return;\n\n        // 排序spans确保顺序正确\n        spans.sort((a, b) => {\n          const indexA = parseInt(a.dataset.rhythmIndex || '0');\n          const indexB = parseInt(b.dataset.rhythmIndex || '0');\n          return indexA - indexB;\n        });\n\n        // 尝试将spans分组\n        const groups = [];\n        let currentGroup = [spans[0]];\n        for (let i = 1; i < spans.length; i++) {\n          const prevIndex = parseInt(spans[i - 1].dataset.rhythmIndex || '0');\n          const currentIndex = parseInt(spans[i].dataset.rhythmIndex || '0');\n          if (currentIndex === prevIndex + 1 && spans[i].previousSibling === spans[i - 1]) {\n            currentGroup.push(spans[i]);\n          } else {\n            groups.push(currentGroup);\n            currentGroup = [spans[i]];\n          }\n        }\n        groups.push(currentGroup);\n\n        // 对每个连续组替换为文本节点\n        groups.forEach(group => {\n          if (group.length === 0) return;\n          try {\n            const text = group.map(span => span.textContent).join('');\n            const textNode = document.createTextNode(text);\n\n            // 替换第一个span，然后移除其余的\n            if (group[0].parentNode === parent) {\n              parent.replaceChild(textNode, group[0]);\n              for (let i = 1; i < group.length; i++) {\n                if (group[i].parentNode === parent) {\n                  parent.removeChild(group[i]);\n                }\n              }\n            }\n          } catch (e) {\n            console.error(\"恢复文本时出错:\", e);\n          }\n        });\n      });\n\n      // 清除字符元素数组\n      this.charElements = [];\n    }\n  };\n\n  // 将对象暴露到全局\n  window.rhythmReader = rhythmReader;\n\n  // 初始化监听器，监听阅读模式变化\n  const watchForReadingModeChanges = function () {\n    // 使用轮询方式确保能够捕获应用的阅读模式变化\n    let currentReadingMode = '';\n    const checkReadingMode = function () {\n      // 检查select元素\n      const modeSelectors = document.querySelectorAll('select');\n      for (const select of modeSelectors) {\n        if (select.value && (select.value === 'rhythm' || select.value === 'rhythm-reading')) {\n          // 如果当前值不同于之前记录的值，且是节奏阅读模式\n          if (currentReadingMode !== select.value) {\n            currentReadingMode = select.value;\n            console.log(`检测到阅读模式变化为: ${currentReadingMode}`);\n\n            // 启动节奏阅读\n            if (window.rhythmReader && !window.rhythmReader.active) {\n              // 使用节奏阅读器自带的通知函数\n              rhythmReader.showNotification(\"节奏阅读模式已启动\", \"success\");\n\n              // 延迟启动以确保UI更新完成\n              setTimeout(() => {\n                try {\n                  rhythmReader.start();\n                } catch (e) {\n                  console.error(\"启动节奏阅读模式时出错:\", e);\n                }\n              }, 300);\n            }\n          }\n          return; // 找到匹配的就返回\n        }\n      }\n\n      // 如果当前没有选择节奏阅读模式，但之前有，则停止节奏阅读\n      if (currentReadingMode === 'rhythm' || currentReadingMode === 'rhythm-reading') {\n        if (window.rhythmReader && window.rhythmReader.active) {\n          console.log(\"检测到阅读模式已更改，停止节奏阅读\");\n          rhythmReader.stop();\n        }\n        currentReadingMode = '';\n      }\n    };\n\n    // 定期检查阅读模式\n    const intervalId = setInterval(checkReadingMode, 1000);\n\n    // 也添加DOM变化监听\n    const observer = new MutationObserver(function (mutations) {\n      mutations.forEach(function (mutation) {\n        if (mutation.type === 'childList' || mutation.type === 'attributes' && (mutation.attributeName === 'value' || mutation.attributeName === 'selected')) {\n          // DOM变化时检查阅读模式\n          checkReadingMode();\n        }\n      });\n    });\n\n    // 观察整个文档的变化\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      attributeFilter: ['value', 'selected']\n    });\n\n    // 手动添加监听器到所有select元素\n    const selects = document.querySelectorAll('select');\n    selects.forEach(select => {\n      select.addEventListener('change', function (e) {\n        const value = this.value;\n        console.log(`选择器变化: ${value}`);\n        if (value === 'rhythm' || value === 'rhythm-reading') {\n          console.log(\"选择了节奏阅读模式\");\n\n          // 停止任何现有的节奏阅读\n          if (window.rhythmReader && window.rhythmReader.active) {\n            window.rhythmReader.stop();\n          }\n\n          // 延迟启动新的节奏阅读\n          setTimeout(() => {\n            if (window.rhythmReader) {\n              rhythmReader.showNotification(\"节奏阅读模式已启动\", \"success\");\n              rhythmReader.start();\n            }\n          }, 300);\n        } else if (window.rhythmReader && window.rhythmReader.active) {\n          // 如果选择了其他模式，但节奏阅读还在运行，则停止它\n          window.rhythmReader.stop();\n        }\n      });\n    });\n\n    // 返回清理函数\n    return function cleanup() {\n      clearInterval(intervalId);\n      observer.disconnect();\n    };\n  };\n\n  // 启动监听\n  watchForReadingModeChanges();\n  console.log(\"节奏阅读模式初始化完成，等待模式选择\");\n})();\n\n// 定义一个全局函数用于从应用代码中启动节奏阅读\nwindow.activateRhythmReadingMode = function () {\n  console.log(\"尝试从应用代码中启动节奏阅读模式\");\n  if (window.rhythmReader) {\n    if (window.rhythmReader.active) {\n      console.log(\"节奏阅读模式已经在运行\");\n    } else {\n      window.rhythmReader.start();\n    }\n  } else {\n    console.error(\"节奏阅读模式未初始化\");\n    alert(\"无法启动节奏阅读模式：组件未初始化\");\n  }\n};\n\n// 更新初始化函数\nconst initializeRhythmReading = () => {\n  // 不再自动初始化，而是等待用户选择\n  console.log(\"节奏阅读模式准备就绪，等待用户选择\");\n};\n\n// 更新启动函数\nconst startRhythmReading = () => {\n  if (window.rhythmReader && typeof window.rhythmReader.start === 'function') {\n    window.rhythmReader.start();\n  }\n};\nconst App = () => {\n  _s();\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  const [isTableOfContents, setIsTableOfContents] = useState(false);\n\n  // 实现缺失的函数\n  // 应用深色背景\n  const applyDarkBackground = () => {\n    document.body.classList.add('dark-background');\n\n    // 添加必要的CSS样式\n    if (!document.getElementById('dark-background-style')) {\n      const style = document.createElement('style');\n      style.id = 'dark-background-style';\n      style.textContent = `\n        .dark-background {\n          background-color: #000 !important;\n        }\n        .dark-background .sidebar {\n          background: linear-gradient(145deg, #4834d4, #341f9e) !important;\n        }\n        .dark-background .page-content {\n          background-color: #000 !important;\n        }\n        .dark-background .main-content {\n          background-color: #000 !important;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 恢复正常背景\n  const restoreDarkBackground = () => {\n    document.body.classList.remove('dark-background');\n  };\n\n  // 添加裸眼3D样式\n  const addNakedEye3DStyles = () => {\n    if (!document.getElementById('naked-eye-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'naked-eye-3d-style';\n      style.textContent = `\n        .naked-eye-3d-container {\n          position: relative;\n          perspective: 800px;\n          width: 100%;\n        }\n        \n        .naked-eye-3d-text {\n          display: inline-block;\n          animation: float 3s ease-in-out infinite;\n          text-shadow: 0 0 5px rgba(255,255,255,0.3);\n          padding: 0 4px;\n          color: white;\n          filter: drop-shadow(0 0 5px rgba(120, 220, 255, 0.6));\n        }\n        \n        @keyframes float {\n          0% { transform: translateZ(0px); }\n          50% { transform: translateZ(20px); }\n          100% { transform: translateZ(0px); }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 添加舒适3D样式\n  const addComfortable3DStyles = () => {\n    if (!document.getElementById('comfortable-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'comfortable-3d-style';\n      style.textContent = `\n        .emboss-3d-text {\n          color: #fff;\n          text-shadow: \n            1px 1px 1px rgba(0,0,0,0.5),\n            -1px -1px 1px rgba(255,255,255,0.5);\n          letter-spacing: 1.5px;\n          font-weight: 500;\n        }\n        \n        .float-3d-text {\n          display: inline-block;\n          transform-style: preserve-3d;\n          transform: perspective(500px) translateZ(10px);\n          text-shadow: 0 2px 5px rgba(0,0,0,0.5);\n        }\n        \n        .gradient-3d-text {\n          display: inline-block;\n          background: linear-gradient(to bottom, #fff, #aaa);\n          -webkit-background-clip: text;\n          -webkit-text-fill-color: transparent;\n          text-shadow: 0 2px 4px rgba(0,0,0,0.3);\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 添加闪读样式\n  const addFlashReadingStyles = () => {\n    if (!document.getElementById('flash-reading-style')) {\n      const style = document.createElement('style');\n      style.id = 'flash-reading-style';\n      style.textContent = `\n        .flash-reading-container {\n          position: relative;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          z-index: 1000;\n          padding: 20px;\n        }\n        \n        .flash-reading-display-wrapper {\n          position: relative;\n          margin: 40px 0;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        \n        .flash-reading-display {\n          font-size: 36px;\n          font-weight: bold;\n          text-align: center;\n          color: white;\n          min-height: 80px;\n          max-width: 90%;\n          padding: 20px 40px;\n          position: relative; /* 允许绝对定位的覆盖层 */\n          z-index: 2;\n        }\n        \n        .flash-reading-cover {\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(128, 128, 128, 0.6); /* 灰色遮罩 */\n          border-radius: 8px;\n          z-index: 1; /* 确保在文本后面 */\n        }\n        \n        .flash-reading-controls {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          gap: 20px;\n          margin-bottom: 20px;\n          width: 100%;\n        }\n        \n        .flash-reading-buttons {\n          display: flex;\n          gap: 10px;\n          flex-wrap: wrap;\n          justify-content: center;\n        }\n        \n        .flash-reading-speed {\n          display: flex;\n          align-items: center;\n          color: white;\n          width: 80%;\n          max-width: 400px;\n          gap: 10px;\n        }\n        \n        .flash-reading-slider {\n          flex: 1;\n          height: 8px;\n          appearance: none;\n          background: #555;\n          border-radius: 4px;\n          outline: none;\n        }\n        \n        .flash-reading-slider::-webkit-slider-thumb {\n          appearance: none;\n          width: 20px;\n          height: 20px;\n          border-radius: 50%;\n          background: #6c5ce7;\n          cursor: pointer;\n        }\n        \n        .flash-reading-btn {\n          padding: 10px 20px;\n          border: none;\n          border-radius: 4px;\n          background-color: #6c5ce7;\n          color: white;\n          font-size: 16px;\n          cursor: pointer;\n          transition: background-color 0.2s;\n        }\n        \n        .flash-reading-btn:hover {\n          background-color: #5344c0;\n        }\n        \n        .flash-reading-btn:disabled {\n          background-color: #aaa;\n          cursor: not-allowed;\n        }\n        \n        .flash-reading-progress {\n          color: white;\n          font-size: 14px;\n          margin-top: 10px;\n        }\n        .flash-reading-speed-note {\n          font-size: 12px;\n          color: #ccc;\n          margin-left: 5px;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 初始化闪读模式\n  const initializeFlashReading = () => {\n    // 添加样式\n    addFlashReadingStyles();\n    const sentences = window.flashReadingSentences;\n    if (!sentences || !Array.isArray(sentences) || sentences.length === 0) {\n      console.error('闪读模式: 未找到句子数据');\n      return;\n    }\n\n    // 获取全局UI元素\n    const display = document.getElementById('flash-reading-display');\n    const speedSlider = document.getElementById('flash-reading-speed');\n    const speedValue = document.getElementById('flash-reading-speed-value');\n    const playButton = document.getElementById('flash-reading-play');\n    const pauseButton = document.getElementById('flash-reading-pause');\n    const stopButton = document.getElementById('flash-reading-stop');\n    const prevButton = document.getElementById('flash-reading-prev-sentence');\n    const nextButton = document.getElementById('flash-reading-next-sentence');\n    const progress = document.getElementById('flash-reading-progress');\n    const cover = document.querySelector('.flash-reading-cover');\n    if (!display || !speedSlider || !speedValue || !playButton || !pauseButton || !stopButton || !prevButton || !nextButton || !progress || !cover) {\n      console.error('闪读模式: 未找到UI元素');\n      return;\n    }\n\n    // 创建闪读控制器\n    window.flashReader = {\n      sentences: sentences,\n      currentIndex: 0,\n      interval: null,\n      speed: parseInt(speedSlider.value),\n      isPlaying: false,\n      // 开始闪读\n      start() {\n        if (this.interval) {\n          clearInterval(this.interval);\n        }\n        this.isPlaying = true;\n        playButton.disabled = true;\n        pauseButton.disabled = false;\n        progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n\n        // 显示当前句子\n        this.displayCurrentSentence();\n\n        // 设置闪读间隔\n        this.interval = setInterval(() => {\n          this.currentIndex++;\n          if (this.currentIndex >= this.sentences.length) {\n            this.stop();\n            display.textContent = '阅读完成';\n            return;\n          }\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }, this.speed);\n      },\n      // 显示当前句子\n      displayCurrentSentence() {\n        if (this.currentIndex < this.sentences.length) {\n          const currentSentence = this.sentences[this.currentIndex];\n          display.textContent = currentSentence;\n          display.style.color = 'white'; // 确保文本为白色\n\n          // 调整背景以适应内容\n          setTimeout(() => {\n            const displayRect = display.getBoundingClientRect();\n            // 确保覆盖层完全包裹文本\n            cover.style.width = `${displayRect.width}px`;\n            cover.style.height = `${displayRect.height}px`;\n          }, 10);\n        }\n      },\n      // 暂停闪读\n      pause() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n      },\n      // 停止闪读\n      stop() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        this.currentIndex = 0;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n        display.textContent = '准备开始';\n        progress.textContent = `进度：0 / ${this.sentences.length}`; // 重置进度\n      },\n      // 更新速度\n      updateSpeed(newSpeed) {\n        this.speed = newSpeed;\n        speedValue.textContent = `${newSpeed} ms`;\n\n        // 保存速度设置到本地存储\n        localStorage.setItem('flash-reading-speed', newSpeed);\n\n        // 如果正在播放，重新开始以应用新速度\n        if (this.isPlaying) {\n          clearInterval(this.interval);\n          this.start(); // 直接调用start方法重新开始\n        }\n      },\n      // 返回上一句\n      prevSentence() {\n        if (this.currentIndex > 0) {\n          this.currentIndex--;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n      // 跳到下一句\n      nextSentence() {\n        if (this.currentIndex < this.sentences.length - 1) {\n          this.currentIndex++;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n      // 清理资源\n      cleanup() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        this.currentIndex = 0;\n      }\n    };\n\n    // 添加事件监听器\n    playButton.addEventListener('click', () => {\n      window.flashReader.start();\n    });\n    pauseButton.addEventListener('click', () => {\n      window.flashReader.pause();\n    });\n    stopButton.addEventListener('click', () => {\n      window.flashReader.stop();\n    });\n    speedSlider.addEventListener('input', e => {\n      const newSpeed = parseInt(e.target.value);\n      window.flashReader.updateSpeed(newSpeed);\n    });\n    prevButton.addEventListener('click', () => {\n      window.flashReader.prevSentence();\n    });\n    nextButton.addEventListener('click', () => {\n      window.flashReader.nextSentence();\n    });\n\n    // 初始化\n    const savedSpeed = localStorage.getItem('flash-reading-speed');\n    const initialSpeed = savedSpeed ? parseInt(savedSpeed) : 1000;\n    speedSlider.value = initialSpeed;\n    window.flashReader.updateSpeed(initialSpeed);\n    console.log('闪读模式已初始化，共 ' + sentences.length + ' 个句子');\n  };\n\n  // 创建闪读内容\n  const createFlashReadingContent = text => {\n    return `<div class=\"flash-reading-content\">\n      <p>${text}</p>\n    </div>`;\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 格式化文本用于鼠标跟随\n  const formatTextForMouseFollow = text => {\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个单词添加span，以便于添加高亮效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"follow-word\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\" data-follow=\"true\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用静态高亮\n  const applyStaticHighlight = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为单词随机添加颜色高亮\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      let lastColor = null;\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n          return;\n        }\n\n        // 随机决定是否高亮和使用哪种颜色\n        if (Math.random() < 0.7) {\n          let color;\n          if (lastColor === 'red') {\n            color = 'blue';\n          } else if (lastColor === 'blue') {\n            color = 'red';\n          } else {\n            color = Math.random() < 0.5 ? 'red' : 'blue';\n          }\n          lastColor = color;\n          processedParagraph += `<span class=\"highlight-word ${color}\">${word}</span>`;\n        } else {\n          processedParagraph += word;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用裸眼3D效果\n  const applyNakedEye3dEffect = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content naked-eye-3d-container\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个词添加3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"naked-eye-3d-text\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用舒适3D效果\n  const applyComfortable3dEffect = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个词随机应用不同的3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          processedParagraph += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 初始化裸眼3D\n  const initializeNakedEye3D = () => {\n    // 为裸眼3D文本添加动画\n    const textElements = document.querySelectorAll('.naked-eye-3d-text');\n    textElements.forEach((element, index) => {\n      // 添加随机延迟，使动画错开\n      const delay = Math.random() * 2;\n      element.style.animationDelay = `${delay}s`;\n    });\n  };\n\n  // 添加鼠标跟随监听器\n  const addMouseFollowListeners = () => {\n    // 获取内容容器\n    const contentArea = document.querySelector('.mouse-follow-content');\n    if (!contentArea) {\n      console.error('未找到鼠标跟随内容区域');\n      return;\n    }\n\n    // 上一个高亮的行\n    let lastHighlightedLine = null;\n\n    // 监听鼠标移动 - 精确的行检测\n    const mouseMoveHandler = e => {\n      // 获取鼠标位置\n      const mouseY = e.clientY;\n\n      // 获取所有行\n      const allLines = contentArea.querySelectorAll('.follow-line');\n      let foundLine = null;\n      let minDistance = Infinity;\n\n      // 寻找鼠标所在的精确行\n      allLines.forEach(line => {\n        const rect = line.getBoundingClientRect();\n        const lineCenter = rect.top + rect.height / 2;\n        const distance = Math.abs(mouseY - lineCenter);\n\n        // 如果鼠标在行范围内，计算到行中心的距离\n        if (mouseY >= rect.top && mouseY <= rect.bottom) {\n          if (distance < minDistance) {\n            minDistance = distance;\n            foundLine = line;\n          }\n        }\n      });\n\n      // 更新高亮状态\n      if (lastHighlightedLine && lastHighlightedLine !== foundLine) {\n        // 移除旧高亮\n        lastHighlightedLine.classList.remove('highlighted');\n      }\n      if (foundLine) {\n        // 添加新高亮\n        foundLine.classList.add('highlighted');\n        lastHighlightedLine = foundLine;\n\n        // 调试输出\n        console.log('当前高亮行:', foundLine.textContent.substring(0, 30) + '...');\n      } else if (lastHighlightedLine) {\n        // 如果没有找到新行，且有上一个高亮行，移除它\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n\n    // 鼠标离开处理\n    const mouseLeaveHandler = () => {\n      // 清除当前高亮\n      if (lastHighlightedLine) {\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n\n    // 存储处理函数引用\n    window.eventTracker = window.eventTracker || {\n      mouseFollowHandlers: []\n    };\n    window.eventTracker.mouseFollowHandlers.push({\n      element: contentArea,\n      event: 'mousemove',\n      handler: mouseMoveHandler\n    }, {\n      element: contentArea,\n      event: 'mouseleave',\n      handler: mouseLeaveHandler\n    });\n\n    // 添加事件监听器\n    contentArea.addEventListener('mousemove', mouseMoveHandler);\n    contentArea.addEventListener('mouseleave', mouseLeaveHandler);\n    console.log('改进的鼠标跟随监听器已初始化');\n  };\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n  }, []);\n\n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async file => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n\n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n\n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n\n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({\n        scale: 1.0\n      });\n\n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async textContent => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n\n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n\n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n\n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    const lines = [...lineMap.values()];\n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    return hasTocKeywords || hasPageNumberPatterns || shortLineRatio > 0.7 && numberLineRatio > 0.3;\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n\n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n\n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n\n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n\n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = text => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    return result;\n  };\n\n  // 处理内容页面 - 按句子划分段落\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n\n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 按句子划分内容（句号、问号、感叹号等作为分隔符）\n      const sentences = splitIntoSentences(extractedText);\n\n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch (mode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          // 使用ADHD友好的静态高亮处理\n          console.log('应用ADHD友好的静态高亮模式');\n          processedContent = formatSimpleHighlightedText(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'rhythm':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          processedContent = createFlashReadingContentFromSentences(sentences);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n      setContent(processedContent);\n\n      // 如果是静态高亮模式，添加延时验证检查\n      if (mode === 'static') {\n        setTimeout(() => {\n          const contentArea = document.querySelector('.adhd-highlight-mode');\n          if (contentArea) {\n            console.log('静态高亮模式元素存在');\n            const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n            console.log(`找到 ${paragraphs.length} 个段落`);\n\n            // 检查样式是否正确应用\n            if (paragraphs.length > 0) {\n              const firstPara = paragraphs[0];\n              const styles = window.getComputedStyle(firstPara);\n              console.log('段落应用的样式:', {\n                color: styles.color,\n                backgroundColor: styles.backgroundColor,\n                fontFamily: styles.fontFamily,\n                fontSize: styles.fontSize\n              });\n            }\n          }\n        }, 200);\n      }\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 将文本分割成句子\n  const splitIntoSentences = text => {\n    // 匹配句号、问号、感叹号后跟空格或结束的模式\n    // 支持中英文标点符号\n    const sentenceRegex = /([.!?。！？；;]+\\s*)/g;\n\n    // 分割文本成句子\n    const sentences = [];\n    let lastIndex = 0;\n    let match;\n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const sentence = text.substring(lastIndex, endIndex).trim();\n\n      // 避免添加空句子\n      if (sentence) {\n        sentences.push(sentence);\n      }\n      lastIndex = endIndex;\n    }\n\n    // 处理最后一部分（如果没有以句号等结尾）\n    if (lastIndex < text.length) {\n      const lastSentence = text.substring(lastIndex).trim();\n      if (lastSentence) {\n        sentences.push(lastSentence);\n      }\n    }\n    return sentences;\n  };\n\n  // 专门为闪读模式分割文本，以任意标点符号为分隔点\n  const splitIntoFlashReadingSegments = text => {\n    // 匹配任意标点符号包括中英文标点\n    const sentenceRegex = /([,.!?:;，。！？：；、]+\\s*)/g;\n\n    // 分割文本成短句\n    const segments = [];\n    let lastIndex = 0;\n    let match;\n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const segment = text.substring(lastIndex, endIndex).trim();\n\n      // 避免添加空段落\n      if (segment) {\n        segments.push(segment);\n      }\n      lastIndex = endIndex;\n    }\n\n    // 处理最后一部分（如果没有以标点符号结尾）\n    if (lastIndex < text.length) {\n      const lastSegment = text.substring(lastIndex).trim();\n      if (lastSegment) {\n        segments.push(lastSegment);\n      }\n    }\n    return segments;\n  };\n\n  // 格式化句子为HTML\n  const formatSentencesToHtml = sentences => {\n    let html = '<div class=\"pdf-content\">';\n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${sentence}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为句子应用静态高亮\n  const applyStaticHighlightToSentences = sentences => {\n    let html = '<div class=\"pdf-content adhd-content\">';\n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n\n      // 简单地为句子添加特定样式的class\n      html += `<p class=\"pdf-paragraph adhd-sentence\">${sentence}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为鼠标跟随模式格式化句子\n  const formatSentencesForMouseFollow = sentences => {\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    sentences.forEach((sentence, index) => {\n      if (sentence.trim() === '') return;\n\n      // 每个句子作为独立行，使用div而不是p标签\n      html += `<div class=\"follow-line\" data-line=\"${index}\" data-sentence=\"${sentence.substring(0, 20)}...\" style=\"color: inherit;\">${sentence}</div>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为舒适3D模式格式化句子\n  const applyComfortable3dEffectToSentences = sentences => {\n    let html = '<div class=\"pdf-content\">';\n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n\n      // 为每个词随机应用不同的3D效果\n      const words = sentence.split(/(\\s+)/);\n      let processedSentence = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedSentence += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          processedSentence += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedSentence}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为闪读模式创建内容\n  const createFlashReadingContentFromSentences = sentences => {\n    // 储存句子到全局变量，用于后续显示\n    window.flashReadingSentences = sentences;\n\n    // 返回闪读界面的HTML结构\n    return `\n      <div class=\"flash-reading-container\">\n        <div class=\"flash-reading-controls\">\n          <div class=\"flash-reading-buttons\">\n            <button id=\"flash-reading-prev-sentence\" class=\"flash-reading-btn\">上一句</button>\n            <button id=\"flash-reading-play\" class=\"flash-reading-btn\">开始</button>\n            <button id=\"flash-reading-pause\" class=\"flash-reading-btn\" disabled>暂停</button>\n            <button id=\"flash-reading-stop\" class=\"flash-reading-btn\">停止</button>\n            <button id=\"flash-reading-next-sentence\" class=\"flash-reading-btn\">下一句</button>\n          </div>\n          <div class=\"flash-reading-speed\">\n            <span>速度：</span>\n            <input type=\"range\" id=\"flash-reading-speed\" min=\"300\" max=\"1700\" step=\"50\" value=\"1000\" class=\"flash-reading-slider\">\n            <span id=\"flash-reading-speed-value\">1000 ms</span>\n            <span class=\"flash-reading-speed-note\">（数值越小，切换越快）</span>\n          </div>\n          <div class=\"flash-reading-progress\">\n            <span id=\"flash-reading-progress\">进度：0 / ${sentences.length}</span>\n          </div>\n        </div>\n        <div class=\"flash-reading-display-wrapper\">\n          <div class=\"flash-reading-cover\"></div> <!-- 这里是闪卡 -->\n          <div id=\"flash-reading-display\" class=\"flash-reading-display\">准备开始</div>\n        </div>\n      </div>`;\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async file => {\n    try {\n      const text = await file.text();\n\n      // 根据阅读模式选择不同的处理方式\n      let processedContent = '';\n      if (readingMode === 'flash-reading') {\n        // 闪读模式下使用特定的分割函数\n        const segments = splitIntoFlashReadingSegments(text);\n        processedContent = createFlashReadingContentFromSentences(segments);\n\n        // 初始化闪读模式\n        setTimeout(() => {\n          initializeFlashReading();\n        }, 100);\n      } else {\n        // 其他模式使用默认的分割方式\n        const sentences = splitIntoSentences(text);\n        switch (readingMode) {\n          case 'normal':\n            processedContent = formatSentencesToHtml(sentences);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlightToSentences(sentences);\n            break;\n          case 'follow-mouse':\n            processedContent = formatSentencesForMouseFollow(sentences);\n            break;\n          case 'comfortable-3d':\n            processedContent = applyComfortable3dEffectToSentences(sentences);\n            break;\n          default:\n            processedContent = formatSentencesToHtml(sentences);\n        }\n      }\n\n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n\n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setContent('<div class=\"error-message\">TXT文件处理失败</div>');\n    }\n  };\n\n  // 处理Markdown文件\n  const handleMarkdownFile = async file => {\n    try {\n      const text = await file.text();\n\n      // 使用marked库转换markdown为HTML\n      let html = '';\n      try {\n        if (window.marked) {\n          html = window.marked.parse(text);\n        } else {\n          // 如果没有marked库，简单地拆分为段落\n          html = `<div>${text.split(\"\\n\\n\").map(p => `<p>${p}</p>`).join(\"\")}</div>`;\n        }\n      } catch (parseError) {\n        console.error('Markdown解析错误:', parseError);\n        html = `<div>${text}</div>`;\n      }\n\n      // 提取纯文本内容\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = html;\n      const plainText = tempDiv.textContent || tempDiv.innerText || '';\n\n      // 分割文本为句子\n      const sentences = splitIntoSentences(plainText);\n\n      // 根据当前阅读模式处理内容\n      let processedContent = '';\n      switch (readingMode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlightToSentences(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          // 使用特定的闪读分割函数重新处理文本\n          const segments = splitIntoFlashReadingSegments(plainText);\n          processedContent = createFlashReadingContentFromSentences(segments);\n\n          // 初始化闪读模式\n          setTimeout(() => {\n            initializeFlashReading();\n          }, 100);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n\n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n\n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('Markdown处理错误:', error);\n      setContent('<div class=\"error-message\">Markdown文件处理失败</div>');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async e => {\n    const uploadedFile = e.target.files[0];\n    if (!uploadedFile) return;\n    setLoading(true);\n    setFileName(uploadedFile.name);\n    try {\n      if (uploadedFile.type === 'application/pdf') {\n        await handlePdfFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/plain' || uploadedFile.name.endsWith('.txt')) {\n        await handleTxtFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/markdown' || uploadedFile.name.endsWith('.md')) {\n        await handleMarkdownFile(uploadedFile);\n      } else {\n        setContent('<div class=\"error-message\">不支持的文件格式</div>');\n      }\n    } catch (error) {\n      console.error('处理文件时出错:', error);\n      setContent('<div class=\"error-message\">处理文件时出错</div>');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = container => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n\n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n\n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n\n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width / 2,\n            // 水平中心\n            y: rect.bottom,\n            // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n\n    // 过滤无效位置并排序\n    return positions.filter(p => p.char.trim() !== '').sort((a, b) => {\n      // 先按行排序，同行按列排序\n      const yDiff = a.y - b.y;\n      if (Math.abs(yDiff) > 5) {\n        // 5px阈值判断是否同一行\n        return yDiff;\n      }\n      return a.x - b.x;\n    });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n\n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - containerVisibleHeight / 2;\n\n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - window.innerHeight / 2;\n\n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n\n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n\n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length ||\n      // 已到末尾\n      positions[nextIndex].char.trim() === '' ||\n      // 下一个是空白\n      positions[nextIndex].y > charPosition.y + 5) {\n        // 下一个在新行\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n\n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n\n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || current.y > prev.y + 5) {\n        // 有明显换行\n        break;\n      }\n      start--;\n    }\n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n\n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n\n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (window.autoReader.charPositions.length === 0) {\n      if (window.currentPage < window.totalPages) {\n        window.changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 重置索引到开头\n    window.autoReader.currentIndex = 0;\n\n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n\n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n\n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none';\n      highlight.style.zIndex = '998';\n      contentContainer.appendChild(highlight);\n    }\n\n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n\n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20;\n\n    // 尝试获取实际行高\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(window.autoReader.charPositions[i].y - window.autoReader.charPositions[i - 1].y);\n        if (yDiff > 5) {\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n\n    // 记录上次滚动的位置\n    let lastScrolledY = -1;\n    const scrollSafeZone = lineHeight * 2.5;\n\n    // 设置字符大小的估计值\n    let charWidth = 20;\n    let charHeight = lineHeight * 0.8;\n\n    // 尝试估计字符宽度\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        if (window.autoReader.charPositions[i].x !== window.autoReader.charPositions[i - 1].x) {\n          const xDiff = Math.abs(window.autoReader.charPositions[i].x - window.autoReader.charPositions[i - 1].x);\n          if (xDiff > 0 && xDiff < 50) {\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    window.autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (window.autoReader.currentIndex < window.autoReader.charPositions.length && ((_window$autoReader$ch = window.autoReader.charPositions[window.autoReader.currentIndex]) === null || _window$autoReader$ch === void 0 ? void 0 : _window$autoReader$ch.char.trim()) === '') {\n        var _window$autoReader$ch;\n        window.autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (window.autoReader.currentIndex >= window.autoReader.charPositions.length) {\n        if (window.currentPage < window.totalPages) {\n          window.changePage(1);\n          clearInterval(window.autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n      const pos = window.autoReader.charPositions[window.autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      if (cursor && highlight) {\n        const contentRect = contentContainer.getBoundingClientRect();\n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        highlight.style.left = `${relativeX - charWidth / 2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n\n        // 滚动处理\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          if (isContainerScrollable) {\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = relativeY;\n            }\n          } else {\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      window.autoReader.currentIndex++;\n    }, window.autoReader.speed);\n\n    // 在停止自动阅读时清除所有高亮\n    window.autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n\n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n\n      // 调用清理函数\n      if (window.autoReader.cleanup) {\n        window.autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n\n    // 重置翻页状态\n    window.autoReader.isPageChanging = false;\n\n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n\n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n\n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n\n    // 收集字符位置\n    window.autoReader.charPositions = getAllCharacterPositions(content);\n\n    // 如果当前页没有内容，尝试翻页\n    if (window.autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !window.autoReader.isPageChanging) {\n        window.autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async e => {\n    const newMode = e.target.value;\n    const prevMode = readingMode;\n    console.log(`切换阅读模式: 从 ${prevMode} 到 ${newMode}`);\n\n    // 更新状态\n    setReadingMode(newMode);\n\n    // 如果有PDF文档和当前页，重新处理当前页内容\n    if (pdfDocument && currentPage > 0) {\n      try {\n        console.log('重新处理当前页面内容');\n        const page = await pdfDocument.getPage(currentPage);\n\n        // 不使用任何额外处理，直接使用最原始的方式重新加载页面\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n\n        // 根据当前模式设置内容\n        if (newMode === 'static') {\n          // 静态高亮模式 - 使用改进的句子处理\n          const html = formatSimpleHighlightedText(sentences);\n          console.log('设置静态高亮内容');\n          setContent(html);\n\n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n            if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n\n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n\n                // 验证文字颜色\n                if (styles.color === 'rgb(51, 51, 51)' || styles.color === '#333333') {\n                  console.log('文字颜色正确应用');\n                } else {\n                  console.warn('文字颜色可能未正确应用:', styles.color);\n                }\n              }\n            } else {\n              console.error('未找到静态高亮模式内容区域');\n            }\n          }, 200);\n        } else if (newMode === 'flash-reading') {\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n\n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n\n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n        } else {\n          // 其他模式保持不变\n          const handler = getContentHandlerForMode(newMode);\n          const processedContent = handler(sentences);\n          setContent(processedContent);\n        }\n      } catch (error) {\n        console.error('应用阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 首先确保移除鼠标跟随监听器\n    removeMouseFollowListeners();\n\n    // 清理节奏阅读器\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n\n    // 清理闪读器\n    if (window.flashReader) {\n      window.flashReader.cleanup();\n    }\n\n    // 清理舒适3D效果\n    const comfortable3DElements = document.querySelectorAll('.emboss-3d-text, .float-3d-text, .gradient-3d-text');\n    comfortable3DElements.forEach(el => el.remove());\n\n    // 清理闪读模式元素\n    const flashReadingElements = document.querySelectorAll('.flash-reading-container, .flash-reading-display, .flash-reading-controls');\n    flashReadingElements.forEach(el => el.remove());\n\n    // 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll('.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line, .rhythm-char');\n    highlights.forEach(el => {\n      if (el.parentNode) el.parentNode.removeChild(el);\n    });\n\n    // 彻底替换内容区域以移除所有事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      var _contentArea$querySel;\n      // 先保存底部翻页控件\n      const bottomPagination = contentArea.querySelector('.bottom-pagination');\n\n      // 深度克隆内容，但不克隆事件监听器\n      const contentHTML = ((_contentArea$querySel = contentArea.querySelector('div[dangerouslySetInnerHTML]')) === null || _contentArea$querySel === void 0 ? void 0 : _contentArea$querySel.innerHTML) || '';\n      const newContentArea = contentArea.cloneNode(false);\n\n      // 创建新的内容容器\n      const newContentContainer = document.createElement('div');\n      newContentContainer.innerHTML = contentHTML;\n      newContentArea.appendChild(newContentContainer);\n\n      // 如果有底部翻页控件，重新添加\n      if (bottomPagination && totalPages > 0) {\n        const newBottomPagination = bottomPagination.cloneNode(true);\n        // 重新绑定事件\n        const prevBtn = newBottomPagination.querySelector('.page-btn:first-child');\n        const nextBtn = newBottomPagination.querySelector('.page-btn:last-child');\n        if (prevBtn) prevBtn.onclick = () => changePage(-1);\n        if (nextBtn) nextBtn.onclick = () => changePage(1);\n        newContentArea.appendChild(newBottomPagination);\n      }\n      if (contentArea.parentNode) {\n        contentArea.parentNode.replaceChild(newContentArea, contentArea);\n      }\n    }\n\n    // 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 移除所有特殊标记和样式\n      paragraph.removeAttribute('data-follow');\n      paragraph.removeAttribute('style');\n\n      // 清理特殊span标签\n      paragraph.innerHTML = paragraph.innerHTML.replace(/<span class=\"text-line\"[^>]*>/g, '').replace(/<span class=\"rhythm-char\"[^>]*>/g, '').replace(/<span class=\"line-highlight[^\"]*\"[^>]*>/g, '').replace(/<span class=\"mouse-highlight[^\"]*\"[^>]*>/g, '').replace(/<\\/span>/g, '');\n    });\n\n    // 移除特殊UI元素\n    const elementsToRemove = ['rhythm-speed-slider', 'rhythm-notification'];\n    elementsToRemove.forEach(id => {\n      const element = document.getElementById(id);\n      if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    });\n\n    // 移除暗色背景\n    document.body.classList.remove('dark-background');\n\n    // 清理闪读模式\n    if (window.flashReader && typeof window.flashReader.cleanup === 'function') {\n      window.flashReader.cleanup();\n    }\n  };\n  const handleAutoScroll = () => {\n    window.autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = e => {\n    if (readingMode !== 'follow-mouse') return;\n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    const rect = contentArea.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    clearAllHighlights();\n    const paragraphs = contentArea.querySelectorAll('p');\n    paragraphs.forEach(paragraph => {\n      const paragraphRect = paragraph.getBoundingClientRect();\n      const paragraphX = paragraphRect.left - rect.left;\n      const paragraphY = paragraphRect.top - rect.top;\n      if (y >= paragraphY && y <= paragraphY + paragraphRect.height) {\n        const words = paragraph.querySelectorAll('span');\n        words.forEach(word => {\n          const wordRect = word.getBoundingClientRect();\n          const wordX = wordRect.left - rect.left;\n          if (x >= wordX && x <= wordX + wordRect.width) {\n            word.classList.add('highlight');\n          }\n        });\n      }\n    });\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 专门用于移除鼠标跟随事件的函数\n  const removeMouseFollowListeners = () => {\n    // 移除记录的所有监听器\n    if (window.eventTracker && window.eventTracker.mouseFollowHandlers) {\n      window.eventTracker.mouseFollowHandlers.forEach(({\n        element,\n        event,\n        handler\n      }) => {\n        if (element && element.removeEventListener) {\n          element.removeEventListener(event, handler);\n        }\n      });\n      window.eventTracker.mouseFollowHandlers = [];\n    }\n\n    // 为安全起见，尝试从document和内容区域移除通用处理函数\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    }\n    document.removeEventListener('mousemove', handleMouseMove);\n\n    // 清除所有当前高亮\n    clearAllHighlights();\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n\n    // 添加底部翻页控件样式\n    const bottomPaginationStyles = document.createElement('style');\n    bottomPaginationStyles.id = 'bottom-pagination-styles';\n    bottomPaginationStyles.innerHTML = `\n      .bottom-pagination {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        padding: 20px 0 30px;\n        margin-top: 30px;\n        width: 100%;\n        background-color: transparent;\n        border-radius: 5px;\n      }\n\n      .bottom-pagination .page-btn {\n        background-color: #6c5ce7;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        padding: 8px 15px;\n        margin: 0 10px;\n        cursor: pointer;\n        font-size: 14px;\n        transition: background-color 0.2s ease;\n      }\n\n      .bottom-pagination .page-btn:hover {\n        background-color: #4834d4;\n      }\n\n      .bottom-pagination .page-btn:disabled {\n        background-color: #aaa;\n        cursor: not-allowed;\n      }\n\n      .bottom-pagination .page-info {\n        font-size: 14px;\n        margin: 0 10px;\n      }\n    `;\n    document.head.appendChild(bottomPaginationStyles);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n    addComfortable3DStyles();\n\n    // 添加鼠标跟随模式的样式\n    const mouseFollowStyle = document.createElement('style');\n    mouseFollowStyle.id = 'intelligent-mouse-follow-style';\n    mouseFollowStyle.textContent = `\n      /* 基础样式 */\n      .mouse-follow-content {\n        position: relative;\n        line-height: 1.8;\n      }\n      \n      .mouse-follow-content .follow-line {\n        position: relative;\n        padding: 8px 16px;\n        margin: 4px 0;\n        border-radius: 6px;\n        transition: all 0.2s ease;\n        display: block;\n        min-height: 1.8em;\n        white-space: normal;\n        word-wrap: break-word;\n        text-indent: 2em;\n      }\n      \n      /* 高亮状态 */\n      .follow-line.highlighted {\n        background-color: #ffa500 !important; /* 橙色背景 */\n        color: #ffffff !important; /* 白色文字 */\n        font-weight: bold !important;\n        font-size: 1.1em; /* 稍微调小字号 */\n        transform: translateX(5px);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n      }\n      \n      \n      /* 平滑过渡效果 */\n      .follow-line {\n        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n      }\n      \n      /* 行间距优化 */\n      .mouse-follow-content .follow-line + .follow-line {\n        margin-top: 4px;\n      }\n      \n      /* 添加行指示器 */\n      .follow-line::before {\n        content: '';\n        position: absolute;\n        left: 0;\n        top: 0;\n        bottom: 0;\n        width: 3px;\n        background: linear-gradient(to bottom, transparent, rgba(255, 255, 255, 0.5), transparent);\n        opacity: 0;\n        transition: opacity 0.2s ease;\n      }\n      \n      .follow-line.highlighted::before {\n        opacity: 1;\n      }\n    `;\n    document.head.appendChild(mouseFollowStyle);\n\n    // 创建深色背景下的ADHD友好高亮样式\n    const style = document.createElement('style');\n    style.id = 'adhd-friendly-highlight-style';\n    style.textContent = `\n      /* ADHD友好的高亮样式 - 适配深色背景 */\n      .adhd-highlight-mode {\n        line-height: 1.8;\n        padding: 20px;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph {\n        margin-bottom: 1.2em;\n        background-color: transparent;\n        padding: 12px 15px;\n        border-radius: 6px;\n        border-left: 3px solid rgba(255, 255, 255, 0.2);\n        transition: all 0.3s ease;\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover {\n        transform: translateX(5px);\n        border-left-color: rgba(255, 255, 255, 0.4);\n      }\n      \n      /* 加粗样式 - 白色加粗 */\n      .adhd-bold {\n        font-weight: 700;\n        color: #ffffff;\n        letter-spacing: 0.02em;\n        font-size: 1.1em;\n        text-shadow: 0 0 1px rgba(255, 255, 255, 0.2);\n      }\n      \n      /* 彩色样式 - 使用鲜明的蓝色 */\n      .adhd-colored {\n        color: #6c5ce7;\n        font-weight: 500;\n        font-size: 1.05em;\n        text-shadow: 0 0 1px rgba(108, 92, 231, 0.2);\n      }\n      \n      /* 正常样式 - 普通白色 */\n      .adhd-normal {\n        color: rgba(255, 255, 255, 0.8);\n        font-size: 1em;\n      }\n\n      /* 添加平滑过渡效果 */\n      .adhd-bold, .adhd-colored, .adhd-normal {\n        transition: all 0.2s ease;\n      }\n\n      /* 悬停效果 */\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-bold {\n        color: #ffffff;\n        text-shadow: 0 0 2px rgba(255, 255, 255, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-colored {\n        color: #8a7ff7;\n        text-shadow: 0 0 2px rgba(138, 127, 247, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-normal {\n        color: rgba(255, 255, 255, 0.9);\n      }\n\n      /* 添加段落间距的视觉引导 */\n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph {\n        margin-top: 1.5em;\n        position: relative;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph::before {\n        content: '';\n        position: absolute;\n        top: -0.75em;\n        left: 0;\n        right: 0;\n        height: 1px;\n        background: linear-gradient(\n          to right,\n          transparent,\n          rgba(255, 255, 255, 0.1),\n          transparent\n        );\n      }\n    `;\n    document.head.appendChild(style);\n\n    // 添加基础鼠标跟随样式\n    const mouseFollowPageStyle = document.createElement('style');\n    mouseFollowPageStyle.id = 'basic-mouse-follow-style';\n    mouseFollowPageStyle.textContent = `\n      .follow-line {\n        padding: 8px 12px;\n        margin: 4px 0;\n        border-radius: 4px;\n        transition: background-color 0.2s ease;\n      }\n      .follow-line.highlighted {\n        background-color: #ffa500;\n        color: #000080;\n        font-weight: bold;\n      }\n    `;\n    document.head.appendChild(mouseFollowPageStyle);\n    return () => {\n      const existingStyle = document.getElementById('adhd-friendly-highlight-style');\n      if (existingStyle) existingStyle.remove();\n      const existingMouseFollowStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (existingMouseFollowStyle) existingMouseFollowStyle.remove();\n      const existingBasicMouseFollowStyle = document.getElementById('basic-mouse-follow-style');\n      if (existingBasicMouseFollowStyle) existingBasicMouseFollowStyle.remove();\n      mouseFollowPageStyle.remove();\n    };\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 清理旧监听器\n    removeMouseFollowListeners();\n\n    // 添加新监听器\n    setTimeout(() => {\n      addMouseFollowListeners();\n\n      // 添加调试辅助 - 显示行边界\n      const contentArea = document.querySelector('.mouse-follow-content');\n      if (contentArea) {\n        const lines = contentArea.querySelectorAll('.follow-line');\n        console.log(`初始化鼠标跟随模式，共 ${lines.length} 行`);\n\n        // 可选：启用可视化调试\n        if (false) {\n          // 设置为true可以启用可视化调试\n          lines.forEach((line, index) => {\n            line.style.border = '1px dashed #888';\n            line.setAttribute('title', `行 ${index + 1}`);\n          });\n        }\n\n        // 验证行高亮效果\n        const firstLine = lines[0];\n        if (firstLine) {\n          console.log('行样式验证:', {\n            padding: window.getComputedStyle(firstLine).padding,\n            margin: window.getComputedStyle(firstLine).margin,\n            fontSize: window.getComputedStyle(firstLine).fontSize,\n            lineHeight: window.getComputedStyle(firstLine).lineHeight\n          });\n        }\n      }\n    }, 100);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = delta => {\n    window.autoReader.speed = Math.max(100, window.autoReader.speed + delta);\n    if (window.autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async delta => {\n    console.log(`翻页请求: 当前页 ${currentPage}, 增量 ${delta}`);\n    const newPage = currentPage + delta;\n    if (newPage < 1 || newPage > totalPages) {\n      console.log('无效页码，不执行翻页');\n      return;\n    }\n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n    const wasFlashReading = readingMode === 'flash-reading' && window.flashReader && window.flashReader.isPlaying;\n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    if (wasFlashReading && window.flashReader) {\n      window.flashReader.cleanup();\n    }\n\n    // 更新页码\n    setCurrentPage(newPage);\n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n\n      // 检查是否为目录页\n      const textContent = await page.getTextContent();\n      const isToc = await detectIfTocPage(textContent);\n      setIsTableOfContents(isToc);\n      if (isToc) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, page.getViewport({\n          scale: 1.0\n        }));\n      } else {\n        // 处理正文页面 - 根据当前阅读模式处理\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n\n        // 根据当前模式设置内容\n        if (readingMode === 'static') {\n          console.log('翻页后应用静态高亮模式');\n          const processedContent = formatSimpleHighlightedText(sentences);\n          setContent(processedContent);\n\n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n            if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n\n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n              }\n            }\n          }, 200);\n        } else if (readingMode === 'flash-reading') {\n          // 如果是闪读模式，则需要特殊处理\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n\n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n\n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n          return; // 已处理，直接返回\n        } else {\n          // 其他模式使用原处理函数\n          await processContentPage(page, readingMode);\n        }\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n    } catch (error) {\n      console.error('页面切换错误:', error);\n    }\n  };\n\n  // ADHD友好的静态高亮处理函数\n  const formatSimpleHighlightedText = sentences => {\n    console.log('开始处理ADHD友好的静态高亮文本，句子数量:', sentences.length);\n    let html = '<div class=\"pdf-content adhd-highlight-mode\">';\n    sentences.forEach((sentence, sentenceIndex) => {\n      if (!sentence || sentence.trim() === '') {\n        console.log(`跳过空句子，索引: ${sentenceIndex}`);\n        return;\n      }\n\n      // 清理和规范化文本\n      const cleanText = sentence.trim().replace(/\\s+/g, ' ') // 规范化空白字符\n      .replace(/&/g, '&amp;') // 转义特殊字符\n      .replace(/</g, '&lt;').replace(/>/g, '&gt;');\n\n      // 处理句子中的单词，为它们添加不同样式\n      const words = cleanText.split(/(\\s+)/);\n      let formattedSentence = '';\n      words.forEach((word, wordIndex) => {\n        if (word.trim() === '') {\n          // 保留空格\n          formattedSentence += word;\n        } else {\n          // 根据位置应用不同的样式类\n          // 三种交替样式: 加粗、彩色、正常\n          const styleClass = wordIndex % 3 === 0 ? 'adhd-bold' : wordIndex % 3 === 1 ? 'adhd-colored' : 'adhd-normal';\n          formattedSentence += `<span class=\"${styleClass}\">${word}</span>`;\n        }\n      });\n      console.log(`处理句子 ${sentenceIndex + 1}:`, cleanText.substring(0, 50) + '...');\n      html += `<p class=\"pdf-paragraph\">${formattedSentence}</p>`;\n    });\n    html += '</div>';\n\n    // 调试输出\n    console.log('生成的ADHD友好静态高亮HTML:', html.substring(0, 200) + '...');\n    return html;\n  };\n\n  // 根据阅读模式获取相应的内容处理函数\n  const getContentHandlerForMode = mode => {\n    switch (mode) {\n      case 'normal':\n        return formatSentencesToHtml;\n      case 'static':\n        return applyStaticHighlightToSentences;\n      case 'follow-mouse':\n        return formatSentencesForMouseFollow;\n      case 'comfortable-3d':\n        return applyComfortable3dEffectToSentences;\n      case 'flash-reading':\n        return sentences => {\n          // 闪读模式使用专门的分割函数重新处理文本\n          return createFlashReadingContentFromSentences(sentences);\n        };\n      default:\n        return formatSentencesToHtml;\n    }\n  };\n\n  // 监听阅读模式和当前页面的变化\n  useEffect(() => {\n    if (readingMode === 'mouse-follow' && currentPage && !isTableOfContents) {\n      // 移除之前的样式\n      const oldStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (oldStyle) {\n        oldStyle.remove();\n      }\n\n      // 添加基础鼠标跟随样式\n      const followModeStyle = document.createElement('style');\n      followModeStyle.id = 'basic-mouse-follow-style';\n      followModeStyle.textContent = `\n        .follow-line {\n          padding: 8px 12px;\n          margin: 4px 0;\n          border-radius: 4px;\n          transition: background-color 0.2s ease;\n        }\n        .follow-line.highlighted {\n          background-color: #ffa500;\n          color: #000080;\n          font-weight: bold;\n        }\n      `;\n      document.head.appendChild(followModeStyle);\n\n      // 处理当前页面内容\n      const page = pdfDocument.getPage(currentPage);\n      const textContent = page.getTextContent();\n      const sentences = textContent.items.map(item => item.str).join(' ').split(/[。！？]/).filter(s => s.trim());\n\n      // 应用基础鼠标跟随格式化\n      setContent(formatSentencesForMouseFollow(sentences));\n\n      // 添加鼠标跟随监听器\n      setTimeout(() => {\n        addMouseFollowListeners();\n      }, 100);\n      return () => {\n        followModeStyle.remove();\n      };\n    }\n  }, [readingMode, currentPage, pdfDocument]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3357,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3356,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reading-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u9605\\u8BFB\\u6A21\\u5F0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3361,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"reading-mode-select\",\n          value: readingMode,\n          onChange: handleReadingModeChange,\n          className: \"mode-select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"normal\",\n            children: \"\\u666E\\u901A\\u6A21\\u5F0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3368,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"static\",\n            children: \"\\u9759\\u6001\\u9AD8\\u4EAE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3369,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"follow-mouse\",\n            children: \"\\u9F20\\u6807\\u8DDF\\u968F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3370,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"rhythm\",\n            children: \"\\u8282\\u594F\\u9605\\u8BFB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3371,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"flash-reading\",\n            children: \"\\u95EA\\u8BFB\\u6A21\\u5F0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3372,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 3362,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3360,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".pdf,.txt,.md\",\n          hidden: true,\n          id: \"file-upload\",\n          onChange: handleFileUpload,\n          ref: fileRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3377,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"upload-btn\",\n          onClick: () => fileRef.current.click(),\n          children: \"\\u4E0A\\u4F20\\u6587\\u4EF6 (.pdf/.txt/.md)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3385,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3376,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 3355,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toolbar\",\n        children: fileName && /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"filename\",\n          children: fileName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3396,\n          columnNumber: 24\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3395,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-content\",\n        ref: readerContainerRef,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: content\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3401,\n          columnNumber: 13\n        }, this), totalPages > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bottom-pagination\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => changePage(-1),\n            disabled: currentPage <= 1,\n            className: \"page-btn\",\n            children: \"\\u4E0A\\u4E00\\u9875\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3405,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"page-info\",\n            children: [\"\\u7B2C \", currentPage, \" / \", totalPages, \" \\u9875\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 3412,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => changePage(1),\n            disabled: currentPage >= totalPages,\n            className: \"page-btn\",\n            children: \"\\u4E0B\\u4E00\\u9875\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3415,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 3404,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3400,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 3394,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 3354,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"x5N0itQI0gqtA84jt63lPsdPeRI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","pdfjsLib","pdfjsViewer","marked","pdfjs","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","window","currentPage","totalPages","changePage","eventTracker","mouseFollowHandlers","autoReader","charPositions","intervalId","currentIndex","speed","pageContainer","isScrolling","isPageChanging","cleanup","rhythmReaderGlobal","active","console","log","rhythmReader","stop","showNotification","message","type","existingNotification","document","getElementById","remove","notification","createElement","id","bgColor","innerHTML","body","appendChild","setTimeout","parentNode","readIndices","Set","charElements","start","initializeTextNodes","error","clear","addSpeedSlider","updateTextColors","scrollToCurrentChar","setInterval","moveToNextChar","clearInterval","restoreOriginalText","slider","contentSelectors","contentContainer","selector","elements","querySelectorAll","element","offsetParent","textContent","trim","length","pdfParagraphs","parentElement","paragraph","textNode","createTextNode","textNodes","forEach","node","text","nodeValue","fragment","createDocumentFragment","i","char","span","className","dataset","rhythmIndex","whitespace","style","cssText","push","firstChild","removeChild","findContentByTextDensity","findTextNodes","replaceChild","possibleContainers","Array","from","containerScores","map","container","score","test","textLength","paragraphs","links","formElements","sort","a","b","isUIElement","Element","classList","contains","tagName","toLowerCase","uiTags","includes","toString","uiKeywords","keyword","role","getAttribute","getComputedStyle","position","hasUIAncestor","current","childNodes","nodeType","Node","TEXT_NODE","ELEMENT_NODE","substring","index","color","fontWeight","has","add","rect","getBoundingClientRect","viewportHeight","innerHeight","idealPosition","scrollTo","top","scrollY","behavior","label","marginRight","input","min","max","step","value","width","valueDisplay","marginLeft","minWidth","self","addEventListener","newSpeed","parseInt","charSpans","parentNodeMap","Map","parent","set","get","spans","indexA","indexB","groups","currentGroup","prevIndex","previousSibling","group","join","e","watchForReadingModeChanges","currentReadingMode","checkReadingMode","modeSelectors","select","observer","MutationObserver","mutations","mutation","attributeName","observe","childList","subtree","attributes","attributeFilter","selects","disconnect","activateRhythmReadingMode","alert","initializeRhythmReading","startRhythmReading","App","_s","pages","setPages","setCurrentPage","setTotalPages","fileName","setFileName","loading","setLoading","fileRef","file","setFile","pdfInstance","setPdfInstance","extractedTextPages","setExtractedTextPages","readingMode","setReadingMode","posMode","setPosMode","markdownContent","setMarkdownContent","readerContainerRef","content","setContent","pdfDocument","setPdfDocument","isTableOfContents","setIsTableOfContents","applyDarkBackground","head","restoreDarkBackground","addNakedEye3DStyles","addComfortable3DStyles","addFlashReadingStyles","initializeFlashReading","sentences","flashReadingSentences","isArray","display","speedSlider","speedValue","playButton","pauseButton","stopButton","prevButton","nextButton","progress","cover","querySelector","flashReader","interval","isPlaying","disabled","displayCurrentSentence","currentSentence","displayRect","height","pause","updateSpeed","localStorage","setItem","prevSentence","nextSentence","target","savedSpeed","getItem","initialSpeed","createFlashReadingContent","formatTextToHtml","split","html","formatTextForMouseFollow","words","processedParagraph","word","applyStaticHighlight","lastColor","Math","random","applyNakedEye3dEffect","applyComfortable3dEffect","effectTypes","effectClass","floor","initializeNakedEye3D","textElements","delay","animationDelay","addMouseFollowListeners","contentArea","lastHighlightedLine","mouseMoveHandler","mouseY","clientY","allLines","foundLine","minDistance","Infinity","line","lineCenter","distance","abs","bottom","mouseLeaveHandler","event","handler","initializeMouseFollow","handlePdfFile","fileURL","URL","createObjectURL","loadingTask","getDocument","pdf","promise","numPages","extractAndProcessPage","pageNum","page","getPage","getTextContent","viewport","getViewport","scale","detectIfTocPage","processTocPage","processContentPage","textItems","items","fullText","item","str","hasTocKeywords","hasPageNumberPatterns","shortLinesCount","linesWithNumbersCount","lineMap","yKey","round","transform","lines","values","lineText","shortLineRatio","numberLineRatio","htmlContent","x","y","fontSize","sqrt","fontName","spacedText","getTextNodeAtPosition","nodes","range","createRange","selectNodeContents","rects","getClientRects","j","left","right","found","processTextWithHighlight","result","mode","extractedText","replace","splitIntoSentences","processedContent","formatSentencesToHtml","formatSimpleHighlightedText","formatSentencesForMouseFollow","applyComfortable3dEffectToSentences","createFlashReadingContentFromSentences","firstPara","styles","backgroundColor","fontFamily","sentenceRegex","lastIndex","match","exec","endIndex","sentence","lastSentence","splitIntoFlashReadingSegments","segments","segment","lastSegment","applyStaticHighlightToSentences","processedSentence","handleTxtFile","name","handleMarkdownFile","parse","p","parseError","tempDiv","plainText","innerText","handleFileUpload","uploadedFile","files","endsWith","getAllCharacterPositions","walker","createTreeWalker","NodeFilter","SHOW_TEXT","positions","nextNode","currentNode","setStart","setEnd","warn","filter","yDiff","scrollElementToCenter","elementY","isContainerScrollable","scrollHeight","clientHeight","overflowY","targetScrollTop","containerVisibleHeight","absoluteElementY","createReaderCursor","cursor","isSentenceEnd","charPosition","sentenceEndMarks","nextIndex","findSentenceStart","prev","isInVisibleArea","threshold","visibleTop","scrollTop","visibleBottom","topThreshold","bottomThreshold","startAutoReader","highlight","borderRadius","pointerEvents","zIndex","lineHeight","lastScrolledY","scrollSafeZone","charWidth","charHeight","xDiff","_window$autoReader$ch","stopAutoReader","pos","contentRect","relativeX","relativeY","isInRecentlyScrolledArea","needsScroll","scrollAmount","scrollBy","absoluteY","initializeAutoReader","handleReadingModeChange","newMode","prevMode","getContentHandlerForMode","cleanupDOM","removeMouseFollowListeners","comfortable3DElements","el","flashReadingElements","highlights","_contentArea$querySel","bottomPagination","contentHTML","newContentArea","cloneNode","newContentContainer","newBottomPagination","prevBtn","nextBtn","onclick","removeAttribute","elementsToRemove","handleAutoScroll","updateCursorPosition","force","handleMouseMove","clientX","clearAllHighlights","paragraphRect","paragraphX","paragraphY","wordRect","wordX","removeEventListener","addAutoReaderStyles","bottomPaginationStyles","mouseFollowStyle","mouseFollowPageStyle","existingStyle","existingMouseFollowStyle","existingBasicMouseFollowStyle","border","setAttribute","firstLine","padding","margin","adjustSpeed","delta","newPage","wasRhythmReading","wasFlashReading","isToc","sentenceIndex","cleanText","formattedSentence","wordIndex","styleClass","oldStyle","followModeStyle","s","children","_jsxFileName","lineNumber","columnNumber","onChange","accept","hidden","ref","onClick","click","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["D:/adhd-read-helper/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 添加全局事件跟踪对象\nwindow.eventTracker = window.eventTracker || {\n  mouseFollowHandlers: []\n};\n\n// 自动阅读器全局对象\nwindow.autoReader = {\n  charPositions: [],\n  intervalId: null,\n  currentIndex: 0,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false,\n  cleanup: null\n};\n\n// 添加新的节奏阅读模式代码\n// 全局变量，确保在页面切换后仍然保持状态\nwindow.rhythmReaderGlobal = window.rhythmReaderGlobal || {\n  active: false,\n  speed: 300\n};\n\n// 节奏阅读模式 - 仅限阅读区域版本\n(function() {\n  console.log(\"节奏阅读模式初始化中...\");\n  \n  // 停止任何现有实例\n  if (window.rhythmReader && window.rhythmReader.stop) {\n    window.rhythmReader.stop();\n  }\n  \n  // UI通知函数\n  const showNotification = function(message, type = 'info') {\n    console.log(\"显示通知:\", message, type);\n    \n    // 移除已有的通知\n    const existingNotification = document.getElementById('rhythm-notification');\n    if (existingNotification) {\n      existingNotification.remove();\n    }\n    \n    // 创建通知元素\n    const notification = document.createElement('div');\n    notification.id = 'rhythm-notification';\n    \n    // 根据类型设置颜色\n    const bgColor = type === 'info' ? '#3498db' : \n                    type === 'success' ? '#2ecc71' : \n                    type === 'warning' ? '#f1c40f' : '#e74c3c';\n    \n    // 使用内联样式确保不被覆盖\n    notification.innerHTML = `\n      <div style=\"\n        position: fixed;\n        top: 20px;\n        left: 50%;\n        transform: translateX(-50%);\n        background-color: ${bgColor};\n        color: white;\n        padding: 12px 24px;\n        border-radius: 4px;\n        box-shadow: 0 3px 10px rgba(0,0,0,0.3);\n        z-index: 999999;\n        font-size: 16px;\n        font-weight: bold;\n        text-align: center;\n        min-width: 200px;\n        pointer-events: none;\n      \">${message}</div>\n    `;\n    \n    document.body.appendChild(notification);\n    \n    // 自动隐藏\n    setTimeout(() => {\n      if (notification.parentNode) {\n        notification.remove();\n      }\n    }, 2500);\n  };\n  \n  // 节奏阅读功能\n  const rhythmReader = {\n    active: false,\n    intervalId: null,\n    speed: 300,\n    currentIndex: 0,\n    readIndices: new Set(),\n    charElements: [],\n    showNotification: showNotification, // 暴露通知函数\n    \n    // 启动节奏阅读\n    start: function() {\n      // 已经启动则不重复操作\n      if (this.active) return;\n      \n      console.log(\"启动节奏阅读模式\");\n      \n      // 显示通知\n      showNotification(\"节奏阅读模式已开启\", \"success\");\n      \n      // 设置为活动状态\n      this.active = true;\n      \n      // 初始化文本 - 这里是关键改进部分\n      if (!this.initializeTextNodes()) {\n        console.error(\"无法初始化文本节点\");\n        this.active = false;\n        showNotification(\"无法启动节奏阅读模式：未找到内容区域\", \"error\");\n        return;\n      }\n      \n      // 重置阅读位置\n      this.currentIndex = 0;\n      this.readIndices.clear();\n      \n      // 添加速度滑块\n      this.addSpeedSlider();\n      \n      // 更新颜色\n      this.updateTextColors();\n      \n      // 滚动到开始位置\n      this.scrollToCurrentChar();\n      \n      // 设置阅读间隔\n      this.intervalId = setInterval(() => this.moveToNextChar(), this.speed);\n    },\n    \n    // 停止节奏阅读\n    stop: function() {\n      if (!this.active) return;\n      \n      console.log(\"停止节奏阅读模式\");\n      \n      // 显示通知\n      showNotification(\"节奏阅读模式已关闭\", \"info\");\n      \n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n      }\n      \n      this.active = false;\n      \n      // 恢复原始文本\n      this.restoreOriginalText();\n      \n      // 移除速度滑块\n      const slider = document.getElementById('rhythm-speed-slider');\n      if (slider) slider.remove();\n    },\n    \n    // 完全重写 - 初始化文本节点，只针对阅读区域\n    initializeTextNodes: function() {\n      // 重置字符元素数组\n      this.charElements = [];\n      \n      // 尝试找到主要阅读区域容器\n      const contentSelectors = [\n        // PDF应用特定选择器 - 添加在最前面优先级最高\n        '.pdf-content', '.page-content', '.pdf-container', '#pdf-content', '#pdf-container',\n        // PDF段落和文本元素\n        '.pdf-paragraph', '.pdf-text', '.pdf-line',\n        // 常见的文章/阅读内容容器选择器\n        'article', '.article', '.post', '.content', '.post-content', \n        '.article-content', '.entry-content', '.main-content',\n        '.reading-content', '.book-content', '.chapter-content',\n        '#content', '#main-content', '#article-content',\n        '[role=\"main\"]', 'main', '.page-content'\n      ];\n      \n      let contentContainer = null;\n      \n      // 尝试找到阅读区域容器\n      for (const selector of contentSelectors) {\n        const elements = document.querySelectorAll(selector);\n        \n        for (const element of elements) {\n          // 确认元素可见且有内容\n          if (element.offsetParent !== null && \n              element.textContent.trim().length > 50) { // 降低长度要求以匹配更多内容\n            contentContainer = element;\n            console.log(`找到阅读区域: ${selector}`);\n            break;\n          }\n        }\n        \n        if (contentContainer) break;\n      }\n      \n      // 如果没有找到明确的阅读区域，尝试直接查找PDF段落元素\n      if (!contentContainer) {\n        console.log(\"未找到明确的阅读区域容器，尝试直接查找PDF段落元素\");\n        const pdfParagraphs = document.querySelectorAll('.pdf-paragraph');\n        \n        if (pdfParagraphs && pdfParagraphs.length > 0) {\n          console.log(`找到 ${pdfParagraphs.length} 个PDF段落元素，使用它们的父元素作为内容容器`);\n          \n          // 使用第一个段落的父元素作为内容容器\n          contentContainer = pdfParagraphs[0].parentElement;\n          \n          // 直接处理段落元素\n          for (const paragraph of pdfParagraphs) {\n            if (paragraph.textContent.trim().length > 0) {\n              const textNode = document.createTextNode(paragraph.textContent);\n              const textNodes = [textNode];\n              \n              // 为每个文本节点创建字符span\n              textNodes.forEach(node => {\n                const text = node.nodeValue;\n                if (!text || text.trim() === '') return;\n                \n                // 创建文档片段来存放字符span\n                const fragment = document.createDocumentFragment();\n                \n                // 为每个字符创建span\n                for (let i = 0; i < text.length; i++) {\n                  const char = text[i];\n                  const span = document.createElement('span');\n                  span.textContent = char;\n                  span.className = 'rhythm-char';\n                  span.dataset.rhythmIndex = this.charElements.length;\n                  \n                  // 如果是空白字符，添加一个标志\n                  if (char.trim() === '') {\n                    span.dataset.whitespace = 'true';\n                  }\n                  \n                  // 设置样式\n                  span.style.cssText = `\n                    display: inline;\n                    margin: 0;\n                    padding: 0;\n                    border: none;\n                    background-color: transparent;\n                  `;\n                  \n                  fragment.appendChild(span);\n                  this.charElements.push(span);\n                }\n                \n                // 清空段落原有内容并添加处理后的span元素\n                while (paragraph.firstChild) {\n                  paragraph.removeChild(paragraph.firstChild);\n                }\n                paragraph.appendChild(fragment);\n              });\n            }\n          }\n          \n          console.log(`直接处理段落元素后创建了 ${this.charElements.length} 个字符span`);\n          return this.charElements.length > 0;\n        }\n      }\n      \n      // 如果没有找到明确的阅读区域，尝试基于文本密度识别\n      if (!contentContainer) {\n        console.log(\"未找到明确的阅读区域，尝试基于文本密度识别\");\n        contentContainer = this.findContentByTextDensity();\n      }\n      \n      // 如果仍然没有找到，使用body但严格过滤\n      if (!contentContainer) {\n        console.log(\"未找到阅读区域，使用body但严格过滤\");\n        contentContainer = document.body;\n      }\n      \n      // 查找文本节点并处理\n      const textNodes = [];\n      this.findTextNodes(contentContainer, textNodes);\n      \n      console.log(`找到 ${textNodes.length} 个文本节点`);\n      \n      if (textNodes.length === 0) {\n        console.error(\"未找到任何文本节点\");\n        return false;\n      }\n      \n      // 为每个文本节点创建字符span\n      textNodes.forEach(node => {\n        const text = node.nodeValue;\n        if (!text || text.trim() === '') return;\n        \n        // 创建文档片段来存放字符span\n        const fragment = document.createDocumentFragment();\n        \n        // 为每个字符创建span\n        for (let i = 0; i < text.length; i++) {\n          const char = text[i];\n          const span = document.createElement('span');\n          span.textContent = char;\n          span.className = 'rhythm-char';\n          span.dataset.rhythmIndex = this.charElements.length;\n          \n          // 如果是空白字符，添加一个标志\n          if (char.trim() === '') {\n            span.dataset.whitespace = 'true';\n          }\n          \n          // 设置样式\n          span.style.cssText = `\n            display: inline;\n            margin: 0;\n            padding: 0;\n            border: none;\n            background-color: transparent;\n          `;\n          \n          fragment.appendChild(span);\n          this.charElements.push(span);\n        }\n        \n        // 替换原始节点\n        if (node.parentNode) {\n          node.parentNode.replaceChild(fragment, node);\n        }\n      });\n      \n      console.log(`总共创建了 ${this.charElements.length} 个字符span`);\n      return this.charElements.length > 0;\n    },\n  \n    // 新增 - 基于文本密度识别主要内容区域\n    findContentByTextDensity: function() {\n      // 获取所有可能的内容容器\n      const possibleContainers = Array.from(document.body.querySelectorAll('div, section, main, article'));\n      \n      // 计算每个容器的文本密度分数\n      const containerScores = possibleContainers.map(container => {\n        // 跳过隐藏元素\n        if (container.offsetParent === null) return { container, score: 0 };\n        \n        // 跳过已知的UI容器\n        const id = container.id || '';\n        const className = container.className || '';\n        \n        if (/header|footer|nav|menu|sidebar|toolbar|comment|share|related/i.test(id) || \n            /header|footer|nav|menu|sidebar|toolbar|comment|share|related/i.test(className)) {\n          return { container, score: 0 };\n        }\n        \n        // 计算文本密度\n        const text = container.textContent || '';\n        const textLength = text.trim().length;\n        \n        // 计算文本密度分数 - 考虑文本长度和段落数量\n        let score = textLength;\n        \n        // 加分：包含段落标签是个好迹象\n        const paragraphs = container.querySelectorAll('p');\n        if (paragraphs.length > 0) {\n          score += paragraphs.length * 50;\n        }\n        \n        // 减分：包含太多链接是内容区域的反向指标\n        const links = container.querySelectorAll('a');\n        if (links.length > 5) {\n          score -= links.length * 10;\n        }\n        \n        // 减分：包含表单元素通常不是内容区域\n        const formElements = container.querySelectorAll('input, button, select');\n        if (formElements.length > 0) {\n          score -= formElements.length * 20;\n        }\n        \n        return { container, score };\n      });\n      \n      // 按分数降序排序\n      containerScores.sort((a, b) => b.score - a.score);\n      \n      // 返回分数最高的容器\n      if (containerScores.length > 0 && containerScores[0].score > 100) {\n        console.log(`基于文本密度找到内容区域，分数: ${containerScores[0].score}`);\n        return containerScores[0].container;\n      }\n      \n      return null;\n    },\n    \n    // 完全重写 - 更严格地筛选文本节点，排除UI元素\n    findTextNodes: function(element, textNodes) {\n      // 判断是否为UI元素的辅助函数\n      const isUIElement = (node) => {\n        if (!(node instanceof Element)) return false;\n        \n        // 如果是PDF段落元素，则不要排除\n        if (node.classList && (\n            node.classList.contains('pdf-paragraph') || \n            node.classList.contains('pdf-text') || \n            node.classList.contains('pdf-content'))) {\n          return false;\n        }\n        \n        // 1. 通过标签名排除\n        const tagName = node.tagName.toLowerCase();\n        const uiTags = ['nav', 'header', 'footer', 'button', 'input', 'select', \n                       'option', 'textarea', 'form', 'label'];\n        \n        if (uiTags.includes(tagName)) return true;\n        \n        // 2. 通过ID和类名排除\n        const id = (node.id || '').toLowerCase();\n        const className = (node.className || '').toString().toLowerCase();\n        \n        // 常见的UI关键词\n        const uiKeywords = [\n          'nav', 'navigation', 'menu', 'header', 'footer', 'sidebar', \n          'toolbar', 'control', 'button', 'tab', 'pagination', \n          'next', 'prev', 'previous', 'upload', 'download', 'search',\n          'title', 'heading', 'breadcrumb', 'action', 'toolbar'\n        ];\n        \n        // 移除\"page\"关键词，避免误判PDF页面内容\n        \n        for (const keyword of uiKeywords) {\n          if (id.includes(keyword) || className.includes(keyword)) {\n            return true;\n          }\n        }\n        \n        // 3. 通过角色属性排除\n        const role = node.getAttribute('role');\n        if (role && ['button', 'navigation', 'menu', 'tab', 'tablist', \n                     'toolbar', 'menubar', 'menuitem'].includes(role)) {\n          return true;\n        }\n        \n        // 4. 通过样式排除固定位置的元素\n        const style = window.getComputedStyle(node);\n        if (style.position === 'fixed' || style.position === 'sticky') {\n          return true;\n        }\n        \n        return false;\n      };\n      \n      // 判断祖先元素是否为UI元素\n      const hasUIAncestor = (node) => {\n        let current = node.parentElement;\n        while (current && current !== document.body) {\n          if (isUIElement(current)) {\n            return true;\n          }\n          current = current.parentElement;\n        }\n        return false;\n      };\n      \n      // 递归处理子节点\n      for (let i = 0; i < element.childNodes.length; i++) {\n        const node = element.childNodes[i];\n        \n        // 如果是文本节点且有内容\n        if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() !== '') {\n          // 不处理UI元素中的文本\n          if (!hasUIAncestor(node) && !isUIElement(node.parentElement)) {\n            // 放宽长度限制，允许更短的文本片段\n            if (node.nodeValue.trim().length > 0) {\n              textNodes.push(node);\n            }\n          }\n        } \n        // 特殊处理PDF段落元素\n        else if (node.nodeType === Node.ELEMENT_NODE && \n                 node.classList && \n                 node.classList.contains('pdf-paragraph')) {\n          // 为PDF段落元素创建一个文本节点\n          const text = node.textContent;\n          if (text && text.trim() !== '') {\n            const textNode = document.createTextNode(text);\n            textNodes.push(textNode);\n            console.log(\"添加PDF段落文本:\", text.substring(0, 30) + (text.length > 30 ? \"...\" : \"\"));\n          }\n        }\n        // 如果是元素节点且不是UI元素，递归处理\n        else if (node.nodeType === Node.ELEMENT_NODE && \n                 !isUIElement(node) && \n                 !hasUIAncestor(node)) {\n          this.findTextNodes(node, textNodes);\n        }\n      }\n    },\n  \n    // 其他方法保持不变...\n    updateTextColors: function() {\n      if (this.charElements.length === 0) return;\n      \n      this.charElements.forEach((span, index) => {\n      // 确定颜色\n      let color;\n      let fontWeight = 'inherit';\n      \n        if (index === this.currentIndex) {\n        color = '#00aa00'; // 当前阅读的字 - 绿色\n        fontWeight = 'bold';\n        } else if (index === this.currentIndex + 1 || index === this.currentIndex + 2) {\n          color = '#aaaaaa'; // 接下来两个字 - 淡灰色\n        } else if (this.readIndices.has(index)) {\n        color = '#ffffff'; // 已读字符 - 白色（表示已读）\n      } else {\n          color = 'rgba(160, 160, 160, 0.25)'; // 未读字符 - 非常淡的灰色\n      }\n      \n      span.style.color = color;\n      span.style.fontWeight = fontWeight;\n    });\n    },\n  \n    // 移动到下一个字符\n    moveToNextChar: function() {\n      if (!this.active || this.charElements.length === 0) return;\n      \n    // 将当前字符标记为已读\n      this.readIndices.add(this.currentIndex);\n    \n    // 移动到下一个非空白字符\n    do {\n        this.currentIndex++;\n      \n        // 检查是否到达末尾\n        if (this.currentIndex >= this.charElements.length) {\n          console.log(\"已到达页尾\");\n          // 显示通知\n          showNotification(\"已到达文章末尾\", \"info\");\n            this.stop();\n          return;\n      }\n    } while (\n        this.currentIndex < this.charElements.length && \n        this.charElements[this.currentIndex] && \n        this.charElements[this.currentIndex].dataset.whitespace === 'true'\n    );\n    \n    // 更新颜色\n      this.updateTextColors();\n    \n      // 滚动到当前字符\n      this.scrollToCurrentChar();\n    },\n  \n    // 滚动到当前字符\n    scrollToCurrentChar: function() {\n      const span = this.charElements[this.currentIndex];\n    if (!span) return;\n    \n    const rect = span.getBoundingClientRect();\n      \n      // 窗口滚动\n      const viewportHeight = window.innerHeight;\n      const idealPosition = viewportHeight * 0.4; // 屏幕40%的位置\n      \n      window.scrollTo({\n        top: window.scrollY + rect.top - idealPosition,\n          behavior: 'smooth'\n        });\n    },\n    \n    // 添加速度滑块\n    addSpeedSlider: function() {\n      let slider = document.getElementById('rhythm-speed-slider');\n      if (slider) slider.remove();\n      \n      const container = document.createElement('div');\n      container.id = 'rhythm-speed-slider';\n      container.style.cssText = `\n        position: fixed;\n        top: 70px;\n        right: 20px;\n        background-color: rgba(0, 0, 0, 0.7);\n        padding: 10px;\n        border-radius: 5px;\n        box-shadow: 0 2px 5px rgba(0,0,0,0.2);\n        z-index: 10000;\n        display: flex;\n        align-items: center;\n        max-width: 300px;\n        color: white;\n      `;\n      \n      const label = document.createElement('label');\n      label.textContent = '速度: ';\n      label.style.marginRight = '8px';\n      container.appendChild(label);\n      \n      const input = document.createElement('input');\n      input.type = 'range';\n      input.min = '50';\n      input.max = '800';\n      input.step = '50';\n      input.value = this.speed;\n      input.style.width = '120px';\n      \n      const valueDisplay = document.createElement('span');\n      valueDisplay.textContent = `${this.speed}ms`;\n      valueDisplay.style.marginLeft = '8px';\n      valueDisplay.style.minWidth = '60px';\n      \n      const self = this;\n      input.addEventListener('input', function() {\n        const newSpeed = parseInt(this.value);\n        self.speed = newSpeed;\n        valueDisplay.textContent = `${newSpeed}ms`;\n        \n        if (self.intervalId) {\n          clearInterval(self.intervalId);\n          self.intervalId = setInterval(() => self.moveToNextChar(), newSpeed);\n        }\n      });\n      \n      container.appendChild(input);\n      container.appendChild(valueDisplay);\n      document.body.appendChild(container);\n    },\n  \n  // 恢复原始文本\n    restoreOriginalText: function() {\n    const charSpans = document.querySelectorAll('.rhythm-char');\n      if (charSpans.length === 0) return;\n    \n    // 按父节点分组\n    const parentNodeMap = new Map();\n    \n    charSpans.forEach(span => {\n      const parent = span.parentNode;\n      if (!parent) return;\n      \n      if (!parentNodeMap.has(parent)) {\n        parentNodeMap.set(parent, []);\n      }\n      parentNodeMap.get(parent).push(span);\n    });\n    \n      // 对每个父节点，将连续的字符span合并回文本节点\n      parentNodeMap.forEach((spans, parent) => {\n      if (spans.length === 0) return;\n      \n      // 排序spans确保顺序正确\n      spans.sort((a, b) => {\n        const indexA = parseInt(a.dataset.rhythmIndex || '0');\n        const indexB = parseInt(b.dataset.rhythmIndex || '0');\n        return indexA - indexB;\n      });\n      \n        // 尝试将spans分组\n        const groups = [];\n      let currentGroup = [spans[0]];\n      \n      for (let i = 1; i < spans.length; i++) {\n        const prevIndex = parseInt(spans[i-1].dataset.rhythmIndex || '0');\n        const currentIndex = parseInt(spans[i].dataset.rhythmIndex || '0');\n        \n        if (currentIndex === prevIndex + 1 && spans[i].previousSibling === spans[i-1]) {\n          currentGroup.push(spans[i]);\n        } else {\n          groups.push(currentGroup);\n          currentGroup = [spans[i]];\n        }\n      }\n      \n      groups.push(currentGroup);\n      \n        // 对每个连续组替换为文本节点\n        groups.forEach(group => {\n        if (group.length === 0) return;\n        \n        try {\n          const text = group.map(span => span.textContent).join('');\n          const textNode = document.createTextNode(text);\n          \n          // 替换第一个span，然后移除其余的\n          if (group[0].parentNode === parent) {\n            parent.replaceChild(textNode, group[0]);\n            for (let i = 1; i < group.length; i++) {\n              if (group[i].parentNode === parent) {\n                parent.removeChild(group[i]);\n              }\n            }\n          }\n        } catch (e) {\n            console.error(\"恢复文本时出错:\", e);\n        }\n      });\n    });\n    \n    // 清除字符元素数组\n      this.charElements = [];\n    }\n  };\n  \n  // 将对象暴露到全局\n  window.rhythmReader = rhythmReader;\n  \n  // 初始化监听器，监听阅读模式变化\n  const watchForReadingModeChanges = function() {\n    // 使用轮询方式确保能够捕获应用的阅读模式变化\n    let currentReadingMode = '';\n    \n    const checkReadingMode = function() {\n      // 检查select元素\n      const modeSelectors = document.querySelectorAll('select');\n      for (const select of modeSelectors) {\n        if (select.value && (select.value === 'rhythm' || select.value === 'rhythm-reading')) {\n          // 如果当前值不同于之前记录的值，且是节奏阅读模式\n          if (currentReadingMode !== select.value) {\n            currentReadingMode = select.value;\n            console.log(`检测到阅读模式变化为: ${currentReadingMode}`);\n  \n  // 启动节奏阅读\n            if (window.rhythmReader && !window.rhythmReader.active) {\n              // 使用节奏阅读器自带的通知函数\n              rhythmReader.showNotification(\"节奏阅读模式已启动\", \"success\");\n              \n              // 延迟启动以确保UI更新完成\n              setTimeout(() => {\n                try {\n                  rhythmReader.start();\n                } catch (e) {\n                  console.error(\"启动节奏阅读模式时出错:\", e);\n                }\n              }, 300);\n            }\n          }\n          return; // 找到匹配的就返回\n        }\n      }\n      \n      // 如果当前没有选择节奏阅读模式，但之前有，则停止节奏阅读\n      if (currentReadingMode === 'rhythm' || currentReadingMode === 'rhythm-reading') {\n        if (window.rhythmReader && window.rhythmReader.active) {\n          console.log(\"检测到阅读模式已更改，停止节奏阅读\");\n          rhythmReader.stop();\n        }\n        currentReadingMode = '';\n      }\n    };\n    \n    // 定期检查阅读模式\n    const intervalId = setInterval(checkReadingMode, 1000);\n    \n    // 也添加DOM变化监听\n    const observer = new MutationObserver(function(mutations) {\n      mutations.forEach(function(mutation) {\n        if (mutation.type === 'childList' || \n            (mutation.type === 'attributes' && \n             (mutation.attributeName === 'value' || mutation.attributeName === 'selected'))) {\n          // DOM变化时检查阅读模式\n          checkReadingMode();\n        }\n      });\n    });\n    \n    // 观察整个文档的变化\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      attributeFilter: ['value', 'selected']\n    });\n    \n    // 手动添加监听器到所有select元素\n    const selects = document.querySelectorAll('select');\n    selects.forEach(select => {\n      select.addEventListener('change', function(e) {\n        const value = this.value;\n        console.log(`选择器变化: ${value}`);\n        \n        if (value === 'rhythm' || value === 'rhythm-reading') {\n          console.log(\"选择了节奏阅读模式\");\n          \n          // 停止任何现有的节奏阅读\n          if (window.rhythmReader && window.rhythmReader.active) {\n            window.rhythmReader.stop();\n          }\n          \n          // 延迟启动新的节奏阅读\n          setTimeout(() => {\n            if (window.rhythmReader) {\n              rhythmReader.showNotification(\"节奏阅读模式已启动\", \"success\");\n              rhythmReader.start();\n            }\n          }, 300);\n        } else if (window.rhythmReader && window.rhythmReader.active) {\n          // 如果选择了其他模式，但节奏阅读还在运行，则停止它\n          window.rhythmReader.stop();\n        }\n      });\n    });\n    \n    // 返回清理函数\n    return function cleanup() {\n      clearInterval(intervalId);\n      observer.disconnect();\n    };\n  };\n  \n  // 启动监听\n  watchForReadingModeChanges();\n  \n  console.log(\"节奏阅读模式初始化完成，等待模式选择\");\n})();\n\n// 定义一个全局函数用于从应用代码中启动节奏阅读\nwindow.activateRhythmReadingMode = function() {\n  console.log(\"尝试从应用代码中启动节奏阅读模式\");\n  if (window.rhythmReader) {\n    if (window.rhythmReader.active) {\n      console.log(\"节奏阅读模式已经在运行\");\n    } else {\n      window.rhythmReader.start();\n    }\n  } else {\n    console.error(\"节奏阅读模式未初始化\");\n    alert(\"无法启动节奏阅读模式：组件未初始化\");\n  }\n};\n\n// 更新初始化函数\nconst initializeRhythmReading = () => {\n  // 不再自动初始化，而是等待用户选择\n  console.log(\"节奏阅读模式准备就绪，等待用户选择\");\n};\n\n// 更新启动函数\nconst startRhythmReading = () => {\n  if (window.rhythmReader && typeof window.rhythmReader.start === 'function') {\n    window.rhythmReader.start();\n  }\n};\n\nconst App = () => {\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  const [isTableOfContents, setIsTableOfContents] = useState(false);\n  \n  // 实现缺失的函数\n  // 应用深色背景\n  const applyDarkBackground = () => {\n    document.body.classList.add('dark-background');\n    \n    // 添加必要的CSS样式\n    if (!document.getElementById('dark-background-style')) {\n      const style = document.createElement('style');\n      style.id = 'dark-background-style';\n      style.textContent = `\n        .dark-background {\n          background-color: #000 !important;\n        }\n        .dark-background .sidebar {\n          background: linear-gradient(145deg, #4834d4, #341f9e) !important;\n        }\n        .dark-background .page-content {\n          background-color: #000 !important;\n        }\n        .dark-background .main-content {\n          background-color: #000 !important;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 恢复正常背景\n  const restoreDarkBackground = () => {\n    document.body.classList.remove('dark-background');\n  };\n  \n  // 添加裸眼3D样式\n  const addNakedEye3DStyles = () => {\n    if (!document.getElementById('naked-eye-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'naked-eye-3d-style';\n      style.textContent = `\n        .naked-eye-3d-container {\n          position: relative;\n          perspective: 800px;\n          width: 100%;\n        }\n        \n        .naked-eye-3d-text {\n          display: inline-block;\n          animation: float 3s ease-in-out infinite;\n          text-shadow: 0 0 5px rgba(255,255,255,0.3);\n          padding: 0 4px;\n          color: white;\n          filter: drop-shadow(0 0 5px rgba(120, 220, 255, 0.6));\n        }\n        \n        @keyframes float {\n          0% { transform: translateZ(0px); }\n          50% { transform: translateZ(20px); }\n          100% { transform: translateZ(0px); }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 添加舒适3D样式\n  const addComfortable3DStyles = () => {\n    if (!document.getElementById('comfortable-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'comfortable-3d-style';\n      style.textContent = `\n        .emboss-3d-text {\n          color: #fff;\n          text-shadow: \n            1px 1px 1px rgba(0,0,0,0.5),\n            -1px -1px 1px rgba(255,255,255,0.5);\n          letter-spacing: 1.5px;\n          font-weight: 500;\n        }\n        \n        .float-3d-text {\n          display: inline-block;\n          transform-style: preserve-3d;\n          transform: perspective(500px) translateZ(10px);\n          text-shadow: 0 2px 5px rgba(0,0,0,0.5);\n        }\n        \n        .gradient-3d-text {\n          display: inline-block;\n          background: linear-gradient(to bottom, #fff, #aaa);\n          -webkit-background-clip: text;\n          -webkit-text-fill-color: transparent;\n          text-shadow: 0 2px 4px rgba(0,0,0,0.3);\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 添加闪读样式\n  const addFlashReadingStyles = () => {\n    if (!document.getElementById('flash-reading-style')) {\n      const style = document.createElement('style');\n      style.id = 'flash-reading-style';\n      style.textContent = `\n        .flash-reading-container {\n          position: relative;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          z-index: 1000;\n          padding: 20px;\n        }\n        \n        .flash-reading-display-wrapper {\n          position: relative;\n          margin: 40px 0;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        \n        .flash-reading-display {\n          font-size: 36px;\n          font-weight: bold;\n          text-align: center;\n          color: white;\n          min-height: 80px;\n          max-width: 90%;\n          padding: 20px 40px;\n          position: relative; /* 允许绝对定位的覆盖层 */\n          z-index: 2;\n        }\n        \n        .flash-reading-cover {\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(128, 128, 128, 0.6); /* 灰色遮罩 */\n          border-radius: 8px;\n          z-index: 1; /* 确保在文本后面 */\n        }\n        \n        .flash-reading-controls {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          gap: 20px;\n          margin-bottom: 20px;\n          width: 100%;\n        }\n        \n        .flash-reading-buttons {\n          display: flex;\n          gap: 10px;\n          flex-wrap: wrap;\n          justify-content: center;\n        }\n        \n        .flash-reading-speed {\n          display: flex;\n          align-items: center;\n          color: white;\n          width: 80%;\n          max-width: 400px;\n          gap: 10px;\n        }\n        \n        .flash-reading-slider {\n          flex: 1;\n          height: 8px;\n          appearance: none;\n          background: #555;\n          border-radius: 4px;\n          outline: none;\n        }\n        \n        .flash-reading-slider::-webkit-slider-thumb {\n          appearance: none;\n          width: 20px;\n          height: 20px;\n          border-radius: 50%;\n          background: #6c5ce7;\n          cursor: pointer;\n        }\n        \n        .flash-reading-btn {\n          padding: 10px 20px;\n          border: none;\n          border-radius: 4px;\n          background-color: #6c5ce7;\n          color: white;\n          font-size: 16px;\n          cursor: pointer;\n          transition: background-color 0.2s;\n        }\n        \n        .flash-reading-btn:hover {\n          background-color: #5344c0;\n        }\n        \n        .flash-reading-btn:disabled {\n          background-color: #aaa;\n          cursor: not-allowed;\n        }\n        \n        .flash-reading-progress {\n          color: white;\n          font-size: 14px;\n          margin-top: 10px;\n        }\n        .flash-reading-speed-note {\n          font-size: 12px;\n          color: #ccc;\n          margin-left: 5px;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 初始化闪读模式\n  const initializeFlashReading = () => {\n    // 添加样式\n    addFlashReadingStyles();\n    \n    const sentences = window.flashReadingSentences;\n    if (!sentences || !Array.isArray(sentences) || sentences.length === 0) {\n      console.error('闪读模式: 未找到句子数据');\n      return;\n    }\n    \n    // 获取全局UI元素\n    const display = document.getElementById('flash-reading-display');\n    const speedSlider = document.getElementById('flash-reading-speed');\n    const speedValue = document.getElementById('flash-reading-speed-value');\n    const playButton = document.getElementById('flash-reading-play');\n    const pauseButton = document.getElementById('flash-reading-pause');\n    const stopButton = document.getElementById('flash-reading-stop');\n    const prevButton = document.getElementById('flash-reading-prev-sentence');\n    const nextButton = document.getElementById('flash-reading-next-sentence');\n    const progress = document.getElementById('flash-reading-progress');\n    const cover = document.querySelector('.flash-reading-cover');\n    \n    if (!display || !speedSlider || !speedValue || !playButton || !pauseButton || !stopButton || !prevButton || !nextButton || !progress || !cover) {\n      console.error('闪读模式: 未找到UI元素');\n      return;\n    }\n    \n    // 创建闪读控制器\n    window.flashReader = {\n      sentences: sentences,\n      currentIndex: 0,\n      interval: null,\n      speed: parseInt(speedSlider.value),\n      isPlaying: false,\n      \n      // 开始闪读\n      start() {\n        if (this.interval) {\n          clearInterval(this.interval);\n        }\n        \n        this.isPlaying = true;\n        playButton.disabled = true;\n        pauseButton.disabled = false;\n        progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        \n        // 显示当前句子\n        this.displayCurrentSentence();\n        \n        // 设置闪读间隔\n        this.interval = setInterval(() => {\n          this.currentIndex++;\n          \n          if (this.currentIndex >= this.sentences.length) {\n            this.stop();\n            display.textContent = '阅读完成';\n            return;\n          }\n          \n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }, this.speed);\n      },\n      \n      // 显示当前句子\n      displayCurrentSentence() {\n        if (this.currentIndex < this.sentences.length) {\n          const currentSentence = this.sentences[this.currentIndex];\n          display.textContent = currentSentence;\n          display.style.color = 'white'; // 确保文本为白色\n          \n          // 调整背景以适应内容\n          setTimeout(() => {\n            const displayRect = display.getBoundingClientRect();\n            // 确保覆盖层完全包裹文本\n            cover.style.width = `${displayRect.width}px`;\n            cover.style.height = `${displayRect.height}px`;\n          }, 10);\n        }\n      },\n      \n      // 暂停闪读\n      pause() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        \n        this.isPlaying = false;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n      },\n      \n      // 停止闪读\n      stop() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        \n        this.isPlaying = false;\n        this.currentIndex = 0;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n        \n        display.textContent = '准备开始';\n        progress.textContent = `进度：0 / ${this.sentences.length}`; // 重置进度\n      },\n      \n      // 更新速度\n      updateSpeed(newSpeed) {\n        this.speed = newSpeed;\n        speedValue.textContent = `${newSpeed} ms`;\n        \n        // 保存速度设置到本地存储\n        localStorage.setItem('flash-reading-speed', newSpeed);\n        \n        // 如果正在播放，重新开始以应用新速度\n        if (this.isPlaying) {\n          clearInterval(this.interval);\n          this.start(); // 直接调用start方法重新开始\n        }\n      },\n\n      // 返回上一句\n      prevSentence() {\n        if (this.currentIndex > 0) {\n          this.currentIndex--;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n\n      // 跳到下一句\n      nextSentence() {\n        if (this.currentIndex < this.sentences.length - 1) {\n          this.currentIndex++;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n\n      // 清理资源\n      cleanup() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        this.currentIndex = 0;\n      }\n    };\n    \n    // 添加事件监听器\n    playButton.addEventListener('click', () => {\n      window.flashReader.start();\n    });\n    \n    pauseButton.addEventListener('click', () => {\n      window.flashReader.pause();\n    });\n    \n    stopButton.addEventListener('click', () => {\n      window.flashReader.stop();\n    });\n    \n    speedSlider.addEventListener('input', (e) => {\n      const newSpeed = parseInt(e.target.value);\n      window.flashReader.updateSpeed(newSpeed);\n    });\n\n    prevButton.addEventListener('click', () => {\n      window.flashReader.prevSentence();\n    });\n\n    nextButton.addEventListener('click', () => {\n      window.flashReader.nextSentence();\n    });\n    \n    // 初始化\n    const savedSpeed = localStorage.getItem('flash-reading-speed');\n    const initialSpeed = savedSpeed ? parseInt(savedSpeed) : 1000;\n    speedSlider.value = initialSpeed;\n    window.flashReader.updateSpeed(initialSpeed);\n    \n    console.log('闪读模式已初始化，共 ' + sentences.length + ' 个句子');\n  };\n  \n  // 创建闪读内容\n  const createFlashReadingContent = (text) => {\n    return `<div class=\"flash-reading-content\">\n      <p>${text}</p>\n    </div>`;\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 格式化文本用于鼠标跟随\n  const formatTextForMouseFollow = (text) => {\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个单词添加span，以便于添加高亮效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"follow-word\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\" data-follow=\"true\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用静态高亮\n  const applyStaticHighlight = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为单词随机添加颜色高亮\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      let lastColor = null;\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n          return;\n        }\n        \n        // 随机决定是否高亮和使用哪种颜色\n        if (Math.random() < 0.7) {\n          let color;\n          if (lastColor === 'red') {\n            color = 'blue';\n          } else if (lastColor === 'blue') {\n            color = 'red';\n          } else {\n            color = Math.random() < 0.5 ? 'red' : 'blue';\n          }\n          lastColor = color;\n          \n          processedParagraph += `<span class=\"highlight-word ${color}\">${word}</span>`;\n        } else {\n          processedParagraph += word;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用裸眼3D效果\n  const applyNakedEye3dEffect = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content naked-eye-3d-container\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个词添加3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"naked-eye-3d-text\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用舒适3D效果\n  const applyComfortable3dEffect = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个词随机应用不同的3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n  } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          \n          processedParagraph += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 初始化裸眼3D\n  const initializeNakedEye3D = () => {\n    // 为裸眼3D文本添加动画\n    const textElements = document.querySelectorAll('.naked-eye-3d-text');\n    textElements.forEach((element, index) => {\n      // 添加随机延迟，使动画错开\n      const delay = Math.random() * 2;\n      element.style.animationDelay = `${delay}s`;\n    });\n  };\n\n  // 添加鼠标跟随监听器\n  const addMouseFollowListeners = () => {\n    // 获取内容容器\n    const contentArea = document.querySelector('.mouse-follow-content');\n    if (!contentArea) {\n      console.error('未找到鼠标跟随内容区域');\n      return;\n    }\n    \n    // 上一个高亮的行\n    let lastHighlightedLine = null;\n    \n    // 监听鼠标移动 - 精确的行检测\n    const mouseMoveHandler = (e) => {\n      // 获取鼠标位置\n      const mouseY = e.clientY;\n      \n      // 获取所有行\n      const allLines = contentArea.querySelectorAll('.follow-line');\n      let foundLine = null;\n      let minDistance = Infinity;\n      \n      // 寻找鼠标所在的精确行\n      allLines.forEach(line => {\n        const rect = line.getBoundingClientRect();\n        const lineCenter = rect.top + rect.height / 2;\n        const distance = Math.abs(mouseY - lineCenter);\n        \n        // 如果鼠标在行范围内，计算到行中心的距离\n        if (mouseY >= rect.top && mouseY <= rect.bottom) {\n          if (distance < minDistance) {\n            minDistance = distance;\n            foundLine = line;\n        }\n      }\n    });\n    \n      // 更新高亮状态\n      if (lastHighlightedLine && lastHighlightedLine !== foundLine) {\n        // 移除旧高亮\n        lastHighlightedLine.classList.remove('highlighted');\n      }\n      \n      if (foundLine) {\n        // 添加新高亮\n        foundLine.classList.add('highlighted');\n        lastHighlightedLine = foundLine;\n        \n        // 调试输出\n        console.log('当前高亮行:', foundLine.textContent.substring(0, 30) + '...');\n      } else if (lastHighlightedLine) {\n        // 如果没有找到新行，且有上一个高亮行，移除它\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n    \n    // 鼠标离开处理\n    const mouseLeaveHandler = () => {\n      // 清除当前高亮\n      if (lastHighlightedLine) {\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n    \n    // 存储处理函数引用\n    window.eventTracker = window.eventTracker || { mouseFollowHandlers: [] };\n    window.eventTracker.mouseFollowHandlers.push(\n      { element: contentArea, event: 'mousemove', handler: mouseMoveHandler },\n      { element: contentArea, event: 'mouseleave', handler: mouseLeaveHandler }\n    );\n    \n    // 添加事件监听器\n    contentArea.addEventListener('mousemove', mouseMoveHandler);\n    contentArea.addEventListener('mouseleave', mouseLeaveHandler);\n    \n    console.log('改进的鼠标跟随监听器已初始化');\n  };\n  \n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n  }, []);\n  \n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async (file) => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      \n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n      \n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n      \n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n  \n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({ scale: 1.0 });\n      \n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      \n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      \n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async (textContent) => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n    \n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n    \n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n    \n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    \n    const lines = [...lineMap.values()];\n    \n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    \n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    \n    return hasTocKeywords || hasPageNumberPatterns || (shortLineRatio > 0.7 && numberLineRatio > 0.3);\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n    \n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    \n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n      \n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n      \n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n      \n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    \n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && \n              x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = (text) => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    \n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      \n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        \n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    \n    return result;\n  };\n\n  // 处理内容页面 - 按句子划分段落\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      \n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n      // 按句子划分内容（句号、问号、感叹号等作为分隔符）\n      const sentences = splitIntoSentences(extractedText);\n      \n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch(mode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          // 使用ADHD友好的静态高亮处理\n          console.log('应用ADHD友好的静态高亮模式');\n          processedContent = formatSimpleHighlightedText(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'rhythm':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          processedContent = createFlashReadingContentFromSentences(sentences);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n      \n      setContent(processedContent);\n      \n      // 如果是静态高亮模式，添加延时验证检查\n      if (mode === 'static') {\n        setTimeout(() => {\n          const contentArea = document.querySelector('.adhd-highlight-mode');\n          if (contentArea) {\n            console.log('静态高亮模式元素存在');\n            const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n            console.log(`找到 ${paragraphs.length} 个段落`);\n            \n            // 检查样式是否正确应用\n            if (paragraphs.length > 0) {\n              const firstPara = paragraphs[0];\n              const styles = window.getComputedStyle(firstPara);\n              console.log('段落应用的样式:', {\n                color: styles.color,\n                backgroundColor: styles.backgroundColor,\n                fontFamily: styles.fontFamily,\n                fontSize: styles.fontSize\n              });\n            }\n          }\n        }, 200);\n      }\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 将文本分割成句子\n  const splitIntoSentences = (text) => {\n    // 匹配句号、问号、感叹号后跟空格或结束的模式\n    // 支持中英文标点符号\n    const sentenceRegex = /([.!?。！？；;]+\\s*)/g;\n    \n    // 分割文本成句子\n    const sentences = [];\n    let lastIndex = 0;\n    let match;\n    \n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const sentence = text.substring(lastIndex, endIndex).trim();\n      \n      // 避免添加空句子\n      if (sentence) {\n        sentences.push(sentence);\n      }\n      \n      lastIndex = endIndex;\n    }\n    \n    // 处理最后一部分（如果没有以句号等结尾）\n    if (lastIndex < text.length) {\n      const lastSentence = text.substring(lastIndex).trim();\n      if (lastSentence) {\n        sentences.push(lastSentence);\n      }\n    }\n    \n    return sentences;\n  };\n\n  // 专门为闪读模式分割文本，以任意标点符号为分隔点\n  const splitIntoFlashReadingSegments = (text) => {\n    // 匹配任意标点符号包括中英文标点\n    const sentenceRegex = /([,.!?:;，。！？：；、]+\\s*)/g;\n    \n    // 分割文本成短句\n    const segments = [];\n    let lastIndex = 0;\n    let match;\n    \n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const segment = text.substring(lastIndex, endIndex).trim();\n      \n      // 避免添加空段落\n      if (segment) {\n        segments.push(segment);\n      }\n      \n      lastIndex = endIndex;\n    }\n    \n    // 处理最后一部分（如果没有以标点符号结尾）\n    if (lastIndex < text.length) {\n      const lastSegment = text.substring(lastIndex).trim();\n      if (lastSegment) {\n        segments.push(lastSegment);\n      }\n    }\n    \n    return segments;\n  };\n\n  // 格式化句子为HTML\n  const formatSentencesToHtml = (sentences) => {\n    let html = '<div class=\"pdf-content\">';\n    \n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${sentence}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为句子应用静态高亮\n  const applyStaticHighlightToSentences = (sentences) => {\n    let html = '<div class=\"pdf-content adhd-content\">';\n    \n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      \n      // 简单地为句子添加特定样式的class\n      html += `<p class=\"pdf-paragraph adhd-sentence\">${sentence}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为鼠标跟随模式格式化句子\n  const formatSentencesForMouseFollow = (sentences) => {\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    sentences.forEach((sentence, index) => {\n      if (sentence.trim() === '') return;\n      \n      // 每个句子作为独立行，使用div而不是p标签\n      html += `<div class=\"follow-line\" data-line=\"${index}\" data-sentence=\"${sentence.substring(0, 20)}...\" style=\"color: inherit;\">${sentence}</div>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为舒适3D模式格式化句子\n  const applyComfortable3dEffectToSentences = (sentences) => {\n    let html = '<div class=\"pdf-content\">';\n    \n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      \n      // 为每个词随机应用不同的3D效果\n      const words = sentence.split(/(\\s+)/);\n      let processedSentence = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedSentence += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          \n          processedSentence += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedSentence}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为闪读模式创建内容\n  const createFlashReadingContentFromSentences = (sentences) => {\n    // 储存句子到全局变量，用于后续显示\n    window.flashReadingSentences = sentences;\n\n    // 返回闪读界面的HTML结构\n    return `\n      <div class=\"flash-reading-container\">\n        <div class=\"flash-reading-controls\">\n          <div class=\"flash-reading-buttons\">\n            <button id=\"flash-reading-prev-sentence\" class=\"flash-reading-btn\">上一句</button>\n            <button id=\"flash-reading-play\" class=\"flash-reading-btn\">开始</button>\n            <button id=\"flash-reading-pause\" class=\"flash-reading-btn\" disabled>暂停</button>\n            <button id=\"flash-reading-stop\" class=\"flash-reading-btn\">停止</button>\n            <button id=\"flash-reading-next-sentence\" class=\"flash-reading-btn\">下一句</button>\n          </div>\n          <div class=\"flash-reading-speed\">\n            <span>速度：</span>\n            <input type=\"range\" id=\"flash-reading-speed\" min=\"300\" max=\"1700\" step=\"50\" value=\"1000\" class=\"flash-reading-slider\">\n            <span id=\"flash-reading-speed-value\">1000 ms</span>\n            <span class=\"flash-reading-speed-note\">（数值越小，切换越快）</span>\n          </div>\n          <div class=\"flash-reading-progress\">\n            <span id=\"flash-reading-progress\">进度：0 / ${sentences.length}</span>\n          </div>\n        </div>\n        <div class=\"flash-reading-display-wrapper\">\n          <div class=\"flash-reading-cover\"></div> <!-- 这里是闪卡 -->\n          <div id=\"flash-reading-display\" class=\"flash-reading-display\">准备开始</div>\n        </div>\n      </div>`;\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async (file) => {\n    try {\n      const text = await file.text();\n      \n      // 根据阅读模式选择不同的处理方式\n      let processedContent = '';\n      \n      if (readingMode === 'flash-reading') {\n        // 闪读模式下使用特定的分割函数\n        const segments = splitIntoFlashReadingSegments(text);\n        processedContent = createFlashReadingContentFromSentences(segments);\n        \n        // 初始化闪读模式\n        setTimeout(() => {\n          initializeFlashReading();\n        }, 100);\n      } else {\n        // 其他模式使用默认的分割方式\n        const sentences = splitIntoSentences(text);\n        \n        switch(readingMode) {\n          case 'normal':\n            processedContent = formatSentencesToHtml(sentences);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlightToSentences(sentences);\n            break;\n          case 'follow-mouse':\n            processedContent = formatSentencesForMouseFollow(sentences);\n            break;\n          case 'comfortable-3d':\n            processedContent = applyComfortable3dEffectToSentences(sentences);\n            break;\n          default:\n            processedContent = formatSentencesToHtml(sentences);\n        }\n      }\n      \n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n      \n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setContent('<div class=\"error-message\">TXT文件处理失败</div>');\n    }\n  };\n\n  // 处理Markdown文件\n  const handleMarkdownFile = async (file) => {\n    try {\n      const text = await file.text();\n      \n      // 使用marked库转换markdown为HTML\n      let html = '';\n      try {\n        if (window.marked) {\n          html = window.marked.parse(text);\n        } else {\n          // 如果没有marked库，简单地拆分为段落\n          html = `<div>${text.split(\"\\n\\n\").map(p => `<p>${p}</p>`).join(\"\")}</div>`;\n        }\n      } catch (parseError) {\n        console.error('Markdown解析错误:', parseError);\n        html = `<div>${text}</div>`;\n      }\n      \n      // 提取纯文本内容\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = html;\n      const plainText = tempDiv.textContent || tempDiv.innerText || '';\n      \n      // 分割文本为句子\n      const sentences = splitIntoSentences(plainText);\n      \n      // 根据当前阅读模式处理内容\n      let processedContent = '';\n      switch(readingMode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlightToSentences(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          // 使用特定的闪读分割函数重新处理文本\n          const segments = splitIntoFlashReadingSegments(plainText);\n          processedContent = createFlashReadingContentFromSentences(segments);\n          \n          // 初始化闪读模式\n          setTimeout(() => {\n            initializeFlashReading();\n          }, 100);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n      \n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n      \n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('Markdown处理错误:', error);\n      setContent('<div class=\"error-message\">Markdown文件处理失败</div>');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async (e) => {\n    const uploadedFile = e.target.files[0];\n    if (!uploadedFile) return;\n    \n    setLoading(true);\n    setFileName(uploadedFile.name);\n    \n    try {\n      if (uploadedFile.type === 'application/pdf') {\n        await handlePdfFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/plain' || uploadedFile.name.endsWith('.txt')) {\n        await handleTxtFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/markdown' || uploadedFile.name.endsWith('.md')) {\n        await handleMarkdownFile(uploadedFile);\n    } else {\n        setContent('<div class=\"error-message\">不支持的文件格式</div>');\n      }\n    } catch (error) {\n      console.error('处理文件时出错:', error);\n      setContent('<div class=\"error-message\">处理文件时出错</div>');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = (container) => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    \n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n      \n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n      \n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          \n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n          \n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width/2,  // 水平中心\n            y: rect.bottom,               // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n    \n    // 过滤无效位置并排序\n    return positions\n      .filter(p => p.char.trim() !== '')\n      .sort((a, b) => {\n        // 先按行排序，同行按列排序\n        const yDiff = a.y - b.y;\n        if (Math.abs(yDiff) > 5) { // 5px阈值判断是否同一行\n          return yDiff;\n        }\n        return a.x - b.x;\n      });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    \n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - (containerVisibleHeight / 2);\n      \n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - (window.innerHeight / 2);\n      \n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    \n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n    \n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    \n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n    \n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length || // 已到末尾\n          positions[nextIndex].char.trim() === '' || // 下一个是空白\n          positions[nextIndex].y > charPosition.y + 5) { // 下一个在新行\n        return true;\n      }\n    }\n    \n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n    \n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n      \n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || \n          current.y > prev.y + 5) { // 有明显换行\n        break;\n      }\n      \n      start--;\n    }\n    \n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n      \n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      \n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n      \n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      \n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (window.autoReader.charPositions.length === 0) {\n      if (window.currentPage < window.totalPages) {\n        window.changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 重置索引到开头\n    window.autoReader.currentIndex = 0;\n    \n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    \n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n    \n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n    \n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none';\n      highlight.style.zIndex = '998';\n      contentContainer.appendChild(highlight);\n    }\n    \n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight &&\n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n    \n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20;\n    \n    // 尝试获取实际行高\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(window.autoReader.charPositions[i].y - window.autoReader.charPositions[i-1].y);\n        if (yDiff > 5) {\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n    \n    // 记录上次滚动的位置\n    let lastScrolledY = -1;\n    const scrollSafeZone = lineHeight * 2.5;\n    \n    // 设置字符大小的估计值\n    let charWidth = 20;\n    let charHeight = lineHeight * 0.8;\n    \n    // 尝试估计字符宽度\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        if (window.autoReader.charPositions[i].x !== window.autoReader.charPositions[i-1].x) {\n          const xDiff = Math.abs(window.autoReader.charPositions[i].x - window.autoReader.charPositions[i-1].x);\n          if (xDiff > 0 && xDiff < 50) {\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    \n    window.autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (window.autoReader.currentIndex < window.autoReader.charPositions.length && \n             window.autoReader.charPositions[window.autoReader.currentIndex]?.char.trim() === '') {\n        window.autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (window.autoReader.currentIndex >= window.autoReader.charPositions.length) {\n        if (window.currentPage < window.totalPages) {\n          window.changePage(1);\n          clearInterval(window.autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n\n      const pos = window.autoReader.charPositions[window.autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      \n      if (cursor && highlight) {\n        const contentRect = contentContainer.getBoundingClientRect();\n        \n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        \n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        \n        highlight.style.left = `${relativeX - charWidth/2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n        \n        // 滚动处理\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        \n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          \n          if (isContainerScrollable) {\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n            \n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            \n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = relativeY;\n            }\n          } else {\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n            \n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            \n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      \n      window.autoReader.currentIndex++;\n      \n    }, window.autoReader.speed);\n    \n    // 在停止自动阅读时清除所有高亮\n    window.autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n      \n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n      \n      // 调用清理函数\n      if (window.autoReader.cleanup) {\n        window.autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n    \n    // 重置翻页状态\n    window.autoReader.isPageChanging = false;\n    \n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n    \n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n    \n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n    \n    // 收集字符位置\n    window.autoReader.charPositions = getAllCharacterPositions(content);\n    \n    // 如果当前页没有内容，尝试翻页\n    if (window.autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !window.autoReader.isPageChanging) {\n        window.autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async (e) => {\n    const newMode = e.target.value;\n    const prevMode = readingMode;\n    \n    console.log(`切换阅读模式: 从 ${prevMode} 到 ${newMode}`);\n    \n    // 更新状态\n    setReadingMode(newMode);\n    \n    // 如果有PDF文档和当前页，重新处理当前页内容\n    if (pdfDocument && currentPage > 0) {\n      try {\n        console.log('重新处理当前页面内容');\n        const page = await pdfDocument.getPage(currentPage);\n        \n        // 不使用任何额外处理，直接使用最原始的方式重新加载页面\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n        \n        // 根据当前模式设置内容\n        if (newMode === 'static') {\n          // 静态高亮模式 - 使用改进的句子处理\n          const html = formatSimpleHighlightedText(sentences);\n          console.log('设置静态高亮内容');\n          setContent(html);\n          \n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n        if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n              \n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n                \n                // 验证文字颜色\n                if (styles.color === 'rgb(51, 51, 51)' || styles.color === '#333333') {\n                  console.log('文字颜色正确应用');\n                } else {\n                  console.warn('文字颜色可能未正确应用:', styles.color);\n                }\n              }\n            } else {\n              console.error('未找到静态高亮模式内容区域');\n            }\n          }, 200);\n        } else if (newMode === 'flash-reading') {\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n            \n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n            \n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n            \n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n        } else {\n          // 其他模式保持不变\n          const handler = getContentHandlerForMode(newMode);\n          const processedContent = handler(sentences);\n          setContent(processedContent);\n        }\n      } catch (error) {\n        console.error('应用阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 首先确保移除鼠标跟随监听器\n    removeMouseFollowListeners();\n    \n    // 清理节奏阅读器\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    \n    // 清理闪读器\n    if (window.flashReader) {\n      window.flashReader.cleanup();\n    }\n    \n    // 清理舒适3D效果\n    const comfortable3DElements = document.querySelectorAll('.emboss-3d-text, .float-3d-text, .gradient-3d-text');\n    comfortable3DElements.forEach(el => el.remove());\n    \n    // 清理闪读模式元素\n    const flashReadingElements = document.querySelectorAll('.flash-reading-container, .flash-reading-display, .flash-reading-controls');\n    flashReadingElements.forEach(el => el.remove());\n    \n    // 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll(\n      '.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line, .rhythm-char'\n    );\n    highlights.forEach(el => {\n      if (el.parentNode) el.parentNode.removeChild(el);\n    });\n    \n    // 彻底替换内容区域以移除所有事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 先保存底部翻页控件\n      const bottomPagination = contentArea.querySelector('.bottom-pagination');\n      \n      // 深度克隆内容，但不克隆事件监听器\n      const contentHTML = contentArea.querySelector('div[dangerouslySetInnerHTML]')?.innerHTML || '';\n      const newContentArea = contentArea.cloneNode(false);\n      \n      // 创建新的内容容器\n      const newContentContainer = document.createElement('div');\n      newContentContainer.innerHTML = contentHTML;\n      newContentArea.appendChild(newContentContainer);\n      \n      // 如果有底部翻页控件，重新添加\n      if (bottomPagination && totalPages > 0) {\n        const newBottomPagination = bottomPagination.cloneNode(true);\n        // 重新绑定事件\n        const prevBtn = newBottomPagination.querySelector('.page-btn:first-child');\n        const nextBtn = newBottomPagination.querySelector('.page-btn:last-child');\n        if (prevBtn) prevBtn.onclick = () => changePage(-1);\n        if (nextBtn) nextBtn.onclick = () => changePage(1);\n        newContentArea.appendChild(newBottomPagination);\n      }\n      \n      if (contentArea.parentNode) {\n        contentArea.parentNode.replaceChild(newContentArea, contentArea);\n      }\n    }\n    \n    // 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 移除所有特殊标记和样式\n      paragraph.removeAttribute('data-follow');\n      paragraph.removeAttribute('style');\n      \n      // 清理特殊span标签\n      paragraph.innerHTML = paragraph.innerHTML\n        .replace(/<span class=\"text-line\"[^>]*>/g, '')\n        .replace(/<span class=\"rhythm-char\"[^>]*>/g, '')\n        .replace(/<span class=\"line-highlight[^\"]*\"[^>]*>/g, '')\n        .replace(/<span class=\"mouse-highlight[^\"]*\"[^>]*>/g, '')\n        .replace(/<\\/span>/g, '');\n    });\n    \n    // 移除特殊UI元素\n    const elementsToRemove = [\n      'rhythm-speed-slider',\n      'rhythm-notification'\n    ];\n    \n    elementsToRemove.forEach(id => {\n      const element = document.getElementById(id);\n      if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    });\n    \n    // 移除暗色背景\n    document.body.classList.remove('dark-background');\n    \n    // 清理闪读模式\n    if (window.flashReader && typeof window.flashReader.cleanup === 'function') {\n      window.flashReader.cleanup();\n    }\n  };\n\n  const handleAutoScroll = () => {\n    window.autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = (e) => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    \n    const rect = contentArea.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    \n    clearAllHighlights();\n    \n    const paragraphs = contentArea.querySelectorAll('p');\n    paragraphs.forEach(paragraph => {\n      const paragraphRect = paragraph.getBoundingClientRect();\n      const paragraphX = paragraphRect.left - rect.left;\n      const paragraphY = paragraphRect.top - rect.top;\n      \n      if (y >= paragraphY && y <= paragraphY + paragraphRect.height) {\n        const words = paragraph.querySelectorAll('span');\n        words.forEach(word => {\n          const wordRect = word.getBoundingClientRect();\n          const wordX = wordRect.left - rect.left;\n          \n          if (x >= wordX && x <= wordX + wordRect.width) {\n            word.classList.add('highlight');\n          }\n        });\n      }\n    });\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 专门用于移除鼠标跟随事件的函数\n  const removeMouseFollowListeners = () => {\n    // 移除记录的所有监听器\n    if (window.eventTracker && window.eventTracker.mouseFollowHandlers) {\n      window.eventTracker.mouseFollowHandlers.forEach(({element, event, handler}) => {\n        if (element && element.removeEventListener) {\n          element.removeEventListener(event, handler);\n        }\n      });\n      window.eventTracker.mouseFollowHandlers = [];\n    }\n    \n    // 为安全起见，尝试从document和内容区域移除通用处理函数\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    }\n    \n    document.removeEventListener('mousemove', handleMouseMove);\n    \n    // 清除所有当前高亮\n    clearAllHighlights();\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n    \n    // 添加底部翻页控件样式\n    const bottomPaginationStyles = document.createElement('style');\n    bottomPaginationStyles.id = 'bottom-pagination-styles';\n    bottomPaginationStyles.innerHTML = `\n      .bottom-pagination {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        padding: 20px 0 30px;\n        margin-top: 30px;\n        width: 100%;\n        background-color: transparent;\n        border-radius: 5px;\n      }\n\n      .bottom-pagination .page-btn {\n        background-color: #6c5ce7;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        padding: 8px 15px;\n        margin: 0 10px;\n        cursor: pointer;\n        font-size: 14px;\n        transition: background-color 0.2s ease;\n      }\n\n      .bottom-pagination .page-btn:hover {\n        background-color: #4834d4;\n      }\n\n      .bottom-pagination .page-btn:disabled {\n        background-color: #aaa;\n        cursor: not-allowed;\n      }\n\n      .bottom-pagination .page-info {\n        font-size: 14px;\n        margin: 0 10px;\n      }\n    `;\n    document.head.appendChild(bottomPaginationStyles);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n    addComfortable3DStyles();\n    \n    // 添加鼠标跟随模式的样式\n    const mouseFollowStyle = document.createElement('style');\n    mouseFollowStyle.id = 'intelligent-mouse-follow-style';\n    mouseFollowStyle.textContent = `\n      /* 基础样式 */\n      .mouse-follow-content {\n        position: relative;\n        line-height: 1.8;\n      }\n      \n      .mouse-follow-content .follow-line {\n        position: relative;\n        padding: 8px 16px;\n        margin: 4px 0;\n        border-radius: 6px;\n        transition: all 0.2s ease;\n        display: block;\n        min-height: 1.8em;\n        white-space: normal;\n        word-wrap: break-word;\n        text-indent: 2em;\n      }\n      \n      /* 高亮状态 */\n      .follow-line.highlighted {\n        background-color: #ffa500 !important; /* 橙色背景 */\n        color: #ffffff !important; /* 白色文字 */\n        font-weight: bold !important;\n        font-size: 1.1em; /* 稍微调小字号 */\n        transform: translateX(5px);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n      }\n      \n      \n      /* 平滑过渡效果 */\n      .follow-line {\n        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n      }\n      \n      /* 行间距优化 */\n      .mouse-follow-content .follow-line + .follow-line {\n        margin-top: 4px;\n      }\n      \n      /* 添加行指示器 */\n      .follow-line::before {\n        content: '';\n        position: absolute;\n        left: 0;\n        top: 0;\n        bottom: 0;\n        width: 3px;\n        background: linear-gradient(to bottom, transparent, rgba(255, 255, 255, 0.5), transparent);\n        opacity: 0;\n        transition: opacity 0.2s ease;\n      }\n      \n      .follow-line.highlighted::before {\n        opacity: 1;\n      }\n    `;\n    document.head.appendChild(mouseFollowStyle);\n    \n    // 创建深色背景下的ADHD友好高亮样式\n    const style = document.createElement('style');\n    style.id = 'adhd-friendly-highlight-style';\n    style.textContent = `\n      /* ADHD友好的高亮样式 - 适配深色背景 */\n      .adhd-highlight-mode {\n        line-height: 1.8;\n        padding: 20px;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph {\n        margin-bottom: 1.2em;\n        background-color: transparent;\n        padding: 12px 15px;\n        border-radius: 6px;\n        border-left: 3px solid rgba(255, 255, 255, 0.2);\n        transition: all 0.3s ease;\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover {\n        transform: translateX(5px);\n        border-left-color: rgba(255, 255, 255, 0.4);\n      }\n      \n      /* 加粗样式 - 白色加粗 */\n      .adhd-bold {\n        font-weight: 700;\n        color: #ffffff;\n        letter-spacing: 0.02em;\n        font-size: 1.1em;\n        text-shadow: 0 0 1px rgba(255, 255, 255, 0.2);\n      }\n      \n      /* 彩色样式 - 使用鲜明的蓝色 */\n      .adhd-colored {\n        color: #6c5ce7;\n        font-weight: 500;\n        font-size: 1.05em;\n        text-shadow: 0 0 1px rgba(108, 92, 231, 0.2);\n      }\n      \n      /* 正常样式 - 普通白色 */\n      .adhd-normal {\n        color: rgba(255, 255, 255, 0.8);\n        font-size: 1em;\n      }\n\n      /* 添加平滑过渡效果 */\n      .adhd-bold, .adhd-colored, .adhd-normal {\n        transition: all 0.2s ease;\n      }\n\n      /* 悬停效果 */\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-bold {\n        color: #ffffff;\n        text-shadow: 0 0 2px rgba(255, 255, 255, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-colored {\n        color: #8a7ff7;\n        text-shadow: 0 0 2px rgba(138, 127, 247, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-normal {\n        color: rgba(255, 255, 255, 0.9);\n      }\n\n      /* 添加段落间距的视觉引导 */\n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph {\n        margin-top: 1.5em;\n        position: relative;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph::before {\n        content: '';\n        position: absolute;\n        top: -0.75em;\n        left: 0;\n        right: 0;\n        height: 1px;\n        background: linear-gradient(\n          to right,\n          transparent,\n          rgba(255, 255, 255, 0.1),\n          transparent\n        );\n      }\n    `;\n    document.head.appendChild(style);\n    \n    // 添加基础鼠标跟随样式\n    const mouseFollowPageStyle = document.createElement('style');\n    mouseFollowPageStyle.id = 'basic-mouse-follow-style';\n    mouseFollowPageStyle.textContent = `\n      .follow-line {\n        padding: 8px 12px;\n        margin: 4px 0;\n        border-radius: 4px;\n        transition: background-color 0.2s ease;\n      }\n      .follow-line.highlighted {\n        background-color: #ffa500;\n        color: #000080;\n        font-weight: bold;\n      }\n    `;\n    document.head.appendChild(mouseFollowPageStyle);\n    \n    return () => {\n      const existingStyle = document.getElementById('adhd-friendly-highlight-style');\n      if (existingStyle) existingStyle.remove();\n      \n      const existingMouseFollowStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (existingMouseFollowStyle) existingMouseFollowStyle.remove();\n      \n      const existingBasicMouseFollowStyle = document.getElementById('basic-mouse-follow-style');\n      if (existingBasicMouseFollowStyle) existingBasicMouseFollowStyle.remove();\n      \n      mouseFollowPageStyle.remove();\n    };\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 清理旧监听器\n    removeMouseFollowListeners();\n    \n    // 添加新监听器\n    setTimeout(() => {\n      addMouseFollowListeners();\n      \n      // 添加调试辅助 - 显示行边界\n      const contentArea = document.querySelector('.mouse-follow-content');\n      if (contentArea) {\n        const lines = contentArea.querySelectorAll('.follow-line');\n        console.log(`初始化鼠标跟随模式，共 ${lines.length} 行`);\n        \n        // 可选：启用可视化调试\n        if (false) { // 设置为true可以启用可视化调试\n          lines.forEach((line, index) => {\n            line.style.border = '1px dashed #888';\n            line.setAttribute('title', `行 ${index+1}`);\n          });\n        }\n        \n        // 验证行高亮效果\n        const firstLine = lines[0];\n        if (firstLine) {\n          console.log('行样式验证:', {\n            padding: window.getComputedStyle(firstLine).padding,\n            margin: window.getComputedStyle(firstLine).margin,\n            fontSize: window.getComputedStyle(firstLine).fontSize,\n            lineHeight: window.getComputedStyle(firstLine).lineHeight\n          });\n        }\n      }\n    }, 100);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = (delta) => {\n    window.autoReader.speed = Math.max(100, window.autoReader.speed + delta);\n    \n    if (window.autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async (delta) => {\n    console.log(`翻页请求: 当前页 ${currentPage}, 增量 ${delta}`);\n    const newPage = currentPage + delta;\n    \n    if (newPage < 1 || newPage > totalPages) {\n      console.log('无效页码，不执行翻页');\n          return;\n        }\n        \n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n    const wasFlashReading = readingMode === 'flash-reading' && window.flashReader && window.flashReader.isPlaying;\n    \n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    \n    if (wasFlashReading && window.flashReader) {\n      window.flashReader.cleanup();\n    }\n    \n    // 更新页码\n    setCurrentPage(newPage);\n    \n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n      \n      // 检查是否为目录页\n      const textContent = await page.getTextContent();\n      const isToc = await detectIfTocPage(textContent);\n      setIsTableOfContents(isToc);\n      \n      if (isToc) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, page.getViewport({ scale: 1.0 }));\n      } else {\n        // 处理正文页面 - 根据当前阅读模式处理\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n        \n        // 根据当前模式设置内容\n        if (readingMode === 'static') {\n          console.log('翻页后应用静态高亮模式');\n          const processedContent = formatSimpleHighlightedText(sentences);\n          setContent(processedContent);\n          \n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n            if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n              \n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n              }\n            }\n          }, 200);\n        } else if (readingMode === 'flash-reading') {\n          // 如果是闪读模式，则需要特殊处理\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n            \n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n            \n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n            \n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n          return; // 已处理，直接返回\n        } else {\n          // 其他模式使用原处理函数\n          await processContentPage(page, readingMode);\n        }\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n    } catch (error) {\n      console.error('页面切换错误:', error);\n    }\n  };\n\n  // ADHD友好的静态高亮处理函数\n  const formatSimpleHighlightedText = (sentences) => {\n    console.log('开始处理ADHD友好的静态高亮文本，句子数量:', sentences.length);\n    \n    let html = '<div class=\"pdf-content adhd-highlight-mode\">';\n    \n    sentences.forEach((sentence, sentenceIndex) => {\n      if (!sentence || sentence.trim() === '') {\n        console.log(`跳过空句子，索引: ${sentenceIndex}`);\n      return;\n    }\n    \n      // 清理和规范化文本\n      const cleanText = sentence\n        .trim()\n        .replace(/\\s+/g, ' ')  // 规范化空白字符\n        .replace(/&/g, '&amp;')  // 转义特殊字符\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n      \n      // 处理句子中的单词，为它们添加不同样式\n      const words = cleanText.split(/(\\s+)/);\n      let formattedSentence = '';\n      \n      words.forEach((word, wordIndex) => {\n        if (word.trim() === '') {\n          // 保留空格\n          formattedSentence += word;\n      } else {\n          // 根据位置应用不同的样式类\n          // 三种交替样式: 加粗、彩色、正常\n          const styleClass = wordIndex % 3 === 0 ? 'adhd-bold' : \n                           wordIndex % 3 === 1 ? 'adhd-colored' : 'adhd-normal';\n          \n          formattedSentence += `<span class=\"${styleClass}\">${word}</span>`;\n        }\n      });\n      \n      console.log(`处理句子 ${sentenceIndex + 1}:`, cleanText.substring(0, 50) + '...');\n      html += `<p class=\"pdf-paragraph\">${formattedSentence}</p>`;\n    });\n    \n    html += '</div>';\n    \n    // 调试输出\n    console.log('生成的ADHD友好静态高亮HTML:', html.substring(0, 200) + '...');\n    \n    return html;\n  };\n\n  // 根据阅读模式获取相应的内容处理函数\n  const getContentHandlerForMode = (mode) => {\n    switch(mode) {\n      case 'normal': return formatSentencesToHtml;\n      case 'static': return applyStaticHighlightToSentences;\n      case 'follow-mouse': return formatSentencesForMouseFollow;\n      case 'comfortable-3d': return applyComfortable3dEffectToSentences;\n      case 'flash-reading': \n        return (sentences) => {\n          // 闪读模式使用专门的分割函数重新处理文本\n          return createFlashReadingContentFromSentences(sentences);\n        };\n      default: return formatSentencesToHtml;\n    }\n  };\n\n  // 监听阅读模式和当前页面的变化\n  useEffect(() => {\n    if (readingMode === 'mouse-follow' && currentPage && !isTableOfContents) {\n      // 移除之前的样式\n      const oldStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (oldStyle) {\n        oldStyle.remove();\n      }\n      \n      // 添加基础鼠标跟随样式\n      const followModeStyle = document.createElement('style');\n      followModeStyle.id = 'basic-mouse-follow-style';\n      followModeStyle.textContent = `\n        .follow-line {\n          padding: 8px 12px;\n          margin: 4px 0;\n          border-radius: 4px;\n          transition: background-color 0.2s ease;\n        }\n        .follow-line.highlighted {\n          background-color: #ffa500;\n          color: #000080;\n          font-weight: bold;\n        }\n      `;\n      document.head.appendChild(followModeStyle);\n      \n      // 处理当前页面内容\n      const page = pdfDocument.getPage(currentPage);\n      const textContent = page.getTextContent();\n      const sentences = textContent.items\n        .map(item => item.str)\n        .join(' ')\n        .split(/[。！？]/)\n        .filter(s => s.trim());\n      \n      // 应用基础鼠标跟随格式化\n      setContent(formatSentencesForMouseFollow(sentences));\n      \n      // 添加鼠标跟随监听器\n      setTimeout(() => {\n        addMouseFollowListeners();\n      }, 100);\n      \n      return () => {\n        followModeStyle.remove();\n      };\n    }\n  }, [readingMode, currentPage, pdfDocument]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        <div className=\"logo\">\n          <h2>ADHD阅读助手</h2>\n        </div>\n        \n        <div className=\"reading-controls\">\n          <h3>阅读模式</h3>\n          <select \n            id=\"reading-mode-select\" \n            value={readingMode} \n            onChange={handleReadingModeChange}\n            className=\"mode-select\"\n          >\n            <option value=\"normal\">普通模式</option>\n            <option value=\"static\">静态高亮</option>\n            <option value=\"follow-mouse\">鼠标跟随</option>\n            <option value=\"rhythm\">节奏阅读</option>\n            <option value=\"flash-reading\">闪读模式</option>\n          </select>\n        </div>\n        \n        <div className=\"upload-section\">\n          <input\n            type=\"file\"\n            accept=\".pdf,.txt,.md\" \n            hidden\n            id=\"file-upload\"\n            onChange={handleFileUpload}\n            ref={fileRef}\n          />\n          <button \n            className=\"upload-btn\"\n            onClick={() => fileRef.current.click()}\n          >\n            上传文件 (.pdf/.txt/.md)\n          </button>\n      </div>\n            </div>\n      \n      <div className=\"main-content\">\n        <div className=\"toolbar\">\n          {fileName && <h3 className=\"filename\">{fileName}</h3>}\n          {/* 移除了原有翻页控件 */}\n            </div>\n        \n        <div className=\"page-content\" ref={readerContainerRef}>\n            <div dangerouslySetInnerHTML={{ __html: content }} />\n          \n          {totalPages > 0 && (\n            <div className=\"bottom-pagination\">\n              <button \n                onClick={() => changePage(-1)} \n                disabled={currentPage <= 1}\n                className=\"page-btn\"\n              >\n                上一页\n              </button>\n            <span className=\"page-info\">\n                第 {currentPage} / {totalPages} 页\n              </span>\n              <button \n                onClick={() => changePage(1)} \n                disabled={currentPage >= totalPages}\n                className=\"page-btn\"\n              >\n                下一页\n              </button>\n          </div>\n        )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App; \n"],"mappings":"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,YAAY,EAAEN,kBAAkB,CAAC;IACnE;IAEA9c,QAAQ,CAACod,mBAAmB,CAAC,WAAW,EAAER,eAAe,CAAC;;IAE1D;IACAE,kBAAkB,CAAC,CAAC;EACtB,CAAC;;EAED;EACA,MAAMO,mBAAmB,GAAGA,CAAA,KAAM;IAChC,MAAM7Z,KAAK,GAAGxD,QAAQ,CAACI,aAAa,CAAC,OAAO,CAAC;IAC7CoD,KAAK,CAACtB,WAAW,GAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDlC,QAAQ,CAACuM,IAAI,CAAC9L,WAAW,CAAC+C,KAAK,CAAC;;IAEhC;IACA,MAAM8Z,sBAAsB,GAAGtd,QAAQ,CAACI,aAAa,CAAC,OAAO,CAAC;IAC9Dkd,sBAAsB,CAACjd,EAAE,GAAG,0BAA0B;IACtDid,sBAAsB,CAAC/c,SAAS,GAAG;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDP,QAAQ,CAACuM,IAAI,CAAC9L,WAAW,CAAC6c,sBAAsB,CAAC;EACnD,CAAC;;EAED;EACAzf,SAAS,CAAC,MAAM;IACdwf,mBAAmB,CAAC,CAAC;IACrB3Q,sBAAsB,CAAC,CAAC;;IAExB;IACA,MAAM6Q,gBAAgB,GAAGvd,QAAQ,CAACI,aAAa,CAAC,OAAO,CAAC;IACxDmd,gBAAgB,CAACld,EAAE,GAAG,gCAAgC;IACtDkd,gBAAgB,CAACrb,WAAW,GAAG;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDlC,QAAQ,CAACuM,IAAI,CAAC9L,WAAW,CAAC8c,gBAAgB,CAAC;;IAE3C;IACA,MAAM/Z,KAAK,GAAGxD,QAAQ,CAACI,aAAa,CAAC,OAAO,CAAC;IAC7CoD,KAAK,CAACnD,EAAE,GAAG,+BAA+B;IAC1CmD,KAAK,CAACtB,WAAW,GAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDlC,QAAQ,CAACuM,IAAI,CAAC9L,WAAW,CAAC+C,KAAK,CAAC;;IAEhC;IACA,MAAMga,oBAAoB,GAAGxd,QAAQ,CAACI,aAAa,CAAC,OAAO,CAAC;IAC5Dod,oBAAoB,CAACnd,EAAE,GAAG,0BAA0B;IACpDmd,oBAAoB,CAACtb,WAAW,GAAG;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDlC,QAAQ,CAACuM,IAAI,CAAC9L,WAAW,CAAC+c,oBAAoB,CAAC;IAE/C,OAAO,MAAM;MACX,MAAMC,aAAa,GAAGzd,QAAQ,CAACC,cAAc,CAAC,+BAA+B,CAAC;MAC9E,IAAIwd,aAAa,EAAEA,aAAa,CAACvd,MAAM,CAAC,CAAC;MAEzC,MAAMwd,wBAAwB,GAAG1d,QAAQ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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}