{"ast":null,"code":"var _jsxFileName = \"D:\\\\adhd-read-helper\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 模拟NLP词性标注功能（实际应用中建议使用专业NLP库如nlp.js或调用API）\nconst tagPartsOfSpeech = text => {\n  // 定义所有标点符号\n  const punctuationMarks = ['，', '。', '！', '？', '；', '：', '（', '）', '【', '】', '《', '》', '〈', '〉', '…', '—', '～', '·', ',', '.', '!', '?', ';', ':', '(', ')', '[', ']', '{', '}', '-', '...', '..'];\n\n  // 将文本按标点符号分割，保留标点符号\n  const segments = text.split(new RegExp(`([${punctuationMarks.map(mark => '\\\\' + mark).join('')}])`));\n  let result = '';\n  let colorIndex = 0; // 0: 红色, 1: 蓝色, 2: 黑色\n  let currentText = '';\n  segments.forEach((segment, index) => {\n    // 跳过空字符串和纯空格\n    if (!segment || /^\\s+$/.test(segment)) {\n      result += segment;\n      return;\n    }\n\n    // 检查是否是标点符号\n    const isPunctuation = punctuationMarks.includes(segment);\n\n    // 根据索引选择颜色\n    let color;\n    switch (colorIndex) {\n      case 0:\n        color = 'red';\n        break;\n      case 1:\n        color = 'blue';\n        break;\n      case 2:\n        color = 'black';\n        break;\n      default:\n        color = 'black';\n    }\n\n    // 将当前文本和标点符号放在同一个颜色块中\n    if (isPunctuation) {\n      // 如果有累积的文本，先添加文本\n      if (currentText) {\n        result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n        currentText = '';\n      }\n      // 添加标点符号\n      result += `<span class=\"highlight-word ${color}\">${segment}</span>`;\n      // 切换颜色\n      colorIndex = (colorIndex + 1) % 3;\n    } else {\n      // 累积文本\n      currentText += segment;\n    }\n  });\n\n  // 处理最后可能剩余的文本\n  if (currentText) {\n    const color = colorIndex === 0 ? 'red' : colorIndex === 1 ? 'blue' : 'black';\n    result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n  }\n  return result;\n};\nconst App = () => {\n  _s();\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const autoReadGuideRef = useRef(null);\n  const autoReadIntervalRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n    return () => {\n      // 清理自动阅读定时器\n      if (autoReadIntervalRef.current) {\n        clearInterval(autoReadIntervalRef.current);\n      }\n    };\n  }, []);\n\n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'auto-guide') {\n      startAutoReadGuide();\n    } else if (autoReadIntervalRef.current) {\n      clearInterval(autoReadIntervalRef.current);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async file => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n\n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n\n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n\n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({\n        scale: 1.0\n      });\n\n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async textContent => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n\n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n\n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n\n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    const lines = [...lineMap.values()];\n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    return hasTocKeywords || hasPageNumberPatterns || shortLineRatio > 0.7 && numberLineRatio > 0.3;\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n\n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n\n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n\n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n\n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 修改文本处理函数，实现按完整词随机高亮\n  const processTextWithHighlight = text => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？.!?]+)/);\n    let result = '';\n    let lastColor = null; // 记录上一个高亮颜色\n\n    words.forEach(word => {\n      // 跳过空字符串和纯空格\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n\n      // 增加高亮概率到80%，确保大部分文本被高亮\n      if (Math.random() < 0.8) {\n        // 确保相邻高亮词颜色不同\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          // 第一次高亮时随机选择颜色\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    return result;\n  };\n\n  // 修改processContentPage函数\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n\n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch (mode) {\n        case 'normal':\n          // 普通模式 - 简单分段显示\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'static':\n          // 静态高亮模式 - 应用词性标注和颜色高亮\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'follow-mouse':\n          // 鼠标跟随高亮模式 - 分段落但不预先高亮，由鼠标事件触发高亮\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      setContent(processedContent);\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async file => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain') {\n      handleTxtFile(file);\n    } else {\n      alert('请上传PDF或TXT文件');\n    }\n  };\n\n  // 翻页函数 - 防止自动翻页和事件冲突\n  const changePage = async delta => {\n    // 防止快速连续点击\n    if (changePage.isChanging) return;\n    changePage.isChanging = true;\n    const newPage = currentPage + delta;\n    if (newPage >= 1 && newPage <= totalPages && pdfDocument) {\n      try {\n        // 在翻页前先清理当前页面的所有效果和监听器\n        console.log('翻页前清理页面效果...');\n\n        // 清除可能导致自动翻页的任何计时器\n        if (window.modeChangeTimeout) {\n          clearTimeout(window.modeChangeTimeout);\n          window.modeChangeTimeout = null;\n        }\n\n        // 移除所有全局事件监听器\n        document.removeEventListener('mousemove', document.mouseMoveHandler);\n\n        // 移除所有高亮元素\n        const highlights = document.querySelectorAll('.mouse-highlight, .line-highlight, .highlight-word, .reading-line');\n        if (highlights.length > 0) {\n          console.log(`清理 ${highlights.length} 个高亮元素`);\n          highlights.forEach(el => el.remove());\n        }\n\n        // 移除事件监听器\n        const contentArea = document.querySelector('.page-content');\n        if (contentArea) {\n          contentArea.removeEventListener('mousemove', handleMouseMove);\n          contentArea.removeEventListener('mouseleave', clearAllHighlights);\n\n          // 断开MutationObserver\n          if (contentArea._highlightObserver) {\n            contentArea._highlightObserver.disconnect();\n            delete contentArea._highlightObserver;\n          }\n        }\n\n        // 取消所有未完成的动画帧\n        if (handleMouseMove.frameId) {\n          cancelAnimationFrame(handleMouseMove.frameId);\n          handleMouseMove.frameId = null;\n        }\n\n        // 更新页码\n        setCurrentPage(newPage);\n\n        // 提取并处理新页面内容\n        await extractAndProcessPage(pdfDocument, newPage);\n        console.log(`成功切换到第${newPage}页`);\n      } catch (error) {\n        console.error('翻页过程中出错:', error);\n      } finally {\n        // 完成翻页，允许下一次翻页\n        setTimeout(() => {\n          changePage.isChanging = false;\n        }, 200);\n      }\n    } else {\n      changePage.isChanging = false;\n    }\n  };\n\n  // 初始化翻页状态\n  changePage.isChanging = false;\n\n  // 处理鼠标移动，创建行高亮 - 优化性能和准确性\n  const handleMouseMove = e => {\n    // 如果不是鼠标跟随模式则直接返回\n    if (readingMode !== 'follow-mouse') return;\n\n    // 减少处理频率，使用requestAnimationFrame控制执行速率\n    if (handleMouseMove.frameId) {\n      cancelAnimationFrame(handleMouseMove.frameId);\n    }\n    handleMouseMove.frameId = requestAnimationFrame(() => {\n      try {\n        // 每次鼠标移动都清除所有高亮，确保不会有残留高亮\n        const allHighlights = document.querySelectorAll('.line-highlight, .mouse-highlight');\n        allHighlights.forEach(h => h.remove());\n\n        // 获取鼠标下方元素\n        const mouseTarget = document.elementFromPoint(e.clientX, e.clientY);\n        if (!mouseTarget) return;\n\n        // 检查是否在段落上\n        const targetParagraph = mouseTarget.closest('.pdf-paragraph');\n        if (!targetParagraph) return;\n\n        // 计算相对位置和行索引\n        const paragraphRect = targetParagraph.getBoundingClientRect();\n        const relativeY = e.clientY - paragraphRect.top;\n\n        // 获取行高和字体大小\n        const computedStyle = window.getComputedStyle(targetParagraph);\n        const fontSize = parseInt(computedStyle.fontSize) || 16;\n\n        // 确保使用正确的行高，如果未明确设置，则使用字体大小的2倍作为默认行高\n        let lineHeight;\n        if (computedStyle.lineHeight === 'normal') {\n          lineHeight = fontSize * 2; // 更准确地匹配页面上的行高\n        } else {\n          lineHeight = parseInt(computedStyle.lineHeight) || fontSize * 2;\n        }\n\n        // 计算行索引，并确保不会超出范围\n        const lineIndex = Math.floor(relativeY / lineHeight);\n\n        // 如果鼠标位置没有变化，无需重新渲染高亮\n        if (handleMouseMove.lastParagraph === targetParagraph && handleMouseMove.lastLineIndex === lineIndex) {\n          return;\n        }\n\n        // 更新上次位置记录\n        handleMouseMove.lastParagraph = targetParagraph;\n        handleMouseMove.lastLineIndex = lineIndex;\n\n        // 创建行高亮元素\n        const highlight = document.createElement('div');\n        highlight.className = 'line-highlight mouse-highlight';\n        highlight.dataset.lineIndex = lineIndex;\n\n        // 根据当前文字位置计算更准确的垂直位置调整\n        const verticalAdjustment = fontSize / 4; // 调整值，使高亮更好地覆盖文本行\n\n        // 一次性设置所有样式\n        Object.assign(highlight.style, {\n          position: 'absolute',\n          left: '0',\n          top: `${lineIndex * lineHeight + verticalAdjustment}px`,\n          width: '100%',\n          height: `${lineHeight}px`,\n          backgroundColor: 'rgba(255, 140, 0, 0.3)',\n          borderRadius: '4px',\n          border: '1px solid rgba(255, 140, 0, 0.4)',\n          boxShadow: '0 0 10px rgba(255, 140, 0, 0.5)',\n          zIndex: '5',\n          opacity: '1',\n          pointerEvents: 'none'\n        });\n\n        // 确保段落有相对定位\n        if (targetParagraph.style.position !== 'relative') {\n          targetParagraph.style.position = 'relative';\n        }\n\n        // 添加高亮元素\n        targetParagraph.appendChild(highlight);\n      } catch (error) {\n        console.error('鼠标移动处理错误:', error);\n      } finally {\n        // 重置frameId，允许下一次处理\n        handleMouseMove.frameId = null;\n      }\n    });\n  };\n\n  // 添加鼠标跟随事件监听器 - 防止事件冲突和内存泄漏\n  const addMouseFollowListeners = () => {\n    // 确保只在鼠标跟随模式下添加监听器\n    if (readingMode !== 'follow-mouse') {\n      console.log('当前不是鼠标跟随模式，不添加监听器');\n      return;\n    }\n    console.log('开始添加鼠标跟随监听器...');\n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) {\n      console.log('找不到内容区域，无法添加监听器');\n      return;\n    }\n\n    // 先移除可能存在的监听器，避免重复和冲突\n    contentArea.removeEventListener('mousemove', handleMouseMove);\n    contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    document.removeEventListener('mousemove', document.mouseMoveHandler);\n\n    // 添加新的监听器\n    contentArea.addEventListener('mousemove', handleMouseMove);\n    contentArea.addEventListener('mouseleave', clearAllHighlights);\n\n    // 保存全局引用，便于后续清理\n    document.mouseMoveHandler = e => {\n      if (readingMode === 'follow-mouse') {\n        const now = Date.now();\n        if (now - (handleMouseMove.lastUpdateTime || 0) > 200) {\n          const allHighlights = document.querySelectorAll('.line-highlight, .mouse-highlight');\n          allHighlights.forEach(h => h.remove());\n          handleMouseMove.lastUpdateTime = now;\n        }\n      }\n    };\n    document.addEventListener('mousemove', document.mouseMoveHandler);\n\n    // 设置所有段落的样式为相对定位，确保高亮元素能正确定位\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      paragraph.style.position = 'relative';\n\n      // 设置行高和字体，确保显示正确\n      if (!paragraph.style.lineHeight) {\n        paragraph.style.lineHeight = '2'; // 设置更合适的行高\n      }\n    });\n\n    // 添加鼠标跟随内容类\n    const pdfContent = contentArea.querySelector('.pdf-content');\n    if (pdfContent && !pdfContent.classList.contains('mouse-follow-content')) {\n      pdfContent.classList.add('mouse-follow-content');\n    }\n\n    // 初始化时间追踪器\n    handleMouseMove.lastUpdateTime = Date.now();\n    console.log('鼠标跟随监听器设置完成');\n  };\n\n  // 清除所有高亮的辅助函数 - 增强版\n  const clearAllHighlights = () => {\n    try {\n      // 清理所有类型的高亮\n      const highlights = document.querySelectorAll('.mouse-highlight, .line-highlight, .highlight-word, .reading-line');\n      highlights.forEach(el => {\n        if (el && el.parentNode) {\n          el.parentNode.removeChild(el);\n        }\n      });\n\n      // 清除鼠标移动处理器的缓存状态\n      if (handleMouseMove) {\n        handleMouseMove.lastParagraph = null;\n        handleMouseMove.lastLineIndex = -1;\n\n        // 取消等待的动画帧\n        if (handleMouseMove.frameId) {\n          cancelAnimationFrame(handleMouseMove.frameId);\n          handleMouseMove.frameId = null;\n        }\n      }\n    } catch (error) {\n      console.error('清理高亮元素错误:', error);\n    }\n  };\n\n  // 自动阅读引导\n  const startAutoReadGuide = () => {\n    if (autoReadIntervalRef.current) {\n      clearInterval(autoReadIntervalRef.current);\n    }\n\n    // 创建阅读指示点\n    if (!autoReadGuideRef.current) {\n      const guide = document.createElement('div');\n      guide.className = 'auto-read-guide';\n      document.querySelector('.page-content').appendChild(guide);\n      autoReadGuideRef.current = guide;\n    }\n\n    // 获取页面内所有段落\n    const paragraphs = document.querySelectorAll('.page-content p');\n    if (!paragraphs.length) return;\n    let currentParagraphIndex = 0;\n    let currentCharIndex = 0;\n    autoReadIntervalRef.current = setInterval(() => {\n      if (currentParagraphIndex >= paragraphs.length) {\n        clearInterval(autoReadIntervalRef.current);\n        return;\n      }\n      const paragraph = paragraphs[currentParagraphIndex];\n      const text = paragraph.textContent;\n      if (currentCharIndex >= text.length) {\n        currentParagraphIndex++;\n        currentCharIndex = 0;\n        return;\n      }\n\n      // 计算当前字符位置\n      const range = document.createRange();\n      const textNode = paragraph.firstChild;\n      if (textNode && textNode.nodeType === Node.TEXT_NODE) {\n        range.setStart(textNode, Math.min(currentCharIndex, textNode.length));\n        range.setStart(textNode, Math.min(currentCharIndex, textNode.length));\n        const rect = range.getBoundingClientRect();\n\n        // 更新指示点位置\n        if (autoReadGuideRef.current) {\n          const guide = autoReadGuideRef.current;\n          guide.style.left = `${rect.left}px`;\n          guide.style.top = `${rect.bottom + 5}px`;\n\n          // 闪烁效果\n          guide.style.opacity = 1;\n          setTimeout(() => {\n            guide.style.opacity = 0.5;\n          }, 100);\n        }\n      }\n      currentCharIndex += 1;\n    }, 200); // 每秒5个字符的速度\n  };\n\n  // 处理阅读模式改变\n  const handleReadingModeChange = e => {\n    // 获取当前和新模式\n    const oldMode = readingMode;\n    const newMode = e.target.value;\n    console.log(`切换阅读模式: ${oldMode} -> ${newMode}`);\n\n    // 立即清理所有全局事件监听器，防止冲突\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mousemove', document.mouseMoveHandler);\n\n    // 先彻底清理所有DOM元素的效果和类，确保立即执行\n    const cleanupAllEffects = () => {\n      console.log('彻底清理所有DOM效果...');\n\n      // 1. 立即移除所有可能的高亮元素\n      const highlights = document.querySelectorAll('.mouse-highlight, .line-highlight, .highlight-word, .reading-line');\n      if (highlights.length > 0) {\n        console.log(`清理 ${highlights.length} 个高亮元素`);\n        highlights.forEach(el => el.remove());\n      }\n\n      // 2. 移除所有事件监听器\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        contentArea.removeEventListener('mousemove', handleMouseMove);\n        contentArea.removeEventListener('mouseleave', clearAllHighlights);\n\n        // 3. 断开MutationObserver\n        if (contentArea._highlightObserver) {\n          contentArea._highlightObserver.disconnect();\n          delete contentArea._highlightObserver;\n        }\n\n        // 4. 移除内容区域的所有特殊类\n        const pdfContent = contentArea.querySelector('.pdf-content');\n        if (pdfContent) {\n          pdfContent.classList.remove('mouse-follow-content');\n        }\n      }\n\n      // 5. 重置所有段落，移除事件监听器\n      const paragraphs = document.querySelectorAll('.pdf-paragraph');\n      if (paragraphs.length > 0) {\n        console.log(`重置 ${paragraphs.length} 个段落元素`);\n        paragraphs.forEach(paragraph => {\n          // 替换段落元素以清除所有事件监听器\n          if (paragraph.parentNode) {\n            const newParagraph = paragraph.cloneNode(true);\n            paragraph.parentNode.replaceChild(newParagraph, paragraph);\n          }\n        });\n      }\n\n      // 6. 取消所有未完成的动画帧和计时器\n      if (handleMouseMove.frameId) {\n        cancelAnimationFrame(handleMouseMove.frameId);\n        handleMouseMove.frameId = null;\n      }\n\n      // 7. 清除可能导致自动翻页的任何计时器\n      if (window.modeChangeTimeout) {\n        clearTimeout(window.modeChangeTimeout);\n        window.modeChangeTimeout = null;\n      }\n    };\n\n    // 立即执行清理\n    cleanupAllEffects();\n\n    // 立即设置新的阅读模式\n    setReadingMode(newMode);\n\n    // 如果有PDF文档且有当前页面\n    if (pdfDocument && currentPage > 0) {\n      // 立即处理当前页面\n      (async () => {\n        try {\n          console.log(`立即处理当前页面 ${currentPage}...`);\n\n          // 获取当前页面的文本内容\n          const page = await pdfDocument.getPage(currentPage);\n          const textContent = await page.getTextContent();\n          const textItems = textContent.items;\n          let extractedText = textItems.map(item => item.str).join(' ');\n\n          // 移除多余的空格\n          extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n          // 根据新模式处理文本内容\n          let processedContent = '';\n          switch (newMode) {\n            case 'normal':\n              processedContent = formatTextToHtml(extractedText);\n              break;\n            case 'static':\n              processedContent = applyStaticHighlight(extractedText);\n              break;\n            case 'follow-mouse':\n              processedContent = formatTextForMouseFollow(extractedText);\n              break;\n            default:\n              processedContent = formatTextToHtml(extractedText);\n          }\n\n          // 设置内容\n          setContent(processedContent);\n\n          // 在内容更新后添加适当的监听器，保证DOM完全更新后执行\n          if (newMode === 'follow-mouse') {\n            // 使用较短的延迟确保DOM已更新但用户不会感到延迟\n            window.modeChangeTimeout = setTimeout(() => {\n              console.log('添加鼠标跟随监听器...');\n              addMouseFollowListeners();\n              window.modeChangeTimeout = null;\n            }, 10);\n          }\n          console.log(`模式 ${newMode} 已成功应用`);\n        } catch (error) {\n          console.error('模式切换处理错误:', error);\n        }\n      })();\n    } else {\n      // 如果没有加载PDF，只清理效果\n      cleanupAllEffects();\n    }\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = text => {\n    // 分段\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n\n    // 创建HTML内容\n    let htmlContent = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      htmlContent += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 应用静态高亮样式\n  const applyStaticHighlight = text => {\n    // 分段\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n\n    // 创建HTML内容\n    let htmlContent = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      // 使用processTextWithHighlight函数处理段落\n      htmlContent += `<p class=\"pdf-paragraph\">${processTextWithHighlight(paragraph)}</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 格式化文本用于鼠标跟随高亮模式\n  const formatTextForMouseFollow = text => {\n    // 分段\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n\n    // 将文本包装在特殊类中以便于鼠标跟踪\n    let htmlContent = '<div class=\"pdf-content mouse-follow-content\">';\n    paragraphs.forEach(paragraph => {\n      // 为每个段落添加类以便于跟踪，但不添加任何高亮\n      htmlContent += `<p class=\"pdf-paragraph\" data-follow=\"true\" style=\"position: relative;\">${paragraph}</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 861,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 860,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"upload-btn\",\n        children: [\"\\u9009\\u62E9\\u6587\\u4EF6\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".pdf,.txt\",\n          onChange: handleFileUpload,\n          style: {\n            display: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 865,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 863,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 859,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 875,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mode-selector\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: readingMode,\n              onChange: handleReadingModeChange,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"normal\",\n                children: \"\\u666E\\u901A\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 879,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"static\",\n                children: \"\\u9759\\u6001\\u9AD8\\u4EAE\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 880,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"follow-mouse\",\n                children: \"\\u9F20\\u6807\\u8DDF\\u968F\\u9AD8\\u4EAE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 881,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 878,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 877,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mode-selector\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: posMode,\n              onChange: e => setPosMode(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"none\",\n                children: \"\\u65E0\\u8BCD\\u6027\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 886,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"noun\",\n                children: \"\\u540D\\u8BCD\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 887,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"all\",\n                children: \"\\u5168\\u8BCD\\u6027\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 888,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 885,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 884,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 876,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 874,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-content\",\n        children: content ? /*#__PURE__*/_jsxDEV(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: content\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 895,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-state\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u8BF7\\u4E0A\\u4F20PDF\\u6216TXT\\u6587\\u4EF6\\u5F00\\u59CB\\u9605\\u8BFB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 898,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 897,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 893,\n        columnNumber: 9\n      }, this), content && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"page-btn prev\",\n          onClick: () => changePage(-1),\n          disabled: currentPage === 1,\n          children: \"\\u4E0A\\u4E00\\u9875\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 904,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"page-info\",\n          children: [\"\\u7B2C \", currentPage, \" \\u9875 / \\u5171 \", totalPages, \" \\u9875\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 907,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"page-btn next\",\n          onClick: () => changePage(1),\n          disabled: currentPage === totalPages,\n          children: \"\\u4E0B\\u4E00\\u9875\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 910,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 903,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 873,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 858,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"0gCBbqau4eGI9wGR61xU/wLjJfA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","pdfjsLib","pdfjsViewer","marked","pdfjs","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","tagPartsOfSpeech","text","punctuationMarks","segments","split","RegExp","map","mark","join","result","colorIndex","currentText","forEach","segment","index","test","isPunctuation","includes","color","App","_s","pages","setPages","currentPage","setCurrentPage","totalPages","setTotalPages","fileName","setFileName","loading","setLoading","fileRef","file","setFile","pdfInstance","setPdfInstance","extractedTextPages","setExtractedTextPages","readingMode","setReadingMode","posMode","setPosMode","markdownContent","setMarkdownContent","readerContainerRef","autoReadGuideRef","autoReadIntervalRef","content","setContent","pdfDocument","setPdfDocument","current","clearInterval","startAutoReadGuide","handlePdfFile","fileURL","URL","createObjectURL","loadingTask","getDocument","pdf","promise","numPages","extractAndProcessPage","console","log","error","alert","pageNum","page","getPage","textContent","getTextContent","viewport","getViewport","scale","isTableOfContents","detectIfTocPage","processTocPage","processContentPage","setTimeout","addMouseFollowListeners","textItems","items","fullText","item","str","hasTocKeywords","hasPageNumberPatterns","shortLinesCount","linesWithNumbersCount","lineMap","Map","yKey","Math","round","transform","has","set","get","push","lines","values","line","lineText","length","shortLineRatio","numberLineRatio","htmlContent","x","y","height","fontSize","sqrt","fontWeight","fontName","toLowerCase","spacedText","processTextWithHighlight","words","lastColor","word","random","mode","extractedText","replace","trim","processedContent","formatTextToHtml","applyStaticHighlight","formatTextForMouseFollow","handleTxtFile","pageTexts","paragraph","fontFamily","handleFileUpload","e","target","files","type","changePage","delta","isChanging","newPage","window","modeChangeTimeout","clearTimeout","document","removeEventListener","mouseMoveHandler","highlights","querySelectorAll","el","remove","contentArea","querySelector","handleMouseMove","clearAllHighlights","_highlightObserver","disconnect","frameId","cancelAnimationFrame","requestAnimationFrame","allHighlights","h","mouseTarget","elementFromPoint","clientX","clientY","targetParagraph","closest","paragraphRect","getBoundingClientRect","relativeY","top","computedStyle","getComputedStyle","parseInt","lineHeight","lineIndex","floor","lastParagraph","lastLineIndex","highlight","createElement","className","dataset","verticalAdjustment","Object","assign","style","position","left","width","backgroundColor","borderRadius","border","boxShadow","zIndex","opacity","pointerEvents","appendChild","addEventListener","now","Date","lastUpdateTime","paragraphs","pdfContent","classList","contains","add","parentNode","removeChild","guide","currentParagraphIndex","currentCharIndex","setInterval","range","createRange","textNode","firstChild","nodeType","Node","TEXT_NODE","setStart","min","rect","bottom","handleReadingModeChange","oldMode","newMode","value","cleanupAllEffects","newParagraph","cloneNode","replaceChild","filter","p","children","_jsxFileName","lineNumber","columnNumber","accept","onChange","display","dangerouslySetInnerHTML","__html","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/adhd-read-helper/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 模拟NLP词性标注功能（实际应用中建议使用专业NLP库如nlp.js或调用API）\nconst tagPartsOfSpeech = (text) => {\n  // 定义所有标点符号\n  const punctuationMarks = [\n    '，', '。', '！', '？', '；', '：', '（', '）', '【', '】', '《', '》', '〈', '〉', '…', '—', '～', '·',\n    ',', '.', '!', '?', ';', ':', '(', ')', '[', ']', '{', '}', '-', '...', '..'\n  ];\n  \n  // 将文本按标点符号分割，保留标点符号\n  const segments = text.split(new RegExp(`([${punctuationMarks.map(mark => '\\\\' + mark).join('')}])`));\n  let result = '';\n  let colorIndex = 0; // 0: 红色, 1: 蓝色, 2: 黑色\n  let currentText = '';\n  \n  segments.forEach((segment, index) => {\n    // 跳过空字符串和纯空格\n    if (!segment || /^\\s+$/.test(segment)) {\n      result += segment;\n      return;\n    }\n    \n    // 检查是否是标点符号\n    const isPunctuation = punctuationMarks.includes(segment);\n    \n    // 根据索引选择颜色\n    let color;\n    switch (colorIndex) {\n      case 0:\n        color = 'red';\n        break;\n      case 1:\n        color = 'blue';\n        break;\n      case 2:\n        color = 'black';\n        break;\n      default:\n        color = 'black';\n    }\n    \n    // 将当前文本和标点符号放在同一个颜色块中\n    if (isPunctuation) {\n      // 如果有累积的文本，先添加文本\n      if (currentText) {\n        result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n        currentText = '';\n      }\n      // 添加标点符号\n      result += `<span class=\"highlight-word ${color}\">${segment}</span>`;\n      // 切换颜色\n      colorIndex = (colorIndex + 1) % 3;\n    } else {\n      // 累积文本\n      currentText += segment;\n    }\n  });\n  \n  // 处理最后可能剩余的文本\n  if (currentText) {\n    const color = colorIndex === 0 ? 'red' : colorIndex === 1 ? 'blue' : 'black';\n    result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n  }\n  \n  return result;\n};\n\nconst App = () => {\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const autoReadGuideRef = useRef(null);\n  const autoReadIntervalRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n    \n    return () => {\n      // 清理自动阅读定时器\n      if (autoReadIntervalRef.current) {\n        clearInterval(autoReadIntervalRef.current);\n      }\n    };\n  }, []);\n  \n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'auto-guide') {\n      startAutoReadGuide();\n    } else if (autoReadIntervalRef.current) {\n      clearInterval(autoReadIntervalRef.current);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async (file) => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      \n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n      \n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n      \n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n  \n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({ scale: 1.0 });\n      \n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      \n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      \n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async (textContent) => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n    \n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n    \n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n    \n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    \n    const lines = [...lineMap.values()];\n    \n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    \n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    \n    return hasTocKeywords || hasPageNumberPatterns || (shortLineRatio > 0.7 && numberLineRatio > 0.3);\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n    \n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    \n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n      \n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n      \n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n      \n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    \n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 修改文本处理函数，实现按完整词随机高亮\n  const processTextWithHighlight = (text) => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？.!?]+)/);\n    let result = '';\n    let lastColor = null; // 记录上一个高亮颜色\n    \n    words.forEach(word => {\n      // 跳过空字符串和纯空格\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      \n      // 增加高亮概率到80%，确保大部分文本被高亮\n      if (Math.random() < 0.8) {\n        // 确保相邻高亮词颜色不同\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          // 第一次高亮时随机选择颜色\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        \n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    \n    return result;\n  };\n\n  // 修改processContentPage函数\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      \n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch(mode) {\n        case 'normal':\n          // 普通模式 - 简单分段显示\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'static':\n          // 静态高亮模式 - 应用词性标注和颜色高亮\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'follow-mouse':\n          // 鼠标跟随高亮模式 - 分段落但不预先高亮，由鼠标事件触发高亮\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      \n      setContent(processedContent);\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async (file) => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n    \n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain') {\n      handleTxtFile(file);\n    } else {\n      alert('请上传PDF或TXT文件');\n    }\n  };\n\n  // 翻页函数 - 防止自动翻页和事件冲突\n  const changePage = async (delta) => {\n    // 防止快速连续点击\n    if (changePage.isChanging) return;\n    changePage.isChanging = true;\n    \n    const newPage = currentPage + delta;\n    if (newPage >= 1 && newPage <= totalPages && pdfDocument) {\n      try {\n        // 在翻页前先清理当前页面的所有效果和监听器\n        console.log('翻页前清理页面效果...');\n        \n        // 清除可能导致自动翻页的任何计时器\n        if (window.modeChangeTimeout) {\n          clearTimeout(window.modeChangeTimeout);\n          window.modeChangeTimeout = null;\n        }\n        \n        // 移除所有全局事件监听器\n        document.removeEventListener('mousemove', document.mouseMoveHandler);\n        \n        // 移除所有高亮元素\n        const highlights = document.querySelectorAll('.mouse-highlight, .line-highlight, .highlight-word, .reading-line');\n        if (highlights.length > 0) {\n          console.log(`清理 ${highlights.length} 个高亮元素`);\n          highlights.forEach(el => el.remove());\n        }\n        \n        // 移除事件监听器\n        const contentArea = document.querySelector('.page-content');\n        if (contentArea) {\n          contentArea.removeEventListener('mousemove', handleMouseMove);\n          contentArea.removeEventListener('mouseleave', clearAllHighlights);\n          \n          // 断开MutationObserver\n          if (contentArea._highlightObserver) {\n            contentArea._highlightObserver.disconnect();\n            delete contentArea._highlightObserver;\n          }\n        }\n        \n        // 取消所有未完成的动画帧\n        if (handleMouseMove.frameId) {\n          cancelAnimationFrame(handleMouseMove.frameId);\n          handleMouseMove.frameId = null;\n        }\n        \n        // 更新页码\n        setCurrentPage(newPage);\n        \n        // 提取并处理新页面内容\n        await extractAndProcessPage(pdfDocument, newPage);\n        \n        console.log(`成功切换到第${newPage}页`);\n      } catch (error) {\n        console.error('翻页过程中出错:', error);\n      } finally {\n        // 完成翻页，允许下一次翻页\n        setTimeout(() => {\n          changePage.isChanging = false;\n        }, 200);\n      }\n    } else {\n      changePage.isChanging = false;\n    }\n  };\n\n  // 初始化翻页状态\n  changePage.isChanging = false;\n\n  // 处理鼠标移动，创建行高亮 - 优化性能和准确性\n  const handleMouseMove = (e) => {\n    // 如果不是鼠标跟随模式则直接返回\n    if (readingMode !== 'follow-mouse') return;\n    \n    // 减少处理频率，使用requestAnimationFrame控制执行速率\n    if (handleMouseMove.frameId) {\n      cancelAnimationFrame(handleMouseMove.frameId);\n    }\n    \n    handleMouseMove.frameId = requestAnimationFrame(() => {\n      try {\n        // 每次鼠标移动都清除所有高亮，确保不会有残留高亮\n        const allHighlights = document.querySelectorAll('.line-highlight, .mouse-highlight');\n        allHighlights.forEach(h => h.remove());\n        \n        // 获取鼠标下方元素\n        const mouseTarget = document.elementFromPoint(e.clientX, e.clientY);\n        if (!mouseTarget) return;\n        \n        // 检查是否在段落上\n        const targetParagraph = mouseTarget.closest('.pdf-paragraph');\n        if (!targetParagraph) return;\n        \n        // 计算相对位置和行索引\n        const paragraphRect = targetParagraph.getBoundingClientRect();\n        const relativeY = e.clientY - paragraphRect.top;\n        \n        // 获取行高和字体大小\n        const computedStyle = window.getComputedStyle(targetParagraph);\n        const fontSize = parseInt(computedStyle.fontSize) || 16;\n        \n        // 确保使用正确的行高，如果未明确设置，则使用字体大小的2倍作为默认行高\n        let lineHeight;\n        if (computedStyle.lineHeight === 'normal') {\n          lineHeight = fontSize * 2; // 更准确地匹配页面上的行高\n        } else {\n          lineHeight = parseInt(computedStyle.lineHeight) || fontSize * 2;\n        }\n        \n        // 计算行索引，并确保不会超出范围\n        const lineIndex = Math.floor(relativeY / lineHeight);\n        \n        // 如果鼠标位置没有变化，无需重新渲染高亮\n        if (handleMouseMove.lastParagraph === targetParagraph && \n            handleMouseMove.lastLineIndex === lineIndex) {\n          return;\n        }\n        \n        // 更新上次位置记录\n        handleMouseMove.lastParagraph = targetParagraph;\n        handleMouseMove.lastLineIndex = lineIndex;\n        \n        // 创建行高亮元素\n        const highlight = document.createElement('div');\n        highlight.className = 'line-highlight mouse-highlight';\n        highlight.dataset.lineIndex = lineIndex;\n        \n        // 根据当前文字位置计算更准确的垂直位置调整\n        const verticalAdjustment = fontSize / 4; // 调整值，使高亮更好地覆盖文本行\n        \n        // 一次性设置所有样式\n        Object.assign(highlight.style, {\n          position: 'absolute',\n          left: '0',\n          top: `${(lineIndex * lineHeight) + verticalAdjustment}px`,\n          width: '100%',\n          height: `${lineHeight}px`,\n          backgroundColor: 'rgba(255, 140, 0, 0.3)',\n          borderRadius: '4px',\n          border: '1px solid rgba(255, 140, 0, 0.4)',\n          boxShadow: '0 0 10px rgba(255, 140, 0, 0.5)',\n          zIndex: '5',\n          opacity: '1',\n          pointerEvents: 'none'\n        });\n        \n        // 确保段落有相对定位\n        if (targetParagraph.style.position !== 'relative') {\n          targetParagraph.style.position = 'relative';\n        }\n        \n        // 添加高亮元素\n        targetParagraph.appendChild(highlight);\n      } catch (error) {\n        console.error('鼠标移动处理错误:', error);\n      } finally {\n        // 重置frameId，允许下一次处理\n        handleMouseMove.frameId = null;\n      }\n    });\n  };\n\n  // 添加鼠标跟随事件监听器 - 防止事件冲突和内存泄漏\n  const addMouseFollowListeners = () => {\n    // 确保只在鼠标跟随模式下添加监听器\n    if (readingMode !== 'follow-mouse') {\n      console.log('当前不是鼠标跟随模式，不添加监听器');\n      return;\n    }\n    \n    console.log('开始添加鼠标跟随监听器...');\n    \n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) {\n      console.log('找不到内容区域，无法添加监听器');\n      return;\n    }\n    \n    // 先移除可能存在的监听器，避免重复和冲突\n    contentArea.removeEventListener('mousemove', handleMouseMove);\n    contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    document.removeEventListener('mousemove', document.mouseMoveHandler);\n    \n    // 添加新的监听器\n    contentArea.addEventListener('mousemove', handleMouseMove);\n    contentArea.addEventListener('mouseleave', clearAllHighlights);\n    \n    // 保存全局引用，便于后续清理\n    document.mouseMoveHandler = (e) => {\n      if (readingMode === 'follow-mouse') {\n        const now = Date.now();\n        if (now - (handleMouseMove.lastUpdateTime || 0) > 200) {\n          const allHighlights = document.querySelectorAll('.line-highlight, .mouse-highlight');\n          allHighlights.forEach(h => h.remove());\n          handleMouseMove.lastUpdateTime = now;\n        }\n      }\n    };\n    \n    document.addEventListener('mousemove', document.mouseMoveHandler);\n    \n    // 设置所有段落的样式为相对定位，确保高亮元素能正确定位\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      paragraph.style.position = 'relative';\n      \n      // 设置行高和字体，确保显示正确\n      if (!paragraph.style.lineHeight) {\n        paragraph.style.lineHeight = '2';  // 设置更合适的行高\n      }\n    });\n    \n    // 添加鼠标跟随内容类\n    const pdfContent = contentArea.querySelector('.pdf-content');\n    if (pdfContent && !pdfContent.classList.contains('mouse-follow-content')) {\n      pdfContent.classList.add('mouse-follow-content');\n    }\n    \n    // 初始化时间追踪器\n    handleMouseMove.lastUpdateTime = Date.now();\n    \n    console.log('鼠标跟随监听器设置完成');\n  };\n\n  // 清除所有高亮的辅助函数 - 增强版\n  const clearAllHighlights = () => {\n    try {\n      // 清理所有类型的高亮\n      const highlights = document.querySelectorAll('.mouse-highlight, .line-highlight, .highlight-word, .reading-line');\n      highlights.forEach(el => {\n        if (el && el.parentNode) {\n          el.parentNode.removeChild(el);\n        }\n      });\n      \n      // 清除鼠标移动处理器的缓存状态\n      if (handleMouseMove) {\n        handleMouseMove.lastParagraph = null;\n        handleMouseMove.lastLineIndex = -1;\n        \n        // 取消等待的动画帧\n        if (handleMouseMove.frameId) {\n          cancelAnimationFrame(handleMouseMove.frameId);\n          handleMouseMove.frameId = null;\n        }\n      }\n    } catch (error) {\n      console.error('清理高亮元素错误:', error);\n    }\n  };\n\n  // 自动阅读引导\n  const startAutoReadGuide = () => {\n    if (autoReadIntervalRef.current) {\n      clearInterval(autoReadIntervalRef.current);\n    }\n    \n    // 创建阅读指示点\n    if (!autoReadGuideRef.current) {\n      const guide = document.createElement('div');\n      guide.className = 'auto-read-guide';\n      document.querySelector('.page-content').appendChild(guide);\n      autoReadGuideRef.current = guide;\n    }\n    \n    // 获取页面内所有段落\n    const paragraphs = document.querySelectorAll('.page-content p');\n    if (!paragraphs.length) return;\n    \n    let currentParagraphIndex = 0;\n    let currentCharIndex = 0;\n    \n    autoReadIntervalRef.current = setInterval(() => {\n      if (currentParagraphIndex >= paragraphs.length) {\n        clearInterval(autoReadIntervalRef.current);\n        return;\n      }\n      \n      const paragraph = paragraphs[currentParagraphIndex];\n      const text = paragraph.textContent;\n      \n      if (currentCharIndex >= text.length) {\n        currentParagraphIndex++;\n        currentCharIndex = 0;\n        return;\n      }\n      \n      // 计算当前字符位置\n      const range = document.createRange();\n      const textNode = paragraph.firstChild;\n      \n      if (textNode && textNode.nodeType === Node.TEXT_NODE) {\n        range.setStart(textNode, Math.min(currentCharIndex, textNode.length));\n        range.setStart(textNode, Math.min(currentCharIndex, textNode.length));\n        \n        const rect = range.getBoundingClientRect();\n        \n        // 更新指示点位置\n        if (autoReadGuideRef.current) {\n          const guide = autoReadGuideRef.current;\n          guide.style.left = `${rect.left}px`;\n          guide.style.top = `${rect.bottom + 5}px`;\n          \n          // 闪烁效果\n          guide.style.opacity = 1;\n          setTimeout(() => {\n            guide.style.opacity = 0.5;\n          }, 100);\n        }\n      }\n      \n      currentCharIndex += 1;\n    }, 200); // 每秒5个字符的速度\n  };\n  \n  // 处理阅读模式改变\n  const handleReadingModeChange = (e) => {\n    // 获取当前和新模式\n    const oldMode = readingMode;\n    const newMode = e.target.value;\n    \n    console.log(`切换阅读模式: ${oldMode} -> ${newMode}`);\n    \n    // 立即清理所有全局事件监听器，防止冲突\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mousemove', document.mouseMoveHandler);\n    \n    // 先彻底清理所有DOM元素的效果和类，确保立即执行\n    const cleanupAllEffects = () => {\n      console.log('彻底清理所有DOM效果...');\n      \n      // 1. 立即移除所有可能的高亮元素\n      const highlights = document.querySelectorAll('.mouse-highlight, .line-highlight, .highlight-word, .reading-line');\n      if (highlights.length > 0) {\n        console.log(`清理 ${highlights.length} 个高亮元素`);\n        highlights.forEach(el => el.remove());\n      }\n      \n      // 2. 移除所有事件监听器\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        contentArea.removeEventListener('mousemove', handleMouseMove);\n        contentArea.removeEventListener('mouseleave', clearAllHighlights);\n        \n        // 3. 断开MutationObserver\n        if (contentArea._highlightObserver) {\n          contentArea._highlightObserver.disconnect();\n          delete contentArea._highlightObserver;\n        }\n        \n        // 4. 移除内容区域的所有特殊类\n        const pdfContent = contentArea.querySelector('.pdf-content');\n        if (pdfContent) {\n          pdfContent.classList.remove('mouse-follow-content');\n        }\n      }\n      \n      // 5. 重置所有段落，移除事件监听器\n      const paragraphs = document.querySelectorAll('.pdf-paragraph');\n      if (paragraphs.length > 0) {\n        console.log(`重置 ${paragraphs.length} 个段落元素`);\n        paragraphs.forEach(paragraph => {\n          // 替换段落元素以清除所有事件监听器\n          if (paragraph.parentNode) {\n            const newParagraph = paragraph.cloneNode(true);\n            paragraph.parentNode.replaceChild(newParagraph, paragraph);\n          }\n        });\n      }\n      \n      // 6. 取消所有未完成的动画帧和计时器\n      if (handleMouseMove.frameId) {\n        cancelAnimationFrame(handleMouseMove.frameId);\n        handleMouseMove.frameId = null;\n      }\n      \n      // 7. 清除可能导致自动翻页的任何计时器\n      if (window.modeChangeTimeout) {\n        clearTimeout(window.modeChangeTimeout);\n        window.modeChangeTimeout = null;\n      }\n    };\n    \n    // 立即执行清理\n    cleanupAllEffects();\n    \n    // 立即设置新的阅读模式\n    setReadingMode(newMode);\n    \n    // 如果有PDF文档且有当前页面\n    if (pdfDocument && currentPage > 0) {\n      // 立即处理当前页面\n      (async () => {\n        try {\n          console.log(`立即处理当前页面 ${currentPage}...`);\n          \n          // 获取当前页面的文本内容\n          const page = await pdfDocument.getPage(currentPage);\n          const textContent = await page.getTextContent();\n          const textItems = textContent.items;\n          let extractedText = textItems.map(item => item.str).join(' ');\n          \n          // 移除多余的空格\n          extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n          \n          // 根据新模式处理文本内容\n          let processedContent = '';\n          switch(newMode) {\n            case 'normal':\n              processedContent = formatTextToHtml(extractedText);\n              break;\n            case 'static':\n              processedContent = applyStaticHighlight(extractedText);\n              break;\n            case 'follow-mouse':\n              processedContent = formatTextForMouseFollow(extractedText);\n              break;\n            default:\n              processedContent = formatTextToHtml(extractedText);\n          }\n          \n          // 设置内容\n          setContent(processedContent);\n          \n          // 在内容更新后添加适当的监听器，保证DOM完全更新后执行\n          if (newMode === 'follow-mouse') {\n            // 使用较短的延迟确保DOM已更新但用户不会感到延迟\n            window.modeChangeTimeout = setTimeout(() => {\n              console.log('添加鼠标跟随监听器...');\n              addMouseFollowListeners();\n              window.modeChangeTimeout = null;\n            }, 10);\n          }\n          \n          console.log(`模式 ${newMode} 已成功应用`);\n        } catch (error) {\n          console.error('模式切换处理错误:', error);\n        }\n      })();\n    } else {\n      // 如果没有加载PDF，只清理效果\n      cleanupAllEffects();\n    }\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = (text) => {\n    // 分段\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    // 创建HTML内容\n    let htmlContent = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      htmlContent += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 应用静态高亮样式\n  const applyStaticHighlight = (text) => {\n    // 分段\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    // 创建HTML内容\n    let htmlContent = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      // 使用processTextWithHighlight函数处理段落\n      htmlContent += `<p class=\"pdf-paragraph\">${processTextWithHighlight(paragraph)}</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 格式化文本用于鼠标跟随高亮模式\n  const formatTextForMouseFollow = (text) => {\n    // 分段\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    // 将文本包装在特殊类中以便于鼠标跟踪\n    let htmlContent = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      // 为每个段落添加类以便于跟踪，但不添加任何高亮\n      htmlContent += `<p class=\"pdf-paragraph\" data-follow=\"true\" style=\"position: relative;\">${paragraph}</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        <div className=\"logo\">\n          <h2>ADHD阅读助手</h2>\n        </div>\n        <label className=\"upload-btn\">\n          选择文件\n          <input\n            type=\"file\"\n            accept=\".pdf,.txt\"\n            onChange={handleFileUpload}\n            style={{ display: 'none' }}\n          />\n        </label>\n      </div>\n      <div className=\"main-content\">\n        <div className=\"header\">\n          <h1>ADHD阅读助手</h1>\n          <div className=\"controls\">\n            <div className=\"mode-selector\">\n              <select value={readingMode} onChange={handleReadingModeChange}>\n                <option value=\"normal\">普通模式</option>\n                <option value=\"static\">静态高亮模式</option>\n                <option value=\"follow-mouse\">鼠标跟随高亮</option>\n              </select>\n            </div>\n            <div className=\"mode-selector\">\n              <select value={posMode} onChange={(e) => setPosMode(e.target.value)}>\n                <option value=\"none\">无词性标注</option>\n                <option value=\"noun\">名词标注</option>\n                <option value=\"all\">全词性标注</option>\n              </select>\n            </div>\n          </div>\n        </div>\n        <div className=\"page-content\">\n          {content ? (\n            <div dangerouslySetInnerHTML={{ __html: content }} />\n          ) : (\n            <div className=\"empty-state\">\n              <p>请上传PDF或TXT文件开始阅读</p>\n            </div>\n          )}\n        </div>\n        {content && (\n          <div className=\"nav-buttons\">\n            <button className=\"page-btn prev\" onClick={() => changePage(-1)} disabled={currentPage === 1}>\n              上一页\n            </button>\n            <span className=\"page-info\">\n              第 {currentPage} 页 / 共 {totalPages} 页\n            </span>\n            <button className=\"page-btn next\" onClick={() => changePage(1)} disabled={currentPage === totalPages}>\n              下一页\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}