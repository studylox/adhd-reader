{"ast":null,"code":"var _jsxFileName = \"D:\\\\adhd-read-helper\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 模拟NLP词性标注功能（实际应用中建议使用专业NLP库如nlp.js或调用API）\nconst tagPartsOfSpeech = text => {\n  // 定义所有标点符号\n  const punctuationMarks = ['，', '。', '！', '？', '；', '：', '（', '）', '【', '】', '《', '》', '〈', '〉', '…', '—', '～', '·', ',', '.', '!', '?', ';', ':', '(', ')', '[', ']', '{', '}', '-', '...', '..'];\n\n  // 将文本按标点符号分割，保留标点符号\n  const segments = text.split(new RegExp(`([${punctuationMarks.map(mark => '\\\\' + mark).join('')}])`));\n  let result = '';\n  let colorIndex = 0; // 0: 红色, 1: 蓝色, 2: 黑色\n  let currentText = '';\n  segments.forEach((segment, index) => {\n    // 跳过空字符串和纯空格\n    if (!segment || /^\\s+$/.test(segment)) {\n      result += segment;\n      return;\n    }\n\n    // 检查是否是标点符号\n    const isPunctuation = punctuationMarks.includes(segment);\n\n    // 根据索引选择颜色\n    let color;\n    switch (colorIndex) {\n      case 0:\n        color = 'red';\n        break;\n      case 1:\n        color = 'blue';\n        break;\n      case 2:\n        color = 'black';\n        break;\n      default:\n        color = 'black';\n    }\n\n    // 将当前文本和标点符号放在同一个颜色块中\n    if (isPunctuation) {\n      // 如果有累积的文本，先添加文本\n      if (currentText) {\n        result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n        currentText = '';\n      }\n      // 添加标点符号\n      result += `<span class=\"highlight-word ${color}\">${segment}</span>`;\n      // 切换颜色\n      colorIndex = (colorIndex + 1) % 3;\n    } else {\n      // 累积文本\n      currentText += segment;\n    }\n  });\n\n  // 处理最后可能剩余的文本\n  if (currentText) {\n    const color = colorIndex === 0 ? 'red' : colorIndex === 1 ? 'blue' : 'black';\n    result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n  }\n  return result;\n};\nconst App = () => {\n  _s();\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const autoReadGuideRef = useRef(null);\n  const autoReadIntervalRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n\n  // 新增自动阅读器状态\n  const [autoReaderState, setAutoReaderState] = useState({\n    currentIndex: 0,\n    charPositions: [],\n    intervalId: null,\n    speed: 300,\n    scrollThreshold: 0.85,\n    // 滚动触发阈值\n    blankSkipLimit: 5,\n    // 连续空白跳过阈值\n    scrollTimeout: null,\n    isUserScrolling: false\n  });\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n    return () => {\n      // 清理自动阅读定时器\n      if (autoReadIntervalRef.current) {\n        clearInterval(autoReadIntervalRef.current);\n      }\n    };\n  }, []);\n\n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async file => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n\n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n\n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n\n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({\n        scale: 1.0\n      });\n\n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async textContent => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n\n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n\n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n\n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    const lines = [...lineMap.values()];\n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    return hasTocKeywords || hasPageNumberPatterns || shortLineRatio > 0.7 && numberLineRatio > 0.3;\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n\n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n\n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n\n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n\n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 修改文本处理函数，实现按完整词随机高亮\n  const processTextWithHighlight = text => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    return result;\n  };\n\n  // 修改processContentPage函数\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n\n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch (mode) {\n        case 'normal':\n          // 普通模式 - 简单分段显示\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'static':\n          // 静态高亮模式 - 应用词性标注和颜色高亮\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'follow-mouse':\n          // 鼠标跟随高亮模式 - 分段落但不预先高亮，由鼠标事件触发高亮\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      setContent(processedContent);\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async file => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain') {\n      handleTxtFile(file);\n    } else {\n      alert('请上传PDF或TXT文件');\n    }\n  };\n\n  // 获取所有字符位置（改进版）\n  const getAllCharacterPositions = container => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    const docRect = document.documentElement.getBoundingClientRect();\n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      if (!node.textContent.trim()) continue;\n      const text = node.textContent;\n      let prevBottom = -Infinity;\n      let lineStartIndex = 0;\n\n      // 逐字符处理并记录行信息\n      for (let i = 0; i < text.length; i++) {\n        const range = document.createRange();\n        range.setStart(node, i);\n        range.setEnd(node, i + 1);\n        const rect = range.getBoundingClientRect();\n        if (rect.width + rect.height === 0) continue;\n\n        // 转换为文档绝对坐标\n        const absX = rect.left + window.scrollX;\n        const absY = rect.top + window.scrollY;\n\n        // 检测新行\n        if (absY > prevBottom + 2) {\n          lineStartIndex = i;\n          prevBottom = rect.bottom + window.scrollY;\n        }\n        positions.push({\n          x: absX + rect.width / 2,\n          y: absY + rect.height,\n          char: text[i],\n          page: currentPage\n        });\n      }\n    }\n    return optimizePositions(positions);\n  };\n\n  // 新增空白位置优化处理\n  const optimizePositions = positions => {\n    let optimized = [];\n    let blankCount = 0;\n    for (let i = 0; i < positions.length; i++) {\n      const isBlank = positions[i].char.trim() === '';\n      if (isBlank) {\n        blankCount++;\n        if (blankCount === autoReaderState.blankSkipLimit) {\n          optimized.push({\n            x: positions[i].x,\n            y: positions[i].y,\n            char: '⏩',\n            skip: true\n          });\n        }\n        continue;\n      }\n      if (blankCount >= autoReaderState.blankSkipLimit) {\n        blankCount = 0;\n        continue;\n      }\n      optimized.push(positions[i]);\n      blankCount = 0;\n    }\n    return optimized;\n  };\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.innerHTML = `\n      <div class=\"cursor-core\"></div>\n      <div class=\"cursor-pulse\"></div>\n    `;\n    cursor.style.cssText = `\n      position: fixed;\n      transform: translate(-50%, -50%);\n      pointer-events: none;\n      z-index: 9999;\n    `;\n\n    // 添加动态样式\n    const style = document.createElement('style');\n    style.textContent = `\n      .cursor-core {\n        width: 12px;\n        height: 12px;\n        background: #00ff00;\n        border-radius: 50%;\n        animation: pulse 1s infinite;\n      }\n      .cursor-pulse {\n        position: absolute;\n        top: -15px;\n        left: -15px;\n        width: 40px;\n        height: 40px;\n        border: 2px solid #00ff0080;\n        border-radius: 50%;\n        animation: ripple 1.5s infinite;\n      }\n      @keyframes ripple {\n        0% { transform: scale(0.5); opacity: 1; }\n        100% { transform: scale(1.5); opacity: 0; }\n      }\n    `;\n    document.head.appendChild(style);\n    return cursor;\n  };\n\n  // 修改自动阅读器启动函数\n  const startAutoReader = () => {\n    if (autoReaderState.charPositions.length === 0) return;\n\n    // 实时位置更新函数\n    const updatePosition = () => {\n      setAutoReaderState(prev => {\n        const pos = prev.charPositions[prev.currentIndex];\n        if (!pos) return prev;\n        const cursor = document.getElementById('auto-reader-cursor');\n        if (!cursor) return prev;\n        const viewportX = pos.x - window.scrollX;\n        const viewportY = pos.y - window.scrollY;\n\n        // 视口边界检测\n        const safeX = Math.max(30, Math.min(viewportX, window.innerWidth - 30));\n        const safeY = Math.max(30, Math.min(viewportY, window.innerHeight - 30));\n        cursor.style.left = `${safeX}px`;\n        cursor.style.top = `${safeY}px`;\n\n        // 智能滚动控制\n        if (!prev.isUserScrolling) {\n          const scrollMargin = window.innerHeight * 0.3;\n          if (viewportY > window.innerHeight - scrollMargin) {\n            window.scrollTo({\n              top: pos.y - scrollMargin,\n              behavior: 'smooth'\n            });\n          }\n        }\n        return prev;\n      });\n    };\n\n    // 使用requestAnimationFrame优化性能\n    let lastUpdate = 0;\n    const frameLoop = timestamp => {\n      if (timestamp - lastUpdate >= autoReaderState.speed) {\n        setAutoReaderState(prev => {\n          if (prev.currentIndex >= prev.charPositions.length) {\n            handlePageEnd();\n            return prev;\n          }\n          const currentPos = prev.charPositions[prev.currentIndex];\n\n          // 处理跳转标记\n          if (currentPos.skip) {\n            const nextIndex = findNextContent(prev.currentIndex);\n            return {\n              ...prev,\n              currentIndex: nextIndex\n            };\n          }\n          updatePosition();\n          return {\n            ...prev,\n            currentIndex: prev.currentIndex + 1\n          };\n        });\n        lastUpdate = timestamp;\n      }\n      requestAnimationFrame(frameLoop);\n    };\n    const animationId = requestAnimationFrame(frameLoop);\n    setAutoReaderState(prev => ({\n      ...prev,\n      intervalId: animationId\n    }));\n  };\n\n  // 新增内容查找函数\n  const findNextContent = startIndex => {\n    const positions = autoReaderState.charPositions;\n    for (let i = startIndex; i < positions.length; i++) {\n      if (!positions[i].skip && positions[i].char.trim() !== '') {\n        return i;\n      }\n    }\n    handlePageEnd();\n    return startIndex;\n  };\n\n  // 处理页面末尾\n  const handlePageEnd = () => {\n    if (currentPage < totalPages) {\n      changePage(1);\n    } else {\n      stopAutoReader();\n    }\n  };\n\n  // 修改初始化函数\n  const initializeAutoReader = () => {\n    stopAutoReader();\n\n    // 延迟确保DOM更新\n    requestAnimationFrame(() => {\n      const content = document.querySelector('.page-content');\n      if (!content) return;\n      const positions = getAllCharacterPositions(content);\n      const cursor = createReaderCursor();\n      document.body.appendChild(cursor);\n      setAutoReaderState(prev => ({\n        ...prev,\n        charPositions: positions,\n        currentIndex: 0,\n        isUserScrolling: false\n      }));\n\n      // 立即定位初始位置\n      if (positions.length > 0) {\n        const firstPos = positions[0];\n        cursor.style.left = `${firstPos.x - window.scrollX}px`;\n        cursor.style.top = `${firstPos.y - window.scrollY}px`;\n      }\n      startAutoReader();\n    });\n  };\n\n  // 修改handleReadingModeChange函数\n  const handleReadingModeChange = async e => {\n    const newMode = e.target.value;\n    console.log(`切换阅读模式: ${readingMode} -> ${newMode}`);\n\n    // 1. 增强清理\n    cleanupDOM();\n    stopAutoReader();\n\n    // 2. 更新状态\n    setReadingMode(newMode);\n\n    // 3. 立即应用新模式到当前页面\n    if (pdfDocument && currentPage > 0) {\n      try {\n        const page = await pdfDocument.getPage(currentPage);\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        let processedContent = '';\n        switch (newMode) {\n          case 'follow-mouse':\n            processedContent = formatTextForMouseFollow(extractedText);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlight(extractedText);\n            break;\n          case 'auto-reader':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          default:\n            processedContent = formatTextToHtml(extractedText);\n        }\n        const contentArea = document.querySelector('.page-content');\n        if (contentArea) {\n          contentArea.textContent = '';\n          contentArea.innerHTML = processedContent;\n          switch (newMode) {\n            case 'follow-mouse':\n              initializeMouseFollow();\n              break;\n            case 'static':\n              void contentArea.offsetHeight;\n              break;\n            case 'auto-reader':\n              setTimeout(initializeAutoReader, 50);\n              break;\n          }\n        }\n      } catch (error) {\n        console.error('应用新阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清除所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 在组件卸载时清除事件监听器\n  useEffect(() => {\n    return () => {\n      removeMouseFollowListeners();\n    };\n  }, []);\n\n  // 格式化文本为HTML\n  const formatTextToHtml = text => {\n    // 分段\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n\n    // 创建HTML内容\n    let htmlContent = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      htmlContent += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 修改后的静态高亮应用函数\n  const applyStaticHighlight = text => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    let htmlContent = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      // 新增强制清理逻辑\n      const cleanParagraph = paragraph.replace(/<span class=\"text-line\">/g, '').replace(/<\\/span>/g, '');\n      const highlightedText = processTextWithHighlight(cleanParagraph);\n      htmlContent += `<p class=\"pdf-paragraph\">${highlightedText}</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 修改后的清理函数\n  const cleanupDOM = () => {\n    console.log('清理DOM元素和效果...');\n\n    // 1. 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll('.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line');\n    highlights.forEach(el => el.remove());\n\n    // 2. 移除事件监听器（增强版）\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 克隆内容区域以彻底移除所有事件监听器\n      const cleanContent = contentArea.cloneNode(false);\n      cleanContent.innerHTML = contentArea.innerHTML;\n      contentArea.parentNode.replaceChild(cleanContent, contentArea);\n\n      // 清理MutationObserver\n      if (contentArea._highlightObserver) {\n        contentArea._highlightObserver.disconnect();\n        delete contentArea._highlightObserver;\n      }\n    }\n\n    // 3. 重置段落结构（增强版）\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 创建新段落并保留基本结构\n      const newParagraph = document.createElement('p');\n      newParagraph.className = 'pdf-paragraph';\n      newParagraph.innerHTML = paragraph.innerHTML.replace(/<span class=\"text-line\">/g, '').replace(/<\\/span>/g, '');\n\n      // 移除特殊属性\n      newParagraph.removeAttribute('data-follow');\n      newParagraph.removeAttribute('style');\n      if (paragraph.parentNode) {\n        paragraph.parentNode.replaceChild(newParagraph, paragraph);\n      }\n    });\n  };\n\n  // 移除鼠标跟随事件监听器\n  const removeMouseFollowListeners = () => {\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 移除所有事件监听器\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n\n      // 移除MutationObserver\n      if (contentArea._highlightObserver) {\n        contentArea._highlightObserver.disconnect();\n        delete contentArea._highlightObserver;\n      }\n\n      // 移除所有段落的鼠标事件监听器\n      const paragraphs = document.querySelectorAll('.pdf-paragraph');\n      paragraphs.forEach(paragraph => {\n        const newParagraph = paragraph.cloneNode(true);\n        if (paragraph.parentNode) {\n          paragraph.parentNode.replaceChild(newParagraph, paragraph);\n        }\n      });\n\n      // 移除mouse-follow-content类\n      const mouseFollowContent = document.querySelector('.mouse-follow-content');\n      if (mouseFollowContent) {\n        mouseFollowContent.classList.remove('mouse-follow-content');\n      }\n    }\n  };\n\n  // 格式化文本用于鼠标跟随高亮模式\n  const formatTextForMouseFollow = text => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    let htmlContent = '<div class=\"pdf-content mouse-follow-content\">';\n    paragraphs.forEach(paragraph => {\n      // 将段落分割成行\n      const lines = paragraph.split('\\n').filter(line => line.trim());\n      htmlContent += `<p class=\"pdf-paragraph\" data-follow=\"true\" style=\"position: relative; line-height: 1.5;\">`;\n      lines.forEach((line, i) => {\n        // 每行用span包裹\n        htmlContent += `<span class=\"text-line\" style=\"display: block;\">${line}</span>`;\n      });\n      htmlContent += `</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 辅助函数：获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = e => {\n    if (readingMode !== 'follow-mouse') return;\n\n    // 清除所有现有高亮\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n    const mouseTarget = document.elementFromPoint(e.clientX, e.clientY);\n    if (mouseTarget && (mouseTarget.classList.contains('pdf-paragraph') || mouseTarget.tagName === 'P' || mouseTarget.tagName === 'SPAN')) {\n      const targetParagraph = mouseTarget.closest('.pdf-paragraph');\n      if (!targetParagraph) return;\n\n      // 获取段落文本节点\n      const textNode = getTextNodeAtPosition(targetParagraph, e.clientX, e.clientY);\n      if (!textNode) return;\n\n      // 获取精确的行位置和尺寸\n      const range = document.createRange();\n      range.selectNodeContents(textNode);\n      const rects = range.getClientRects();\n\n      // 找到鼠标所在的具体行\n      let targetRect = null;\n      for (let i = 0; i < rects.length; i++) {\n        const rect = rects[i];\n        if (e.clientY >= rect.top && e.clientY <= rect.bottom) {\n          targetRect = rect;\n          break;\n        }\n      }\n      if (targetRect) {\n        // 创建高亮元素\n        const lineHighlight = document.createElement('div');\n        lineHighlight.className = 'line-highlight mouse-highlight';\n\n        // 计算相对于段落的位置\n        const paragraphRect = targetParagraph.getBoundingClientRect();\n        const top = targetRect.top - paragraphRect.top;\n        const left = targetRect.left - paragraphRect.left;\n\n        // 设置高亮样式\n        lineHighlight.style.position = 'absolute';\n        lineHighlight.style.left = `${left}px`;\n        lineHighlight.style.top = `${top}px`;\n        lineHighlight.style.width = `${targetRect.width}px`;\n        lineHighlight.style.height = `${targetRect.height}px`;\n        lineHighlight.style.pointerEvents = 'none';\n        lineHighlight.style.backgroundColor = 'rgba(255, 165, 0, 0.3)';\n        lineHighlight.style.borderRadius = '4px';\n        lineHighlight.style.boxShadow = '0 0 8px rgba(255, 165, 0, 0.5)';\n        lineHighlight.style.zIndex = '5';\n        lineHighlight.style.transition = 'all 0.1s ease';\n\n        // 确保段落有相对定位\n        targetParagraph.style.position = 'relative';\n        targetParagraph.appendChild(lineHighlight);\n\n        // 计算并滚动到居中位置\n        const windowHeight = window.innerHeight;\n        const desiredPosition = windowHeight / 2;\n        const currentPosition = targetRect.top;\n        const scrollOffset = currentPosition - desiredPosition;\n        window.scrollTo({\n          top: window.scrollY + scrollOffset,\n          behavior: 'smooth'\n        });\n      }\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async delta => {\n    const newPage = currentPage + delta;\n    if (newPage >= 1 && newPage <= totalPages && pdfDocument) {\n      setCurrentPage(newPage);\n      try {\n        const page = await pdfDocument.getPage(newPage);\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        let processedContent = '';\n        switch (readingMode) {\n          case 'follow-mouse':\n            processedContent = formatTextForMouseFollow(extractedText);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlight(extractedText);\n            break;\n          case 'auto-reader':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          default:\n            processedContent = formatTextToHtml(extractedText);\n        }\n        const contentArea = document.querySelector('.page-content');\n        if (contentArea) {\n          contentArea.textContent = '';\n          contentArea.innerHTML = processedContent;\n\n          // 根据当前模式重新初始化\n          switch (readingMode) {\n            case 'follow-mouse':\n              initializeMouseFollow();\n              break;\n            case 'auto-reader':\n              // 重置自动阅读器状态并重新初始化\n              setAutoReaderState(prev => ({\n                ...prev,\n                currentIndex: 0\n              }));\n              setTimeout(initializeAutoReader, 50);\n              break;\n            case 'static':\n              void contentArea.offsetHeight;\n              break;\n          }\n        }\n      } catch (error) {\n        console.error('翻页处理出错:', error);\n      }\n    }\n  };\n\n  // 修改后的鼠标跟随初始化函数\n  const initializeMouseFollow = () => {\n    // 新增延迟补偿\n    setTimeout(() => {\n      addMouseFollowListeners();\n\n      // 强制触发重排\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        void contentArea.offsetHeight;\n\n        // 模拟鼠标移动事件\n        const fakeEvent = new MouseEvent('mousemove', {\n          clientX: window.innerWidth / 2,\n          clientY: window.innerHeight / 2,\n          bubbles: true\n        });\n        contentArea.dispatchEvent(fakeEvent);\n      }\n    }, 50);\n  };\n\n  // 添加鼠标跟随监听器\n  const addMouseFollowListeners = () => {\n    if (readingMode !== 'follow-mouse') return;\n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n\n    // 清理旧的监听器\n    contentArea.removeEventListener('mousemove', handleMouseMove);\n    contentArea.removeEventListener('mouseleave', clearAllHighlights);\n\n    // 添加新的监听器\n    contentArea.addEventListener('mousemove', handleMouseMove);\n    contentArea.addEventListener('mouseleave', clearAllHighlights);\n\n    // 确保所有段落都有正确的样式\n    document.querySelectorAll('.pdf-paragraph').forEach(p => {\n      p.style.position = 'relative';\n      p.style.lineHeight = '1.5';\n    });\n  };\n\n  // 添加滚动监听器\n  useEffect(() => {\n    const handleScroll = () => {\n      if (!autoReaderState.intervalId) return;\n      setAutoReaderState(prev => ({\n        ...prev,\n        isUserScrolling: true\n      }));\n      clearTimeout(autoReaderState.scrollTimeout);\n      const timeoutId = setTimeout(() => {\n        setAutoReaderState(prev => {\n          const currentPos = prev.charPositions[prev.currentIndex];\n          if (currentPos) {\n            const viewportY = currentPos.y - window.scrollY;\n            if (viewportY < 0 || viewportY > window.innerHeight) {\n              window.scrollTo({\n                top: currentPos.y - window.innerHeight * 0.3,\n                behavior: 'auto'\n              });\n            }\n          }\n          return {\n            ...prev,\n            isUserScrolling: false,\n            scrollTimeout: null\n          };\n        });\n      }, 300);\n      setAutoReaderState(prev => ({\n        ...prev,\n        scrollTimeout: timeoutId\n      }));\n    };\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1055,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1054,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"upload-btn\",\n        children: [\"\\u9009\\u62E9\\u6587\\u4EF6\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".pdf,.txt\",\n          onChange: handleFileUpload,\n          style: {\n            display: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1059,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1057,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1053,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1069,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mode-selector\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: readingMode,\n              onChange: handleReadingModeChange,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"normal\",\n                children: \"\\u666E\\u901A\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1073,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"static\",\n                children: \"\\u9759\\u6001\\u9AD8\\u4EAE\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1074,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"follow-mouse\",\n                children: \"\\u9F20\\u6807\\u8DDF\\u968F\\u9AD8\\u4EAE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1075,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"auto-reader\",\n                children: \"\\u81EA\\u52A8\\u9605\\u8BFB\\u5668\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1076,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1072,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1071,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mode-selector\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: posMode,\n              onChange: e => setPosMode(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"none\",\n                children: \"\\u65E0\\u8BCD\\u6027\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1081,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"noun\",\n                children: \"\\u540D\\u8BCD\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1082,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"all\",\n                children: \"\\u5168\\u8BCD\\u6027\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1083,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1080,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1079,\n            columnNumber: 13\n          }, this), readingMode === 'auto-reader' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"speed-control\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => adjustSpeed(-100),\n              children: \"-\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1088,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [autoReaderState.speed, \"ms\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1089,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => adjustSpeed(100),\n              children: \"+\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1090,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1087,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1070,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1068,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-content\",\n        children: content ? /*#__PURE__*/_jsxDEV(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: content\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1097,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-state\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u8BF7\\u4E0A\\u4F20PDF\\u6216TXT\\u6587\\u4EF6\\u5F00\\u59CB\\u9605\\u8BFB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1100,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1099,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1095,\n        columnNumber: 9\n      }, this), content && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"page-btn prev\",\n          onClick: () => changePage(-1),\n          disabled: currentPage === 1,\n          children: \"\\u4E0A\\u4E00\\u9875\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1106,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"page-info\",\n          children: [\"\\u7B2C \", currentPage, \" \\u9875 / \\u5171 \", totalPages, \" \\u9875\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1109,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"page-btn next\",\n          onClick: () => changePage(1),\n          disabled: currentPage === totalPages,\n          children: \"\\u4E0B\\u4E00\\u9875\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1112,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1105,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1067,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1052,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"pPJt+gJxnVo8KKSY2zbTBJaQBnI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","pdfjsLib","pdfjsViewer","marked","pdfjs","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","tagPartsOfSpeech","text","punctuationMarks","segments","split","RegExp","map","mark","join","result","colorIndex","currentText","forEach","segment","index","test","isPunctuation","includes","color","App","_s","pages","setPages","currentPage","setCurrentPage","totalPages","setTotalPages","fileName","setFileName","loading","setLoading","fileRef","file","setFile","pdfInstance","setPdfInstance","extractedTextPages","setExtractedTextPages","readingMode","setReadingMode","posMode","setPosMode","markdownContent","setMarkdownContent","readerContainerRef","autoReadGuideRef","autoReadIntervalRef","content","setContent","pdfDocument","setPdfDocument","autoReaderState","setAutoReaderState","currentIndex","charPositions","intervalId","speed","scrollThreshold","blankSkipLimit","scrollTimeout","isUserScrolling","current","clearInterval","setTimeout","initializeMouseFollow","handlePdfFile","fileURL","URL","createObjectURL","loadingTask","getDocument","pdf","promise","numPages","extractAndProcessPage","console","log","error","alert","pageNum","page","getPage","textContent","getTextContent","viewport","getViewport","scale","isTableOfContents","detectIfTocPage","processTocPage","processContentPage","addMouseFollowListeners","textItems","items","fullText","item","str","hasTocKeywords","hasPageNumberPatterns","shortLinesCount","linesWithNumbersCount","lineMap","Map","yKey","Math","round","transform","has","set","get","push","lines","values","line","lineText","length","shortLineRatio","numberLineRatio","htmlContent","x","y","height","fontSize","sqrt","fontWeight","fontName","toLowerCase","spacedText","processTextWithHighlight","words","lastColor","word","random","mode","extractedText","replace","trim","processedContent","formatTextToHtml","applyStaticHighlight","formatTextForMouseFollow","handleTxtFile","pageTexts","paragraph","fontFamily","handleFileUpload","e","target","files","type","getAllCharacterPositions","container","walker","document","createTreeWalker","NodeFilter","SHOW_TEXT","positions","docRect","documentElement","getBoundingClientRect","nextNode","node","currentNode","prevBottom","Infinity","lineStartIndex","i","range","createRange","setStart","setEnd","rect","width","absX","left","window","scrollX","absY","top","scrollY","bottom","char","optimizePositions","optimized","blankCount","isBlank","skip","createReaderCursor","cursor","createElement","id","innerHTML","style","cssText","head","appendChild","startAutoReader","updatePosition","prev","pos","getElementById","viewportX","viewportY","safeX","max","min","innerWidth","safeY","innerHeight","scrollMargin","scrollTo","behavior","lastUpdate","frameLoop","timestamp","handlePageEnd","currentPos","nextIndex","findNextContent","requestAnimationFrame","animationId","startIndex","changePage","stopAutoReader","initializeAutoReader","querySelector","body","firstPos","handleReadingModeChange","newMode","value","cleanupDOM","contentArea","offsetHeight","clearAllHighlights","querySelectorAll","el","remove","removeMouseFollowListeners","paragraphs","filter","p","cleanParagraph","highlightedText","highlights","cleanContent","cloneNode","parentNode","replaceChild","_highlightObserver","disconnect","newParagraph","className","removeAttribute","removeEventListener","handleMouseMove","mouseFollowContent","classList","getTextNodeAtPosition","element","nodes","childNodes","nodeType","Node","TEXT_NODE","selectNodeContents","rects","getClientRects","j","right","ELEMENT_NODE","found","mouseTarget","elementFromPoint","clientX","clientY","contains","tagName","targetParagraph","closest","textNode","targetRect","lineHighlight","paragraphRect","position","pointerEvents","backgroundColor","borderRadius","boxShadow","zIndex","transition","windowHeight","desiredPosition","currentPosition","scrollOffset","delta","newPage","fakeEvent","MouseEvent","bubbles","dispatchEvent","addEventListener","lineHeight","handleScroll","clearTimeout","timeoutId","children","_jsxFileName","lineNumber","columnNumber","accept","onChange","display","onClick","adjustSpeed","dangerouslySetInnerHTML","__html","disabled","_c","$RefreshReg$"],"sources":["D:/adhd-read-helper/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 模拟NLP词性标注功能（实际应用中建议使用专业NLP库如nlp.js或调用API）\nconst tagPartsOfSpeech = (text) => {\n  // 定义所有标点符号\n  const punctuationMarks = [\n    '，', '。', '！', '？', '；', '：', '（', '）', '【', '】', '《', '》', '〈', '〉', '…', '—', '～', '·',\n    ',', '.', '!', '?', ';', ':', '(', ')', '[', ']', '{', '}', '-', '...', '..'\n  ];\n  \n  // 将文本按标点符号分割，保留标点符号\n  const segments = text.split(new RegExp(`([${punctuationMarks.map(mark => '\\\\' + mark).join('')}])`));\n  let result = '';\n  let colorIndex = 0; // 0: 红色, 1: 蓝色, 2: 黑色\n  let currentText = '';\n  \n  segments.forEach((segment, index) => {\n    // 跳过空字符串和纯空格\n    if (!segment || /^\\s+$/.test(segment)) {\n      result += segment;\n      return;\n    }\n    \n    // 检查是否是标点符号\n    const isPunctuation = punctuationMarks.includes(segment);\n    \n    // 根据索引选择颜色\n    let color;\n    switch (colorIndex) {\n      case 0:\n        color = 'red';\n        break;\n      case 1:\n        color = 'blue';\n        break;\n      case 2:\n        color = 'black';\n        break;\n      default:\n        color = 'black';\n    }\n    \n    // 将当前文本和标点符号放在同一个颜色块中\n    if (isPunctuation) {\n      // 如果有累积的文本，先添加文本\n      if (currentText) {\n        result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n        currentText = '';\n      }\n      // 添加标点符号\n      result += `<span class=\"highlight-word ${color}\">${segment}</span>`;\n      // 切换颜色\n      colorIndex = (colorIndex + 1) % 3;\n    } else {\n      // 累积文本\n      currentText += segment;\n    }\n  });\n  \n  // 处理最后可能剩余的文本\n  if (currentText) {\n    const color = colorIndex === 0 ? 'red' : colorIndex === 1 ? 'blue' : 'black';\n    result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n  }\n  \n  return result;\n};\n\nconst App = () => {\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const autoReadGuideRef = useRef(null);\n  const autoReadIntervalRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  \n  // 新增自动阅读器状态\n  const [autoReaderState, setAutoReaderState] = useState({\n    currentIndex: 0,\n    charPositions: [],\n    intervalId: null,\n    speed: 300,\n    scrollThreshold: 0.85,    // 滚动触发阈值\n    blankSkipLimit: 5,        // 连续空白跳过阈值\n    scrollTimeout: null,\n    isUserScrolling: false\n  });\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n    \n    return () => {\n      // 清理自动阅读定时器\n      if (autoReadIntervalRef.current) {\n        clearInterval(autoReadIntervalRef.current);\n      }\n    };\n  }, []);\n  \n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async (file) => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      \n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n      \n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n      \n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n  \n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({ scale: 1.0 });\n      \n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      \n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      \n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async (textContent) => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n    \n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n    \n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n    \n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    \n    const lines = [...lineMap.values()];\n    \n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    \n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    \n    return hasTocKeywords || hasPageNumberPatterns || (shortLineRatio > 0.7 && numberLineRatio > 0.3);\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n    \n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    \n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n      \n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n      \n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n      \n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    \n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 修改文本处理函数，实现按完整词随机高亮\n  const processTextWithHighlight = (text) => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    \n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      \n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        \n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    \n    return result;\n  };\n\n  // 修改processContentPage函数\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      \n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch(mode) {\n        case 'normal':\n          // 普通模式 - 简单分段显示\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'static':\n          // 静态高亮模式 - 应用词性标注和颜色高亮\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'follow-mouse':\n          // 鼠标跟随高亮模式 - 分段落但不预先高亮，由鼠标事件触发高亮\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      \n      setContent(processedContent);\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async (file) => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n    \n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain') {\n      handleTxtFile(file);\n    } else {\n      alert('请上传PDF或TXT文件');\n    }\n  };\n\n  // 获取所有字符位置（改进版）\n  const getAllCharacterPositions = (container) => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    const docRect = document.documentElement.getBoundingClientRect();\n\n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      if (!node.textContent.trim()) continue;\n\n      const text = node.textContent;\n      let prevBottom = -Infinity;\n      let lineStartIndex = 0;\n\n      // 逐字符处理并记录行信息\n      for (let i = 0; i < text.length; i++) {\n        const range = document.createRange();\n        range.setStart(node, i);\n        range.setEnd(node, i + 1);\n        \n        const rect = range.getBoundingClientRect();\n        if (rect.width + rect.height === 0) continue;\n        \n        // 转换为文档绝对坐标\n        const absX = rect.left + window.scrollX;\n        const absY = rect.top + window.scrollY;\n        \n        // 检测新行\n        if (absY > prevBottom + 2) {\n          lineStartIndex = i;\n          prevBottom = rect.bottom + window.scrollY;\n        }\n        \n        positions.push({\n          x: absX + rect.width/2,\n          y: absY + rect.height,\n          char: text[i],\n          page: currentPage\n        });\n      }\n    }\n    \n    return optimizePositions(positions);\n  };\n\n  // 新增空白位置优化处理\n  const optimizePositions = (positions) => {\n    let optimized = [];\n    let blankCount = 0;\n    \n    for (let i = 0; i < positions.length; i++) {\n      const isBlank = positions[i].char.trim() === '';\n      \n      if (isBlank) {\n        blankCount++;\n        if (blankCount === autoReaderState.blankSkipLimit) {\n          optimized.push({\n            x: positions[i].x,\n            y: positions[i].y,\n            char: '⏩',\n            skip: true\n          });\n        }\n        continue;\n      }\n      \n      if (blankCount >= autoReaderState.blankSkipLimit) {\n        blankCount = 0;\n        continue;\n      }\n      \n      optimized.push(positions[i]);\n      blankCount = 0;\n    }\n    \n    return optimized;\n  };\n\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.innerHTML = `\n      <div class=\"cursor-core\"></div>\n      <div class=\"cursor-pulse\"></div>\n    `;\n    \n    cursor.style.cssText = `\n      position: fixed;\n      transform: translate(-50%, -50%);\n      pointer-events: none;\n      z-index: 9999;\n    `;\n    \n    // 添加动态样式\n    const style = document.createElement('style');\n    style.textContent = `\n      .cursor-core {\n        width: 12px;\n        height: 12px;\n        background: #00ff00;\n        border-radius: 50%;\n        animation: pulse 1s infinite;\n      }\n      .cursor-pulse {\n        position: absolute;\n        top: -15px;\n        left: -15px;\n        width: 40px;\n        height: 40px;\n        border: 2px solid #00ff0080;\n        border-radius: 50%;\n        animation: ripple 1.5s infinite;\n      }\n      @keyframes ripple {\n        0% { transform: scale(0.5); opacity: 1; }\n        100% { transform: scale(1.5); opacity: 0; }\n      }\n    `;\n    document.head.appendChild(style);\n    return cursor;\n  };\n\n  // 修改自动阅读器启动函数\n  const startAutoReader = () => {\n    if (autoReaderState.charPositions.length === 0) return;\n\n    // 实时位置更新函数\n    const updatePosition = () => {\n      setAutoReaderState(prev => {\n        const pos = prev.charPositions[prev.currentIndex];\n        if (!pos) return prev;\n\n        const cursor = document.getElementById('auto-reader-cursor');\n        if (!cursor) return prev;\n\n        const viewportX = pos.x - window.scrollX;\n        const viewportY = pos.y - window.scrollY;\n\n        // 视口边界检测\n        const safeX = Math.max(30, Math.min(viewportX, window.innerWidth - 30));\n        const safeY = Math.max(30, Math.min(viewportY, window.innerHeight - 30));\n\n        cursor.style.left = `${safeX}px`;\n        cursor.style.top = `${safeY}px`;\n\n        // 智能滚动控制\n        if (!prev.isUserScrolling) {\n          const scrollMargin = window.innerHeight * 0.3;\n          if (viewportY > window.innerHeight - scrollMargin) {\n            window.scrollTo({\n              top: pos.y - scrollMargin,\n              behavior: 'smooth'\n            });\n          }\n        }\n\n        return prev;\n      });\n    };\n\n    // 使用requestAnimationFrame优化性能\n    let lastUpdate = 0;\n    const frameLoop = (timestamp) => {\n      if (timestamp - lastUpdate >= autoReaderState.speed) {\n        setAutoReaderState(prev => {\n          if (prev.currentIndex >= prev.charPositions.length) {\n            handlePageEnd();\n            return prev;\n          }\n\n          const currentPos = prev.charPositions[prev.currentIndex];\n          \n          // 处理跳转标记\n          if (currentPos.skip) {\n            const nextIndex = findNextContent(prev.currentIndex);\n            return { ...prev, currentIndex: nextIndex };\n          }\n\n          updatePosition();\n          return { ...prev, currentIndex: prev.currentIndex + 1 };\n        });\n\n        lastUpdate = timestamp;\n      }\n      requestAnimationFrame(frameLoop);\n    };\n\n    const animationId = requestAnimationFrame(frameLoop);\n    setAutoReaderState(prev => ({ ...prev, intervalId: animationId }));\n  };\n\n  // 新增内容查找函数\n  const findNextContent = (startIndex) => {\n    const positions = autoReaderState.charPositions;\n    for (let i = startIndex; i < positions.length; i++) {\n      if (!positions[i].skip && positions[i].char.trim() !== '') {\n        return i;\n      }\n    }\n    handlePageEnd();\n    return startIndex;\n  };\n\n  // 处理页面末尾\n  const handlePageEnd = () => {\n    if (currentPage < totalPages) {\n      changePage(1);\n    } else {\n      stopAutoReader();\n    }\n  };\n\n  // 修改初始化函数\n  const initializeAutoReader = () => {\n    stopAutoReader();\n    \n    // 延迟确保DOM更新\n    requestAnimationFrame(() => {\n      const content = document.querySelector('.page-content');\n      if (!content) return;\n\n      const positions = getAllCharacterPositions(content);\n      const cursor = createReaderCursor();\n      document.body.appendChild(cursor);\n      \n      setAutoReaderState(prev => ({\n        ...prev,\n        charPositions: positions,\n        currentIndex: 0,\n        isUserScrolling: false\n      }));\n      \n      // 立即定位初始位置\n      if (positions.length > 0) {\n        const firstPos = positions[0];\n        cursor.style.left = `${firstPos.x - window.scrollX}px`;\n        cursor.style.top = `${firstPos.y - window.scrollY}px`;\n      }\n      \n      startAutoReader();\n    });\n  };\n\n  // 修改handleReadingModeChange函数\n  const handleReadingModeChange = async (e) => {\n    const newMode = e.target.value;\n    console.log(`切换阅读模式: ${readingMode} -> ${newMode}`);\n\n    // 1. 增强清理\n    cleanupDOM();\n    stopAutoReader();\n    \n    // 2. 更新状态\n    setReadingMode(newMode);\n\n    // 3. 立即应用新模式到当前页面\n    if (pdfDocument && currentPage > 0) {\n      try {\n        const page = await pdfDocument.getPage(currentPage);\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n        let processedContent = '';\n        switch(newMode) {\n          case 'follow-mouse':\n            processedContent = formatTextForMouseFollow(extractedText);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlight(extractedText);\n            break;\n          case 'auto-reader':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          default:\n            processedContent = formatTextToHtml(extractedText);\n        }\n\n        const contentArea = document.querySelector('.page-content');\n        if (contentArea) {\n          contentArea.textContent = '';\n          contentArea.innerHTML = processedContent;\n\n          switch(newMode) {\n            case 'follow-mouse':\n              initializeMouseFollow();\n              break;\n            case 'static':\n              void contentArea.offsetHeight;\n              break;\n            case 'auto-reader':\n              setTimeout(initializeAutoReader, 50);\n              break;\n          }\n        }\n      } catch (error) {\n        console.error('应用新阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清除所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 在组件卸载时清除事件监听器\n  useEffect(() => {\n    return () => {\n      removeMouseFollowListeners();\n    };\n  }, []);\n\n  // 格式化文本为HTML\n  const formatTextToHtml = (text) => {\n    // 分段\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    // 创建HTML内容\n    let htmlContent = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      htmlContent += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 修改后的静态高亮应用函数\n  const applyStaticHighlight = (text) => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    let htmlContent = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      // 新增强制清理逻辑\n      const cleanParagraph = paragraph\n        .replace(/<span class=\"text-line\">/g, '')\n        .replace(/<\\/span>/g, '');\n      \n      const highlightedText = processTextWithHighlight(cleanParagraph);\n      htmlContent += `<p class=\"pdf-paragraph\">${highlightedText}</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 修改后的清理函数\n  const cleanupDOM = () => {\n    console.log('清理DOM元素和效果...');\n    \n    // 1. 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll(\n      '.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line'\n    );\n    highlights.forEach(el => el.remove());\n    \n    // 2. 移除事件监听器（增强版）\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 克隆内容区域以彻底移除所有事件监听器\n      const cleanContent = contentArea.cloneNode(false);\n      cleanContent.innerHTML = contentArea.innerHTML;\n      contentArea.parentNode.replaceChild(cleanContent, contentArea);\n      \n      // 清理MutationObserver\n      if (contentArea._highlightObserver) {\n        contentArea._highlightObserver.disconnect();\n        delete contentArea._highlightObserver;\n      }\n    }\n    \n    // 3. 重置段落结构（增强版）\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 创建新段落并保留基本结构\n      const newParagraph = document.createElement('p');\n      newParagraph.className = 'pdf-paragraph';\n      newParagraph.innerHTML = paragraph.innerHTML\n        .replace(/<span class=\"text-line\">/g, '')\n        .replace(/<\\/span>/g, '');\n      \n      // 移除特殊属性\n      newParagraph.removeAttribute('data-follow');\n      newParagraph.removeAttribute('style');\n      \n      if (paragraph.parentNode) {\n        paragraph.parentNode.replaceChild(newParagraph, paragraph);\n      }\n    });\n  };\n\n  // 移除鼠标跟随事件监听器\n  const removeMouseFollowListeners = () => {\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 移除所有事件监听器\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n      \n      // 移除MutationObserver\n      if (contentArea._highlightObserver) {\n        contentArea._highlightObserver.disconnect();\n        delete contentArea._highlightObserver;\n      }\n      \n      // 移除所有段落的鼠标事件监听器\n      const paragraphs = document.querySelectorAll('.pdf-paragraph');\n      paragraphs.forEach(paragraph => {\n        const newParagraph = paragraph.cloneNode(true);\n        if (paragraph.parentNode) {\n          paragraph.parentNode.replaceChild(newParagraph, paragraph);\n        }\n      });\n      \n      // 移除mouse-follow-content类\n      const mouseFollowContent = document.querySelector('.mouse-follow-content');\n      if (mouseFollowContent) {\n        mouseFollowContent.classList.remove('mouse-follow-content');\n      }\n    }\n  };\n\n  // 格式化文本用于鼠标跟随高亮模式\n  const formatTextForMouseFollow = (text) => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    let htmlContent = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      // 将段落分割成行\n      const lines = paragraph.split('\\n').filter(line => line.trim());\n      htmlContent += `<p class=\"pdf-paragraph\" data-follow=\"true\" style=\"position: relative; line-height: 1.5;\">`;\n      \n      lines.forEach((line, i) => {\n        // 每行用span包裹\n        htmlContent += `<span class=\"text-line\" style=\"display: block;\">${line}</span>`;\n      });\n      \n      htmlContent += `</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 辅助函数：获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && \n              x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = (e) => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    // 清除所有现有高亮\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n    \n    const mouseTarget = document.elementFromPoint(e.clientX, e.clientY);\n    \n    if (mouseTarget && \n       (mouseTarget.classList.contains('pdf-paragraph') || \n        mouseTarget.tagName === 'P' || \n        mouseTarget.tagName === 'SPAN')) {\n      \n      const targetParagraph = mouseTarget.closest('.pdf-paragraph');\n      if (!targetParagraph) return;\n      \n      // 获取段落文本节点\n      const textNode = getTextNodeAtPosition(targetParagraph, e.clientX, e.clientY);\n      if (!textNode) return;\n      \n      // 获取精确的行位置和尺寸\n      const range = document.createRange();\n      range.selectNodeContents(textNode);\n      const rects = range.getClientRects();\n      \n      // 找到鼠标所在的具体行\n      let targetRect = null;\n      for (let i = 0; i < rects.length; i++) {\n        const rect = rects[i];\n        if (e.clientY >= rect.top && e.clientY <= rect.bottom) {\n          targetRect = rect;\n          break;\n        }\n      }\n      \n      if (targetRect) {\n        // 创建高亮元素\n        const lineHighlight = document.createElement('div');\n        lineHighlight.className = 'line-highlight mouse-highlight';\n        \n        // 计算相对于段落的位置\n        const paragraphRect = targetParagraph.getBoundingClientRect();\n        const top = targetRect.top - paragraphRect.top;\n        const left = targetRect.left - paragraphRect.left;\n        \n        // 设置高亮样式\n        lineHighlight.style.position = 'absolute';\n        lineHighlight.style.left = `${left}px`;\n        lineHighlight.style.top = `${top}px`;\n        lineHighlight.style.width = `${targetRect.width}px`;\n        lineHighlight.style.height = `${targetRect.height}px`;\n        lineHighlight.style.pointerEvents = 'none';\n        lineHighlight.style.backgroundColor = 'rgba(255, 165, 0, 0.3)';\n        lineHighlight.style.borderRadius = '4px';\n        lineHighlight.style.boxShadow = '0 0 8px rgba(255, 165, 0, 0.5)';\n        lineHighlight.style.zIndex = '5';\n        lineHighlight.style.transition = 'all 0.1s ease';\n        \n        // 确保段落有相对定位\n        targetParagraph.style.position = 'relative';\n        targetParagraph.appendChild(lineHighlight);\n        \n        // 计算并滚动到居中位置\n        const windowHeight = window.innerHeight;\n        const desiredPosition = windowHeight / 2;\n        const currentPosition = targetRect.top;\n        const scrollOffset = currentPosition - desiredPosition;\n        \n        window.scrollTo({\n          top: window.scrollY + scrollOffset,\n          behavior: 'smooth'\n        });\n      }\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async (delta) => {\n    const newPage = currentPage + delta;\n    if (newPage >= 1 && newPage <= totalPages && pdfDocument) {\n      setCurrentPage(newPage);\n      \n      try {\n        const page = await pdfDocument.getPage(newPage);\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        let processedContent = '';\n        switch(readingMode) {\n          case 'follow-mouse':\n            processedContent = formatTextForMouseFollow(extractedText);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlight(extractedText);\n            break;\n          case 'auto-reader':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          default:\n            processedContent = formatTextToHtml(extractedText);\n        }\n        \n        const contentArea = document.querySelector('.page-content');\n        if (contentArea) {\n          contentArea.textContent = '';\n          contentArea.innerHTML = processedContent;\n          \n          // 根据当前模式重新初始化\n          switch(readingMode) {\n            case 'follow-mouse':\n              initializeMouseFollow();\n              break;\n            case 'auto-reader':\n              // 重置自动阅读器状态并重新初始化\n              setAutoReaderState(prev => ({ ...prev, currentIndex: 0 }));\n              setTimeout(initializeAutoReader, 50);\n              break;\n            case 'static':\n              void contentArea.offsetHeight;\n              break;\n          }\n        }\n      } catch (error) {\n        console.error('翻页处理出错:', error);\n      }\n    }\n  };\n\n  // 修改后的鼠标跟随初始化函数\n  const initializeMouseFollow = () => {\n    // 新增延迟补偿\n    setTimeout(() => {\n      addMouseFollowListeners();\n      \n      // 强制触发重排\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        void contentArea.offsetHeight;\n        \n        // 模拟鼠标移动事件\n        const fakeEvent = new MouseEvent('mousemove', {\n          clientX: window.innerWidth / 2,\n          clientY: window.innerHeight / 2,\n          bubbles: true\n        });\n        contentArea.dispatchEvent(fakeEvent);\n      }\n    }, 50);\n  };\n\n  // 添加鼠标跟随监听器\n  const addMouseFollowListeners = () => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    \n    // 清理旧的监听器\n    contentArea.removeEventListener('mousemove', handleMouseMove);\n    contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    \n    // 添加新的监听器\n    contentArea.addEventListener('mousemove', handleMouseMove);\n    contentArea.addEventListener('mouseleave', clearAllHighlights);\n    \n    // 确保所有段落都有正确的样式\n    document.querySelectorAll('.pdf-paragraph').forEach(p => {\n      p.style.position = 'relative';\n      p.style.lineHeight = '1.5';\n    });\n  };\n\n  // 添加滚动监听器\n  useEffect(() => {\n    const handleScroll = () => {\n      if (!autoReaderState.intervalId) return;\n      \n      setAutoReaderState(prev => ({ ...prev, isUserScrolling: true }));\n      \n      clearTimeout(autoReaderState.scrollTimeout);\n      const timeoutId = setTimeout(() => {\n        setAutoReaderState(prev => {\n          const currentPos = prev.charPositions[prev.currentIndex];\n          if (currentPos) {\n            const viewportY = currentPos.y - window.scrollY;\n            if (viewportY < 0 || viewportY > window.innerHeight) {\n              window.scrollTo({\n                top: currentPos.y - window.innerHeight * 0.3,\n                behavior: 'auto'\n              });\n            }\n          }\n          return { ...prev, isUserScrolling: false, scrollTimeout: null };\n        });\n      }, 300);\n      \n      setAutoReaderState(prev => ({ ...prev, scrollTimeout: timeoutId }));\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        <div className=\"logo\">\n          <h2>ADHD阅读助手</h2>\n        </div>\n        <label className=\"upload-btn\">\n          选择文件\n          <input\n            type=\"file\"\n            accept=\".pdf,.txt\"\n            onChange={handleFileUpload}\n            style={{ display: 'none' }}\n          />\n        </label>\n      </div>\n      <div className=\"main-content\">\n        <div className=\"header\">\n          <h1>ADHD阅读助手</h1>\n          <div className=\"controls\">\n            <div className=\"mode-selector\">\n              <select value={readingMode} onChange={handleReadingModeChange}>\n                <option value=\"normal\">普通模式</option>\n                <option value=\"static\">静态高亮模式</option>\n                <option value=\"follow-mouse\">鼠标跟随高亮</option>\n                <option value=\"auto-reader\">自动阅读器</option>\n              </select>\n            </div>\n            <div className=\"mode-selector\">\n              <select value={posMode} onChange={(e) => setPosMode(e.target.value)}>\n                <option value=\"none\">无词性标注</option>\n                <option value=\"noun\">名词标注</option>\n                <option value=\"all\">全词性标注</option>\n              </select>\n            </div>\n            {readingMode === 'auto-reader' && (\n              <div className=\"speed-control\">\n                <button onClick={() => adjustSpeed(-100)}>-</button>\n                <span>{autoReaderState.speed}ms</span>\n                <button onClick={() => adjustSpeed(100)}>+</button>\n              </div>\n            )}\n          </div>\n        </div>\n        <div className=\"page-content\">\n          {content ? (\n            <div dangerouslySetInnerHTML={{ __html: content }} />\n          ) : (\n            <div className=\"empty-state\">\n              <p>请上传PDF或TXT文件开始阅读</p>\n            </div>\n          )}\n        </div>\n        {content && (\n          <div className=\"nav-buttons\">\n            <button className=\"page-btn prev\" onClick={() => changePage(-1)} disabled={currentPage === 1}>\n              上一页\n            </button>\n            <span className=\"page-info\">\n              第 {currentPage} 页 / 共 {totalPages} 页\n            </span>\n            <button className=\"page-btn next\" onClick={() => changePage(1)} disabled={currentPage === totalPages}>\n              下一页\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}