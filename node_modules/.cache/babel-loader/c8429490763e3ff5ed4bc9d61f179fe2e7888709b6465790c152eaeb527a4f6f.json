{"ast":null,"code":"var _jsxFileName = \"D:\\\\adhd-read-helper\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 修改自动阅读器全局对象\nlet autoReader = {\n  currentIndex: 0,\n  charPositions: [],\n  intervalId: null,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  scrollListener: null,\n  pageStartMarker: null // 新增页面起始标记\n};\n\n// 模拟NLP词性标注功能（实际应用中建议使用专业NLP库如nlp.js或调用API）\nconst tagPartsOfSpeech = text => {\n  // 定义所有标点符号\n  const punctuationMarks = ['，', '。', '！', '？', '；', '：', '（', '）', '【', '】', '《', '》', '〈', '〉', '…', '—', '～', '·', ',', '.', '!', '?', ';', ':', '(', ')', '[', ']', '{', '}', '-', '...', '..'];\n\n  // 将文本按标点符号分割，保留标点符号\n  const segments = text.split(new RegExp(`([${punctuationMarks.map(mark => '\\\\' + mark).join('')}])`));\n  let result = '';\n  let colorIndex = 0; // 0: 红色, 1: 蓝色, 2: 黑色\n  let currentText = '';\n  segments.forEach((segment, index) => {\n    // 跳过空字符串和纯空格\n    if (!segment || /^\\s+$/.test(segment)) {\n      result += segment;\n      return;\n    }\n\n    // 检查是否是标点符号\n    const isPunctuation = punctuationMarks.includes(segment);\n\n    // 根据索引选择颜色\n    let color;\n    switch (colorIndex) {\n      case 0:\n        color = 'red';\n        break;\n      case 1:\n        color = 'blue';\n        break;\n      case 2:\n        color = 'black';\n        break;\n      default:\n        color = 'black';\n    }\n\n    // 将当前文本和标点符号放在同一个颜色块中\n    if (isPunctuation) {\n      // 如果有累积的文本，先添加文本\n      if (currentText) {\n        result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n        currentText = '';\n      }\n      // 添加标点符号\n      result += `<span class=\"highlight-word ${color}\">${segment}</span>`;\n      // 切换颜色\n      colorIndex = (colorIndex + 1) % 3;\n    } else {\n      // 累积文本\n      currentText += segment;\n    }\n  });\n\n  // 处理最后可能剩余的文本\n  if (currentText) {\n    const color = colorIndex === 0 ? 'red' : colorIndex === 1 ? 'blue' : 'black';\n    result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n  }\n  return result;\n};\nconst App = () => {\n  _s();\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const autoReadGuideRef = useRef(null);\n  const autoReadIntervalRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n\n  // 新增自动阅读器状态\n  const [autoReaderState, setAutoReaderState] = useState({\n    currentIndex: 0,\n    charPositions: [],\n    intervalId: null,\n    speed: 300,\n    pageContainer: null,\n    isUserScrolling: false,\n    scrollTimeout: null,\n    contentLoaded: false\n  });\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n    return () => {\n      // 清理自动阅读定时器\n      if (autoReadIntervalRef.current) {\n        clearInterval(autoReadIntervalRef.current);\n      }\n    };\n  }, []);\n\n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async file => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n\n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n\n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n\n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({\n        scale: 1.0\n      });\n\n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async textContent => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n\n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n\n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n\n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    const lines = [...lineMap.values()];\n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    return hasTocKeywords || hasPageNumberPatterns || shortLineRatio > 0.7 && numberLineRatio > 0.3;\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n\n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n\n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n\n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n\n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 修改文本处理函数，实现按完整词随机高亮\n  const processTextWithHighlight = text => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    return result;\n  };\n\n  // 修改processContentPage函数\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n\n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch (mode) {\n        case 'normal':\n          // 普通模式 - 简单分段显示\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'static':\n          // 静态高亮模式 - 应用词性标注和颜色高亮\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'follow-mouse':\n          // 鼠标跟随高亮模式 - 分段落但不预先高亮，由鼠标事件触发高亮\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      setContent(processedContent);\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async file => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain') {\n      handleTxtFile(file);\n    } else {\n      alert('请上传PDF或TXT文件');\n    }\n  };\n\n  // 增强的字符位置获取（绝对坐标）\n  const getAllCharacterPositions = container => {\n    const positions = [];\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n      if (!text.trim()) continue;\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0) continue;\n\n          // 计算绝对位置（包含滚动偏移）\n          positions.push({\n            x: rect.left + window.scrollX + rect.width / 2,\n            y: rect.top + window.scrollY + rect.height,\n            char: text[i],\n            page: currentPage\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n    return positions.filter(p => p.char.trim() !== '').sort((a, b) => a.y - b.y || a.x - b.x);\n  };\n\n  // 增强的自动阅读启动\n  const startAutoReader = () => {\n    stopAutoReader();\n\n    // 立即显示光标\n    const cursor = document.getElementById('auto-reader-cursor') || createReaderCursor();\n    if (!document.body.contains(cursor)) document.body.appendChild(cursor);\n    autoReader.intervalId = setInterval(() => {\n      // 到达页面末尾处理\n      if (autoReader.currentIndex >= autoReader.charPositions.length) {\n        handlePageEnd();\n        return;\n      }\n\n      // 获取当前字符位置\n      const pos = autoReader.charPositions[autoReader.currentIndex];\n\n      // 跳过空白字符\n      while ((pos === null || pos === void 0 ? void 0 : pos.char.trim()) === '') {\n        autoReader.currentIndex++;\n        if (autoReader.currentIndex >= autoReader.charPositions.length) {\n          handlePageEnd();\n          return;\n        }\n      }\n\n      // 更新光标位置\n      updateCursorPosition(pos);\n\n      // 自动滚动逻辑\n      if (!autoReader.isScrolling) {\n        const viewportHeight = window.innerHeight;\n        const targetY = pos.y - viewportHeight * 0.3;\n        if (Math.abs(window.scrollY - targetY) > viewportHeight * 0.2) {\n          window.scrollTo({\n            top: targetY,\n            behavior: 'smooth'\n          });\n        }\n      }\n      autoReader.currentIndex++;\n    }, autoReader.speed);\n  };\n\n  // 增强的光标位置更新\n  const updateCursorPosition = pos => {\n    const cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor || !pos) return;\n\n    // 使用transform实现平滑移动\n    cursor.style.transform = `translate(${pos.x}px, ${pos.y}px)`;\n  };\n\n  // 翻页处理\n  const handlePageEnd = async () => {\n    if (currentPage < totalPages) {\n      await changePage(1);\n      // 翻页后立即初始化\n      initializeAutoReader(true);\n    } else {\n      stopAutoReader();\n    }\n  };\n\n  // 增强的初始化函数\n  const initializeAutoReader = (force = false) => {\n    if (!force && readingMode !== 'auto-reader') return;\n\n    // 清理旧数据\n    stopAutoReader();\n\n    // 获取最新容器\n    const container = document.querySelector('.page-content');\n    if (!container) return;\n\n    // 收集位置数据\n    autoReader.charPositions = getAllCharacterPositions(container);\n    autoReader.currentIndex = 0;\n\n    // 添加滚动监听\n    window.addEventListener('scroll', handleScrollDebounced, {\n      passive: true\n    });\n\n    // 立即开始\n    if (autoReader.charPositions.length > 0) {\n      startAutoReader();\n    } else {\n      handlePageEnd();\n    }\n  };\n\n  // 防抖滚动处理\n  const handleScrollDebounced = () => {\n    autoReader.isScrolling = true;\n    clearTimeout(autoReader.scrollTimeout);\n    autoReader.scrollTimeout = setTimeout(() => {\n      autoReader.isScrolling = false;\n      // 滚动后刷新位置\n      autoReader.charPositions = getAllCharacterPositions(document.querySelector('.page-content'));\n      autoReader.currentIndex = findNearestCharacterIndex();\n      updateCursorPosition(autoReader.charPositions[autoReader.currentIndex]);\n    }, 300);\n  };\n\n  // 查找最近字符索引\n  const findNearestCharacterIndex = () => {\n    const scrollY = window.scrollY + window.innerHeight * 0.3;\n    return autoReader.charPositions.findIndex(p => p.y >= scrollY);\n  };\n\n  // 增强的光标样式\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: fixed;\n      width: 20px;\n      height: 20px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translate(-50%, -50%);\n      box-shadow: 0 0 15px #00ff00;\n      animation: pulse 1s infinite;\n      z-index: 9999;\n      transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n      opacity: 0; /* 初始隐藏 */\n    `;\n    // 添加显示动画\n    setTimeout(() => cursor.style.opacity = '1', 100);\n    return cursor;\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n  }, []);\n\n  // 格式化文本为HTML\n  const formatTextToHtml = text => {\n    // 分段\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n\n    // 创建HTML内容\n    let htmlContent = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      htmlContent += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 修改后的静态高亮应用函数\n  const applyStaticHighlight = text => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    let htmlContent = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      // 新增强制清理逻辑\n      const cleanParagraph = paragraph.replace(/<span class=\"text-line\">/g, '').replace(/<\\/span>/g, '');\n      const highlightedText = processTextWithHighlight(cleanParagraph);\n      htmlContent += `<p class=\"pdf-paragraph\">${highlightedText}</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 格式化文本用于鼠标跟随高亮模式\n  const formatTextForMouseFollow = text => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    let htmlContent = '<div class=\"pdf-content mouse-follow-content\">';\n    paragraphs.forEach(paragraph => {\n      // 将段落分割成行\n      const lines = paragraph.split('\\n').filter(line => line.trim());\n      htmlContent += `<p class=\"pdf-paragraph\" data-follow=\"true\" style=\"position: relative; line-height: 1.5;\">`;\n      lines.forEach((line, i) => {\n        // 每行用span包裹\n        htmlContent += `<span class=\"text-line\" style=\"display: block;\">${line}</span>`;\n      });\n      htmlContent += `</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 辅助函数：获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        try {\n          const range = document.createRange();\n          range.selectNodeContents(node);\n          const rect = range.getBoundingClientRect();\n          if (y >= rect.top && y <= rect.bottom && x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        } catch (error) {\n          console.warn('获取文本节点位置时出错:', error);\n          continue;\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = e => {\n    if (readingMode !== 'follow-mouse') return;\n\n    // 清除所有现有高亮\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n    const mouseTarget = document.elementFromPoint(e.clientX, e.clientY);\n    if (mouseTarget && (mouseTarget.classList.contains('pdf-paragraph') || mouseTarget.tagName === 'P' || mouseTarget.tagName === 'SPAN')) {\n      const targetParagraph = mouseTarget.closest('.pdf-paragraph');\n      if (!targetParagraph) return;\n\n      // 获取段落文本节点\n      const textNode = getTextNodeAtPosition(targetParagraph, e.clientX, e.clientY);\n      if (!textNode) return;\n      try {\n        // 获取精确的行位置和尺寸\n        const range = document.createRange();\n        range.selectNodeContents(textNode);\n        const rect = range.getBoundingClientRect();\n\n        // 创建高亮元素\n        const lineHighlight = document.createElement('div');\n        lineHighlight.className = 'line-highlight mouse-highlight';\n\n        // 计算相对于段落的位置\n        const paragraphRect = targetParagraph.getBoundingClientRect();\n        const top = rect.top - paragraphRect.top;\n        const left = rect.left - paragraphRect.left;\n\n        // 设置高亮样式\n        lineHighlight.style.position = 'absolute';\n        lineHighlight.style.left = `${left}px`;\n        lineHighlight.style.top = `${top}px`;\n        lineHighlight.style.width = `${rect.width}px`;\n        lineHighlight.style.height = `${rect.height}px`;\n        lineHighlight.style.pointerEvents = 'none';\n        lineHighlight.style.backgroundColor = 'rgba(255, 165, 0, 0.3)';\n        lineHighlight.style.borderRadius = '4px';\n        lineHighlight.style.boxShadow = '0 0 8px rgba(255, 165, 0, 0.5)';\n        lineHighlight.style.zIndex = '5';\n        lineHighlight.style.transition = 'all 0.1s ease';\n\n        // 确保段落有相对定位\n        targetParagraph.style.position = 'relative';\n        targetParagraph.appendChild(lineHighlight);\n\n        // 计算并滚动到居中位置\n        const windowHeight = window.innerHeight;\n        const desiredPosition = windowHeight / 2;\n        const currentPosition = rect.top;\n        const scrollOffset = currentPosition - desiredPosition;\n        window.scrollTo({\n          top: window.scrollY + scrollOffset,\n          behavior: 'smooth'\n        });\n      } catch (error) {\n        console.warn('处理鼠标移动事件时出错:', error);\n      }\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async delta => {\n    const newPage = currentPage + delta;\n    if (newPage >= 1 && newPage <= totalPages && pdfDocument) {\n      setCurrentPage(newPage);\n      try {\n        const page = await pdfDocument.getPage(newPage);\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        let processedContent = '';\n        switch (readingMode) {\n          case 'follow-mouse':\n            processedContent = formatTextForMouseFollow(extractedText);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlight(extractedText);\n            break;\n          case 'auto-reader':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          default:\n            processedContent = formatTextToHtml(extractedText);\n        }\n        const contentArea = document.querySelector('.page-content');\n        if (contentArea) {\n          contentArea.textContent = '';\n          contentArea.innerHTML = processedContent;\n\n          // 根据当前模式重新初始化\n          switch (readingMode) {\n            case 'follow-mouse':\n              initializeMouseFollow();\n              break;\n            case 'auto-reader':\n              // 重置自动阅读器状态并重新初始化\n              setAutoReaderState(prev => ({\n                ...prev,\n                currentIndex: 0\n              }));\n              setTimeout(initializeAutoReader, 50);\n              break;\n            case 'static':\n              void contentArea.offsetHeight;\n              break;\n          }\n        }\n      } catch (error) {\n        console.error('翻页处理出错:', error);\n      }\n    }\n  };\n\n  // 清除所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 修改后的鼠标跟随初始化函数\n  const initializeMouseFollow = () => {\n    // 新增延迟补偿\n    setTimeout(() => {\n      addMouseFollowListeners();\n\n      // 强制触发重排\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        void contentArea.offsetHeight;\n\n        // 模拟鼠标移动事件\n        const fakeEvent = new MouseEvent('mousemove', {\n          clientX: window.innerWidth / 2,\n          clientY: window.innerHeight / 2,\n          bubbles: true\n        });\n        contentArea.dispatchEvent(fakeEvent);\n      }\n    }, 50);\n  };\n\n  // 添加鼠标跟随监听器\n  const addMouseFollowListeners = () => {\n    if (readingMode !== 'follow-mouse') return;\n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n\n    // 清理旧的监听器\n    contentArea.removeEventListener('mousemove', handleMouseMove);\n    contentArea.removeEventListener('mouseleave', clearAllHighlights);\n\n    // 添加新的监听器\n    contentArea.addEventListener('mousemove', handleMouseMove);\n    contentArea.addEventListener('mouseleave', clearAllHighlights);\n\n    // 确保所有段落都有正确的样式\n    document.querySelectorAll('.pdf-paragraph').forEach(p => {\n      p.style.position = 'relative';\n      p.style.lineHeight = '1.5';\n    });\n  };\n\n  // 处理阅读模式切换\n  const handleReadingModeChange = mode => {\n    // 停止自动阅读\n    stopAutoReader();\n\n    // 清理旧的 DOM 元素\n    cleanupDOM();\n\n    // 更新阅读模式\n    setReadingMode(mode);\n\n    // 重新处理文本内容\n    const content = document.querySelector('.page-content');\n    if (content) {\n      const text = content.textContent;\n      if (mode === 'follow-mouse') {\n        processTextForMouseFollow(text);\n      } else if (mode === 'static') {\n        processTextForStatic(text);\n      } else if (mode === 'auto-reader') {\n        processTextForAutoReader(text);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 1. 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll('.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line');\n    highlights.forEach(el => el.remove());\n\n    // 2. 移除事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 克隆内容区域以彻底移除所有事件监听器\n      const cleanContent = contentArea.cloneNode(false);\n      cleanContent.innerHTML = contentArea.innerHTML;\n      contentArea.parentNode.replaceChild(cleanContent, contentArea);\n    }\n\n    // 3. 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 创建新段落并保留基本结构\n      const newParagraph = document.createElement('p');\n      newParagraph.className = 'pdf-paragraph';\n      newParagraph.innerHTML = paragraph.innerHTML.replace(/<span class=\"text-line\">/g, '').replace(/<\\/span>/g, '');\n\n      // 移除特殊属性\n      newParagraph.removeAttribute('data-follow');\n      newParagraph.removeAttribute('style');\n      if (paragraph.parentNode) {\n        paragraph.parentNode.replaceChild(newParagraph, paragraph);\n      }\n    });\n\n    // 4. 清理自动阅读器\n    stopAutoReader();\n  };\n\n  // 停止自动阅读\n  const stopAutoReader = () => {\n    if (autoReader.intervalId) {\n      clearInterval(autoReader.intervalId);\n      autoReader.intervalId = null;\n    }\n\n    // 移除光标\n    const cursor = document.getElementById('auto-reader-cursor');\n    if (cursor) {\n      cursor.remove();\n    }\n\n    // 移除滚动监听\n    if (autoReader.scrollListener) {\n      window.removeEventListener('scroll', autoReader.scrollListener);\n      autoReader.scrollListener = null;\n    }\n\n    // 重置状态\n    autoReader.currentIndex = 0;\n    autoReader.charPositions = [];\n    autoReader.isScrolling = false;\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = delta => {\n    const newSpeed = Math.max(100, Math.min(1000, autoReader.speed + delta));\n    autoReader.speed = newSpeed;\n\n    // 如果正在阅读，重新开始以应用新速度\n    if (autoReader.intervalId) {\n      startAutoReader();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 956,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 955,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"upload-btn\",\n        children: [\"\\u9009\\u62E9\\u6587\\u4EF6\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".pdf,.txt\",\n          onChange: handleFileUpload,\n          style: {\n            display: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 960,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 958,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 954,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 970,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mode-selector\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: readingMode,\n              onChange: handleReadingModeChange,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"normal\",\n                children: \"\\u666E\\u901A\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 974,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"static\",\n                children: \"\\u9759\\u6001\\u9AD8\\u4EAE\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 975,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"follow-mouse\",\n                children: \"\\u9F20\\u6807\\u8DDF\\u968F\\u9AD8\\u4EAE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 976,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"auto-reader\",\n                children: \"\\u81EA\\u52A8\\u9605\\u8BFB\\u5668\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 977,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 973,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 972,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mode-selector\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: posMode,\n              onChange: e => setPosMode(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"none\",\n                children: \"\\u65E0\\u8BCD\\u6027\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 982,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"noun\",\n                children: \"\\u540D\\u8BCD\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 983,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"all\",\n                children: \"\\u5168\\u8BCD\\u6027\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 984,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 981,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 980,\n            columnNumber: 13\n          }, this), readingMode === 'auto-reader' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"speed-control\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => adjustSpeed(-100),\n              children: \"-\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 989,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [autoReaderState.speed, \"ms\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 990,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => adjustSpeed(100),\n              children: \"+\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 991,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 988,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 971,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 969,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-content\",\n        children: content ? /*#__PURE__*/_jsxDEV(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: content\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 998,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-state\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u8BF7\\u4E0A\\u4F20PDF\\u6216TXT\\u6587\\u4EF6\\u5F00\\u59CB\\u9605\\u8BFB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1001,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1000,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 996,\n        columnNumber: 9\n      }, this), content && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"page-btn prev\",\n          onClick: () => changePage(-1),\n          disabled: currentPage === 1,\n          children: \"\\u4E0A\\u4E00\\u9875\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1007,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"page-info\",\n          children: [\"\\u7B2C \", currentPage, \" \\u9875 / \\u5171 \", totalPages, \" \\u9875\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1010,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"page-btn next\",\n          onClick: () => changePage(1),\n          disabled: currentPage === totalPages,\n          children: \"\\u4E0B\\u4E00\\u9875\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1013,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1006,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 968,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 953,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"FdIIE1mY5AAmB921foSmrxDLqNQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","pdfjsLib","pdfjsViewer","marked","pdfjs","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","autoReader","currentIndex","charPositions","intervalId","speed","pageContainer","isScrolling","scrollListener","pageStartMarker","tagPartsOfSpeech","text","punctuationMarks","segments","split","RegExp","map","mark","join","result","colorIndex","currentText","forEach","segment","index","test","isPunctuation","includes","color","App","_s","pages","setPages","currentPage","setCurrentPage","totalPages","setTotalPages","fileName","setFileName","loading","setLoading","fileRef","file","setFile","pdfInstance","setPdfInstance","extractedTextPages","setExtractedTextPages","readingMode","setReadingMode","posMode","setPosMode","markdownContent","setMarkdownContent","readerContainerRef","autoReadGuideRef","autoReadIntervalRef","content","setContent","pdfDocument","setPdfDocument","autoReaderState","setAutoReaderState","isUserScrolling","scrollTimeout","contentLoaded","current","clearInterval","setTimeout","initializeMouseFollow","handlePdfFile","fileURL","URL","createObjectURL","loadingTask","getDocument","pdf","promise","numPages","extractAndProcessPage","console","log","error","alert","pageNum","page","getPage","textContent","getTextContent","viewport","getViewport","scale","isTableOfContents","detectIfTocPage","processTocPage","processContentPage","addMouseFollowListeners","textItems","items","fullText","item","str","hasTocKeywords","hasPageNumberPatterns","shortLinesCount","linesWithNumbersCount","lineMap","Map","yKey","Math","round","transform","has","set","get","push","lines","values","line","lineText","length","shortLineRatio","numberLineRatio","htmlContent","x","y","height","fontSize","sqrt","fontWeight","fontName","toLowerCase","spacedText","processTextWithHighlight","words","lastColor","word","random","mode","extractedText","replace","trim","processedContent","formatTextToHtml","applyStaticHighlight","formatTextForMouseFollow","handleTxtFile","pageTexts","paragraph","fontFamily","handleFileUpload","e","target","files","type","getAllCharacterPositions","container","positions","walker","document","createTreeWalker","NodeFilter","SHOW_TEXT","nextNode","node","currentNode","i","range","createRange","setStart","setEnd","rect","getBoundingClientRect","width","left","window","scrollX","top","scrollY","char","warn","filter","p","sort","a","b","startAutoReader","stopAutoReader","cursor","getElementById","createReaderCursor","body","contains","appendChild","setInterval","handlePageEnd","pos","updateCursorPosition","viewportHeight","innerHeight","targetY","abs","scrollTo","behavior","style","changePage","initializeAutoReader","force","querySelector","addEventListener","handleScrollDebounced","passive","clearTimeout","findNearestCharacterIndex","findIndex","createElement","id","cssText","opacity","addAutoReaderStyles","head","paragraphs","cleanParagraph","highlightedText","getTextNodeAtPosition","element","nodes","childNodes","nodeType","Node","TEXT_NODE","selectNodeContents","bottom","right","ELEMENT_NODE","found","handleMouseMove","querySelectorAll","el","remove","mouseTarget","elementFromPoint","clientX","clientY","classList","tagName","targetParagraph","closest","textNode","lineHighlight","className","paragraphRect","position","pointerEvents","backgroundColor","borderRadius","boxShadow","zIndex","transition","windowHeight","desiredPosition","currentPosition","scrollOffset","delta","newPage","contentArea","innerHTML","prev","offsetHeight","clearAllHighlights","fakeEvent","MouseEvent","innerWidth","bubbles","dispatchEvent","removeEventListener","lineHeight","handleReadingModeChange","cleanupDOM","processTextForMouseFollow","processTextForStatic","processTextForAutoReader","highlights","cleanContent","cloneNode","parentNode","replaceChild","newParagraph","removeAttribute","adjustSpeed","newSpeed","max","min","children","_jsxFileName","lineNumber","columnNumber","accept","onChange","display","value","onClick","dangerouslySetInnerHTML","__html","disabled","_c","$RefreshReg$"],"sources":["D:/adhd-read-helper/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 修改自动阅读器全局对象\nlet autoReader = {\n  currentIndex: 0,\n  charPositions: [],\n  intervalId: null,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  scrollListener: null,\n  pageStartMarker: null // 新增页面起始标记\n};\n\n// 模拟NLP词性标注功能（实际应用中建议使用专业NLP库如nlp.js或调用API）\nconst tagPartsOfSpeech = (text) => {\n  // 定义所有标点符号\n  const punctuationMarks = [\n    '，', '。', '！', '？', '；', '：', '（', '）', '【', '】', '《', '》', '〈', '〉', '…', '—', '～', '·',\n    ',', '.', '!', '?', ';', ':', '(', ')', '[', ']', '{', '}', '-', '...', '..'\n  ];\n  \n  // 将文本按标点符号分割，保留标点符号\n  const segments = text.split(new RegExp(`([${punctuationMarks.map(mark => '\\\\' + mark).join('')}])`));\n  let result = '';\n  let colorIndex = 0; // 0: 红色, 1: 蓝色, 2: 黑色\n  let currentText = '';\n  \n  segments.forEach((segment, index) => {\n    // 跳过空字符串和纯空格\n    if (!segment || /^\\s+$/.test(segment)) {\n      result += segment;\n      return;\n    }\n    \n    // 检查是否是标点符号\n    const isPunctuation = punctuationMarks.includes(segment);\n    \n    // 根据索引选择颜色\n    let color;\n    switch (colorIndex) {\n      case 0:\n        color = 'red';\n        break;\n      case 1:\n        color = 'blue';\n        break;\n      case 2:\n        color = 'black';\n        break;\n      default:\n        color = 'black';\n    }\n    \n    // 将当前文本和标点符号放在同一个颜色块中\n    if (isPunctuation) {\n      // 如果有累积的文本，先添加文本\n      if (currentText) {\n        result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n        currentText = '';\n      }\n      // 添加标点符号\n      result += `<span class=\"highlight-word ${color}\">${segment}</span>`;\n      // 切换颜色\n      colorIndex = (colorIndex + 1) % 3;\n    } else {\n      // 累积文本\n      currentText += segment;\n    }\n  });\n  \n  // 处理最后可能剩余的文本\n  if (currentText) {\n    const color = colorIndex === 0 ? 'red' : colorIndex === 1 ? 'blue' : 'black';\n    result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n  }\n  \n  return result;\n};\n\nconst App = () => {\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const autoReadGuideRef = useRef(null);\n  const autoReadIntervalRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  \n  // 新增自动阅读器状态\n  const [autoReaderState, setAutoReaderState] = useState({\n    currentIndex: 0,\n    charPositions: [],\n    intervalId: null,\n    speed: 300,\n    pageContainer: null,\n    isUserScrolling: false,\n    scrollTimeout: null,\n    contentLoaded: false\n  });\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n    \n    return () => {\n      // 清理自动阅读定时器\n      if (autoReadIntervalRef.current) {\n        clearInterval(autoReadIntervalRef.current);\n      }\n    };\n  }, []);\n  \n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async (file) => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      \n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n      \n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n      \n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n  \n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({ scale: 1.0 });\n      \n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      \n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      \n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async (textContent) => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n    \n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n    \n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n    \n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    \n    const lines = [...lineMap.values()];\n    \n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    \n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    \n    return hasTocKeywords || hasPageNumberPatterns || (shortLineRatio > 0.7 && numberLineRatio > 0.3);\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n    \n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    \n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n      \n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n      \n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n      \n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    \n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 修改文本处理函数，实现按完整词随机高亮\n  const processTextWithHighlight = (text) => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    \n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      \n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        \n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    \n    return result;\n  };\n\n  // 修改processContentPage函数\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      \n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch(mode) {\n        case 'normal':\n          // 普通模式 - 简单分段显示\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'static':\n          // 静态高亮模式 - 应用词性标注和颜色高亮\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'follow-mouse':\n          // 鼠标跟随高亮模式 - 分段落但不预先高亮，由鼠标事件触发高亮\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      \n      setContent(processedContent);\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async (file) => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n    \n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain') {\n      handleTxtFile(file);\n    } else {\n      alert('请上传PDF或TXT文件');\n    }\n  };\n\n  // 增强的字符位置获取（绝对坐标）\n  const getAllCharacterPositions = (container) => {\n    const positions = [];\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    \n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n      \n      if (!text.trim()) continue;\n\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          \n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0) continue;\n\n          // 计算绝对位置（包含滚动偏移）\n          positions.push({\n            x: rect.left + window.scrollX + rect.width/2,\n            y: rect.top + window.scrollY + rect.height,\n            char: text[i],\n            page: currentPage\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n\n    return positions\n      .filter(p => p.char.trim() !== '')\n      .sort((a, b) => a.y - b.y || a.x - b.x);\n  };\n\n  // 增强的自动阅读启动\n  const startAutoReader = () => {\n    stopAutoReader();\n    \n    // 立即显示光标\n    const cursor = document.getElementById('auto-reader-cursor') || createReaderCursor();\n    if (!document.body.contains(cursor)) document.body.appendChild(cursor);\n\n    autoReader.intervalId = setInterval(() => {\n      // 到达页面末尾处理\n      if (autoReader.currentIndex >= autoReader.charPositions.length) {\n        handlePageEnd();\n        return;\n      }\n\n      // 获取当前字符位置\n      const pos = autoReader.charPositions[autoReader.currentIndex];\n      \n      // 跳过空白字符\n      while (pos?.char.trim() === '') {\n        autoReader.currentIndex++;\n        if (autoReader.currentIndex >= autoReader.charPositions.length) {\n          handlePageEnd();\n          return;\n        }\n      }\n\n      // 更新光标位置\n      updateCursorPosition(pos);\n      \n      // 自动滚动逻辑\n      if (!autoReader.isScrolling) {\n        const viewportHeight = window.innerHeight;\n        const targetY = pos.y - viewportHeight * 0.3;\n        \n        if (Math.abs(window.scrollY - targetY) > viewportHeight * 0.2) {\n          window.scrollTo({\n            top: targetY,\n            behavior: 'smooth'\n          });\n        }\n      }\n\n      autoReader.currentIndex++;\n    }, autoReader.speed);\n  };\n\n  // 增强的光标位置更新\n  const updateCursorPosition = (pos) => {\n    const cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor || !pos) return;\n\n    // 使用transform实现平滑移动\n    cursor.style.transform = `translate(${pos.x}px, ${pos.y}px)`;\n  };\n\n  // 翻页处理\n  const handlePageEnd = async () => {\n    if (currentPage < totalPages) {\n      await changePage(1);\n      // 翻页后立即初始化\n      initializeAutoReader(true);\n    } else {\n      stopAutoReader();\n    }\n  };\n\n  // 增强的初始化函数\n  const initializeAutoReader = (force = false) => {\n    if (!force && readingMode !== 'auto-reader') return;\n\n    // 清理旧数据\n    stopAutoReader();\n    \n    // 获取最新容器\n    const container = document.querySelector('.page-content');\n    if (!container) return;\n\n    // 收集位置数据\n    autoReader.charPositions = getAllCharacterPositions(container);\n    autoReader.currentIndex = 0;\n\n    // 添加滚动监听\n    window.addEventListener('scroll', handleScrollDebounced, { passive: true });\n\n    // 立即开始\n    if (autoReader.charPositions.length > 0) {\n      startAutoReader();\n    } else {\n      handlePageEnd();\n    }\n  };\n\n  // 防抖滚动处理\n  const handleScrollDebounced = () => {\n    autoReader.isScrolling = true;\n    clearTimeout(autoReader.scrollTimeout);\n    autoReader.scrollTimeout = setTimeout(() => {\n      autoReader.isScrolling = false;\n      // 滚动后刷新位置\n      autoReader.charPositions = getAllCharacterPositions(document.querySelector('.page-content'));\n      autoReader.currentIndex = findNearestCharacterIndex();\n      updateCursorPosition(autoReader.charPositions[autoReader.currentIndex]);\n    }, 300);\n  };\n\n  // 查找最近字符索引\n  const findNearestCharacterIndex = () => {\n    const scrollY = window.scrollY + window.innerHeight * 0.3;\n    return autoReader.charPositions.findIndex(p => p.y >= scrollY);\n  };\n\n  // 增强的光标样式\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: fixed;\n      width: 20px;\n      height: 20px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translate(-50%, -50%);\n      box-shadow: 0 0 15px #00ff00;\n      animation: pulse 1s infinite;\n      z-index: 9999;\n      transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n      opacity: 0; /* 初始隐藏 */\n    `;\n    // 添加显示动画\n    setTimeout(() => cursor.style.opacity = '1', 100);\n    return cursor;\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n  }, []);\n\n  // 格式化文本为HTML\n  const formatTextToHtml = (text) => {\n    // 分段\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    // 创建HTML内容\n    let htmlContent = '<div class=\"pdf-content\">';\n    \n        paragraphs.forEach(paragraph => {\n      htmlContent += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 修改后的静态高亮应用函数\n  const applyStaticHighlight = (text) => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    let htmlContent = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      // 新增强制清理逻辑\n      const cleanParagraph = paragraph\n        .replace(/<span class=\"text-line\">/g, '')\n        .replace(/<\\/span>/g, '');\n      \n      const highlightedText = processTextWithHighlight(cleanParagraph);\n      htmlContent += `<p class=\"pdf-paragraph\">${highlightedText}</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 格式化文本用于鼠标跟随高亮模式\n  const formatTextForMouseFollow = (text) => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    let htmlContent = '<div class=\"pdf-content mouse-follow-content\">';\n    \n      paragraphs.forEach(paragraph => {\n      // 将段落分割成行\n      const lines = paragraph.split('\\n').filter(line => line.trim());\n      htmlContent += `<p class=\"pdf-paragraph\" data-follow=\"true\" style=\"position: relative; line-height: 1.5;\">`;\n      \n      lines.forEach((line, i) => {\n        // 每行用span包裹\n        htmlContent += `<span class=\"text-line\" style=\"display: block;\">${line}</span>`;\n      });\n      \n      htmlContent += `</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 辅助函数：获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        try {\n          const range = document.createRange();\n          range.selectNodeContents(node);\n          const rect = range.getBoundingClientRect();\n          \n          if (y >= rect.top && y <= rect.bottom && \n              x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        } catch (error) {\n          console.warn('获取文本节点位置时出错:', error);\n          continue;\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = (e) => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    // 清除所有现有高亮\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n    \n    const mouseTarget = document.elementFromPoint(e.clientX, e.clientY);\n    \n    if (mouseTarget && \n       (mouseTarget.classList.contains('pdf-paragraph') || \n        mouseTarget.tagName === 'P' || \n        mouseTarget.tagName === 'SPAN')) {\n      \n      const targetParagraph = mouseTarget.closest('.pdf-paragraph');\n      if (!targetParagraph) return;\n      \n      // 获取段落文本节点\n      const textNode = getTextNodeAtPosition(targetParagraph, e.clientX, e.clientY);\n      if (!textNode) return;\n      \n      try {\n        // 获取精确的行位置和尺寸\n        const range = document.createRange();\n        range.selectNodeContents(textNode);\n        const rect = range.getBoundingClientRect();\n        \n        // 创建高亮元素\n        const lineHighlight = document.createElement('div');\n        lineHighlight.className = 'line-highlight mouse-highlight';\n        \n        // 计算相对于段落的位置\n        const paragraphRect = targetParagraph.getBoundingClientRect();\n        const top = rect.top - paragraphRect.top;\n        const left = rect.left - paragraphRect.left;\n        \n        // 设置高亮样式\n        lineHighlight.style.position = 'absolute';\n        lineHighlight.style.left = `${left}px`;\n        lineHighlight.style.top = `${top}px`;\n        lineHighlight.style.width = `${rect.width}px`;\n        lineHighlight.style.height = `${rect.height}px`;\n        lineHighlight.style.pointerEvents = 'none';\n        lineHighlight.style.backgroundColor = 'rgba(255, 165, 0, 0.3)';\n        lineHighlight.style.borderRadius = '4px';\n        lineHighlight.style.boxShadow = '0 0 8px rgba(255, 165, 0, 0.5)';\n        lineHighlight.style.zIndex = '5';\n        lineHighlight.style.transition = 'all 0.1s ease';\n        \n        // 确保段落有相对定位\n          targetParagraph.style.position = 'relative';\n        targetParagraph.appendChild(lineHighlight);\n        \n        // 计算并滚动到居中位置\n        const windowHeight = window.innerHeight;\n        const desiredPosition = windowHeight / 2;\n        const currentPosition = rect.top;\n        const scrollOffset = currentPosition - desiredPosition;\n        \n        window.scrollTo({\n          top: window.scrollY + scrollOffset,\n          behavior: 'smooth'\n        });\n      } catch (error) {\n        console.warn('处理鼠标移动事件时出错:', error);\n      }\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async (delta) => {\n    const newPage = currentPage + delta;\n    if (newPage >= 1 && newPage <= totalPages && pdfDocument) {\n      setCurrentPage(newPage);\n      \n      try {\n        const page = await pdfDocument.getPage(newPage);\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        let processedContent = '';\n        switch(readingMode) {\n          case 'follow-mouse':\n            processedContent = formatTextForMouseFollow(extractedText);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlight(extractedText);\n            break;\n          case 'auto-reader':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          default:\n            processedContent = formatTextToHtml(extractedText);\n        }\n        \n        const contentArea = document.querySelector('.page-content');\n        if (contentArea) {\n          contentArea.textContent = '';\n          contentArea.innerHTML = processedContent;\n          \n          // 根据当前模式重新初始化\n          switch(readingMode) {\n            case 'follow-mouse':\n              initializeMouseFollow();\n              break;\n            case 'auto-reader':\n              // 重置自动阅读器状态并重新初始化\n              setAutoReaderState(prev => ({ ...prev, currentIndex: 0 }));\n              setTimeout(initializeAutoReader, 50);\n              break;\n            case 'static':\n              void contentArea.offsetHeight;\n              break;\n          }\n        }\n      } catch (error) {\n        console.error('翻页处理出错:', error);\n      }\n    }\n  };\n\n  // 清除所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 修改后的鼠标跟随初始化函数\n  const initializeMouseFollow = () => {\n    // 新增延迟补偿\n    setTimeout(() => {\n      addMouseFollowListeners();\n      \n      // 强制触发重排\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        void contentArea.offsetHeight;\n        \n        // 模拟鼠标移动事件\n        const fakeEvent = new MouseEvent('mousemove', {\n          clientX: window.innerWidth / 2,\n          clientY: window.innerHeight / 2,\n          bubbles: true\n        });\n        contentArea.dispatchEvent(fakeEvent);\n      }\n    }, 50);\n  };\n\n  // 添加鼠标跟随监听器\n  const addMouseFollowListeners = () => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    \n    // 清理旧的监听器\n    contentArea.removeEventListener('mousemove', handleMouseMove);\n    contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    \n    // 添加新的监听器\n    contentArea.addEventListener('mousemove', handleMouseMove);\n    contentArea.addEventListener('mouseleave', clearAllHighlights);\n    \n    // 确保所有段落都有正确的样式\n    document.querySelectorAll('.pdf-paragraph').forEach(p => {\n      p.style.position = 'relative';\n      p.style.lineHeight = '1.5';\n    });\n  };\n\n  // 处理阅读模式切换\n  const handleReadingModeChange = (mode) => {\n    // 停止自动阅读\n    stopAutoReader();\n    \n    // 清理旧的 DOM 元素\n    cleanupDOM();\n    \n    // 更新阅读模式\n    setReadingMode(mode);\n    \n    // 重新处理文本内容\n    const content = document.querySelector('.page-content');\n    if (content) {\n      const text = content.textContent;\n      if (mode === 'follow-mouse') {\n        processTextForMouseFollow(text);\n      } else if (mode === 'static') {\n        processTextForStatic(text);\n      } else if (mode === 'auto-reader') {\n        processTextForAutoReader(text);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 1. 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll(\n      '.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line'\n    );\n    highlights.forEach(el => el.remove());\n    \n    // 2. 移除事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 克隆内容区域以彻底移除所有事件监听器\n      const cleanContent = contentArea.cloneNode(false);\n      cleanContent.innerHTML = contentArea.innerHTML;\n      contentArea.parentNode.replaceChild(cleanContent, contentArea);\n    }\n    \n    // 3. 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 创建新段落并保留基本结构\n      const newParagraph = document.createElement('p');\n      newParagraph.className = 'pdf-paragraph';\n      newParagraph.innerHTML = paragraph.innerHTML\n        .replace(/<span class=\"text-line\">/g, '')\n        .replace(/<\\/span>/g, '');\n      \n      // 移除特殊属性\n      newParagraph.removeAttribute('data-follow');\n      newParagraph.removeAttribute('style');\n      \n      if (paragraph.parentNode) {\n        paragraph.parentNode.replaceChild(newParagraph, paragraph);\n      }\n    });\n    \n    // 4. 清理自动阅读器\n    stopAutoReader();\n  };\n\n  // 停止自动阅读\n  const stopAutoReader = () => {\n    if (autoReader.intervalId) {\n      clearInterval(autoReader.intervalId);\n      autoReader.intervalId = null;\n    }\n    \n    // 移除光标\n    const cursor = document.getElementById('auto-reader-cursor');\n    if (cursor) {\n      cursor.remove();\n    }\n    \n    // 移除滚动监听\n    if (autoReader.scrollListener) {\n      window.removeEventListener('scroll', autoReader.scrollListener);\n      autoReader.scrollListener = null;\n    }\n    \n    // 重置状态\n    autoReader.currentIndex = 0;\n    autoReader.charPositions = [];\n    autoReader.isScrolling = false;\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = (delta) => {\n    const newSpeed = Math.max(100, Math.min(1000, autoReader.speed + delta));\n    autoReader.speed = newSpeed;\n    \n    // 如果正在阅读，重新开始以应用新速度\n    if (autoReader.intervalId) {\n      startAutoReader();\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        <div className=\"logo\">\n          <h2>ADHD阅读助手</h2>\n        </div>\n        <label className=\"upload-btn\">\n          选择文件\n          <input\n            type=\"file\"\n            accept=\".pdf,.txt\"\n            onChange={handleFileUpload}\n            style={{ display: 'none' }}\n          />\n        </label>\n      </div>\n      <div className=\"main-content\">\n        <div className=\"header\">\n          <h1>ADHD阅读助手</h1>\n          <div className=\"controls\">\n            <div className=\"mode-selector\">\n              <select value={readingMode} onChange={handleReadingModeChange}>\n                <option value=\"normal\">普通模式</option>\n                <option value=\"static\">静态高亮模式</option>\n                <option value=\"follow-mouse\">鼠标跟随高亮</option>\n                <option value=\"auto-reader\">自动阅读器</option>\n              </select>\n            </div>\n            <div className=\"mode-selector\">\n              <select value={posMode} onChange={(e) => setPosMode(e.target.value)}>\n                <option value=\"none\">无词性标注</option>\n                <option value=\"noun\">名词标注</option>\n                <option value=\"all\">全词性标注</option>\n              </select>\n            </div>\n            {readingMode === 'auto-reader' && (\n              <div className=\"speed-control\">\n                <button onClick={() => adjustSpeed(-100)}>-</button>\n                <span>{autoReaderState.speed}ms</span>\n                <button onClick={() => adjustSpeed(100)}>+</button>\n              </div>\n            )}\n          </div>\n        </div>\n        <div className=\"page-content\">\n          {content ? (\n            <div dangerouslySetInnerHTML={{ __html: content }} />\n          ) : (\n            <div className=\"empty-state\">\n              <p>请上传PDF或TXT文件开始阅读</p>\n            </div>\n          )}\n        </div>\n        {content && (\n          <div className=\"nav-buttons\">\n            <button className=\"page-btn prev\" onClick={() => changePage(-1)} disabled={currentPage === 1}>\n              上一页\n            </button>\n            <span className=\"page-info\">\n              第 {currentPage} 页 / 共 {totalPages} 页\n            </span>\n            <button className=\"page-btn next\" onClick={() => changePage(1)} disabled={currentPage === totalPages}>\n              下一页\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}