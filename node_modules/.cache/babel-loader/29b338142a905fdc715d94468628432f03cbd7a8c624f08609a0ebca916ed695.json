{"ast":null,"code":"var _jsxFileName = \"D:\\\\adhd-read-helper\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 添加全局事件跟踪对象\nwindow.eventTracker = window.eventTracker || {\n  mouseFollowHandlers: []\n};\n\n// 自动阅读器全局对象\nwindow.autoReader = {\n  charPositions: [],\n  intervalId: null,\n  currentIndex: 0,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false,\n  cleanup: null\n};\n\n// 添加新的节奏阅读模式代码\n// 全局变量，确保在页面切换后仍然保持状态\nwindow.rhythmReaderGlobal = window.rhythmReaderGlobal || {\n  active: false,\n  speed: 300\n};\n\n// 节奏阅读模式 - 确保手动翻页后也能自动恢复\n(function () {\n  console.log(\"正在初始化节奏阅读模式...\");\n\n  // 确保只初始化一次\n  if (window.rhythmReadingInitialized) {\n    console.log(\"节奏阅读模式已经初始化过，跳过\");\n    return;\n  }\n  window.rhythmReadingInitialized = true;\n\n  // 改进的存储函数，同时使用session和local storage提高可靠性\n  function setStorage(key, value) {\n    try {\n      sessionStorage.setItem(key, value);\n      localStorage.setItem(key, value);\n    } catch (e) {\n      console.error(\"无法写入存储\", e);\n    }\n  }\n  function getStorage(key) {\n    try {\n      // 优先使用sessionStorage，这样更适合单次会话\n      return sessionStorage.getItem(key) || localStorage.getItem(key);\n    } catch (e) {\n      console.error(\"无法读取存储\", e);\n      return null;\n    }\n  }\n\n  // 状态变量和功能对象\n  const rhythmReader = {\n    active: false,\n    intervalId: null,\n    speed: 300,\n    currentIndex: 0,\n    readIndices: new Set(),\n    charElements: [],\n    pageTransitionInProgress: false,\n    // 初始化文本节点\n    initializeTextNodes: function () {\n      console.log(\"【节奏阅读】初始化文本节点...\");\n\n      // 重置字符元素数组\n      this.charElements = [];\n\n      // 获取内容容器\n      const contentContainer = document.querySelector('.page-content');\n      if (!contentContainer) {\n        console.error(\"【节奏阅读】找不到内容容器\");\n        return false;\n      }\n\n      // 查找所有文本节点并处理\n      const textNodes = [];\n      this.findTextNodes(contentContainer, textNodes);\n      if (textNodes.length === 0) {\n        console.error(\"【节奏阅读】未找到文本节点\");\n        this.showNotification(\"无法启动节奏阅读：未找到文本内容\");\n        return false;\n      }\n      console.log(`【节奏阅读】找到 ${textNodes.length} 个文本节点`);\n\n      // 为每个文本节点创建字符span\n      textNodes.forEach(node => {\n        const text = node.nodeValue;\n        if (!text || text.trim() === '') return;\n\n        // 创建文档片段来存放字符span\n        const fragment = document.createDocumentFragment();\n\n        // 为每个字符创建span\n        for (let i = 0; i < text.length; i++) {\n          const char = text[i];\n          const span = document.createElement('span');\n          span.textContent = char;\n          span.className = 'rhythm-char';\n          span.dataset.rhythmIndex = String(this.charElements.length);\n\n          // 如果是空白字符，添加一个标志\n          if (char.trim() === '') {\n            span.dataset.whitespace = 'true';\n          }\n\n          // 保持原始样式，不设置背景\n          span.style.display = 'inline';\n          span.style.margin = '0';\n          span.style.padding = '0';\n          span.style.border = 'none';\n          span.style.backgroundColor = 'transparent';\n          fragment.appendChild(span);\n          this.charElements.push(span);\n        }\n\n        // 替换原始节点\n        if (node.parentNode) {\n          node.parentNode.replaceChild(fragment, node);\n        }\n      });\n      console.log(`【节奏阅读】总共创建了 ${this.charElements.length} 个字符span`);\n      return this.charElements.length > 0;\n    },\n    // 递归查找所有文本节点\n    findTextNodes: function (element, textNodes) {\n      // 处理子节点\n      for (let i = 0; i < element.childNodes.length; i++) {\n        const node = element.childNodes[i];\n\n        // 如果是文本节点且有内容\n        if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() !== '') {\n          textNodes.push(node);\n        }\n        // 如果是元素节点，递归处理\n        else if (node.nodeType === Node.ELEMENT_NODE) {\n          // 跳过读者UI元素\n          if (node.id === 'rhythm-speed-slider' || node.id === 'rhythm-notification' || node.className === 'rhythm-char') {\n            continue;\n          }\n          this.findTextNodes(node, textNodes);\n        }\n      }\n    },\n    // 更新文本颜色\n    updateTextColors: function () {\n      // 更新所有字符的颜色\n      this.charElements.forEach((span, index) => {\n        // 确定颜色\n        let color;\n        let fontWeight = 'inherit';\n        if (index === this.currentIndex) {\n          color = '#00aa00'; // 当前阅读的字 - 绿色\n          fontWeight = 'bold';\n        } else if (index === this.currentIndex + 1 || index === this.currentIndex + 2) {\n          color = '#aaaaaa'; // 接下来两个字 - 淡灰色\n        } else if (this.readIndices.has(index)) {\n          color = '#ffffff'; // 已读字符 - 白色（表示已读）\n        } else {\n          color = 'rgba(160, 160, 160, 0.25)'; // 未读字符 - 非常淡的灰色（可见但不明显）\n        }\n        span.style.color = color;\n        span.style.fontWeight = fontWeight;\n\n        // 确保没有背景\n        span.style.backgroundColor = 'transparent';\n        span.style.background = 'none';\n      });\n    },\n    // 移动到下一个字符\n    moveToNextChar: function () {\n      // 将当前字符标记为已读\n      this.readIndices.add(this.currentIndex);\n\n      // 移动到下一个非空白字符\n      do {\n        this.currentIndex++;\n\n        // 检查是否到达末尾\n        if (this.currentIndex >= this.charElements.length) {\n          console.log(\"【节奏阅读】已到达页尾，尝试翻页\");\n\n          // 尝试点击下一页按钮\n          if (!this.clickNextPageButton()) {\n            // 如果没有找到下一页按钮，完全停止阅读\n            this.stop();\n          }\n          return;\n        }\n      } while (this.currentIndex < this.charElements.length && this.charElements[this.currentIndex] && this.charElements[this.currentIndex].dataset.whitespace === 'true');\n\n      // 更新颜色\n      this.updateTextColors();\n\n      // 滚动到当前字符\n      this.scrollToCurrentChar();\n    },\n    // 滚动到当前字符\n    scrollToCurrentChar: function () {\n      const span = this.charElements[this.currentIndex];\n      if (!span) return;\n      const rect = span.getBoundingClientRect();\n      const contentContainer = document.querySelector('.page-content');\n\n      // 估计行高\n      const lineHeight = parseInt(window.getComputedStyle(span).lineHeight) || Math.max(20, rect.height * 1.5);\n\n      // 确定滚动容器\n      const isContainerScrollable = contentContainer && contentContainer.scrollHeight > contentContainer.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n      if (isContainerScrollable) {\n        // 容器滚动\n        const containerRect = contentContainer.getBoundingClientRect();\n        const relativeTop = rect.top - containerRect.top + contentContainer.scrollTop;\n        const visibleTop = contentContainer.scrollTop;\n        const visibleBottom = visibleTop + contentContainer.clientHeight;\n        if (relativeTop < visibleTop + lineHeight || relativeTop > visibleBottom - lineHeight) {\n          contentContainer.scrollBy({\n            top: lineHeight * 2 * (relativeTop > visibleBottom - lineHeight ? 1 : -1),\n            behavior: 'smooth'\n          });\n        }\n      } else {\n        // 窗口滚动\n        const viewportTop = window.scrollY;\n        const viewportBottom = viewportTop + window.innerHeight;\n        const absoluteTop = rect.top + window.scrollY;\n        if (absoluteTop < viewportTop + lineHeight || absoluteTop > viewportBottom - lineHeight) {\n          window.scrollBy({\n            top: lineHeight * 2 * (absoluteTop > viewportBottom - lineHeight ? 1 : -1),\n            behavior: 'smooth'\n          });\n        }\n      }\n    },\n    // 添加速度滑块\n    addSpeedSlider: function () {\n      let slider = document.getElementById('rhythm-speed-slider');\n      if (slider) slider.remove();\n      const container = document.createElement('div');\n      container.id = 'rhythm-speed-slider';\n      container.style.position = 'fixed';\n      container.style.top = '70px';\n      container.style.right = '20px';\n      container.style.backgroundColor = 'white';\n      container.style.padding = '10px';\n      container.style.borderRadius = '5px';\n      container.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';\n      container.style.zIndex = '10000';\n      container.style.display = 'flex';\n      container.style.alignItems = 'center';\n      container.style.maxWidth = '300px';\n      const label = document.createElement('label');\n      label.textContent = '速度: ';\n      label.style.marginRight = '8px';\n      container.appendChild(label);\n      const input = document.createElement('input');\n      input.type = 'range';\n      input.min = '50';\n      input.max = '1000';\n      input.step = '50';\n      input.value = this.speed;\n      input.style.width = '120px';\n      const valueDisplay = document.createElement('span');\n      valueDisplay.textContent = `${this.speed}ms`;\n      valueDisplay.style.marginLeft = '8px';\n      valueDisplay.style.minWidth = '60px';\n      const self = this;\n      input.addEventListener('input', function () {\n        const newSpeed = parseInt(this.value);\n        self.speed = newSpeed;\n        valueDisplay.textContent = `${newSpeed}ms`;\n        if (self.intervalId) {\n          clearInterval(self.intervalId);\n          self.intervalId = setInterval(() => self.moveToNextChar(), newSpeed);\n        }\n      });\n      container.appendChild(input);\n      container.appendChild(valueDisplay);\n      document.body.appendChild(container);\n    },\n    // 恢复原始文本\n    restoreOriginalText: function () {\n      // 获取所有已创建的字符span\n      const charSpans = document.querySelectorAll('.rhythm-char');\n\n      // 按父节点分组\n      const parentNodeMap = new Map();\n      charSpans.forEach(span => {\n        const parent = span.parentNode;\n        if (!parent) return;\n        if (!parentNodeMap.has(parent)) {\n          parentNodeMap.set(parent, []);\n        }\n        parentNodeMap.get(parent).push(span);\n      });\n\n      // 对每个父节点，将连续的字符span合并回文本节点\n      parentNodeMap.forEach((spans, parent) => {\n        if (spans.length === 0) return;\n\n        // 排序spans确保顺序正确\n        spans.sort((a, b) => {\n          const indexA = parseInt(a.dataset.rhythmIndex || '0');\n          const indexB = parseInt(b.dataset.rhythmIndex || '0');\n          return indexA - indexB;\n        });\n\n        // 根据连续性分组\n        const groups = [];\n        if (spans.length > 0) {\n          let currentGroup = [spans[0]];\n          for (let i = 1; i < spans.length; i++) {\n            const prevIndex = parseInt(spans[i - 1].dataset.rhythmIndex || '0');\n            const currentIndex = parseInt(spans[i].dataset.rhythmIndex || '0');\n            if (currentIndex === prevIndex + 1 && spans[i].previousSibling === spans[i - 1]) {\n              currentGroup.push(spans[i]);\n            } else {\n              groups.push(currentGroup);\n              currentGroup = [spans[i]];\n            }\n          }\n          groups.push(currentGroup);\n        }\n\n        // 对每个连续组替换为文本节点\n        groups.forEach(group => {\n          if (group.length === 0) return;\n          try {\n            const text = group.map(span => span.textContent).join('');\n            const textNode = document.createTextNode(text);\n\n            // 替换第一个span，然后移除其余的\n            if (group[0].parentNode === parent) {\n              parent.replaceChild(textNode, group[0]);\n              for (let i = 1; i < group.length; i++) {\n                if (group[i].parentNode === parent) {\n                  parent.removeChild(group[i]);\n                }\n              }\n            }\n          } catch (e) {\n            console.error(\"【节奏阅读】恢复文本时出错:\", e);\n          }\n        });\n      });\n\n      // 清除字符元素数组\n      this.charElements = [];\n    },\n    // 启动节奏阅读\n    start: function () {\n      console.log(\"【节奏阅读】启动中...\");\n\n      // 检查是否正在进行页面转换\n      if (this.pageTransitionInProgress) {\n        console.log(\"【节奏阅读】页面转换正在进行中，延迟启动\");\n        setTimeout(() => this.start(), 500);\n        return;\n      }\n\n      // 先停止已有的\n      this.stop(false);\n\n      // 设置为活动状态\n      this.active = true;\n      setStorage('rhythmReadingActive', 'true');\n\n      // 初始化文本\n      if (!this.initializeTextNodes()) {\n        console.error(\"【节奏阅读】无法初始化文本节点\");\n        return;\n      }\n\n      // 重要：始终从头开始阅读\n      this.currentIndex = 0;\n      this.readIndices.clear();\n\n      // 添加速度滑块\n      this.addSpeedSlider();\n\n      // 更新颜色\n      this.updateTextColors();\n\n      // 滚动到开始位置\n      this.scrollToCurrentChar();\n\n      // 设置阅读间隔\n      this.intervalId = setInterval(() => this.moveToNextChar(), this.speed);\n      console.log(\"【节奏阅读】成功启动\");\n\n      // 显示提示\n      this.showNotification(\"节奏阅读模式已启动\");\n\n      // 劫持翻页函数 - 重要步骤\n      this.hijackPageTurningFunctions();\n\n      // 设置页面导航事件监听\n      this.setupPageNavigationListeners();\n    },\n    // 停止节奏阅读\n    stop: function (showNotification = true) {\n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n      }\n      if (this.active) {\n        console.log(\"【节奏阅读】停止中...\");\n        this.active = false;\n\n        // 仅当不是因翻页而停止时才清除活动状态\n        if (!this.pageTransitionInProgress) {\n          setStorage('rhythmReadingActive', 'false');\n        }\n\n        // 恢复原始文本\n        this.restoreOriginalText();\n\n        // 移除速度滑块\n        const slider = document.getElementById('rhythm-speed-slider');\n        if (slider) slider.remove();\n        if (showNotification) {\n          this.showNotification(\"节奏阅读模式已停止\");\n        }\n      }\n    },\n    // 显示通知\n    showNotification: function (message) {\n      let notification = document.getElementById('rhythm-notification');\n      if (notification) notification.remove();\n      notification = document.createElement('div');\n      notification.id = 'rhythm-notification';\n      notification.textContent = message;\n      notification.style.position = 'fixed';\n      notification.style.top = '50%';\n      notification.style.left = '50%';\n      notification.style.transform = 'translate(-50%, -50%)';\n      notification.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';\n      notification.style.color = 'white';\n      notification.style.padding = '15px 25px';\n      notification.style.borderRadius = '5px';\n      notification.style.zIndex = '10001';\n      notification.style.fontSize = '18px';\n      document.body.appendChild(notification);\n\n      // 2秒后自动消失\n      setTimeout(() => {\n        if (notification && notification.parentNode) {\n          notification.parentNode.removeChild(notification);\n        }\n      }, 2000);\n    },\n    // 劫持页面翻转函数 - 改进版本\n    hijackPageTurningFunctions: function () {\n      if (typeof window.changePage === 'function' && !window._originalChangePage) {\n        console.log(\"【节奏阅读】劫持changePage函数\");\n        window._originalChangePage = window.changePage;\n        const self = this;\n        window.changePage = function (page) {\n          console.log(\"【节奏阅读】检测到changePage调用，参数:\", page);\n          const wasActive = self.active;\n          self.pageTransitionInProgress = true;\n          if (wasActive) {\n            self.stop(false);\n            setStorage('rhythmReadingActive', 'true');\n            setStorage('rhythmReadingPending', 'true');\n            document.body.dataset.rhythmReadingActive = 'true';\n          }\n          try {\n            if (page === undefined || page === null) {\n              console.warn('【节奏阅读】安全处理：page参数为空');\n              page = {};\n            }\n            if (typeof page === 'object' && !page.something) {\n              console.log('【节奏阅读】添加空的something对象防止错误');\n              page.something = {\n                active: false\n              };\n            }\n            window._originalChangePage(page);\n          } catch (err) {\n            console.error(\"【节奏阅读】翻页函数执行出错:\", err);\n            self.clickNextPageButton();\n          }\n          setTimeout(() => {\n            self.pageTransitionInProgress = false;\n            if (wasActive && getStorage('rhythmReadingPending') === 'true') {\n              setStorage('rhythmReadingPending', 'false');\n              console.log(\"【节奏阅读】翻页后重新启动\");\n              setTimeout(() => self.start(), 500);\n            }\n          }, 1000);\n        };\n      }\n    },\n    // 设置页面导航事件监听 - 加强版\n    setupPageNavigationListeners: function () {\n      // 查找所有可能的翻页按钮\n      console.log(\"【节奏阅读】正在设置页面导航监听\");\n      const self = this;\n\n      // 使用事件委托来捕获所有可能的点击\n      document.addEventListener('click', function (e) {\n        // 检查点击的元素是否可能是翻页按钮\n        let target = e.target;\n        while (target && target !== document.body) {\n          // 检查是否是翻页元素\n          if (target.tagName === 'BUTTON' || target.tagName === 'A' || target.getAttribute('role') === 'button') {\n            const text = (target.textContent || '').trim().toLowerCase();\n            const ariaLabel = (target.getAttribute('aria-label') || '').toLowerCase();\n\n            // 检查是否是翻页元素\n            if (text.includes('上一页') || text.includes('下一页') || text.includes('prev') || text.includes('next') || ariaLabel.includes('page') || ariaLabel.includes('页') || text === '<' || text === '>' || text === '←' || text === '→') {\n              if (self.active) {\n                console.log(`【节奏阅读】检测到可能的翻页元素点击: ${text || ariaLabel}`);\n\n                // 标记页面转换开始\n                self.pageTransitionInProgress = true;\n\n                // 保存状态到存储\n                setStorage('rhythmReadingActive', 'true');\n                setStorage('rhythmReadingPending', 'true');\n                document.body.dataset.rhythmReadingActive = 'true';\n\n                // 停止当前的阅读\n                self.stop(false);\n\n                // 添加延迟执行的监听器，确保数据在页面加载后恢复\n                setTimeout(() => {\n                  self.pageTransitionInProgress = false;\n                  if (getStorage('rhythmReadingPending') === 'true') {\n                    setStorage('rhythmReadingPending', 'false');\n                    self.start();\n                  }\n                }, 1500);\n              }\n              break;\n            }\n          }\n          target = target.parentNode;\n        }\n      });\n\n      // 监听键盘导航事件\n      document.addEventListener('keydown', function (e) {\n        // 检查是否是翻页快捷键\n        if (['ArrowLeft', 'ArrowRight', 'PageUp', 'PageDown'].includes(e.key)) {\n          if (self.active) {\n            console.log(`【节奏阅读】检测到键盘翻页: ${e.key}`);\n\n            // 保存状态到存储\n            setStorage('rhythmReadingActive', 'true');\n            setStorage('rhythmReadingPending', 'true');\n\n            // 标记页面转换开始\n            self.pageTransitionInProgress = true;\n\n            // 停止当前的阅读\n            self.stop(false);\n\n            // 添加延迟执行的监听器\n            setTimeout(() => {\n              self.pageTransitionInProgress = false;\n              if (getStorage('rhythmReadingPending') === 'true') {\n                setStorage('rhythmReadingPending', 'false');\n                self.start();\n              }\n            }, 1500);\n          }\n        }\n      });\n\n      // 添加popstate监听器捕获浏览器前进/后退导航\n      window.addEventListener('popstate', function () {\n        if (self.active) {\n          console.log(\"【节奏阅读】检测到历史导航事件\");\n\n          // 保存状态\n          setStorage('rhythmReadingActive', 'true');\n          setStorage('rhythmReadingPending', 'true');\n\n          // 标记页面转换开始\n          self.pageTransitionInProgress = true;\n\n          // 停止当前阅读\n          self.stop(false);\n\n          // 延迟恢复\n          setTimeout(() => {\n            self.pageTransitionInProgress = false;\n            if (getStorage('rhythmReadingPending') === 'true') {\n              setStorage('rhythmReadingPending', 'false');\n              self.start();\n            }\n          }, 1500);\n        }\n      });\n    },\n    // 改进的自动翻页函数，更精确地处理状态保存\n    clickNextPageButton: function () {\n      console.log(\"【节奏阅读】尝试查找并点击下一页按钮\");\n\n      // 查找下一页按钮\n      const nextPageSelectors = ['button.next-page', 'button[aria-label=\"下一页\"]', 'a.next-page', 'a[aria-label=\"下一页\"]', '.next-page', '#next-page', 'button.next', 'a.next'];\n      let nextPageButton = null;\n\n      // 尝试通过选择器找到按钮\n      for (const selector of nextPageSelectors) {\n        try {\n          const elements = document.querySelectorAll(selector);\n          for (const el of elements) {\n            if (el.offsetParent !== null) {\n              // 检查元素是否可见\n              console.log(`【节奏阅读】找到下一页按钮: ${selector}`);\n              nextPageButton = el;\n              break;\n            }\n          }\n          if (nextPageButton) break;\n        } catch (e) {\n          // 某些选择器可能不被支持，忽略错误\n        }\n      }\n\n      // 如果没找到，尝试按文本内容查找\n      if (!nextPageButton) {\n        const buttons = document.querySelectorAll('button, a, div[role=\"button\"]');\n        for (const button of buttons) {\n          const text = button.textContent.trim().toLowerCase();\n          if ((text.includes('下一页') || text.includes('next') || text === '>' || text === '→') && button.offsetParent !== null) {\n            console.log(`【节奏阅读】通过文本内容找到下一页按钮: ${text}`);\n            nextPageButton = button;\n            break;\n          }\n        }\n      }\n      if (nextPageButton) {\n        console.log(\"【节奏阅读】模拟点击下一页按钮\");\n\n        // 明确标记页面转换开始\n        this.pageTransitionInProgress = true;\n\n        // 保存状态\n        setStorage('rhythmReadingActive', 'true');\n        setStorage('rhythmReadingPending', 'true');\n        document.body.dataset.rhythmReadingActive = 'true';\n\n        // 恢复原始文本\n        this.restoreOriginalText();\n\n        // 停止计时器\n        if (this.intervalId) {\n          clearInterval(this.intervalId);\n          this.intervalId = null;\n        }\n\n        // 模拟点击\n        nextPageButton.click();\n\n        // 延迟结束页面转换状态\n        setTimeout(() => {\n          this.pageTransitionInProgress = false;\n        }, 1000);\n        return true;\n      } else {\n        console.log(\"【节奏阅读】未找到下一页按钮\");\n        return false;\n      }\n    }\n  };\n\n  // 暴露到全局，以便调试和直接调用\n  window.rhythmReader = rhythmReader;\n\n  // 额外添加一个全局安全函数用于检查节奏阅读状态\n  window.isRhythmActive = function () {\n    return rhythmReader.active || getStorage('rhythmReadingActive') === 'true';\n  };\n\n  // 添加一个停止函数供外部安全调用\n  window.stopRhythmSafely = function () {\n    try {\n      setStorage('rhythmReadingActive', 'false');\n      setStorage('rhythmReadingPending', 'false');\n      if (rhythmReader && typeof rhythmReader.stop === 'function') {\n        rhythmReader.stop();\n      }\n    } catch (e) {\n      console.error(\"停止节奏阅读出错\", e);\n    }\n  };\n\n  // 设置页面加载监听器，确保页面转换后能恢复\n  function setupPageLoadListener() {\n    // DOM内容加载和完全加载的事件监听...\n\n    // 改进的页面变化监测\n    const observer = new MutationObserver(function (mutations) {\n      // 检测到内容变化且有待处理的节奏阅读时\n      if (getStorage('rhythmReadingPending') === 'true') {\n        const contentChanges = mutations.some(m => m.type === 'childList' && m.addedNodes.length > 5); // 使用更高的阈值，确保是真正的内容变化\n\n        if (contentChanges) {\n          console.log(\"【节奏阅读】检测到大量DOM变化，可能是页面切换\");\n\n          // 给页面一点时间稳定下来\n          setTimeout(() => {\n            if (getStorage('rhythmReadingPending') === 'true') {\n              console.log(\"【节奏阅读】页面内容变化后，尝试恢复阅读\");\n              setStorage('rhythmReadingPending', 'false');\n              if (!rhythmReader.pageTransitionInProgress) {\n                rhythmReader.start();\n              }\n            }\n          }, 800);\n        }\n      }\n    });\n\n    // 观察body变化\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  }\n\n  // 设置页面加载监听器\n  setupPageLoadListener();\n\n  // 检查是否需要立即恢复阅读状态\n  if (getStorage('rhythmReadingActive') === 'true') {\n    console.log(\"【节奏阅读】检测到之前的阅读状态，准备恢复\");\n    setStorage('rhythmReadingPending', 'false');\n    setTimeout(function () {\n      rhythmReader.start();\n    }, 800);\n  }\n  console.log(\"【节奏阅读】初始化完成\");\n})();\nconst App = () => {\n  _s();\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n\n  // 实现缺失的函数\n  // 应用深色背景\n  const applyDarkBackground = () => {\n    document.body.classList.add('dark-background');\n\n    // 添加必要的CSS样式\n    if (!document.getElementById('dark-background-style')) {\n      const style = document.createElement('style');\n      style.id = 'dark-background-style';\n      style.textContent = `\n        .dark-background {\n          background-color: #000 !important;\n        }\n        .dark-background .sidebar {\n          background: linear-gradient(145deg, #4834d4, #341f9e) !important;\n        }\n        .dark-background .page-content {\n          background-color: #000 !important;\n        }\n        .dark-background .main-content {\n          background-color: #000 !important;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 恢复正常背景\n  const restoreDarkBackground = () => {\n    document.body.classList.remove('dark-background');\n  };\n\n  // 添加裸眼3D样式\n  const addNakedEye3DStyles = () => {\n    if (!document.getElementById('naked-eye-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'naked-eye-3d-style';\n      style.textContent = `\n        .naked-eye-3d-container {\n          position: relative;\n          perspective: 800px;\n          width: 100%;\n        }\n        \n        .naked-eye-3d-text {\n          display: inline-block;\n          animation: float 3s ease-in-out infinite;\n          text-shadow: 0 0 5px rgba(255,255,255,0.3);\n          padding: 0 4px;\n          color: white;\n          filter: drop-shadow(0 0 5px rgba(120, 220, 255, 0.6));\n        }\n        \n        @keyframes float {\n          0% { transform: translateZ(0px); }\n          50% { transform: translateZ(20px); }\n          100% { transform: translateZ(0px); }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 添加舒适3D样式\n  const addComfortable3DStyles = () => {\n    if (!document.getElementById('comfortable-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'comfortable-3d-style';\n      style.textContent = `\n        .emboss-3d-text {\n          color: #fff;\n          text-shadow: \n            1px 1px 1px rgba(0,0,0,0.5),\n            -1px -1px 1px rgba(255,255,255,0.5);\n          letter-spacing: 1.5px;\n          font-weight: 500;\n        }\n        \n        .float-3d-text {\n          display: inline-block;\n          transform-style: preserve-3d;\n          transform: perspective(500px) translateZ(10px);\n          text-shadow: 0 2px 5px rgba(0,0,0,0.5);\n        }\n        \n        .gradient-3d-text {\n          display: inline-block;\n          background: linear-gradient(to bottom, #fff, #aaa);\n          -webkit-background-clip: text;\n          -webkit-text-fill-color: transparent;\n          text-shadow: 0 2px 4px rgba(0,0,0,0.3);\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 添加闪读样式\n  const addFlashReadingStyles = () => {\n    if (!document.getElementById('flash-reading-style')) {\n      const style = document.createElement('style');\n      style.id = 'flash-reading-style';\n      style.textContent = `\n        .flash-reading-container {\n          position: fixed;\n          top: 50%;\n          left: 50%;\n          transform: translate(-50%, -50%);\n          background-color: rgba(0, 0, 0, 0.9);\n          padding: 40px;\n          border-radius: 15px;\n          box-shadow: 0 0 30px rgba(0, 0, 0, 0.5);\n          z-index: 1000;\n          width: 80%;\n          max-width: 800px;\n          text-align: center;\n        }\n        \n        .flash-reading-display {\n          font-size: 48px;\n          color: white;\n          font-weight: bold;\n          height: 100px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          margin-bottom: 30px;\n        }\n        \n        .flash-reading-controls {\n          display: flex;\n          justify-content: center;\n          gap: 20px;\n          margin-top: 20px;\n        }\n        \n        .flash-reading-btn {\n          padding: 12px 24px;\n          border: none;\n          border-radius: 8px;\n          background-color: #6c5ce7;\n          color: white;\n          font-size: 16px;\n          cursor: pointer;\n          transition: all 0.2s ease;\n        }\n        \n        .flash-reading-btn:hover {\n          background-color: #4834d4;\n          transform: translateY(-2px);\n        }\n        \n        .flash-reading-speed {\n          display: flex;\n          align-items: center;\n          gap: 10px;\n          margin-top: 20px;\n          color: white;\n        }\n        \n        .flash-reading-slider {\n          flex: 1;\n          height: 6px;\n          background: #444;\n          outline: none;\n          border-radius: 3px;\n          appearance: none;\n        }\n        \n        .flash-reading-slider::-webkit-slider-thumb {\n          appearance: none;\n          width: 20px;\n          height: 20px;\n          background: #6c5ce7;\n          border-radius: 50%;\n          cursor: pointer;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 初始化闪读模式\n  const initializeFlashReading = () => {\n    if (window.flashReader) {\n      window.flashReader.cleanup();\n    }\n\n    // 创建闪读容器\n    const container = document.createElement('div');\n    container.className = 'flash-reading-container';\n\n    // 创建显示区域\n    const display = document.createElement('div');\n    display.className = 'flash-reading-display';\n    display.id = 'flash-reading-display';\n    display.textContent = '准备开始';\n\n    // 创建控制区域\n    const controls = document.createElement('div');\n    controls.className = 'flash-reading-controls';\n\n    // 开始按钮\n    const startBtn = document.createElement('button');\n    startBtn.className = 'flash-reading-btn';\n    startBtn.id = 'flash-reading-start';\n    startBtn.textContent = '开始';\n\n    // 停止按钮\n    const stopBtn = document.createElement('button');\n    stopBtn.className = 'flash-reading-btn';\n    stopBtn.id = 'flash-reading-stop';\n    stopBtn.textContent = '停止';\n\n    // 添加速度控制\n    const speedControl = document.createElement('div');\n    speedControl.className = 'flash-reading-speed';\n    const speedLabel = document.createElement('span');\n    speedLabel.textContent = '速度：';\n    const speedSlider = document.createElement('input');\n    speedSlider.type = 'range';\n    speedSlider.min = '50';\n    speedSlider.max = '500';\n    speedSlider.value = '200';\n    speedSlider.className = 'flash-reading-slider';\n    speedSlider.id = 'flash-reading-speed';\n    const speedValue = document.createElement('span');\n    speedValue.id = 'flash-reading-speed-value';\n    speedValue.textContent = '200 wpm';\n    speedControl.appendChild(speedLabel);\n    speedControl.appendChild(speedSlider);\n    speedControl.appendChild(speedValue);\n\n    // 添加到DOM\n    controls.appendChild(startBtn);\n    controls.appendChild(stopBtn);\n    container.appendChild(display);\n    container.appendChild(speedControl);\n    container.appendChild(controls);\n    document.body.appendChild(container);\n\n    // 获取文本内容\n    const contentElement = document.querySelector('.page-content');\n    const text = contentElement ? contentElement.textContent : '';\n\n    // 分词\n    const words = text.trim().split(/\\s+/);\n\n    // 闪读控制器\n    window.flashReader = {\n      words,\n      currentIndex: 0,\n      interval: null,\n      speed: 200,\n      isPlaying: false,\n      start() {\n        if (this.interval) clearInterval(this.interval);\n        this.isPlaying = true;\n        const display = document.getElementById('flash-reading-display');\n        const speedValue = parseInt(document.getElementById('flash-reading-speed').value);\n        this.speed = speedValue;\n        this.interval = setInterval(() => {\n          if (this.currentIndex < this.words.length) {\n            if (display) display.textContent = this.words[this.currentIndex];\n            this.currentIndex++;\n          } else {\n            this.stop();\n            if (display) display.textContent = '已结束';\n          }\n        }, 60000 / this.speed); // 转换为毫秒\n      },\n      stop() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n      },\n      cleanup() {\n        this.stop();\n        const container = document.querySelector('.flash-reading-container');\n        if (container) container.remove();\n      }\n    };\n\n    // 添加事件监听器\n    document.getElementById('flash-reading-start').addEventListener('click', () => {\n      window.flashReader.start();\n    });\n    document.getElementById('flash-reading-stop').addEventListener('click', () => {\n      window.flashReader.stop();\n    });\n    document.getElementById('flash-reading-speed').addEventListener('input', e => {\n      const value = e.target.value;\n      document.getElementById('flash-reading-speed-value').textContent = `${value} wpm`;\n      if (window.flashReader.isPlaying) {\n        window.flashReader.stop();\n        window.flashReader.speed = parseInt(value);\n        window.flashReader.start();\n      } else {\n        window.flashReader.speed = parseInt(value);\n      }\n    });\n  };\n\n  // 创建闪读内容\n  const createFlashReadingContent = text => {\n    return `<div class=\"flash-reading-content\">\n      <p>${text}</p>\n    </div>`;\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 格式化文本用于鼠标跟随\n  const formatTextForMouseFollow = text => {\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个单词添加span，以便于添加高亮效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"follow-word\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\" data-follow=\"true\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用静态高亮\n  const applyStaticHighlight = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为单词随机添加颜色高亮\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      let lastColor = null;\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n          return;\n        }\n\n        // 随机决定是否高亮和使用哪种颜色\n        if (Math.random() < 0.7) {\n          let color;\n          if (lastColor === 'red') {\n            color = 'blue';\n          } else if (lastColor === 'blue') {\n            color = 'red';\n          } else {\n            color = Math.random() < 0.5 ? 'red' : 'blue';\n          }\n          lastColor = color;\n          processedParagraph += `<span class=\"highlight-word ${color}\">${word}</span>`;\n        } else {\n          processedParagraph += word;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用裸眼3D效果\n  const applyNakedEye3dEffect = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content naked-eye-3d-container\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个词添加3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"naked-eye-3d-text\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用舒适3D效果\n  const applyComfortable3dEffect = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个词随机应用不同的3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          processedParagraph += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 初始化裸眼3D\n  const initializeNakedEye3D = () => {\n    // 为裸眼3D文本添加动画\n    const textElements = document.querySelectorAll('.naked-eye-3d-text');\n    textElements.forEach((element, index) => {\n      // 添加随机延迟，使动画错开\n      const delay = Math.random() * 2;\n      element.style.animationDelay = `${delay}s`;\n    });\n  };\n\n  // 初始化节奏阅读\n  const initializeRhythmReading = () => {\n    if (window.rhythmReader && typeof window.rhythmReader.initializeTextNodes === 'function') {\n      window.rhythmReader.initializeTextNodes();\n    }\n  };\n\n  // 启动节奏阅读\n  const startRhythmReading = () => {\n    if (window.rhythmReader && typeof window.rhythmReader.start === 'function') {\n      window.rhythmReader.start();\n    }\n  };\n\n  // 添加鼠标跟随监听器\n  const addMouseFollowListeners = () => {\n    const contentArea = document.querySelector('.mouse-follow-content');\n    if (!contentArea) return;\n\n    // 监听鼠标移动事件\n    const mouseMoveHandler = e => {\n      // 清除所有当前高亮\n      document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n\n      // 创建新的高亮线\n      const highlight = document.createElement('div');\n      highlight.className = 'line-highlight';\n      highlight.style.cssText = `\n        position: absolute;\n        height: 30px;\n        background-color: rgba(255, 255, 255, 0.1);\n        left: 0;\n        right: 0;\n        top: ${e.clientY - contentArea.getBoundingClientRect().top - 15}px;\n        z-index: 1;\n        pointer-events: none;\n      `;\n      contentArea.appendChild(highlight);\n\n      // 高亮当前行下的单词\n      const words = contentArea.querySelectorAll('.follow-word');\n      words.forEach(word => {\n        const rect = word.getBoundingClientRect();\n        const wordTop = rect.top;\n        const wordBottom = rect.bottom;\n\n        // 如果单词在鼠标高亮线范围内\n        if (wordTop <= e.clientY && wordBottom >= e.clientY) {\n          word.style.color = '#ffffff';\n          word.style.fontWeight = 'bold';\n        } else {\n          word.style.color = '';\n          word.style.fontWeight = '';\n        }\n      });\n    };\n\n    // 清除高亮的处理函数\n    const mouseLeaveHandler = () => {\n      document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n      const words = contentArea.querySelectorAll('.follow-word');\n      words.forEach(word => {\n        word.style.color = '';\n        word.style.fontWeight = '';\n      });\n    };\n\n    // 存储事件处理函数引用，便于后续移除\n    window.eventTracker = window.eventTracker || {\n      mouseFollowHandlers: []\n    };\n    window.eventTracker.mouseFollowHandlers.push({\n      element: contentArea,\n      event: 'mousemove',\n      handler: mouseMoveHandler\n    }, {\n      element: contentArea,\n      event: 'mouseleave',\n      handler: mouseLeaveHandler\n    });\n    contentArea.addEventListener('mousemove', mouseMoveHandler);\n    contentArea.addEventListener('mouseleave', mouseLeaveHandler);\n  };\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n  }, []);\n\n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async file => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n\n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n\n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n\n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({\n        scale: 1.0\n      });\n\n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async textContent => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n\n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n\n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n\n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    const lines = [...lineMap.values()];\n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    return hasTocKeywords || hasPageNumberPatterns || shortLineRatio > 0.7 && numberLineRatio > 0.3;\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n\n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n\n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n\n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n\n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = text => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    return result;\n  };\n\n  // 处理内容页面 - 保留原始段落结构\n  const processContentPage = async (page, mode) => {\n    try {\n      // 获取文本内容并保留更多布局信息\n      const textContent = await page.getTextContent({\n        normalizeWhitespace: false,\n        disableCombineTextItems: false\n      });\n\n      // 按行组织文本项\n      const textItemsByLine = organizeTextItemsByLine(textContent.items);\n\n      // 识别段落\n      const paragraphs = identifyParagraphs(textItemsByLine);\n\n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch (mode) {\n        case 'normal':\n          processedContent = formatParagraphsToHtml(paragraphs);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlightToParagraphs(paragraphs);\n          break;\n        case 'follow-mouse':\n          processedContent = formatParagraphsForMouseFollow(paragraphs);\n          break;\n        case 'rhythm':\n          processedContent = formatParagraphsToHtml(paragraphs);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToParagraphs(paragraphs);\n          break;\n        case 'flash-reading':\n          processedContent = createFlashReadingContentFromParagraphs(paragraphs);\n          break;\n        default:\n          processedContent = formatParagraphsToHtml(paragraphs);\n      }\n      setContent(processedContent);\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 按行组织文本项\n  const organizeTextItemsByLine = textItems => {\n    // 按y坐标分组，将相同y坐标（或非常接近）的文本项视为同一行\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      // 四舍五入y坐标以进行分组，考虑1px的误差\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n\n    // 对每一行的文本项按x坐标排序\n    const lines = Array.from(lineMap.entries()).sort((a, b) => b[0] - a[0]) // 按y坐标从上到下排序\n    .map(([y, items]) => {\n      return items.sort((a, b) => a.transform[4] - b.transform[4]); // 按x坐标从左到右排序\n    });\n    return lines;\n  };\n\n  // 识别段落\n  const identifyParagraphs = textItemsByLine => {\n    const paragraphs = [];\n    let currentParagraph = [];\n\n    // 估计标准行间距\n    let lineSpacings = [];\n    for (let i = 0; i < textItemsByLine.length - 1; i++) {\n      if (textItemsByLine[i].length > 0 && textItemsByLine[i + 1].length > 0) {\n        const currentLineY = textItemsByLine[i][0].transform[5];\n        const nextLineY = textItemsByLine[i + 1][0].transform[5];\n        lineSpacings.push(Math.abs(currentLineY - nextLineY));\n      }\n    }\n\n    // 计算行间距的中位数作为标准行间距\n    const standardLineSpacing = getMedian(lineSpacings) || 12; // 默认12px\n\n    // 检测段落间隔的阈值（通常是1.5倍标准行间距）\n    const paragraphSpacingThreshold = standardLineSpacing * 1.5;\n    for (let i = 0; i < textItemsByLine.length; i++) {\n      const currentLine = textItemsByLine[i];\n      if (currentLine.length === 0) continue;\n\n      // 将当前行添加到当前段落\n      currentParagraph.push(currentLine);\n\n      // 检查是否为段落结束\n      const isLastLine = i === textItemsByLine.length - 1;\n\n      // 检查行间距\n      let hasLargeParagraphSpacing = false;\n      if (!isLastLine && textItemsByLine[i + 1].length > 0) {\n        hasLargeParagraphSpacing = Math.abs(currentLine[0].transform[5] - textItemsByLine[i + 1][0].transform[5]) > paragraphSpacingThreshold;\n      }\n\n      // 检查首行缩进（通常表示新段落）\n      let hasNextLineIndent = false;\n      if (!isLastLine && textItemsByLine[i + 1].length > 0 && currentLine.length > 0) {\n        hasNextLineIndent = textItemsByLine[i + 1][0].transform[4] > currentLine[0].transform[4] + 10;\n      }\n\n      // 检查当前行是否很短（可能是段落结束）\n      const isShortLine = currentLine.map(item => item.str).join('').trim().length < 50;\n\n      // 检查当前行结束标记\n      const endsWithPunctuation = /[.!?。！？]$/.test(currentLine.map(item => item.str).join('').trim());\n      if (isLastLine || hasLargeParagraphSpacing || endsWithPunctuation && (hasNextLineIndent || isShortLine)) {\n        // 当前段落结束\n        const paragraphText = currentParagraph.map(line => line.map(item => item.str).join('')).join(' ');\n        paragraphs.push(paragraphText.trim());\n        currentParagraph = [];\n      }\n    }\n\n    // 处理可能的剩余段落\n    if (currentParagraph.length > 0) {\n      const paragraphText = currentParagraph.map(line => line.map(item => item.str).join('')).join(' ');\n      paragraphs.push(paragraphText.trim());\n    }\n    return paragraphs;\n  };\n\n  // 计算中位数的辅助函数\n  const getMedian = values => {\n    if (values.length === 0) return 0;\n    const sorted = [...values].sort((a, b) => a - b);\n    const mid = Math.floor(sorted.length / 2);\n    return sorted.length % 2 === 0 ? (sorted[mid - 1] + sorted[mid]) / 2 : sorted[mid];\n  };\n\n  // 格式化段落为HTML\n  const formatParagraphsToHtml = paragraphs => {\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为段落应用静态高亮\n  const applyStaticHighlightToParagraphs = paragraphs => {\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为单词随机添加颜色高亮\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      let lastColor = null;\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n          return;\n        }\n        if (Math.random() < 0.7) {\n          let color;\n          if (lastColor === 'red') {\n            color = 'blue';\n          } else if (lastColor === 'blue') {\n            color = 'red';\n          } else {\n            color = Math.random() < 0.5 ? 'red' : 'blue';\n          }\n          lastColor = color;\n          processedParagraph += `<span class=\"highlight-word ${color}\">${word}</span>`;\n        } else {\n          processedParagraph += word;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为鼠标跟随模式格式化段落\n  const formatParagraphsForMouseFollow = paragraphs => {\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个单词添加span，以便于添加高亮效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"follow-word\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\" data-follow=\"true\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为舒适3D模式格式化段落\n  const applyComfortable3dEffectToParagraphs = paragraphs => {\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个词随机应用不同的3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          processedParagraph += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为闪读模式创建内容\n  const createFlashReadingContentFromParagraphs = paragraphs => {\n    const text = paragraphs.join(\"\\n\\n\");\n    return `<div class=\"flash-reading-content\">\n      <p>${text}</p>\n    </div>`;\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async file => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain') {\n      handleTxtFile(file);\n    } else {\n      alert('请上传PDF或TXT文件');\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = container => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n\n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n\n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n\n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width / 2,\n            // 水平中心\n            y: rect.bottom,\n            // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n\n    // 过滤无效位置并排序\n    return positions.filter(p => p.char.trim() !== '').sort((a, b) => {\n      // 先按行排序，同行按列排序\n      const yDiff = a.y - b.y;\n      if (Math.abs(yDiff) > 5) {\n        // 5px阈值判断是否同一行\n        return yDiff;\n      }\n      return a.x - b.x;\n    });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n\n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - containerVisibleHeight / 2;\n\n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - window.innerHeight / 2;\n\n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n\n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n\n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length ||\n      // 已到末尾\n      positions[nextIndex].char.trim() === '' ||\n      // 下一个是空白\n      positions[nextIndex].y > charPosition.y + 5) {\n        // 下一个在新行\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n\n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n\n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || current.y > prev.y + 5) {\n        // 有明显换行\n        break;\n      }\n      start--;\n    }\n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n\n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n\n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (window.autoReader.charPositions.length === 0) {\n      if (window.currentPage < window.totalPages) {\n        window.changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 重置索引到开头\n    window.autoReader.currentIndex = 0;\n\n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n\n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n\n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none';\n      highlight.style.zIndex = '998';\n      contentContainer.appendChild(highlight);\n    }\n\n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n\n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20;\n\n    // 尝试获取实际行高\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(window.autoReader.charPositions[i].y - window.autoReader.charPositions[i - 1].y);\n        if (yDiff > 5) {\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n\n    // 记录上次滚动的位置\n    let lastScrolledY = -1;\n    const scrollSafeZone = lineHeight * 2.5;\n\n    // 设置字符大小的估计值\n    let charWidth = 20;\n    let charHeight = lineHeight * 0.8;\n\n    // 尝试估计字符宽度\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        if (window.autoReader.charPositions[i].x !== window.autoReader.charPositions[i - 1].x) {\n          const xDiff = Math.abs(window.autoReader.charPositions[i].x - window.autoReader.charPositions[i - 1].x);\n          if (xDiff > 0 && xDiff < 50) {\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    window.autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (window.autoReader.currentIndex < window.autoReader.charPositions.length && ((_window$autoReader$ch = window.autoReader.charPositions[window.autoReader.currentIndex]) === null || _window$autoReader$ch === void 0 ? void 0 : _window$autoReader$ch.char.trim()) === '') {\n        var _window$autoReader$ch;\n        window.autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (window.autoReader.currentIndex >= window.autoReader.charPositions.length) {\n        if (window.currentPage < window.totalPages) {\n          window.changePage(1);\n          clearInterval(window.autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n      const pos = window.autoReader.charPositions[window.autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      if (cursor && highlight) {\n        const contentRect = contentContainer.getBoundingClientRect();\n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        highlight.style.left = `${relativeX - charWidth / 2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n\n        // 滚动处理\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          if (isContainerScrollable) {\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = relativeY;\n            }\n          } else {\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      window.autoReader.currentIndex++;\n    }, window.autoReader.speed);\n\n    // 在停止自动阅读时清除所有高亮\n    window.autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n\n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n\n      // 调用清理函数\n      if (window.autoReader.cleanup) {\n        window.autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n\n    // 重置翻页状态\n    window.autoReader.isPageChanging = false;\n\n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n\n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n\n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n\n    // 收集字符位置\n    window.autoReader.charPositions = getAllCharacterPositions(content);\n\n    // 如果当前页没有内容，尝试翻页\n    if (window.autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !window.autoReader.isPageChanging) {\n        window.autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async e => {\n    const newMode = e.target.value;\n    const prevMode = readingMode;\n\n    // 如果是从裸眼3D模式或舒适3D模式切换出来，恢复背景色\n    if (prevMode === 'comfortable-3d') {\n      restoreDarkBackground();\n    }\n\n    // 停止当前可能正在运行的节奏阅读\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    if (window.flashReader && window.flashReader.cleanup) {\n      window.flashReader.cleanup();\n    }\n\n    // 清理旧模式\n    cleanupDOM();\n\n    // 更新状态\n    setReadingMode(newMode);\n\n    // 应用新模式\n    if (pdfDocument && currentPage > 0) {\n      try {\n        const page = await pdfDocument.getPage(currentPage);\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        let processedContent = '';\n\n        // 应用对应模式的文本处理\n        switch (newMode) {\n          case 'follow-mouse':\n            processedContent = formatTextForMouseFollow(extractedText);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlight(extractedText);\n            break;\n          case 'rhythm':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          case 'comfortable-3d':\n            processedContent = applyComfortable3dEffect(extractedText);\n            setTimeout(applyDarkBackground, 50);\n            break;\n          case 'flash-reading':\n            addFlashReadingStyles();\n            processedContent = createFlashReadingContent(extractedText);\n            setTimeout(applyDarkBackground, 50);\n            setTimeout(initializeFlashReading, 100);\n            break;\n          default:\n            processedContent = formatTextToHtml(extractedText);\n        }\n        const contentArea = document.querySelector('.page-content');\n        if (contentArea) {\n          contentArea.textContent = '';\n          contentArea.innerHTML = processedContent;\n\n          // 滚动到页面顶部\n          window.scrollTo(0, 0);\n          if (contentArea.scrollTo) {\n            contentArea.scrollTo(0, 0);\n          }\n\n          // 重新启动对应的阅读模式\n          if (readingMode === 'follow-mouse') {\n            initializeMouseFollow();\n          } else if (readingMode === 'rhythm' && prevMode === 'rhythm') {\n            setTimeout(() => {\n              initializeRhythmReading();\n              startRhythmReading();\n            }, 100);\n          } else if (newMode === 'comfortable-3d') {\n            setTimeout(() => {\n              applyDarkBackground();\n            }, 50);\n          }\n        }\n      } catch (error) {\n        console.error('应用新阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 首先确保移除鼠标跟随监听器\n    removeMouseFollowListeners();\n\n    // 清理节奏阅读器\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n\n    // 清理闪读器\n    if (window.flashReader) {\n      window.flashReader.cleanup();\n    }\n\n    // 清理舒适3D效果\n    const comfortable3DElements = document.querySelectorAll('.emboss-3d-text, .float-3d-text, .gradient-3d-text');\n    comfortable3DElements.forEach(el => el.remove());\n\n    // 清理闪读模式元素\n    const flashReadingElements = document.querySelectorAll('.flash-reading-container, .flash-reading-display, .flash-reading-controls');\n    flashReadingElements.forEach(el => el.remove());\n\n    // 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll('.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line, .rhythm-char');\n    highlights.forEach(el => {\n      if (el.parentNode) el.parentNode.removeChild(el);\n    });\n\n    // 彻底替换内容区域以移除所有事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 深度克隆内容，但不克隆事件监听器\n      const contentHTML = contentArea.innerHTML;\n      const newContentArea = contentArea.cloneNode(false);\n      newContentArea.innerHTML = contentHTML;\n      if (contentArea.parentNode) {\n        contentArea.parentNode.replaceChild(newContentArea, contentArea);\n      }\n    }\n\n    // 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 移除所有特殊标记和样式\n      paragraph.removeAttribute('data-follow');\n      paragraph.removeAttribute('style');\n\n      // 清理特殊span标签\n      paragraph.innerHTML = paragraph.innerHTML.replace(/<span class=\"text-line\"[^>]*>/g, '').replace(/<span class=\"rhythm-char\"[^>]*>/g, '').replace(/<span class=\"line-highlight[^\"]*\"[^>]*>/g, '').replace(/<span class=\"mouse-highlight[^\"]*\"[^>]*>/g, '').replace(/<\\/span>/g, '');\n    });\n\n    // 移除特殊UI元素\n    const elementsToRemove = ['rhythm-speed-slider', 'rhythm-notification'];\n    elementsToRemove.forEach(id => {\n      const element = document.getElementById(id);\n      if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    });\n\n    // 移除暗色背景\n    document.body.classList.remove('dark-background');\n  };\n  const handleAutoScroll = () => {\n    window.autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = e => {\n    if (readingMode !== 'follow-mouse') return;\n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    const rect = contentArea.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    clearAllHighlights();\n    const paragraphs = contentArea.querySelectorAll('p');\n    paragraphs.forEach(paragraph => {\n      const paragraphRect = paragraph.getBoundingClientRect();\n      const paragraphX = paragraphRect.left - rect.left;\n      const paragraphY = paragraphRect.top - rect.top;\n      if (y >= paragraphY && y <= paragraphY + paragraphRect.height) {\n        const words = paragraph.querySelectorAll('span');\n        words.forEach(word => {\n          const wordRect = word.getBoundingClientRect();\n          const wordX = wordRect.left - rect.left;\n          if (x >= wordX && x <= wordX + wordRect.width) {\n            word.classList.add('highlight');\n          }\n        });\n      }\n    });\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 专门用于移除鼠标跟随事件的函数\n  const removeMouseFollowListeners = () => {\n    // 移除记录的所有监听器\n    if (window.eventTracker && window.eventTracker.mouseFollowHandlers) {\n      window.eventTracker.mouseFollowHandlers.forEach(({\n        element,\n        event,\n        handler\n      }) => {\n        if (element && element.removeEventListener) {\n          element.removeEventListener(event, handler);\n        }\n      });\n      window.eventTracker.mouseFollowHandlers = [];\n    }\n\n    // 为安全起见，尝试从document和内容区域移除通用处理函数\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    }\n    document.removeEventListener('mousemove', handleMouseMove);\n\n    // 清除所有当前高亮\n    clearAllHighlights();\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n    addComfortable3DStyles();\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 新增延迟补偿\n    setTimeout(() => {\n      addMouseFollowListeners();\n\n      // 强制触发重排\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        void contentArea.offsetHeight;\n\n        // 模拟鼠标移动事件\n        const fakeEvent = new MouseEvent('mousemove', {\n          clientX: window.innerWidth / 2,\n          clientY: window.innerHeight / 2,\n          bubbles: true\n        });\n        contentArea.dispatchEvent(fakeEvent);\n      }\n    }, 50);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = delta => {\n    window.autoReader.speed = Math.max(100, window.autoReader.speed + delta);\n    if (window.autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async delta => {\n    const newPage = currentPage + delta;\n    if (newPage < 1 || newPage > totalPages) return;\n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n    const wasFlashReading = readingMode === 'flash-reading' && window.flashReader && window.flashReader.isPlaying;\n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    if (wasFlashReading && window.flashReader) {\n      window.flashReader.cleanup();\n    }\n\n    // 更新页码\n    setCurrentPage(newPage);\n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 按当前阅读模式处理内容\n      let processedContent = '';\n      switch (readingMode) {\n        case 'follow-mouse':\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'rhythm':\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffect(extractedText);\n          break;\n        case 'flash-reading':\n          processedContent = createFlashReadingContent(extractedText);\n          setTimeout(() => {\n            initializeFlashReading();\n            if (wasFlashReading) {\n              const startBtn = document.getElementById('flash-reading-start');\n              if (startBtn) startBtn.click();\n            }\n          }, 100);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n\n      // 更新页面内容\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        contentArea.textContent = '';\n        contentArea.innerHTML = processedContent;\n\n        // 滚动到页面顶部\n        window.scrollTo(0, 0);\n        if (contentArea.scrollTo) {\n          contentArea.scrollTo(0, 0);\n        }\n\n        // 重新启动对应的阅读模式\n        if (readingMode === 'follow-mouse') {\n          initializeMouseFollow();\n        } else if (readingMode === 'rhythm' && wasRhythmReading) {\n          setTimeout(() => {\n            initializeRhythmReading();\n            startRhythmReading();\n          }, 100);\n        }\n      }\n    } catch (error) {\n      console.error('页面切换错误:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2768,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2767,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reading-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u9605\\u8BFB\\u6A21\\u5F0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2772,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"reading-mode-select\",\n          value: readingMode,\n          onChange: handleReadingModeChange,\n          className: \"mode-select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"normal\",\n            children: \"\\u666E\\u901A\\u6A21\\u5F0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2779,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"static\",\n            children: \"\\u9759\\u6001\\u9AD8\\u4EAE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2780,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"follow-mouse\",\n            children: \"\\u9F20\\u6807\\u8DDF\\u968F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2781,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"rhythm\",\n            children: \"\\u8282\\u594F\\u9605\\u8BFB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2782,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"flash-reading\",\n            children: \"\\u95EA\\u8BFB\\u6A21\\u5F0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2783,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"comfortable-3d\",\n            children: \"\\u8212\\u90023D\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2784,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2773,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2771,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".pdf,.txt,.md\",\n          hidden: true,\n          id: \"file-upload\",\n          onChange: handleFileUpload,\n          ref: fileRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2789,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"upload-btn\",\n          onClick: () => fileRef.current.click(),\n          children: \"\\u4E0A\\u4F20\\u6587\\u4EF6 (.pdf/.txt/.md)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2797,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2788,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2766,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toolbar\",\n        children: [fileName && /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"filename\",\n          children: fileName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2808,\n          columnNumber: 24\n        }, this), totalPages > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pagination\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => changePage(-1),\n            disabled: currentPage <= 1,\n            className: \"page-btn\",\n            children: \"\\u4E0A\\u4E00\\u9875\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2811,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"page-info\",\n            children: [\"\\u7B2C \", currentPage, \" / \", totalPages, \" \\u9875\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2818,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => changePage(1),\n            disabled: currentPage >= totalPages,\n            className: \"page-btn\",\n            children: \"\\u4E0B\\u4E00\\u9875\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2821,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2810,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2807,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-content\",\n        ref: readerContainerRef,\n        dangerouslySetInnerHTML: {\n          __html: content\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2832,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2806,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 2765,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"hN5MIR5nO8HlAOV4fHPYVU54OrE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","pdfjsLib","pdfjsViewer","marked","pdfjs","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","window","currentPage","totalPages","changePage","eventTracker","mouseFollowHandlers","autoReader","charPositions","intervalId","currentIndex","speed","pageContainer","isScrolling","isPageChanging","cleanup","rhythmReaderGlobal","active","console","log","rhythmReadingInitialized","setStorage","key","value","sessionStorage","setItem","localStorage","e","error","getStorage","getItem","rhythmReader","readIndices","Set","charElements","pageTransitionInProgress","initializeTextNodes","contentContainer","document","querySelector","textNodes","findTextNodes","length","showNotification","forEach","node","text","nodeValue","trim","fragment","createDocumentFragment","i","char","span","createElement","textContent","className","dataset","rhythmIndex","String","whitespace","style","display","margin","padding","border","backgroundColor","appendChild","push","parentNode","replaceChild","element","childNodes","nodeType","Node","TEXT_NODE","ELEMENT_NODE","id","updateTextColors","index","color","fontWeight","has","background","moveToNextChar","add","clickNextPageButton","stop","scrollToCurrentChar","rect","getBoundingClientRect","lineHeight","parseInt","getComputedStyle","Math","max","height","isContainerScrollable","scrollHeight","clientHeight","includes","overflowY","containerRect","relativeTop","top","scrollTop","visibleTop","visibleBottom","scrollBy","behavior","viewportTop","scrollY","viewportBottom","innerHeight","absoluteTop","addSpeedSlider","slider","getElementById","remove","container","position","right","borderRadius","boxShadow","zIndex","alignItems","maxWidth","label","marginRight","input","type","min","step","width","valueDisplay","marginLeft","minWidth","self","addEventListener","newSpeed","clearInterval","setInterval","body","restoreOriginalText","charSpans","querySelectorAll","parentNodeMap","Map","parent","set","get","spans","sort","a","b","indexA","indexB","groups","currentGroup","prevIndex","previousSibling","group","map","join","textNode","createTextNode","removeChild","start","setTimeout","clear","hijackPageTurningFunctions","setupPageNavigationListeners","message","notification","left","transform","fontSize","_originalChangePage","page","wasActive","rhythmReadingActive","undefined","warn","something","err","target","tagName","getAttribute","toLowerCase","ariaLabel","nextPageSelectors","nextPageButton","selector","elements","el","offsetParent","buttons","button","click","isRhythmActive","stopRhythmSafely","setupPageLoadListener","observer","MutationObserver","mutations","contentChanges","some","m","addedNodes","observe","childList","subtree","App","_s","pages","setPages","setCurrentPage","setTotalPages","fileName","setFileName","loading","setLoading","fileRef","file","setFile","pdfInstance","setPdfInstance","extractedTextPages","setExtractedTextPages","readingMode","setReadingMode","posMode","setPosMode","markdownContent","setMarkdownContent","readerContainerRef","content","setContent","pdfDocument","setPdfDocument","applyDarkBackground","classList","head","restoreDarkBackground","addNakedEye3DStyles","addComfortable3DStyles","addFlashReadingStyles","initializeFlashReading","flashReader","controls","startBtn","stopBtn","speedControl","speedLabel","speedSlider","speedValue","contentElement","words","split","interval","isPlaying","createFlashReadingContent","formatTextToHtml","paragraphs","html","paragraph","formatTextForMouseFollow","processedParagraph","word","applyStaticHighlight","lastColor","random","applyNakedEye3dEffect","applyComfortable3dEffect","effectTypes","effectClass","floor","initializeNakedEye3D","textElements","delay","animationDelay","initializeRhythmReading","startRhythmReading","addMouseFollowListeners","contentArea","mouseMoveHandler","highlight","cssText","clientY","wordTop","wordBottom","bottom","mouseLeaveHandler","event","handler","initializeMouseFollow","handlePdfFile","fileURL","URL","createObjectURL","loadingTask","getDocument","pdf","promise","numPages","extractAndProcessPage","alert","pageNum","getPage","getTextContent","viewport","getViewport","scale","isTableOfContents","detectIfTocPage","processTocPage","processContentPage","textItems","items","fullText","item","str","hasTocKeywords","test","hasPageNumberPatterns","shortLinesCount","linesWithNumbersCount","lineMap","yKey","round","lines","values","line","lineText","shortLineRatio","numberLineRatio","htmlContent","x","y","sqrt","fontName","spacedText","getTextNodeAtPosition","nodes","range","createRange","selectNodeContents","rects","getClientRects","j","found","processTextWithHighlight","result","mode","normalizeWhitespace","disableCombineTextItems","textItemsByLine","organizeTextItemsByLine","identifyParagraphs","processedContent","formatParagraphsToHtml","applyStaticHighlightToParagraphs","formatParagraphsForMouseFollow","applyComfortable3dEffectToParagraphs","createFlashReadingContentFromParagraphs","Array","from","entries","currentParagraph","lineSpacings","currentLineY","nextLineY","abs","standardLineSpacing","getMedian","paragraphSpacingThreshold","currentLine","isLastLine","hasLargeParagraphSpacing","hasNextLineIndent","isShortLine","endsWithPunctuation","paragraphText","sorted","mid","handleTxtFile","pageTexts","fontFamily","handleFileUpload","files","getAllCharacterPositions","walker","createTreeWalker","NodeFilter","SHOW_TEXT","positions","nextNode","currentNode","setStart","setEnd","filter","p","yDiff","scrollElementToCenter","elementY","targetScrollTop","containerVisibleHeight","scrollTo","absoluteElementY","createReaderCursor","cursor","isSentenceEnd","charPosition","sentenceEndMarks","nextIndex","findSentenceStart","prev","current","isInVisibleArea","threshold","topThreshold","bottomThreshold","startAutoReader","pointerEvents","lastScrolledY","scrollSafeZone","charWidth","charHeight","xDiff","_window$autoReader$ch","stopAutoReader","pos","contentRect","relativeX","relativeY","isInRecentlyScrolledArea","needsScroll","scrollAmount","absoluteY","initializeAutoReader","handleReadingModeChange","newMode","prevMode","cleanupDOM","extractedText","replace","innerHTML","removeMouseFollowListeners","comfortable3DElements","flashReadingElements","highlights","contentHTML","newContentArea","cloneNode","removeAttribute","elementsToRemove","handleAutoScroll","updateCursorPosition","force","handleMouseMove","clientX","clearAllHighlights","paragraphRect","paragraphX","paragraphY","wordRect","wordX","removeEventListener","addAutoReaderStyles","offsetHeight","fakeEvent","MouseEvent","innerWidth","bubbles","dispatchEvent","adjustSpeed","delta","newPage","wasRhythmReading","wasFlashReading","children","_jsxFileName","lineNumber","columnNumber","onChange","accept","hidden","ref","onClick","disabled","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["D:/adhd-read-helper/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 添加全局事件跟踪对象\nwindow.eventTracker = window.eventTracker || {\n  mouseFollowHandlers: []\n};\n\n// 自动阅读器全局对象\nwindow.autoReader = {\n  charPositions: [],\n  intervalId: null,\n  currentIndex: 0,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false,\n  cleanup: null\n};\n\n// 添加新的节奏阅读模式代码\n// 全局变量，确保在页面切换后仍然保持状态\nwindow.rhythmReaderGlobal = window.rhythmReaderGlobal || {\n  active: false,\n  speed: 300\n};\n\n// 节奏阅读模式 - 确保手动翻页后也能自动恢复\n(function() {\n  console.log(\"正在初始化节奏阅读模式...\");\n  \n  // 确保只初始化一次\n  if (window.rhythmReadingInitialized) {\n    console.log(\"节奏阅读模式已经初始化过，跳过\");\n    return;\n  }\n  window.rhythmReadingInitialized = true;\n  \n  // 改进的存储函数，同时使用session和local storage提高可靠性\n  function setStorage(key, value) {\n    try {\n      sessionStorage.setItem(key, value);\n      localStorage.setItem(key, value);\n    } catch (e) {\n      console.error(\"无法写入存储\", e);\n    }\n  }\n  \n  function getStorage(key) {\n    try {\n      // 优先使用sessionStorage，这样更适合单次会话\n      return sessionStorage.getItem(key) || localStorage.getItem(key);\n    } catch (e) {\n      console.error(\"无法读取存储\", e);\n      return null;\n    }\n  }\n  \n  // 状态变量和功能对象\n  const rhythmReader = {\n    active: false,\n    intervalId: null,\n    speed: 300,\n    currentIndex: 0,\n    readIndices: new Set(),\n    charElements: [],\n    pageTransitionInProgress: false,\n    \n    // 初始化文本节点\n    initializeTextNodes: function() {\n      console.log(\"【节奏阅读】初始化文本节点...\");\n      \n      // 重置字符元素数组\n      this.charElements = [];\n    \n      // 获取内容容器\n      const contentContainer = document.querySelector('.page-content');\n      if (!contentContainer) {\n        console.error(\"【节奏阅读】找不到内容容器\");\n        return false;\n      }\n    \n      // 查找所有文本节点并处理\n      const textNodes = [];\n      this.findTextNodes(contentContainer, textNodes);\n    \n      if (textNodes.length === 0) {\n        console.error(\"【节奏阅读】未找到文本节点\");\n        this.showNotification(\"无法启动节奏阅读：未找到文本内容\");\n        return false;\n      }\n    \n      console.log(`【节奏阅读】找到 ${textNodes.length} 个文本节点`);\n    \n      // 为每个文本节点创建字符span\n      textNodes.forEach(node => {\n        const text = node.nodeValue;\n        if (!text || text.trim() === '') return;\n        \n        // 创建文档片段来存放字符span\n        const fragment = document.createDocumentFragment();\n        \n        // 为每个字符创建span\n        for (let i = 0; i < text.length; i++) {\n          const char = text[i];\n          const span = document.createElement('span');\n          span.textContent = char;\n          span.className = 'rhythm-char';\n          span.dataset.rhythmIndex = String(this.charElements.length);\n          \n          // 如果是空白字符，添加一个标志\n          if (char.trim() === '') {\n            span.dataset.whitespace = 'true';\n          }\n          \n          // 保持原始样式，不设置背景\n          span.style.display = 'inline';\n          span.style.margin = '0';\n          span.style.padding = '0';\n          span.style.border = 'none';\n          span.style.backgroundColor = 'transparent';\n          \n          fragment.appendChild(span);\n          this.charElements.push(span);\n        }\n        \n        // 替换原始节点\n        if (node.parentNode) {\n          node.parentNode.replaceChild(fragment, node);\n        }\n      });\n      \n      console.log(`【节奏阅读】总共创建了 ${this.charElements.length} 个字符span`);\n      return this.charElements.length > 0;\n    },\n  \n    // 递归查找所有文本节点\n    findTextNodes: function(element, textNodes) {\n      // 处理子节点\n      for (let i = 0; i < element.childNodes.length; i++) {\n        const node = element.childNodes[i];\n        \n        // 如果是文本节点且有内容\n        if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() !== '') {\n          textNodes.push(node);\n        } \n        // 如果是元素节点，递归处理\n        else if (node.nodeType === Node.ELEMENT_NODE) {\n          // 跳过读者UI元素\n          if (node.id === 'rhythm-speed-slider' || \n              node.id === 'rhythm-notification' ||\n              node.className === 'rhythm-char') {\n            continue;\n          }\n          this.findTextNodes(node, textNodes);\n        }\n      }\n    },\n  \n    // 更新文本颜色\n    updateTextColors: function() {\n      // 更新所有字符的颜色\n      this.charElements.forEach((span, index) => {\n        // 确定颜色\n        let color;\n        let fontWeight = 'inherit';\n        \n        if (index === this.currentIndex) {\n          color = '#00aa00'; // 当前阅读的字 - 绿色\n          fontWeight = 'bold';\n        } else if (index === this.currentIndex + 1 || index === this.currentIndex + 2) {\n          color = '#aaaaaa'; // 接下来两个字 - 淡灰色\n        } else if (this.readIndices.has(index)) {\n          color = '#ffffff'; // 已读字符 - 白色（表示已读）\n        } else {\n          color = 'rgba(160, 160, 160, 0.25)'; // 未读字符 - 非常淡的灰色（可见但不明显）\n        }\n        \n        span.style.color = color;\n        span.style.fontWeight = fontWeight;\n        \n        // 确保没有背景\n        span.style.backgroundColor = 'transparent';\n        span.style.background = 'none';\n      });\n    },\n  \n    // 移动到下一个字符\n    moveToNextChar: function() {\n      // 将当前字符标记为已读\n      this.readIndices.add(this.currentIndex);\n    \n      // 移动到下一个非空白字符\n      do {\n        this.currentIndex++;\n        \n        // 检查是否到达末尾\n        if (this.currentIndex >= this.charElements.length) {\n          console.log(\"【节奏阅读】已到达页尾，尝试翻页\");\n          \n          // 尝试点击下一页按钮\n          if (!this.clickNextPageButton()) {\n            // 如果没有找到下一页按钮，完全停止阅读\n            this.stop();\n          }\n          return;\n        }\n      } while (\n        this.currentIndex < this.charElements.length && \n        this.charElements[this.currentIndex] && \n        this.charElements[this.currentIndex].dataset.whitespace === 'true'\n      );\n    \n      // 更新颜色\n      this.updateTextColors();\n    \n      // 滚动到当前字符\n      this.scrollToCurrentChar();\n    },\n  \n    // 滚动到当前字符\n    scrollToCurrentChar: function() {\n      const span = this.charElements[this.currentIndex];\n      if (!span) return;\n    \n      const rect = span.getBoundingClientRect();\n      const contentContainer = document.querySelector('.page-content');\n    \n      // 估计行高\n      const lineHeight = parseInt(window.getComputedStyle(span).lineHeight) || \n                      Math.max(20, rect.height * 1.5);\n    \n      // 确定滚动容器\n      const isContainerScrollable = contentContainer && \n        contentContainer.scrollHeight > contentContainer.clientHeight &&\n        ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n    \n      if (isContainerScrollable) {\n        // 容器滚动\n        const containerRect = contentContainer.getBoundingClientRect();\n        const relativeTop = rect.top - containerRect.top + contentContainer.scrollTop;\n        \n        const visibleTop = contentContainer.scrollTop;\n        const visibleBottom = visibleTop + contentContainer.clientHeight;\n        \n        if (relativeTop < visibleTop + lineHeight || relativeTop > visibleBottom - lineHeight) {\n          contentContainer.scrollBy({\n            top: lineHeight * 2 * (relativeTop > visibleBottom - lineHeight ? 1 : -1),\n            behavior: 'smooth'\n          });\n        }\n      } else {\n        // 窗口滚动\n        const viewportTop = window.scrollY;\n        const viewportBottom = viewportTop + window.innerHeight;\n        const absoluteTop = rect.top + window.scrollY;\n        \n        if (absoluteTop < viewportTop + lineHeight || absoluteTop > viewportBottom - lineHeight) {\n          window.scrollBy({\n            top: lineHeight * 2 * (absoluteTop > viewportBottom - lineHeight ? 1 : -1),\n            behavior: 'smooth'\n          });\n        }\n      }\n    },\n    \n    // 添加速度滑块\n    addSpeedSlider: function() {\n      let slider = document.getElementById('rhythm-speed-slider');\n      if (slider) slider.remove();\n      \n      const container = document.createElement('div');\n      container.id = 'rhythm-speed-slider';\n      container.style.position = 'fixed';\n      container.style.top = '70px';\n      container.style.right = '20px';\n      container.style.backgroundColor = 'white';\n      container.style.padding = '10px';\n      container.style.borderRadius = '5px';\n      container.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';\n      container.style.zIndex = '10000';\n      container.style.display = 'flex';\n      container.style.alignItems = 'center';\n      container.style.maxWidth = '300px';\n      \n      const label = document.createElement('label');\n      label.textContent = '速度: ';\n      label.style.marginRight = '8px';\n      container.appendChild(label);\n      \n      const input = document.createElement('input');\n      input.type = 'range';\n      input.min = '50';\n      input.max = '1000';\n      input.step = '50';\n      input.value = this.speed;\n      input.style.width = '120px';\n      \n      const valueDisplay = document.createElement('span');\n      valueDisplay.textContent = `${this.speed}ms`;\n      valueDisplay.style.marginLeft = '8px';\n      valueDisplay.style.minWidth = '60px';\n      \n      const self = this;\n      input.addEventListener('input', function() {\n        const newSpeed = parseInt(this.value);\n        self.speed = newSpeed;\n        valueDisplay.textContent = `${newSpeed}ms`;\n        \n        if (self.intervalId) {\n          clearInterval(self.intervalId);\n          self.intervalId = setInterval(() => self.moveToNextChar(), newSpeed);\n        }\n      });\n      \n      container.appendChild(input);\n      container.appendChild(valueDisplay);\n      document.body.appendChild(container);\n    },\n  \n    // 恢复原始文本\n    restoreOriginalText: function() {\n      // 获取所有已创建的字符span\n      const charSpans = document.querySelectorAll('.rhythm-char');\n      \n      // 按父节点分组\n      const parentNodeMap = new Map();\n      \n      charSpans.forEach(span => {\n        const parent = span.parentNode;\n        if (!parent) return;\n        \n        if (!parentNodeMap.has(parent)) {\n          parentNodeMap.set(parent, []);\n        }\n        parentNodeMap.get(parent).push(span);\n      });\n      \n      // 对每个父节点，将连续的字符span合并回文本节点\n      parentNodeMap.forEach((spans, parent) => {\n        if (spans.length === 0) return;\n        \n        // 排序spans确保顺序正确\n        spans.sort((a, b) => {\n          const indexA = parseInt(a.dataset.rhythmIndex || '0');\n          const indexB = parseInt(b.dataset.rhythmIndex || '0');\n          return indexA - indexB;\n        });\n        \n        // 根据连续性分组\n        const groups = [];\n        if (spans.length > 0) {\n          let currentGroup = [spans[0]];\n        \n          for (let i = 1; i < spans.length; i++) {\n            const prevIndex = parseInt(spans[i-1].dataset.rhythmIndex || '0');\n            const currentIndex = parseInt(spans[i].dataset.rhythmIndex || '0');\n            \n            if (currentIndex === prevIndex + 1 && spans[i].previousSibling === spans[i-1]) {\n              currentGroup.push(spans[i]);\n            } else {\n              groups.push(currentGroup);\n              currentGroup = [spans[i]];\n            }\n          }\n        \n          groups.push(currentGroup);\n        }\n        \n        // 对每个连续组替换为文本节点\n        groups.forEach(group => {\n          if (group.length === 0) return;\n          \n          try {\n            const text = group.map(span => span.textContent).join('');\n            const textNode = document.createTextNode(text);\n            \n            // 替换第一个span，然后移除其余的\n            if (group[0].parentNode === parent) {\n              parent.replaceChild(textNode, group[0]);\n              for (let i = 1; i < group.length; i++) {\n                if (group[i].parentNode === parent) {\n                  parent.removeChild(group[i]);\n                }\n              }\n            }\n          } catch (e) {\n            console.error(\"【节奏阅读】恢复文本时出错:\", e);\n          }\n        });\n      });\n      \n      // 清除字符元素数组\n      this.charElements = [];\n    },\n  \n    // 启动节奏阅读\n    start: function() {\n      console.log(\"【节奏阅读】启动中...\");\n      \n      // 检查是否正在进行页面转换\n      if (this.pageTransitionInProgress) {\n        console.log(\"【节奏阅读】页面转换正在进行中，延迟启动\");\n        setTimeout(() => this.start(), 500);\n        return;\n      }\n    \n      // 先停止已有的\n      this.stop(false);\n    \n      // 设置为活动状态\n      this.active = true;\n      setStorage('rhythmReadingActive', 'true');\n    \n      // 初始化文本\n      if (!this.initializeTextNodes()) {\n        console.error(\"【节奏阅读】无法初始化文本节点\");\n        return;\n      }\n\n      // 重要：始终从头开始阅读\n      this.currentIndex = 0;\n      this.readIndices.clear();\n      \n      // 添加速度滑块\n      this.addSpeedSlider();\n    \n      // 更新颜色\n      this.updateTextColors();\n    \n      // 滚动到开始位置\n      this.scrollToCurrentChar();\n    \n      // 设置阅读间隔\n      this.intervalId = setInterval(() => this.moveToNextChar(), this.speed);\n      \n      console.log(\"【节奏阅读】成功启动\");\n      \n      // 显示提示\n      this.showNotification(\"节奏阅读模式已启动\");\n      \n      // 劫持翻页函数 - 重要步骤\n      this.hijackPageTurningFunctions();\n      \n      // 设置页面导航事件监听\n      this.setupPageNavigationListeners();\n    },\n    \n    // 停止节奏阅读\n    stop: function(showNotification = true) {\n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n      }\n      \n      if (this.active) {\n        console.log(\"【节奏阅读】停止中...\");\n        this.active = false;\n        \n        // 仅当不是因翻页而停止时才清除活动状态\n        if (!this.pageTransitionInProgress) {\n          setStorage('rhythmReadingActive', 'false');\n        }\n        \n        // 恢复原始文本\n        this.restoreOriginalText();\n        \n        // 移除速度滑块\n        const slider = document.getElementById('rhythm-speed-slider');\n        if (slider) slider.remove();\n        \n        if (showNotification) {\n          this.showNotification(\"节奏阅读模式已停止\");\n        }\n      }\n    },\n    \n    // 显示通知\n    showNotification: function(message) {\n      let notification = document.getElementById('rhythm-notification');\n      if (notification) notification.remove();\n      \n      notification = document.createElement('div');\n      notification.id = 'rhythm-notification';\n      notification.textContent = message;\n      notification.style.position = 'fixed';\n      notification.style.top = '50%';\n      notification.style.left = '50%';\n      notification.style.transform = 'translate(-50%, -50%)';\n      notification.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';\n      notification.style.color = 'white';\n      notification.style.padding = '15px 25px';\n      notification.style.borderRadius = '5px';\n      notification.style.zIndex = '10001';\n      notification.style.fontSize = '18px';\n      \n      document.body.appendChild(notification);\n      \n      // 2秒后自动消失\n      setTimeout(() => {\n        if (notification && notification.parentNode) {\n          notification.parentNode.removeChild(notification);\n        }\n      }, 2000);\n    },\n    \n    // 劫持页面翻转函数 - 改进版本\n    hijackPageTurningFunctions: function() {\n      if (typeof window.changePage === 'function' && !window._originalChangePage) {\n        console.log(\"【节奏阅读】劫持changePage函数\");\n        window._originalChangePage = window.changePage;\n        \n        const self = this;\n        window.changePage = function(page) {\n          console.log(\"【节奏阅读】检测到changePage调用，参数:\", page);\n          \n          const wasActive = self.active;\n          self.pageTransitionInProgress = true;\n          \n          if (wasActive) {\n            self.stop(false);\n            setStorage('rhythmReadingActive', 'true'); \n            setStorage('rhythmReadingPending', 'true');\n            document.body.dataset.rhythmReadingActive = 'true';\n          }\n          \n          try {\n            if (page === undefined || page === null) {\n              console.warn('【节奏阅读】安全处理：page参数为空');\n              page = {};\n            }\n            \n            if (typeof page === 'object' && !page.something) {\n              console.log('【节奏阅读】添加空的something对象防止错误');\n              page.something = { active: false };\n            }\n            \n            window._originalChangePage(page);\n          } catch (err) {\n            console.error(\"【节奏阅读】翻页函数执行出错:\", err);\n            self.clickNextPageButton();\n          }\n          \n          setTimeout(() => {\n            self.pageTransitionInProgress = false;\n            \n            if (wasActive && getStorage('rhythmReadingPending') === 'true') {\n              setStorage('rhythmReadingPending', 'false');\n              console.log(\"【节奏阅读】翻页后重新启动\");\n              setTimeout(() => self.start(), 500);\n            }\n          }, 1000);\n        };\n      }\n    },\n    \n    // 设置页面导航事件监听 - 加强版\n    setupPageNavigationListeners: function() {\n      // 查找所有可能的翻页按钮\n      console.log(\"【节奏阅读】正在设置页面导航监听\");\n      \n      const self = this;\n      \n      // 使用事件委托来捕获所有可能的点击\n      document.addEventListener('click', function(e) {\n        // 检查点击的元素是否可能是翻页按钮\n        let target = e.target;\n        while (target && target !== document.body) {\n          // 检查是否是翻页元素\n          if (target.tagName === 'BUTTON' || target.tagName === 'A' || \n              target.getAttribute('role') === 'button') {\n            \n            const text = (target.textContent || '').trim().toLowerCase();\n            const ariaLabel = (target.getAttribute('aria-label') || '').toLowerCase();\n            \n            // 检查是否是翻页元素\n            if (text.includes('上一页') || text.includes('下一页') || \n                text.includes('prev') || text.includes('next') ||\n                ariaLabel.includes('page') || ariaLabel.includes('页') ||\n                text === '<' || text === '>' || text === '←' || text === '→') {\n              \n              if (self.active) {\n                console.log(`【节奏阅读】检测到可能的翻页元素点击: ${text || ariaLabel}`);\n                \n                // 标记页面转换开始\n                self.pageTransitionInProgress = true;\n                \n                // 保存状态到存储\n                setStorage('rhythmReadingActive', 'true');\n                setStorage('rhythmReadingPending', 'true');\n                document.body.dataset.rhythmReadingActive = 'true';\n                \n                // 停止当前的阅读\n                self.stop(false);\n                \n                // 添加延迟执行的监听器，确保数据在页面加载后恢复\n                setTimeout(() => {\n                  self.pageTransitionInProgress = false;\n                  \n                  if (getStorage('rhythmReadingPending') === 'true') {\n                    setStorage('rhythmReadingPending', 'false');\n                    self.start();\n                  }\n                }, 1500);\n              }\n              \n              break;\n            }\n          }\n          \n          target = target.parentNode;\n        }\n      });\n      \n      // 监听键盘导航事件\n      document.addEventListener('keydown', function(e) {\n        // 检查是否是翻页快捷键\n        if (['ArrowLeft', 'ArrowRight', 'PageUp', 'PageDown'].includes(e.key)) {\n          if (self.active) {\n            console.log(`【节奏阅读】检测到键盘翻页: ${e.key}`);\n            \n            // 保存状态到存储\n            setStorage('rhythmReadingActive', 'true');\n            setStorage('rhythmReadingPending', 'true');\n            \n            // 标记页面转换开始\n            self.pageTransitionInProgress = true;\n            \n            // 停止当前的阅读\n            self.stop(false);\n            \n            // 添加延迟执行的监听器\n            setTimeout(() => {\n              self.pageTransitionInProgress = false;\n              \n              if (getStorage('rhythmReadingPending') === 'true') {\n                setStorage('rhythmReadingPending', 'false');\n                self.start();\n              }\n            }, 1500);\n          }\n        }\n      });\n      \n      // 添加popstate监听器捕获浏览器前进/后退导航\n      window.addEventListener('popstate', function() {\n        if (self.active) {\n          console.log(\"【节奏阅读】检测到历史导航事件\");\n          \n          // 保存状态\n          setStorage('rhythmReadingActive', 'true');\n          setStorage('rhythmReadingPending', 'true');\n          \n          // 标记页面转换开始\n          self.pageTransitionInProgress = true;\n          \n          // 停止当前阅读\n          self.stop(false);\n          \n          // 延迟恢复\n          setTimeout(() => {\n            self.pageTransitionInProgress = false;\n            \n            if (getStorage('rhythmReadingPending') === 'true') {\n              setStorage('rhythmReadingPending', 'false');\n              self.start();\n            }\n          }, 1500);\n        }\n      });\n    },\n    \n    // 改进的自动翻页函数，更精确地处理状态保存\n    clickNextPageButton: function() {\n      console.log(\"【节奏阅读】尝试查找并点击下一页按钮\");\n      \n      // 查找下一页按钮\n      const nextPageSelectors = [\n        'button.next-page', \n        'button[aria-label=\"下一页\"]',\n        'a.next-page',\n        'a[aria-label=\"下一页\"]',\n        '.next-page',\n        '#next-page',\n        'button.next',\n        'a.next'\n      ];\n      \n      let nextPageButton = null;\n      \n      // 尝试通过选择器找到按钮\n      for (const selector of nextPageSelectors) {\n        try {\n          const elements = document.querySelectorAll(selector);\n          for (const el of elements) {\n            if (el.offsetParent !== null) { // 检查元素是否可见\n              console.log(`【节奏阅读】找到下一页按钮: ${selector}`);\n              nextPageButton = el;\n              break;\n            }\n          }\n          if (nextPageButton) break;\n        } catch (e) {\n          // 某些选择器可能不被支持，忽略错误\n        }\n      }\n      \n      // 如果没找到，尝试按文本内容查找\n      if (!nextPageButton) {\n        const buttons = document.querySelectorAll('button, a, div[role=\"button\"]');\n        for (const button of buttons) {\n          const text = button.textContent.trim().toLowerCase();\n          if ((text.includes('下一页') || text.includes('next') || text === '>' || text === '→') && \n              button.offsetParent !== null) {\n            console.log(`【节奏阅读】通过文本内容找到下一页按钮: ${text}`);\n            nextPageButton = button;\n            break;\n          }\n        }\n      }\n      \n      if (nextPageButton) {\n        console.log(\"【节奏阅读】模拟点击下一页按钮\");\n        \n        // 明确标记页面转换开始\n        this.pageTransitionInProgress = true;\n        \n        // 保存状态\n        setStorage('rhythmReadingActive', 'true');\n        setStorage('rhythmReadingPending', 'true');\n        document.body.dataset.rhythmReadingActive = 'true';\n        \n        // 恢复原始文本\n        this.restoreOriginalText();\n        \n        // 停止计时器\n        if (this.intervalId) {\n          clearInterval(this.intervalId);\n          this.intervalId = null;\n        }\n        \n        // 模拟点击\n        nextPageButton.click();\n        \n        // 延迟结束页面转换状态\n        setTimeout(() => {\n          this.pageTransitionInProgress = false;\n        }, 1000);\n        \n        return true;\n      } else {\n        console.log(\"【节奏阅读】未找到下一页按钮\");\n        return false;\n      }\n    }\n  };\n  \n  // 暴露到全局，以便调试和直接调用\n  window.rhythmReader = rhythmReader;\n  \n  // 额外添加一个全局安全函数用于检查节奏阅读状态\n  window.isRhythmActive = function() {\n    return rhythmReader.active || getStorage('rhythmReadingActive') === 'true';\n  };\n  \n  // 添加一个停止函数供外部安全调用\n  window.stopRhythmSafely = function() {\n    try {\n      setStorage('rhythmReadingActive', 'false');\n      setStorage('rhythmReadingPending', 'false');\n      \n      if (rhythmReader && typeof rhythmReader.stop === 'function') {\n        rhythmReader.stop();\n      }\n    } catch (e) {\n      console.error(\"停止节奏阅读出错\", e);\n    }\n  };\n  \n  // 设置页面加载监听器，确保页面转换后能恢复\n  function setupPageLoadListener() {\n    // DOM内容加载和完全加载的事件监听...\n    \n    // 改进的页面变化监测\n    const observer = new MutationObserver(function(mutations) {\n      // 检测到内容变化且有待处理的节奏阅读时\n      if (getStorage('rhythmReadingPending') === 'true') {\n        const contentChanges = mutations.some(m => \n          m.type === 'childList' && m.addedNodes.length > 5); // 使用更高的阈值，确保是真正的内容变化\n          \n        if (contentChanges) {\n          console.log(\"【节奏阅读】检测到大量DOM变化，可能是页面切换\");\n          \n          // 给页面一点时间稳定下来\n          setTimeout(() => {\n            if (getStorage('rhythmReadingPending') === 'true') {\n              console.log(\"【节奏阅读】页面内容变化后，尝试恢复阅读\");\n              setStorage('rhythmReadingPending', 'false');\n              \n              if (!rhythmReader.pageTransitionInProgress) {\n                rhythmReader.start();\n              }\n            }\n          }, 800);\n        }\n      }\n    });\n    \n    // 观察body变化\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  }\n  \n  // 设置页面加载监听器\n  setupPageLoadListener();\n  \n  // 检查是否需要立即恢复阅读状态\n  if (getStorage('rhythmReadingActive') === 'true') {\n    console.log(\"【节奏阅读】检测到之前的阅读状态，准备恢复\");\n    setStorage('rhythmReadingPending', 'false');\n    \n    setTimeout(function() {\n      rhythmReader.start();\n    }, 800);\n  }\n  \n  console.log(\"【节奏阅读】初始化完成\");\n})();\n\nconst App = () => {\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  \n  // 实现缺失的函数\n  // 应用深色背景\n  const applyDarkBackground = () => {\n    document.body.classList.add('dark-background');\n    \n    // 添加必要的CSS样式\n    if (!document.getElementById('dark-background-style')) {\n      const style = document.createElement('style');\n      style.id = 'dark-background-style';\n      style.textContent = `\n        .dark-background {\n          background-color: #000 !important;\n        }\n        .dark-background .sidebar {\n          background: linear-gradient(145deg, #4834d4, #341f9e) !important;\n        }\n        .dark-background .page-content {\n          background-color: #000 !important;\n        }\n        .dark-background .main-content {\n          background-color: #000 !important;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 恢复正常背景\n  const restoreDarkBackground = () => {\n    document.body.classList.remove('dark-background');\n  };\n  \n  // 添加裸眼3D样式\n  const addNakedEye3DStyles = () => {\n    if (!document.getElementById('naked-eye-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'naked-eye-3d-style';\n      style.textContent = `\n        .naked-eye-3d-container {\n          position: relative;\n          perspective: 800px;\n          width: 100%;\n        }\n        \n        .naked-eye-3d-text {\n          display: inline-block;\n          animation: float 3s ease-in-out infinite;\n          text-shadow: 0 0 5px rgba(255,255,255,0.3);\n          padding: 0 4px;\n          color: white;\n          filter: drop-shadow(0 0 5px rgba(120, 220, 255, 0.6));\n        }\n        \n        @keyframes float {\n          0% { transform: translateZ(0px); }\n          50% { transform: translateZ(20px); }\n          100% { transform: translateZ(0px); }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 添加舒适3D样式\n  const addComfortable3DStyles = () => {\n    if (!document.getElementById('comfortable-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'comfortable-3d-style';\n      style.textContent = `\n        .emboss-3d-text {\n          color: #fff;\n          text-shadow: \n            1px 1px 1px rgba(0,0,0,0.5),\n            -1px -1px 1px rgba(255,255,255,0.5);\n          letter-spacing: 1.5px;\n          font-weight: 500;\n        }\n        \n        .float-3d-text {\n          display: inline-block;\n          transform-style: preserve-3d;\n          transform: perspective(500px) translateZ(10px);\n          text-shadow: 0 2px 5px rgba(0,0,0,0.5);\n        }\n        \n        .gradient-3d-text {\n          display: inline-block;\n          background: linear-gradient(to bottom, #fff, #aaa);\n          -webkit-background-clip: text;\n          -webkit-text-fill-color: transparent;\n          text-shadow: 0 2px 4px rgba(0,0,0,0.3);\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 添加闪读样式\n  const addFlashReadingStyles = () => {\n    if (!document.getElementById('flash-reading-style')) {\n      const style = document.createElement('style');\n      style.id = 'flash-reading-style';\n      style.textContent = `\n        .flash-reading-container {\n          position: fixed;\n          top: 50%;\n          left: 50%;\n          transform: translate(-50%, -50%);\n          background-color: rgba(0, 0, 0, 0.9);\n          padding: 40px;\n          border-radius: 15px;\n          box-shadow: 0 0 30px rgba(0, 0, 0, 0.5);\n          z-index: 1000;\n          width: 80%;\n          max-width: 800px;\n          text-align: center;\n        }\n        \n        .flash-reading-display {\n          font-size: 48px;\n          color: white;\n          font-weight: bold;\n          height: 100px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          margin-bottom: 30px;\n        }\n        \n        .flash-reading-controls {\n          display: flex;\n          justify-content: center;\n          gap: 20px;\n          margin-top: 20px;\n        }\n        \n        .flash-reading-btn {\n          padding: 12px 24px;\n          border: none;\n          border-radius: 8px;\n          background-color: #6c5ce7;\n          color: white;\n          font-size: 16px;\n          cursor: pointer;\n          transition: all 0.2s ease;\n        }\n        \n        .flash-reading-btn:hover {\n          background-color: #4834d4;\n          transform: translateY(-2px);\n        }\n        \n        .flash-reading-speed {\n          display: flex;\n          align-items: center;\n          gap: 10px;\n          margin-top: 20px;\n          color: white;\n        }\n        \n        .flash-reading-slider {\n          flex: 1;\n          height: 6px;\n          background: #444;\n          outline: none;\n          border-radius: 3px;\n          appearance: none;\n        }\n        \n        .flash-reading-slider::-webkit-slider-thumb {\n          appearance: none;\n          width: 20px;\n          height: 20px;\n          background: #6c5ce7;\n          border-radius: 50%;\n          cursor: pointer;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 初始化闪读模式\n  const initializeFlashReading = () => {\n    if (window.flashReader) {\n      window.flashReader.cleanup();\n    }\n    \n    // 创建闪读容器\n    const container = document.createElement('div');\n    container.className = 'flash-reading-container';\n    \n    // 创建显示区域\n    const display = document.createElement('div');\n    display.className = 'flash-reading-display';\n    display.id = 'flash-reading-display';\n    display.textContent = '准备开始';\n    \n    // 创建控制区域\n    const controls = document.createElement('div');\n    controls.className = 'flash-reading-controls';\n    \n    // 开始按钮\n    const startBtn = document.createElement('button');\n    startBtn.className = 'flash-reading-btn';\n    startBtn.id = 'flash-reading-start';\n    startBtn.textContent = '开始';\n    \n    // 停止按钮\n    const stopBtn = document.createElement('button');\n    stopBtn.className = 'flash-reading-btn';\n    stopBtn.id = 'flash-reading-stop';\n    stopBtn.textContent = '停止';\n    \n    // 添加速度控制\n    const speedControl = document.createElement('div');\n    speedControl.className = 'flash-reading-speed';\n    \n    const speedLabel = document.createElement('span');\n    speedLabel.textContent = '速度：';\n    \n    const speedSlider = document.createElement('input');\n    speedSlider.type = 'range';\n    speedSlider.min = '50';\n    speedSlider.max = '500';\n    speedSlider.value = '200';\n    speedSlider.className = 'flash-reading-slider';\n    speedSlider.id = 'flash-reading-speed';\n    \n    const speedValue = document.createElement('span');\n    speedValue.id = 'flash-reading-speed-value';\n    speedValue.textContent = '200 wpm';\n    \n    speedControl.appendChild(speedLabel);\n    speedControl.appendChild(speedSlider);\n    speedControl.appendChild(speedValue);\n    \n    // 添加到DOM\n    controls.appendChild(startBtn);\n    controls.appendChild(stopBtn);\n    container.appendChild(display);\n    container.appendChild(speedControl);\n    container.appendChild(controls);\n    \n    document.body.appendChild(container);\n    \n    // 获取文本内容\n    const contentElement = document.querySelector('.page-content');\n    const text = contentElement ? contentElement.textContent : '';\n    \n    // 分词\n    const words = text.trim().split(/\\s+/);\n    \n    // 闪读控制器\n    window.flashReader = {\n      words,\n      currentIndex: 0,\n      interval: null,\n      speed: 200,\n      isPlaying: false,\n      \n      start() {\n        if (this.interval) clearInterval(this.interval);\n        \n        this.isPlaying = true;\n        const display = document.getElementById('flash-reading-display');\n        const speedValue = parseInt(document.getElementById('flash-reading-speed').value);\n        this.speed = speedValue;\n        \n        this.interval = setInterval(() => {\n          if (this.currentIndex < this.words.length) {\n            if (display) display.textContent = this.words[this.currentIndex];\n            this.currentIndex++;\n          } else {\n            this.stop();\n            if (display) display.textContent = '已结束';\n          }\n        }, 60000 / this.speed); // 转换为毫秒\n      },\n      \n      stop() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n      },\n      \n      cleanup() {\n        this.stop();\n        const container = document.querySelector('.flash-reading-container');\n        if (container) container.remove();\n      }\n    };\n    \n    // 添加事件监听器\n    document.getElementById('flash-reading-start').addEventListener('click', () => {\n      window.flashReader.start();\n    });\n    \n    document.getElementById('flash-reading-stop').addEventListener('click', () => {\n      window.flashReader.stop();\n    });\n    \n    document.getElementById('flash-reading-speed').addEventListener('input', (e) => {\n      const value = e.target.value;\n      document.getElementById('flash-reading-speed-value').textContent = `${value} wpm`;\n      \n      if (window.flashReader.isPlaying) {\n        window.flashReader.stop();\n        window.flashReader.speed = parseInt(value);\n        window.flashReader.start();\n      } else {\n        window.flashReader.speed = parseInt(value);\n      }\n    });\n  };\n  \n  // 创建闪读内容\n  const createFlashReadingContent = (text) => {\n    return `<div class=\"flash-reading-content\">\n      <p>${text}</p>\n    </div>`;\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 格式化文本用于鼠标跟随\n  const formatTextForMouseFollow = (text) => {\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个单词添加span，以便于添加高亮效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"follow-word\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\" data-follow=\"true\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用静态高亮\n  const applyStaticHighlight = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为单词随机添加颜色高亮\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      let lastColor = null;\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n          return;\n        }\n        \n        // 随机决定是否高亮和使用哪种颜色\n        if (Math.random() < 0.7) {\n          let color;\n          if (lastColor === 'red') {\n            color = 'blue';\n          } else if (lastColor === 'blue') {\n            color = 'red';\n          } else {\n            color = Math.random() < 0.5 ? 'red' : 'blue';\n          }\n          lastColor = color;\n          \n          processedParagraph += `<span class=\"highlight-word ${color}\">${word}</span>`;\n        } else {\n          processedParagraph += word;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用裸眼3D效果\n  const applyNakedEye3dEffect = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content naked-eye-3d-container\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个词添加3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"naked-eye-3d-text\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用舒适3D效果\n  const applyComfortable3dEffect = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个词随机应用不同的3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          \n          processedParagraph += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 初始化裸眼3D\n  const initializeNakedEye3D = () => {\n    // 为裸眼3D文本添加动画\n    const textElements = document.querySelectorAll('.naked-eye-3d-text');\n    textElements.forEach((element, index) => {\n      // 添加随机延迟，使动画错开\n      const delay = Math.random() * 2;\n      element.style.animationDelay = `${delay}s`;\n    });\n  };\n\n  // 初始化节奏阅读\n  const initializeRhythmReading = () => {\n    if (window.rhythmReader && typeof window.rhythmReader.initializeTextNodes === 'function') {\n      window.rhythmReader.initializeTextNodes();\n    }\n  };\n  \n  // 启动节奏阅读\n  const startRhythmReading = () => {\n    if (window.rhythmReader && typeof window.rhythmReader.start === 'function') {\n      window.rhythmReader.start();\n    }\n  };\n\n  // 添加鼠标跟随监听器\n  const addMouseFollowListeners = () => {\n    const contentArea = document.querySelector('.mouse-follow-content');\n    if (!contentArea) return;\n    \n    // 监听鼠标移动事件\n    const mouseMoveHandler = (e) => {\n      // 清除所有当前高亮\n      document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n      \n      // 创建新的高亮线\n      const highlight = document.createElement('div');\n      highlight.className = 'line-highlight';\n      highlight.style.cssText = `\n        position: absolute;\n        height: 30px;\n        background-color: rgba(255, 255, 255, 0.1);\n        left: 0;\n        right: 0;\n        top: ${e.clientY - contentArea.getBoundingClientRect().top - 15}px;\n        z-index: 1;\n        pointer-events: none;\n      `;\n      \n      contentArea.appendChild(highlight);\n      \n      // 高亮当前行下的单词\n      const words = contentArea.querySelectorAll('.follow-word');\n      words.forEach(word => {\n        const rect = word.getBoundingClientRect();\n        const wordTop = rect.top;\n        const wordBottom = rect.bottom;\n        \n        // 如果单词在鼠标高亮线范围内\n        if (wordTop <= e.clientY && wordBottom >= e.clientY) {\n          word.style.color = '#ffffff';\n          word.style.fontWeight = 'bold';\n        } else {\n          word.style.color = '';\n          word.style.fontWeight = '';\n        }\n      });\n    };\n    \n    // 清除高亮的处理函数\n    const mouseLeaveHandler = () => {\n      document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n      const words = contentArea.querySelectorAll('.follow-word');\n      words.forEach(word => {\n        word.style.color = '';\n        word.style.fontWeight = '';\n      });\n    };\n    \n    // 存储事件处理函数引用，便于后续移除\n    window.eventTracker = window.eventTracker || { mouseFollowHandlers: [] };\n    window.eventTracker.mouseFollowHandlers.push(\n      { element: contentArea, event: 'mousemove', handler: mouseMoveHandler },\n      { element: contentArea, event: 'mouseleave', handler: mouseLeaveHandler }\n    );\n    \n    contentArea.addEventListener('mousemove', mouseMoveHandler);\n    contentArea.addEventListener('mouseleave', mouseLeaveHandler);\n  };\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n  }, []);\n  \n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async (file) => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      \n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n      \n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n      \n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n  \n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({ scale: 1.0 });\n      \n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      \n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      \n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async (textContent) => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n    \n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n    \n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n    \n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    \n    const lines = [...lineMap.values()];\n    \n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    \n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    \n    return hasTocKeywords || hasPageNumberPatterns || (shortLineRatio > 0.7 && numberLineRatio > 0.3);\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n    \n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    \n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n      \n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n      \n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n      \n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    \n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && \n              x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = (text) => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    \n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      \n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        \n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    \n    return result;\n  };\n\n  // 处理内容页面 - 保留原始段落结构\n  const processContentPage = async (page, mode) => {\n    try {\n      // 获取文本内容并保留更多布局信息\n      const textContent = await page.getTextContent({\n        normalizeWhitespace: false,\n        disableCombineTextItems: false\n      });\n      \n      // 按行组织文本项\n      const textItemsByLine = organizeTextItemsByLine(textContent.items);\n      \n      // 识别段落\n      const paragraphs = identifyParagraphs(textItemsByLine);\n      \n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch(mode) {\n        case 'normal':\n          processedContent = formatParagraphsToHtml(paragraphs);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlightToParagraphs(paragraphs);\n          break;\n        case 'follow-mouse':\n          processedContent = formatParagraphsForMouseFollow(paragraphs);\n          break;\n        case 'rhythm':\n          processedContent = formatParagraphsToHtml(paragraphs);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToParagraphs(paragraphs);\n          break;\n        case 'flash-reading':\n          processedContent = createFlashReadingContentFromParagraphs(paragraphs);\n          break;\n        default:\n          processedContent = formatParagraphsToHtml(paragraphs);\n      }\n      \n      setContent(processedContent);\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 按行组织文本项\n  const organizeTextItemsByLine = (textItems) => {\n    // 按y坐标分组，将相同y坐标（或非常接近）的文本项视为同一行\n    const lineMap = new Map();\n    \n    textItems.forEach(item => {\n      // 四舍五入y坐标以进行分组，考虑1px的误差\n      const yKey = Math.round(item.transform[5]);\n      \n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      \n      lineMap.get(yKey).push(item);\n    });\n    \n    // 对每一行的文本项按x坐标排序\n    const lines = Array.from(lineMap.entries())\n      .sort((a, b) => b[0] - a[0]) // 按y坐标从上到下排序\n      .map(([y, items]) => {\n        return items.sort((a, b) => a.transform[4] - b.transform[4]); // 按x坐标从左到右排序\n      });\n    \n    return lines;\n  };\n\n  // 识别段落\n  const identifyParagraphs = (textItemsByLine) => {\n    const paragraphs = [];\n    let currentParagraph = [];\n    \n    // 估计标准行间距\n    let lineSpacings = [];\n    for (let i = 0; i < textItemsByLine.length - 1; i++) {\n      if (textItemsByLine[i].length > 0 && textItemsByLine[i+1].length > 0) {\n        const currentLineY = textItemsByLine[i][0].transform[5];\n        const nextLineY = textItemsByLine[i+1][0].transform[5];\n        lineSpacings.push(Math.abs(currentLineY - nextLineY));\n      }\n    }\n    \n    // 计算行间距的中位数作为标准行间距\n    const standardLineSpacing = getMedian(lineSpacings) || 12; // 默认12px\n    \n    // 检测段落间隔的阈值（通常是1.5倍标准行间距）\n    const paragraphSpacingThreshold = standardLineSpacing * 1.5;\n    \n    for (let i = 0; i < textItemsByLine.length; i++) {\n      const currentLine = textItemsByLine[i];\n      if (currentLine.length === 0) continue;\n      \n      // 将当前行添加到当前段落\n      currentParagraph.push(currentLine);\n      \n      // 检查是否为段落结束\n      const isLastLine = i === textItemsByLine.length - 1;\n      \n      // 检查行间距\n      let hasLargeParagraphSpacing = false;\n      if (!isLastLine && textItemsByLine[i+1].length > 0) {\n        hasLargeParagraphSpacing = Math.abs(currentLine[0].transform[5] - textItemsByLine[i+1][0].transform[5]) > paragraphSpacingThreshold;\n      }\n      \n      // 检查首行缩进（通常表示新段落）\n      let hasNextLineIndent = false;\n      if (!isLastLine && textItemsByLine[i+1].length > 0 && currentLine.length > 0) {\n        hasNextLineIndent = textItemsByLine[i+1][0].transform[4] > currentLine[0].transform[4] + 10;\n      }\n      \n      // 检查当前行是否很短（可能是段落结束）\n      const isShortLine = currentLine.map(item => item.str).join('').trim().length < 50;\n      \n      // 检查当前行结束标记\n      const endsWithPunctuation = /[.!?。！？]$/.test(\n        currentLine.map(item => item.str).join('').trim()\n      );\n      \n      if (isLastLine || hasLargeParagraphSpacing || (endsWithPunctuation && (hasNextLineIndent || isShortLine))) {\n        // 当前段落结束\n        const paragraphText = currentParagraph.map(line => \n          line.map(item => item.str).join('')\n        ).join(' ');\n        \n        paragraphs.push(paragraphText.trim());\n        currentParagraph = [];\n      }\n    }\n    \n    // 处理可能的剩余段落\n    if (currentParagraph.length > 0) {\n      const paragraphText = currentParagraph.map(line => \n        line.map(item => item.str).join('')\n      ).join(' ');\n      \n      paragraphs.push(paragraphText.trim());\n    }\n    \n    return paragraphs;\n  };\n\n  // 计算中位数的辅助函数\n  const getMedian = (values) => {\n    if (values.length === 0) return 0;\n    \n    const sorted = [...values].sort((a, b) => a - b);\n    const mid = Math.floor(sorted.length / 2);\n    \n    return sorted.length % 2 === 0\n      ? (sorted[mid - 1] + sorted[mid]) / 2\n      : sorted[mid];\n  };\n\n  // 格式化段落为HTML\n  const formatParagraphsToHtml = (paragraphs) => {\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为段落应用静态高亮\n  const applyStaticHighlightToParagraphs = (paragraphs) => {\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为单词随机添加颜色高亮\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      let lastColor = null;\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n          return;\n        }\n        \n        if (Math.random() < 0.7) {\n          let color;\n          if (lastColor === 'red') {\n            color = 'blue';\n          } else if (lastColor === 'blue') {\n            color = 'red';\n          } else {\n            color = Math.random() < 0.5 ? 'red' : 'blue';\n          }\n          lastColor = color;\n          \n          processedParagraph += `<span class=\"highlight-word ${color}\">${word}</span>`;\n        } else {\n          processedParagraph += word;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为鼠标跟随模式格式化段落\n  const formatParagraphsForMouseFollow = (paragraphs) => {\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个单词添加span，以便于添加高亮效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"follow-word\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\" data-follow=\"true\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为舒适3D模式格式化段落\n  const applyComfortable3dEffectToParagraphs = (paragraphs) => {\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个词随机应用不同的3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          \n          processedParagraph += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为闪读模式创建内容\n  const createFlashReadingContentFromParagraphs = (paragraphs) => {\n    const text = paragraphs.join(\"\\n\\n\");\n    return `<div class=\"flash-reading-content\">\n      <p>${text}</p>\n    </div>`;\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async (file) => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n    \n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain') {\n      handleTxtFile(file);\n    } else {\n      alert('请上传PDF或TXT文件');\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = (container) => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    \n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n      \n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n      \n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          \n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n          \n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width/2,  // 水平中心\n            y: rect.bottom,               // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n    \n    // 过滤无效位置并排序\n    return positions\n      .filter(p => p.char.trim() !== '')\n      .sort((a, b) => {\n        // 先按行排序，同行按列排序\n        const yDiff = a.y - b.y;\n        if (Math.abs(yDiff) > 5) { // 5px阈值判断是否同一行\n          return yDiff;\n        }\n        return a.x - b.x;\n      });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    \n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - (containerVisibleHeight / 2);\n      \n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - (window.innerHeight / 2);\n      \n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    \n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n    \n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    \n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n    \n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length || // 已到末尾\n          positions[nextIndex].char.trim() === '' || // 下一个是空白\n          positions[nextIndex].y > charPosition.y + 5) { // 下一个在新行\n        return true;\n      }\n    }\n    \n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n    \n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n      \n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || \n          current.y > prev.y + 5) { // 有明显换行\n        break;\n      }\n      \n      start--;\n    }\n    \n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n      \n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      \n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n      \n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      \n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (window.autoReader.charPositions.length === 0) {\n      if (window.currentPage < window.totalPages) {\n        window.changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 重置索引到开头\n    window.autoReader.currentIndex = 0;\n    \n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    \n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n    \n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n    \n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none';\n      highlight.style.zIndex = '998';\n      contentContainer.appendChild(highlight);\n    }\n    \n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight &&\n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n    \n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20;\n    \n    // 尝试获取实际行高\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(window.autoReader.charPositions[i].y - window.autoReader.charPositions[i-1].y);\n        if (yDiff > 5) {\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n    \n    // 记录上次滚动的位置\n    let lastScrolledY = -1;\n    const scrollSafeZone = lineHeight * 2.5;\n    \n    // 设置字符大小的估计值\n    let charWidth = 20;\n    let charHeight = lineHeight * 0.8;\n    \n    // 尝试估计字符宽度\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        if (window.autoReader.charPositions[i].x !== window.autoReader.charPositions[i-1].x) {\n          const xDiff = Math.abs(window.autoReader.charPositions[i].x - window.autoReader.charPositions[i-1].x);\n          if (xDiff > 0 && xDiff < 50) {\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    \n    window.autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (window.autoReader.currentIndex < window.autoReader.charPositions.length && \n             window.autoReader.charPositions[window.autoReader.currentIndex]?.char.trim() === '') {\n        window.autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (window.autoReader.currentIndex >= window.autoReader.charPositions.length) {\n        if (window.currentPage < window.totalPages) {\n          window.changePage(1);\n          clearInterval(window.autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n\n      const pos = window.autoReader.charPositions[window.autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      \n      if (cursor && highlight) {\n        const contentRect = contentContainer.getBoundingClientRect();\n        \n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        \n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        \n        highlight.style.left = `${relativeX - charWidth/2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n        \n        // 滚动处理\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        \n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          \n          if (isContainerScrollable) {\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n            \n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            \n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = relativeY;\n            }\n          } else {\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n            \n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            \n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      \n      window.autoReader.currentIndex++;\n      \n    }, window.autoReader.speed);\n    \n    // 在停止自动阅读时清除所有高亮\n    window.autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n      \n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n      \n      // 调用清理函数\n      if (window.autoReader.cleanup) {\n        window.autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n    \n    // 重置翻页状态\n    window.autoReader.isPageChanging = false;\n    \n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n    \n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n    \n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n    \n    // 收集字符位置\n    window.autoReader.charPositions = getAllCharacterPositions(content);\n    \n    // 如果当前页没有内容，尝试翻页\n    if (window.autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !window.autoReader.isPageChanging) {\n        window.autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async (e) => {\n    const newMode = e.target.value;\n    const prevMode = readingMode;\n    \n    // 如果是从裸眼3D模式或舒适3D模式切换出来，恢复背景色\n    if (prevMode === 'comfortable-3d') {\n      restoreDarkBackground();\n    }\n    \n    // 停止当前可能正在运行的节奏阅读\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    if (window.flashReader && window.flashReader.cleanup) {\n      window.flashReader.cleanup();\n    }\n    \n    // 清理旧模式\n    cleanupDOM();\n    \n    // 更新状态\n    setReadingMode(newMode);\n    \n    // 应用新模式\n    if (pdfDocument && currentPage > 0) {\n      try {\n        const page = await pdfDocument.getPage(currentPage);\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        let processedContent = '';\n        \n        // 应用对应模式的文本处理\n        switch(newMode) {\n          case 'follow-mouse':\n            processedContent = formatTextForMouseFollow(extractedText);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlight(extractedText);\n            break;\n          case 'rhythm':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          case 'comfortable-3d':\n            processedContent = applyComfortable3dEffect(extractedText);\n            setTimeout(applyDarkBackground, 50);\n            break;\n          case 'flash-reading':\n            addFlashReadingStyles();\n            processedContent = createFlashReadingContent(extractedText);\n            setTimeout(applyDarkBackground, 50);\n            setTimeout(initializeFlashReading, 100);\n            break;\n          default:\n            processedContent = formatTextToHtml(extractedText);\n        }\n        \n        const contentArea = document.querySelector('.page-content');\n        if (contentArea) {\n          contentArea.textContent = '';\n          contentArea.innerHTML = processedContent;\n          \n          // 滚动到页面顶部\n          window.scrollTo(0, 0);\n          if (contentArea.scrollTo) {\n            contentArea.scrollTo(0, 0);\n          }\n          \n          // 重新启动对应的阅读模式\n          if (readingMode === 'follow-mouse') {\n            initializeMouseFollow();\n          } else if (readingMode === 'rhythm' && prevMode === 'rhythm') {\n            setTimeout(() => {\n              initializeRhythmReading();\n              startRhythmReading();\n            }, 100);\n          } else if (newMode === 'comfortable-3d') {\n            setTimeout(() => {\n              applyDarkBackground();\n            }, 50);\n          }\n        }\n      } catch (error) {\n        console.error('应用新阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 首先确保移除鼠标跟随监听器\n    removeMouseFollowListeners();\n    \n    // 清理节奏阅读器\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    \n    // 清理闪读器\n    if (window.flashReader) {\n      window.flashReader.cleanup();\n    }\n    \n    // 清理舒适3D效果\n    const comfortable3DElements = document.querySelectorAll('.emboss-3d-text, .float-3d-text, .gradient-3d-text');\n    comfortable3DElements.forEach(el => el.remove());\n    \n    // 清理闪读模式元素\n    const flashReadingElements = document.querySelectorAll('.flash-reading-container, .flash-reading-display, .flash-reading-controls');\n    flashReadingElements.forEach(el => el.remove());\n    \n    // 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll(\n      '.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line, .rhythm-char'\n    );\n    highlights.forEach(el => {\n      if (el.parentNode) el.parentNode.removeChild(el);\n    });\n    \n    // 彻底替换内容区域以移除所有事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 深度克隆内容，但不克隆事件监听器\n      const contentHTML = contentArea.innerHTML;\n      const newContentArea = contentArea.cloneNode(false);\n      newContentArea.innerHTML = contentHTML;\n      \n      if (contentArea.parentNode) {\n        contentArea.parentNode.replaceChild(newContentArea, contentArea);\n      }\n    }\n    \n    // 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 移除所有特殊标记和样式\n      paragraph.removeAttribute('data-follow');\n      paragraph.removeAttribute('style');\n      \n      // 清理特殊span标签\n      paragraph.innerHTML = paragraph.innerHTML\n        .replace(/<span class=\"text-line\"[^>]*>/g, '')\n        .replace(/<span class=\"rhythm-char\"[^>]*>/g, '')\n        .replace(/<span class=\"line-highlight[^\"]*\"[^>]*>/g, '')\n        .replace(/<span class=\"mouse-highlight[^\"]*\"[^>]*>/g, '')\n        .replace(/<\\/span>/g, '');\n    });\n    \n    // 移除特殊UI元素\n    const elementsToRemove = [\n      'rhythm-speed-slider',\n      'rhythm-notification'\n    ];\n    \n    elementsToRemove.forEach(id => {\n      const element = document.getElementById(id);\n      if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    });\n    \n    // 移除暗色背景\n    document.body.classList.remove('dark-background');\n  };\n\n  const handleAutoScroll = () => {\n    window.autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = (e) => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    \n    const rect = contentArea.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    \n    clearAllHighlights();\n    \n    const paragraphs = contentArea.querySelectorAll('p');\n    paragraphs.forEach(paragraph => {\n      const paragraphRect = paragraph.getBoundingClientRect();\n      const paragraphX = paragraphRect.left - rect.left;\n      const paragraphY = paragraphRect.top - rect.top;\n      \n      if (y >= paragraphY && y <= paragraphY + paragraphRect.height) {\n        const words = paragraph.querySelectorAll('span');\n        words.forEach(word => {\n          const wordRect = word.getBoundingClientRect();\n          const wordX = wordRect.left - rect.left;\n          \n          if (x >= wordX && x <= wordX + wordRect.width) {\n            word.classList.add('highlight');\n          }\n        });\n      }\n    });\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 专门用于移除鼠标跟随事件的函数\n  const removeMouseFollowListeners = () => {\n    // 移除记录的所有监听器\n    if (window.eventTracker && window.eventTracker.mouseFollowHandlers) {\n      window.eventTracker.mouseFollowHandlers.forEach(({element, event, handler}) => {\n        if (element && element.removeEventListener) {\n          element.removeEventListener(event, handler);\n        }\n      });\n      window.eventTracker.mouseFollowHandlers = [];\n    }\n    \n    // 为安全起见，尝试从document和内容区域移除通用处理函数\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    }\n    \n    document.removeEventListener('mousemove', handleMouseMove);\n    \n    // 清除所有当前高亮\n    clearAllHighlights();\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n    addComfortable3DStyles();\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 新增延迟补偿\n    setTimeout(() => {\n      addMouseFollowListeners();\n      \n      // 强制触发重排\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        void contentArea.offsetHeight;\n        \n        // 模拟鼠标移动事件\n        const fakeEvent = new MouseEvent('mousemove', {\n          clientX: window.innerWidth / 2,\n          clientY: window.innerHeight / 2,\n          bubbles: true\n        });\n        contentArea.dispatchEvent(fakeEvent);\n      }\n    }, 50);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = (delta) => {\n    window.autoReader.speed = Math.max(100, window.autoReader.speed + delta);\n    \n    if (window.autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async (delta) => {\n    const newPage = currentPage + delta;\n    \n    if (newPage < 1 || newPage > totalPages) return;\n    \n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n    const wasFlashReading = readingMode === 'flash-reading' && window.flashReader && window.flashReader.isPlaying;\n    \n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    \n    if (wasFlashReading && window.flashReader) {\n      window.flashReader.cleanup();\n    }\n    \n    // 更新页码\n    setCurrentPage(newPage);\n    \n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n      // 按当前阅读模式处理内容\n      let processedContent = '';\n      switch(readingMode) {\n        case 'follow-mouse':\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'rhythm':\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffect(extractedText);\n          break;\n        case 'flash-reading':\n          processedContent = createFlashReadingContent(extractedText);\n          setTimeout(() => {\n            initializeFlashReading();\n            if (wasFlashReading) {\n              const startBtn = document.getElementById('flash-reading-start');\n              if (startBtn) startBtn.click();\n            }\n          }, 100);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      \n      // 更新页面内容\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        contentArea.textContent = '';\n        contentArea.innerHTML = processedContent;\n        \n        // 滚动到页面顶部\n        window.scrollTo(0, 0);\n        if (contentArea.scrollTo) {\n          contentArea.scrollTo(0, 0);\n        }\n        \n        // 重新启动对应的阅读模式\n        if (readingMode === 'follow-mouse') {\n          initializeMouseFollow();\n        } else if (readingMode === 'rhythm' && wasRhythmReading) {\n          setTimeout(() => {\n            initializeRhythmReading();\n            startRhythmReading();\n          }, 100);\n        }\n      }\n    } catch (error) {\n      console.error('页面切换错误:', error);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        <div className=\"logo\">\n          <h2>ADHD阅读助手</h2>\n        </div>\n        \n        <div className=\"reading-controls\">\n          <h3>阅读模式</h3>\n          <select \n            id=\"reading-mode-select\" \n            value={readingMode} \n            onChange={handleReadingModeChange}\n            className=\"mode-select\"\n          >\n            <option value=\"normal\">普通模式</option>\n            <option value=\"static\">静态高亮</option>\n            <option value=\"follow-mouse\">鼠标跟随</option>\n            <option value=\"rhythm\">节奏阅读</option>\n            <option value=\"flash-reading\">闪读模式</option>\n            <option value=\"comfortable-3d\">舒适3D</option>\n          </select>\n        </div>\n        \n        <div className=\"upload-section\">\n          <input \n            type=\"file\" \n            accept=\".pdf,.txt,.md\" \n            hidden\n            id=\"file-upload\"\n            onChange={handleFileUpload}\n            ref={fileRef}\n          />\n          <button \n            className=\"upload-btn\"\n            onClick={() => fileRef.current.click()}\n          >\n            上传文件 (.pdf/.txt/.md)\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"main-content\">\n        <div className=\"toolbar\">\n          {fileName && <h3 className=\"filename\">{fileName}</h3>}\n          {totalPages > 0 && (\n            <div className=\"pagination\">\n              <button \n                onClick={() => changePage(-1)} \n                disabled={currentPage <= 1}\n                className=\"page-btn\"\n              >\n                上一页\n              </button>\n              <span className=\"page-info\">\n                第 {currentPage} / {totalPages} 页\n              </span>\n              <button \n                onClick={() => changePage(1)} \n                disabled={currentPage >= totalPages}\n                className=\"page-btn\"\n              >\n                下一页\n              </button>\n            </div>\n          )}\n        </div>\n        \n        <div \n          className=\"page-content\" \n          ref={readerContainerRef}\n          dangerouslySetInnerHTML={{ __html: content }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}