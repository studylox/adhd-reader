{"ast":null,"code":"var _jsxFileName = \"D:\\\\adhd-read-helper\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 新增全局变量\nlet autoReader = {\n  currentIndex: 0,\n  charPositions: [],\n  intervalId: null,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false\n};\n\n// 节奏阅读模式的全局设置\nconst rhythmReader = {\n  active: false,\n  intervalId: null,\n  speed: 300,\n  // 默认速度(毫秒)\n  colorMarkers: [],\n  // 存储添加的颜色标记元素\n  readIndices: new Set() // 已读字符的索引集合\n};\n\n// 模拟NLP词性标注功能（实际应用中建议使用专业NLP库如nlp.js或调用API）\nconst tagPartsOfSpeech = text => {\n  // 定义所有标点符号\n  const punctuationMarks = ['，', '。', '！', '？', '；', '：', '（', '）', '【', '】', '《', '》', '〈', '〉', '…', '—', '～', '·', ',', '.', '!', '?', ';', ':', '(', ')', '[', ']', '{', '}', '-', '...', '..'];\n\n  // 将文本按标点符号分割，保留标点符号\n  const segments = text.split(new RegExp(`([${punctuationMarks.map(mark => '\\\\' + mark).join('')}])`));\n  let result = '';\n  let colorIndex = 0; // 0: 红色, 1: 蓝色, 2: 黑色\n  let currentText = '';\n  segments.forEach((segment, index) => {\n    // 跳过空字符串和纯空格\n    if (!segment || /^\\s+$/.test(segment)) {\n      result += segment;\n      return;\n    }\n\n    // 检查是否是标点符号\n    const isPunctuation = punctuationMarks.includes(segment);\n\n    // 根据索引选择颜色\n    let color;\n    switch (colorIndex) {\n      case 0:\n        color = 'red';\n        break;\n      case 1:\n        color = 'blue';\n        break;\n      case 2:\n        color = 'black';\n        break;\n      default:\n        color = 'black';\n    }\n\n    // 将当前文本和标点符号放在同一个颜色块中\n    if (isPunctuation) {\n      // 如果有累积的文本，先添加文本\n      if (currentText) {\n        result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n        currentText = '';\n      }\n      // 添加标点符号\n      result += `<span class=\"highlight-word ${color}\">${segment}</span>`;\n      // 切换颜色\n      colorIndex = (colorIndex + 1) % 3;\n    } else {\n      // 累积文本\n      currentText += segment;\n    }\n  });\n\n  // 处理最后可能剩余的文本\n  if (currentText) {\n    const color = colorIndex === 0 ? 'red' : colorIndex === 1 ? 'blue' : 'black';\n    result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n  }\n  return result;\n};\nconst App = () => {\n  _s();\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const autoReadGuideRef = useRef(null);\n  const autoReadIntervalRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n\n  // 新增自动阅读器状态\n  const [autoReaderState, setAutoReaderState] = useState({\n    currentIndex: 0,\n    charPositions: [],\n    intervalId: null,\n    speed: 300,\n    pageContainer: null,\n    isUserScrolling: false,\n    scrollTimeout: null,\n    contentLoaded: false\n  });\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n    return () => {\n      // 清理自动阅读定时器\n      if (autoReadIntervalRef.current) {\n        clearInterval(autoReadIntervalRef.current);\n      }\n    };\n  }, []);\n\n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async file => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n\n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n\n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n\n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({\n        scale: 1.0\n      });\n\n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async textContent => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n\n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n\n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n\n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    const lines = [...lineMap.values()];\n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    return hasTocKeywords || hasPageNumberPatterns || shortLineRatio > 0.7 && numberLineRatio > 0.3;\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n\n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n\n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n\n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n\n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = text => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    return result;\n  };\n\n  // 修改processContentPage函数\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n\n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch (mode) {\n        case 'normal':\n          // 普通模式 - 简单分段显示\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'static':\n          // 静态高亮模式 - 应用词性标注和颜色高亮\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'follow-mouse':\n          // 鼠标跟随高亮模式 - 分段落但不预先高亮，由鼠标事件触发高亮\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      setContent(processedContent);\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async file => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain') {\n      handleTxtFile(file);\n    } else {\n      alert('请上传PDF或TXT文件');\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = container => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n\n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n\n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n\n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width / 2,\n            // 水平中心\n            y: rect.bottom,\n            // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n\n    // 过滤无效位置并排序\n    return positions.filter(p => p.char.trim() !== '').sort((a, b) => {\n      // 先按行排序，同行按列排序\n      const yDiff = a.y - b.y;\n      if (Math.abs(yDiff) > 5) {\n        // 5px阈值判断是否同一行\n        return yDiff;\n      }\n      return a.x - b.x;\n    });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n\n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - containerVisibleHeight / 2;\n\n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - window.innerHeight / 2;\n\n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n\n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n\n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length ||\n      // 已到末尾\n      positions[nextIndex].char.trim() === '' ||\n      // 下一个是空白\n      positions[nextIndex].y > charPosition.y + 5) {\n        // 下一个在新行\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n\n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n\n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || current.y > prev.y + 5) {\n        // 有明显换行\n        break;\n      }\n      start--;\n    }\n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n\n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n\n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages) {\n        changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 重置索引到开头\n    autoReader.currentIndex = 0;\n\n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n\n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n\n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none'; // 不干扰鼠标事件\n      highlight.style.zIndex = '998'; // 确保在光标下层\n      contentContainer.appendChild(highlight);\n    }\n\n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n\n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20; // 默认估计值\n\n    // 尝试获取实际行高\n    if (autoReader.charPositions.length > 1) {\n      // 查找两个垂直位置不同的相邻字符\n      for (let i = 1; i < autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(autoReader.charPositions[i].y - autoReader.charPositions[i - 1].y);\n        if (yDiff > 5) {\n          // 认为有垂直距离差的是不同行\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n\n    // 记录上次滚动的位置，避免在同一区域重复滚动\n    let lastScrolledY = -1;\n    // 设置滚动安全区域（像素）\n    const scrollSafeZone = lineHeight * 2.5; // 增加安全区域适应2行滚动\n\n    // 设置字符大小的估计值（用于高亮）\n    let charWidth = 20; // 默认估计值\n    let charHeight = lineHeight * 0.8; // 设为行高的80%，看起来更自然\n\n    // 尝试估计字符宽度\n    if (autoReader.charPositions.length > 1) {\n      for (let i = 1; i < autoReader.charPositions.length; i++) {\n        if (autoReader.charPositions[i].x !== autoReader.charPositions[i - 1].x) {\n          const xDiff = Math.abs(autoReader.charPositions[i].x - autoReader.charPositions[i - 1].x);\n          if (xDiff > 0 && xDiff < 50) {\n            // 合理的字符宽度范围\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (autoReader.currentIndex < autoReader.charPositions.length && ((_autoReader$charPosit = autoReader.charPositions[autoReader.currentIndex]) === null || _autoReader$charPosit === void 0 ? void 0 : _autoReader$charPosit.char.trim()) === '') {\n        var _autoReader$charPosit;\n        autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (autoReader.currentIndex >= autoReader.charPositions.length) {\n        if (currentPage < totalPages) {\n          changePage(1);\n          clearInterval(autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n      const pos = autoReader.charPositions[autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      if (cursor && highlight) {\n        // 获取容器的位置\n        const contentRect = contentContainer.getBoundingClientRect();\n\n        // 计算光标相对于容器的坐标\n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n\n        // 更新光标位置为相对容器的坐标\n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n\n        // 更新高亮位置和大小\n        highlight.style.left = `${relativeX - charWidth / 2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n\n        // ===== 仅在需要时滚动2行高度 =====\n\n        // 检查是否已经在相近位置滚动过（避免同一区域重复滚动）\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          if (isContainerScrollable) {\n            // 容器滚动情况\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n\n            // 如果超出底部可见区域\n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2; // 滚动2行高度\n            }\n            // 如果超出顶部可见区域\n            else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2; // 向上滚动2行高度\n            }\n\n            // 仅在需要滚动时执行一次滚动\n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              // 记录此次滚动位置\n              lastScrolledY = relativeY;\n            }\n          } else {\n            // 窗口滚动情况\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n\n            // 如果超出底部可见区域\n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2; // 滚动2行高度\n            }\n            // 如果超出顶部可见区域\n            else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2; // 向上滚动2行高度\n            }\n\n            // 仅在需要滚动时执行一次滚动\n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              // 记录此次滚动位置\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      autoReader.currentIndex++;\n    }, autoReader.speed);\n\n    // 在停止自动阅读时清除所有高亮\n    autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n\n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (autoReader.intervalId) {\n      clearInterval(autoReader.intervalId);\n      autoReader.intervalId = null;\n\n      // 调用清理函数\n      if (autoReader.cleanup) {\n        autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n\n    // 重置翻页状态\n    autoReader.isPageChanging = false;\n\n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n\n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n\n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n\n    // 收集字符位置\n    autoReader.charPositions = getAllCharacterPositions(content);\n\n    // 如果当前页没有内容，尝试翻页\n    if (autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !autoReader.isPageChanging) {\n        autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async e => {\n    const newMode = e.target.value;\n\n    // 停止当前可能正在运行的自动阅读和节奏阅读\n    stopAutoReader();\n    stopRhythmReading();\n\n    // 清理旧模式\n    cleanupDOM();\n\n    // 更新状态\n    setReadingMode(newMode);\n\n    // 应用新模式\n    if (pdfDocument && currentPage > 0) {\n      try {\n        const page = await pdfDocument.getPage(currentPage);\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        let processedContent = '';\n\n        // 应用对应模式的文本处理\n        switch (newMode) {\n          case 'follow-mouse':\n            processedContent = formatTextForMouseFollow(extractedText);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlight(extractedText);\n            break;\n          case 'auto-reader':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          case 'rhythm':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          default:\n            processedContent = formatTextToHtml(extractedText);\n        }\n        const contentArea = document.querySelector('.page-content');\n        if (contentArea) {\n          contentArea.textContent = '';\n          contentArea.innerHTML = processedContent;\n\n          // 滚动到页面顶部\n          window.scrollTo(0, 0);\n          if (contentArea.scrollTo) {\n            contentArea.scrollTo(0, 0);\n          }\n\n          // 立即初始化对应模式\n          if (newMode === 'auto-reader') {\n            setTimeout(initializeAutoReader, 50);\n          } else if (newMode === 'follow-mouse') {\n            setTimeout(initializeMouseFollow, 50);\n          } else if (newMode === 'rhythm') {\n            setTimeout(startRhythmReading, 50);\n          }\n        }\n      } catch (error) {\n        console.error('应用新阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 1. 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll('.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line');\n    highlights.forEach(el => el.remove());\n\n    // 2. 移除事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 克隆内容区域以彻底移除所有事件监听器\n      const cleanContent = contentArea.cloneNode(false);\n      cleanContent.innerHTML = contentArea.innerHTML;\n      contentArea.parentNode.replaceChild(cleanContent, contentArea);\n    }\n\n    // 3. 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 创建新段落并保留基本结构\n      const newParagraph = document.createElement('p');\n      newParagraph.className = 'pdf-paragraph';\n      newParagraph.innerHTML = paragraph.innerHTML.replace(/<span class=\"text-line\">/g, '').replace(/<\\/span>/g, '');\n\n      // 移除特殊属性\n      newParagraph.removeAttribute('data-follow');\n      newParagraph.removeAttribute('style');\n      if (paragraph.parentNode) {\n        paragraph.parentNode.replaceChild(newParagraph, paragraph);\n      }\n    });\n\n    // 4. 清理自动阅读器\n    stopAutoReader();\n  };\n  const handleAutoScroll = () => {\n    autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = e => {\n    if (readingMode !== 'follow-mouse') return;\n\n    // 清除所有现有高亮\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n    const mouseTarget = document.elementFromPoint(e.clientX, e.clientY);\n    if (mouseTarget && (mouseTarget.classList.contains('pdf-paragraph') || mouseTarget.tagName === 'P' || mouseTarget.tagName === 'SPAN')) {\n      const targetParagraph = mouseTarget.closest('.pdf-paragraph');\n      if (!targetParagraph) return;\n\n      // 获取段落文本节点\n      const textNode = getTextNodeAtPosition(targetParagraph, e.clientX, e.clientY);\n      if (!textNode) return;\n\n      // 获取精确的行位置和尺寸\n      const range = document.createRange();\n      range.selectNodeContents(textNode);\n      const rects = range.getClientRects();\n\n      // 找到鼠标所在的具体行\n      let targetRect = null;\n      for (let i = 0; i < rects.length; i++) {\n        const rect = rects[i];\n        if (e.clientY >= rect.top && e.clientY <= rect.bottom) {\n          targetRect = rect;\n          break;\n        }\n      }\n      if (targetRect) {\n        // 创建高亮元素\n        const lineHighlight = document.createElement('div');\n        lineHighlight.className = 'line-highlight mouse-highlight';\n\n        // 计算相对于段落的位置\n        const paragraphRect = targetParagraph.getBoundingClientRect();\n        const top = targetRect.top - paragraphRect.top;\n        const left = targetRect.left - paragraphRect.left;\n\n        // 设置高亮样式\n        lineHighlight.style.position = 'absolute';\n        lineHighlight.style.left = `${left}px`;\n        lineHighlight.style.top = `${top}px`;\n        lineHighlight.style.width = `${targetRect.width}px`;\n        lineHighlight.style.height = `${targetRect.height}px`;\n        lineHighlight.style.pointerEvents = 'none';\n        lineHighlight.style.backgroundColor = 'rgba(255, 165, 0, 0.3)';\n        lineHighlight.style.borderRadius = '4px';\n        lineHighlight.style.boxShadow = '0 0 8px rgba(255, 165, 0, 0.5)';\n        lineHighlight.style.zIndex = '5';\n        lineHighlight.style.transition = 'all 0.1s ease';\n\n        // 确保段落有相对定位\n        targetParagraph.style.position = 'relative';\n        targetParagraph.appendChild(lineHighlight);\n      }\n    }\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 新增延迟补偿\n    setTimeout(() => {\n      addMouseFollowListeners();\n\n      // 强制触发重排\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        void contentArea.offsetHeight;\n\n        // 模拟鼠标移动事件\n        const fakeEvent = new MouseEvent('mousemove', {\n          clientX: window.innerWidth / 2,\n          clientY: window.innerHeight / 2,\n          bubbles: true\n        });\n        contentArea.dispatchEvent(fakeEvent);\n      }\n    }, 50);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = delta => {\n    autoReader.speed = Math.max(100, autoReader.speed + delta);\n    setAutoReaderState(prev => ({\n      ...prev,\n      speed: autoReader.speed\n    }));\n    if (autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async delta => {\n    const newPage = currentPage + delta;\n    if (newPage < 1 || newPage > totalPages) return;\n    const wasAutoReading = readingMode === 'auto-reader' && autoReader.intervalId;\n\n    // 如果正在自动阅读，先停止\n    if (wasAutoReading) {\n      clearInterval(autoReader.intervalId);\n      autoReader.intervalId = null;\n    }\n\n    // 更新页码\n    setCurrentPage(newPage);\n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 按当前阅读模式处理内容\n      let processedContent = '';\n      switch (readingMode) {\n        case 'follow-mouse':\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'auto-reader':\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n\n      // 更新页面内容\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        contentArea.textContent = '';\n        contentArea.innerHTML = processedContent;\n\n        // 滚动到页面顶部\n        window.scrollTo(0, 0);\n        if (contentArea.scrollTo) {\n          contentArea.scrollTo(0, 0);\n        }\n\n        // 如果之前在自动阅读，重新启动自动阅读\n        if (readingMode === 'auto-reader') {\n          // 重置翻页状态\n          autoReader.isPageChanging = false;\n\n          // 延迟一小段时间再初始化，确保DOM已更新\n          setTimeout(initializeAutoReader, 200);\n        } else if (readingMode === 'follow-mouse') {\n          setTimeout(initializeMouseFollow, 50);\n        }\n      }\n    } catch (error) {\n      console.error('翻页失败:', error);\n      // 重置翻页状态以防止卡住\n      autoReader.isPageChanging = false;\n    }\n  };\n\n  // 修改后的监听器设置函数\n  const addMouseFollowListeners = () => {\n    if (readingMode !== 'follow-mouse') return;\n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n\n    // 清理旧的监听器\n    contentArea.removeEventListener('mousemove', handleMouseMove);\n    contentArea.removeEventListener('mouseleave', clearAllHighlights);\n\n    // 添加新的监听器\n    contentArea.addEventListener('mousemove', handleMouseMove);\n    contentArea.addEventListener('mouseleave', clearAllHighlights);\n\n    // 确保所有段落都有正确的样式\n    document.querySelectorAll('.pdf-paragraph').forEach(p => {\n      p.style.position = 'relative';\n      p.style.lineHeight = '1.5';\n    });\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = text => {\n    // 分段\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n\n    // 创建HTML内容\n    let htmlContent = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      htmlContent += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 应用静态高亮\n  const applyStaticHighlight = text => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    let htmlContent = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      // 新增强制清理逻辑\n      const cleanParagraph = paragraph.replace(/<span class=\"text-line\">/g, '').replace(/<\\/span>/g, '');\n      const highlightedText = processTextWithHighlight(cleanParagraph);\n      htmlContent += `<p class=\"pdf-paragraph\">${highlightedText}</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 格式化文本用于鼠标跟随高亮模式\n  const formatTextForMouseFollow = text => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    let htmlContent = '<div class=\"pdf-content mouse-follow-content\">';\n    paragraphs.forEach(paragraph => {\n      // 将段落分割成行\n      const lines = paragraph.split('\\n').filter(line => line.trim());\n      htmlContent += `<p class=\"pdf-paragraph\" data-follow=\"true\" style=\"position: relative; line-height: 1.5;\">`;\n      lines.forEach((line, i) => {\n        // 每行用span包裹\n        htmlContent += `<span class=\"text-line\" style=\"display: block;\">${line}</span>`;\n      });\n      htmlContent += `</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 启动节奏阅读模式\n  const startRhythmReading = () => {\n    // 如果已经在运行，先停止\n    stopRhythmReading();\n\n    // 设置为活动状态\n    rhythmReader.active = true;\n\n    // 初始化当前位置\n    rhythmReader.currentIndex = autoReader.currentIndex || 0;\n\n    // 添加速度调节滑块\n    addSpeedSlider();\n\n    // 进行初始标记\n    updateCharColors();\n\n    // 滚动到当前位置\n    scrollToCurrentPosition();\n\n    // 设置阅读间隔\n    rhythmReader.intervalId = setInterval(() => {\n      // 将当前字符标记为已读\n      rhythmReader.readIndices.add(rhythmReader.currentIndex);\n\n      // 移动到下一个非空白字符\n      do {\n        var _autoReader$charPosit2;\n        rhythmReader.currentIndex++;\n      } while (rhythmReader.currentIndex < autoReader.charPositions.length && ((_autoReader$charPosit2 = autoReader.charPositions[rhythmReader.currentIndex]) === null || _autoReader$charPosit2 === void 0 ? void 0 : _autoReader$charPosit2.char.trim()) === '');\n\n      // 检查是否到达页面末尾\n      if (rhythmReader.currentIndex >= autoReader.charPositions.length) {\n        if (currentPage < totalPages) {\n          changePage(1);\n          stopRhythmReading();\n          // 在新页面加载后自动重启节奏阅读\n          setTimeout(() => {\n            if (rhythmReader.active) {\n              startRhythmReading();\n            }\n          }, 500);\n        } else {\n          stopRhythmReading();\n        }\n        return;\n      }\n\n      // 更新字符颜色\n      updateCharColors();\n\n      // 滚动到当前位置\n      scrollToCurrentPosition();\n    }, rhythmReader.speed);\n  };\n\n  // 停止节奏阅读模式\n  const stopRhythmReading = () => {\n    if (rhythmReader.intervalId) {\n      clearInterval(rhythmReader.intervalId);\n      rhythmReader.intervalId = null;\n    }\n\n    // 清除字符颜色标记\n    clearCharColors();\n\n    // 移除速度滑块\n    const slider = document.getElementById('rhythm-speed-slider');\n    if (slider) slider.remove();\n\n    // 保存当前位置到autoReader\n    if (rhythmReader.currentIndex !== undefined) {\n      autoReader.currentIndex = rhythmReader.currentIndex;\n    }\n    rhythmReader.active = false;\n  };\n\n  // 更新字符颜色\n  const updateCharColors = () => {\n    // 首先清除现有颜色标记\n    clearCharColors();\n\n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    const containerRect = contentContainer.getBoundingClientRect();\n\n    // 为需要标记的字符添加颜色覆盖\n    autoReader.charPositions.forEach((pos, index) => {\n      if (!pos || pos.char.trim() === '') return; // 跳过空白字符\n\n      // 确定颜色\n      let color;\n      if (index === rhythmReader.currentIndex) {\n        color = 'rgba(0, 200, 0, 0.7)'; // 当前阅读的字 - 绿色\n      } else if (index === rhythmReader.currentIndex + 1 || index === rhythmReader.currentIndex + 2) {\n        color = 'rgba(0, 0, 0, 0.7)'; // 接下来两个字 - 淡黑色\n      } else if (rhythmReader.readIndices.has(index)) {\n        color = 'rgba(0, 0, 0, 0.9)'; // 已读字符 - 黑色\n      } else {\n        color = 'rgba(0, 0, 0, 0.3)'; // 未读字符 - 淡灰色\n      }\n\n      // 创建覆盖元素\n      const marker = document.createElement('div');\n      marker.textContent = pos.char;\n      marker.className = 'rhythm-char-marker';\n      marker.style.position = 'absolute';\n      marker.style.left = `${pos.x - containerRect.left}px`;\n      marker.style.top = `${pos.y - containerRect.top}px`;\n      marker.style.transform = 'translate(-50%, -50%)';\n      marker.style.color = color;\n      marker.style.zIndex = '9999';\n      marker.style.pointerEvents = 'none';\n\n      // 使用与原始文本相同的字体设置\n      try {\n        if (pos.element) {\n          const computedStyle = window.getComputedStyle(pos.element);\n          marker.style.fontFamily = computedStyle.fontFamily;\n          marker.style.fontSize = computedStyle.fontSize;\n          marker.style.fontWeight = computedStyle.fontWeight;\n        }\n      } catch (e) {\n        console.warn('无法复制原始字体样式', e);\n      }\n\n      // 添加到页面\n      contentContainer.appendChild(marker);\n\n      // 保存引用以便后续清理\n      rhythmReader.colorMarkers.push(marker);\n    });\n\n    // 添加一个半透明覆盖层来隐藏原始文本\n    const textHider = document.createElement('div');\n    textHider.className = 'rhythm-text-hider';\n    textHider.style.position = 'absolute';\n    textHider.style.top = '0';\n    textHider.style.left = '0';\n    textHider.style.width = '100%';\n    textHider.style.height = '100%';\n    textHider.style.backgroundColor = 'rgba(255, 255, 255, 0.7)';\n    textHider.style.zIndex = '9998';\n    textHider.style.pointerEvents = 'none';\n    contentContainer.appendChild(textHider);\n    rhythmReader.colorMarkers.push(textHider);\n  };\n\n  // 清除字符颜色标记\n  const clearCharColors = () => {\n    // 移除所有标记元素\n    rhythmReader.colorMarkers.forEach(marker => {\n      if (marker && marker.parentNode) {\n        marker.parentNode.removeChild(marker);\n      }\n    });\n    rhythmReader.colorMarkers = [];\n  };\n\n  // 滚动到当前位置\n  const scrollToCurrentPosition = () => {\n    const pos = autoReader.charPositions[rhythmReader.currentIndex];\n    if (!pos) return;\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n\n    // 估计的行高\n    let lineHeight = 20; // 默认估计值\n\n    // 尝试获取实际行高\n    if (autoReader.charPositions.length > 1) {\n      for (let i = 1; i < autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(autoReader.charPositions[i].y - autoReader.charPositions[i - 1].y);\n        if (yDiff > 5) {\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n    if (isContainerScrollable) {\n      // 容器滚动情况\n      const contentRect = contentContainer.getBoundingClientRect();\n      const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n      const visibleTop = contentContainer.scrollTop;\n      const visibleBottom = visibleTop + contentContainer.clientHeight;\n\n      // 如果超出可见区域\n      if (relativeY > visibleBottom - lineHeight * 2 || relativeY < visibleTop + lineHeight * 2) {\n        contentContainer.scrollBy({\n          top: lineHeight * 2 * (relativeY > visibleBottom - lineHeight * 2 ? 1 : -1),\n          behavior: 'smooth'\n        });\n      }\n    } else {\n      // 窗口滚动情况\n      const absoluteY = pos.y;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n\n      // 如果超出可见区域\n      if (absoluteY > visibleBottom - lineHeight * 2 || absoluteY < visibleTop + lineHeight * 2) {\n        window.scrollBy({\n          top: lineHeight * 2 * (absoluteY > visibleBottom - lineHeight * 2 ? 1 : -1),\n          behavior: 'smooth'\n        });\n      }\n    }\n  };\n\n  // 添加速度调节滑块\n  const addSpeedSlider = () => {\n    // 检查是否已经存在\n    let slider = document.getElementById('rhythm-speed-slider');\n    if (slider) return;\n\n    // 创建滑块容器\n    const container = document.createElement('div');\n    container.id = 'rhythm-speed-slider';\n    container.style.position = 'fixed';\n    container.style.bottom = '20px';\n    container.style.left = '50%';\n    container.style.transform = 'translateX(-50%)';\n    container.style.backgroundColor = 'white';\n    container.style.padding = '10px';\n    container.style.borderRadius = '5px';\n    container.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';\n    container.style.zIndex = '10000';\n    container.style.display = 'flex';\n    container.style.alignItems = 'center';\n\n    // 添加标签\n    const label = document.createElement('label');\n    label.textContent = '阅读速度: ';\n    label.style.marginRight = '8px';\n    container.appendChild(label);\n\n    // 添加滑块\n    const input = document.createElement('input');\n    input.type = 'range';\n    input.min = '50';\n    input.max = '1000';\n    input.step = '50';\n    input.value = rhythmReader.speed;\n    input.style.width = '200px';\n\n    // 添加数值显示\n    const valueDisplay = document.createElement('span');\n    valueDisplay.textContent = `${rhythmReader.speed}ms`;\n    valueDisplay.style.marginLeft = '8px';\n    valueDisplay.style.minWidth = '60px';\n\n    // 添加事件监听\n    input.addEventListener('input', function () {\n      const newSpeed = parseInt(this.value);\n      rhythmReader.speed = newSpeed;\n      valueDisplay.textContent = `${newSpeed}ms`;\n\n      // 实时更新间隔\n      if (rhythmReader.intervalId) {\n        clearInterval(rhythmReader.intervalId);\n        rhythmReader.intervalId = setInterval(() => {\n          // 将当前字符标记为已读\n          rhythmReader.readIndices.add(rhythmReader.currentIndex);\n\n          // 移动到下一个非空白字符\n          do {\n            var _autoReader$charPosit3;\n            rhythmReader.currentIndex++;\n          } while (rhythmReader.currentIndex < autoReader.charPositions.length && ((_autoReader$charPosit3 = autoReader.charPositions[rhythmReader.currentIndex]) === null || _autoReader$charPosit3 === void 0 ? void 0 : _autoReader$charPosit3.char.trim()) === '');\n\n          // 检查是否到达页面末尾\n          if (rhythmReader.currentIndex >= autoReader.charPositions.length) {\n            if (currentPage < totalPages) {\n              changePage(1);\n              stopRhythmReading();\n              // 在新页面加载后自动重启节奏阅读\n              setTimeout(() => {\n                if (rhythmReader.active) {\n                  startRhythmReading();\n                }\n              }, 500);\n            } else {\n              stopRhythmReading();\n            }\n            return;\n          }\n\n          // 更新字符颜色\n          updateCharColors();\n\n          // 滚动到当前位置\n          scrollToCurrentPosition();\n        }, newSpeed);\n      }\n    });\n    container.appendChild(input);\n    container.appendChild(valueDisplay);\n    document.body.appendChild(container);\n  };\n\n  // 集成到现有下拉栏中\n  const integrateToExistingDropdown = () => {\n    // 查找阅读模式下拉菜单\n    const dropdown = document.querySelector('.reading-mode-dropdown');\n\n    // 如果找不到，尝试查找其他可能的菜单位置\n    const possibleMenus = [document.querySelector('.reading-options'), document.querySelector('.settings-dropdown'), document.querySelector('#reading-options-menu'), document.querySelector('[data-role=\"reading-menu\"]')];\n    let menuContainer = dropdown || possibleMenus.find(menu => menu);\n\n    // 如果还是找不到，尝试找阅读模式按钮并在其旁边创建节奏阅读按钮\n    if (!menuContainer) {\n      // 查找起始自动阅读的按钮\n      const autoReaderButton = Array.from(document.querySelectorAll('button')).find(btn => btn.textContent.includes('开始阅读') || btn.textContent.includes('自动阅读') || btn.textContent.includes('阅读模式'));\n      if (autoReaderButton && autoReaderButton.parentNode) {\n        // 在原按钮旁边创建节奏阅读按钮\n        const rhythmButton = document.createElement('button');\n        rhythmButton.className = autoReaderButton.className; // 使用相同样式\n        rhythmButton.style.margin = '0 5px';\n        rhythmButton.textContent = '节奏阅读';\n\n        // 添加点击事件监听\n        rhythmButton.addEventListener('click', toggleRhythmReading);\n\n        // 将按钮插入到原按钮后面\n        if (autoReaderButton.nextSibling) {\n          autoReaderButton.parentNode.insertBefore(rhythmButton, autoReaderButton.nextSibling);\n        } else {\n          autoReaderButton.parentNode.appendChild(rhythmButton);\n        }\n        return;\n      }\n    }\n\n    // 如果找到了菜单容器，添加节奏阅读选项\n    if (menuContainer) {\n      // 创建新选项\n      const rhythmOption = document.createElement('div');\n      rhythmOption.className = 'menu-item'; // 使用与其他菜单项相同的样式\n      rhythmOption.textContent = '节奏阅读';\n      rhythmOption.style.cursor = 'pointer';\n      rhythmOption.style.padding = '8px 12px';\n\n      // 添加点击事件\n      rhythmOption.addEventListener('click', toggleRhythmReading);\n\n      // 添加到菜单\n      menuContainer.appendChild(rhythmOption);\n    } else {\n      // 作为后备，创建一个独立按钮\n      const button = document.createElement('button');\n      button.textContent = '节奏阅读';\n      button.style.position = 'fixed';\n      button.style.top = '20px';\n      button.style.right = '20px';\n      button.style.zIndex = '10000';\n      button.style.padding = '5px 10px';\n      button.addEventListener('click', toggleRhythmReading);\n      document.body.appendChild(button);\n    }\n  };\n\n  // 切换节奏阅读模式\n  const toggleRhythmReading = () => {\n    // 停止自动阅读(如果在运行)\n    if (typeof stopAutoReader === 'function') {\n      stopAutoReader();\n    }\n    if (!rhythmReader.active) {\n      // 立即启动节奏阅读\n      rhythmReader.active = true; // 先设置为活动状态\n      startRhythmReading();\n      // 更新按钮文本(如果是按钮)\n      if (this.tagName === 'BUTTON' || this.className === 'menu-item') {\n        this.dataset.originalText = this.textContent;\n        this.textContent = '停止节奏阅读';\n      }\n    } else {\n      // 停止节奏阅读\n      stopRhythmReading();\n      // 恢复按钮文本\n      if (this.dataset.originalText) {\n        this.textContent = this.dataset.originalText;\n      }\n    }\n  };\n\n  // 自动集成到现有UI\n  integrateToExistingDropdown();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1696,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1695,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"upload-btn\",\n        children: [\"\\u9009\\u62E9\\u6587\\u4EF6\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".pdf,.txt\",\n          onChange: handleFileUpload,\n          style: {\n            display: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1700,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1698,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1694,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1710,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mode-selector\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: readingMode,\n              onChange: handleReadingModeChange,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"normal\",\n                children: \"\\u666E\\u901A\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1714,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"static\",\n                children: \"\\u9759\\u6001\\u9AD8\\u4EAE\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1715,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"follow-mouse\",\n                children: \"\\u9F20\\u6807\\u8DDF\\u968F\\u9AD8\\u4EAE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1716,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"auto-reader\",\n                children: \"\\u81EA\\u52A8\\u9605\\u8BFB\\u5668\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1717,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"rhythm\",\n                children: \"\\u8282\\u594F\\u9605\\u8BFB\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1718,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1713,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1712,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mode-selector\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: posMode,\n              onChange: e => setPosMode(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"none\",\n                children: \"\\u65E0\\u8BCD\\u6027\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1723,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"noun\",\n                children: \"\\u540D\\u8BCD\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1724,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"all\",\n                children: \"\\u5168\\u8BCD\\u6027\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1725,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1722,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1721,\n            columnNumber: 13\n          }, this), readingMode === 'auto-reader' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"speed-control\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => adjustSpeed(-100),\n              children: \"-\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1730,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [autoReaderState.speed, \"ms\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1731,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => adjustSpeed(100),\n              children: \"+\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1732,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1729,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1711,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1709,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-content\",\n        children: content ? /*#__PURE__*/_jsxDEV(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: content\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1739,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-state\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u8BF7\\u4E0A\\u4F20PDF\\u6216TXT\\u6587\\u4EF6\\u5F00\\u59CB\\u9605\\u8BFB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1742,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1741,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1737,\n        columnNumber: 9\n      }, this), content && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"page-btn prev\",\n          onClick: () => changePage(-1),\n          disabled: currentPage === 1,\n          children: \"\\u4E0A\\u4E00\\u9875\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1748,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"page-info\",\n          children: [\"\\u7B2C \", currentPage, \" \\u9875 / \\u5171 \", totalPages, \" \\u9875\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1751,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"page-btn next\",\n          onClick: () => changePage(1),\n          disabled: currentPage === totalPages,\n          children: \"\\u4E0B\\u4E00\\u9875\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1754,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1747,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1708,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1693,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"FdIIE1mY5AAmB921foSmrxDLqNQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","pdfjsLib","pdfjsViewer","marked","pdfjs","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","autoReader","currentIndex","charPositions","intervalId","speed","pageContainer","isScrolling","currentPage","isPageChanging","rhythmReader","active","colorMarkers","readIndices","Set","tagPartsOfSpeech","text","punctuationMarks","segments","split","RegExp","map","mark","join","result","colorIndex","currentText","forEach","segment","index","test","isPunctuation","includes","color","App","_s","pages","setPages","setCurrentPage","totalPages","setTotalPages","fileName","setFileName","loading","setLoading","fileRef","file","setFile","pdfInstance","setPdfInstance","extractedTextPages","setExtractedTextPages","readingMode","setReadingMode","posMode","setPosMode","markdownContent","setMarkdownContent","readerContainerRef","autoReadGuideRef","autoReadIntervalRef","content","setContent","pdfDocument","setPdfDocument","autoReaderState","setAutoReaderState","isUserScrolling","scrollTimeout","contentLoaded","current","clearInterval","setTimeout","initializeMouseFollow","handlePdfFile","fileURL","URL","createObjectURL","loadingTask","getDocument","pdf","promise","numPages","extractAndProcessPage","console","log","error","alert","pageNum","page","getPage","textContent","getTextContent","viewport","getViewport","scale","isTableOfContents","detectIfTocPage","processTocPage","processContentPage","addMouseFollowListeners","textItems","items","fullText","item","str","hasTocKeywords","hasPageNumberPatterns","shortLinesCount","linesWithNumbersCount","lineMap","Map","yKey","Math","round","transform","has","set","get","push","lines","values","line","lineText","length","shortLineRatio","numberLineRatio","htmlContent","x","y","height","fontSize","sqrt","fontWeight","fontName","toLowerCase","spacedText","getTextNodeAtPosition","element","nodes","childNodes","i","node","nodeType","Node","TEXT_NODE","range","document","createRange","selectNodeContents","rects","getClientRects","j","rect","top","bottom","left","right","ELEMENT_NODE","found","processTextWithHighlight","words","lastColor","word","random","mode","extractedText","replace","trim","processedContent","formatTextToHtml","applyStaticHighlight","formatTextForMouseFollow","handleTxtFile","pageTexts","paragraph","fontFamily","handleFileUpload","e","target","files","type","getAllCharacterPositions","container","walker","createTreeWalker","NodeFilter","SHOW_TEXT","positions","nextNode","currentNode","setStart","setEnd","getBoundingClientRect","width","char","warn","filter","p","sort","a","b","yDiff","abs","scrollElementToCenter","elementY","isContainerScrollable","scrollHeight","clientHeight","window","getComputedStyle","overflowY","targetScrollTop","containerVisibleHeight","scrollTo","max","behavior","absoluteElementY","innerHeight","createReaderCursor","cursor","createElement","id","style","cssText","getElementById","head","appendChild","isSentenceEnd","charPosition","sentenceEndMarks","nextIndex","findSentenceStart","start","prev","isInVisibleArea","threshold","visibleTop","scrollTop","visibleBottom","topThreshold","bottomThreshold","scrollY","startAutoReader","changePage","contentContainer","querySelector","position","highlight","backgroundColor","borderRadius","pointerEvents","zIndex","lineHeight","lastScrolledY","scrollSafeZone","charWidth","charHeight","xDiff","setInterval","_autoReader$charPosit","stopAutoReader","pos","contentRect","relativeX","relativeY","isInRecentlyScrolledArea","needsScroll","scrollAmount","scrollBy","absoluteY","cleanup","remove","initializeAutoReader","handleReadingModeChange","newMode","value","stopRhythmReading","cleanupDOM","contentArea","innerHTML","startRhythmReading","highlights","querySelectorAll","el","cleanContent","cloneNode","parentNode","replaceChild","paragraphs","newParagraph","className","removeAttribute","handleAutoScroll","updateCursorPosition","force","handleMouseMove","mouseTarget","elementFromPoint","clientX","clientY","classList","contains","tagName","targetParagraph","closest","textNode","targetRect","lineHighlight","paragraphRect","boxShadow","transition","clearAllHighlights","addAutoReaderStyles","offsetHeight","fakeEvent","MouseEvent","innerWidth","bubbles","dispatchEvent","adjustSpeed","delta","newPage","wasAutoReading","removeEventListener","addEventListener","cleanParagraph","highlightedText","addSpeedSlider","updateCharColors","scrollToCurrentPosition","add","_autoReader$charPosit2","clearCharColors","slider","undefined","containerRect","marker","computedStyle","textHider","removeChild","padding","display","alignItems","label","marginRight","input","min","step","valueDisplay","marginLeft","minWidth","newSpeed","parseInt","_autoReader$charPosit3","body","integrateToExistingDropdown","dropdown","possibleMenus","menuContainer","find","menu","autoReaderButton","Array","from","btn","rhythmButton","margin","toggleRhythmReading","nextSibling","insertBefore","rhythmOption","button","dataset","originalText","children","_jsxFileName","lineNumber","columnNumber","accept","onChange","onClick","dangerouslySetInnerHTML","__html","disabled","_c","$RefreshReg$"],"sources":["D:/adhd-read-helper/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 新增全局变量\nlet autoReader = {\n  currentIndex: 0,\n  charPositions: [],\n  intervalId: null,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false\n};\n\n// 节奏阅读模式的全局设置\nconst rhythmReader = {\n  active: false,\n  intervalId: null,\n  speed: 300, // 默认速度(毫秒)\n  colorMarkers: [], // 存储添加的颜色标记元素\n  readIndices: new Set() // 已读字符的索引集合\n};\n\n// 模拟NLP词性标注功能（实际应用中建议使用专业NLP库如nlp.js或调用API）\nconst tagPartsOfSpeech = (text) => {\n  // 定义所有标点符号\n  const punctuationMarks = [\n    '，', '。', '！', '？', '；', '：', '（', '）', '【', '】', '《', '》', '〈', '〉', '…', '—', '～', '·',\n    ',', '.', '!', '?', ';', ':', '(', ')', '[', ']', '{', '}', '-', '...', '..'\n  ];\n  \n  // 将文本按标点符号分割，保留标点符号\n  const segments = text.split(new RegExp(`([${punctuationMarks.map(mark => '\\\\' + mark).join('')}])`));\n  let result = '';\n  let colorIndex = 0; // 0: 红色, 1: 蓝色, 2: 黑色\n  let currentText = '';\n  \n  segments.forEach((segment, index) => {\n    // 跳过空字符串和纯空格\n    if (!segment || /^\\s+$/.test(segment)) {\n      result += segment;\n      return;\n    }\n    \n    // 检查是否是标点符号\n    const isPunctuation = punctuationMarks.includes(segment);\n    \n    // 根据索引选择颜色\n    let color;\n    switch (colorIndex) {\n      case 0:\n        color = 'red';\n        break;\n      case 1:\n        color = 'blue';\n        break;\n      case 2:\n        color = 'black';\n        break;\n      default:\n        color = 'black';\n    }\n    \n    // 将当前文本和标点符号放在同一个颜色块中\n    if (isPunctuation) {\n      // 如果有累积的文本，先添加文本\n      if (currentText) {\n        result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n        currentText = '';\n      }\n      // 添加标点符号\n      result += `<span class=\"highlight-word ${color}\">${segment}</span>`;\n      // 切换颜色\n      colorIndex = (colorIndex + 1) % 3;\n    } else {\n      // 累积文本\n      currentText += segment;\n    }\n  });\n  \n  // 处理最后可能剩余的文本\n  if (currentText) {\n    const color = colorIndex === 0 ? 'red' : colorIndex === 1 ? 'blue' : 'black';\n    result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n  }\n  \n  return result;\n};\n\nconst App = () => {\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const autoReadGuideRef = useRef(null);\n  const autoReadIntervalRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  \n  // 新增自动阅读器状态\n  const [autoReaderState, setAutoReaderState] = useState({\n    currentIndex: 0,\n    charPositions: [],\n    intervalId: null,\n    speed: 300,\n    pageContainer: null,\n    isUserScrolling: false,\n    scrollTimeout: null,\n    contentLoaded: false\n  });\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n    \n    return () => {\n      // 清理自动阅读定时器\n      if (autoReadIntervalRef.current) {\n        clearInterval(autoReadIntervalRef.current);\n      }\n    };\n  }, []);\n  \n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async (file) => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      \n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n      \n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n      \n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n  \n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({ scale: 1.0 });\n      \n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      \n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      \n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async (textContent) => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n    \n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n    \n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n    \n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    \n    const lines = [...lineMap.values()];\n    \n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    \n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    \n    return hasTocKeywords || hasPageNumberPatterns || (shortLineRatio > 0.7 && numberLineRatio > 0.3);\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n    \n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    \n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n      \n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n      \n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n      \n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    \n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && \n              x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = (text) => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    \n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      \n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        \n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    \n    return result;\n  };\n\n  // 修改processContentPage函数\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      \n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch(mode) {\n        case 'normal':\n          // 普通模式 - 简单分段显示\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'static':\n          // 静态高亮模式 - 应用词性标注和颜色高亮\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'follow-mouse':\n          // 鼠标跟随高亮模式 - 分段落但不预先高亮，由鼠标事件触发高亮\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      \n      setContent(processedContent);\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async (file) => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n    \n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain') {\n      handleTxtFile(file);\n    } else {\n      alert('请上传PDF或TXT文件');\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = (container) => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    \n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n      \n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n      \n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          \n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n          \n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width/2,  // 水平中心\n            y: rect.bottom,               // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n    \n    // 过滤无效位置并排序\n    return positions\n      .filter(p => p.char.trim() !== '')\n      .sort((a, b) => {\n        // 先按行排序，同行按列排序\n        const yDiff = a.y - b.y;\n        if (Math.abs(yDiff) > 5) { // 5px阈值判断是否同一行\n          return yDiff;\n        }\n        return a.x - b.x;\n      });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    \n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - (containerVisibleHeight / 2);\n      \n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - (window.innerHeight / 2);\n      \n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    \n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n    \n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    \n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n    \n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length || // 已到末尾\n          positions[nextIndex].char.trim() === '' || // 下一个是空白\n          positions[nextIndex].y > charPosition.y + 5) { // 下一个在新行\n        return true;\n      }\n    }\n    \n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n    \n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n      \n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || \n          current.y > prev.y + 5) { // 有明显换行\n        break;\n      }\n      \n      start--;\n    }\n    \n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n      \n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      \n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n      \n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      \n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages) {\n        changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 重置索引到开头\n    autoReader.currentIndex = 0;\n    \n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    \n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n    \n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n    \n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none'; // 不干扰鼠标事件\n      highlight.style.zIndex = '998'; // 确保在光标下层\n      contentContainer.appendChild(highlight);\n    }\n    \n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight &&\n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n    \n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20; // 默认估计值\n    \n    // 尝试获取实际行高\n    if (autoReader.charPositions.length > 1) {\n      // 查找两个垂直位置不同的相邻字符\n      for (let i = 1; i < autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(autoReader.charPositions[i].y - autoReader.charPositions[i-1].y);\n        if (yDiff > 5) { // 认为有垂直距离差的是不同行\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n    \n    // 记录上次滚动的位置，避免在同一区域重复滚动\n    let lastScrolledY = -1;\n    // 设置滚动安全区域（像素）\n    const scrollSafeZone = lineHeight * 2.5; // 增加安全区域适应2行滚动\n    \n    // 设置字符大小的估计值（用于高亮）\n    let charWidth = 20; // 默认估计值\n    let charHeight = lineHeight * 0.8; // 设为行高的80%，看起来更自然\n    \n    // 尝试估计字符宽度\n    if (autoReader.charPositions.length > 1) {\n      for (let i = 1; i < autoReader.charPositions.length; i++) {\n        if (autoReader.charPositions[i].x !== autoReader.charPositions[i-1].x) {\n          const xDiff = Math.abs(autoReader.charPositions[i].x - autoReader.charPositions[i-1].x);\n          if (xDiff > 0 && xDiff < 50) { // 合理的字符宽度范围\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    \n    autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (autoReader.currentIndex < autoReader.charPositions.length && \n             autoReader.charPositions[autoReader.currentIndex]?.char.trim() === '') {\n        autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (autoReader.currentIndex >= autoReader.charPositions.length) {\n        if (currentPage < totalPages) {\n          changePage(1);\n          clearInterval(autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n\n      const pos = autoReader.charPositions[autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      \n      if (cursor && highlight) {\n        // 获取容器的位置\n        const contentRect = contentContainer.getBoundingClientRect();\n        \n        // 计算光标相对于容器的坐标\n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        \n        // 更新光标位置为相对容器的坐标\n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        \n        // 更新高亮位置和大小\n        highlight.style.left = `${relativeX - charWidth/2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n        \n        // ===== 仅在需要时滚动2行高度 =====\n        \n        // 检查是否已经在相近位置滚动过（避免同一区域重复滚动）\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        \n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          \n          if (isContainerScrollable) {\n            // 容器滚动情况\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n            \n            // 如果超出底部可见区域\n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2; // 滚动2行高度\n            }\n            // 如果超出顶部可见区域\n            else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2; // 向上滚动2行高度\n            }\n            \n            // 仅在需要滚动时执行一次滚动\n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              // 记录此次滚动位置\n              lastScrolledY = relativeY;\n            }\n          } else {\n            // 窗口滚动情况\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n            \n            // 如果超出底部可见区域\n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2; // 滚动2行高度\n            }\n            // 如果超出顶部可见区域\n            else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2; // 向上滚动2行高度\n            }\n            \n            // 仅在需要滚动时执行一次滚动\n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              // 记录此次滚动位置\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      \n      autoReader.currentIndex++;\n      \n    }, autoReader.speed);\n    \n    // 在停止自动阅读时清除所有高亮\n    autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n      \n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (autoReader.intervalId) {\n      clearInterval(autoReader.intervalId);\n      autoReader.intervalId = null;\n      \n      // 调用清理函数\n      if (autoReader.cleanup) {\n        autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n    \n    // 重置翻页状态\n    autoReader.isPageChanging = false;\n    \n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n    \n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n    \n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n    \n    // 收集字符位置\n    autoReader.charPositions = getAllCharacterPositions(content);\n    \n    // 如果当前页没有内容，尝试翻页\n    if (autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !autoReader.isPageChanging) {\n        autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async (e) => {\n    const newMode = e.target.value;\n    \n    // 停止当前可能正在运行的自动阅读和节奏阅读\n    stopAutoReader();\n    stopRhythmReading();\n    \n    // 清理旧模式\n    cleanupDOM();\n    \n    // 更新状态\n    setReadingMode(newMode);\n    \n    // 应用新模式\n    if (pdfDocument && currentPage > 0) {\n      try {\n        const page = await pdfDocument.getPage(currentPage);\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        let processedContent = '';\n        \n        // 应用对应模式的文本处理\n        switch(newMode) {\n          case 'follow-mouse':\n            processedContent = formatTextForMouseFollow(extractedText);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlight(extractedText);\n            break;\n          case 'auto-reader':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          case 'rhythm':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          default:\n            processedContent = formatTextToHtml(extractedText);\n        }\n        \n        const contentArea = document.querySelector('.page-content');\n        if (contentArea) {\n          contentArea.textContent = '';\n          contentArea.innerHTML = processedContent;\n          \n          // 滚动到页面顶部\n          window.scrollTo(0, 0);\n          if (contentArea.scrollTo) {\n            contentArea.scrollTo(0, 0);\n          }\n          \n          // 立即初始化对应模式\n          if (newMode === 'auto-reader') {\n            setTimeout(initializeAutoReader, 50);\n          } else if (newMode === 'follow-mouse') {\n            setTimeout(initializeMouseFollow, 50);\n          } else if (newMode === 'rhythm') {\n            setTimeout(startRhythmReading, 50);\n          }\n        }\n      } catch (error) {\n        console.error('应用新阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 1. 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll(\n      '.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line'\n    );\n    highlights.forEach(el => el.remove());\n    \n    // 2. 移除事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 克隆内容区域以彻底移除所有事件监听器\n      const cleanContent = contentArea.cloneNode(false);\n      cleanContent.innerHTML = contentArea.innerHTML;\n      contentArea.parentNode.replaceChild(cleanContent, contentArea);\n    }\n    \n    // 3. 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 创建新段落并保留基本结构\n      const newParagraph = document.createElement('p');\n      newParagraph.className = 'pdf-paragraph';\n      newParagraph.innerHTML = paragraph.innerHTML\n        .replace(/<span class=\"text-line\">/g, '')\n        .replace(/<\\/span>/g, '');\n      \n      // 移除特殊属性\n      newParagraph.removeAttribute('data-follow');\n      newParagraph.removeAttribute('style');\n      \n      if (paragraph.parentNode) {\n        paragraph.parentNode.replaceChild(newParagraph, paragraph);\n      }\n    });\n    \n    // 4. 清理自动阅读器\n    stopAutoReader();\n  };\n\n  const handleAutoScroll = () => {\n    autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = (e) => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    // 清除所有现有高亮\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n    \n    const mouseTarget = document.elementFromPoint(e.clientX, e.clientY);\n    \n    if (mouseTarget && \n       (mouseTarget.classList.contains('pdf-paragraph') || \n        mouseTarget.tagName === 'P' || \n        mouseTarget.tagName === 'SPAN')) {\n      \n      const targetParagraph = mouseTarget.closest('.pdf-paragraph');\n      if (!targetParagraph) return;\n      \n      // 获取段落文本节点\n      const textNode = getTextNodeAtPosition(targetParagraph, e.clientX, e.clientY);\n      if (!textNode) return;\n      \n      // 获取精确的行位置和尺寸\n      const range = document.createRange();\n      range.selectNodeContents(textNode);\n      const rects = range.getClientRects();\n      \n      // 找到鼠标所在的具体行\n      let targetRect = null;\n      for (let i = 0; i < rects.length; i++) {\n        const rect = rects[i];\n        if (e.clientY >= rect.top && e.clientY <= rect.bottom) {\n          targetRect = rect;\n          break;\n        }\n      }\n      \n      if (targetRect) {\n        // 创建高亮元素\n        const lineHighlight = document.createElement('div');\n        lineHighlight.className = 'line-highlight mouse-highlight';\n        \n        // 计算相对于段落的位置\n        const paragraphRect = targetParagraph.getBoundingClientRect();\n        const top = targetRect.top - paragraphRect.top;\n        const left = targetRect.left - paragraphRect.left;\n        \n        // 设置高亮样式\n        lineHighlight.style.position = 'absolute';\n        lineHighlight.style.left = `${left}px`;\n        lineHighlight.style.top = `${top}px`;\n        lineHighlight.style.width = `${targetRect.width}px`;\n        lineHighlight.style.height = `${targetRect.height}px`;\n        lineHighlight.style.pointerEvents = 'none';\n        lineHighlight.style.backgroundColor = 'rgba(255, 165, 0, 0.3)';\n        lineHighlight.style.borderRadius = '4px';\n        lineHighlight.style.boxShadow = '0 0 8px rgba(255, 165, 0, 0.5)';\n        lineHighlight.style.zIndex = '5';\n        lineHighlight.style.transition = 'all 0.1s ease';\n        \n        // 确保段落有相对定位\n        targetParagraph.style.position = 'relative';\n        targetParagraph.appendChild(lineHighlight);\n      }\n    }\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 新增延迟补偿\n    setTimeout(() => {\n      addMouseFollowListeners();\n      \n      // 强制触发重排\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        void contentArea.offsetHeight;\n        \n        // 模拟鼠标移动事件\n        const fakeEvent = new MouseEvent('mousemove', {\n          clientX: window.innerWidth / 2,\n          clientY: window.innerHeight / 2,\n          bubbles: true\n        });\n        contentArea.dispatchEvent(fakeEvent);\n      }\n    }, 50);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = (delta) => {\n    autoReader.speed = Math.max(100, autoReader.speed + delta);\n    setAutoReaderState(prev => ({ ...prev, speed: autoReader.speed }));\n    \n    if (autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async (delta) => {\n    const newPage = currentPage + delta;\n    \n    if (newPage < 1 || newPage > totalPages) return;\n    \n    const wasAutoReading = readingMode === 'auto-reader' && autoReader.intervalId;\n    \n    // 如果正在自动阅读，先停止\n    if (wasAutoReading) {\n      clearInterval(autoReader.intervalId);\n      autoReader.intervalId = null;\n    }\n    \n    // 更新页码\n    setCurrentPage(newPage);\n    \n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n      // 按当前阅读模式处理内容\n      let processedContent = '';\n      switch(readingMode) {\n        case 'follow-mouse':\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'auto-reader':\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      \n      // 更新页面内容\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        contentArea.textContent = '';\n        contentArea.innerHTML = processedContent;\n        \n        // 滚动到页面顶部\n        window.scrollTo(0, 0);\n        if (contentArea.scrollTo) {\n          contentArea.scrollTo(0, 0);\n        }\n        \n        // 如果之前在自动阅读，重新启动自动阅读\n        if (readingMode === 'auto-reader') {\n          // 重置翻页状态\n          autoReader.isPageChanging = false;\n          \n          // 延迟一小段时间再初始化，确保DOM已更新\n          setTimeout(initializeAutoReader, 200);\n        } else if (readingMode === 'follow-mouse') {\n          setTimeout(initializeMouseFollow, 50);\n        }\n      }\n    } catch (error) {\n      console.error('翻页失败:', error);\n      // 重置翻页状态以防止卡住\n      autoReader.isPageChanging = false;\n    }\n  };\n\n  // 修改后的监听器设置函数\n  const addMouseFollowListeners = () => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    \n    // 清理旧的监听器\n    contentArea.removeEventListener('mousemove', handleMouseMove);\n    contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    \n    // 添加新的监听器\n    contentArea.addEventListener('mousemove', handleMouseMove);\n    contentArea.addEventListener('mouseleave', clearAllHighlights);\n    \n    // 确保所有段落都有正确的样式\n    document.querySelectorAll('.pdf-paragraph').forEach(p => {\n      p.style.position = 'relative';\n      p.style.lineHeight = '1.5';\n    });\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = (text) => {\n    // 分段\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    // 创建HTML内容\n    let htmlContent = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      htmlContent += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 应用静态高亮\n  const applyStaticHighlight = (text) => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    let htmlContent = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      // 新增强制清理逻辑\n      const cleanParagraph = paragraph\n        .replace(/<span class=\"text-line\">/g, '')\n        .replace(/<\\/span>/g, '');\n      \n      const highlightedText = processTextWithHighlight(cleanParagraph);\n      htmlContent += `<p class=\"pdf-paragraph\">${highlightedText}</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 格式化文本用于鼠标跟随高亮模式\n  const formatTextForMouseFollow = (text) => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    let htmlContent = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      // 将段落分割成行\n      const lines = paragraph.split('\\n').filter(line => line.trim());\n      htmlContent += `<p class=\"pdf-paragraph\" data-follow=\"true\" style=\"position: relative; line-height: 1.5;\">`;\n      \n      lines.forEach((line, i) => {\n        // 每行用span包裹\n        htmlContent += `<span class=\"text-line\" style=\"display: block;\">${line}</span>`;\n      });\n      \n      htmlContent += `</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 启动节奏阅读模式\n  const startRhythmReading = () => {\n    // 如果已经在运行，先停止\n    stopRhythmReading();\n    \n    // 设置为活动状态\n    rhythmReader.active = true;\n    \n    // 初始化当前位置\n    rhythmReader.currentIndex = autoReader.currentIndex || 0;\n    \n    // 添加速度调节滑块\n    addSpeedSlider();\n    \n    // 进行初始标记\n    updateCharColors();\n    \n    // 滚动到当前位置\n    scrollToCurrentPosition();\n    \n    // 设置阅读间隔\n    rhythmReader.intervalId = setInterval(() => {\n      // 将当前字符标记为已读\n      rhythmReader.readIndices.add(rhythmReader.currentIndex);\n      \n      // 移动到下一个非空白字符\n      do {\n        rhythmReader.currentIndex++;\n      } while (\n        rhythmReader.currentIndex < autoReader.charPositions.length && \n        autoReader.charPositions[rhythmReader.currentIndex]?.char.trim() === ''\n      );\n      \n      // 检查是否到达页面末尾\n      if (rhythmReader.currentIndex >= autoReader.charPositions.length) {\n        if (currentPage < totalPages) {\n          changePage(1);\n          stopRhythmReading();\n          // 在新页面加载后自动重启节奏阅读\n          setTimeout(() => {\n            if (rhythmReader.active) {\n              startRhythmReading();\n            }\n          }, 500);\n        } else {\n          stopRhythmReading();\n        }\n        return;\n      }\n      \n      // 更新字符颜色\n      updateCharColors();\n      \n      // 滚动到当前位置\n      scrollToCurrentPosition();\n      \n    }, rhythmReader.speed);\n  }\n\n  // 停止节奏阅读模式\n  const stopRhythmReading = () => {\n    if (rhythmReader.intervalId) {\n      clearInterval(rhythmReader.intervalId);\n      rhythmReader.intervalId = null;\n    }\n    \n    // 清除字符颜色标记\n    clearCharColors();\n    \n    // 移除速度滑块\n    const slider = document.getElementById('rhythm-speed-slider');\n    if (slider) slider.remove();\n    \n    // 保存当前位置到autoReader\n    if (rhythmReader.currentIndex !== undefined) {\n      autoReader.currentIndex = rhythmReader.currentIndex;\n    }\n    \n    rhythmReader.active = false;\n  }\n\n  // 更新字符颜色\n  const updateCharColors = () => {\n    // 首先清除现有颜色标记\n    clearCharColors();\n    \n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    \n    const containerRect = contentContainer.getBoundingClientRect();\n    \n    // 为需要标记的字符添加颜色覆盖\n    autoReader.charPositions.forEach((pos, index) => {\n      if (!pos || pos.char.trim() === '') return; // 跳过空白字符\n      \n      // 确定颜色\n      let color;\n      if (index === rhythmReader.currentIndex) {\n        color = 'rgba(0, 200, 0, 0.7)'; // 当前阅读的字 - 绿色\n      } else if (index === rhythmReader.currentIndex + 1 || index === rhythmReader.currentIndex + 2) {\n        color = 'rgba(0, 0, 0, 0.7)'; // 接下来两个字 - 淡黑色\n      } else if (rhythmReader.readIndices.has(index)) {\n        color = 'rgba(0, 0, 0, 0.9)'; // 已读字符 - 黑色\n      } else {\n        color = 'rgba(0, 0, 0, 0.3)'; // 未读字符 - 淡灰色\n      }\n      \n      // 创建覆盖元素\n      const marker = document.createElement('div');\n      marker.textContent = pos.char;\n      marker.className = 'rhythm-char-marker';\n      marker.style.position = 'absolute';\n      marker.style.left = `${pos.x - containerRect.left}px`;\n      marker.style.top = `${pos.y - containerRect.top}px`;\n      marker.style.transform = 'translate(-50%, -50%)';\n      marker.style.color = color;\n      marker.style.zIndex = '9999';\n      marker.style.pointerEvents = 'none';\n      \n      // 使用与原始文本相同的字体设置\n      try {\n        if (pos.element) {\n          const computedStyle = window.getComputedStyle(pos.element);\n          marker.style.fontFamily = computedStyle.fontFamily;\n          marker.style.fontSize = computedStyle.fontSize;\n          marker.style.fontWeight = computedStyle.fontWeight;\n        }\n      } catch (e) {\n        console.warn('无法复制原始字体样式', e);\n      }\n      \n      // 添加到页面\n      contentContainer.appendChild(marker);\n      \n      // 保存引用以便后续清理\n      rhythmReader.colorMarkers.push(marker);\n    });\n    \n    // 添加一个半透明覆盖层来隐藏原始文本\n    const textHider = document.createElement('div');\n    textHider.className = 'rhythm-text-hider';\n    textHider.style.position = 'absolute';\n    textHider.style.top = '0';\n    textHider.style.left = '0';\n    textHider.style.width = '100%';\n    textHider.style.height = '100%';\n    textHider.style.backgroundColor = 'rgba(255, 255, 255, 0.7)';\n    textHider.style.zIndex = '9998';\n    textHider.style.pointerEvents = 'none';\n    \n    contentContainer.appendChild(textHider);\n    rhythmReader.colorMarkers.push(textHider);\n  }\n\n  // 清除字符颜色标记\n  const clearCharColors = () => {\n    // 移除所有标记元素\n    rhythmReader.colorMarkers.forEach(marker => {\n      if (marker && marker.parentNode) {\n        marker.parentNode.removeChild(marker);\n      }\n    });\n    \n    rhythmReader.colorMarkers = [];\n  }\n\n  // 滚动到当前位置\n  const scrollToCurrentPosition = () => {\n    const pos = autoReader.charPositions[rhythmReader.currentIndex];\n    if (!pos) return;\n    \n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    \n    // 估计的行高\n    let lineHeight = 20; // 默认估计值\n    \n    // 尝试获取实际行高\n    if (autoReader.charPositions.length > 1) {\n      for (let i = 1; i < autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(autoReader.charPositions[i].y - autoReader.charPositions[i-1].y);\n        if (yDiff > 5) {\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n    \n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight &&\n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n    \n    if (isContainerScrollable) {\n      // 容器滚动情况\n      const contentRect = contentContainer.getBoundingClientRect();\n      const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n      \n      const visibleTop = contentContainer.scrollTop;\n      const visibleBottom = visibleTop + contentContainer.clientHeight;\n      \n      // 如果超出可见区域\n      if (relativeY > visibleBottom - lineHeight * 2 || relativeY < visibleTop + lineHeight * 2) {\n        contentContainer.scrollBy({\n          top: lineHeight * 2 * (relativeY > visibleBottom - lineHeight * 2 ? 1 : -1),\n          behavior: 'smooth'\n        });\n      }\n    } else {\n      // 窗口滚动情况\n      const absoluteY = pos.y;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n      \n      // 如果超出可见区域\n      if (absoluteY > visibleBottom - lineHeight * 2 || absoluteY < visibleTop + lineHeight * 2) {\n        window.scrollBy({\n          top: lineHeight * 2 * (absoluteY > visibleBottom - lineHeight * 2 ? 1 : -1),\n          behavior: 'smooth'\n        });\n      }\n    }\n  }\n\n  // 添加速度调节滑块\n  const addSpeedSlider = () => {\n    // 检查是否已经存在\n    let slider = document.getElementById('rhythm-speed-slider');\n    if (slider) return;\n    \n    // 创建滑块容器\n    const container = document.createElement('div');\n    container.id = 'rhythm-speed-slider';\n    container.style.position = 'fixed';\n    container.style.bottom = '20px';\n    container.style.left = '50%';\n    container.style.transform = 'translateX(-50%)';\n    container.style.backgroundColor = 'white';\n    container.style.padding = '10px';\n    container.style.borderRadius = '5px';\n    container.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';\n    container.style.zIndex = '10000';\n    container.style.display = 'flex';\n    container.style.alignItems = 'center';\n    \n    // 添加标签\n    const label = document.createElement('label');\n    label.textContent = '阅读速度: ';\n    label.style.marginRight = '8px';\n    container.appendChild(label);\n    \n    // 添加滑块\n    const input = document.createElement('input');\n    input.type = 'range';\n    input.min = '50';\n    input.max = '1000';\n    input.step = '50';\n    input.value = rhythmReader.speed;\n    input.style.width = '200px';\n    \n    // 添加数值显示\n    const valueDisplay = document.createElement('span');\n    valueDisplay.textContent = `${rhythmReader.speed}ms`;\n    valueDisplay.style.marginLeft = '8px';\n    valueDisplay.style.minWidth = '60px';\n    \n    // 添加事件监听\n    input.addEventListener('input', function() {\n      const newSpeed = parseInt(this.value);\n      rhythmReader.speed = newSpeed;\n      valueDisplay.textContent = `${newSpeed}ms`;\n      \n      // 实时更新间隔\n      if (rhythmReader.intervalId) {\n        clearInterval(rhythmReader.intervalId);\n        rhythmReader.intervalId = setInterval(() => {\n          // 将当前字符标记为已读\n          rhythmReader.readIndices.add(rhythmReader.currentIndex);\n          \n          // 移动到下一个非空白字符\n          do {\n            rhythmReader.currentIndex++;\n          } while (\n            rhythmReader.currentIndex < autoReader.charPositions.length && \n            autoReader.charPositions[rhythmReader.currentIndex]?.char.trim() === ''\n          );\n          \n          // 检查是否到达页面末尾\n          if (rhythmReader.currentIndex >= autoReader.charPositions.length) {\n            if (currentPage < totalPages) {\n              changePage(1);\n              stopRhythmReading();\n              // 在新页面加载后自动重启节奏阅读\n              setTimeout(() => {\n                if (rhythmReader.active) {\n                  startRhythmReading();\n                }\n              }, 500);\n            } else {\n              stopRhythmReading();\n            }\n            return;\n          }\n          \n          // 更新字符颜色\n          updateCharColors();\n          \n          // 滚动到当前位置\n          scrollToCurrentPosition();\n          \n        }, newSpeed);\n      }\n    });\n    \n    container.appendChild(input);\n    container.appendChild(valueDisplay);\n    document.body.appendChild(container);\n  }\n\n  // 集成到现有下拉栏中\n  const integrateToExistingDropdown = () => {\n    // 查找阅读模式下拉菜单\n    const dropdown = document.querySelector('.reading-mode-dropdown');\n    \n    // 如果找不到，尝试查找其他可能的菜单位置\n    const possibleMenus = [\n      document.querySelector('.reading-options'), \n      document.querySelector('.settings-dropdown'),\n      document.querySelector('#reading-options-menu'),\n      document.querySelector('[data-role=\"reading-menu\"]')\n    ];\n    \n    let menuContainer = dropdown || possibleMenus.find(menu => menu);\n    \n    // 如果还是找不到，尝试找阅读模式按钮并在其旁边创建节奏阅读按钮\n    if (!menuContainer) {\n      // 查找起始自动阅读的按钮\n      const autoReaderButton = Array.from(document.querySelectorAll('button')).find(btn => \n        btn.textContent.includes('开始阅读') || \n        btn.textContent.includes('自动阅读') || \n        btn.textContent.includes('阅读模式')\n      );\n      \n      if (autoReaderButton && autoReaderButton.parentNode) {\n        // 在原按钮旁边创建节奏阅读按钮\n        const rhythmButton = document.createElement('button');\n        rhythmButton.className = autoReaderButton.className; // 使用相同样式\n        rhythmButton.style.margin = '0 5px';\n        rhythmButton.textContent = '节奏阅读';\n        \n        // 添加点击事件监听\n        rhythmButton.addEventListener('click', toggleRhythmReading);\n        \n        // 将按钮插入到原按钮后面\n        if (autoReaderButton.nextSibling) {\n          autoReaderButton.parentNode.insertBefore(rhythmButton, autoReaderButton.nextSibling);\n        } else {\n          autoReaderButton.parentNode.appendChild(rhythmButton);\n        }\n        \n        return;\n      }\n    }\n    \n    // 如果找到了菜单容器，添加节奏阅读选项\n    if (menuContainer) {\n      // 创建新选项\n      const rhythmOption = document.createElement('div');\n      rhythmOption.className = 'menu-item'; // 使用与其他菜单项相同的样式\n      rhythmOption.textContent = '节奏阅读';\n      rhythmOption.style.cursor = 'pointer';\n      rhythmOption.style.padding = '8px 12px';\n      \n      // 添加点击事件\n      rhythmOption.addEventListener('click', toggleRhythmReading);\n      \n      // 添加到菜单\n      menuContainer.appendChild(rhythmOption);\n    } else {\n      // 作为后备，创建一个独立按钮\n      const button = document.createElement('button');\n      button.textContent = '节奏阅读';\n      button.style.position = 'fixed';\n      button.style.top = '20px';\n      button.style.right = '20px';\n      button.style.zIndex = '10000';\n      button.style.padding = '5px 10px';\n      button.addEventListener('click', toggleRhythmReading);\n      \n      document.body.appendChild(button);\n    }\n  }\n\n  // 切换节奏阅读模式\n  const toggleRhythmReading = () => {\n    // 停止自动阅读(如果在运行)\n    if (typeof stopAutoReader === 'function') {\n      stopAutoReader();\n    }\n    \n    if (!rhythmReader.active) {\n      // 立即启动节奏阅读\n      rhythmReader.active = true; // 先设置为活动状态\n      startRhythmReading();\n      // 更新按钮文本(如果是按钮)\n      if (this.tagName === 'BUTTON' || this.className === 'menu-item') {\n        this.dataset.originalText = this.textContent;\n        this.textContent = '停止节奏阅读';\n      }\n    } else {\n      // 停止节奏阅读\n      stopRhythmReading();\n      // 恢复按钮文本\n      if (this.dataset.originalText) {\n        this.textContent = this.dataset.originalText;\n      }\n    }\n  }\n\n  // 自动集成到现有UI\n  integrateToExistingDropdown();\n\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        <div className=\"logo\">\n          <h2>ADHD阅读助手</h2>\n        </div>\n        <label className=\"upload-btn\">\n          选择文件\n          <input\n            type=\"file\"\n            accept=\".pdf,.txt\"\n            onChange={handleFileUpload}\n            style={{ display: 'none' }}\n          />\n        </label>\n      </div>\n      <div className=\"main-content\">\n        <div className=\"header\">\n          <h1>ADHD阅读助手</h1>\n          <div className=\"controls\">\n            <div className=\"mode-selector\">\n              <select value={readingMode} onChange={handleReadingModeChange}>\n                <option value=\"normal\">普通模式</option>\n                <option value=\"static\">静态高亮模式</option>\n                <option value=\"follow-mouse\">鼠标跟随高亮</option>\n                <option value=\"auto-reader\">自动阅读器</option>\n                <option value=\"rhythm\">节奏阅读模式</option>\n              </select>\n            </div>\n            <div className=\"mode-selector\">\n              <select value={posMode} onChange={(e) => setPosMode(e.target.value)}>\n                <option value=\"none\">无词性标注</option>\n                <option value=\"noun\">名词标注</option>\n                <option value=\"all\">全词性标注</option>\n              </select>\n            </div>\n            {readingMode === 'auto-reader' && (\n              <div className=\"speed-control\">\n                <button onClick={() => adjustSpeed(-100)}>-</button>\n                <span>{autoReaderState.speed}ms</span>\n                <button onClick={() => adjustSpeed(100)}>+</button>\n              </div>\n            )}\n          </div>\n        </div>\n        <div className=\"page-content\">\n          {content ? (\n            <div dangerouslySetInnerHTML={{ __html: content }} />\n          ) : (\n            <div className=\"empty-state\">\n              <p>请上传PDF或TXT文件开始阅读</p>\n            </div>\n          )}\n        </div>\n        {content && (\n          <div className=\"nav-buttons\">\n            <button className=\"page-btn prev\" onClick={() => changePage(-1)} disabled={currentPage === 1}>\n              上一页\n            </button>\n            <span className=\"page-info\">\n              第 {currentPage} 页 / 共 {totalPages} 页\n            </span>\n            <button className=\"page-btn next\" onClick={() => changePage(1)} disabled={currentPage === totalPages}>\n              下一页\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}