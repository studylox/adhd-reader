{"ast":null,"code":"var _jsxFileName = \"D:\\\\adhd-read-helper\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 添加全局事件跟踪对象\nwindow.eventTracker = window.eventTracker || {\n  mouseFollowHandlers: []\n};\n\n// 自动阅读器全局对象\nwindow.autoReader = {\n  charPositions: [],\n  intervalId: null,\n  currentIndex: 0,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false,\n  cleanup: null\n};\n\n// 添加新的节奏阅读模式代码\n// 全局变量，确保在页面切换后仍然保持状态\nwindow.rhythmReaderGlobal = window.rhythmReaderGlobal || {\n  active: false,\n  speed: 300\n};\n\n// 初始化节奏阅读模式\nconst initializeRhythmReadingMode = () => {\n  if (window.rhythmReadingInitialized) {\n    console.log(\"**节奏阅读模式**已经初始化过，跳过\");\n    return;\n  }\n  window.rhythmReadingInitialized = true;\n  console.log(\"正在初始化**节奏阅读模式**...\");\n\n  // 改进的存储函数，同时使用session和local storage提高可靠性\n  function setStorage(key, value) {\n    try {\n      sessionStorage.setItem(key, value);\n      localStorage.setItem(key, value);\n    } catch (e) {\n      console.error(\"无法写入存储\", e);\n    }\n  }\n  function getStorage(key) {\n    try {\n      return sessionStorage.getItem(key) || localStorage.getItem(key);\n    } catch (e) {\n      console.error(\"无法读取存储\", e);\n      return null;\n    }\n  }\n\n  // 状态变量和功能对象\n  const rhythmReader = {\n    active: false,\n    intervalId: null,\n    speed: 300,\n    currentIndex: 0,\n    readIndices: new Set(),\n    charElements: [],\n    pageTransitionInProgress: false,\n    // 启动节奏阅读\n    start: function () {\n      console.log(\"【节奏阅读】启动中...\");\n      if (this.pageTransitionInProgress) {\n        console.log(\"【节奏阅读】页面转换正在进行中，延迟启动\");\n        setTimeout(() => this.start(), 500);\n        return;\n      }\n      this.stop(false);\n      this.active = true;\n      setStorage('rhythmReadingActive', 'true');\n      if (!this.initializeTextNodes()) {\n        console.error(\"【节奏阅读】无法初始化文本节点\");\n        return;\n      }\n      this.currentIndex = 0;\n      this.readIndices.clear();\n      this.addSpeedSlider();\n      this.updateTextColors();\n      this.scrollToCurrentChar();\n      this.intervalId = setInterval(() => this.moveToNextChar(), this.speed);\n      console.log(\"【节奏阅读】成功启动\");\n      this.showNotification(\"**节奏阅读模式**已启动\");\n      this.hijackPageTurningFunctions();\n      this.setupPageNavigationListeners();\n    },\n    // 停止节奏阅读\n    stop: function (showNotification = true) {\n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n      }\n      if (this.active) {\n        console.log(\"【节奏阅读】停止中...\");\n        this.active = false;\n        if (!this.pageTransitionInProgress) {\n          setStorage('rhythmReadingActive', 'false');\n        }\n        this.restoreOriginalText();\n        const slider = document.getElementById('rhythm-speed-slider');\n        if (slider) slider.remove();\n        if (showNotification) {\n          this.showNotification(\"**节奏阅读模式**已停止\");\n        }\n      }\n    },\n    // 初始化文本节点\n    initializeTextNodes: function () {\n      console.log(\"【节奏阅读】初始化文本节点...\");\n      this.charElements = [];\n      const contentContainer = document.querySelector('.page-content');\n      if (!contentContainer) {\n        console.error(\"【节奏阅读】找不到内容容器\");\n        return false;\n      }\n      const textNodes = [];\n      this.findTextNodes(contentContainer, textNodes);\n      if (textNodes.length === 0) {\n        console.error(\"【节奏阅读】未找到文本节点\");\n        this.showNotification(\"无法启动节奏阅读：未找到文本内容\");\n        return false;\n      }\n      console.log(`【节奏阅读】找到 ${textNodes.length} 个文本节点`);\n      textNodes.forEach(node => {\n        const text = node.nodeValue;\n        if (!text || text.trim() === '') return;\n        const fragment = document.createDocumentFragment();\n        for (let i = 0; i < text.length; i++) {\n          const char = text[i];\n          const span = document.createElement('span');\n          span.textContent = char;\n          span.className = 'rhythm-char';\n          span.dataset.rhythmIndex = String(this.charElements.length);\n          if (char.trim() === '') {\n            span.dataset.whitespace = 'true';\n          }\n          span.style.display = 'inline';\n          span.style.margin = '0';\n          span.style.padding = '0';\n          span.style.border = 'none';\n          span.style.backgroundColor = 'transparent';\n          fragment.appendChild(span);\n          this.charElements.push(span);\n        }\n        if (node.parentNode) {\n          node.parentNode.replaceChild(fragment, node);\n        }\n      });\n      console.log(`【节奏阅读】总共创建了 ${this.charElements.length} 个字符span`);\n      return this.charElements.length > 0;\n    },\n    // 递归查找所有文本节点\n    findTextNodes: function (element, textNodes) {\n      for (let i = 0; i < element.childNodes.length; i++) {\n        const node = element.childNodes[i];\n        if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() !== '') {\n          textNodes.push(node);\n        } else if (node.nodeType === Node.ELEMENT_NODE) {\n          if (node.className === 'rhythm-char') {\n            continue;\n          }\n          this.findTextNodes(node, textNodes);\n        }\n      }\n    },\n    // 更新文本颜色\n    updateTextColors: function () {\n      this.charElements.forEach((span, index) => {\n        let color;\n        let fontWeight = 'inherit';\n        if (index === this.currentIndex) {\n          color = '#00aa00'; // 当前阅读的字 - 绿色\n          fontWeight = 'bold';\n        } else if (index === this.currentIndex + 1 || index === this.currentIndex + 2) {\n          color = '#aaaaaa'; // 接下来两个字 - 淡灰色\n        } else if (this.readIndices.has(index)) {\n          color = '#ffffff'; // 已读字符 - 白色\n        } else {\n          color = 'rgba(160, 160, 160, 0.25)'; // 未读字符 - 非常淡的灰色\n        }\n        span.style.color = color;\n        span.style.fontWeight = fontWeight;\n        span.style.backgroundColor = 'transparent';\n        span.style.background = 'none';\n      });\n    },\n    // 移动到下一个字符\n    moveToNextChar: function () {\n      // 将当前字符标记为已读\n      this.readIndices.add(this.currentIndex);\n      do {\n        this.currentIndex++;\n        if (this.currentIndex >= this.charElements.length) {\n          console.log(\"【节奏阅读】已到达页尾，尝试翻页\");\n          if (!this.clickNextPageButton()) {\n            this.stop();\n          }\n          return;\n        }\n      } while (this.currentIndex < this.charElements.length && this.charElements[this.currentIndex] && this.charElements[this.currentIndex].dataset.whitespace === 'true');\n      this.updateTextColors();\n      this.scrollToCurrentChar();\n    },\n    // 尝试点击下一页按钮\n    clickNextPageButton: function () {\n      const nextButtons = Array.from(document.querySelectorAll('button, [role=\"button\"]')).filter(el => {\n        const text = (el.textContent || '').toLowerCase();\n        return text.includes('下一页') || text.includes('next');\n      });\n      if (nextButtons.length > 0) {\n        console.log(\"【节奏阅读】找到下一页按钮，自动点击\");\n        nextButtons[0].click();\n        return true;\n      }\n      return false;\n    },\n    // 滚动到当前字符\n    scrollToCurrentChar: function () {\n      const span = this.charElements[this.currentIndex];\n      if (!span) return;\n      const rect = span.getBoundingClientRect();\n      const contentContainer = document.querySelector('.page-content');\n      const lineHeight = parseInt(window.getComputedStyle(span).lineHeight) || 20;\n      const isContainerScrollable = contentContainer && contentContainer.scrollHeight > contentContainer.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n      if (isContainerScrollable) {\n        const containerRect = contentContainer.getBoundingClientRect();\n        const relativeTop = rect.top - containerRect.top + contentContainer.scrollTop;\n        const visibleTop = contentContainer.scrollTop;\n        const visibleBottom = visibleTop + contentContainer.clientHeight;\n        if (relativeTop < visibleTop + lineHeight || relativeTop > visibleBottom - lineHeight) {\n          contentContainer.scrollBy({\n            top: lineHeight * 2 * (relativeTop > visibleBottom - lineHeight ? 1 : -1),\n            behavior: 'smooth'\n          });\n        }\n      } else {\n        const viewportTop = window.scrollY;\n        const viewportBottom = viewportTop + window.innerHeight;\n        const absoluteTop = rect.top + window.scrollY;\n        if (absoluteTop < viewportTop + lineHeight || absoluteTop > viewportBottom - lineHeight) {\n          window.scrollBy({\n            top: lineHeight * 2 * (absoluteTop > viewportBottom - lineHeight ? 1 : -1),\n            behavior: 'smooth'\n          });\n        }\n      }\n    },\n    // 添加速度滑块\n    addSpeedSlider: function () {\n      let slider = document.getElementById('rhythm-speed-slider');\n      if (slider) slider.remove();\n      const container = document.createElement('div');\n      container.id = 'rhythm-speed-slider';\n      container.style.position = 'fixed';\n      container.style.top = '70px';\n      container.style.right = '20px';\n      container.style.backgroundColor = 'white';\n      container.style.padding = '10px';\n      container.style.borderRadius = '5px';\n      container.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';\n      container.style.zIndex = '10000';\n      const label = document.createElement('label');\n      label.textContent = '速度: ';\n      label.style.marginRight = '8px';\n      container.appendChild(label);\n      const input = document.createElement('input');\n      input.type = 'range';\n      input.min = '50';\n      input.max = '1000';\n      input.step = '50';\n      input.value = this.speed;\n      input.style.width = '120px';\n      const valueDisplay = document.createElement('span');\n      valueDisplay.textContent = `${this.speed}ms`;\n      valueDisplay.style.marginLeft = '8px';\n      valueDisplay.style.minWidth = '60px';\n      const self = this;\n      input.addEventListener('input', function () {\n        const newSpeed = parseInt(this.value);\n        self.speed = newSpeed;\n        valueDisplay.textContent = `${newSpeed}ms`;\n        if (self.intervalId) {\n          clearInterval(self.intervalId);\n          self.intervalId = setInterval(() => self.moveToNextChar(), newSpeed);\n        }\n      });\n      container.appendChild(input);\n      container.appendChild(valueDisplay);\n      document.body.appendChild(container);\n    },\n    // 劫持页面翻页函数\n    hijackPageTurningFunctions: function () {\n      if (typeof window.changePage === 'function' && !window._originalChangePage) {\n        console.log(\"【节奏阅读】劫持changePage函数\");\n        window._originalChangePage = window.changePage;\n        const self = this;\n        window.changePage = function (page) {\n          console.log(\"【节奏阅读】检测到changePage调用，参数:\", page);\n          const wasActive = self.active;\n          self.pageTransitionInProgress = true;\n          if (wasActive) {\n            self.stop(false);\n            setStorage('rhythmReadingActive', 'true');\n            setStorage('rhythmReadingPending', 'true');\n          }\n          window._originalChangePage(page);\n          setTimeout(() => {\n            self.pageTransitionInProgress = false;\n          }, 1000);\n        };\n      }\n    },\n    // 设置页面导航事件监听\n    setupPageNavigationListeners: function () {\n      console.log(\"【节奏阅读】正在设置页面导航监听\");\n      const self = this;\n      document.addEventListener('click', function (e) {\n        let target = e.target;\n        while (target && target !== document.body) {\n          if (target.tagName === 'BUTTON' || target.tagName === 'A' || target.getAttribute('role') === 'button') {\n            const text = (target.textContent || '').trim().toLowerCase();\n            if (text.includes('上一页') || text.includes('下一页') || text.includes('prev') || text.includes('next')) {\n              if (self.active) {\n                self.pageTransitionInProgress = true;\n                self.stop(false);\n                setTimeout(() => {\n                  self.pageTransitionInProgress = false;\n                  self.start();\n                }, 1500);\n              }\n              break;\n            }\n          }\n          target = target.parentNode;\n        }\n      });\n      document.addEventListener('keydown', function (e) {\n        if (['ArrowLeft', 'ArrowRight', 'PageUp', 'PageDown'].includes(e.key)) {\n          if (self.active) {\n            self.pageTransitionInProgress = true;\n            self.stop(false);\n            setTimeout(() => {\n              self.pageTransitionInProgress = false;\n              self.start();\n            }, 1500);\n          }\n        }\n      });\n      window.addEventListener('popstate', function () {\n        if (self.active) {\n          self.pageTransitionInProgress = true;\n          self.stop(false);\n          setTimeout(() => {\n            self.pageTransitionInProgress = false;\n            self.start();\n          }, 1500);\n        }\n      });\n    },\n    // 显示通知\n    showNotification: function (message) {\n      let notification = document.getElementById('rhythm-notification');\n      if (notification) notification.remove();\n      notification = document.createElement('div');\n      notification.id = 'rhythm-notification';\n      notification.textContent = message;\n      notification.style.position = 'fixed';\n      notification.style.top = '50%';\n      notification.style.left = '50%';\n      notification.style.transform = 'translate(-50%, -50%)';\n      notification.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';\n      notification.style.color = 'white';\n      notification.style.padding = '15px 25px';\n      notification.style.borderRadius = '5px';\n      notification.style.zIndex = '10001';\n      notification.style.fontSize = '18px';\n      document.body.appendChild(notification);\n      setTimeout(() => {\n        if (notification && notification.parentNode) {\n          notification.parentNode.removeChild(notification);\n        }\n      }, 2000);\n    },\n    // 恢复原始文本\n    restoreOriginalText: function () {\n      const charSpans = document.querySelectorAll('.rhythm-char');\n\n      // 按父节点分组\n      const parentNodeMap = new Map();\n      charSpans.forEach(span => {\n        const parent = span.parentNode;\n        if (!parent) return;\n        if (!parentNodeMap.has(parent)) {\n          parentNodeMap.set(parent, []);\n        }\n        parentNodeMap.get(parent).push(span);\n      });\n      parentNodeMap.forEach((spans, parent) => {\n        if (spans.length === 0) return;\n        spans.sort((a, b) => {\n          const indexA = parseInt(a.dataset.rhythmIndex || '0');\n          const indexB = parseInt(b.dataset.rhythmIndex || '0');\n          return indexA - indexB;\n        });\n        const groups = [];\n        let currentGroup = [spans[0]];\n        for (let i = 1; i < spans.length; i++) {\n          const prevIndex = parseInt(spans[i - 1].dataset.rhythmIndex || '0');\n          const currentIndex = parseInt(spans[i].dataset.rhythmIndex || '0');\n          if (currentIndex === prevIndex + 1 && spans[i].previousSibling === spans[i - 1]) {\n            currentGroup.push(spans[i]);\n          } else {\n            groups.push(currentGroup);\n            currentGroup = [spans[i]];\n          }\n        }\n        groups.push(currentGroup);\n        groups.forEach(group => {\n          if (group.length === 0) return;\n          try {\n            const text = group.map(span => span.textContent).join('');\n            const textNode = document.createTextNode(text);\n            if (group[0].parentNode === parent) {\n              parent.replaceChild(textNode, group[0]);\n              for (let i = 1; i < group.length; i++) {\n                if (group[i].parentNode === parent) {\n                  parent.removeChild(group[i]);\n                }\n              }\n            }\n          } catch (e) {\n            console.error(\"【节奏阅读】恢复文本时出错:\", e);\n          }\n        });\n      });\n      this.charElements = [];\n    }\n  };\n\n  // 暴露到全局，以便调试和直接调用\n  window.rhythmReader = rhythmReader;\n\n  // 添加一个全局安全函数用于检查节奏阅读状态\n  window.isRhythmActive = function () {\n    return rhythmReader.active || getStorage('rhythmReadingActive') === 'true';\n  };\n\n  // 添加一个停止函数供外部安全调用\n  window.stopRhythmSafely = function () {\n    try {\n      setStorage('rhythmReadingActive', 'false');\n      if (rhythmReader && typeof rhythmReader.stop === 'function') {\n        rhythmReader.stop();\n      }\n    } catch (e) {\n      console.error(\"停止节奏阅读出错\", e);\n    }\n  };\n  console.log(\"【节奏阅读】初始化完成\");\n  return rhythmReader;\n};\nconst App = () => {\n  _s();\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  const [isTableOfContents, setIsTableOfContents] = useState(false);\n\n  // 实现缺失的函数\n  // 应用深色背景\n  const applyDarkBackground = () => {\n    document.body.classList.add('dark-background');\n\n    // 添加必要的CSS样式\n    if (!document.getElementById('dark-background-style')) {\n      const style = document.createElement('style');\n      style.id = 'dark-background-style';\n      style.textContent = `\n        .dark-background {\n          background-color: #000 !important;\n        }\n        .dark-background .sidebar {\n          background: linear-gradient(145deg, #4834d4, #341f9e) !important;\n        }\n        .dark-background .page-content {\n          background-color: #000 !important;\n        }\n        .dark-background .main-content {\n          background-color: #000 !important;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 恢复正常背景\n  const restoreDarkBackground = () => {\n    document.body.classList.remove('dark-background');\n  };\n\n  // 添加裸眼3D样式\n  const addNakedEye3DStyles = () => {\n    if (!document.getElementById('naked-eye-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'naked-eye-3d-style';\n      style.textContent = `\n        .naked-eye-3d-container {\n          position: relative;\n          perspective: 800px;\n          width: 100%;\n        }\n        \n        .naked-eye-3d-text {\n          display: inline-block;\n          animation: float 3s ease-in-out infinite;\n          text-shadow: 0 0 5px rgba(255,255,255,0.3);\n          padding: 0 4px;\n          color: white;\n          filter: drop-shadow(0 0 5px rgba(120, 220, 255, 0.6));\n        }\n        \n        @keyframes float {\n          0% { transform: translateZ(0px); }\n          50% { transform: translateZ(20px); }\n          100% { transform: translateZ(0px); }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 添加舒适3D样式\n  const addComfortable3DStyles = () => {\n    if (!document.getElementById('comfortable-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'comfortable-3d-style';\n      style.textContent = `\n        .emboss-3d-text {\n          color: #fff;\n          text-shadow: \n            1px 1px 1px rgba(0,0,0,0.5),\n            -1px -1px 1px rgba(255,255,255,0.5);\n          letter-spacing: 1.5px;\n          font-weight: 500;\n        }\n        \n        .float-3d-text {\n          display: inline-block;\n          transform-style: preserve-3d;\n          transform: perspective(500px) translateZ(10px);\n          text-shadow: 0 2px 5px rgba(0,0,0,0.5);\n        }\n        \n        .gradient-3d-text {\n          display: inline-block;\n          background: linear-gradient(to bottom, #fff, #aaa);\n          -webkit-background-clip: text;\n          -webkit-text-fill-color: transparent;\n          text-shadow: 0 2px 4px rgba(0,0,0,0.3);\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 添加闪读样式\n  const addFlashReadingStyles = () => {\n    if (!document.getElementById('flash-reading-style')) {\n      const style = document.createElement('style');\n      style.id = 'flash-reading-style';\n      style.textContent = `\n        .flash-reading-container {\n          position: relative;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          z-index: 1000;\n          padding: 20px;\n        }\n        \n        .flash-reading-display-wrapper {\n          position: relative;\n          margin: 40px 0;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        \n        .flash-reading-display {\n          font-size: 36px;\n          font-weight: bold;\n          text-align: center;\n          color: white;\n          min-height: 80px;\n          max-width: 90%;\n          padding: 20px 40px;\n          position: relative; /* 允许绝对定位的覆盖层 */\n          z-index: 2;\n        }\n        \n        .flash-reading-cover {\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(128, 128, 128, 0.6); /* 灰色遮罩 */\n          border-radius: 8px;\n          z-index: 1; /* 确保在文本后面 */\n        }\n        \n        .flash-reading-controls {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          gap: 20px;\n          margin-bottom: 20px;\n          width: 100%;\n        }\n        \n        .flash-reading-buttons {\n          display: flex;\n          gap: 10px;\n          flex-wrap: wrap;\n          justify-content: center;\n        }\n        \n        .flash-reading-speed {\n          display: flex;\n          align-items: center;\n          color: white;\n          width: 80%;\n          max-width: 400px;\n          gap: 10px;\n        }\n        \n        .flash-reading-slider {\n          flex: 1;\n          height: 8px;\n          appearance: none;\n          background: #555;\n          border-radius: 4px;\n          outline: none;\n        }\n        \n        .flash-reading-slider::-webkit-slider-thumb {\n          appearance: none;\n          width: 20px;\n          height: 20px;\n          border-radius: 50%;\n          background: #6c5ce7;\n          cursor: pointer;\n        }\n        \n        .flash-reading-btn {\n          padding: 10px 20px;\n          border: none;\n          border-radius: 4px;\n          background-color: #6c5ce7;\n          color: white;\n          font-size: 16px;\n          cursor: pointer;\n          transition: background-color 0.2s;\n        }\n        \n        .flash-reading-btn:hover {\n          background-color: #5344c0;\n        }\n        \n        .flash-reading-btn:disabled {\n          background-color: #aaa;\n          cursor: not-allowed;\n        }\n        \n        .flash-reading-progress {\n          color: white;\n          font-size: 14px;\n          margin-top: 10px;\n        }\n        .flash-reading-speed-note {\n          font-size: 12px;\n          color: #ccc;\n          margin-left: 5px;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 初始化闪读模式\n  const initializeFlashReading = () => {\n    // 添加样式\n    addFlashReadingStyles();\n    const sentences = window.flashReadingSentences;\n    if (!sentences || !Array.isArray(sentences) || sentences.length === 0) {\n      console.error('闪读模式: 未找到句子数据');\n      return;\n    }\n\n    // 获取全局UI元素\n    const display = document.getElementById('flash-reading-display');\n    const speedSlider = document.getElementById('flash-reading-speed');\n    const speedValue = document.getElementById('flash-reading-speed-value');\n    const playButton = document.getElementById('flash-reading-play');\n    const pauseButton = document.getElementById('flash-reading-pause');\n    const stopButton = document.getElementById('flash-reading-stop');\n    const prevButton = document.getElementById('flash-reading-prev-sentence');\n    const nextButton = document.getElementById('flash-reading-next-sentence');\n    const progress = document.getElementById('flash-reading-progress');\n    const cover = document.querySelector('.flash-reading-cover');\n    if (!display || !speedSlider || !speedValue || !playButton || !pauseButton || !stopButton || !prevButton || !nextButton || !progress || !cover) {\n      console.error('闪读模式: 未找到UI元素');\n      return;\n    }\n\n    // 创建闪读控制器\n    window.flashReader = {\n      sentences: sentences,\n      currentIndex: 0,\n      interval: null,\n      speed: parseInt(speedSlider.value),\n      isPlaying: false,\n      // 开始闪读\n      start() {\n        if (this.interval) {\n          clearInterval(this.interval);\n        }\n        this.isPlaying = true;\n        playButton.disabled = true;\n        pauseButton.disabled = false;\n        progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n\n        // 显示当前句子\n        this.displayCurrentSentence();\n\n        // 设置闪读间隔\n        this.interval = setInterval(() => {\n          this.currentIndex++;\n          if (this.currentIndex >= this.sentences.length) {\n            this.stop();\n            display.textContent = '阅读完成';\n            return;\n          }\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }, this.speed);\n      },\n      // 显示当前句子\n      displayCurrentSentence() {\n        if (this.currentIndex < this.sentences.length) {\n          const currentSentence = this.sentences[this.currentIndex];\n          display.textContent = currentSentence;\n          display.style.color = 'white'; // 确保文本为白色\n\n          // 调整背景以适应内容\n          setTimeout(() => {\n            const displayRect = display.getBoundingClientRect();\n            // 确保覆盖层完全包裹文本\n            cover.style.width = `${displayRect.width}px`;\n            cover.style.height = `${displayRect.height}px`;\n          }, 10);\n        }\n      },\n      // 暂停闪读\n      pause() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n      },\n      // 停止闪读\n      stop() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        this.currentIndex = 0;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n        display.textContent = '准备开始';\n        progress.textContent = `进度：0 / ${this.sentences.length}`; // 重置进度\n      },\n      // 更新速度\n      updateSpeed(newSpeed) {\n        this.speed = newSpeed;\n        speedValue.textContent = `${newSpeed} ms`;\n\n        // 保存速度设置到本地存储\n        localStorage.setItem('flash-reading-speed', newSpeed);\n\n        // 如果正在播放，重新开始以应用新速度\n        if (this.isPlaying) {\n          clearInterval(this.interval);\n          this.start(); // 直接调用start方法重新开始\n        }\n      },\n      // 返回上一句\n      prevSentence() {\n        if (this.currentIndex > 0) {\n          this.currentIndex--;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n      // 跳到下一句\n      nextSentence() {\n        if (this.currentIndex < this.sentences.length - 1) {\n          this.currentIndex++;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n      // 清理资源\n      cleanup() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        this.currentIndex = 0;\n      }\n    };\n\n    // 添加事件监听器\n    playButton.addEventListener('click', () => {\n      window.flashReader.start();\n    });\n    pauseButton.addEventListener('click', () => {\n      window.flashReader.pause();\n    });\n    stopButton.addEventListener('click', () => {\n      window.flashReader.stop();\n    });\n    speedSlider.addEventListener('input', e => {\n      const newSpeed = parseInt(e.target.value);\n      window.flashReader.updateSpeed(newSpeed);\n    });\n    prevButton.addEventListener('click', () => {\n      window.flashReader.prevSentence();\n    });\n    nextButton.addEventListener('click', () => {\n      window.flashReader.nextSentence();\n    });\n\n    // 初始化\n    const savedSpeed = localStorage.getItem('flash-reading-speed');\n    const initialSpeed = savedSpeed ? parseInt(savedSpeed) : 1000;\n    speedSlider.value = initialSpeed;\n    window.flashReader.updateSpeed(initialSpeed);\n    console.log('闪读模式已初始化，共 ' + sentences.length + ' 个句子');\n  };\n\n  // 创建闪读内容\n  const createFlashReadingContent = text => {\n    return `<div class=\"flash-reading-content\">\n      <p>${text}</p>\n    </div>`;\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 格式化文本用于鼠标跟随\n  const formatTextForMouseFollow = text => {\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个单词添加span，以便于添加高亮效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"follow-word\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\" data-follow=\"true\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用静态高亮\n  const applyStaticHighlight = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为单词随机添加颜色高亮\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      let lastColor = null;\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n          return;\n        }\n\n        // 随机决定是否高亮和使用哪种颜色\n        if (Math.random() < 0.7) {\n          let color;\n          if (lastColor === 'red') {\n            color = 'blue';\n          } else if (lastColor === 'blue') {\n            color = 'red';\n          } else {\n            color = Math.random() < 0.5 ? 'red' : 'blue';\n          }\n          lastColor = color;\n          processedParagraph += `<span class=\"highlight-word ${color}\">${word}</span>`;\n        } else {\n          processedParagraph += word;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用裸眼3D效果\n  const applyNakedEye3dEffect = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content naked-eye-3d-container\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个词添加3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"naked-eye-3d-text\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用舒适3D效果\n  const applyComfortable3dEffect = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个词随机应用不同的3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          processedParagraph += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 初始化裸眼3D\n  const initializeNakedEye3D = () => {\n    // 为裸眼3D文本添加动画\n    const textElements = document.querySelectorAll('.naked-eye-3d-text');\n    textElements.forEach((element, index) => {\n      // 添加随机延迟，使动画错开\n      const delay = Math.random() * 2;\n      element.style.animationDelay = `${delay}s`;\n    });\n  };\n\n  // 初始化节奏阅读\n  const initializeRhythmReading = () => {\n    if (window.rhythmReader && typeof window.rhythmReader.initializeTextNodes === 'function') {\n      window.rhythmReader.initializeTextNodes();\n    }\n  };\n\n  // 启动节奏阅读\n  const startRhythmReading = () => {\n    if (window.rhythmReader && typeof window.rhythmReader.start === 'function') {\n      window.rhythmReader.start();\n    }\n  };\n\n  // 添加鼠标跟随监听器\n  const addMouseFollowListeners = () => {\n    // 获取内容容器\n    const contentArea = document.querySelector('.mouse-follow-content');\n    if (!contentArea) {\n      console.error('未找到鼠标跟随内容区域');\n      return;\n    }\n\n    // 上一个高亮的行\n    let lastHighlightedLine = null;\n\n    // 监听鼠标移动 - 精确的行检测\n    const mouseMoveHandler = e => {\n      // 获取鼠标位置\n      const mouseY = e.clientY;\n\n      // 获取所有行\n      const allLines = contentArea.querySelectorAll('.follow-line');\n      let foundLine = null;\n      let minDistance = Infinity;\n\n      // 寻找鼠标所在的精确行\n      allLines.forEach(line => {\n        const rect = line.getBoundingClientRect();\n        const lineCenter = rect.top + rect.height / 2;\n        const distance = Math.abs(mouseY - lineCenter);\n\n        // 如果鼠标在行范围内，计算到行中心的距离\n        if (mouseY >= rect.top && mouseY <= rect.bottom) {\n          if (distance < minDistance) {\n            minDistance = distance;\n            foundLine = line;\n          }\n        }\n      });\n\n      // 更新高亮状态\n      if (lastHighlightedLine && lastHighlightedLine !== foundLine) {\n        // 移除旧高亮\n        lastHighlightedLine.classList.remove('highlighted');\n      }\n      if (foundLine) {\n        // 添加新高亮\n        foundLine.classList.add('highlighted');\n        lastHighlightedLine = foundLine;\n\n        // 调试输出\n        console.log('当前高亮行:', foundLine.textContent.substring(0, 30) + '...');\n      } else if (lastHighlightedLine) {\n        // 如果没有找到新行，且有上一个高亮行，移除它\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n\n    // 鼠标离开处理\n    const mouseLeaveHandler = () => {\n      // 清除当前高亮\n      if (lastHighlightedLine) {\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n\n    // 存储处理函数引用\n    window.eventTracker = window.eventTracker || {\n      mouseFollowHandlers: []\n    };\n    window.eventTracker.mouseFollowHandlers.push({\n      element: contentArea,\n      event: 'mousemove',\n      handler: mouseMoveHandler\n    }, {\n      element: contentArea,\n      event: 'mouseleave',\n      handler: mouseLeaveHandler\n    });\n\n    // 添加事件监听器\n    contentArea.addEventListener('mousemove', mouseMoveHandler);\n    contentArea.addEventListener('mouseleave', mouseLeaveHandler);\n    console.log('改进的鼠标跟随监听器已初始化');\n  };\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n  }, []);\n\n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async file => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n\n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n\n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n\n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({\n        scale: 1.0\n      });\n\n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async textContent => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n\n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n\n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n\n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    const lines = [...lineMap.values()];\n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    return hasTocKeywords || hasPageNumberPatterns || shortLineRatio > 0.7 && numberLineRatio > 0.3;\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n\n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n\n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n\n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n\n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = text => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    return result;\n  };\n\n  // 处理内容页面 - 按句子划分段落\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n\n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 按句子划分内容（句号、问号、感叹号等作为分隔符）\n      const sentences = splitIntoSentences(extractedText);\n\n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch (mode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          // 使用ADHD友好的静态高亮处理\n          console.log('应用ADHD友好的静态高亮模式');\n          processedContent = formatSimpleHighlightedText(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'rhythm':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          processedContent = createFlashReadingContentFromSentences(sentences);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n      setContent(processedContent);\n\n      // 如果是静态高亮模式，添加延时验证检查\n      if (mode === 'static') {\n        setTimeout(() => {\n          const contentArea = document.querySelector('.adhd-highlight-mode');\n          if (contentArea) {\n            console.log('静态高亮模式元素存在');\n            const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n            console.log(`找到 ${paragraphs.length} 个段落`);\n\n            // 检查样式是否正确应用\n            if (paragraphs.length > 0) {\n              const firstPara = paragraphs[0];\n              const styles = window.getComputedStyle(firstPara);\n              console.log('段落应用的样式:', {\n                color: styles.color,\n                backgroundColor: styles.backgroundColor,\n                fontFamily: styles.fontFamily,\n                fontSize: styles.fontSize\n              });\n            }\n          }\n        }, 200);\n      }\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 将文本分割成句子\n  const splitIntoSentences = text => {\n    // 匹配句号、问号、感叹号后跟空格或结束的模式\n    // 支持中英文标点符号\n    const sentenceRegex = /([.!?。！？；;]+\\s*)/g;\n\n    // 分割文本成句子\n    const sentences = [];\n    let lastIndex = 0;\n    let match;\n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const sentence = text.substring(lastIndex, endIndex).trim();\n\n      // 避免添加空句子\n      if (sentence) {\n        sentences.push(sentence);\n      }\n      lastIndex = endIndex;\n    }\n\n    // 处理最后一部分（如果没有以句号等结尾）\n    if (lastIndex < text.length) {\n      const lastSentence = text.substring(lastIndex).trim();\n      if (lastSentence) {\n        sentences.push(lastSentence);\n      }\n    }\n    return sentences;\n  };\n\n  // 专门为闪读模式分割文本，以任意标点符号为分隔点\n  const splitIntoFlashReadingSegments = text => {\n    // 匹配任意标点符号包括中英文标点\n    const sentenceRegex = /([,.!?:;，。！？：；、]+\\s*)/g;\n\n    // 分割文本成短句\n    const segments = [];\n    let lastIndex = 0;\n    let match;\n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const segment = text.substring(lastIndex, endIndex).trim();\n\n      // 避免添加空段落\n      if (segment) {\n        segments.push(segment);\n      }\n      lastIndex = endIndex;\n    }\n\n    // 处理最后一部分（如果没有以标点符号结尾）\n    if (lastIndex < text.length) {\n      const lastSegment = text.substring(lastIndex).trim();\n      if (lastSegment) {\n        segments.push(lastSegment);\n      }\n    }\n    return segments;\n  };\n\n  // 格式化句子为HTML\n  const formatSentencesToHtml = sentences => {\n    let html = '<div class=\"pdf-content\">';\n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${sentence}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为句子应用静态高亮\n  const applyStaticHighlightToSentences = sentences => {\n    let html = '<div class=\"pdf-content adhd-content\">';\n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n\n      // 简单地为句子添加特定样式的class\n      html += `<p class=\"pdf-paragraph adhd-sentence\">${sentence}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为鼠标跟随模式格式化句子\n  const formatSentencesForMouseFollow = sentences => {\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    sentences.forEach((sentence, index) => {\n      if (sentence.trim() === '') return;\n\n      // 每个句子作为独立行，使用div而不是p标签\n      html += `<div class=\"follow-line\" data-line=\"${index}\" data-sentence=\"${sentence.substring(0, 20)}...\" style=\"color: inherit;\">${sentence}</div>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为舒适3D模式格式化句子\n  const applyComfortable3dEffectToSentences = sentences => {\n    let html = '<div class=\"pdf-content\">';\n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n\n      // 为每个词随机应用不同的3D效果\n      const words = sentence.split(/(\\s+)/);\n      let processedSentence = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedSentence += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          processedSentence += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedSentence}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为闪读模式创建内容\n  const createFlashReadingContentFromSentences = sentences => {\n    // 储存句子到全局变量，用于后续显示\n    window.flashReadingSentences = sentences;\n\n    // 返回闪读界面的HTML结构\n    return `\n      <div class=\"flash-reading-container\">\n        <div class=\"flash-reading-controls\">\n          <div class=\"flash-reading-buttons\">\n            <button id=\"flash-reading-prev-sentence\" class=\"flash-reading-btn\">上一句</button>\n            <button id=\"flash-reading-play\" class=\"flash-reading-btn\">开始</button>\n            <button id=\"flash-reading-pause\" class=\"flash-reading-btn\" disabled>暂停</button>\n            <button id=\"flash-reading-stop\" class=\"flash-reading-btn\">停止</button>\n            <button id=\"flash-reading-next-sentence\" class=\"flash-reading-btn\">下一句</button>\n          </div>\n          <div class=\"flash-reading-speed\">\n            <span>速度：</span>\n            <input type=\"range\" id=\"flash-reading-speed\" min=\"300\" max=\"1700\" step=\"50\" value=\"1000\" class=\"flash-reading-slider\">\n            <span id=\"flash-reading-speed-value\">1000 ms</span>\n            <span class=\"flash-reading-speed-note\">（数值越小，切换越快）</span>\n          </div>\n          <div class=\"flash-reading-progress\">\n            <span id=\"flash-reading-progress\">进度：0 / ${sentences.length}</span>\n          </div>\n        </div>\n        <div class=\"flash-reading-display-wrapper\">\n          <div class=\"flash-reading-cover\"></div> <!-- 这里是闪卡 -->\n          <div id=\"flash-reading-display\" class=\"flash-reading-display\">准备开始</div>\n        </div>\n      </div>`;\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async file => {\n    try {\n      const text = await file.text();\n\n      // 根据阅读模式选择不同的处理方式\n      let processedContent = '';\n      if (readingMode === 'flash-reading') {\n        // 闪读模式下使用特定的分割函数\n        const segments = splitIntoFlashReadingSegments(text);\n        processedContent = createFlashReadingContentFromSentences(segments);\n\n        // 初始化闪读模式\n        setTimeout(() => {\n          initializeFlashReading();\n        }, 100);\n      } else {\n        // 其他模式使用默认的分割方式\n        const sentences = splitIntoSentences(text);\n        switch (readingMode) {\n          case 'normal':\n            processedContent = formatSentencesToHtml(sentences);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlightToSentences(sentences);\n            break;\n          case 'follow-mouse':\n            processedContent = formatSentencesForMouseFollow(sentences);\n            break;\n          case 'comfortable-3d':\n            processedContent = applyComfortable3dEffectToSentences(sentences);\n            break;\n          default:\n            processedContent = formatSentencesToHtml(sentences);\n        }\n      }\n\n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n\n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setContent('<div class=\"error-message\">TXT文件处理失败</div>');\n    }\n  };\n\n  // 处理Markdown文件\n  const handleMarkdownFile = async file => {\n    try {\n      const text = await file.text();\n\n      // 使用marked库转换markdown为HTML\n      let html = '';\n      try {\n        if (window.marked) {\n          html = window.marked.parse(text);\n        } else {\n          // 如果没有marked库，简单地拆分为段落\n          html = `<div>${text.split(\"\\n\\n\").map(p => `<p>${p}</p>`).join(\"\")}</div>`;\n        }\n      } catch (parseError) {\n        console.error('Markdown解析错误:', parseError);\n        html = `<div>${text}</div>`;\n      }\n\n      // 提取纯文本内容\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = html;\n      const plainText = tempDiv.textContent || tempDiv.innerText || '';\n\n      // 分割文本为句子\n      const sentences = splitIntoSentences(plainText);\n\n      // 根据当前阅读模式处理内容\n      let processedContent = '';\n      switch (readingMode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlightToSentences(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          // 使用特定的闪读分割函数重新处理文本\n          const segments = splitIntoFlashReadingSegments(plainText);\n          processedContent = createFlashReadingContentFromSentences(segments);\n\n          // 初始化闪读模式\n          setTimeout(() => {\n            initializeFlashReading();\n          }, 100);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n\n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n\n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('Markdown处理错误:', error);\n      setContent('<div class=\"error-message\">Markdown文件处理失败</div>');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async e => {\n    const uploadedFile = e.target.files[0];\n    if (!uploadedFile) return;\n    setLoading(true);\n    setFileName(uploadedFile.name);\n    try {\n      if (uploadedFile.type === 'application/pdf') {\n        await handlePdfFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/plain' || uploadedFile.name.endsWith('.txt')) {\n        await handleTxtFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/markdown' || uploadedFile.name.endsWith('.md')) {\n        await handleMarkdownFile(uploadedFile);\n      } else {\n        setContent('<div class=\"error-message\">不支持的文件格式</div>');\n      }\n    } catch (error) {\n      console.error('处理文件时出错:', error);\n      setContent('<div class=\"error-message\">处理文件时出错</div>');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = container => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n\n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n\n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n\n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width / 2,\n            // 水平中心\n            y: rect.bottom,\n            // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n\n    // 过滤无效位置并排序\n    return positions.filter(p => p.char.trim() !== '').sort((a, b) => {\n      // 先按行排序，同行按列排序\n      const yDiff = a.y - b.y;\n      if (Math.abs(yDiff) > 5) {\n        // 5px阈值判断是否同一行\n        return yDiff;\n      }\n      return a.x - b.x;\n    });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n\n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - containerVisibleHeight / 2;\n\n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - window.innerHeight / 2;\n\n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n\n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n\n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length ||\n      // 已到末尾\n      positions[nextIndex].char.trim() === '' ||\n      // 下一个是空白\n      positions[nextIndex].y > charPosition.y + 5) {\n        // 下一个在新行\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n\n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n\n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || current.y > prev.y + 5) {\n        // 有明显换行\n        break;\n      }\n      start--;\n    }\n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n\n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n\n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (window.autoReader.charPositions.length === 0) {\n      if (window.currentPage < window.totalPages) {\n        window.changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 重置索引到开头\n    window.autoReader.currentIndex = 0;\n\n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n\n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n\n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none';\n      highlight.style.zIndex = '998';\n      contentContainer.appendChild(highlight);\n    }\n\n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n\n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20;\n\n    // 尝试获取实际行高\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(window.autoReader.charPositions[i].y - window.autoReader.charPositions[i - 1].y);\n        if (yDiff > 5) {\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n\n    // 记录上次滚动的位置\n    let lastScrolledY = -1;\n    const scrollSafeZone = lineHeight * 2.5;\n\n    // 设置字符大小的估计值\n    let charWidth = 20;\n    let charHeight = lineHeight * 0.8;\n\n    // 尝试估计字符宽度\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        if (window.autoReader.charPositions[i].x !== window.autoReader.charPositions[i - 1].x) {\n          const xDiff = Math.abs(window.autoReader.charPositions[i].x - window.autoReader.charPositions[i - 1].x);\n          if (xDiff > 0 && xDiff < 50) {\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    window.autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (window.autoReader.currentIndex < window.autoReader.charPositions.length && ((_window$autoReader$ch = window.autoReader.charPositions[window.autoReader.currentIndex]) === null || _window$autoReader$ch === void 0 ? void 0 : _window$autoReader$ch.char.trim()) === '') {\n        var _window$autoReader$ch;\n        window.autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (window.autoReader.currentIndex >= window.autoReader.charPositions.length) {\n        if (window.currentPage < window.totalPages) {\n          window.changePage(1);\n          clearInterval(window.autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n      const pos = window.autoReader.charPositions[window.autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      if (cursor && highlight) {\n        const contentRect = contentContainer.getBoundingClientRect();\n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        highlight.style.left = `${relativeX - charWidth / 2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n\n        // 滚动处理\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          if (isContainerScrollable) {\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = relativeY;\n            }\n          } else {\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      window.autoReader.currentIndex++;\n    }, window.autoReader.speed);\n\n    // 在停止自动阅读时清除所有高亮\n    window.autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n\n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n\n      // 调用清理函数\n      if (window.autoReader.cleanup) {\n        window.autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n\n    // 重置翻页状态\n    window.autoReader.isPageChanging = false;\n\n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n\n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n\n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n\n    // 收集字符位置\n    window.autoReader.charPositions = getAllCharacterPositions(content);\n\n    // 如果当前页没有内容，尝试翻页\n    if (window.autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !window.autoReader.isPageChanging) {\n        window.autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async e => {\n    const newMode = e.target.value;\n    const prevMode = readingMode;\n    console.log(`切换阅读模式: 从 ${prevMode} 到 ${newMode}`);\n\n    // 更新状态\n    setReadingMode(newMode);\n\n    // 如果有PDF文档和当前页，重新处理当前页内容\n    if (pdfDocument && currentPage > 0) {\n      try {\n        console.log('重新处理当前页面内容');\n        const page = await pdfDocument.getPage(currentPage);\n\n        // 不使用任何额外处理，直接使用最原始的方式重新加载页面\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n\n        // 根据当前模式设置内容\n        if (newMode === 'static') {\n          // 静态高亮模式 - 使用改进的句子处理\n          const html = formatSimpleHighlightedText(sentences);\n          console.log('设置静态高亮内容');\n          setContent(html);\n\n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n            if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n\n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n\n                // 验证文字颜色\n                if (styles.color === 'rgb(51, 51, 51)' || styles.color === '#333333') {\n                  console.log('文字颜色正确应用');\n                } else {\n                  console.warn('文字颜色可能未正确应用:', styles.color);\n                }\n              }\n            } else {\n              console.error('未找到静态高亮模式内容区域');\n            }\n          }, 200);\n        } else if (newMode === 'flash-reading') {\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n\n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n\n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n        } else {\n          // 其他模式保持不变\n          const handler = getContentHandlerForMode(newMode);\n          const processedContent = handler(sentences);\n          setContent(processedContent);\n        }\n      } catch (error) {\n        console.error('应用阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 首先确保移除鼠标跟随监听器\n    removeMouseFollowListeners();\n\n    // 清理节奏阅读器\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n\n    // 清理闪读器\n    if (window.flashReader) {\n      window.flashReader.cleanup();\n    }\n\n    // 清理舒适3D效果\n    const comfortable3DElements = document.querySelectorAll('.emboss-3d-text, .float-3d-text, .gradient-3d-text');\n    comfortable3DElements.forEach(el => el.remove());\n\n    // 清理闪读模式元素\n    const flashReadingElements = document.querySelectorAll('.flash-reading-container, .flash-reading-display, .flash-reading-controls');\n    flashReadingElements.forEach(el => el.remove());\n\n    // 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll('.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line, .rhythm-char');\n    highlights.forEach(el => {\n      if (el.parentNode) el.parentNode.removeChild(el);\n    });\n\n    // 彻底替换内容区域以移除所有事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      var _contentArea$querySel;\n      // 先保存底部翻页控件\n      const bottomPagination = contentArea.querySelector('.bottom-pagination');\n\n      // 深度克隆内容，但不克隆事件监听器\n      const contentHTML = ((_contentArea$querySel = contentArea.querySelector('div[dangerouslySetInnerHTML]')) === null || _contentArea$querySel === void 0 ? void 0 : _contentArea$querySel.innerHTML) || '';\n      const newContentArea = contentArea.cloneNode(false);\n\n      // 创建新的内容容器\n      const newContentContainer = document.createElement('div');\n      newContentContainer.innerHTML = contentHTML;\n      newContentArea.appendChild(newContentContainer);\n\n      // 如果有底部翻页控件，重新添加\n      if (bottomPagination && totalPages > 0) {\n        const newBottomPagination = bottomPagination.cloneNode(true);\n        // 重新绑定事件\n        const prevBtn = newBottomPagination.querySelector('.page-btn:first-child');\n        const nextBtn = newBottomPagination.querySelector('.page-btn:last-child');\n        if (prevBtn) prevBtn.onclick = () => changePage(-1);\n        if (nextBtn) nextBtn.onclick = () => changePage(1);\n        newContentArea.appendChild(newBottomPagination);\n      }\n      if (contentArea.parentNode) {\n        contentArea.parentNode.replaceChild(newContentArea, contentArea);\n      }\n    }\n\n    // 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 移除所有特殊标记和样式\n      paragraph.removeAttribute('data-follow');\n      paragraph.removeAttribute('style');\n\n      // 清理特殊span标签\n      paragraph.innerHTML = paragraph.innerHTML.replace(/<span class=\"text-line\"[^>]*>/g, '').replace(/<span class=\"rhythm-char\"[^>]*>/g, '').replace(/<span class=\"line-highlight[^\"]*\"[^>]*>/g, '').replace(/<span class=\"mouse-highlight[^\"]*\"[^>]*>/g, '').replace(/<\\/span>/g, '');\n    });\n\n    // 移除特殊UI元素\n    const elementsToRemove = ['rhythm-speed-slider', 'rhythm-notification'];\n    elementsToRemove.forEach(id => {\n      const element = document.getElementById(id);\n      if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    });\n\n    // 移除暗色背景\n    document.body.classList.remove('dark-background');\n\n    // 清理闪读模式\n    if (window.flashReader && typeof window.flashReader.cleanup === 'function') {\n      window.flashReader.cleanup();\n    }\n  };\n  const handleAutoScroll = () => {\n    window.autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = e => {\n    if (readingMode !== 'follow-mouse') return;\n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    const rect = contentArea.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    clearAllHighlights();\n    const paragraphs = contentArea.querySelectorAll('p');\n    paragraphs.forEach(paragraph => {\n      const paragraphRect = paragraph.getBoundingClientRect();\n      const paragraphX = paragraphRect.left - rect.left;\n      const paragraphY = paragraphRect.top - rect.top;\n      if (y >= paragraphY && y <= paragraphY + paragraphRect.height) {\n        const words = paragraph.querySelectorAll('span');\n        words.forEach(word => {\n          const wordRect = word.getBoundingClientRect();\n          const wordX = wordRect.left - rect.left;\n          if (x >= wordX && x <= wordX + wordRect.width) {\n            word.classList.add('highlight');\n          }\n        });\n      }\n    });\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 专门用于移除鼠标跟随事件的函数\n  const removeMouseFollowListeners = () => {\n    // 移除记录的所有监听器\n    if (window.eventTracker && window.eventTracker.mouseFollowHandlers) {\n      window.eventTracker.mouseFollowHandlers.forEach(({\n        element,\n        event,\n        handler\n      }) => {\n        if (element && element.removeEventListener) {\n          element.removeEventListener(event, handler);\n        }\n      });\n      window.eventTracker.mouseFollowHandlers = [];\n    }\n\n    // 为安全起见，尝试从document和内容区域移除通用处理函数\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    }\n    document.removeEventListener('mousemove', handleMouseMove);\n\n    // 清除所有当前高亮\n    clearAllHighlights();\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n\n    // 添加底部翻页控件样式\n    const bottomPaginationStyles = document.createElement('style');\n    bottomPaginationStyles.id = 'bottom-pagination-styles';\n    bottomPaginationStyles.innerHTML = `\n      .bottom-pagination {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        padding: 20px 0 30px;\n        margin-top: 30px;\n        width: 100%;\n        background-color: transparent;\n        border-radius: 5px;\n      }\n\n      .bottom-pagination .page-btn {\n        background-color: #6c5ce7;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        padding: 8px 15px;\n        margin: 0 10px;\n        cursor: pointer;\n        font-size: 14px;\n        transition: background-color 0.2s ease;\n      }\n\n      .bottom-pagination .page-btn:hover {\n        background-color: #4834d4;\n      }\n\n      .bottom-pagination .page-btn:disabled {\n        background-color: #aaa;\n        cursor: not-allowed;\n      }\n\n      .bottom-pagination .page-info {\n        font-size: 14px;\n        margin: 0 10px;\n      }\n    `;\n    document.head.appendChild(bottomPaginationStyles);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n    addComfortable3DStyles();\n\n    // 添加鼠标跟随模式的样式\n    const mouseFollowStyle = document.createElement('style');\n    mouseFollowStyle.id = 'intelligent-mouse-follow-style';\n    mouseFollowStyle.textContent = `\n      /* 基础样式 */\n      .mouse-follow-content {\n        position: relative;\n        line-height: 1.8;\n      }\n      \n      .mouse-follow-content .follow-line {\n        position: relative;\n        padding: 8px 16px;\n        margin: 4px 0;\n        border-radius: 6px;\n        transition: all 0.2s ease;\n        display: block;\n        min-height: 1.8em;\n        white-space: normal;\n        word-wrap: break-word;\n        text-indent: 2em;\n      }\n      \n      /* 高亮状态 */\n      .follow-line.highlighted {\n        background-color: #ffa500 !important; /* 橙色背景 */\n        color: #ffffff !important; /* 白色文字 */\n        font-weight: bold !important;\n        font-size: 1.1em; /* 稍微调小字号 */\n        transform: translateX(5px);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n      }\n      \n      \n      /* 平滑过渡效果 */\n      .follow-line {\n        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n      }\n      \n      /* 行间距优化 */\n      .mouse-follow-content .follow-line + .follow-line {\n        margin-top: 4px;\n      }\n      \n      /* 添加行指示器 */\n      .follow-line::before {\n        content: '';\n        position: absolute;\n        left: 0;\n        top: 0;\n        bottom: 0;\n        width: 3px;\n        background: linear-gradient(to bottom, transparent, rgba(255, 255, 255, 0.5), transparent);\n        opacity: 0;\n        transition: opacity 0.2s ease;\n      }\n      \n      .follow-line.highlighted::before {\n        opacity: 1;\n      }\n    `;\n    document.head.appendChild(mouseFollowStyle);\n\n    // 创建深色背景下的ADHD友好高亮样式\n    const style = document.createElement('style');\n    style.id = 'adhd-friendly-highlight-style';\n    style.textContent = `\n      /* ADHD友好的高亮样式 - 适配深色背景 */\n      .adhd-highlight-mode {\n        line-height: 1.8;\n        padding: 20px;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph {\n        margin-bottom: 1.2em;\n        background-color: transparent;\n        padding: 12px 15px;\n        border-radius: 6px;\n        border-left: 3px solid rgba(255, 255, 255, 0.2);\n        transition: all 0.3s ease;\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover {\n        transform: translateX(5px);\n        border-left-color: rgba(255, 255, 255, 0.4);\n      }\n      \n      /* 加粗样式 - 白色加粗 */\n      .adhd-bold {\n        font-weight: 700;\n        color: #ffffff;\n        letter-spacing: 0.02em;\n        font-size: 1.1em;\n        text-shadow: 0 0 1px rgba(255, 255, 255, 0.2);\n      }\n      \n      /* 彩色样式 - 使用鲜明的蓝色 */\n      .adhd-colored {\n        color: #6c5ce7;\n        font-weight: 500;\n        font-size: 1.05em;\n        text-shadow: 0 0 1px rgba(108, 92, 231, 0.2);\n      }\n      \n      /* 正常样式 - 普通白色 */\n      .adhd-normal {\n        color: rgba(255, 255, 255, 0.8);\n        font-size: 1em;\n      }\n\n      /* 添加平滑过渡效果 */\n      .adhd-bold, .adhd-colored, .adhd-normal {\n        transition: all 0.2s ease;\n      }\n\n      /* 悬停效果 */\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-bold {\n        color: #ffffff;\n        text-shadow: 0 0 2px rgba(255, 255, 255, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-colored {\n        color: #8a7ff7;\n        text-shadow: 0 0 2px rgba(138, 127, 247, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-normal {\n        color: rgba(255, 255, 255, 0.9);\n      }\n\n      /* 添加段落间距的视觉引导 */\n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph {\n        margin-top: 1.5em;\n        position: relative;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph::before {\n        content: '';\n        position: absolute;\n        top: -0.75em;\n        left: 0;\n        right: 0;\n        height: 1px;\n        background: linear-gradient(\n          to right,\n          transparent,\n          rgba(255, 255, 255, 0.1),\n          transparent\n        );\n      }\n    `;\n    document.head.appendChild(style);\n\n    // 添加基础鼠标跟随样式\n    const mouseFollowPageStyle = document.createElement('style');\n    mouseFollowPageStyle.id = 'basic-mouse-follow-style';\n    mouseFollowPageStyle.textContent = `\n      .follow-line {\n        padding: 8px 12px;\n        margin: 4px 0;\n        border-radius: 4px;\n        transition: background-color 0.2s ease;\n      }\n      .follow-line.highlighted {\n        background-color: #ffa500;\n        color: #000080;\n        font-weight: bold;\n      }\n    `;\n    document.head.appendChild(mouseFollowPageStyle);\n    return () => {\n      const existingStyle = document.getElementById('adhd-friendly-highlight-style');\n      if (existingStyle) existingStyle.remove();\n      const existingMouseFollowStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (existingMouseFollowStyle) existingMouseFollowStyle.remove();\n      const existingBasicMouseFollowStyle = document.getElementById('basic-mouse-follow-style');\n      if (existingBasicMouseFollowStyle) existingBasicMouseFollowStyle.remove();\n      mouseFollowPageStyle.remove();\n    };\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 清理旧监听器\n    removeMouseFollowListeners();\n\n    // 添加新监听器\n    setTimeout(() => {\n      addMouseFollowListeners();\n\n      // 添加调试辅助 - 显示行边界\n      const contentArea = document.querySelector('.mouse-follow-content');\n      if (contentArea) {\n        const lines = contentArea.querySelectorAll('.follow-line');\n        console.log(`初始化鼠标跟随模式，共 ${lines.length} 行`);\n\n        // 可选：启用可视化调试\n        if (false) {\n          // 设置为true可以启用可视化调试\n          lines.forEach((line, index) => {\n            line.style.border = '1px dashed #888';\n            line.setAttribute('title', `行 ${index + 1}`);\n          });\n        }\n\n        // 验证行高亮效果\n        const firstLine = lines[0];\n        if (firstLine) {\n          console.log('行样式验证:', {\n            padding: window.getComputedStyle(firstLine).padding,\n            margin: window.getComputedStyle(firstLine).margin,\n            fontSize: window.getComputedStyle(firstLine).fontSize,\n            lineHeight: window.getComputedStyle(firstLine).lineHeight\n          });\n        }\n      }\n    }, 100);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = delta => {\n    window.autoReader.speed = Math.max(100, window.autoReader.speed + delta);\n    if (window.autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async delta => {\n    console.log(`翻页请求: 当前页 ${currentPage}, 增量 ${delta}`);\n    const newPage = currentPage + delta;\n    if (newPage < 1 || newPage > totalPages) {\n      console.log('无效页码，不执行翻页');\n      return;\n    }\n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n    const wasFlashReading = readingMode === 'flash-reading' && window.flashReader && window.flashReader.isPlaying;\n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    if (wasFlashReading && window.flashReader) {\n      window.flashReader.cleanup();\n    }\n\n    // 更新页码\n    setCurrentPage(newPage);\n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n\n      // 检查是否为目录页\n      const textContent = await page.getTextContent();\n      const isToc = await detectIfTocPage(textContent);\n      setIsTableOfContents(isToc);\n      if (isToc) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, page.getViewport({\n          scale: 1.0\n        }));\n      } else {\n        // 处理正文页面 - 根据当前阅读模式处理\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n\n        // 根据当前模式设置内容\n        if (readingMode === 'static') {\n          console.log('翻页后应用静态高亮模式');\n          const processedContent = formatSimpleHighlightedText(sentences);\n          setContent(processedContent);\n\n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n            if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n\n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n              }\n            }\n          }, 200);\n        } else if (readingMode === 'flash-reading') {\n          // 如果是闪读模式，则需要特殊处理\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n\n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n\n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n          return; // 已处理，直接返回\n        } else {\n          // 其他模式使用原处理函数\n          await processContentPage(page, readingMode);\n        }\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n    } catch (error) {\n      console.error('页面切换错误:', error);\n    }\n  };\n\n  // ADHD友好的静态高亮处理函数\n  const formatSimpleHighlightedText = sentences => {\n    console.log('开始处理ADHD友好的静态高亮文本，句子数量:', sentences.length);\n    let html = '<div class=\"pdf-content adhd-highlight-mode\">';\n    sentences.forEach((sentence, sentenceIndex) => {\n      if (!sentence || sentence.trim() === '') {\n        console.log(`跳过空句子，索引: ${sentenceIndex}`);\n        return;\n      }\n\n      // 清理和规范化文本\n      const cleanText = sentence.trim().replace(/\\s+/g, ' ') // 规范化空白字符\n      .replace(/&/g, '&amp;') // 转义特殊字符\n      .replace(/</g, '&lt;').replace(/>/g, '&gt;');\n\n      // 处理句子中的单词，为它们添加不同样式\n      const words = cleanText.split(/(\\s+)/);\n      let formattedSentence = '';\n      words.forEach((word, wordIndex) => {\n        if (word.trim() === '') {\n          // 保留空格\n          formattedSentence += word;\n        } else {\n          // 根据位置应用不同的样式类\n          // 三种交替样式: 加粗、彩色、正常\n          const styleClass = wordIndex % 3 === 0 ? 'adhd-bold' : wordIndex % 3 === 1 ? 'adhd-colored' : 'adhd-normal';\n          formattedSentence += `<span class=\"${styleClass}\">${word}</span>`;\n        }\n      });\n      console.log(`处理句子 ${sentenceIndex + 1}:`, cleanText.substring(0, 50) + '...');\n      html += `<p class=\"pdf-paragraph\">${formattedSentence}</p>`;\n    });\n    html += '</div>';\n\n    // 调试输出\n    console.log('生成的ADHD友好静态高亮HTML:', html.substring(0, 200) + '...');\n    return html;\n  };\n\n  // 根据阅读模式获取相应的内容处理函数\n  const getContentHandlerForMode = mode => {\n    switch (mode) {\n      case 'normal':\n        return formatSentencesToHtml;\n      case 'static':\n        return applyStaticHighlightToSentences;\n      case 'follow-mouse':\n        return formatSentencesForMouseFollow;\n      case 'comfortable-3d':\n        return applyComfortable3dEffectToSentences;\n      case 'flash-reading':\n        return sentences => {\n          // 闪读模式使用专门的分割函数重新处理文本\n          return createFlashReadingContentFromSentences(sentences);\n        };\n      default:\n        return formatSentencesToHtml;\n    }\n  };\n\n  // 监听阅读模式和当前页面的变化\n  useEffect(() => {\n    if (readingMode === 'mouse-follow' && currentPage && !isTableOfContents) {\n      // 移除之前的样式\n      const oldStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (oldStyle) {\n        oldStyle.remove();\n      }\n\n      // 添加基础鼠标跟随样式\n      const followModeStyle = document.createElement('style');\n      followModeStyle.id = 'basic-mouse-follow-style';\n      followModeStyle.textContent = `\n        .follow-line {\n          padding: 8px 12px;\n          margin: 4px 0;\n          border-radius: 4px;\n          transition: background-color 0.2s ease;\n        }\n        .follow-line.highlighted {\n          background-color: #ffa500;\n          color: #000080;\n          font-weight: bold;\n        }\n      `;\n      document.head.appendChild(followModeStyle);\n\n      // 处理当前页面内容\n      const page = pdfDocument.getPage(currentPage);\n      const textContent = page.getTextContent();\n      const sentences = textContent.items.map(item => item.str).join(' ').split(/[。！？]/).filter(s => s.trim());\n\n      // 应用基础鼠标跟随格式化\n      setContent(formatSentencesForMouseFollow(sentences));\n\n      // 添加鼠标跟随监听器\n      setTimeout(() => {\n        addMouseFollowListeners();\n      }, 100);\n      return () => {\n        followModeStyle.remove();\n      };\n    }\n  }, [readingMode, currentPage, pdfDocument]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3079,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3078,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reading-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u9605\\u8BFB\\u6A21\\u5F0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3083,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"reading-mode-select\",\n          value: readingMode,\n          onChange: handleReadingModeChange,\n          className: \"mode-select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"normal\",\n            children: \"\\u666E\\u901A\\u6A21\\u5F0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3090,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"static\",\n            children: \"\\u9759\\u6001\\u9AD8\\u4EAE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3091,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"follow-mouse\",\n            children: \"\\u9F20\\u6807\\u8DDF\\u968F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3092,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"rhythm\",\n            children: \"\\u8282\\u594F\\u9605\\u8BFB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3093,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"flash-reading\",\n            children: \"\\u95EA\\u8BFB\\u6A21\\u5F0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3094,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 3084,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3082,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".pdf,.txt,.md\",\n          hidden: true,\n          id: \"file-upload\",\n          onChange: handleFileUpload,\n          ref: fileRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3099,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"upload-btn\",\n          onClick: () => fileRef.current.click(),\n          children: \"\\u4E0A\\u4F20\\u6587\\u4EF6 (.pdf/.txt/.md)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3098,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 3077,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toolbar\",\n        children: fileName && /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"filename\",\n          children: fileName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3118,\n          columnNumber: 24\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-content\",\n        ref: readerContainerRef,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: content\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3123,\n          columnNumber: 13\n        }, this), totalPages > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bottom-pagination\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => changePage(-1),\n            disabled: currentPage <= 1,\n            className: \"page-btn\",\n            children: \"\\u4E0A\\u4E00\\u9875\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3127,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"page-info\",\n            children: [\"\\u7B2C \", currentPage, \" / \", totalPages, \" \\u9875\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 3134,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => changePage(1),\n            disabled: currentPage >= totalPages,\n            className: \"page-btn\",\n            children: \"\\u4E0B\\u4E00\\u9875\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3137,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 3126,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 3116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 3076,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"x5N0itQI0gqtA84jt63lPsdPeRI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","pdfjsLib","pdfjsViewer","marked","pdfjs","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","window","currentPage","totalPages","changePage","eventTracker","mouseFollowHandlers","autoReader","charPositions","intervalId","currentIndex","speed","pageContainer","isScrolling","isPageChanging","cleanup","rhythmReaderGlobal","active","initializeRhythmReadingMode","rhythmReadingInitialized","console","log","setStorage","key","value","sessionStorage","setItem","localStorage","e","error","getStorage","getItem","rhythmReader","readIndices","Set","charElements","pageTransitionInProgress","start","setTimeout","stop","initializeTextNodes","clear","addSpeedSlider","updateTextColors","scrollToCurrentChar","setInterval","moveToNextChar","showNotification","hijackPageTurningFunctions","setupPageNavigationListeners","clearInterval","restoreOriginalText","slider","document","getElementById","remove","contentContainer","querySelector","textNodes","findTextNodes","length","forEach","node","text","nodeValue","trim","fragment","createDocumentFragment","i","char","span","createElement","textContent","className","dataset","rhythmIndex","String","whitespace","style","display","margin","padding","border","backgroundColor","appendChild","push","parentNode","replaceChild","element","childNodes","nodeType","Node","TEXT_NODE","ELEMENT_NODE","index","color","fontWeight","has","background","add","clickNextPageButton","nextButtons","Array","from","querySelectorAll","filter","el","toLowerCase","includes","click","rect","getBoundingClientRect","lineHeight","parseInt","getComputedStyle","isContainerScrollable","scrollHeight","clientHeight","overflowY","containerRect","relativeTop","top","scrollTop","visibleTop","visibleBottom","scrollBy","behavior","viewportTop","scrollY","viewportBottom","innerHeight","absoluteTop","container","id","position","right","borderRadius","boxShadow","zIndex","label","marginRight","input","type","min","max","step","width","valueDisplay","marginLeft","minWidth","self","addEventListener","newSpeed","body","_originalChangePage","page","wasActive","target","tagName","getAttribute","message","notification","left","transform","fontSize","removeChild","charSpans","parentNodeMap","Map","parent","set","get","spans","sort","a","b","indexA","indexB","groups","currentGroup","prevIndex","previousSibling","group","map","join","textNode","createTextNode","isRhythmActive","stopRhythmSafely","App","_s","pages","setPages","setCurrentPage","setTotalPages","fileName","setFileName","loading","setLoading","fileRef","file","setFile","pdfInstance","setPdfInstance","extractedTextPages","setExtractedTextPages","readingMode","setReadingMode","posMode","setPosMode","markdownContent","setMarkdownContent","readerContainerRef","content","setContent","pdfDocument","setPdfDocument","isTableOfContents","setIsTableOfContents","applyDarkBackground","classList","head","restoreDarkBackground","addNakedEye3DStyles","addComfortable3DStyles","addFlashReadingStyles","initializeFlashReading","sentences","flashReadingSentences","isArray","speedSlider","speedValue","playButton","pauseButton","stopButton","prevButton","nextButton","progress","cover","flashReader","interval","isPlaying","disabled","displayCurrentSentence","currentSentence","displayRect","height","pause","updateSpeed","prevSentence","nextSentence","savedSpeed","initialSpeed","createFlashReadingContent","formatTextToHtml","paragraphs","split","html","paragraph","formatTextForMouseFollow","words","processedParagraph","word","applyStaticHighlight","lastColor","Math","random","applyNakedEye3dEffect","applyComfortable3dEffect","effectTypes","effectClass","floor","initializeNakedEye3D","textElements","delay","animationDelay","initializeRhythmReading","startRhythmReading","addMouseFollowListeners","contentArea","lastHighlightedLine","mouseMoveHandler","mouseY","clientY","allLines","foundLine","minDistance","Infinity","line","lineCenter","distance","abs","bottom","substring","mouseLeaveHandler","event","handler","initializeMouseFollow","handlePdfFile","fileURL","URL","createObjectURL","loadingTask","getDocument","pdf","promise","numPages","extractAndProcessPage","alert","pageNum","getPage","getTextContent","viewport","getViewport","scale","detectIfTocPage","processTocPage","processContentPage","textItems","items","fullText","item","str","hasTocKeywords","test","hasPageNumberPatterns","shortLinesCount","linesWithNumbersCount","lineMap","yKey","round","lines","values","lineText","shortLineRatio","numberLineRatio","htmlContent","x","y","sqrt","fontName","spacedText","getTextNodeAtPosition","nodes","range","createRange","selectNodeContents","rects","getClientRects","j","found","processTextWithHighlight","result","mode","extractedText","replace","splitIntoSentences","processedContent","formatSentencesToHtml","formatSimpleHighlightedText","formatSentencesForMouseFollow","applyComfortable3dEffectToSentences","createFlashReadingContentFromSentences","firstPara","styles","fontFamily","sentenceRegex","lastIndex","match","exec","endIndex","sentence","lastSentence","splitIntoFlashReadingSegments","segments","segment","lastSegment","applyStaticHighlightToSentences","processedSentence","handleTxtFile","name","handleMarkdownFile","parse","p","parseError","tempDiv","innerHTML","plainText","innerText","handleFileUpload","uploadedFile","files","endsWith","getAllCharacterPositions","walker","createTreeWalker","NodeFilter","SHOW_TEXT","positions","nextNode","currentNode","setStart","setEnd","warn","yDiff","scrollElementToCenter","elementY","targetScrollTop","containerVisibleHeight","scrollTo","absoluteElementY","createReaderCursor","cursor","cssText","isSentenceEnd","charPosition","sentenceEndMarks","nextIndex","findSentenceStart","prev","current","isInVisibleArea","threshold","topThreshold","bottomThreshold","startAutoReader","highlight","pointerEvents","lastScrolledY","scrollSafeZone","charWidth","charHeight","xDiff","_window$autoReader$ch","stopAutoReader","pos","contentRect","relativeX","relativeY","isInRecentlyScrolledArea","needsScroll","scrollAmount","absoluteY","initializeAutoReader","handleReadingModeChange","newMode","prevMode","getContentHandlerForMode","cleanupDOM","removeMouseFollowListeners","comfortable3DElements","flashReadingElements","highlights","_contentArea$querySel","bottomPagination","contentHTML","newContentArea","cloneNode","newContentContainer","newBottomPagination","prevBtn","nextBtn","onclick","removeAttribute","elementsToRemove","handleAutoScroll","updateCursorPosition","force","handleMouseMove","clientX","clearAllHighlights","paragraphRect","paragraphX","paragraphY","wordRect","wordX","removeEventListener","addAutoReaderStyles","bottomPaginationStyles","mouseFollowStyle","mouseFollowPageStyle","existingStyle","existingMouseFollowStyle","existingBasicMouseFollowStyle","setAttribute","firstLine","adjustSpeed","delta","newPage","wasRhythmReading","wasFlashReading","isToc","sentenceIndex","cleanText","formattedSentence","wordIndex","styleClass","oldStyle","followModeStyle","s","children","_jsxFileName","lineNumber","columnNumber","onChange","accept","hidden","ref","onClick","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["D:/adhd-read-helper/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 添加全局事件跟踪对象\nwindow.eventTracker = window.eventTracker || {\n  mouseFollowHandlers: []\n};\n\n// 自动阅读器全局对象\nwindow.autoReader = {\n  charPositions: [],\n  intervalId: null,\n  currentIndex: 0,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false,\n  cleanup: null\n};\n\n// 添加新的节奏阅读模式代码\n// 全局变量，确保在页面切换后仍然保持状态\nwindow.rhythmReaderGlobal = window.rhythmReaderGlobal || {\n  active: false,\n  speed: 300\n};\n\n// 初始化节奏阅读模式\nconst initializeRhythmReadingMode = () => {\n  if (window.rhythmReadingInitialized) {\n    console.log(\"**节奏阅读模式**已经初始化过，跳过\");\n    return;\n  }\n  window.rhythmReadingInitialized = true;\n  \n  console.log(\"正在初始化**节奏阅读模式**...\");\n  \n  // 改进的存储函数，同时使用session和local storage提高可靠性\n  function setStorage(key, value) {\n    try {\n      sessionStorage.setItem(key, value);\n      localStorage.setItem(key, value);\n    } catch (e) {\n      console.error(\"无法写入存储\", e);\n    }\n  }\n  \n  function getStorage(key) {\n    try {\n      return sessionStorage.getItem(key) || localStorage.getItem(key);\n    } catch (e) {\n      console.error(\"无法读取存储\", e);\n      return null;\n    }\n  }\n  \n  // 状态变量和功能对象\n  const rhythmReader = {\n    active: false,\n    intervalId: null,\n    speed: 300,\n    currentIndex: 0,\n    readIndices: new Set(),\n    charElements: [],\n    pageTransitionInProgress: false,\n    \n    // 启动节奏阅读\n    start: function() {\n      console.log(\"【节奏阅读】启动中...\");\n      \n      if (this.pageTransitionInProgress) {\n        console.log(\"【节奏阅读】页面转换正在进行中，延迟启动\");\n        setTimeout(() => this.start(), 500);\n        return;\n      }\n      \n      this.stop(false);\n      this.active = true;\n      setStorage('rhythmReadingActive', 'true');\n      \n      if (!this.initializeTextNodes()) {\n        console.error(\"【节奏阅读】无法初始化文本节点\");\n        return;\n      }\n      \n      this.currentIndex = 0;\n      this.readIndices.clear();\n      this.addSpeedSlider();\n      this.updateTextColors();\n      this.scrollToCurrentChar();\n      this.intervalId = setInterval(() => this.moveToNextChar(), this.speed);\n      console.log(\"【节奏阅读】成功启动\");\n      this.showNotification(\"**节奏阅读模式**已启动\");\n      this.hijackPageTurningFunctions();\n      this.setupPageNavigationListeners();\n    },\n    \n    // 停止节奏阅读\n    stop: function(showNotification = true) {\n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n      }\n      \n      if (this.active) {\n        console.log(\"【节奏阅读】停止中...\");\n        this.active = false;\n        if (!this.pageTransitionInProgress) {\n          setStorage('rhythmReadingActive', 'false');\n        }\n        this.restoreOriginalText();\n        const slider = document.getElementById('rhythm-speed-slider');\n        if (slider) slider.remove();\n        if (showNotification) {\n          this.showNotification(\"**节奏阅读模式**已停止\");\n        }\n      }\n    },\n\n    // 初始化文本节点\n    initializeTextNodes: function() {\n      console.log(\"【节奏阅读】初始化文本节点...\");\n      this.charElements = [];\n      const contentContainer = document.querySelector('.page-content');\n      if (!contentContainer) {\n        console.error(\"【节奏阅读】找不到内容容器\");\n        return false;\n      }\n      \n      const textNodes = [];\n      this.findTextNodes(contentContainer, textNodes);\n      \n      if (textNodes.length === 0) {\n        console.error(\"【节奏阅读】未找到文本节点\");\n        this.showNotification(\"无法启动节奏阅读：未找到文本内容\");\n        return false;\n      }\n      \n      console.log(`【节奏阅读】找到 ${textNodes.length} 个文本节点`);\n      \n      textNodes.forEach(node => {\n        const text = node.nodeValue;\n        if (!text || text.trim() === '') return;\n        const fragment = document.createDocumentFragment();\n        \n        for (let i = 0; i < text.length; i++) {\n          const char = text[i];\n          const span = document.createElement('span');\n          span.textContent = char;\n          span.className = 'rhythm-char';\n          span.dataset.rhythmIndex = String(this.charElements.length);\n          \n          if (char.trim() === '') {\n            span.dataset.whitespace = 'true';\n          }\n          \n          span.style.display = 'inline';\n          span.style.margin = '0';\n          span.style.padding = '0';\n          span.style.border = 'none';\n          span.style.backgroundColor = 'transparent';\n          \n          fragment.appendChild(span);\n          this.charElements.push(span);\n        }\n\n        if (node.parentNode) {\n          node.parentNode.replaceChild(fragment, node);\n        }\n      });\n      \n      console.log(`【节奏阅读】总共创建了 ${this.charElements.length} 个字符span`);\n      return this.charElements.length > 0;\n    },\n\n    // 递归查找所有文本节点\n    findTextNodes: function(element, textNodes) {\n      for (let i = 0; i < element.childNodes.length; i++) {\n        const node = element.childNodes[i];\n        if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() !== '') {\n          textNodes.push(node);\n        } else if (node.nodeType === Node.ELEMENT_NODE) {\n          if (node.className === 'rhythm-char') {\n            continue;\n          }\n          this.findTextNodes(node, textNodes);\n        }\n      }\n    },\n\n    // 更新文本颜色\n    updateTextColors: function() {\n      this.charElements.forEach((span, index) => {\n        let color;\n        let fontWeight = 'inherit';\n        \n        if (index === this.currentIndex) {\n          color = '#00aa00'; // 当前阅读的字 - 绿色\n          fontWeight = 'bold';\n        } else if (index === this.currentIndex + 1 || index === this.currentIndex + 2) {\n          color = '#aaaaaa'; // 接下来两个字 - 淡灰色\n        } else if (this.readIndices.has(index)) {\n          color = '#ffffff'; // 已读字符 - 白色\n        } else {\n          color = 'rgba(160, 160, 160, 0.25)'; // 未读字符 - 非常淡的灰色\n        }\n        \n        span.style.color = color;\n        span.style.fontWeight = fontWeight;\n        span.style.backgroundColor = 'transparent';\n        span.style.background = 'none';\n      });\n    },\n\n    // 移动到下一个字符\n    moveToNextChar: function() {\n      // 将当前字符标记为已读\n      this.readIndices.add(this.currentIndex);\n      do {\n        this.currentIndex++;\n        if (this.currentIndex >= this.charElements.length) {\n          console.log(\"【节奏阅读】已到达页尾，尝试翻页\");\n          if (!this.clickNextPageButton()) {\n            this.stop();\n          }\n          return;\n        }\n      } while (this.currentIndex < this.charElements.length && \n               this.charElements[this.currentIndex] && \n               this.charElements[this.currentIndex].dataset.whitespace === 'true');\n\n      this.updateTextColors();\n      this.scrollToCurrentChar();\n    },\n\n    // 尝试点击下一页按钮\n    clickNextPageButton: function() {\n      const nextButtons = Array.from(document.querySelectorAll('button, [role=\"button\"]')).filter(el => {\n        const text = (el.textContent || '').toLowerCase();\n        return text.includes('下一页') || text.includes('next');\n      });\n      \n      if (nextButtons.length > 0) {\n        console.log(\"【节奏阅读】找到下一页按钮，自动点击\");\n        nextButtons[0].click();\n        return true;\n      }\n      return false;\n    },\n\n    // 滚动到当前字符\n    scrollToCurrentChar: function() {\n      const span = this.charElements[this.currentIndex];\n      if (!span) return;\n      const rect = span.getBoundingClientRect();\n      const contentContainer = document.querySelector('.page-content');\n\n      const lineHeight = parseInt(window.getComputedStyle(span).lineHeight) || 20;\n\n      const isContainerScrollable = contentContainer && \n        contentContainer.scrollHeight > contentContainer.clientHeight &&\n        ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n\n      if (isContainerScrollable) {\n        const containerRect = contentContainer.getBoundingClientRect();\n        const relativeTop = rect.top - containerRect.top + contentContainer.scrollTop;\n\n        const visibleTop = contentContainer.scrollTop;\n        const visibleBottom = visibleTop + contentContainer.clientHeight;\n\n        if (relativeTop < visibleTop + lineHeight || relativeTop > visibleBottom - lineHeight) {\n          contentContainer.scrollBy({\n            top: lineHeight * 2 * (relativeTop > visibleBottom - lineHeight ? 1 : -1),\n            behavior: 'smooth'\n          });\n        }\n      } else {\n        const viewportTop = window.scrollY;\n        const viewportBottom = viewportTop + window.innerHeight;\n        const absoluteTop = rect.top + window.scrollY;\n\n        if (absoluteTop < viewportTop + lineHeight || absoluteTop > viewportBottom - lineHeight) {\n          window.scrollBy({\n            top: lineHeight * 2 * (absoluteTop > viewportBottom - lineHeight ? 1 : -1),\n            behavior: 'smooth'\n          });\n        }\n      }\n    },\n\n    // 添加速度滑块\n    addSpeedSlider: function() {\n      let slider = document.getElementById('rhythm-speed-slider');\n      if (slider) slider.remove();\n    \n      const container = document.createElement('div');\n      container.id = 'rhythm-speed-slider';\n      container.style.position = 'fixed';\n      container.style.top = '70px';\n      container.style.right = '20px';\n      container.style.backgroundColor = 'white';\n      container.style.padding = '10px';\n      container.style.borderRadius = '5px';\n      container.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';\n      container.style.zIndex = '10000';\n      \n      const label = document.createElement('label');\n      label.textContent = '速度: ';\n      label.style.marginRight = '8px';\n      container.appendChild(label);\n      \n      const input = document.createElement('input');\n      input.type = 'range';\n      input.min = '50';\n      input.max = '1000';\n      input.step = '50';\n      input.value = this.speed;\n      input.style.width = '120px';\n      \n      const valueDisplay = document.createElement('span');\n      valueDisplay.textContent = `${this.speed}ms`;\n      valueDisplay.style.marginLeft = '8px';\n      valueDisplay.style.minWidth = '60px';\n      \n      const self = this;\n      input.addEventListener('input', function() {\n        const newSpeed = parseInt(this.value);\n        self.speed = newSpeed;\n        valueDisplay.textContent = `${newSpeed}ms`;\n        \n        if (self.intervalId) {\n          clearInterval(self.intervalId);\n          self.intervalId = setInterval(() => self.moveToNextChar(), newSpeed);\n        }\n      });\n      \n      container.appendChild(input);\n      container.appendChild(valueDisplay);\n      document.body.appendChild(container);\n    },\n\n    // 劫持页面翻页函数\n    hijackPageTurningFunctions: function() {\n      if (typeof window.changePage === 'function' && !window._originalChangePage) {\n        console.log(\"【节奏阅读】劫持changePage函数\");\n        window._originalChangePage = window.changePage;\n\n        const self = this;\n        window.changePage = function(page) {\n          console.log(\"【节奏阅读】检测到changePage调用，参数:\", page);\n          const wasActive = self.active;\n          self.pageTransitionInProgress = true;\n\n          if (wasActive) {\n            self.stop(false);\n            setStorage('rhythmReadingActive', 'true'); \n            setStorage('rhythmReadingPending', 'true');\n          }\n          \n          window._originalChangePage(page);\n          \n          setTimeout(() => {\n            self.pageTransitionInProgress = false;\n          }, 1000);\n        };\n      }\n    },\n\n    // 设置页面导航事件监听\n    setupPageNavigationListeners: function() {\n      console.log(\"【节奏阅读】正在设置页面导航监听\");\n\n      const self = this;\n      \n      document.addEventListener('click', function(e) {\n        let target = e.target;\n        while (target && target !== document.body) {\n          if (target.tagName === 'BUTTON' || target.tagName === 'A' || \n              target.getAttribute('role') === 'button') {\n            \n            const text = (target.textContent || '').trim().toLowerCase();\n            if (text.includes('上一页') || text.includes('下一页') || \n                text.includes('prev') || text.includes('next')) {\n              \n              if (self.active) {\n                self.pageTransitionInProgress = true;                \n                self.stop(false);\n                setTimeout(() => {\n                  self.pageTransitionInProgress = false;\n                  self.start();\n                }, 1500);\n              }\n              break;\n            }\n          }\n          target = target.parentNode;\n        }\n      });\n      \n      document.addEventListener('keydown', function(e) {\n        if (['ArrowLeft', 'ArrowRight', 'PageUp', 'PageDown'].includes(e.key)) {\n          if (self.active) {\n            self.pageTransitionInProgress = true;                \n            self.stop(false);\n            setTimeout(() => {\n              self.pageTransitionInProgress = false;\n              self.start();\n            }, 1500);\n          }\n        }\n      });\n\n      window.addEventListener('popstate', function() {\n        if (self.active) {\n          self.pageTransitionInProgress = true;                \n          self.stop(false);\n          setTimeout(() => {\n            self.pageTransitionInProgress = false;\n            self.start();\n          }, 1500);\n        }\n      });\n    },\n\n    // 显示通知\n    showNotification: function(message) {\n      let notification = document.getElementById('rhythm-notification');\n      if (notification) notification.remove();\n      \n      notification = document.createElement('div');\n      notification.id = 'rhythm-notification';\n      notification.textContent = message;\n      notification.style.position = 'fixed';\n      notification.style.top = '50%';\n      notification.style.left = '50%';\n      notification.style.transform = 'translate(-50%, -50%)';\n      notification.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';\n      notification.style.color = 'white';\n      notification.style.padding = '15px 25px';\n      notification.style.borderRadius = '5px';\n      notification.style.zIndex = '10001';\n      notification.style.fontSize = '18px';\n      \n      document.body.appendChild(notification);\n      \n      setTimeout(() => {\n        if (notification && notification.parentNode) {\n          notification.parentNode.removeChild(notification);\n        }\n      }, 2000);\n    },\n\n    // 恢复原始文本\n    restoreOriginalText: function() {\n      const charSpans = document.querySelectorAll('.rhythm-char');\n      \n      // 按父节点分组\n      const parentNodeMap = new Map();\n      \n      charSpans.forEach(span => {\n        const parent = span.parentNode;\n        if (!parent) return;\n        \n        if (!parentNodeMap.has(parent)) {\n          parentNodeMap.set(parent, []);\n        }\n        parentNodeMap.get(parent).push(span);\n      });\n      \n      parentNodeMap.forEach((spans, parent) => {\n        if (spans.length === 0) return;\n        \n        spans.sort((a, b) => {\n          const indexA = parseInt(a.dataset.rhythmIndex || '0');\n          const indexB = parseInt(b.dataset.rhythmIndex || '0');\n          return indexA - indexB;\n        });\n        \n        const groups = [];\n        let currentGroup = [spans[0]];\n        \n        for (let i = 1; i < spans.length; i++) {\n          const prevIndex = parseInt(spans[i-1].dataset.rhythmIndex || '0');\n          const currentIndex = parseInt(spans[i].dataset.rhythmIndex || '0');\n          \n          if (currentIndex === prevIndex + 1 && spans[i].previousSibling === spans[i-1]) {\n            currentGroup.push(spans[i]);\n          } else {\n            groups.push(currentGroup);\n            currentGroup = [spans[i]];\n          }\n        }\n        \n        groups.push(currentGroup);\n        \n        groups.forEach(group => {\n          if (group.length === 0) return;\n          \n          try {\n            const text = group.map(span => span.textContent).join('');\n            const textNode = document.createTextNode(text);\n            if (group[0].parentNode === parent) {\n              parent.replaceChild(textNode, group[0]);\n              for (let i = 1; i < group.length; i++) {\n                if (group[i].parentNode === parent) {\n                  parent.removeChild(group[i]);\n                }\n              }\n            }\n          } catch (e) {\n            console.error(\"【节奏阅读】恢复文本时出错:\", e);\n          }\n        });\n      });\n      \n      this.charElements = [];\n    }\n  };\n\n  // 暴露到全局，以便调试和直接调用\n  window.rhythmReader = rhythmReader;\n\n  // 添加一个全局安全函数用于检查节奏阅读状态\n  window.isRhythmActive = function() {\n    return rhythmReader.active || getStorage('rhythmReadingActive') === 'true';\n  };\n  \n  // 添加一个停止函数供外部安全调用\n  window.stopRhythmSafely = function() {\n    try {\n      setStorage('rhythmReadingActive', 'false');\n      \n      if (rhythmReader && typeof rhythmReader.stop === 'function') {\n        rhythmReader.stop();\n      }\n    } catch (e) {\n      console.error(\"停止节奏阅读出错\", e);\n    }\n  };\n  \n  console.log(\"【节奏阅读】初始化完成\");\n  \n  return rhythmReader;\n};\n\nconst App = () => {\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  const [isTableOfContents, setIsTableOfContents] = useState(false);\n  \n  // 实现缺失的函数\n  // 应用深色背景\n  const applyDarkBackground = () => {\n    document.body.classList.add('dark-background');\n    \n    // 添加必要的CSS样式\n    if (!document.getElementById('dark-background-style')) {\n      const style = document.createElement('style');\n      style.id = 'dark-background-style';\n      style.textContent = `\n        .dark-background {\n          background-color: #000 !important;\n        }\n        .dark-background .sidebar {\n          background: linear-gradient(145deg, #4834d4, #341f9e) !important;\n        }\n        .dark-background .page-content {\n          background-color: #000 !important;\n        }\n        .dark-background .main-content {\n          background-color: #000 !important;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 恢复正常背景\n  const restoreDarkBackground = () => {\n    document.body.classList.remove('dark-background');\n  };\n  \n  // 添加裸眼3D样式\n  const addNakedEye3DStyles = () => {\n    if (!document.getElementById('naked-eye-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'naked-eye-3d-style';\n      style.textContent = `\n        .naked-eye-3d-container {\n          position: relative;\n          perspective: 800px;\n          width: 100%;\n        }\n        \n        .naked-eye-3d-text {\n          display: inline-block;\n          animation: float 3s ease-in-out infinite;\n          text-shadow: 0 0 5px rgba(255,255,255,0.3);\n          padding: 0 4px;\n          color: white;\n          filter: drop-shadow(0 0 5px rgba(120, 220, 255, 0.6));\n        }\n        \n        @keyframes float {\n          0% { transform: translateZ(0px); }\n          50% { transform: translateZ(20px); }\n          100% { transform: translateZ(0px); }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 添加舒适3D样式\n  const addComfortable3DStyles = () => {\n    if (!document.getElementById('comfortable-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'comfortable-3d-style';\n      style.textContent = `\n        .emboss-3d-text {\n          color: #fff;\n          text-shadow: \n            1px 1px 1px rgba(0,0,0,0.5),\n            -1px -1px 1px rgba(255,255,255,0.5);\n          letter-spacing: 1.5px;\n          font-weight: 500;\n        }\n        \n        .float-3d-text {\n          display: inline-block;\n          transform-style: preserve-3d;\n          transform: perspective(500px) translateZ(10px);\n          text-shadow: 0 2px 5px rgba(0,0,0,0.5);\n        }\n        \n        .gradient-3d-text {\n          display: inline-block;\n          background: linear-gradient(to bottom, #fff, #aaa);\n          -webkit-background-clip: text;\n          -webkit-text-fill-color: transparent;\n          text-shadow: 0 2px 4px rgba(0,0,0,0.3);\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 添加闪读样式\n  const addFlashReadingStyles = () => {\n    if (!document.getElementById('flash-reading-style')) {\n      const style = document.createElement('style');\n      style.id = 'flash-reading-style';\n      style.textContent = `\n        .flash-reading-container {\n          position: relative;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          z-index: 1000;\n          padding: 20px;\n        }\n        \n        .flash-reading-display-wrapper {\n          position: relative;\n          margin: 40px 0;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        \n        .flash-reading-display {\n          font-size: 36px;\n          font-weight: bold;\n          text-align: center;\n          color: white;\n          min-height: 80px;\n          max-width: 90%;\n          padding: 20px 40px;\n          position: relative; /* 允许绝对定位的覆盖层 */\n          z-index: 2;\n        }\n        \n        .flash-reading-cover {\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(128, 128, 128, 0.6); /* 灰色遮罩 */\n          border-radius: 8px;\n          z-index: 1; /* 确保在文本后面 */\n        }\n        \n        .flash-reading-controls {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          gap: 20px;\n          margin-bottom: 20px;\n          width: 100%;\n        }\n        \n        .flash-reading-buttons {\n          display: flex;\n          gap: 10px;\n          flex-wrap: wrap;\n          justify-content: center;\n        }\n        \n        .flash-reading-speed {\n          display: flex;\n          align-items: center;\n          color: white;\n          width: 80%;\n          max-width: 400px;\n          gap: 10px;\n        }\n        \n        .flash-reading-slider {\n          flex: 1;\n          height: 8px;\n          appearance: none;\n          background: #555;\n          border-radius: 4px;\n          outline: none;\n        }\n        \n        .flash-reading-slider::-webkit-slider-thumb {\n          appearance: none;\n          width: 20px;\n          height: 20px;\n          border-radius: 50%;\n          background: #6c5ce7;\n          cursor: pointer;\n        }\n        \n        .flash-reading-btn {\n          padding: 10px 20px;\n          border: none;\n          border-radius: 4px;\n          background-color: #6c5ce7;\n          color: white;\n          font-size: 16px;\n          cursor: pointer;\n          transition: background-color 0.2s;\n        }\n        \n        .flash-reading-btn:hover {\n          background-color: #5344c0;\n        }\n        \n        .flash-reading-btn:disabled {\n          background-color: #aaa;\n          cursor: not-allowed;\n        }\n        \n        .flash-reading-progress {\n          color: white;\n          font-size: 14px;\n          margin-top: 10px;\n        }\n        .flash-reading-speed-note {\n          font-size: 12px;\n          color: #ccc;\n          margin-left: 5px;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 初始化闪读模式\n  const initializeFlashReading = () => {\n    // 添加样式\n    addFlashReadingStyles();\n    \n    const sentences = window.flashReadingSentences;\n    if (!sentences || !Array.isArray(sentences) || sentences.length === 0) {\n      console.error('闪读模式: 未找到句子数据');\n      return;\n    }\n    \n    // 获取全局UI元素\n    const display = document.getElementById('flash-reading-display');\n    const speedSlider = document.getElementById('flash-reading-speed');\n    const speedValue = document.getElementById('flash-reading-speed-value');\n    const playButton = document.getElementById('flash-reading-play');\n    const pauseButton = document.getElementById('flash-reading-pause');\n    const stopButton = document.getElementById('flash-reading-stop');\n    const prevButton = document.getElementById('flash-reading-prev-sentence');\n    const nextButton = document.getElementById('flash-reading-next-sentence');\n    const progress = document.getElementById('flash-reading-progress');\n    const cover = document.querySelector('.flash-reading-cover');\n    \n    if (!display || !speedSlider || !speedValue || !playButton || !pauseButton || !stopButton || !prevButton || !nextButton || !progress || !cover) {\n      console.error('闪读模式: 未找到UI元素');\n      return;\n    }\n    \n    // 创建闪读控制器\n    window.flashReader = {\n      sentences: sentences,\n      currentIndex: 0,\n      interval: null,\n      speed: parseInt(speedSlider.value),\n      isPlaying: false,\n      \n      // 开始闪读\n      start() {\n        if (this.interval) {\n          clearInterval(this.interval);\n        }\n        \n        this.isPlaying = true;\n        playButton.disabled = true;\n        pauseButton.disabled = false;\n        progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        \n        // 显示当前句子\n        this.displayCurrentSentence();\n        \n        // 设置闪读间隔\n        this.interval = setInterval(() => {\n          this.currentIndex++;\n          \n          if (this.currentIndex >= this.sentences.length) {\n            this.stop();\n            display.textContent = '阅读完成';\n            return;\n          }\n          \n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }, this.speed);\n      },\n      \n      // 显示当前句子\n      displayCurrentSentence() {\n        if (this.currentIndex < this.sentences.length) {\n          const currentSentence = this.sentences[this.currentIndex];\n          display.textContent = currentSentence;\n          display.style.color = 'white'; // 确保文本为白色\n          \n          // 调整背景以适应内容\n          setTimeout(() => {\n            const displayRect = display.getBoundingClientRect();\n            // 确保覆盖层完全包裹文本\n            cover.style.width = `${displayRect.width}px`;\n            cover.style.height = `${displayRect.height}px`;\n          }, 10);\n        }\n      },\n      \n      // 暂停闪读\n      pause() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        \n        this.isPlaying = false;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n      },\n      \n      // 停止闪读\n      stop() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        \n        this.isPlaying = false;\n        this.currentIndex = 0;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n        \n        display.textContent = '准备开始';\n        progress.textContent = `进度：0 / ${this.sentences.length}`; // 重置进度\n      },\n      \n      // 更新速度\n      updateSpeed(newSpeed) {\n        this.speed = newSpeed;\n        speedValue.textContent = `${newSpeed} ms`;\n        \n        // 保存速度设置到本地存储\n        localStorage.setItem('flash-reading-speed', newSpeed);\n        \n        // 如果正在播放，重新开始以应用新速度\n        if (this.isPlaying) {\n          clearInterval(this.interval);\n          this.start(); // 直接调用start方法重新开始\n        }\n      },\n\n      // 返回上一句\n      prevSentence() {\n        if (this.currentIndex > 0) {\n          this.currentIndex--;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n\n      // 跳到下一句\n      nextSentence() {\n        if (this.currentIndex < this.sentences.length - 1) {\n          this.currentIndex++;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n\n      // 清理资源\n      cleanup() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        this.currentIndex = 0;\n      }\n    };\n    \n    // 添加事件监听器\n    playButton.addEventListener('click', () => {\n      window.flashReader.start();\n    });\n    \n    pauseButton.addEventListener('click', () => {\n      window.flashReader.pause();\n    });\n    \n    stopButton.addEventListener('click', () => {\n      window.flashReader.stop();\n    });\n    \n    speedSlider.addEventListener('input', (e) => {\n      const newSpeed = parseInt(e.target.value);\n      window.flashReader.updateSpeed(newSpeed);\n    });\n\n    prevButton.addEventListener('click', () => {\n      window.flashReader.prevSentence();\n    });\n\n    nextButton.addEventListener('click', () => {\n      window.flashReader.nextSentence();\n    });\n    \n    // 初始化\n    const savedSpeed = localStorage.getItem('flash-reading-speed');\n    const initialSpeed = savedSpeed ? parseInt(savedSpeed) : 1000;\n    speedSlider.value = initialSpeed;\n    window.flashReader.updateSpeed(initialSpeed);\n    \n    console.log('闪读模式已初始化，共 ' + sentences.length + ' 个句子');\n  };\n  \n  // 创建闪读内容\n  const createFlashReadingContent = (text) => {\n    return `<div class=\"flash-reading-content\">\n      <p>${text}</p>\n    </div>`;\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 格式化文本用于鼠标跟随\n  const formatTextForMouseFollow = (text) => {\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个单词添加span，以便于添加高亮效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"follow-word\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\" data-follow=\"true\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用静态高亮\n  const applyStaticHighlight = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为单词随机添加颜色高亮\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      let lastColor = null;\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n          return;\n        }\n        \n        // 随机决定是否高亮和使用哪种颜色\n        if (Math.random() < 0.7) {\n          let color;\n          if (lastColor === 'red') {\n            color = 'blue';\n          } else if (lastColor === 'blue') {\n            color = 'red';\n          } else {\n            color = Math.random() < 0.5 ? 'red' : 'blue';\n          }\n          lastColor = color;\n          \n          processedParagraph += `<span class=\"highlight-word ${color}\">${word}</span>`;\n        } else {\n          processedParagraph += word;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用裸眼3D效果\n  const applyNakedEye3dEffect = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content naked-eye-3d-container\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个词添加3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"naked-eye-3d-text\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用舒适3D效果\n  const applyComfortable3dEffect = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个词随机应用不同的3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          \n          processedParagraph += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 初始化裸眼3D\n  const initializeNakedEye3D = () => {\n    // 为裸眼3D文本添加动画\n    const textElements = document.querySelectorAll('.naked-eye-3d-text');\n    textElements.forEach((element, index) => {\n      // 添加随机延迟，使动画错开\n      const delay = Math.random() * 2;\n      element.style.animationDelay = `${delay}s`;\n    });\n  };\n\n  // 初始化节奏阅读\n  const initializeRhythmReading = () => {\n    if (window.rhythmReader && typeof window.rhythmReader.initializeTextNodes === 'function') {\n      window.rhythmReader.initializeTextNodes();\n    }\n  };\n  \n  // 启动节奏阅读\n  const startRhythmReading = () => {\n    if (window.rhythmReader && typeof window.rhythmReader.start === 'function') {\n      window.rhythmReader.start();\n    }\n  };\n\n  // 添加鼠标跟随监听器\n  const addMouseFollowListeners = () => {\n    // 获取内容容器\n    const contentArea = document.querySelector('.mouse-follow-content');\n    if (!contentArea) {\n      console.error('未找到鼠标跟随内容区域');\n      return;\n    }\n    \n    // 上一个高亮的行\n    let lastHighlightedLine = null;\n    \n    // 监听鼠标移动 - 精确的行检测\n    const mouseMoveHandler = (e) => {\n      // 获取鼠标位置\n      const mouseY = e.clientY;\n      \n      // 获取所有行\n      const allLines = contentArea.querySelectorAll('.follow-line');\n      let foundLine = null;\n      let minDistance = Infinity;\n      \n      // 寻找鼠标所在的精确行\n      allLines.forEach(line => {\n        const rect = line.getBoundingClientRect();\n        const lineCenter = rect.top + rect.height / 2;\n        const distance = Math.abs(mouseY - lineCenter);\n        \n        // 如果鼠标在行范围内，计算到行中心的距离\n        if (mouseY >= rect.top && mouseY <= rect.bottom) {\n          if (distance < minDistance) {\n            minDistance = distance;\n            foundLine = line;\n          }\n        }\n      });\n      \n      // 更新高亮状态\n      if (lastHighlightedLine && lastHighlightedLine !== foundLine) {\n        // 移除旧高亮\n        lastHighlightedLine.classList.remove('highlighted');\n      }\n      \n      if (foundLine) {\n        // 添加新高亮\n        foundLine.classList.add('highlighted');\n        lastHighlightedLine = foundLine;\n        \n        // 调试输出\n        console.log('当前高亮行:', foundLine.textContent.substring(0, 30) + '...');\n      } else if (lastHighlightedLine) {\n        // 如果没有找到新行，且有上一个高亮行，移除它\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n    \n    // 鼠标离开处理\n    const mouseLeaveHandler = () => {\n      // 清除当前高亮\n      if (lastHighlightedLine) {\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n    \n    // 存储处理函数引用\n    window.eventTracker = window.eventTracker || { mouseFollowHandlers: [] };\n    window.eventTracker.mouseFollowHandlers.push(\n      { element: contentArea, event: 'mousemove', handler: mouseMoveHandler },\n      { element: contentArea, event: 'mouseleave', handler: mouseLeaveHandler }\n    );\n    \n    // 添加事件监听器\n    contentArea.addEventListener('mousemove', mouseMoveHandler);\n    contentArea.addEventListener('mouseleave', mouseLeaveHandler);\n    \n    console.log('改进的鼠标跟随监听器已初始化');\n  };\n  \n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n  }, []);\n  \n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async (file) => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      \n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n      \n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n      \n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n  \n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({ scale: 1.0 });\n      \n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      \n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      \n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async (textContent) => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n    \n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n    \n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n    \n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    \n    const lines = [...lineMap.values()];\n    \n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    \n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    \n    return hasTocKeywords || hasPageNumberPatterns || (shortLineRatio > 0.7 && numberLineRatio > 0.3);\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n    \n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    \n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n      \n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n      \n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n      \n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    \n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && \n              x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = (text) => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    \n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      \n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        \n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    \n    return result;\n  };\n\n  // 处理内容页面 - 按句子划分段落\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      \n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n      // 按句子划分内容（句号、问号、感叹号等作为分隔符）\n      const sentences = splitIntoSentences(extractedText);\n      \n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch(mode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          // 使用ADHD友好的静态高亮处理\n          console.log('应用ADHD友好的静态高亮模式');\n          processedContent = formatSimpleHighlightedText(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'rhythm':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          processedContent = createFlashReadingContentFromSentences(sentences);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n      \n      setContent(processedContent);\n      \n      // 如果是静态高亮模式，添加延时验证检查\n      if (mode === 'static') {\n        setTimeout(() => {\n          const contentArea = document.querySelector('.adhd-highlight-mode');\n          if (contentArea) {\n            console.log('静态高亮模式元素存在');\n            const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n            console.log(`找到 ${paragraphs.length} 个段落`);\n            \n            // 检查样式是否正确应用\n            if (paragraphs.length > 0) {\n              const firstPara = paragraphs[0];\n              const styles = window.getComputedStyle(firstPara);\n              console.log('段落应用的样式:', {\n                color: styles.color,\n                backgroundColor: styles.backgroundColor,\n                fontFamily: styles.fontFamily,\n                fontSize: styles.fontSize\n              });\n            }\n          }\n        }, 200);\n      }\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 将文本分割成句子\n  const splitIntoSentences = (text) => {\n    // 匹配句号、问号、感叹号后跟空格或结束的模式\n    // 支持中英文标点符号\n    const sentenceRegex = /([.!?。！？；;]+\\s*)/g;\n    \n    // 分割文本成句子\n    const sentences = [];\n    let lastIndex = 0;\n    let match;\n    \n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const sentence = text.substring(lastIndex, endIndex).trim();\n      \n      // 避免添加空句子\n      if (sentence) {\n        sentences.push(sentence);\n      }\n      \n      lastIndex = endIndex;\n    }\n    \n    // 处理最后一部分（如果没有以句号等结尾）\n    if (lastIndex < text.length) {\n      const lastSentence = text.substring(lastIndex).trim();\n      if (lastSentence) {\n        sentences.push(lastSentence);\n      }\n    }\n    \n    return sentences;\n  };\n\n  // 专门为闪读模式分割文本，以任意标点符号为分隔点\n  const splitIntoFlashReadingSegments = (text) => {\n    // 匹配任意标点符号包括中英文标点\n    const sentenceRegex = /([,.!?:;，。！？：；、]+\\s*)/g;\n    \n    // 分割文本成短句\n    const segments = [];\n    let lastIndex = 0;\n    let match;\n    \n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const segment = text.substring(lastIndex, endIndex).trim();\n      \n      // 避免添加空段落\n      if (segment) {\n        segments.push(segment);\n      }\n      \n      lastIndex = endIndex;\n    }\n    \n    // 处理最后一部分（如果没有以标点符号结尾）\n    if (lastIndex < text.length) {\n      const lastSegment = text.substring(lastIndex).trim();\n      if (lastSegment) {\n        segments.push(lastSegment);\n      }\n    }\n    \n    return segments;\n  };\n\n  // 格式化句子为HTML\n  const formatSentencesToHtml = (sentences) => {\n    let html = '<div class=\"pdf-content\">';\n    \n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${sentence}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为句子应用静态高亮\n  const applyStaticHighlightToSentences = (sentences) => {\n    let html = '<div class=\"pdf-content adhd-content\">';\n    \n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      \n      // 简单地为句子添加特定样式的class\n      html += `<p class=\"pdf-paragraph adhd-sentence\">${sentence}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为鼠标跟随模式格式化句子\n  const formatSentencesForMouseFollow = (sentences) => {\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    sentences.forEach((sentence, index) => {\n      if (sentence.trim() === '') return;\n      \n      // 每个句子作为独立行，使用div而不是p标签\n      html += `<div class=\"follow-line\" data-line=\"${index}\" data-sentence=\"${sentence.substring(0, 20)}...\" style=\"color: inherit;\">${sentence}</div>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为舒适3D模式格式化句子\n  const applyComfortable3dEffectToSentences = (sentences) => {\n    let html = '<div class=\"pdf-content\">';\n    \n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      \n      // 为每个词随机应用不同的3D效果\n      const words = sentence.split(/(\\s+)/);\n      let processedSentence = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedSentence += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          \n          processedSentence += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedSentence}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为闪读模式创建内容\n  const createFlashReadingContentFromSentences = (sentences) => {\n    // 储存句子到全局变量，用于后续显示\n    window.flashReadingSentences = sentences;\n\n    // 返回闪读界面的HTML结构\n    return `\n      <div class=\"flash-reading-container\">\n        <div class=\"flash-reading-controls\">\n          <div class=\"flash-reading-buttons\">\n            <button id=\"flash-reading-prev-sentence\" class=\"flash-reading-btn\">上一句</button>\n            <button id=\"flash-reading-play\" class=\"flash-reading-btn\">开始</button>\n            <button id=\"flash-reading-pause\" class=\"flash-reading-btn\" disabled>暂停</button>\n            <button id=\"flash-reading-stop\" class=\"flash-reading-btn\">停止</button>\n            <button id=\"flash-reading-next-sentence\" class=\"flash-reading-btn\">下一句</button>\n          </div>\n          <div class=\"flash-reading-speed\">\n            <span>速度：</span>\n            <input type=\"range\" id=\"flash-reading-speed\" min=\"300\" max=\"1700\" step=\"50\" value=\"1000\" class=\"flash-reading-slider\">\n            <span id=\"flash-reading-speed-value\">1000 ms</span>\n            <span class=\"flash-reading-speed-note\">（数值越小，切换越快）</span>\n          </div>\n          <div class=\"flash-reading-progress\">\n            <span id=\"flash-reading-progress\">进度：0 / ${sentences.length}</span>\n          </div>\n        </div>\n        <div class=\"flash-reading-display-wrapper\">\n          <div class=\"flash-reading-cover\"></div> <!-- 这里是闪卡 -->\n          <div id=\"flash-reading-display\" class=\"flash-reading-display\">准备开始</div>\n        </div>\n      </div>`;\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async (file) => {\n    try {\n      const text = await file.text();\n      \n      // 根据阅读模式选择不同的处理方式\n      let processedContent = '';\n      \n      if (readingMode === 'flash-reading') {\n        // 闪读模式下使用特定的分割函数\n        const segments = splitIntoFlashReadingSegments(text);\n        processedContent = createFlashReadingContentFromSentences(segments);\n        \n        // 初始化闪读模式\n        setTimeout(() => {\n          initializeFlashReading();\n        }, 100);\n      } else {\n        // 其他模式使用默认的分割方式\n        const sentences = splitIntoSentences(text);\n        \n        switch(readingMode) {\n          case 'normal':\n            processedContent = formatSentencesToHtml(sentences);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlightToSentences(sentences);\n            break;\n          case 'follow-mouse':\n            processedContent = formatSentencesForMouseFollow(sentences);\n            break;\n          case 'comfortable-3d':\n            processedContent = applyComfortable3dEffectToSentences(sentences);\n            break;\n          default:\n            processedContent = formatSentencesToHtml(sentences);\n        }\n      }\n      \n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n      \n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setContent('<div class=\"error-message\">TXT文件处理失败</div>');\n    }\n  };\n\n  // 处理Markdown文件\n  const handleMarkdownFile = async (file) => {\n    try {\n      const text = await file.text();\n      \n      // 使用marked库转换markdown为HTML\n      let html = '';\n      try {\n        if (window.marked) {\n          html = window.marked.parse(text);\n        } else {\n          // 如果没有marked库，简单地拆分为段落\n          html = `<div>${text.split(\"\\n\\n\").map(p => `<p>${p}</p>`).join(\"\")}</div>`;\n        }\n      } catch (parseError) {\n        console.error('Markdown解析错误:', parseError);\n        html = `<div>${text}</div>`;\n      }\n      \n      // 提取纯文本内容\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = html;\n      const plainText = tempDiv.textContent || tempDiv.innerText || '';\n      \n      // 分割文本为句子\n      const sentences = splitIntoSentences(plainText);\n      \n      // 根据当前阅读模式处理内容\n      let processedContent = '';\n      switch(readingMode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlightToSentences(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          // 使用特定的闪读分割函数重新处理文本\n          const segments = splitIntoFlashReadingSegments(plainText);\n          processedContent = createFlashReadingContentFromSentences(segments);\n          \n          // 初始化闪读模式\n          setTimeout(() => {\n            initializeFlashReading();\n          }, 100);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n      \n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n      \n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('Markdown处理错误:', error);\n      setContent('<div class=\"error-message\">Markdown文件处理失败</div>');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async (e) => {\n    const uploadedFile = e.target.files[0];\n    if (!uploadedFile) return;\n    \n    setLoading(true);\n    setFileName(uploadedFile.name);\n    \n    try {\n      if (uploadedFile.type === 'application/pdf') {\n        await handlePdfFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/plain' || uploadedFile.name.endsWith('.txt')) {\n        await handleTxtFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/markdown' || uploadedFile.name.endsWith('.md')) {\n        await handleMarkdownFile(uploadedFile);\n    } else {\n        setContent('<div class=\"error-message\">不支持的文件格式</div>');\n      }\n    } catch (error) {\n      console.error('处理文件时出错:', error);\n      setContent('<div class=\"error-message\">处理文件时出错</div>');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = (container) => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    \n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n      \n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n      \n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          \n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n          \n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width/2,  // 水平中心\n            y: rect.bottom,               // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n    \n    // 过滤无效位置并排序\n    return positions\n      .filter(p => p.char.trim() !== '')\n      .sort((a, b) => {\n        // 先按行排序，同行按列排序\n        const yDiff = a.y - b.y;\n        if (Math.abs(yDiff) > 5) { // 5px阈值判断是否同一行\n          return yDiff;\n        }\n        return a.x - b.x;\n      });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    \n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - (containerVisibleHeight / 2);\n      \n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - (window.innerHeight / 2);\n      \n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    \n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n    \n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    \n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n    \n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length || // 已到末尾\n          positions[nextIndex].char.trim() === '' || // 下一个是空白\n          positions[nextIndex].y > charPosition.y + 5) { // 下一个在新行\n        return true;\n      }\n    }\n    \n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n    \n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n      \n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || \n          current.y > prev.y + 5) { // 有明显换行\n        break;\n      }\n      \n      start--;\n    }\n    \n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n      \n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      \n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n      \n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      \n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (window.autoReader.charPositions.length === 0) {\n      if (window.currentPage < window.totalPages) {\n        window.changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 重置索引到开头\n    window.autoReader.currentIndex = 0;\n    \n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    \n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n    \n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n    \n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none';\n      highlight.style.zIndex = '998';\n      contentContainer.appendChild(highlight);\n    }\n    \n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight &&\n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n    \n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20;\n    \n    // 尝试获取实际行高\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(window.autoReader.charPositions[i].y - window.autoReader.charPositions[i-1].y);\n        if (yDiff > 5) {\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n    \n    // 记录上次滚动的位置\n    let lastScrolledY = -1;\n    const scrollSafeZone = lineHeight * 2.5;\n    \n    // 设置字符大小的估计值\n    let charWidth = 20;\n    let charHeight = lineHeight * 0.8;\n    \n    // 尝试估计字符宽度\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        if (window.autoReader.charPositions[i].x !== window.autoReader.charPositions[i-1].x) {\n          const xDiff = Math.abs(window.autoReader.charPositions[i].x - window.autoReader.charPositions[i-1].x);\n          if (xDiff > 0 && xDiff < 50) {\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    \n    window.autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (window.autoReader.currentIndex < window.autoReader.charPositions.length && \n             window.autoReader.charPositions[window.autoReader.currentIndex]?.char.trim() === '') {\n        window.autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (window.autoReader.currentIndex >= window.autoReader.charPositions.length) {\n        if (window.currentPage < window.totalPages) {\n          window.changePage(1);\n          clearInterval(window.autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n\n      const pos = window.autoReader.charPositions[window.autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      \n      if (cursor && highlight) {\n        const contentRect = contentContainer.getBoundingClientRect();\n        \n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        \n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        \n        highlight.style.left = `${relativeX - charWidth/2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n        \n        // 滚动处理\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        \n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          \n          if (isContainerScrollable) {\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n            \n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            \n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = relativeY;\n            }\n          } else {\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n            \n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            \n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      \n      window.autoReader.currentIndex++;\n      \n    }, window.autoReader.speed);\n    \n    // 在停止自动阅读时清除所有高亮\n    window.autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n      \n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n      \n      // 调用清理函数\n      if (window.autoReader.cleanup) {\n        window.autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n    \n    // 重置翻页状态\n    window.autoReader.isPageChanging = false;\n    \n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n    \n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n    \n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n    \n    // 收集字符位置\n    window.autoReader.charPositions = getAllCharacterPositions(content);\n    \n    // 如果当前页没有内容，尝试翻页\n    if (window.autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !window.autoReader.isPageChanging) {\n        window.autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async (e) => {\n    const newMode = e.target.value;\n    const prevMode = readingMode;\n    \n    console.log(`切换阅读模式: 从 ${prevMode} 到 ${newMode}`);\n    \n    // 更新状态\n    setReadingMode(newMode);\n    \n    // 如果有PDF文档和当前页，重新处理当前页内容\n    if (pdfDocument && currentPage > 0) {\n      try {\n        console.log('重新处理当前页面内容');\n        const page = await pdfDocument.getPage(currentPage);\n        \n        // 不使用任何额外处理，直接使用最原始的方式重新加载页面\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n        \n        // 根据当前模式设置内容\n        if (newMode === 'static') {\n          // 静态高亮模式 - 使用改进的句子处理\n          const html = formatSimpleHighlightedText(sentences);\n          console.log('设置静态高亮内容');\n          setContent(html);\n          \n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n        if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n              \n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n                \n                // 验证文字颜色\n                if (styles.color === 'rgb(51, 51, 51)' || styles.color === '#333333') {\n                  console.log('文字颜色正确应用');\n                } else {\n                  console.warn('文字颜色可能未正确应用:', styles.color);\n                }\n              }\n            } else {\n              console.error('未找到静态高亮模式内容区域');\n            }\n          }, 200);\n        } else if (newMode === 'flash-reading') {\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n            \n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n            \n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n            \n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n        } else {\n          // 其他模式保持不变\n          const handler = getContentHandlerForMode(newMode);\n          const processedContent = handler(sentences);\n          setContent(processedContent);\n        }\n      } catch (error) {\n        console.error('应用阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 首先确保移除鼠标跟随监听器\n    removeMouseFollowListeners();\n    \n    // 清理节奏阅读器\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    \n    // 清理闪读器\n    if (window.flashReader) {\n      window.flashReader.cleanup();\n    }\n    \n    // 清理舒适3D效果\n    const comfortable3DElements = document.querySelectorAll('.emboss-3d-text, .float-3d-text, .gradient-3d-text');\n    comfortable3DElements.forEach(el => el.remove());\n    \n    // 清理闪读模式元素\n    const flashReadingElements = document.querySelectorAll('.flash-reading-container, .flash-reading-display, .flash-reading-controls');\n    flashReadingElements.forEach(el => el.remove());\n    \n    // 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll(\n      '.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line, .rhythm-char'\n    );\n    highlights.forEach(el => {\n      if (el.parentNode) el.parentNode.removeChild(el);\n    });\n    \n    // 彻底替换内容区域以移除所有事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 先保存底部翻页控件\n      const bottomPagination = contentArea.querySelector('.bottom-pagination');\n      \n      // 深度克隆内容，但不克隆事件监听器\n      const contentHTML = contentArea.querySelector('div[dangerouslySetInnerHTML]')?.innerHTML || '';\n      const newContentArea = contentArea.cloneNode(false);\n      \n      // 创建新的内容容器\n      const newContentContainer = document.createElement('div');\n      newContentContainer.innerHTML = contentHTML;\n      newContentArea.appendChild(newContentContainer);\n      \n      // 如果有底部翻页控件，重新添加\n      if (bottomPagination && totalPages > 0) {\n        const newBottomPagination = bottomPagination.cloneNode(true);\n        // 重新绑定事件\n        const prevBtn = newBottomPagination.querySelector('.page-btn:first-child');\n        const nextBtn = newBottomPagination.querySelector('.page-btn:last-child');\n        if (prevBtn) prevBtn.onclick = () => changePage(-1);\n        if (nextBtn) nextBtn.onclick = () => changePage(1);\n        newContentArea.appendChild(newBottomPagination);\n      }\n      \n      if (contentArea.parentNode) {\n        contentArea.parentNode.replaceChild(newContentArea, contentArea);\n      }\n    }\n    \n    // 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 移除所有特殊标记和样式\n      paragraph.removeAttribute('data-follow');\n      paragraph.removeAttribute('style');\n      \n      // 清理特殊span标签\n      paragraph.innerHTML = paragraph.innerHTML\n        .replace(/<span class=\"text-line\"[^>]*>/g, '')\n        .replace(/<span class=\"rhythm-char\"[^>]*>/g, '')\n        .replace(/<span class=\"line-highlight[^\"]*\"[^>]*>/g, '')\n        .replace(/<span class=\"mouse-highlight[^\"]*\"[^>]*>/g, '')\n        .replace(/<\\/span>/g, '');\n    });\n    \n    // 移除特殊UI元素\n    const elementsToRemove = [\n      'rhythm-speed-slider',\n      'rhythm-notification'\n    ];\n    \n    elementsToRemove.forEach(id => {\n      const element = document.getElementById(id);\n      if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    });\n    \n    // 移除暗色背景\n    document.body.classList.remove('dark-background');\n    \n    // 清理闪读模式\n    if (window.flashReader && typeof window.flashReader.cleanup === 'function') {\n      window.flashReader.cleanup();\n    }\n  };\n\n  const handleAutoScroll = () => {\n    window.autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = (e) => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    \n    const rect = contentArea.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    \n    clearAllHighlights();\n    \n    const paragraphs = contentArea.querySelectorAll('p');\n    paragraphs.forEach(paragraph => {\n      const paragraphRect = paragraph.getBoundingClientRect();\n      const paragraphX = paragraphRect.left - rect.left;\n      const paragraphY = paragraphRect.top - rect.top;\n      \n      if (y >= paragraphY && y <= paragraphY + paragraphRect.height) {\n        const words = paragraph.querySelectorAll('span');\n        words.forEach(word => {\n          const wordRect = word.getBoundingClientRect();\n          const wordX = wordRect.left - rect.left;\n          \n          if (x >= wordX && x <= wordX + wordRect.width) {\n            word.classList.add('highlight');\n          }\n        });\n      }\n    });\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 专门用于移除鼠标跟随事件的函数\n  const removeMouseFollowListeners = () => {\n    // 移除记录的所有监听器\n    if (window.eventTracker && window.eventTracker.mouseFollowHandlers) {\n      window.eventTracker.mouseFollowHandlers.forEach(({element, event, handler}) => {\n        if (element && element.removeEventListener) {\n          element.removeEventListener(event, handler);\n        }\n      });\n      window.eventTracker.mouseFollowHandlers = [];\n    }\n    \n    // 为安全起见，尝试从document和内容区域移除通用处理函数\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    }\n    \n    document.removeEventListener('mousemove', handleMouseMove);\n    \n    // 清除所有当前高亮\n    clearAllHighlights();\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n    \n    // 添加底部翻页控件样式\n    const bottomPaginationStyles = document.createElement('style');\n    bottomPaginationStyles.id = 'bottom-pagination-styles';\n    bottomPaginationStyles.innerHTML = `\n      .bottom-pagination {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        padding: 20px 0 30px;\n        margin-top: 30px;\n        width: 100%;\n        background-color: transparent;\n        border-radius: 5px;\n      }\n\n      .bottom-pagination .page-btn {\n        background-color: #6c5ce7;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        padding: 8px 15px;\n        margin: 0 10px;\n        cursor: pointer;\n        font-size: 14px;\n        transition: background-color 0.2s ease;\n      }\n\n      .bottom-pagination .page-btn:hover {\n        background-color: #4834d4;\n      }\n\n      .bottom-pagination .page-btn:disabled {\n        background-color: #aaa;\n        cursor: not-allowed;\n      }\n\n      .bottom-pagination .page-info {\n        font-size: 14px;\n        margin: 0 10px;\n      }\n    `;\n    document.head.appendChild(bottomPaginationStyles);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n    addComfortable3DStyles();\n    \n    // 添加鼠标跟随模式的样式\n    const mouseFollowStyle = document.createElement('style');\n    mouseFollowStyle.id = 'intelligent-mouse-follow-style';\n    mouseFollowStyle.textContent = `\n      /* 基础样式 */\n      .mouse-follow-content {\n        position: relative;\n        line-height: 1.8;\n      }\n      \n      .mouse-follow-content .follow-line {\n        position: relative;\n        padding: 8px 16px;\n        margin: 4px 0;\n        border-radius: 6px;\n        transition: all 0.2s ease;\n        display: block;\n        min-height: 1.8em;\n        white-space: normal;\n        word-wrap: break-word;\n        text-indent: 2em;\n      }\n      \n      /* 高亮状态 */\n      .follow-line.highlighted {\n        background-color: #ffa500 !important; /* 橙色背景 */\n        color: #ffffff !important; /* 白色文字 */\n        font-weight: bold !important;\n        font-size: 1.1em; /* 稍微调小字号 */\n        transform: translateX(5px);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n      }\n      \n      \n      /* 平滑过渡效果 */\n      .follow-line {\n        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n      }\n      \n      /* 行间距优化 */\n      .mouse-follow-content .follow-line + .follow-line {\n        margin-top: 4px;\n      }\n      \n      /* 添加行指示器 */\n      .follow-line::before {\n        content: '';\n        position: absolute;\n        left: 0;\n        top: 0;\n        bottom: 0;\n        width: 3px;\n        background: linear-gradient(to bottom, transparent, rgba(255, 255, 255, 0.5), transparent);\n        opacity: 0;\n        transition: opacity 0.2s ease;\n      }\n      \n      .follow-line.highlighted::before {\n        opacity: 1;\n      }\n    `;\n    document.head.appendChild(mouseFollowStyle);\n    \n    // 创建深色背景下的ADHD友好高亮样式\n    const style = document.createElement('style');\n    style.id = 'adhd-friendly-highlight-style';\n    style.textContent = `\n      /* ADHD友好的高亮样式 - 适配深色背景 */\n      .adhd-highlight-mode {\n        line-height: 1.8;\n        padding: 20px;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph {\n        margin-bottom: 1.2em;\n        background-color: transparent;\n        padding: 12px 15px;\n        border-radius: 6px;\n        border-left: 3px solid rgba(255, 255, 255, 0.2);\n        transition: all 0.3s ease;\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover {\n        transform: translateX(5px);\n        border-left-color: rgba(255, 255, 255, 0.4);\n      }\n      \n      /* 加粗样式 - 白色加粗 */\n      .adhd-bold {\n        font-weight: 700;\n        color: #ffffff;\n        letter-spacing: 0.02em;\n        font-size: 1.1em;\n        text-shadow: 0 0 1px rgba(255, 255, 255, 0.2);\n      }\n      \n      /* 彩色样式 - 使用鲜明的蓝色 */\n      .adhd-colored {\n        color: #6c5ce7;\n        font-weight: 500;\n        font-size: 1.05em;\n        text-shadow: 0 0 1px rgba(108, 92, 231, 0.2);\n      }\n      \n      /* 正常样式 - 普通白色 */\n      .adhd-normal {\n        color: rgba(255, 255, 255, 0.8);\n        font-size: 1em;\n      }\n\n      /* 添加平滑过渡效果 */\n      .adhd-bold, .adhd-colored, .adhd-normal {\n        transition: all 0.2s ease;\n      }\n\n      /* 悬停效果 */\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-bold {\n        color: #ffffff;\n        text-shadow: 0 0 2px rgba(255, 255, 255, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-colored {\n        color: #8a7ff7;\n        text-shadow: 0 0 2px rgba(138, 127, 247, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-normal {\n        color: rgba(255, 255, 255, 0.9);\n      }\n\n      /* 添加段落间距的视觉引导 */\n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph {\n        margin-top: 1.5em;\n        position: relative;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph::before {\n        content: '';\n        position: absolute;\n        top: -0.75em;\n        left: 0;\n        right: 0;\n        height: 1px;\n        background: linear-gradient(\n          to right,\n          transparent,\n          rgba(255, 255, 255, 0.1),\n          transparent\n        );\n      }\n    `;\n    document.head.appendChild(style);\n    \n    // 添加基础鼠标跟随样式\n    const mouseFollowPageStyle = document.createElement('style');\n    mouseFollowPageStyle.id = 'basic-mouse-follow-style';\n    mouseFollowPageStyle.textContent = `\n      .follow-line {\n        padding: 8px 12px;\n        margin: 4px 0;\n        border-radius: 4px;\n        transition: background-color 0.2s ease;\n      }\n      .follow-line.highlighted {\n        background-color: #ffa500;\n        color: #000080;\n        font-weight: bold;\n      }\n    `;\n    document.head.appendChild(mouseFollowPageStyle);\n    \n    return () => {\n      const existingStyle = document.getElementById('adhd-friendly-highlight-style');\n      if (existingStyle) existingStyle.remove();\n      \n      const existingMouseFollowStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (existingMouseFollowStyle) existingMouseFollowStyle.remove();\n      \n      const existingBasicMouseFollowStyle = document.getElementById('basic-mouse-follow-style');\n      if (existingBasicMouseFollowStyle) existingBasicMouseFollowStyle.remove();\n      \n      mouseFollowPageStyle.remove();\n    };\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 清理旧监听器\n    removeMouseFollowListeners();\n    \n    // 添加新监听器\n    setTimeout(() => {\n      addMouseFollowListeners();\n      \n      // 添加调试辅助 - 显示行边界\n      const contentArea = document.querySelector('.mouse-follow-content');\n      if (contentArea) {\n        const lines = contentArea.querySelectorAll('.follow-line');\n        console.log(`初始化鼠标跟随模式，共 ${lines.length} 行`);\n        \n        // 可选：启用可视化调试\n        if (false) { // 设置为true可以启用可视化调试\n          lines.forEach((line, index) => {\n            line.style.border = '1px dashed #888';\n            line.setAttribute('title', `行 ${index+1}`);\n          });\n        }\n        \n        // 验证行高亮效果\n        const firstLine = lines[0];\n        if (firstLine) {\n          console.log('行样式验证:', {\n            padding: window.getComputedStyle(firstLine).padding,\n            margin: window.getComputedStyle(firstLine).margin,\n            fontSize: window.getComputedStyle(firstLine).fontSize,\n            lineHeight: window.getComputedStyle(firstLine).lineHeight\n          });\n        }\n      }\n    }, 100);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = (delta) => {\n    window.autoReader.speed = Math.max(100, window.autoReader.speed + delta);\n    \n    if (window.autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async (delta) => {\n    console.log(`翻页请求: 当前页 ${currentPage}, 增量 ${delta}`);\n    const newPage = currentPage + delta;\n    \n    if (newPage < 1 || newPage > totalPages) {\n      console.log('无效页码，不执行翻页');\n          return;\n        }\n        \n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n    const wasFlashReading = readingMode === 'flash-reading' && window.flashReader && window.flashReader.isPlaying;\n    \n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    \n    if (wasFlashReading && window.flashReader) {\n      window.flashReader.cleanup();\n    }\n    \n    // 更新页码\n    setCurrentPage(newPage);\n    \n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n      \n      // 检查是否为目录页\n      const textContent = await page.getTextContent();\n      const isToc = await detectIfTocPage(textContent);\n      setIsTableOfContents(isToc);\n      \n      if (isToc) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, page.getViewport({ scale: 1.0 }));\n      } else {\n        // 处理正文页面 - 根据当前阅读模式处理\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n        \n        // 根据当前模式设置内容\n        if (readingMode === 'static') {\n          console.log('翻页后应用静态高亮模式');\n          const processedContent = formatSimpleHighlightedText(sentences);\n          setContent(processedContent);\n          \n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n            if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n              \n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n              }\n            }\n          }, 200);\n        } else if (readingMode === 'flash-reading') {\n          // 如果是闪读模式，则需要特殊处理\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n            \n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n            \n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n            \n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n          return; // 已处理，直接返回\n        } else {\n          // 其他模式使用原处理函数\n          await processContentPage(page, readingMode);\n        }\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n    } catch (error) {\n      console.error('页面切换错误:', error);\n    }\n  };\n\n  // ADHD友好的静态高亮处理函数\n  const formatSimpleHighlightedText = (sentences) => {\n    console.log('开始处理ADHD友好的静态高亮文本，句子数量:', sentences.length);\n    \n    let html = '<div class=\"pdf-content adhd-highlight-mode\">';\n    \n    sentences.forEach((sentence, sentenceIndex) => {\n      if (!sentence || sentence.trim() === '') {\n        console.log(`跳过空句子，索引: ${sentenceIndex}`);\n      return;\n    }\n    \n      // 清理和规范化文本\n      const cleanText = sentence\n        .trim()\n        .replace(/\\s+/g, ' ')  // 规范化空白字符\n        .replace(/&/g, '&amp;')  // 转义特殊字符\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n      \n      // 处理句子中的单词，为它们添加不同样式\n      const words = cleanText.split(/(\\s+)/);\n      let formattedSentence = '';\n      \n      words.forEach((word, wordIndex) => {\n        if (word.trim() === '') {\n          // 保留空格\n          formattedSentence += word;\n      } else {\n          // 根据位置应用不同的样式类\n          // 三种交替样式: 加粗、彩色、正常\n          const styleClass = wordIndex % 3 === 0 ? 'adhd-bold' : \n                           wordIndex % 3 === 1 ? 'adhd-colored' : 'adhd-normal';\n          \n          formattedSentence += `<span class=\"${styleClass}\">${word}</span>`;\n        }\n      });\n      \n      console.log(`处理句子 ${sentenceIndex + 1}:`, cleanText.substring(0, 50) + '...');\n      html += `<p class=\"pdf-paragraph\">${formattedSentence}</p>`;\n    });\n    \n    html += '</div>';\n    \n    // 调试输出\n    console.log('生成的ADHD友好静态高亮HTML:', html.substring(0, 200) + '...');\n    \n    return html;\n  };\n\n  // 根据阅读模式获取相应的内容处理函数\n  const getContentHandlerForMode = (mode) => {\n    switch(mode) {\n      case 'normal': return formatSentencesToHtml;\n      case 'static': return applyStaticHighlightToSentences;\n      case 'follow-mouse': return formatSentencesForMouseFollow;\n      case 'comfortable-3d': return applyComfortable3dEffectToSentences;\n      case 'flash-reading': \n        return (sentences) => {\n          // 闪读模式使用专门的分割函数重新处理文本\n          return createFlashReadingContentFromSentences(sentences);\n        };\n      default: return formatSentencesToHtml;\n    }\n  };\n\n  // 监听阅读模式和当前页面的变化\n  useEffect(() => {\n    if (readingMode === 'mouse-follow' && currentPage && !isTableOfContents) {\n      // 移除之前的样式\n      const oldStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (oldStyle) {\n        oldStyle.remove();\n      }\n      \n      // 添加基础鼠标跟随样式\n      const followModeStyle = document.createElement('style');\n      followModeStyle.id = 'basic-mouse-follow-style';\n      followModeStyle.textContent = `\n        .follow-line {\n          padding: 8px 12px;\n          margin: 4px 0;\n          border-radius: 4px;\n          transition: background-color 0.2s ease;\n        }\n        .follow-line.highlighted {\n          background-color: #ffa500;\n          color: #000080;\n          font-weight: bold;\n        }\n      `;\n      document.head.appendChild(followModeStyle);\n      \n      // 处理当前页面内容\n      const page = pdfDocument.getPage(currentPage);\n      const textContent = page.getTextContent();\n      const sentences = textContent.items\n        .map(item => item.str)\n        .join(' ')\n        .split(/[。！？]/)\n        .filter(s => s.trim());\n      \n      // 应用基础鼠标跟随格式化\n      setContent(formatSentencesForMouseFollow(sentences));\n      \n      // 添加鼠标跟随监听器\n      setTimeout(() => {\n        addMouseFollowListeners();\n      }, 100);\n      \n      return () => {\n        followModeStyle.remove();\n      };\n    }\n  }, [readingMode, currentPage, pdfDocument]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        <div className=\"logo\">\n          <h2>ADHD阅读助手</h2>\n        </div>\n        \n        <div className=\"reading-controls\">\n          <h3>阅读模式</h3>\n          <select \n            id=\"reading-mode-select\" \n            value={readingMode} \n            onChange={handleReadingModeChange}\n            className=\"mode-select\"\n          >\n            <option value=\"normal\">普通模式</option>\n            <option value=\"static\">静态高亮</option>\n            <option value=\"follow-mouse\">鼠标跟随</option>\n            <option value=\"rhythm\">节奏阅读</option>\n            <option value=\"flash-reading\">闪读模式</option>\n          </select>\n        </div>\n        \n        <div className=\"upload-section\">\n          <input\n            type=\"file\"\n            accept=\".pdf,.txt,.md\" \n            hidden\n            id=\"file-upload\"\n            onChange={handleFileUpload}\n            ref={fileRef}\n          />\n          <button \n            className=\"upload-btn\"\n            onClick={() => fileRef.current.click()}\n          >\n            上传文件 (.pdf/.txt/.md)\n          </button>\n      </div>\n            </div>\n      \n      <div className=\"main-content\">\n        <div className=\"toolbar\">\n          {fileName && <h3 className=\"filename\">{fileName}</h3>}\n          {/* 移除了原有翻页控件 */}\n            </div>\n        \n        <div className=\"page-content\" ref={readerContainerRef}>\n            <div dangerouslySetInnerHTML={{ __html: content }} />\n          \n          {totalPages > 0 && (\n            <div className=\"bottom-pagination\">\n              <button \n                onClick={() => changePage(-1)} \n                disabled={currentPage <= 1}\n                className=\"page-btn\"\n              >\n                上一页\n              </button>\n            <span className=\"page-info\">\n                第 {currentPage} / {totalPages} 页\n              </span>\n              <button \n                onClick={() => changePage(1)} \n                disabled={currentPage >= totalPages}\n                className=\"page-btn\"\n              >\n                下一页\n              </button>\n          </div>\n        )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App; \n"],"mappings":"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;IACA,MAAMgZ,sBAAsB,GAAGza,QAAQ,CAACkB,aAAa,CAAC,OAAO,CAAC;IAC9DuZ,sBAAsB,CAACzV,EAAE,GAAG,0BAA0B;IACtDyV,sBAAsB,CAAC5F,SAAS,GAAG;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACD7U,QAAQ,CAACwK,IAAI,CAACzI,WAAW,CAAC0Y,sBAAsB,CAAC;EACnD,CAAC;;EAED;EACAve,SAAS,CAAC,MAAM;IACdse,mBAAmB,CAAC,CAAC;IACrB7P,sBAAsB,CAAC,CAAC;;IAExB;IACA,MAAM+P,gBAAgB,GAAG1a,QAAQ,CAACkB,aAAa,CAAC,OAAO,CAAC;IACxDwZ,gBAAgB,CAAC1V,EAAE,GAAG,gCAAgC;IACtD0V,gBAAgB,CAACvZ,WAAW,GAAG;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDnB,QAAQ,CAACwK,IAAI,CAACzI,WAAW,CAAC2Y,gBAAgB,CAAC;;IAE3C;IACA,MAAMjZ,KAAK,GAAGzB,QAAQ,CAACkB,aAAa,CAAC,OAAO,CAAC;IAC7CO,KAAK,CAACuD,EAAE,GAAG,+BAA+B;IAC1CvD,KAAK,CAACN,WAAW,GAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}