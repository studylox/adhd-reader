{"ast":null,"code":"var _jsxFileName = \"D:\\\\adhd-read-helper\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 模拟NLP词性标注功能（实际应用中建议使用专业NLP库如nlp.js或调用API）\nconst tagPartsOfSpeech = text => {\n  // 定义所有标点符号\n  const punctuationMarks = ['，', '。', '！', '？', '；', '：', '（', '）', '【', '】', '《', '》', '〈', '〉', '…', '—', '～', '·', ',', '.', '!', '?', ';', ':', '(', ')', '[', ']', '{', '}', '-', '...', '..'];\n\n  // 将文本按标点符号分割，保留标点符号\n  const segments = text.split(new RegExp(`([${punctuationMarks.map(mark => '\\\\' + mark).join('')}])`));\n  let result = '';\n  let colorIndex = 0; // 0: 红色, 1: 蓝色, 2: 黑色\n  let currentText = '';\n  segments.forEach((segment, index) => {\n    // 跳过空字符串和纯空格\n    if (!segment || /^\\s+$/.test(segment)) {\n      result += segment;\n      return;\n    }\n\n    // 检查是否是标点符号\n    const isPunctuation = punctuationMarks.includes(segment);\n\n    // 根据索引选择颜色\n    let color;\n    switch (colorIndex) {\n      case 0:\n        color = 'red';\n        break;\n      case 1:\n        color = 'blue';\n        break;\n      case 2:\n        color = 'black';\n        break;\n      default:\n        color = 'black';\n    }\n\n    // 将当前文本和标点符号放在同一个颜色块中\n    if (isPunctuation) {\n      // 如果有累积的文本，先添加文本\n      if (currentText) {\n        result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n        currentText = '';\n      }\n      // 添加标点符号\n      result += `<span class=\"highlight-word ${color}\">${segment}</span>`;\n      // 切换颜色\n      colorIndex = (colorIndex + 1) % 3;\n    } else {\n      // 累积文本\n      currentText += segment;\n    }\n  });\n\n  // 处理最后可能剩余的文本\n  if (currentText) {\n    const color = colorIndex === 0 ? 'red' : colorIndex === 1 ? 'blue' : 'black';\n    result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n  }\n  return result;\n};\nconst App = () => {\n  _s();\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const autoReadGuideRef = useRef(null);\n  const autoReadIntervalRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n    return () => {\n      // 清理自动阅读定时器\n      if (autoReadIntervalRef.current) {\n        clearInterval(autoReadIntervalRef.current);\n      }\n    };\n  }, []);\n\n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async file => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n\n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n\n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n\n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({\n        scale: 1.0\n      });\n\n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async textContent => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n\n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n\n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n\n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    const lines = [...lineMap.values()];\n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    return hasTocKeywords || hasPageNumberPatterns || shortLineRatio > 0.7 && numberLineRatio > 0.3;\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n\n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n\n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n\n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n\n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 修改文本处理函数，实现按完整词随机高亮\n  const processTextWithHighlight = text => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    return result;\n  };\n\n  // 修改processContentPage函数\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n\n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch (mode) {\n        case 'normal':\n          // 普通模式 - 简单分段显示\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'static':\n          // 静态高亮模式 - 应用词性标注和颜色高亮\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'follow-mouse':\n          // 鼠标跟随高亮模式 - 分段落但不预先高亮，由鼠标事件触发高亮\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      setContent(processedContent);\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async file => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain') {\n      handleTxtFile(file);\n    } else {\n      alert('请上传PDF或TXT文件');\n    }\n  };\n\n  // 翻页函数\n  const changePage = async delta => {\n    const newPage = currentPage + delta;\n    if (newPage >= 1 && newPage <= totalPages && pdfDocument) {\n      // 先更新当前页码\n      setCurrentPage(newPage);\n\n      // 立即处理新页面内容\n      try {\n        console.log(`切换到页面 ${newPage}...`);\n\n        // 获取新页面内容\n        const page = await pdfDocument.getPage(newPage);\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n        // 根据当前阅读模式处理文本\n        let processedContent = '';\n        switch (readingMode) {\n          case 'normal':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlight(extractedText);\n            break;\n          case 'follow-mouse':\n            processedContent = formatTextForMouseFollow(extractedText);\n            break;\n          default:\n            processedContent = formatTextToHtml(extractedText);\n        }\n\n        // 直接更新DOM，确保立即生效\n        const contentArea = document.querySelector('.page-content');\n        if (contentArea) {\n          contentArea.innerHTML = processedContent;\n\n          // 如果是鼠标跟随模式，立即添加事件监听器\n          if (readingMode === 'follow-mouse') {\n            // 立即应用鼠标跟随效果\n            setTimeout(() => {\n              console.log('添加鼠标跟随监听器 (翻页后)');\n              addMouseFollowListeners();\n\n              // 主动触发一次鼠标事件，测试高亮效果\n              const testEvent = new MouseEvent('mousemove', {\n                bubbles: true,\n                cancelable: true,\n                view: window,\n                clientX: 100,\n                clientY: 100\n              });\n              contentArea.dispatchEvent(testEvent);\n            }, 10);\n          }\n        }\n      } catch (error) {\n        console.error('翻页处理出错:', error);\n      }\n    }\n  };\n\n  // 辅助函数：获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = e => {\n    if (readingMode !== 'follow-mouse') return;\n\n    // 清除所有现有高亮\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n    const mouseTarget = document.elementFromPoint(e.clientX, e.clientY);\n    if (mouseTarget && (mouseTarget.classList.contains('pdf-paragraph') || mouseTarget.tagName === 'P' || mouseTarget.tagName === 'SPAN')) {\n      const targetParagraph = mouseTarget.closest('.pdf-paragraph');\n      if (!targetParagraph) return;\n\n      // 获取段落文本节点\n      const textNode = getTextNodeAtPosition(targetParagraph, e.clientX, e.clientY);\n      if (!textNode) return;\n\n      // 获取精确的行位置和尺寸\n      const range = document.createRange();\n      range.selectNodeContents(textNode);\n      const rects = range.getClientRects();\n\n      // 找到鼠标所在的具体行\n      let targetRect = null;\n      for (let i = 0; i < rects.length; i++) {\n        const rect = rects[i];\n        if (e.clientY >= rect.top && e.clientY <= rect.bottom) {\n          targetRect = rect;\n          break;\n        }\n      }\n      if (targetRect) {\n        // 创建高亮元素\n        const lineHighlight = document.createElement('div');\n        lineHighlight.className = 'line-highlight mouse-highlight';\n\n        // 计算相对于段落的位置\n        const paragraphRect = targetParagraph.getBoundingClientRect();\n        const top = targetRect.top - paragraphRect.top;\n        const left = targetRect.left - paragraphRect.left;\n\n        // 设置高亮样式\n        lineHighlight.style.position = 'absolute';\n        lineHighlight.style.left = `${left}px`;\n        lineHighlight.style.top = `${top}px`;\n        lineHighlight.style.width = `${targetRect.width}px`;\n        lineHighlight.style.height = `${targetRect.height}px`;\n        lineHighlight.style.pointerEvents = 'none';\n        lineHighlight.style.backgroundColor = 'rgba(255, 165, 0, 0.3)';\n        lineHighlight.style.borderRadius = '4px';\n        lineHighlight.style.boxShadow = '0 0 8px rgba(255, 165, 0, 0.5)';\n        lineHighlight.style.zIndex = '5';\n        lineHighlight.style.transition = 'all 0.1s ease';\n\n        // 确保段落有相对定位\n        targetParagraph.style.position = 'relative';\n        targetParagraph.appendChild(lineHighlight);\n\n        // 计算并滚动到居中位置\n        const windowHeight = window.innerHeight;\n        const desiredPosition = windowHeight / 2;\n        const currentPosition = targetRect.top;\n        const scrollOffset = currentPosition - desiredPosition;\n        window.scrollTo({\n          top: window.scrollY + scrollOffset,\n          behavior: 'smooth'\n        });\n      }\n    }\n  };\n\n  // 格式化文本用于鼠标跟随高亮模式\n  const formatTextForMouseFollow = text => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    let htmlContent = '<div class=\"pdf-content mouse-follow-content\">';\n    paragraphs.forEach(paragraph => {\n      // 将段落分割成行\n      const lines = paragraph.split('\\n').filter(line => line.trim());\n      htmlContent += `<p class=\"pdf-paragraph\" data-follow=\"true\" style=\"position: relative; line-height: 1.5;\">`;\n      lines.forEach((line, i) => {\n        // 每行用span包裹\n        htmlContent += `<span class=\"text-line\" style=\"display: block;\">${line}</span>`;\n      });\n      htmlContent += `</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 添加鼠标跟随监听器\n  const addMouseFollowListeners = () => {\n    if (readingMode !== 'follow-mouse') return;\n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n\n    // 清理旧的监听器\n    contentArea.removeEventListener('mousemove', handleMouseMove);\n    contentArea.removeEventListener('mouseleave', clearAllHighlights);\n\n    // 添加新的监听器\n    contentArea.addEventListener('mousemove', handleMouseMove);\n    contentArea.addEventListener('mouseleave', clearAllHighlights);\n\n    // 确保所有段落都有正确的样式\n    document.querySelectorAll('.pdf-paragraph').forEach(p => {\n      p.style.position = 'relative';\n      p.style.lineHeight = '1.5';\n    });\n  };\n\n  // 修改后的鼠标跟随初始化函数\n  const initializeMouseFollow = () => {\n    // 新增延迟补偿\n    setTimeout(() => {\n      addMouseFollowListeners();\n\n      // 强制触发重排\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        void contentArea.offsetHeight;\n\n        // 模拟鼠标移动事件\n        const fakeEvent = new MouseEvent('mousemove', {\n          clientX: window.innerWidth / 2,\n          clientY: window.innerHeight / 2,\n          bubbles: true\n        });\n        contentArea.dispatchEvent(fakeEvent);\n      }\n    }, 50);\n  };\n\n  // 修改后的模式切换处理函数\n  const handleReadingModeChange = async e => {\n    const newMode = e.target.value;\n    console.log(`切换阅读模式: ${readingMode} -> ${newMode}`);\n\n    // 1. 增强清理\n    cleanupDOM();\n\n    // 2. 更新状态\n    setReadingMode(newMode);\n\n    // 3. 立即应用新模式到当前页面（优化版）\n    if (pdfDocument && currentPage > 0) {\n      try {\n        const page = await pdfDocument.getPage(currentPage);\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n        // 生成新内容时强制清理残留元素\n        let processedContent = '';\n        switch (newMode) {\n          case 'follow-mouse':\n            processedContent = formatTextForMouseFollow(extractedText);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlight(extractedText);\n            break;\n          default:\n            processedContent = formatTextToHtml(extractedText);\n        }\n        const contentArea = document.querySelector('.page-content');\n        if (contentArea) {\n          // 使用textContent清空避免事件残留\n          contentArea.textContent = '';\n          contentArea.innerHTML = processedContent;\n\n          // 立即应用对应模式的功能\n          switch (newMode) {\n            case 'follow-mouse':\n              initializeMouseFollow();\n              break;\n            case 'static':\n              // 强制重绘以确保高亮生效\n              void contentArea.offsetHeight;\n              break;\n            default:\n            // 普通模式不需要额外处理\n          }\n        }\n      } catch (error) {\n        console.error('应用新阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清除所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 在组件卸载时清除事件监听器\n  useEffect(() => {\n    return () => {\n      removeMouseFollowListeners();\n    };\n  }, []);\n\n  // 格式化文本为HTML\n  const formatTextToHtml = text => {\n    // 分段\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n\n    // 创建HTML内容\n    let htmlContent = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      htmlContent += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 修改后的静态高亮应用函数\n  const applyStaticHighlight = text => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    let htmlContent = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      // 新增强制清理逻辑\n      const cleanParagraph = paragraph.replace(/<span class=\"text-line\">/g, '').replace(/<\\/span>/g, '');\n      const highlightedText = processTextWithHighlight(cleanParagraph);\n      htmlContent += `<p class=\"pdf-paragraph\">${highlightedText}</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 修改后的清理函数\n  const cleanupDOM = () => {\n    console.log('清理DOM元素和效果...');\n\n    // 1. 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll('.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line');\n    highlights.forEach(el => el.remove());\n\n    // 2. 移除事件监听器（增强版）\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 克隆内容区域以彻底移除所有事件监听器\n      const cleanContent = contentArea.cloneNode(false);\n      cleanContent.innerHTML = contentArea.innerHTML;\n      contentArea.parentNode.replaceChild(cleanContent, contentArea);\n\n      // 清理MutationObserver\n      if (contentArea._highlightObserver) {\n        contentArea._highlightObserver.disconnect();\n        delete contentArea._highlightObserver;\n      }\n    }\n\n    // 3. 重置段落结构（增强版）\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 创建新段落并保留基本结构\n      const newParagraph = document.createElement('p');\n      newParagraph.className = 'pdf-paragraph';\n      newParagraph.innerHTML = paragraph.innerHTML.replace(/<span class=\"text-line\">/g, '').replace(/<\\/span>/g, '');\n\n      // 移除特殊属性\n      newParagraph.removeAttribute('data-follow');\n      newParagraph.removeAttribute('style');\n      if (paragraph.parentNode) {\n        paragraph.parentNode.replaceChild(newParagraph, paragraph);\n      }\n    });\n  };\n\n  // 移除鼠标跟随事件监听器\n  const removeMouseFollowListeners = () => {\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 移除所有事件监听器\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n\n      // 移除MutationObserver\n      if (contentArea._highlightObserver) {\n        contentArea._highlightObserver.disconnect();\n        delete contentArea._highlightObserver;\n      }\n\n      // 移除所有段落的鼠标事件监听器\n      const paragraphs = document.querySelectorAll('.pdf-paragraph');\n      paragraphs.forEach(paragraph => {\n        const newParagraph = paragraph.cloneNode(true);\n        if (paragraph.parentNode) {\n          paragraph.parentNode.replaceChild(newParagraph, paragraph);\n        }\n      });\n\n      // 移除mouse-follow-content类\n      const mouseFollowContent = document.querySelector('.mouse-follow-content');\n      if (mouseFollowContent) {\n        mouseFollowContent.classList.remove('mouse-follow-content');\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 776,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 775,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"upload-btn\",\n        children: [\"\\u9009\\u62E9\\u6587\\u4EF6\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".pdf,.txt\",\n          onChange: handleFileUpload,\n          style: {\n            display: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 780,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 778,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 774,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 790,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mode-selector\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: readingMode,\n              onChange: handleReadingModeChange,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"normal\",\n                children: \"\\u666E\\u901A\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 794,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"static\",\n                children: \"\\u9759\\u6001\\u9AD8\\u4EAE\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 795,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"follow-mouse\",\n                children: \"\\u9F20\\u6807\\u8DDF\\u968F\\u9AD8\\u4EAE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 796,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 793,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 792,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mode-selector\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: posMode,\n              onChange: e => setPosMode(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"none\",\n                children: \"\\u65E0\\u8BCD\\u6027\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 801,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"noun\",\n                children: \"\\u540D\\u8BCD\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 802,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"all\",\n                children: \"\\u5168\\u8BCD\\u6027\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 803,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 800,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 799,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 791,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 789,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-content\",\n        children: content ? /*#__PURE__*/_jsxDEV(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: content\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 810,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-state\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u8BF7\\u4E0A\\u4F20PDF\\u6216TXT\\u6587\\u4EF6\\u5F00\\u59CB\\u9605\\u8BFB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 813,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 812,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 808,\n        columnNumber: 9\n      }, this), content && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"page-btn prev\",\n          onClick: () => changePage(-1),\n          disabled: currentPage === 1,\n          children: \"\\u4E0A\\u4E00\\u9875\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 819,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"page-info\",\n          children: [\"\\u7B2C \", currentPage, \" \\u9875 / \\u5171 \", totalPages, \" \\u9875\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 822,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"page-btn next\",\n          onClick: () => changePage(1),\n          disabled: currentPage === totalPages,\n          children: \"\\u4E0B\\u4E00\\u9875\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 825,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 818,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 788,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 773,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"h5JipuZG13btp4lKlvCy8zJdNPI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","pdfjsLib","pdfjsViewer","marked","pdfjs","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","tagPartsOfSpeech","text","punctuationMarks","segments","split","RegExp","map","mark","join","result","colorIndex","currentText","forEach","segment","index","test","isPunctuation","includes","color","App","_s","pages","setPages","currentPage","setCurrentPage","totalPages","setTotalPages","fileName","setFileName","loading","setLoading","fileRef","file","setFile","pdfInstance","setPdfInstance","extractedTextPages","setExtractedTextPages","readingMode","setReadingMode","posMode","setPosMode","markdownContent","setMarkdownContent","readerContainerRef","autoReadGuideRef","autoReadIntervalRef","content","setContent","pdfDocument","setPdfDocument","current","clearInterval","setTimeout","initializeMouseFollow","handlePdfFile","fileURL","URL","createObjectURL","loadingTask","getDocument","pdf","promise","numPages","extractAndProcessPage","console","log","error","alert","pageNum","page","getPage","textContent","getTextContent","viewport","getViewport","scale","isTableOfContents","detectIfTocPage","processTocPage","processContentPage","addMouseFollowListeners","textItems","items","fullText","item","str","hasTocKeywords","hasPageNumberPatterns","shortLinesCount","linesWithNumbersCount","lineMap","Map","yKey","Math","round","transform","has","set","get","push","lines","values","line","lineText","length","shortLineRatio","numberLineRatio","htmlContent","x","y","height","fontSize","sqrt","fontWeight","fontName","toLowerCase","spacedText","processTextWithHighlight","words","lastColor","word","random","mode","extractedText","replace","trim","processedContent","formatTextToHtml","applyStaticHighlight","formatTextForMouseFollow","handleTxtFile","pageTexts","paragraph","fontFamily","handleFileUpload","e","target","files","type","changePage","delta","newPage","contentArea","document","querySelector","innerHTML","testEvent","MouseEvent","bubbles","cancelable","view","window","clientX","clientY","dispatchEvent","getTextNodeAtPosition","element","nodes","childNodes","i","node","nodeType","Node","TEXT_NODE","range","createRange","selectNodeContents","rects","getClientRects","j","rect","top","bottom","left","right","ELEMENT_NODE","found","handleMouseMove","querySelectorAll","el","remove","mouseTarget","elementFromPoint","classList","contains","tagName","targetParagraph","closest","textNode","targetRect","lineHighlight","createElement","className","paragraphRect","getBoundingClientRect","style","position","width","pointerEvents","backgroundColor","borderRadius","boxShadow","zIndex","transition","appendChild","windowHeight","innerHeight","desiredPosition","currentPosition","scrollOffset","scrollTo","scrollY","behavior","paragraphs","filter","p","removeEventListener","clearAllHighlights","addEventListener","lineHeight","offsetHeight","fakeEvent","innerWidth","handleReadingModeChange","newMode","value","cleanupDOM","removeMouseFollowListeners","cleanParagraph","highlightedText","highlights","cleanContent","cloneNode","parentNode","replaceChild","_highlightObserver","disconnect","newParagraph","removeAttribute","mouseFollowContent","children","_jsxFileName","lineNumber","columnNumber","accept","onChange","display","dangerouslySetInnerHTML","__html","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/adhd-read-helper/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 模拟NLP词性标注功能（实际应用中建议使用专业NLP库如nlp.js或调用API）\nconst tagPartsOfSpeech = (text) => {\n  // 定义所有标点符号\n  const punctuationMarks = [\n    '，', '。', '！', '？', '；', '：', '（', '）', '【', '】', '《', '》', '〈', '〉', '…', '—', '～', '·',\n    ',', '.', '!', '?', ';', ':', '(', ')', '[', ']', '{', '}', '-', '...', '..'\n  ];\n  \n  // 将文本按标点符号分割，保留标点符号\n  const segments = text.split(new RegExp(`([${punctuationMarks.map(mark => '\\\\' + mark).join('')}])`));\n  let result = '';\n  let colorIndex = 0; // 0: 红色, 1: 蓝色, 2: 黑色\n  let currentText = '';\n  \n  segments.forEach((segment, index) => {\n    // 跳过空字符串和纯空格\n    if (!segment || /^\\s+$/.test(segment)) {\n      result += segment;\n      return;\n    }\n    \n    // 检查是否是标点符号\n    const isPunctuation = punctuationMarks.includes(segment);\n    \n    // 根据索引选择颜色\n    let color;\n    switch (colorIndex) {\n      case 0:\n        color = 'red';\n        break;\n      case 1:\n        color = 'blue';\n        break;\n      case 2:\n        color = 'black';\n        break;\n      default:\n        color = 'black';\n    }\n    \n    // 将当前文本和标点符号放在同一个颜色块中\n    if (isPunctuation) {\n      // 如果有累积的文本，先添加文本\n      if (currentText) {\n        result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n        currentText = '';\n      }\n      // 添加标点符号\n      result += `<span class=\"highlight-word ${color}\">${segment}</span>`;\n      // 切换颜色\n      colorIndex = (colorIndex + 1) % 3;\n    } else {\n      // 累积文本\n      currentText += segment;\n    }\n  });\n  \n  // 处理最后可能剩余的文本\n  if (currentText) {\n    const color = colorIndex === 0 ? 'red' : colorIndex === 1 ? 'blue' : 'black';\n    result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n  }\n  \n  return result;\n};\n\nconst App = () => {\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const autoReadGuideRef = useRef(null);\n  const autoReadIntervalRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n    \n    return () => {\n      // 清理自动阅读定时器\n      if (autoReadIntervalRef.current) {\n        clearInterval(autoReadIntervalRef.current);\n      }\n    };\n  }, []);\n  \n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async (file) => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      \n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n      \n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n      \n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n  \n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({ scale: 1.0 });\n      \n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      \n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      \n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async (textContent) => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n    \n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n    \n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n    \n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    \n    const lines = [...lineMap.values()];\n    \n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    \n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    \n    return hasTocKeywords || hasPageNumberPatterns || (shortLineRatio > 0.7 && numberLineRatio > 0.3);\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n    \n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    \n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n      \n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n      \n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n      \n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    \n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 修改文本处理函数，实现按完整词随机高亮\n  const processTextWithHighlight = (text) => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    \n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      \n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        \n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    \n    return result;\n  };\n\n  // 修改processContentPage函数\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      \n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch(mode) {\n        case 'normal':\n          // 普通模式 - 简单分段显示\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'static':\n          // 静态高亮模式 - 应用词性标注和颜色高亮\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'follow-mouse':\n          // 鼠标跟随高亮模式 - 分段落但不预先高亮，由鼠标事件触发高亮\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      \n      setContent(processedContent);\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async (file) => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n    \n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain') {\n      handleTxtFile(file);\n    } else {\n      alert('请上传PDF或TXT文件');\n    }\n  };\n\n  // 翻页函数\n  const changePage = async (delta) => {\n    const newPage = currentPage + delta;\n    if (newPage >= 1 && newPage <= totalPages && pdfDocument) {\n      // 先更新当前页码\n      setCurrentPage(newPage);\n      \n      // 立即处理新页面内容\n      try {\n        console.log(`切换到页面 ${newPage}...`);\n        \n        // 获取新页面内容\n        const page = await pdfDocument.getPage(newPage);\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        // 根据当前阅读模式处理文本\n        let processedContent = '';\n        switch(readingMode) {\n          case 'normal':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlight(extractedText);\n            break;\n          case 'follow-mouse':\n            processedContent = formatTextForMouseFollow(extractedText);\n            break;\n          default:\n            processedContent = formatTextToHtml(extractedText);\n        }\n        \n        // 直接更新DOM，确保立即生效\n        const contentArea = document.querySelector('.page-content');\n        if (contentArea) {\n          contentArea.innerHTML = processedContent;\n          \n          // 如果是鼠标跟随模式，立即添加事件监听器\n          if (readingMode === 'follow-mouse') {\n            // 立即应用鼠标跟随效果\n            setTimeout(() => {\n              console.log('添加鼠标跟随监听器 (翻页后)');\n              addMouseFollowListeners();\n              \n              // 主动触发一次鼠标事件，测试高亮效果\n              const testEvent = new MouseEvent('mousemove', {\n                bubbles: true,\n                cancelable: true,\n                view: window,\n                clientX: 100,\n                clientY: 100\n              });\n              contentArea.dispatchEvent(testEvent);\n            }, 10);\n          }\n        }\n      } catch (error) {\n        console.error('翻页处理出错:', error);\n      }\n    }\n  };\n\n  // 辅助函数：获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && \n              x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = (e) => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    // 清除所有现有高亮\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n    \n    const mouseTarget = document.elementFromPoint(e.clientX, e.clientY);\n    \n    if (mouseTarget && \n       (mouseTarget.classList.contains('pdf-paragraph') || \n        mouseTarget.tagName === 'P' || \n        mouseTarget.tagName === 'SPAN')) {\n      \n      const targetParagraph = mouseTarget.closest('.pdf-paragraph');\n      if (!targetParagraph) return;\n      \n      // 获取段落文本节点\n      const textNode = getTextNodeAtPosition(targetParagraph, e.clientX, e.clientY);\n      if (!textNode) return;\n      \n      // 获取精确的行位置和尺寸\n      const range = document.createRange();\n      range.selectNodeContents(textNode);\n      const rects = range.getClientRects();\n      \n      // 找到鼠标所在的具体行\n      let targetRect = null;\n      for (let i = 0; i < rects.length; i++) {\n        const rect = rects[i];\n        if (e.clientY >= rect.top && e.clientY <= rect.bottom) {\n          targetRect = rect;\n          break;\n        }\n      }\n      \n      if (targetRect) {\n        // 创建高亮元素\n        const lineHighlight = document.createElement('div');\n        lineHighlight.className = 'line-highlight mouse-highlight';\n        \n        // 计算相对于段落的位置\n        const paragraphRect = targetParagraph.getBoundingClientRect();\n        const top = targetRect.top - paragraphRect.top;\n        const left = targetRect.left - paragraphRect.left;\n        \n        // 设置高亮样式\n        lineHighlight.style.position = 'absolute';\n        lineHighlight.style.left = `${left}px`;\n        lineHighlight.style.top = `${top}px`;\n        lineHighlight.style.width = `${targetRect.width}px`;\n        lineHighlight.style.height = `${targetRect.height}px`;\n        lineHighlight.style.pointerEvents = 'none';\n        lineHighlight.style.backgroundColor = 'rgba(255, 165, 0, 0.3)';\n        lineHighlight.style.borderRadius = '4px';\n        lineHighlight.style.boxShadow = '0 0 8px rgba(255, 165, 0, 0.5)';\n        lineHighlight.style.zIndex = '5';\n        lineHighlight.style.transition = 'all 0.1s ease';\n        \n        // 确保段落有相对定位\n        targetParagraph.style.position = 'relative';\n        targetParagraph.appendChild(lineHighlight);\n        \n        // 计算并滚动到居中位置\n        const windowHeight = window.innerHeight;\n        const desiredPosition = windowHeight / 2;\n        const currentPosition = targetRect.top;\n        const scrollOffset = currentPosition - desiredPosition;\n        \n        window.scrollTo({\n          top: window.scrollY + scrollOffset,\n          behavior: 'smooth'\n        });\n      }\n    }\n  };\n\n  // 格式化文本用于鼠标跟随高亮模式\n  const formatTextForMouseFollow = (text) => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    let htmlContent = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      // 将段落分割成行\n      const lines = paragraph.split('\\n').filter(line => line.trim());\n      htmlContent += `<p class=\"pdf-paragraph\" data-follow=\"true\" style=\"position: relative; line-height: 1.5;\">`;\n      \n      lines.forEach((line, i) => {\n        // 每行用span包裹\n        htmlContent += `<span class=\"text-line\" style=\"display: block;\">${line}</span>`;\n      });\n      \n      htmlContent += `</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 添加鼠标跟随监听器\n  const addMouseFollowListeners = () => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    \n    // 清理旧的监听器\n    contentArea.removeEventListener('mousemove', handleMouseMove);\n    contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    \n    // 添加新的监听器\n    contentArea.addEventListener('mousemove', handleMouseMove);\n    contentArea.addEventListener('mouseleave', clearAllHighlights);\n    \n    // 确保所有段落都有正确的样式\n    document.querySelectorAll('.pdf-paragraph').forEach(p => {\n      p.style.position = 'relative';\n      p.style.lineHeight = '1.5';\n    });\n  };\n\n  // 修改后的鼠标跟随初始化函数\n  const initializeMouseFollow = () => {\n    // 新增延迟补偿\n    setTimeout(() => {\n      addMouseFollowListeners();\n      \n      // 强制触发重排\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        void contentArea.offsetHeight;\n        \n        // 模拟鼠标移动事件\n        const fakeEvent = new MouseEvent('mousemove', {\n          clientX: window.innerWidth / 2,\n          clientY: window.innerHeight / 2,\n          bubbles: true\n        });\n        contentArea.dispatchEvent(fakeEvent);\n      }\n    }, 50);\n  };\n\n  // 修改后的模式切换处理函数\n  const handleReadingModeChange = async (e) => {\n    const newMode = e.target.value;\n    console.log(`切换阅读模式: ${readingMode} -> ${newMode}`);\n\n    // 1. 增强清理\n    cleanupDOM();\n    \n    // 2. 更新状态\n    setReadingMode(newMode);\n\n    // 3. 立即应用新模式到当前页面（优化版）\n    if (pdfDocument && currentPage > 0) {\n      try {\n        const page = await pdfDocument.getPage(currentPage);\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n        // 生成新内容时强制清理残留元素\n        let processedContent = '';\n        switch(newMode) {\n          case 'follow-mouse':\n            processedContent = formatTextForMouseFollow(extractedText);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlight(extractedText);\n            break;\n          default:\n            processedContent = formatTextToHtml(extractedText);\n        }\n\n        const contentArea = document.querySelector('.page-content');\n        if (contentArea) {\n          // 使用textContent清空避免事件残留\n          contentArea.textContent = '';\n          contentArea.innerHTML = processedContent;\n\n          // 立即应用对应模式的功能\n          switch(newMode) {\n            case 'follow-mouse':\n              initializeMouseFollow();\n              break;\n            case 'static':\n              // 强制重绘以确保高亮生效\n              void contentArea.offsetHeight;\n              break;\n            default:\n              // 普通模式不需要额外处理\n          }\n        }\n      } catch (error) {\n        console.error('应用新阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清除所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 在组件卸载时清除事件监听器\n  useEffect(() => {\n    return () => {\n      removeMouseFollowListeners();\n    };\n  }, []);\n\n  // 格式化文本为HTML\n  const formatTextToHtml = (text) => {\n    // 分段\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    // 创建HTML内容\n    let htmlContent = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      htmlContent += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 修改后的静态高亮应用函数\n  const applyStaticHighlight = (text) => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    let htmlContent = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      // 新增强制清理逻辑\n      const cleanParagraph = paragraph\n        .replace(/<span class=\"text-line\">/g, '')\n        .replace(/<\\/span>/g, '');\n      \n      const highlightedText = processTextWithHighlight(cleanParagraph);\n      htmlContent += `<p class=\"pdf-paragraph\">${highlightedText}</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 修改后的清理函数\n  const cleanupDOM = () => {\n    console.log('清理DOM元素和效果...');\n    \n    // 1. 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll(\n      '.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line'\n    );\n    highlights.forEach(el => el.remove());\n    \n    // 2. 移除事件监听器（增强版）\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 克隆内容区域以彻底移除所有事件监听器\n      const cleanContent = contentArea.cloneNode(false);\n      cleanContent.innerHTML = contentArea.innerHTML;\n      contentArea.parentNode.replaceChild(cleanContent, contentArea);\n      \n      // 清理MutationObserver\n      if (contentArea._highlightObserver) {\n        contentArea._highlightObserver.disconnect();\n        delete contentArea._highlightObserver;\n      }\n    }\n    \n    // 3. 重置段落结构（增强版）\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 创建新段落并保留基本结构\n      const newParagraph = document.createElement('p');\n      newParagraph.className = 'pdf-paragraph';\n      newParagraph.innerHTML = paragraph.innerHTML\n        .replace(/<span class=\"text-line\">/g, '')\n        .replace(/<\\/span>/g, '');\n      \n      // 移除特殊属性\n      newParagraph.removeAttribute('data-follow');\n      newParagraph.removeAttribute('style');\n      \n      if (paragraph.parentNode) {\n        paragraph.parentNode.replaceChild(newParagraph, paragraph);\n      }\n    });\n  };\n\n  // 移除鼠标跟随事件监听器\n  const removeMouseFollowListeners = () => {\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 移除所有事件监听器\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n      \n      // 移除MutationObserver\n      if (contentArea._highlightObserver) {\n        contentArea._highlightObserver.disconnect();\n        delete contentArea._highlightObserver;\n      }\n      \n      // 移除所有段落的鼠标事件监听器\n      const paragraphs = document.querySelectorAll('.pdf-paragraph');\n      paragraphs.forEach(paragraph => {\n        const newParagraph = paragraph.cloneNode(true);\n        if (paragraph.parentNode) {\n          paragraph.parentNode.replaceChild(newParagraph, paragraph);\n        }\n      });\n      \n      // 移除mouse-follow-content类\n      const mouseFollowContent = document.querySelector('.mouse-follow-content');\n      if (mouseFollowContent) {\n        mouseFollowContent.classList.remove('mouse-follow-content');\n      }\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        <div className=\"logo\">\n          <h2>ADHD阅读助手</h2>\n        </div>\n        <label className=\"upload-btn\">\n          选择文件\n          <input\n            type=\"file\"\n            accept=\".pdf,.txt\"\n            onChange={handleFileUpload}\n            style={{ display: 'none' }}\n          />\n        </label>\n      </div>\n      <div className=\"main-content\">\n        <div className=\"header\">\n          <h1>ADHD阅读助手</h1>\n          <div className=\"controls\">\n            <div className=\"mode-selector\">\n              <select value={readingMode} onChange={handleReadingModeChange}>\n                <option value=\"normal\">普通模式</option>\n                <option value=\"static\">静态高亮模式</option>\n                <option value=\"follow-mouse\">鼠标跟随高亮</option>\n              </select>\n            </div>\n            <div className=\"mode-selector\">\n              <select value={posMode} onChange={(e) => setPosMode(e.target.value)}>\n                <option value=\"none\">无词性标注</option>\n                <option value=\"noun\">名词标注</option>\n                <option value=\"all\">全词性标注</option>\n              </select>\n            </div>\n          </div>\n        </div>\n        <div className=\"page-content\">\n          {content ? (\n            <div dangerouslySetInnerHTML={{ __html: content }} />\n          ) : (\n            <div className=\"empty-state\">\n              <p>请上传PDF或TXT文件开始阅读</p>\n            </div>\n          )}\n        </div>\n        {content && (\n          <div className=\"nav-buttons\">\n            <button className=\"page-btn prev\" onClick={() => changePage(-1)} disabled={currentPage === 1}>\n              上一页\n            </button>\n            <span className=\"page-info\">\n              第 {currentPage} 页 / 共 {totalPages} 页\n            </span>\n            <button className=\"page-btn next\" onClick={() => changePage(1)} disabled={currentPage === totalPages}>\n              下一页\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}