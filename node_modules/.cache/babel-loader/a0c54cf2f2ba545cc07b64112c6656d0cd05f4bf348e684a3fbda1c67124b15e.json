{"ast":null,"code":"var _jsxFileName = \"D:\\\\adhd-read-helper\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 添加全局事件跟踪对象\nwindow.eventTracker = window.eventTracker || {\n  mouseFollowHandlers: []\n};\n\n// 自动阅读器全局对象\nwindow.autoReader = {\n  charPositions: [],\n  intervalId: null,\n  currentIndex: 0,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false,\n  cleanup: null\n};\n\n// 添加新的节奏阅读模式代码\n// 全局变量，确保在页面切换后仍然保持状态\nwindow.rhythmReaderGlobal = window.rhythmReaderGlobal || {\n  active: false,\n  speed: 300\n};\n\n// 超可靠的节奏阅读模式 - 重点解决手动翻页问题\n(function () {\n  console.log(\"初始化超可靠版节奏阅读模式...\");\n\n  // ===== 状态控制 - 使用三种方式保存状态以确保可靠性 =====\n  function saveState(active) {\n    try {\n      // 使用三种不同的存储方式来确保状态不丢失\n      sessionStorage.setItem('rhythmReading', active ? 'true' : 'false');\n      localStorage.setItem('rhythmReading', active ? 'true' : 'false');\n      document.cookie = `rhythmReading=${active ? 'true' : 'false'}; path=/; max-age=3600`;\n      console.log(`节奏阅读模式状态已保存: ${active}`);\n    } catch (e) {\n      console.error(\"保存状态失败\", e);\n    }\n  }\n  function isActive() {\n    try {\n      // 按优先级检查三种存储\n      if (sessionStorage.getItem('rhythmReading') === 'true') return true;\n      if (localStorage.getItem('rhythmReading') === 'true') return true;\n      if (document.cookie.includes('rhythmReading=true')) return true;\n      return false;\n    } catch (e) {\n      console.error(\"读取状态失败\", e);\n      return false;\n    }\n  }\n\n  // ===== 核心功能对象 =====\n  const rhythmReader = {\n    intervalId: null,\n    speed: 300,\n    currentIndex: 0,\n    readIndices: new Set(),\n    charElements: [],\n    injectedCode: false,\n    // 在页面上注入一个持久化脚本以便在页面加载时自动恢复\n    injectAutoStartScript: function () {\n      if (this.injectedCode) return;\n      try {\n        const script = document.createElement('script');\n        script.id = 'rhythm-autostart-script';\n        script.textContent = `\n          console.log(\"节奏阅读自动启动脚本已加载\");\n          (function() {\n            function checkAndStart() {\n              try {\n                const isActive = (\n                  sessionStorage.getItem('rhythmReading') === 'true' || \n                  localStorage.getItem('rhythmReading') === 'true' || \n                  document.cookie.includes('rhythmReading=true')\n                );\n                \n                if (isActive && window.rhythmReader && !window.rhythmReader.intervalId) {\n                  console.log(\"页面加载后自动恢复节奏阅读模式\");\n                  window.rhythmReader.start();\n                }\n              } catch(e) {\n                console.error(\"自动启动检查失败\", e);\n              }\n            }\n            \n            // 多种时机尝试启动\n            // 1. DOMContentLoaded\n            if (document.readyState === 'loading') {\n              document.addEventListener('DOMContentLoaded', checkAndStart);\n            } else {\n              setTimeout(checkAndStart, 100);\n            }\n            \n            // 2. window.load\n            window.addEventListener('load', checkAndStart);\n            \n            // 3. 多次延迟尝试\n            [500, 1000, 1500, 2000].forEach(delay => {\n              setTimeout(checkAndStart, delay);\n            });\n          })();\n        `;\n        document.head.appendChild(script);\n        this.injectedCode = true;\n        console.log(\"注入了自动启动脚本\");\n      } catch (e) {\n        console.error(\"注入自动启动脚本失败\", e);\n      }\n    },\n    // 开始节奏阅读\n    start: function () {\n      console.log(\"开始节奏阅读模式\");\n\n      // 停止现有的\n      this.stop(false);\n\n      // 设置状态\n      saveState(true);\n\n      // 注入自动启动脚本\n      this.injectAutoStartScript();\n\n      // 拦截所有翻页方法\n      this.interceptPageTurning();\n\n      // 初始化文本节点\n      if (!this.initializeTextNodes()) {\n        console.error(\"无法初始化文本节点，没有找到可读内容\");\n        return;\n      }\n\n      // 从头开始\n      this.currentIndex = 0;\n      this.readIndices.clear();\n\n      // 添加速度控制\n      this.addSpeedSlider();\n\n      // 更新颜色\n      this.updateTextColors();\n\n      // 滚动到当前位置\n      this.scrollToCurrentChar();\n\n      // 开始计时器\n      this.intervalId = setInterval(() => this.moveToNextChar(), this.speed);\n\n      // 显示通知\n      this.showNotification(\"节奏阅读模式已启动\");\n    },\n    // 停止节奏阅读\n    stop: function (updateState = true) {\n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n      }\n\n      // 恢复文本\n      this.restoreOriginalText();\n\n      // 移除控件\n      const slider = document.getElementById('rhythm-speed-slider');\n      if (slider) slider.remove();\n\n      // 更新状态\n      if (updateState) {\n        saveState(false);\n      }\n    },\n    // 显示通知\n    showNotification: function (message) {\n      let notification = document.getElementById('rhythm-notification');\n      if (notification) notification.remove();\n      notification = document.createElement('div');\n      notification.id = 'rhythm-notification';\n      notification.textContent = message;\n      notification.style.position = 'fixed';\n      notification.style.top = '50%';\n      notification.style.left = '50%';\n      notification.style.transform = 'translate(-50%, -50%)';\n      notification.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';\n      notification.style.color = 'white';\n      notification.style.padding = '15px 25px';\n      notification.style.borderRadius = '5px';\n      notification.style.zIndex = '10001';\n      notification.style.fontSize = '18px';\n      document.body.appendChild(notification);\n      setTimeout(() => {\n        if (notification && notification.parentNode) {\n          notification.parentNode.removeChild(notification);\n        }\n      }, 2000);\n    },\n    // 拦截所有可能的翻页方法\n    interceptPageTurning: function () {\n      // 已经拦截过，不重复操作\n      if (window._pageIntercepted) return;\n      window._pageIntercepted = true;\n\n      // 1. 拦截changePage函数\n      if (typeof window.changePage === 'function' && !window._originalChangePage) {\n        window._originalChangePage = window.changePage;\n        window.changePage = delta => {\n          console.log(`拦截到changePage调用(${delta})，当前状态: ${isActive()}`);\n\n          // 如果当前处于节奏阅读模式\n          if (isActive()) {\n            // 保存状态，重要!\n            saveState(true);\n\n            // 停止当前的阅读，但不改变状态标记\n            this.stop(false);\n\n            // 显示提示\n            this.showNotification(\"正在翻页，将自动继续阅读...\");\n\n            // 设置自动恢复标记\n            document.body.dataset.autoResumeRhythm = \"true\";\n          }\n\n          // 调用原始函数\n          window._originalChangePage(delta);\n        };\n        console.log(\"已拦截changePage函数\");\n      }\n\n      // 2. 找到所有可能的翻页按钮并拦截\n      const findAndInterceptButtons = () => {\n        const buttons = document.querySelectorAll('button, a, [role=\"button\"]');\n        let count = 0;\n        buttons.forEach(button => {\n          // 已经拦截过的跳过\n          if (button.dataset.rhythmIntercepted) return;\n          const text = (button.textContent || '').trim().toLowerCase();\n          if (text.includes('下一页') || text.includes('上一页') || text.includes('next') || text.includes('prev') || text === '>' || text === '<' || text === '→' || text === '←') {\n            button.dataset.rhythmIntercepted = \"true\";\n\n            // 创建一个新函数来拦截点击\n            const originalClick = button.onclick;\n            button.onclick = event => {\n              console.log(`拦截到翻页按钮点击: ${text}`);\n\n              // 如果处于节奏阅读模式\n              if (isActive()) {\n                // 保存状态\n                saveState(true);\n\n                // 停止当前读取但保持状态\n                this.stop(false);\n\n                // 显示提示\n                this.showNotification(\"正在翻页，将自动继续阅读...\");\n\n                // 设置自动恢复标记\n                document.body.dataset.autoResumeRhythm = \"true\";\n              }\n\n              // 执行原始点击\n              if (originalClick) {\n                return originalClick.call(this, event);\n              }\n            };\n            count++;\n            console.log(`已拦截翻页按钮: ${text}`);\n          }\n        });\n        if (count > 0) {\n          console.log(`总共拦截了${count}个翻页按钮`);\n        }\n      };\n\n      // 立即执行一次\n      findAndInterceptButtons();\n\n      // 也用MutationObserver监视新增的按钮\n      const buttonObserver = new MutationObserver(mutations => {\n        mutations.forEach(mutation => {\n          if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {\n            findAndInterceptButtons();\n          }\n        });\n      });\n      buttonObserver.observe(document.body, {\n        childList: true,\n        subtree: true\n      });\n\n      // 3. 拦截键盘事件\n      document.addEventListener('keydown', event => {\n        // 检查是否是翻页相关的按键\n        if (['ArrowLeft', 'ArrowRight', 'PageUp', 'PageDown'].includes(event.key)) {\n          console.log(`拦截到键盘翻页: ${event.key}`);\n          if (isActive()) {\n            // 保存状态\n            saveState(true);\n\n            // 停止但不重置状态\n            this.stop(false);\n\n            // 设置自动恢复标记\n            document.body.dataset.autoResumeRhythm = \"true\";\n\n            // 不阻止默认行为，让翻页正常进行\n          }\n        }\n      });\n      console.log(\"已拦截键盘翻页事件\");\n\n      // 4. 设置自动监测DOM变化以恢复阅读\n      const contentObserver = new MutationObserver(mutations => {\n        // 只在标记为需要恢复时检查\n        if (document.body.dataset.autoResumeRhythm === \"true\" && isActive()) {\n          const contentChanges = mutations.filter(m => m.type === 'childList' && m.addedNodes.length > 0);\n          if (contentChanges.length > 0) {\n            console.log(\"检测到内容变化，正在恢复节奏阅读...\");\n\n            // 清除标记\n            document.body.dataset.autoResumeRhythm = \"false\";\n\n            // 延迟启动，等待页面完全加载\n            setTimeout(() => {\n              if (isActive() && !this.intervalId) {\n                console.log(\"在内容变化后自动恢复节奏阅读\");\n                this.start();\n              }\n            }, 300);\n          }\n        }\n      });\n      contentObserver.observe(document.body, {\n        childList: true,\n        subtree: true\n      });\n      console.log(\"已设置内容变化监测\");\n    },\n    // 初始化文本节点\n    initializeTextNodes: function () {\n      // 重置字符元素数组\n      this.charElements = [];\n\n      // 获取内容容器\n      const contentContainer = document.querySelector('.page-content') || document.body;\n\n      // 查找所有文本节点\n      const textNodes = [];\n      this.findTextNodes(contentContainer, textNodes);\n      if (textNodes.length === 0) {\n        console.error(\"未找到文本节点\");\n        return false;\n      }\n\n      // 处理所有文本节点\n      textNodes.forEach(node => {\n        const text = node.nodeValue;\n        if (!text || text.trim() === '') return;\n\n        // 创建文档片段\n        const fragment = document.createDocumentFragment();\n\n        // 为每个字符创建span\n        for (let i = 0; i < text.length; i++) {\n          const char = text[i];\n          const span = document.createElement('span');\n          span.textContent = char;\n          span.className = 'rhythm-char';\n          span.dataset.rhythmIndex = this.charElements.length;\n\n          // 标记空白字符\n          if (char.trim() === '') {\n            span.dataset.whitespace = 'true';\n          }\n\n          // 保持原始样式\n          span.style.display = 'inline';\n          span.style.margin = '0';\n          span.style.padding = '0';\n          span.style.border = 'none';\n          span.style.backgroundColor = 'transparent';\n          fragment.appendChild(span);\n          this.charElements.push(span);\n        }\n\n        // 替换原始节点\n        if (node.parentNode) {\n          node.parentNode.replaceChild(fragment, node);\n        }\n      });\n      console.log(`初始化了 ${this.charElements.length} 个字符`);\n      return this.charElements.length > 0;\n    },\n    // 查找文本节点\n    findTextNodes: function (element, textNodes) {\n      // 处理子节点\n      for (let i = 0; i < element.childNodes.length; i++) {\n        const node = element.childNodes[i];\n\n        // 如果是文本节点且有内容\n        if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() !== '') {\n          textNodes.push(node);\n        }\n        // 如果是元素节点，递归处理\n        else if (node.nodeType === Node.ELEMENT_NODE) {\n          // 跳过UI元素\n          if (node.id === 'rhythm-speed-slider' || node.id === 'rhythm-notification' || node.className === 'rhythm-char') {\n            continue;\n          }\n          this.findTextNodes(node, textNodes);\n        }\n      }\n    },\n    // 更新文本颜色\n    updateTextColors: function () {\n      // 更新所有字符的颜色\n      this.charElements.forEach((span, index) => {\n        // 确定颜色\n        let color;\n        let fontWeight = 'inherit';\n        if (index === this.currentIndex) {\n          color = '#00aa00'; // 当前阅读的字 - 绿色\n          fontWeight = 'bold';\n        } else if (index === this.currentIndex + 1 || index === this.currentIndex + 2) {\n          color = '#aaaaaa'; // 接下来两个字 - 淡灰色\n        } else if (this.readIndices.has(index)) {\n          color = '#ffffff'; // 已读字符 - 白色（表示已读）\n        } else {\n          color = 'rgba(160, 160, 160, 0.25)'; // 未读字符 - 非常淡的灰色（可见但不明显）\n        }\n        span.style.color = color;\n        span.style.fontWeight = fontWeight;\n\n        // 确保没有背景\n        span.style.backgroundColor = 'transparent';\n        span.style.background = 'none';\n      });\n    },\n    // 移动到下一个字符\n    moveToNextChar: function () {\n      // 将当前字符标记为已读\n      this.readIndices.add(this.currentIndex);\n\n      // 移动到下一个非空白字符\n      do {\n        this.currentIndex++;\n\n        // 检查是否到达末尾\n        if (this.currentIndex >= this.charElements.length) {\n          console.log(\"已到达页尾，尝试翻页\");\n\n          // 尝试点击下一页按钮\n          if (!this.clickNextPageButton()) {\n            // 如果没有找到下一页按钮，完全停止阅读\n            this.stop(true);\n          }\n          return;\n        }\n      } while (this.currentIndex < this.charElements.length && this.charElements[this.currentIndex] && this.charElements[this.currentIndex].dataset.whitespace === 'true');\n\n      // 更新颜色\n      this.updateTextColors();\n\n      // 滚动到当前字符\n      this.scrollToCurrentChar();\n    },\n    // 尝试自动翻页\n    clickNextPageButton: function () {\n      console.log(\"尝试查找并点击下一页按钮\");\n\n      // 尝试多种可能的选择器来找到下一页按钮\n      const nextPageSelectors = ['button.next-page', 'button[aria-label=\"下一页\"]', 'a.next-page', 'a[aria-label=\"下一页\"]', '.next-page', '#next-page', 'button.next', 'a.next'];\n      let nextPageButton = null;\n\n      // 尝试通过选择器找到按钮\n      for (const selector of nextPageSelectors) {\n        try {\n          const elements = document.querySelectorAll(selector);\n          for (const el of elements) {\n            if (el.offsetParent !== null) {\n              // 检查元素是否可见\n              console.log(`找到下一页按钮: ${selector}`);\n              nextPageButton = el;\n              break;\n            }\n          }\n          if (nextPageButton) break;\n        } catch (e) {\n          // 某些选择器可能不被支持，忽略错误\n        }\n      }\n\n      // 如果没找到，尝试按文本内容查找\n      if (!nextPageButton) {\n        const buttons = document.querySelectorAll('button, a, div[role=\"button\"]');\n        for (const button of buttons) {\n          const text = (button.textContent || '').trim().toLowerCase();\n          if ((text.includes('下一页') || text.includes('next') || text === '>' || text === '→') && button.offsetParent !== null) {\n            console.log(`通过文本内容找到下一页按钮: ${text}`);\n            nextPageButton = button;\n            break;\n          }\n        }\n      }\n      if (nextPageButton) {\n        console.log(\"模拟点击下一页按钮\");\n\n        // 保存状态\n        saveState(true);\n\n        // 设置自动恢复标记\n        document.body.dataset.autoResumeRhythm = \"true\";\n\n        // 恢复原始文本\n        this.restoreOriginalText();\n\n        // 停止计时器\n        if (this.intervalId) {\n          clearInterval(this.intervalId);\n          this.intervalId = null;\n        }\n\n        // 显示提示\n        this.showNotification(\"正在翻页，将自动继续阅读...\");\n\n        // 模拟点击\n        try {\n          nextPageButton.click();\n        } catch (e) {\n          console.error(\"点击下一页按钮失败\", e);\n          return false;\n        }\n        return true;\n      } else if (typeof window._originalChangePage === 'function') {\n        // 尝试使用changePage函数\n        console.log(\"使用changePage函数翻页\");\n\n        // 保存状态\n        saveState(true);\n\n        // 设置自动恢复标记\n        document.body.dataset.autoResumeRhythm = \"true\";\n\n        // 恢复原始文本\n        this.restoreOriginalText();\n\n        // 停止计时器\n        if (this.intervalId) {\n          clearInterval(this.intervalId);\n          this.intervalId = null;\n        }\n\n        // 显示提示\n        this.showNotification(\"正在翻页，将自动继续阅读...\");\n\n        // 使用changePage\n        try {\n          window._originalChangePage(1);\n        } catch (e) {\n          console.error(\"使用changePage函数翻页失败\", e);\n          return false;\n        }\n        return true;\n      } else {\n        console.log(\"未找到任何可用的翻页方式\");\n        return false;\n      }\n    },\n    // 滚动到当前字符\n    scrollToCurrentChar: function () {\n      const span = this.charElements[this.currentIndex];\n      if (!span) return;\n      const rect = span.getBoundingClientRect();\n      const contentContainer = document.querySelector('.page-content');\n\n      // 估计行高\n      const lineHeight = parseInt(window.getComputedStyle(span).lineHeight) || Math.max(20, rect.height * 1.5);\n\n      // 确定滚动容器\n      const isContainerScrollable = contentContainer && contentContainer.scrollHeight > contentContainer.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n      if (isContainerScrollable) {\n        // 容器滚动\n        const containerRect = contentContainer.getBoundingClientRect();\n        const relativeTop = rect.top - containerRect.top + contentContainer.scrollTop;\n        const visibleTop = contentContainer.scrollTop;\n        const visibleBottom = visibleTop + contentContainer.clientHeight;\n        if (relativeTop < visibleTop + lineHeight || relativeTop > visibleBottom - lineHeight) {\n          contentContainer.scrollBy({\n            top: lineHeight * 2 * (relativeTop > visibleBottom - lineHeight ? 1 : -1),\n            behavior: 'smooth'\n          });\n        }\n      } else {\n        // 窗口滚动\n        const viewportTop = window.scrollY;\n        const viewportBottom = viewportTop + window.innerHeight;\n        const absoluteTop = rect.top + window.scrollY;\n        if (absoluteTop < viewportTop + lineHeight || absoluteTop > viewportBottom - lineHeight) {\n          window.scrollBy({\n            top: lineHeight * 2 * (absoluteTop > viewportBottom - lineHeight ? 1 : -1),\n            behavior: 'smooth'\n          });\n        }\n      }\n    },\n    // 添加速度滑块\n    addSpeedSlider: function () {\n      let slider = document.getElementById('rhythm-speed-slider');\n      if (slider) slider.remove();\n      const container = document.createElement('div');\n      container.id = 'rhythm-speed-slider';\n      container.style.position = 'fixed';\n      container.style.top = '70px';\n      container.style.right = '20px';\n      container.style.backgroundColor = 'white';\n      container.style.padding = '10px';\n      container.style.borderRadius = '5px';\n      container.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';\n      container.style.zIndex = '10000';\n      container.style.display = 'flex';\n      container.style.alignItems = 'center';\n      container.style.maxWidth = '300px';\n      const label = document.createElement('label');\n      label.textContent = '速度: ';\n      label.style.marginRight = '8px';\n      container.appendChild(label);\n      const input = document.createElement('input');\n      input.type = 'range';\n      input.min = '50';\n      input.max = '1000';\n      input.step = '50';\n      input.value = this.speed;\n      input.style.width = '120px';\n      const valueDisplay = document.createElement('span');\n      valueDisplay.textContent = `${this.speed}ms`;\n      valueDisplay.style.marginLeft = '8px';\n      valueDisplay.style.minWidth = '60px';\n      const self = this;\n      input.addEventListener('input', function () {\n        const newSpeed = parseInt(this.value);\n        self.speed = newSpeed;\n        valueDisplay.textContent = `${newSpeed}ms`;\n        if (self.intervalId) {\n          clearInterval(self.intervalId);\n          self.intervalId = setInterval(() => self.moveToNextChar(), newSpeed);\n        }\n      });\n      container.appendChild(input);\n      container.appendChild(valueDisplay);\n      document.body.appendChild(container);\n    },\n    // 恢复原始文本\n    restoreOriginalText: function () {\n      // 获取所有已创建的字符span\n      const charSpans = document.querySelectorAll('.rhythm-char');\n      if (charSpans.length === 0) return;\n\n      // 按父节点分组\n      const parentNodeMap = new Map();\n      charSpans.forEach(span => {\n        const parent = span.parentNode;\n        if (!parent) return;\n        if (!parentNodeMap.has(parent)) {\n          parentNodeMap.set(parent, []);\n        }\n        parentNodeMap.get(parent).push(span);\n      });\n\n      // 对每个父节点，将连续的字符span合并回文本节点\n      parentNodeMap.forEach((spans, parent) => {\n        if (spans.length === 0) return;\n\n        // 排序spans确保顺序正确\n        spans.sort((a, b) => {\n          const indexA = parseInt(a.dataset.rhythmIndex || '0');\n          const indexB = parseInt(b.dataset.rhythmIndex || '0');\n          return indexA - indexB;\n        });\n\n        // 根据连续性分组\n        const groups = [];\n        if (spans.length > 0) {\n          let currentGroup = [spans[0]];\n          for (let i = 1; i < spans.length; i++) {\n            const prevIndex = parseInt(spans[i - 1].dataset.rhythmIndex || '0');\n            const currentIndex = parseInt(spans[i].dataset.rhythmIndex || '0');\n            if (currentIndex === prevIndex + 1 && spans[i].previousSibling === spans[i - 1]) {\n              currentGroup.push(spans[i]);\n            } else {\n              groups.push(currentGroup);\n              currentGroup = [spans[i]];\n            }\n          }\n          groups.push(currentGroup);\n        }\n\n        // 对每个连续组替换为文本节点\n        groups.forEach(group => {\n          if (group.length === 0) return;\n          try {\n            const text = group.map(span => span.textContent).join('');\n            const textNode = document.createTextNode(text);\n\n            // 替换第一个span，然后移除其余的\n            if (group[0].parentNode === parent) {\n              parent.replaceChild(textNode, group[0]);\n              for (let i = 1; i < group.length; i++) {\n                if (group[i].parentNode === parent) {\n                  parent.removeChild(group[i]);\n                }\n              }\n            }\n          } catch (e) {\n            console.error(\"恢复文本时出错:\", e);\n          }\n        });\n      });\n\n      // 清除字符元素数组\n      this.charElements = [];\n    }\n  };\n\n  // ===== 重写模式选择函数 =====\n  if (typeof window.handleReadingModeChange === 'function') {\n    const originalReadingModeChanged = window.handleReadingModeChange;\n    window.handleReadingModeChange = function (newMode) {\n      console.log(`模式选择: ${newMode}`);\n\n      // 调用原始函数\n      originalReadingModeChanged(newMode);\n\n      // 处理节奏阅读模式\n      if (newMode === 'rhythm' || newMode === 'rhythmReading' || typeof newMode === 'string' && (newMode.includes('rhythm') || newMode.includes('节奏'))) {\n        console.log(\"选择了节奏阅读模式\");\n        rhythmReader.start();\n      } else {\n        if (isActive()) {\n          rhythmReader.stop(true);\n        }\n      }\n    };\n  }\n\n  // ===== 在页面加载时检查并自动恢复 =====\n  function checkAndRestore() {\n    if (isActive()) {\n      console.log(\"页面加载时检测到节奏阅读模式已激活，准备恢复\");\n      setTimeout(() => rhythmReader.start(), 300);\n    }\n  }\n\n  // DOMContentLoaded\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', checkAndRestore);\n  } else {\n    setTimeout(checkAndRestore, 0);\n  }\n\n  // window.load\n  window.addEventListener('load', checkAndRestore);\n\n  // 多次延迟尝试\n  [500, 1000, 1500].forEach(delay => {\n    setTimeout(() => {\n      if (isActive() && !rhythmReader.intervalId) {\n        console.log(`延迟${delay}ms后尝试恢复节奏阅读`);\n        rhythmReader.start();\n      }\n    }, delay);\n  });\n\n  // ===== 暴露到全局以便调试 =====\n  window.rhythmReader = rhythmReader;\n  console.log(\"节奏阅读模式初始化完成，当前状态:\", isActive());\n})();\nconst App = () => {\n  _s();\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  const [isTableOfContents, setIsTableOfContents] = useState(false);\n\n  // 实现缺失的函数\n  // 应用深色背景\n  const applyDarkBackground = () => {\n    document.body.classList.add('dark-background');\n\n    // 添加必要的CSS样式\n    if (!document.getElementById('dark-background-style')) {\n      const style = document.createElement('style');\n      style.id = 'dark-background-style';\n      style.textContent = `\n        .dark-background {\n          background-color: #000 !important;\n        }\n        .dark-background .sidebar {\n          background: linear-gradient(145deg, #4834d4, #341f9e) !important;\n        }\n        .dark-background .page-content {\n          background-color: #000 !important;\n        }\n        .dark-background .main-content {\n          background-color: #000 !important;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 恢复正常背景\n  const restoreDarkBackground = () => {\n    document.body.classList.remove('dark-background');\n  };\n\n  // 添加裸眼3D样式\n  const addNakedEye3DStyles = () => {\n    if (!document.getElementById('naked-eye-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'naked-eye-3d-style';\n      style.textContent = `\n        .naked-eye-3d-container {\n          position: relative;\n          perspective: 800px;\n          width: 100%;\n        }\n        \n        .naked-eye-3d-text {\n          display: inline-block;\n          animation: float 3s ease-in-out infinite;\n          text-shadow: 0 0 5px rgba(255,255,255,0.3);\n          padding: 0 4px;\n          color: white;\n          filter: drop-shadow(0 0 5px rgba(120, 220, 255, 0.6));\n        }\n        \n        @keyframes float {\n          0% { transform: translateZ(0px); }\n          50% { transform: translateZ(20px); }\n          100% { transform: translateZ(0px); }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 添加舒适3D样式\n  const addComfortable3DStyles = () => {\n    if (!document.getElementById('comfortable-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'comfortable-3d-style';\n      style.textContent = `\n        .emboss-3d-text {\n          color: #fff;\n          text-shadow: \n            1px 1px 1px rgba(0,0,0,0.5),\n            -1px -1px 1px rgba(255,255,255,0.5);\n          letter-spacing: 1.5px;\n          font-weight: 500;\n        }\n        \n        .float-3d-text {\n          display: inline-block;\n          transform-style: preserve-3d;\n          transform: perspective(500px) translateZ(10px);\n          text-shadow: 0 2px 5px rgba(0,0,0,0.5);\n        }\n        \n        .gradient-3d-text {\n          display: inline-block;\n          background: linear-gradient(to bottom, #fff, #aaa);\n          -webkit-background-clip: text;\n          -webkit-text-fill-color: transparent;\n          text-shadow: 0 2px 4px rgba(0,0,0,0.3);\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 添加闪读样式\n  const addFlashReadingStyles = () => {\n    if (!document.getElementById('flash-reading-style')) {\n      const style = document.createElement('style');\n      style.id = 'flash-reading-style';\n      style.textContent = `\n        .flash-reading-container {\n          position: relative;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          z-index: 1000;\n          padding: 20px;\n        }\n        \n        .flash-reading-display-wrapper {\n          position: relative;\n          margin: 40px 0;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        \n        .flash-reading-display {\n          font-size: 36px;\n          font-weight: bold;\n          text-align: center;\n          color: white;\n          min-height: 80px;\n          max-width: 90%;\n          padding: 20px 40px;\n          position: relative; /* 允许绝对定位的覆盖层 */\n          z-index: 2;\n        }\n        \n        .flash-reading-cover {\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(128, 128, 128, 0.6); /* 灰色遮罩 */\n          border-radius: 8px;\n          z-index: 1; /* 确保在文本后面 */\n        }\n        \n        .flash-reading-controls {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          gap: 20px;\n          margin-bottom: 20px;\n          width: 100%;\n        }\n        \n        .flash-reading-buttons {\n          display: flex;\n          gap: 10px;\n          flex-wrap: wrap;\n          justify-content: center;\n        }\n        \n        .flash-reading-speed {\n          display: flex;\n          align-items: center;\n          color: white;\n          width: 80%;\n          max-width: 400px;\n          gap: 10px;\n        }\n        \n        .flash-reading-slider {\n          flex: 1;\n          height: 8px;\n          appearance: none;\n          background: #555;\n          border-radius: 4px;\n          outline: none;\n        }\n        \n        .flash-reading-slider::-webkit-slider-thumb {\n          appearance: none;\n          width: 20px;\n          height: 20px;\n          border-radius: 50%;\n          background: #6c5ce7;\n          cursor: pointer;\n        }\n        \n        .flash-reading-btn {\n          padding: 10px 20px;\n          border: none;\n          border-radius: 4px;\n          background-color: #6c5ce7;\n          color: white;\n          font-size: 16px;\n          cursor: pointer;\n          transition: background-color 0.2s;\n        }\n        \n        .flash-reading-btn:hover {\n          background-color: #5344c0;\n        }\n        \n        .flash-reading-btn:disabled {\n          background-color: #aaa;\n          cursor: not-allowed;\n        }\n        \n        .flash-reading-progress {\n          color: white;\n          font-size: 14px;\n          margin-top: 10px;\n        }\n        .flash-reading-speed-note {\n          font-size: 12px;\n          color: #ccc;\n          margin-left: 5px;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 初始化闪读模式\n  const initializeFlashReading = () => {\n    // 添加样式\n    addFlashReadingStyles();\n    const sentences = window.flashReadingSentences;\n    if (!sentences || !Array.isArray(sentences) || sentences.length === 0) {\n      console.error('闪读模式: 未找到句子数据');\n      return;\n    }\n\n    // 获取全局UI元素\n    const display = document.getElementById('flash-reading-display');\n    const speedSlider = document.getElementById('flash-reading-speed');\n    const speedValue = document.getElementById('flash-reading-speed-value');\n    const playButton = document.getElementById('flash-reading-play');\n    const pauseButton = document.getElementById('flash-reading-pause');\n    const stopButton = document.getElementById('flash-reading-stop');\n    const prevButton = document.getElementById('flash-reading-prev-sentence');\n    const nextButton = document.getElementById('flash-reading-next-sentence');\n    const progress = document.getElementById('flash-reading-progress');\n    const cover = document.querySelector('.flash-reading-cover');\n    if (!display || !speedSlider || !speedValue || !playButton || !pauseButton || !stopButton || !prevButton || !nextButton || !progress || !cover) {\n      console.error('闪读模式: 未找到UI元素');\n      return;\n    }\n\n    // 创建闪读控制器\n    window.flashReader = {\n      sentences: sentences,\n      currentIndex: 0,\n      interval: null,\n      speed: parseInt(speedSlider.value),\n      isPlaying: false,\n      // 开始闪读\n      start() {\n        if (this.interval) {\n          clearInterval(this.interval);\n        }\n        this.isPlaying = true;\n        playButton.disabled = true;\n        pauseButton.disabled = false;\n        progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n\n        // 显示当前句子\n        this.displayCurrentSentence();\n\n        // 设置闪读间隔\n        this.interval = setInterval(() => {\n          this.currentIndex++;\n          if (this.currentIndex >= this.sentences.length) {\n            this.stop();\n            display.textContent = '阅读完成';\n            return;\n          }\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }, this.speed);\n      },\n      // 显示当前句子\n      displayCurrentSentence() {\n        if (this.currentIndex < this.sentences.length) {\n          const currentSentence = this.sentences[this.currentIndex];\n          display.textContent = currentSentence;\n          display.style.color = 'white'; // 确保文本为白色\n\n          // 调整背景以适应内容\n          setTimeout(() => {\n            const displayRect = display.getBoundingClientRect();\n            // 确保覆盖层完全包裹文本\n            cover.style.width = `${displayRect.width}px`;\n            cover.style.height = `${displayRect.height}px`;\n          }, 10);\n        }\n      },\n      // 暂停闪读\n      pause() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n      },\n      // 停止闪读\n      stop() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        this.currentIndex = 0;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n        display.textContent = '准备开始';\n        progress.textContent = `进度：0 / ${this.sentences.length}`; // 重置进度\n      },\n      // 更新速度\n      updateSpeed(newSpeed) {\n        this.speed = newSpeed;\n        speedValue.textContent = `${newSpeed} ms`;\n\n        // 保存速度设置到本地存储\n        localStorage.setItem('flash-reading-speed', newSpeed);\n\n        // 如果正在播放，重新开始以应用新速度\n        if (this.isPlaying) {\n          clearInterval(this.interval);\n          this.start(); // 直接调用start方法重新开始\n        }\n      },\n      // 返回上一句\n      prevSentence() {\n        if (this.currentIndex > 0) {\n          this.currentIndex--;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n      // 跳到下一句\n      nextSentence() {\n        if (this.currentIndex < this.sentences.length - 1) {\n          this.currentIndex++;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n      // 清理资源\n      cleanup() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        this.currentIndex = 0;\n      }\n    };\n\n    // 添加事件监听器\n    playButton.addEventListener('click', () => {\n      window.flashReader.start();\n    });\n    pauseButton.addEventListener('click', () => {\n      window.flashReader.pause();\n    });\n    stopButton.addEventListener('click', () => {\n      window.flashReader.stop();\n    });\n    speedSlider.addEventListener('input', e => {\n      const newSpeed = parseInt(e.target.value);\n      window.flashReader.updateSpeed(newSpeed);\n    });\n    prevButton.addEventListener('click', () => {\n      window.flashReader.prevSentence();\n    });\n    nextButton.addEventListener('click', () => {\n      window.flashReader.nextSentence();\n    });\n\n    // 初始化\n    const savedSpeed = localStorage.getItem('flash-reading-speed');\n    const initialSpeed = savedSpeed ? parseInt(savedSpeed) : 1000;\n    speedSlider.value = initialSpeed;\n    window.flashReader.updateSpeed(initialSpeed);\n    console.log('闪读模式已初始化，共 ' + sentences.length + ' 个句子');\n  };\n\n  // 创建闪读内容\n  const createFlashReadingContent = text => {\n    return `<div class=\"flash-reading-content\">\n      <p>${text}</p>\n    </div>`;\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 格式化文本用于鼠标跟随\n  const formatTextForMouseFollow = text => {\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个单词添加span，以便于添加高亮效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"follow-word\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\" data-follow=\"true\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用静态高亮\n  const applyStaticHighlight = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为单词随机添加颜色高亮\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      let lastColor = null;\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n          return;\n        }\n\n        // 随机决定是否高亮和使用哪种颜色\n        if (Math.random() < 0.7) {\n          let color;\n          if (lastColor === 'red') {\n            color = 'blue';\n          } else if (lastColor === 'blue') {\n            color = 'red';\n          } else {\n            color = Math.random() < 0.5 ? 'red' : 'blue';\n          }\n          lastColor = color;\n          processedParagraph += `<span class=\"highlight-word ${color}\">${word}</span>`;\n        } else {\n          processedParagraph += word;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用裸眼3D效果\n  const applyNakedEye3dEffect = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content naked-eye-3d-container\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个词添加3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"naked-eye-3d-text\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用舒适3D效果\n  const applyComfortable3dEffect = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个词随机应用不同的3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          processedParagraph += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 初始化裸眼3D\n  const initializeNakedEye3D = () => {\n    // 为裸眼3D文本添加动画\n    const textElements = document.querySelectorAll('.naked-eye-3d-text');\n    textElements.forEach((element, index) => {\n      // 添加随机延迟，使动画错开\n      const delay = Math.random() * 2;\n      element.style.animationDelay = `${delay}s`;\n    });\n  };\n\n  // 初始化节奏阅读\n  const initializeRhythmReading = () => {\n    if (window.rhythmReader && typeof window.rhythmReader.initializeTextNodes === 'function') {\n      window.rhythmReader.initializeTextNodes();\n    }\n  };\n\n  // 启动节奏阅读\n  const startRhythmReading = () => {\n    if (window.rhythmReader && typeof window.rhythmReader.start === 'function') {\n      window.rhythmReader.start();\n    }\n  };\n\n  // 添加鼠标跟随监听器\n  const addMouseFollowListeners = () => {\n    // 获取内容容器\n    const contentArea = document.querySelector('.mouse-follow-content');\n    if (!contentArea) {\n      console.error('未找到鼠标跟随内容区域');\n      return;\n    }\n\n    // 上一个高亮的行\n    let lastHighlightedLine = null;\n\n    // 监听鼠标移动 - 精确的行检测\n    const mouseMoveHandler = e => {\n      // 获取鼠标位置\n      const mouseY = e.clientY;\n\n      // 获取所有行\n      const allLines = contentArea.querySelectorAll('.follow-line');\n      let foundLine = null;\n      let minDistance = Infinity;\n\n      // 寻找鼠标所在的精确行\n      allLines.forEach(line => {\n        const rect = line.getBoundingClientRect();\n        const lineCenter = rect.top + rect.height / 2;\n        const distance = Math.abs(mouseY - lineCenter);\n\n        // 如果鼠标在行范围内，计算到行中心的距离\n        if (mouseY >= rect.top && mouseY <= rect.bottom) {\n          if (distance < minDistance) {\n            minDistance = distance;\n            foundLine = line;\n          }\n        }\n      });\n\n      // 更新高亮状态\n      if (lastHighlightedLine && lastHighlightedLine !== foundLine) {\n        // 移除旧高亮\n        lastHighlightedLine.classList.remove('highlighted');\n      }\n      if (foundLine) {\n        // 添加新高亮\n        foundLine.classList.add('highlighted');\n        lastHighlightedLine = foundLine;\n\n        // 调试输出\n        console.log('当前高亮行:', foundLine.textContent.substring(0, 30) + '...');\n      } else if (lastHighlightedLine) {\n        // 如果没有找到新行，且有上一个高亮行，移除它\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n\n    // 鼠标离开处理\n    const mouseLeaveHandler = () => {\n      // 清除当前高亮\n      if (lastHighlightedLine) {\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n\n    // 存储处理函数引用\n    window.eventTracker = window.eventTracker || {\n      mouseFollowHandlers: []\n    };\n    window.eventTracker.mouseFollowHandlers.push({\n      element: contentArea,\n      event: 'mousemove',\n      handler: mouseMoveHandler\n    }, {\n      element: contentArea,\n      event: 'mouseleave',\n      handler: mouseLeaveHandler\n    });\n\n    // 添加事件监听器\n    contentArea.addEventListener('mousemove', mouseMoveHandler);\n    contentArea.addEventListener('mouseleave', mouseLeaveHandler);\n    console.log('改进的鼠标跟随监听器已初始化');\n  };\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n  }, []);\n\n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async file => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n\n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n\n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n\n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({\n        scale: 1.0\n      });\n\n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async textContent => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n\n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n\n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n\n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    const lines = [...lineMap.values()];\n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    return hasTocKeywords || hasPageNumberPatterns || shortLineRatio > 0.7 && numberLineRatio > 0.3;\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n\n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n\n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n\n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n\n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = text => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    return result;\n  };\n\n  // 处理内容页面 - 按句子划分段落\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n\n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 按句子划分内容（句号、问号、感叹号等作为分隔符）\n      const sentences = splitIntoSentences(extractedText);\n\n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch (mode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          // 使用ADHD友好的静态高亮处理\n          console.log('应用ADHD友好的静态高亮模式');\n          processedContent = formatSimpleHighlightedText(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'rhythm':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          processedContent = createFlashReadingContentFromSentences(sentences);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n      setContent(processedContent);\n\n      // 如果是静态高亮模式，添加延时验证检查\n      if (mode === 'static') {\n        setTimeout(() => {\n          const contentArea = document.querySelector('.adhd-highlight-mode');\n          if (contentArea) {\n            console.log('静态高亮模式元素存在');\n            const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n            console.log(`找到 ${paragraphs.length} 个段落`);\n\n            // 检查样式是否正确应用\n            if (paragraphs.length > 0) {\n              const firstPara = paragraphs[0];\n              const styles = window.getComputedStyle(firstPara);\n              console.log('段落应用的样式:', {\n                color: styles.color,\n                backgroundColor: styles.backgroundColor,\n                fontFamily: styles.fontFamily,\n                fontSize: styles.fontSize\n              });\n            }\n          }\n        }, 200);\n      }\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 将文本分割成句子\n  const splitIntoSentences = text => {\n    // 匹配句号、问号、感叹号后跟空格或结束的模式\n    // 支持中英文标点符号\n    const sentenceRegex = /([.!?。！？；;]+\\s*)/g;\n\n    // 分割文本成句子\n    const sentences = [];\n    let lastIndex = 0;\n    let match;\n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const sentence = text.substring(lastIndex, endIndex).trim();\n\n      // 避免添加空句子\n      if (sentence) {\n        sentences.push(sentence);\n      }\n      lastIndex = endIndex;\n    }\n\n    // 处理最后一部分（如果没有以句号等结尾）\n    if (lastIndex < text.length) {\n      const lastSentence = text.substring(lastIndex).trim();\n      if (lastSentence) {\n        sentences.push(lastSentence);\n      }\n    }\n    return sentences;\n  };\n\n  // 专门为闪读模式分割文本，以任意标点符号为分隔点\n  const splitIntoFlashReadingSegments = text => {\n    // 匹配任意标点符号包括中英文标点\n    const sentenceRegex = /([,.!?:;，。！？：；、]+\\s*)/g;\n\n    // 分割文本成短句\n    const segments = [];\n    let lastIndex = 0;\n    let match;\n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const segment = text.substring(lastIndex, endIndex).trim();\n\n      // 避免添加空段落\n      if (segment) {\n        segments.push(segment);\n      }\n      lastIndex = endIndex;\n    }\n\n    // 处理最后一部分（如果没有以标点符号结尾）\n    if (lastIndex < text.length) {\n      const lastSegment = text.substring(lastIndex).trim();\n      if (lastSegment) {\n        segments.push(lastSegment);\n      }\n    }\n    return segments;\n  };\n\n  // 格式化句子为HTML\n  const formatSentencesToHtml = sentences => {\n    let html = '<div class=\"pdf-content\">';\n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${sentence}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为句子应用静态高亮\n  const applyStaticHighlightToSentences = sentences => {\n    let html = '<div class=\"pdf-content adhd-content\">';\n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n\n      // 简单地为句子添加特定样式的class\n      html += `<p class=\"pdf-paragraph adhd-sentence\">${sentence}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为鼠标跟随模式格式化句子\n  const formatSentencesForMouseFollow = sentences => {\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    sentences.forEach((sentence, index) => {\n      if (sentence.trim() === '') return;\n\n      // 每个句子作为独立行，使用div而不是p标签\n      html += `<div class=\"follow-line\" data-line=\"${index}\" data-sentence=\"${sentence.substring(0, 20)}...\" style=\"color: inherit;\">${sentence}</div>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为舒适3D模式格式化句子\n  const applyComfortable3dEffectToSentences = sentences => {\n    let html = '<div class=\"pdf-content\">';\n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n\n      // 为每个词随机应用不同的3D效果\n      const words = sentence.split(/(\\s+)/);\n      let processedSentence = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedSentence += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          processedSentence += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedSentence}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为闪读模式创建内容\n  const createFlashReadingContentFromSentences = sentences => {\n    // 储存句子到全局变量，用于后续显示\n    window.flashReadingSentences = sentences;\n\n    // 返回闪读界面的HTML结构\n    return `\n      <div class=\"flash-reading-container\">\n        <div class=\"flash-reading-controls\">\n          <div class=\"flash-reading-buttons\">\n            <button id=\"flash-reading-prev-sentence\" class=\"flash-reading-btn\">上一句</button>\n            <button id=\"flash-reading-play\" class=\"flash-reading-btn\">开始</button>\n            <button id=\"flash-reading-pause\" class=\"flash-reading-btn\" disabled>暂停</button>\n            <button id=\"flash-reading-stop\" class=\"flash-reading-btn\">停止</button>\n            <button id=\"flash-reading-next-sentence\" class=\"flash-reading-btn\">下一句</button>\n          </div>\n          <div class=\"flash-reading-speed\">\n            <span>速度：</span>\n            <input type=\"range\" id=\"flash-reading-speed\" min=\"300\" max=\"1700\" step=\"50\" value=\"1000\" class=\"flash-reading-slider\">\n            <span id=\"flash-reading-speed-value\">1000 ms</span>\n            <span class=\"flash-reading-speed-note\">（数值越小，切换越快）</span>\n          </div>\n          <div class=\"flash-reading-progress\">\n            <span id=\"flash-reading-progress\">进度：0 / ${sentences.length}</span>\n          </div>\n        </div>\n        <div class=\"flash-reading-display-wrapper\">\n          <div class=\"flash-reading-cover\"></div> <!-- 这里是闪卡 -->\n          <div id=\"flash-reading-display\" class=\"flash-reading-display\">准备开始</div>\n        </div>\n      </div>`;\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async file => {\n    try {\n      const text = await file.text();\n\n      // 根据阅读模式选择不同的处理方式\n      let processedContent = '';\n      if (readingMode === 'flash-reading') {\n        // 闪读模式下使用特定的分割函数\n        const segments = splitIntoFlashReadingSegments(text);\n        processedContent = createFlashReadingContentFromSentences(segments);\n\n        // 初始化闪读模式\n        setTimeout(() => {\n          initializeFlashReading();\n        }, 100);\n      } else {\n        // 其他模式使用默认的分割方式\n        const sentences = splitIntoSentences(text);\n        switch (readingMode) {\n          case 'normal':\n            processedContent = formatSentencesToHtml(sentences);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlightToSentences(sentences);\n            break;\n          case 'follow-mouse':\n            processedContent = formatSentencesForMouseFollow(sentences);\n            break;\n          case 'comfortable-3d':\n            processedContent = applyComfortable3dEffectToSentences(sentences);\n            break;\n          default:\n            processedContent = formatSentencesToHtml(sentences);\n        }\n      }\n\n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n\n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setContent('<div class=\"error-message\">TXT文件处理失败</div>');\n    }\n  };\n\n  // 处理Markdown文件\n  const handleMarkdownFile = async file => {\n    try {\n      const text = await file.text();\n\n      // 使用marked库转换markdown为HTML\n      let html = '';\n      try {\n        if (window.marked) {\n          html = window.marked.parse(text);\n        } else {\n          // 如果没有marked库，简单地拆分为段落\n          html = `<div>${text.split(\"\\n\\n\").map(p => `<p>${p}</p>`).join(\"\")}</div>`;\n        }\n      } catch (parseError) {\n        console.error('Markdown解析错误:', parseError);\n        html = `<div>${text}</div>`;\n      }\n\n      // 提取纯文本内容\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = html;\n      const plainText = tempDiv.textContent || tempDiv.innerText || '';\n\n      // 分割文本为句子\n      const sentences = splitIntoSentences(plainText);\n\n      // 根据当前阅读模式处理内容\n      let processedContent = '';\n      switch (readingMode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlightToSentences(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          // 使用特定的闪读分割函数重新处理文本\n          const segments = splitIntoFlashReadingSegments(plainText);\n          processedContent = createFlashReadingContentFromSentences(segments);\n\n          // 初始化闪读模式\n          setTimeout(() => {\n            initializeFlashReading();\n          }, 100);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n\n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n\n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('Markdown处理错误:', error);\n      setContent('<div class=\"error-message\">Markdown文件处理失败</div>');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async e => {\n    const uploadedFile = e.target.files[0];\n    if (!uploadedFile) return;\n    setLoading(true);\n    setFileName(uploadedFile.name);\n    try {\n      if (uploadedFile.type === 'application/pdf') {\n        await handlePdfFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/plain' || uploadedFile.name.endsWith('.txt')) {\n        await handleTxtFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/markdown' || uploadedFile.name.endsWith('.md')) {\n        await handleMarkdownFile(uploadedFile);\n      } else {\n        setContent('<div class=\"error-message\">不支持的文件格式</div>');\n      }\n    } catch (error) {\n      console.error('处理文件时出错:', error);\n      setContent('<div class=\"error-message\">处理文件时出错</div>');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = container => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n\n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n\n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n\n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width / 2,\n            // 水平中心\n            y: rect.bottom,\n            // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n\n    // 过滤无效位置并排序\n    return positions.filter(p => p.char.trim() !== '').sort((a, b) => {\n      // 先按行排序，同行按列排序\n      const yDiff = a.y - b.y;\n      if (Math.abs(yDiff) > 5) {\n        // 5px阈值判断是否同一行\n        return yDiff;\n      }\n      return a.x - b.x;\n    });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n\n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - containerVisibleHeight / 2;\n\n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - window.innerHeight / 2;\n\n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n\n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n\n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length ||\n      // 已到末尾\n      positions[nextIndex].char.trim() === '' ||\n      // 下一个是空白\n      positions[nextIndex].y > charPosition.y + 5) {\n        // 下一个在新行\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n\n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n\n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || current.y > prev.y + 5) {\n        // 有明显换行\n        break;\n      }\n      start--;\n    }\n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n\n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n\n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (window.autoReader.charPositions.length === 0) {\n      if (window.currentPage < window.totalPages) {\n        window.changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 重置索引到开头\n    window.autoReader.currentIndex = 0;\n\n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n\n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n\n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none';\n      highlight.style.zIndex = '998';\n      contentContainer.appendChild(highlight);\n    }\n\n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n\n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20;\n\n    // 尝试获取实际行高\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(window.autoReader.charPositions[i].y - window.autoReader.charPositions[i - 1].y);\n        if (yDiff > 5) {\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n\n    // 记录上次滚动的位置\n    let lastScrolledY = -1;\n    const scrollSafeZone = lineHeight * 2.5;\n\n    // 设置字符大小的估计值\n    let charWidth = 20;\n    let charHeight = lineHeight * 0.8;\n\n    // 尝试估计字符宽度\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        if (window.autoReader.charPositions[i].x !== window.autoReader.charPositions[i - 1].x) {\n          const xDiff = Math.abs(window.autoReader.charPositions[i].x - window.autoReader.charPositions[i - 1].x);\n          if (xDiff > 0 && xDiff < 50) {\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    window.autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (window.autoReader.currentIndex < window.autoReader.charPositions.length && ((_window$autoReader$ch = window.autoReader.charPositions[window.autoReader.currentIndex]) === null || _window$autoReader$ch === void 0 ? void 0 : _window$autoReader$ch.char.trim()) === '') {\n        var _window$autoReader$ch;\n        window.autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (window.autoReader.currentIndex >= window.autoReader.charPositions.length) {\n        if (window.currentPage < window.totalPages) {\n          window.changePage(1);\n          clearInterval(window.autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n      const pos = window.autoReader.charPositions[window.autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      if (cursor && highlight) {\n        const contentRect = contentContainer.getBoundingClientRect();\n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        highlight.style.left = `${relativeX - charWidth / 2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n\n        // 滚动处理\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          if (isContainerScrollable) {\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = relativeY;\n            }\n          } else {\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      window.autoReader.currentIndex++;\n    }, window.autoReader.speed);\n\n    // 在停止自动阅读时清除所有高亮\n    window.autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n\n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n\n      // 调用清理函数\n      if (window.autoReader.cleanup) {\n        window.autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n\n    // 重置翻页状态\n    window.autoReader.isPageChanging = false;\n\n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n\n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n\n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n\n    // 收集字符位置\n    window.autoReader.charPositions = getAllCharacterPositions(content);\n\n    // 如果当前页没有内容，尝试翻页\n    if (window.autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !window.autoReader.isPageChanging) {\n        window.autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async e => {\n    const newMode = e.target.value;\n    const prevMode = readingMode;\n    console.log(`切换阅读模式: 从 ${prevMode} 到 ${newMode}`);\n\n    // 更新状态\n    setReadingMode(newMode);\n\n    // 如果有PDF文档和当前页，重新处理当前页内容\n    if (pdfDocument && currentPage > 0) {\n      try {\n        console.log('重新处理当前页面内容');\n        const page = await pdfDocument.getPage(currentPage);\n\n        // 不使用任何额外处理，直接使用最原始的方式重新加载页面\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n\n        // 根据当前模式设置内容\n        if (newMode === 'static') {\n          // 静态高亮模式 - 使用改进的句子处理\n          const html = formatSimpleHighlightedText(sentences);\n          console.log('设置静态高亮内容');\n          setContent(html);\n\n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n            if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n\n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n\n                // 验证文字颜色\n                if (styles.color === 'rgb(51, 51, 51)' || styles.color === '#333333') {\n                  console.log('文字颜色正确应用');\n                } else {\n                  console.warn('文字颜色可能未正确应用:', styles.color);\n                }\n              }\n            } else {\n              console.error('未找到静态高亮模式内容区域');\n            }\n          }, 200);\n        } else if (newMode === 'flash-reading') {\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n\n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n\n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n        } else {\n          // 其他模式保持不变\n          const handler = getContentHandlerForMode(newMode);\n          const processedContent = handler(sentences);\n          setContent(processedContent);\n        }\n      } catch (error) {\n        console.error('应用阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 首先确保移除鼠标跟随监听器\n    removeMouseFollowListeners();\n\n    // 清理节奏阅读器\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n\n    // 清理闪读器\n    if (window.flashReader) {\n      window.flashReader.cleanup();\n    }\n\n    // 清理舒适3D效果\n    const comfortable3DElements = document.querySelectorAll('.emboss-3d-text, .float-3d-text, .gradient-3d-text');\n    comfortable3DElements.forEach(el => el.remove());\n\n    // 清理闪读模式元素\n    const flashReadingElements = document.querySelectorAll('.flash-reading-container, .flash-reading-display, .flash-reading-controls');\n    flashReadingElements.forEach(el => el.remove());\n\n    // 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll('.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line, .rhythm-char');\n    highlights.forEach(el => {\n      if (el.parentNode) el.parentNode.removeChild(el);\n    });\n\n    // 彻底替换内容区域以移除所有事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      var _contentArea$querySel;\n      // 先保存底部翻页控件\n      const bottomPagination = contentArea.querySelector('.bottom-pagination');\n\n      // 深度克隆内容，但不克隆事件监听器\n      const contentHTML = ((_contentArea$querySel = contentArea.querySelector('div[dangerouslySetInnerHTML]')) === null || _contentArea$querySel === void 0 ? void 0 : _contentArea$querySel.innerHTML) || '';\n      const newContentArea = contentArea.cloneNode(false);\n\n      // 创建新的内容容器\n      const newContentContainer = document.createElement('div');\n      newContentContainer.innerHTML = contentHTML;\n      newContentArea.appendChild(newContentContainer);\n\n      // 如果有底部翻页控件，重新添加\n      if (bottomPagination && totalPages > 0) {\n        const newBottomPagination = bottomPagination.cloneNode(true);\n        // 重新绑定事件\n        const prevBtn = newBottomPagination.querySelector('.page-btn:first-child');\n        const nextBtn = newBottomPagination.querySelector('.page-btn:last-child');\n        if (prevBtn) prevBtn.onclick = () => changePage(-1);\n        if (nextBtn) nextBtn.onclick = () => changePage(1);\n        newContentArea.appendChild(newBottomPagination);\n      }\n      if (contentArea.parentNode) {\n        contentArea.parentNode.replaceChild(newContentArea, contentArea);\n      }\n    }\n\n    // 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 移除所有特殊标记和样式\n      paragraph.removeAttribute('data-follow');\n      paragraph.removeAttribute('style');\n\n      // 清理特殊span标签\n      paragraph.innerHTML = paragraph.innerHTML.replace(/<span class=\"text-line\"[^>]*>/g, '').replace(/<span class=\"rhythm-char\"[^>]*>/g, '').replace(/<span class=\"line-highlight[^\"]*\"[^>]*>/g, '').replace(/<span class=\"mouse-highlight[^\"]*\"[^>]*>/g, '').replace(/<\\/span>/g, '');\n    });\n\n    // 移除特殊UI元素\n    const elementsToRemove = ['rhythm-speed-slider', 'rhythm-notification'];\n    elementsToRemove.forEach(id => {\n      const element = document.getElementById(id);\n      if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    });\n\n    // 移除暗色背景\n    document.body.classList.remove('dark-background');\n\n    // 清理闪读模式\n    if (window.flashReader && typeof window.flashReader.cleanup === 'function') {\n      window.flashReader.cleanup();\n    }\n  };\n  const handleAutoScroll = () => {\n    window.autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = e => {\n    if (readingMode !== 'follow-mouse') return;\n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    const rect = contentArea.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    clearAllHighlights();\n    const paragraphs = contentArea.querySelectorAll('p');\n    paragraphs.forEach(paragraph => {\n      const paragraphRect = paragraph.getBoundingClientRect();\n      const paragraphX = paragraphRect.left - rect.left;\n      const paragraphY = paragraphRect.top - rect.top;\n      if (y >= paragraphY && y <= paragraphY + paragraphRect.height) {\n        const words = paragraph.querySelectorAll('span');\n        words.forEach(word => {\n          const wordRect = word.getBoundingClientRect();\n          const wordX = wordRect.left - rect.left;\n          if (x >= wordX && x <= wordX + wordRect.width) {\n            word.classList.add('highlight');\n          }\n        });\n      }\n    });\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 专门用于移除鼠标跟随事件的函数\n  const removeMouseFollowListeners = () => {\n    // 移除记录的所有监听器\n    if (window.eventTracker && window.eventTracker.mouseFollowHandlers) {\n      window.eventTracker.mouseFollowHandlers.forEach(({\n        element,\n        event,\n        handler\n      }) => {\n        if (element && element.removeEventListener) {\n          element.removeEventListener(event, handler);\n        }\n      });\n      window.eventTracker.mouseFollowHandlers = [];\n    }\n\n    // 为安全起见，尝试从document和内容区域移除通用处理函数\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    }\n    document.removeEventListener('mousemove', handleMouseMove);\n\n    // 清除所有当前高亮\n    clearAllHighlights();\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n\n    // 添加底部翻页控件样式\n    const bottomPaginationStyles = document.createElement('style');\n    bottomPaginationStyles.id = 'bottom-pagination-styles';\n    bottomPaginationStyles.innerHTML = `\n      .bottom-pagination {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        padding: 20px 0 30px;\n        margin-top: 30px;\n        width: 100%;\n        background-color: transparent;\n        border-radius: 5px;\n      }\n\n      .bottom-pagination .page-btn {\n        background-color: #6c5ce7;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        padding: 8px 15px;\n        margin: 0 10px;\n        cursor: pointer;\n        font-size: 14px;\n        transition: background-color 0.2s ease;\n      }\n\n      .bottom-pagination .page-btn:hover {\n        background-color: #4834d4;\n      }\n\n      .bottom-pagination .page-btn:disabled {\n        background-color: #aaa;\n        cursor: not-allowed;\n      }\n\n      .bottom-pagination .page-info {\n        font-size: 14px;\n        margin: 0 10px;\n      }\n    `;\n    document.head.appendChild(bottomPaginationStyles);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n    addComfortable3DStyles();\n\n    // 添加鼠标跟随模式的样式\n    const mouseFollowStyle = document.createElement('style');\n    mouseFollowStyle.id = 'intelligent-mouse-follow-style';\n    mouseFollowStyle.textContent = `\n      /* 基础样式 */\n      .mouse-follow-content {\n        position: relative;\n        line-height: 1.8;\n      }\n      \n      .mouse-follow-content .follow-line {\n        position: relative;\n        padding: 8px 16px;\n        margin: 4px 0;\n        border-radius: 6px;\n        transition: all 0.2s ease;\n        display: block;\n        min-height: 1.8em;\n        white-space: normal;\n        word-wrap: break-word;\n        text-indent: 2em;\n      }\n      \n      /* 高亮状态 */\n      .follow-line.highlighted {\n        background-color: #ffa500 !important; /* 橙色背景 */\n        color: #ffffff !important; /* 白色文字 */\n        font-weight: bold !important;\n        font-size: 1.1em; /* 稍微调小字号 */\n        transform: translateX(5px);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n      }\n      \n      \n      /* 平滑过渡效果 */\n      .follow-line {\n        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n      }\n      \n      /* 行间距优化 */\n      .mouse-follow-content .follow-line + .follow-line {\n        margin-top: 4px;\n      }\n      \n      /* 添加行指示器 */\n      .follow-line::before {\n        content: '';\n        position: absolute;\n        left: 0;\n        top: 0;\n        bottom: 0;\n        width: 3px;\n        background: linear-gradient(to bottom, transparent, rgba(255, 255, 255, 0.5), transparent);\n        opacity: 0;\n        transition: opacity 0.2s ease;\n      }\n      \n      .follow-line.highlighted::before {\n        opacity: 1;\n      }\n    `;\n    document.head.appendChild(mouseFollowStyle);\n\n    // 创建深色背景下的ADHD友好高亮样式\n    const style = document.createElement('style');\n    style.id = 'adhd-friendly-highlight-style';\n    style.textContent = `\n      /* ADHD友好的高亮样式 - 适配深色背景 */\n      .adhd-highlight-mode {\n        line-height: 1.8;\n        padding: 20px;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph {\n        margin-bottom: 1.2em;\n        background-color: transparent;\n        padding: 12px 15px;\n        border-radius: 6px;\n        border-left: 3px solid rgba(255, 255, 255, 0.2);\n        transition: all 0.3s ease;\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover {\n        transform: translateX(5px);\n        border-left-color: rgba(255, 255, 255, 0.4);\n      }\n      \n      /* 加粗样式 - 白色加粗 */\n      .adhd-bold {\n        font-weight: 700;\n        color: #ffffff;\n        letter-spacing: 0.02em;\n        font-size: 1.1em;\n        text-shadow: 0 0 1px rgba(255, 255, 255, 0.2);\n      }\n      \n      /* 彩色样式 - 使用鲜明的蓝色 */\n      .adhd-colored {\n        color: #6c5ce7;\n        font-weight: 500;\n        font-size: 1.05em;\n        text-shadow: 0 0 1px rgba(108, 92, 231, 0.2);\n      }\n      \n      /* 正常样式 - 普通白色 */\n      .adhd-normal {\n        color: rgba(255, 255, 255, 0.8);\n        font-size: 1em;\n      }\n\n      /* 添加平滑过渡效果 */\n      .adhd-bold, .adhd-colored, .adhd-normal {\n        transition: all 0.2s ease;\n      }\n\n      /* 悬停效果 */\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-bold {\n        color: #ffffff;\n        text-shadow: 0 0 2px rgba(255, 255, 255, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-colored {\n        color: #8a7ff7;\n        text-shadow: 0 0 2px rgba(138, 127, 247, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-normal {\n        color: rgba(255, 255, 255, 0.9);\n      }\n\n      /* 添加段落间距的视觉引导 */\n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph {\n        margin-top: 1.5em;\n        position: relative;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph::before {\n        content: '';\n        position: absolute;\n        top: -0.75em;\n        left: 0;\n        right: 0;\n        height: 1px;\n        background: linear-gradient(\n          to right,\n          transparent,\n          rgba(255, 255, 255, 0.1),\n          transparent\n        );\n      }\n    `;\n    document.head.appendChild(style);\n\n    // 添加基础鼠标跟随样式\n    const mouseFollowPageStyle = document.createElement('style');\n    mouseFollowPageStyle.id = 'basic-mouse-follow-style';\n    mouseFollowPageStyle.textContent = `\n      .follow-line {\n        padding: 8px 12px;\n        margin: 4px 0;\n        border-radius: 4px;\n        transition: background-color 0.2s ease;\n      }\n      .follow-line.highlighted {\n        background-color: #ffa500;\n        color: #000080;\n        font-weight: bold;\n      }\n    `;\n    document.head.appendChild(mouseFollowPageStyle);\n    return () => {\n      const existingStyle = document.getElementById('adhd-friendly-highlight-style');\n      if (existingStyle) existingStyle.remove();\n      const existingMouseFollowStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (existingMouseFollowStyle) existingMouseFollowStyle.remove();\n      const existingBasicMouseFollowStyle = document.getElementById('basic-mouse-follow-style');\n      if (existingBasicMouseFollowStyle) existingBasicMouseFollowStyle.remove();\n      mouseFollowPageStyle.remove();\n    };\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 清理旧监听器\n    removeMouseFollowListeners();\n\n    // 添加新监听器\n    setTimeout(() => {\n      addMouseFollowListeners();\n\n      // 添加调试辅助 - 显示行边界\n      const contentArea = document.querySelector('.mouse-follow-content');\n      if (contentArea) {\n        const lines = contentArea.querySelectorAll('.follow-line');\n        console.log(`初始化鼠标跟随模式，共 ${lines.length} 行`);\n\n        // 可选：启用可视化调试\n        if (false) {\n          // 设置为true可以启用可视化调试\n          lines.forEach((line, index) => {\n            line.style.border = '1px dashed #888';\n            line.setAttribute('title', `行 ${index + 1}`);\n          });\n        }\n\n        // 验证行高亮效果\n        const firstLine = lines[0];\n        if (firstLine) {\n          console.log('行样式验证:', {\n            padding: window.getComputedStyle(firstLine).padding,\n            margin: window.getComputedStyle(firstLine).margin,\n            fontSize: window.getComputedStyle(firstLine).fontSize,\n            lineHeight: window.getComputedStyle(firstLine).lineHeight\n          });\n        }\n      }\n    }, 100);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = delta => {\n    window.autoReader.speed = Math.max(100, window.autoReader.speed + delta);\n    if (window.autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async delta => {\n    console.log(`翻页请求: 当前页 ${currentPage}, 增量 ${delta}`);\n    const newPage = currentPage + delta;\n    if (newPage < 1 || newPage > totalPages) {\n      console.log('无效页码，不执行翻页');\n      return;\n    }\n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n    const wasFlashReading = readingMode === 'flash-reading' && window.flashReader && window.flashReader.isPlaying;\n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    if (wasFlashReading && window.flashReader) {\n      window.flashReader.cleanup();\n    }\n\n    // 更新页码\n    setCurrentPage(newPage);\n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n\n      // 检查是否为目录页\n      const textContent = await page.getTextContent();\n      const isToc = await detectIfTocPage(textContent);\n      setIsTableOfContents(isToc);\n      if (isToc) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, page.getViewport({\n          scale: 1.0\n        }));\n      } else {\n        // 处理正文页面 - 根据当前阅读模式处理\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n\n        // 根据当前模式设置内容\n        if (readingMode === 'static') {\n          console.log('翻页后应用静态高亮模式');\n          const processedContent = formatSimpleHighlightedText(sentences);\n          setContent(processedContent);\n\n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n            if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n\n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n              }\n            }\n          }, 200);\n        } else if (readingMode === 'flash-reading') {\n          // 如果是闪读模式，则需要特殊处理\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n\n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n\n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n          return; // 已处理，直接返回\n        } else {\n          // 其他模式使用原处理函数\n          await processContentPage(page, readingMode);\n        }\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n    } catch (error) {\n      console.error('页面切换错误:', error);\n    }\n  };\n\n  // ADHD友好的静态高亮处理函数\n  const formatSimpleHighlightedText = sentences => {\n    console.log('开始处理ADHD友好的静态高亮文本，句子数量:', sentences.length);\n    let html = '<div class=\"pdf-content adhd-highlight-mode\">';\n    sentences.forEach((sentence, sentenceIndex) => {\n      if (!sentence || sentence.trim() === '') {\n        console.log(`跳过空句子，索引: ${sentenceIndex}`);\n        return;\n      }\n\n      // 清理和规范化文本\n      const cleanText = sentence.trim().replace(/\\s+/g, ' ') // 规范化空白字符\n      .replace(/&/g, '&amp;') // 转义特殊字符\n      .replace(/</g, '&lt;').replace(/>/g, '&gt;');\n\n      // 处理句子中的单词，为它们添加不同样式\n      const words = cleanText.split(/(\\s+)/);\n      let formattedSentence = '';\n      words.forEach((word, wordIndex) => {\n        if (word.trim() === '') {\n          // 保留空格\n          formattedSentence += word;\n        } else {\n          // 根据位置应用不同的样式类\n          // 三种交替样式: 加粗、彩色、正常\n          const styleClass = wordIndex % 3 === 0 ? 'adhd-bold' : wordIndex % 3 === 1 ? 'adhd-colored' : 'adhd-normal';\n          formattedSentence += `<span class=\"${styleClass}\">${word}</span>`;\n        }\n      });\n      console.log(`处理句子 ${sentenceIndex + 1}:`, cleanText.substring(0, 50) + '...');\n      html += `<p class=\"pdf-paragraph\">${formattedSentence}</p>`;\n    });\n    html += '</div>';\n\n    // 调试输出\n    console.log('生成的ADHD友好静态高亮HTML:', html.substring(0, 200) + '...');\n    return html;\n  };\n\n  // 根据阅读模式获取相应的内容处理函数\n  const getContentHandlerForMode = mode => {\n    switch (mode) {\n      case 'normal':\n        return formatSentencesToHtml;\n      case 'static':\n        return applyStaticHighlightToSentences;\n      case 'follow-mouse':\n        return formatSentencesForMouseFollow;\n      case 'comfortable-3d':\n        return applyComfortable3dEffectToSentences;\n      case 'flash-reading':\n        return sentences => {\n          // 闪读模式使用专门的分割函数重新处理文本\n          return createFlashReadingContentFromSentences(sentences);\n        };\n      default:\n        return formatSentencesToHtml;\n    }\n  };\n\n  // 监听阅读模式和当前页面的变化\n  useEffect(() => {\n    if (readingMode === 'mouse-follow' && currentPage && !isTableOfContents) {\n      // 移除之前的样式\n      const oldStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (oldStyle) {\n        oldStyle.remove();\n      }\n\n      // 添加基础鼠标跟随样式\n      const followModeStyle = document.createElement('style');\n      followModeStyle.id = 'basic-mouse-follow-style';\n      followModeStyle.textContent = `\n        .follow-line {\n          padding: 8px 12px;\n          margin: 4px 0;\n          border-radius: 4px;\n          transition: background-color 0.2s ease;\n        }\n        .follow-line.highlighted {\n          background-color: #ffa500;\n          color: #000080;\n          font-weight: bold;\n        }\n      `;\n      document.head.appendChild(followModeStyle);\n\n      // 处理当前页面内容\n      const page = pdfDocument.getPage(currentPage);\n      const textContent = page.getTextContent();\n      const sentences = textContent.items.map(item => item.str).join(' ').split(/[。！？]/).filter(s => s.trim());\n\n      // 应用基础鼠标跟随格式化\n      setContent(formatSentencesForMouseFollow(sentences));\n\n      // 添加鼠标跟随监听器\n      setTimeout(() => {\n        addMouseFollowListeners();\n      }, 100);\n      return () => {\n        followModeStyle.remove();\n      };\n    }\n  }, [readingMode, currentPage, pdfDocument]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3397,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3396,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reading-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u9605\\u8BFB\\u6A21\\u5F0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3401,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"reading-mode-select\",\n          value: readingMode,\n          onChange: handleReadingModeChange,\n          className: \"mode-select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"normal\",\n            children: \"\\u666E\\u901A\\u6A21\\u5F0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3408,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"static\",\n            children: \"\\u9759\\u6001\\u9AD8\\u4EAE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3409,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"follow-mouse\",\n            children: \"\\u9F20\\u6807\\u8DDF\\u968F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3410,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"rhythm\",\n            children: \"\\u8282\\u594F\\u9605\\u8BFB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3411,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"flash-reading\",\n            children: \"\\u95EA\\u8BFB\\u6A21\\u5F0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3412,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 3402,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3400,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".pdf,.txt,.md\",\n          hidden: true,\n          id: \"file-upload\",\n          onChange: handleFileUpload,\n          ref: fileRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3417,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"upload-btn\",\n          onClick: () => fileRef.current.click(),\n          children: \"\\u4E0A\\u4F20\\u6587\\u4EF6 (.pdf/.txt/.md)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3425,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3416,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 3395,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toolbar\",\n        children: fileName && /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"filename\",\n          children: fileName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3436,\n          columnNumber: 24\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3435,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-content\",\n        ref: readerContainerRef,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: content\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3441,\n          columnNumber: 13\n        }, this), totalPages > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bottom-pagination\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => changePage(-1),\n            disabled: currentPage <= 1,\n            className: \"page-btn\",\n            children: \"\\u4E0A\\u4E00\\u9875\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3445,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"page-info\",\n            children: [\"\\u7B2C \", currentPage, \" / \", totalPages, \" \\u9875\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 3452,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => changePage(1),\n            disabled: currentPage >= totalPages,\n            className: \"page-btn\",\n            children: \"\\u4E0B\\u4E00\\u9875\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3455,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 3444,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3440,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 3434,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 3394,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"x5N0itQI0gqtA84jt63lPsdPeRI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","pdfjsLib","pdfjsViewer","marked","pdfjs","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","window","currentPage","totalPages","changePage","eventTracker","mouseFollowHandlers","autoReader","charPositions","intervalId","currentIndex","speed","pageContainer","isScrolling","isPageChanging","cleanup","rhythmReaderGlobal","active","console","log","saveState","sessionStorage","setItem","localStorage","document","cookie","e","error","isActive","getItem","includes","rhythmReader","readIndices","Set","charElements","injectedCode","injectAutoStartScript","script","createElement","id","textContent","head","appendChild","start","stop","interceptPageTurning","initializeTextNodes","clear","addSpeedSlider","updateTextColors","scrollToCurrentChar","setInterval","moveToNextChar","showNotification","updateState","clearInterval","restoreOriginalText","slider","getElementById","remove","message","notification","style","position","top","left","transform","backgroundColor","color","padding","borderRadius","zIndex","fontSize","body","setTimeout","parentNode","removeChild","_pageIntercepted","_originalChangePage","delta","dataset","autoResumeRhythm","findAndInterceptButtons","buttons","querySelectorAll","count","forEach","button","rhythmIntercepted","text","trim","toLowerCase","originalClick","onclick","event","call","buttonObserver","MutationObserver","mutations","mutation","type","addedNodes","length","observe","childList","subtree","addEventListener","key","contentObserver","contentChanges","filter","m","contentContainer","querySelector","textNodes","findTextNodes","node","nodeValue","fragment","createDocumentFragment","i","char","span","className","rhythmIndex","whitespace","display","margin","border","push","replaceChild","element","childNodes","nodeType","Node","TEXT_NODE","ELEMENT_NODE","index","fontWeight","has","background","add","clickNextPageButton","nextPageSelectors","nextPageButton","selector","elements","el","offsetParent","click","rect","getBoundingClientRect","lineHeight","parseInt","getComputedStyle","Math","max","height","isContainerScrollable","scrollHeight","clientHeight","overflowY","containerRect","relativeTop","scrollTop","visibleTop","visibleBottom","scrollBy","behavior","viewportTop","scrollY","viewportBottom","innerHeight","absoluteTop","container","right","boxShadow","alignItems","maxWidth","label","marginRight","input","min","step","value","width","valueDisplay","marginLeft","minWidth","self","newSpeed","charSpans","parentNodeMap","Map","parent","set","get","spans","sort","a","b","indexA","indexB","groups","currentGroup","prevIndex","previousSibling","group","map","join","textNode","createTextNode","handleReadingModeChange","originalReadingModeChanged","newMode","checkAndRestore","readyState","delay","App","_s","pages","setPages","setCurrentPage","setTotalPages","fileName","setFileName","loading","setLoading","fileRef","file","setFile","pdfInstance","setPdfInstance","extractedTextPages","setExtractedTextPages","readingMode","setReadingMode","posMode","setPosMode","markdownContent","setMarkdownContent","readerContainerRef","content","setContent","pdfDocument","setPdfDocument","isTableOfContents","setIsTableOfContents","applyDarkBackground","classList","restoreDarkBackground","addNakedEye3DStyles","addComfortable3DStyles","addFlashReadingStyles","initializeFlashReading","sentences","flashReadingSentences","Array","isArray","speedSlider","speedValue","playButton","pauseButton","stopButton","prevButton","nextButton","progress","cover","flashReader","interval","isPlaying","disabled","displayCurrentSentence","currentSentence","displayRect","pause","updateSpeed","prevSentence","nextSentence","target","savedSpeed","initialSpeed","createFlashReadingContent","formatTextToHtml","paragraphs","split","html","paragraph","formatTextForMouseFollow","words","processedParagraph","word","applyStaticHighlight","lastColor","random","applyNakedEye3dEffect","applyComfortable3dEffect","effectTypes","effectClass","floor","initializeNakedEye3D","textElements","animationDelay","initializeRhythmReading","startRhythmReading","addMouseFollowListeners","contentArea","lastHighlightedLine","mouseMoveHandler","mouseY","clientY","allLines","foundLine","minDistance","Infinity","line","lineCenter","distance","abs","bottom","substring","mouseLeaveHandler","handler","initializeMouseFollow","handlePdfFile","fileURL","URL","createObjectURL","loadingTask","getDocument","pdf","promise","numPages","extractAndProcessPage","alert","pageNum","page","getPage","getTextContent","viewport","getViewport","scale","detectIfTocPage","processTocPage","processContentPage","textItems","items","fullText","item","str","hasTocKeywords","test","hasPageNumberPatterns","shortLinesCount","linesWithNumbersCount","lineMap","yKey","round","lines","values","lineText","shortLineRatio","numberLineRatio","htmlContent","x","y","sqrt","fontName","spacedText","getTextNodeAtPosition","nodes","range","createRange","selectNodeContents","rects","getClientRects","j","found","processTextWithHighlight","result","mode","extractedText","replace","splitIntoSentences","processedContent","formatSentencesToHtml","formatSimpleHighlightedText","formatSentencesForMouseFollow","applyComfortable3dEffectToSentences","createFlashReadingContentFromSentences","firstPara","styles","fontFamily","sentenceRegex","lastIndex","match","exec","endIndex","sentence","lastSentence","splitIntoFlashReadingSegments","segments","segment","lastSegment","applyStaticHighlightToSentences","processedSentence","handleTxtFile","name","handleMarkdownFile","parse","p","parseError","tempDiv","innerHTML","plainText","innerText","handleFileUpload","uploadedFile","files","endsWith","getAllCharacterPositions","walker","createTreeWalker","NodeFilter","SHOW_TEXT","positions","nextNode","currentNode","setStart","setEnd","warn","yDiff","scrollElementToCenter","elementY","targetScrollTop","containerVisibleHeight","scrollTo","absoluteElementY","createReaderCursor","cursor","cssText","isSentenceEnd","charPosition","sentenceEndMarks","nextIndex","findSentenceStart","prev","current","isInVisibleArea","threshold","topThreshold","bottomThreshold","startAutoReader","highlight","pointerEvents","lastScrolledY","scrollSafeZone","charWidth","charHeight","xDiff","_window$autoReader$ch","stopAutoReader","pos","contentRect","relativeX","relativeY","isInRecentlyScrolledArea","needsScroll","scrollAmount","absoluteY","initializeAutoReader","prevMode","getContentHandlerForMode","cleanupDOM","removeMouseFollowListeners","comfortable3DElements","flashReadingElements","highlights","_contentArea$querySel","bottomPagination","contentHTML","newContentArea","cloneNode","newContentContainer","newBottomPagination","prevBtn","nextBtn","removeAttribute","elementsToRemove","handleAutoScroll","updateCursorPosition","force","handleMouseMove","clientX","clearAllHighlights","paragraphRect","paragraphX","paragraphY","wordRect","wordX","removeEventListener","addAutoReaderStyles","bottomPaginationStyles","mouseFollowStyle","mouseFollowPageStyle","existingStyle","existingMouseFollowStyle","existingBasicMouseFollowStyle","setAttribute","firstLine","adjustSpeed","newPage","wasRhythmReading","wasFlashReading","isToc","sentenceIndex","cleanText","formattedSentence","wordIndex","styleClass","oldStyle","followModeStyle","s","children","_jsxFileName","lineNumber","columnNumber","onChange","accept","hidden","ref","onClick","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["D:/adhd-read-helper/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 添加全局事件跟踪对象\nwindow.eventTracker = window.eventTracker || {\n  mouseFollowHandlers: []\n};\n\n// 自动阅读器全局对象\nwindow.autoReader = {\n  charPositions: [],\n  intervalId: null,\n  currentIndex: 0,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false,\n  cleanup: null\n};\n\n// 添加新的节奏阅读模式代码\n// 全局变量，确保在页面切换后仍然保持状态\nwindow.rhythmReaderGlobal = window.rhythmReaderGlobal || {\n  active: false,\n  speed: 300\n};\n\n// 超可靠的节奏阅读模式 - 重点解决手动翻页问题\n(function() {\n  console.log(\"初始化超可靠版节奏阅读模式...\");\n  \n  // ===== 状态控制 - 使用三种方式保存状态以确保可靠性 =====\n  function saveState(active) {\n    try {\n      // 使用三种不同的存储方式来确保状态不丢失\n      sessionStorage.setItem('rhythmReading', active ? 'true' : 'false');\n      localStorage.setItem('rhythmReading', active ? 'true' : 'false');\n      document.cookie = `rhythmReading=${active ? 'true' : 'false'}; path=/; max-age=3600`;\n      console.log(`节奏阅读模式状态已保存: ${active}`);\n    } catch(e) {\n      console.error(\"保存状态失败\", e);\n    }\n  }\n  \n  function isActive() {\n    try {\n      // 按优先级检查三种存储\n      if (sessionStorage.getItem('rhythmReading') === 'true') return true;\n      if (localStorage.getItem('rhythmReading') === 'true') return true;\n      if (document.cookie.includes('rhythmReading=true')) return true;\n      return false;\n    } catch(e) {\n      console.error(\"读取状态失败\", e);\n      return false;\n    }\n  }\n  \n  // ===== 核心功能对象 =====\n  const rhythmReader = {\n    intervalId: null,\n    speed: 300,\n    currentIndex: 0,\n    readIndices: new Set(),\n    charElements: [],\n    injectedCode: false,\n    \n    // 在页面上注入一个持久化脚本以便在页面加载时自动恢复\n    injectAutoStartScript: function() {\n      if (this.injectedCode) return;\n      \n      try {\n        const script = document.createElement('script');\n        script.id = 'rhythm-autostart-script';\n        script.textContent = `\n          console.log(\"节奏阅读自动启动脚本已加载\");\n          (function() {\n            function checkAndStart() {\n              try {\n                const isActive = (\n                  sessionStorage.getItem('rhythmReading') === 'true' || \n                  localStorage.getItem('rhythmReading') === 'true' || \n                  document.cookie.includes('rhythmReading=true')\n                );\n                \n                if (isActive && window.rhythmReader && !window.rhythmReader.intervalId) {\n                  console.log(\"页面加载后自动恢复节奏阅读模式\");\n                  window.rhythmReader.start();\n                }\n              } catch(e) {\n                console.error(\"自动启动检查失败\", e);\n              }\n            }\n            \n            // 多种时机尝试启动\n            // 1. DOMContentLoaded\n            if (document.readyState === 'loading') {\n              document.addEventListener('DOMContentLoaded', checkAndStart);\n            } else {\n              setTimeout(checkAndStart, 100);\n            }\n            \n            // 2. window.load\n            window.addEventListener('load', checkAndStart);\n            \n            // 3. 多次延迟尝试\n            [500, 1000, 1500, 2000].forEach(delay => {\n              setTimeout(checkAndStart, delay);\n            });\n          })();\n        `;\n        \n        document.head.appendChild(script);\n        this.injectedCode = true;\n        console.log(\"注入了自动启动脚本\");\n      } catch(e) {\n        console.error(\"注入自动启动脚本失败\", e);\n      }\n    },\n    \n    // 开始节奏阅读\n    start: function() {\n      console.log(\"开始节奏阅读模式\");\n      \n      // 停止现有的\n      this.stop(false);\n      \n      // 设置状态\n      saveState(true);\n      \n      // 注入自动启动脚本\n      this.injectAutoStartScript();\n      \n      // 拦截所有翻页方法\n      this.interceptPageTurning();\n      \n      // 初始化文本节点\n      if (!this.initializeTextNodes()) {\n        console.error(\"无法初始化文本节点，没有找到可读内容\");\n        return;\n      }\n      \n      // 从头开始\n      this.currentIndex = 0;\n      this.readIndices.clear();\n      \n      // 添加速度控制\n      this.addSpeedSlider();\n      \n      // 更新颜色\n      this.updateTextColors();\n      \n      // 滚动到当前位置\n      this.scrollToCurrentChar();\n      \n      // 开始计时器\n      this.intervalId = setInterval(() => this.moveToNextChar(), this.speed);\n      \n      // 显示通知\n      this.showNotification(\"节奏阅读模式已启动\");\n    },\n    \n    // 停止节奏阅读\n    stop: function(updateState = true) {\n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n      }\n      \n      // 恢复文本\n      this.restoreOriginalText();\n      \n      // 移除控件\n      const slider = document.getElementById('rhythm-speed-slider');\n      if (slider) slider.remove();\n      \n      // 更新状态\n      if (updateState) {\n        saveState(false);\n      }\n    },\n    \n    // 显示通知\n    showNotification: function(message) {\n      let notification = document.getElementById('rhythm-notification');\n      if (notification) notification.remove();\n      \n      notification = document.createElement('div');\n      notification.id = 'rhythm-notification';\n      notification.textContent = message;\n      notification.style.position = 'fixed';\n      notification.style.top = '50%';\n      notification.style.left = '50%';\n      notification.style.transform = 'translate(-50%, -50%)';\n      notification.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';\n      notification.style.color = 'white';\n      notification.style.padding = '15px 25px';\n      notification.style.borderRadius = '5px';\n      notification.style.zIndex = '10001';\n      notification.style.fontSize = '18px';\n      \n      document.body.appendChild(notification);\n      \n      setTimeout(() => {\n        if (notification && notification.parentNode) {\n          notification.parentNode.removeChild(notification);\n        }\n      }, 2000);\n    },\n    \n    // 拦截所有可能的翻页方法\n    interceptPageTurning: function() {\n      // 已经拦截过，不重复操作\n      if (window._pageIntercepted) return;\n      window._pageIntercepted = true;\n      \n      // 1. 拦截changePage函数\n      if (typeof window.changePage === 'function' && !window._originalChangePage) {\n        window._originalChangePage = window.changePage;\n        \n        window.changePage = (delta) => {\n          console.log(`拦截到changePage调用(${delta})，当前状态: ${isActive()}`);\n          \n          // 如果当前处于节奏阅读模式\n          if (isActive()) {\n            // 保存状态，重要!\n            saveState(true);\n            \n            // 停止当前的阅读，但不改变状态标记\n            this.stop(false);\n            \n            // 显示提示\n            this.showNotification(\"正在翻页，将自动继续阅读...\");\n            \n            // 设置自动恢复标记\n            document.body.dataset.autoResumeRhythm = \"true\";\n          }\n          \n          // 调用原始函数\n          window._originalChangePage(delta);\n        };\n        \n        console.log(\"已拦截changePage函数\");\n      }\n      \n      // 2. 找到所有可能的翻页按钮并拦截\n      const findAndInterceptButtons = () => {\n        const buttons = document.querySelectorAll('button, a, [role=\"button\"]');\n        let count = 0;\n        \n        buttons.forEach(button => {\n          // 已经拦截过的跳过\n          if (button.dataset.rhythmIntercepted) return;\n          \n          const text = (button.textContent || '').trim().toLowerCase();\n          if (text.includes('下一页') || text.includes('上一页') || \n              text.includes('next') || text.includes('prev') ||\n              text === '>' || text === '<' || text === '→' || text === '←') {\n            \n            button.dataset.rhythmIntercepted = \"true\";\n            \n            // 创建一个新函数来拦截点击\n            const originalClick = button.onclick;\n            \n            button.onclick = (event) => {\n              console.log(`拦截到翻页按钮点击: ${text}`);\n              \n              // 如果处于节奏阅读模式\n              if (isActive()) {\n                // 保存状态\n                saveState(true);\n                \n                // 停止当前读取但保持状态\n                this.stop(false);\n                \n                // 显示提示\n                this.showNotification(\"正在翻页，将自动继续阅读...\");\n                \n                // 设置自动恢复标记\n                document.body.dataset.autoResumeRhythm = \"true\";\n              }\n              \n              // 执行原始点击\n              if (originalClick) {\n                return originalClick.call(this, event);\n              }\n            };\n            \n            count++;\n            console.log(`已拦截翻页按钮: ${text}`);\n          }\n        });\n        \n        if (count > 0) {\n          console.log(`总共拦截了${count}个翻页按钮`);\n        }\n      };\n      \n      // 立即执行一次\n      findAndInterceptButtons();\n      \n      // 也用MutationObserver监视新增的按钮\n      const buttonObserver = new MutationObserver(mutations => {\n        mutations.forEach(mutation => {\n          if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {\n            findAndInterceptButtons();\n          }\n        });\n      });\n      \n      buttonObserver.observe(document.body, {\n        childList: true,\n        subtree: true\n      });\n      \n      // 3. 拦截键盘事件\n      document.addEventListener('keydown', event => {\n        // 检查是否是翻页相关的按键\n        if (['ArrowLeft', 'ArrowRight', 'PageUp', 'PageDown'].includes(event.key)) {\n          console.log(`拦截到键盘翻页: ${event.key}`);\n          \n          if (isActive()) {\n            // 保存状态\n            saveState(true);\n            \n            // 停止但不重置状态\n            this.stop(false);\n            \n            // 设置自动恢复标记\n            document.body.dataset.autoResumeRhythm = \"true\";\n            \n            // 不阻止默认行为，让翻页正常进行\n          }\n        }\n      });\n      \n      console.log(\"已拦截键盘翻页事件\");\n      \n      // 4. 设置自动监测DOM变化以恢复阅读\n      const contentObserver = new MutationObserver(mutations => {\n        // 只在标记为需要恢复时检查\n        if (document.body.dataset.autoResumeRhythm === \"true\" && isActive()) {\n          const contentChanges = mutations.filter(m => \n            m.type === 'childList' && m.addedNodes.length > 0);\n            \n          if (contentChanges.length > 0) {\n            console.log(\"检测到内容变化，正在恢复节奏阅读...\");\n            \n            // 清除标记\n            document.body.dataset.autoResumeRhythm = \"false\";\n            \n            // 延迟启动，等待页面完全加载\n            setTimeout(() => {\n              if (isActive() && !this.intervalId) {\n                console.log(\"在内容变化后自动恢复节奏阅读\");\n                this.start();\n              }\n            }, 300);\n          }\n        }\n      });\n      \n      contentObserver.observe(document.body, {\n        childList: true,\n        subtree: true\n      });\n      \n      console.log(\"已设置内容变化监测\");\n    },\n    \n    // 初始化文本节点\n    initializeTextNodes: function() {\n    // 重置字符元素数组\n      this.charElements = [];\n    \n    // 获取内容容器\n      const contentContainer = document.querySelector('.page-content') || document.body;\n      \n      // 查找所有文本节点\n    const textNodes = [];\n      this.findTextNodes(contentContainer, textNodes);\n    \n    if (textNodes.length === 0) {\n        console.error(\"未找到文本节点\");\n      return false;\n    }\n    \n      // 处理所有文本节点\n    textNodes.forEach(node => {\n      const text = node.nodeValue;\n      if (!text || text.trim() === '') return;\n      \n        // 创建文档片段\n      const fragment = document.createDocumentFragment();\n      \n      // 为每个字符创建span\n      for (let i = 0; i < text.length; i++) {\n        const char = text[i];\n        const span = document.createElement('span');\n        span.textContent = char;\n        span.className = 'rhythm-char';\n        span.dataset.rhythmIndex = this.charElements.length;\n        \n          // 标记空白字符\n          if (char.trim() === '') {\n          span.dataset.whitespace = 'true';\n        }\n        \n          // 保持原始样式\n        span.style.display = 'inline';\n        span.style.margin = '0';\n        span.style.padding = '0';\n        span.style.border = 'none';\n        span.style.backgroundColor = 'transparent';\n        \n        fragment.appendChild(span);\n          this.charElements.push(span);\n      }\n      \n      // 替换原始节点\n      if (node.parentNode) {\n        node.parentNode.replaceChild(fragment, node);\n      }\n    });\n    \n      console.log(`初始化了 ${this.charElements.length} 个字符`);\n      return this.charElements.length > 0;\n    },\n  \n    // 查找文本节点\n    findTextNodes: function(element, textNodes) {\n      // 处理子节点\n      for (let i = 0; i < element.childNodes.length; i++) {\n      const node = element.childNodes[i];\n      \n        // 如果是文本节点且有内容\n        if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() !== '') {\n        textNodes.push(node);\n      } \n      // 如果是元素节点，递归处理\n      else if (node.nodeType === Node.ELEMENT_NODE) {\n          // 跳过UI元素\n        if (node.id === 'rhythm-speed-slider' || \n              node.id === 'rhythm-notification' ||\n            node.className === 'rhythm-char') {\n          continue;\n        }\n          this.findTextNodes(node, textNodes);\n      }\n    }\n    },\n  \n  // 更新文本颜色\n    updateTextColors: function() {\n    // 更新所有字符的颜色\n      this.charElements.forEach((span, index) => {\n      // 确定颜色\n      let color;\n      let fontWeight = 'inherit';\n      \n        if (index === this.currentIndex) {\n        color = '#00aa00'; // 当前阅读的字 - 绿色\n        fontWeight = 'bold';\n        } else if (index === this.currentIndex + 1 || index === this.currentIndex + 2) {\n          color = '#aaaaaa'; // 接下来两个字 - 淡灰色\n        } else if (this.readIndices.has(index)) {\n        color = '#ffffff'; // 已读字符 - 白色（表示已读）\n      } else {\n        color = 'rgba(160, 160, 160, 0.25)'; // 未读字符 - 非常淡的灰色（可见但不明显）\n      }\n      \n      span.style.color = color;\n      span.style.fontWeight = fontWeight;\n      \n      // 确保没有背景\n      span.style.backgroundColor = 'transparent';\n      span.style.background = 'none';\n    });\n    },\n  \n    // 移动到下一个字符\n    moveToNextChar: function() {\n    // 将当前字符标记为已读\n      this.readIndices.add(this.currentIndex);\n    \n    // 移动到下一个非空白字符\n    do {\n        this.currentIndex++;\n      \n        // 检查是否到达末尾\n        if (this.currentIndex >= this.charElements.length) {\n          console.log(\"已到达页尾，尝试翻页\");\n          \n          // 尝试点击下一页按钮\n          if (!this.clickNextPageButton()) {\n            // 如果没有找到下一页按钮，完全停止阅读\n            this.stop(true);\n          }\n          return;\n      }\n    } while (\n        this.currentIndex < this.charElements.length && \n        this.charElements[this.currentIndex] && \n        this.charElements[this.currentIndex].dataset.whitespace === 'true'\n    );\n    \n    // 更新颜色\n      this.updateTextColors();\n    \n      // 滚动到当前字符\n      this.scrollToCurrentChar();\n    },\n    \n    // 尝试自动翻页\n    clickNextPageButton: function() {\n      console.log(\"尝试查找并点击下一页按钮\");\n      \n      // 尝试多种可能的选择器来找到下一页按钮\n      const nextPageSelectors = [\n        'button.next-page', \n        'button[aria-label=\"下一页\"]',\n        'a.next-page',\n        'a[aria-label=\"下一页\"]',\n        '.next-page',\n        '#next-page',\n        'button.next',\n        'a.next'\n      ];\n      \n      let nextPageButton = null;\n      \n      // 尝试通过选择器找到按钮\n      for (const selector of nextPageSelectors) {\n        try {\n          const elements = document.querySelectorAll(selector);\n          for (const el of elements) {\n            if (el.offsetParent !== null) { // 检查元素是否可见\n              console.log(`找到下一页按钮: ${selector}`);\n              nextPageButton = el;\n              break;\n            }\n          }\n          if (nextPageButton) break;\n        } catch (e) {\n          // 某些选择器可能不被支持，忽略错误\n        }\n      }\n      \n      // 如果没找到，尝试按文本内容查找\n      if (!nextPageButton) {\n        const buttons = document.querySelectorAll('button, a, div[role=\"button\"]');\n        for (const button of buttons) {\n          const text = (button.textContent || '').trim().toLowerCase();\n          if ((text.includes('下一页') || text.includes('next') || text === '>' || text === '→') && \n              button.offsetParent !== null) {\n            console.log(`通过文本内容找到下一页按钮: ${text}`);\n            nextPageButton = button;\n            break;\n          }\n        }\n      }\n      \n      if (nextPageButton) {\n        console.log(\"模拟点击下一页按钮\");\n        \n        // 保存状态\n        saveState(true);\n        \n        // 设置自动恢复标记\n        document.body.dataset.autoResumeRhythm = \"true\";\n        \n        // 恢复原始文本\n        this.restoreOriginalText();\n        \n        // 停止计时器\n        if (this.intervalId) {\n          clearInterval(this.intervalId);\n          this.intervalId = null;\n        }\n        \n        // 显示提示\n        this.showNotification(\"正在翻页，将自动继续阅读...\");\n        \n        // 模拟点击\n        try {\n          nextPageButton.click();\n        } catch(e) {\n          console.error(\"点击下一页按钮失败\", e);\n          return false;\n        }\n        \n        return true;\n      } else if (typeof window._originalChangePage === 'function') {\n        // 尝试使用changePage函数\n        console.log(\"使用changePage函数翻页\");\n        \n        // 保存状态\n        saveState(true);\n        \n        // 设置自动恢复标记\n        document.body.dataset.autoResumeRhythm = \"true\";\n        \n        // 恢复原始文本\n        this.restoreOriginalText();\n        \n        // 停止计时器\n        if (this.intervalId) {\n          clearInterval(this.intervalId);\n          this.intervalId = null;\n        }\n        \n        // 显示提示\n        this.showNotification(\"正在翻页，将自动继续阅读...\");\n        \n        // 使用changePage\n        try {\n          window._originalChangePage(1);\n        } catch(e) {\n          console.error(\"使用changePage函数翻页失败\", e);\n          return false;\n        }\n        \n        return true;\n      } else {\n        console.log(\"未找到任何可用的翻页方式\");\n        return false;\n      }\n    },\n    \n    // 滚动到当前字符\n    scrollToCurrentChar: function() {\n      const span = this.charElements[this.currentIndex];\n    if (!span) return;\n    \n    const rect = span.getBoundingClientRect();\n    const contentContainer = document.querySelector('.page-content');\n    \n    // 估计行高\n    const lineHeight = parseInt(window.getComputedStyle(span).lineHeight) || \n                       Math.max(20, rect.height * 1.5);\n    \n    // 确定滚动容器\n    const isContainerScrollable = contentContainer && \n      contentContainer.scrollHeight > contentContainer.clientHeight &&\n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n    \n    if (isContainerScrollable) {\n      // 容器滚动\n      const containerRect = contentContainer.getBoundingClientRect();\n      const relativeTop = rect.top - containerRect.top + contentContainer.scrollTop;\n      \n      const visibleTop = contentContainer.scrollTop;\n      const visibleBottom = visibleTop + contentContainer.clientHeight;\n      \n      if (relativeTop < visibleTop + lineHeight || relativeTop > visibleBottom - lineHeight) {\n        contentContainer.scrollBy({\n          top: lineHeight * 2 * (relativeTop > visibleBottom - lineHeight ? 1 : -1),\n          behavior: 'smooth'\n        });\n      }\n    } else {\n      // 窗口滚动\n      const viewportTop = window.scrollY;\n      const viewportBottom = viewportTop + window.innerHeight;\n      const absoluteTop = rect.top + window.scrollY;\n      \n      if (absoluteTop < viewportTop + lineHeight || absoluteTop > viewportBottom - lineHeight) {\n        window.scrollBy({\n          top: lineHeight * 2 * (absoluteTop > viewportBottom - lineHeight ? 1 : -1),\n          behavior: 'smooth'\n        });\n      }\n    }\n    },\n    \n    // 添加速度滑块\n    addSpeedSlider: function() {\n      let slider = document.getElementById('rhythm-speed-slider');\n      if (slider) slider.remove();\n      \n      const container = document.createElement('div');\n      container.id = 'rhythm-speed-slider';\n      container.style.position = 'fixed';\n      container.style.top = '70px';\n      container.style.right = '20px';\n      container.style.backgroundColor = 'white';\n      container.style.padding = '10px';\n      container.style.borderRadius = '5px';\n      container.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';\n      container.style.zIndex = '10000';\n      container.style.display = 'flex';\n      container.style.alignItems = 'center';\n      container.style.maxWidth = '300px';\n      \n      const label = document.createElement('label');\n      label.textContent = '速度: ';\n      label.style.marginRight = '8px';\n      container.appendChild(label);\n      \n      const input = document.createElement('input');\n      input.type = 'range';\n      input.min = '50';\n      input.max = '1000';\n      input.step = '50';\n      input.value = this.speed;\n      input.style.width = '120px';\n      \n      const valueDisplay = document.createElement('span');\n      valueDisplay.textContent = `${this.speed}ms`;\n      valueDisplay.style.marginLeft = '8px';\n      valueDisplay.style.minWidth = '60px';\n      \n      const self = this;\n      input.addEventListener('input', function() {\n        const newSpeed = parseInt(this.value);\n        self.speed = newSpeed;\n        valueDisplay.textContent = `${newSpeed}ms`;\n        \n        if (self.intervalId) {\n          clearInterval(self.intervalId);\n          self.intervalId = setInterval(() => self.moveToNextChar(), newSpeed);\n        }\n      });\n      \n      container.appendChild(input);\n      container.appendChild(valueDisplay);\n      document.body.appendChild(container);\n    },\n  \n  // 恢复原始文本\n    restoreOriginalText: function() {\n    // 获取所有已创建的字符span\n    const charSpans = document.querySelectorAll('.rhythm-char');\n      if (charSpans.length === 0) return;\n    \n    // 按父节点分组\n    const parentNodeMap = new Map();\n    \n    charSpans.forEach(span => {\n      const parent = span.parentNode;\n      if (!parent) return;\n      \n      if (!parentNodeMap.has(parent)) {\n        parentNodeMap.set(parent, []);\n      }\n      parentNodeMap.get(parent).push(span);\n    });\n    \n      // 对每个父节点，将连续的字符span合并回文本节点\n      parentNodeMap.forEach((spans, parent) => {\n      if (spans.length === 0) return;\n      \n      // 排序spans确保顺序正确\n      spans.sort((a, b) => {\n        const indexA = parseInt(a.dataset.rhythmIndex || '0');\n        const indexB = parseInt(b.dataset.rhythmIndex || '0');\n        return indexA - indexB;\n      });\n      \n        // 根据连续性分组\n        const groups = [];\n        if (spans.length > 0) {\n      let currentGroup = [spans[0]];\n      \n      for (let i = 1; i < spans.length; i++) {\n        const prevIndex = parseInt(spans[i-1].dataset.rhythmIndex || '0');\n        const currentIndex = parseInt(spans[i].dataset.rhythmIndex || '0');\n        \n        if (currentIndex === prevIndex + 1 && spans[i].previousSibling === spans[i-1]) {\n          currentGroup.push(spans[i]);\n        } else {\n          groups.push(currentGroup);\n          currentGroup = [spans[i]];\n        }\n      }\n      \n      groups.push(currentGroup);\n        }\n      \n        // 对每个连续组替换为文本节点\n        groups.forEach(group => {\n        if (group.length === 0) return;\n        \n        try {\n          const text = group.map(span => span.textContent).join('');\n          const textNode = document.createTextNode(text);\n          \n          // 替换第一个span，然后移除其余的\n          if (group[0].parentNode === parent) {\n            parent.replaceChild(textNode, group[0]);\n            for (let i = 1; i < group.length; i++) {\n              if (group[i].parentNode === parent) {\n                parent.removeChild(group[i]);\n              }\n            }\n          }\n        } catch (e) {\n            console.error(\"恢复文本时出错:\", e);\n        }\n      });\n    });\n    \n    // 清除字符元素数组\n      this.charElements = [];\n    }\n  };\n  \n  // ===== 重写模式选择函数 =====\n  if (typeof window.handleReadingModeChange === 'function') {\n    const originalReadingModeChanged = window.handleReadingModeChange;\n    \n    window.handleReadingModeChange = function(newMode) {\n      console.log(`模式选择: ${newMode}`);\n      \n      // 调用原始函数\n      originalReadingModeChanged(newMode);\n      \n      // 处理节奏阅读模式\n      if (newMode === 'rhythm' || newMode === 'rhythmReading' || \n          (typeof newMode === 'string' && (newMode.includes('rhythm') || newMode.includes('节奏')))) {\n        console.log(\"选择了节奏阅读模式\");\n        rhythmReader.start();\n      } else {\n        if (isActive()) {\n          rhythmReader.stop(true);\n        }\n      }\n    };\n  }\n  \n  // ===== 在页面加载时检查并自动恢复 =====\n  function checkAndRestore() {\n    if (isActive()) {\n      console.log(\"页面加载时检测到节奏阅读模式已激活，准备恢复\");\n      setTimeout(() => rhythmReader.start(), 300);\n    }\n  }\n  \n  // DOMContentLoaded\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', checkAndRestore);\n  } else {\n    setTimeout(checkAndRestore, 0);\n  }\n  \n  // window.load\n  window.addEventListener('load', checkAndRestore);\n  \n  // 多次延迟尝试\n  [500, 1000, 1500].forEach(delay => {\n    setTimeout(() => {\n      if (isActive() && !rhythmReader.intervalId) {\n        console.log(`延迟${delay}ms后尝试恢复节奏阅读`);\n        rhythmReader.start();\n      }\n    }, delay);\n  });\n  \n  // ===== 暴露到全局以便调试 =====\n  window.rhythmReader = rhythmReader;\n  \n  console.log(\"节奏阅读模式初始化完成，当前状态:\", isActive());\n})();\n\nconst App = () => {\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  const [isTableOfContents, setIsTableOfContents] = useState(false);\n  \n  // 实现缺失的函数\n  // 应用深色背景\n  const applyDarkBackground = () => {\n    document.body.classList.add('dark-background');\n    \n    // 添加必要的CSS样式\n    if (!document.getElementById('dark-background-style')) {\n      const style = document.createElement('style');\n      style.id = 'dark-background-style';\n      style.textContent = `\n        .dark-background {\n          background-color: #000 !important;\n        }\n        .dark-background .sidebar {\n          background: linear-gradient(145deg, #4834d4, #341f9e) !important;\n        }\n        .dark-background .page-content {\n          background-color: #000 !important;\n        }\n        .dark-background .main-content {\n          background-color: #000 !important;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 恢复正常背景\n  const restoreDarkBackground = () => {\n    document.body.classList.remove('dark-background');\n  };\n  \n  // 添加裸眼3D样式\n  const addNakedEye3DStyles = () => {\n    if (!document.getElementById('naked-eye-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'naked-eye-3d-style';\n      style.textContent = `\n        .naked-eye-3d-container {\n          position: relative;\n          perspective: 800px;\n          width: 100%;\n        }\n        \n        .naked-eye-3d-text {\n          display: inline-block;\n          animation: float 3s ease-in-out infinite;\n          text-shadow: 0 0 5px rgba(255,255,255,0.3);\n          padding: 0 4px;\n          color: white;\n          filter: drop-shadow(0 0 5px rgba(120, 220, 255, 0.6));\n        }\n        \n        @keyframes float {\n          0% { transform: translateZ(0px); }\n          50% { transform: translateZ(20px); }\n          100% { transform: translateZ(0px); }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 添加舒适3D样式\n  const addComfortable3DStyles = () => {\n    if (!document.getElementById('comfortable-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'comfortable-3d-style';\n      style.textContent = `\n        .emboss-3d-text {\n          color: #fff;\n          text-shadow: \n            1px 1px 1px rgba(0,0,0,0.5),\n            -1px -1px 1px rgba(255,255,255,0.5);\n          letter-spacing: 1.5px;\n          font-weight: 500;\n        }\n        \n        .float-3d-text {\n          display: inline-block;\n          transform-style: preserve-3d;\n          transform: perspective(500px) translateZ(10px);\n          text-shadow: 0 2px 5px rgba(0,0,0,0.5);\n        }\n        \n        .gradient-3d-text {\n          display: inline-block;\n          background: linear-gradient(to bottom, #fff, #aaa);\n          -webkit-background-clip: text;\n          -webkit-text-fill-color: transparent;\n          text-shadow: 0 2px 4px rgba(0,0,0,0.3);\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 添加闪读样式\n  const addFlashReadingStyles = () => {\n    if (!document.getElementById('flash-reading-style')) {\n      const style = document.createElement('style');\n      style.id = 'flash-reading-style';\n      style.textContent = `\n        .flash-reading-container {\n          position: relative;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          z-index: 1000;\n          padding: 20px;\n        }\n        \n        .flash-reading-display-wrapper {\n          position: relative;\n          margin: 40px 0;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        \n        .flash-reading-display {\n          font-size: 36px;\n          font-weight: bold;\n          text-align: center;\n          color: white;\n          min-height: 80px;\n          max-width: 90%;\n          padding: 20px 40px;\n          position: relative; /* 允许绝对定位的覆盖层 */\n          z-index: 2;\n        }\n        \n        .flash-reading-cover {\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(128, 128, 128, 0.6); /* 灰色遮罩 */\n          border-radius: 8px;\n          z-index: 1; /* 确保在文本后面 */\n        }\n        \n        .flash-reading-controls {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          gap: 20px;\n          margin-bottom: 20px;\n          width: 100%;\n        }\n        \n        .flash-reading-buttons {\n          display: flex;\n          gap: 10px;\n          flex-wrap: wrap;\n          justify-content: center;\n        }\n        \n        .flash-reading-speed {\n          display: flex;\n          align-items: center;\n          color: white;\n          width: 80%;\n          max-width: 400px;\n          gap: 10px;\n        }\n        \n        .flash-reading-slider {\n          flex: 1;\n          height: 8px;\n          appearance: none;\n          background: #555;\n          border-radius: 4px;\n          outline: none;\n        }\n        \n        .flash-reading-slider::-webkit-slider-thumb {\n          appearance: none;\n          width: 20px;\n          height: 20px;\n          border-radius: 50%;\n          background: #6c5ce7;\n          cursor: pointer;\n        }\n        \n        .flash-reading-btn {\n          padding: 10px 20px;\n          border: none;\n          border-radius: 4px;\n          background-color: #6c5ce7;\n          color: white;\n          font-size: 16px;\n          cursor: pointer;\n          transition: background-color 0.2s;\n        }\n        \n        .flash-reading-btn:hover {\n          background-color: #5344c0;\n        }\n        \n        .flash-reading-btn:disabled {\n          background-color: #aaa;\n          cursor: not-allowed;\n        }\n        \n        .flash-reading-progress {\n          color: white;\n          font-size: 14px;\n          margin-top: 10px;\n        }\n        .flash-reading-speed-note {\n          font-size: 12px;\n          color: #ccc;\n          margin-left: 5px;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 初始化闪读模式\n  const initializeFlashReading = () => {\n    // 添加样式\n    addFlashReadingStyles();\n    \n    const sentences = window.flashReadingSentences;\n    if (!sentences || !Array.isArray(sentences) || sentences.length === 0) {\n      console.error('闪读模式: 未找到句子数据');\n      return;\n    }\n    \n    // 获取全局UI元素\n    const display = document.getElementById('flash-reading-display');\n    const speedSlider = document.getElementById('flash-reading-speed');\n    const speedValue = document.getElementById('flash-reading-speed-value');\n    const playButton = document.getElementById('flash-reading-play');\n    const pauseButton = document.getElementById('flash-reading-pause');\n    const stopButton = document.getElementById('flash-reading-stop');\n    const prevButton = document.getElementById('flash-reading-prev-sentence');\n    const nextButton = document.getElementById('flash-reading-next-sentence');\n    const progress = document.getElementById('flash-reading-progress');\n    const cover = document.querySelector('.flash-reading-cover');\n    \n    if (!display || !speedSlider || !speedValue || !playButton || !pauseButton || !stopButton || !prevButton || !nextButton || !progress || !cover) {\n      console.error('闪读模式: 未找到UI元素');\n      return;\n    }\n    \n    // 创建闪读控制器\n    window.flashReader = {\n      sentences: sentences,\n      currentIndex: 0,\n      interval: null,\n      speed: parseInt(speedSlider.value),\n      isPlaying: false,\n      \n      // 开始闪读\n      start() {\n        if (this.interval) {\n          clearInterval(this.interval);\n        }\n        \n        this.isPlaying = true;\n        playButton.disabled = true;\n        pauseButton.disabled = false;\n        progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        \n        // 显示当前句子\n        this.displayCurrentSentence();\n        \n        // 设置闪读间隔\n        this.interval = setInterval(() => {\n          this.currentIndex++;\n          \n          if (this.currentIndex >= this.sentences.length) {\n            this.stop();\n            display.textContent = '阅读完成';\n            return;\n          }\n          \n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }, this.speed);\n      },\n      \n      // 显示当前句子\n      displayCurrentSentence() {\n        if (this.currentIndex < this.sentences.length) {\n          const currentSentence = this.sentences[this.currentIndex];\n          display.textContent = currentSentence;\n          display.style.color = 'white'; // 确保文本为白色\n          \n          // 调整背景以适应内容\n          setTimeout(() => {\n            const displayRect = display.getBoundingClientRect();\n            // 确保覆盖层完全包裹文本\n            cover.style.width = `${displayRect.width}px`;\n            cover.style.height = `${displayRect.height}px`;\n          }, 10);\n        }\n      },\n      \n      // 暂停闪读\n      pause() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        \n        this.isPlaying = false;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n      },\n      \n      // 停止闪读\n      stop() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        \n        this.isPlaying = false;\n        this.currentIndex = 0;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n        \n        display.textContent = '准备开始';\n        progress.textContent = `进度：0 / ${this.sentences.length}`; // 重置进度\n      },\n      \n      // 更新速度\n      updateSpeed(newSpeed) {\n        this.speed = newSpeed;\n        speedValue.textContent = `${newSpeed} ms`;\n        \n        // 保存速度设置到本地存储\n        localStorage.setItem('flash-reading-speed', newSpeed);\n        \n        // 如果正在播放，重新开始以应用新速度\n        if (this.isPlaying) {\n          clearInterval(this.interval);\n          this.start(); // 直接调用start方法重新开始\n        }\n      },\n\n      // 返回上一句\n      prevSentence() {\n        if (this.currentIndex > 0) {\n          this.currentIndex--;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n\n      // 跳到下一句\n      nextSentence() {\n        if (this.currentIndex < this.sentences.length - 1) {\n          this.currentIndex++;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n\n      // 清理资源\n      cleanup() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        this.currentIndex = 0;\n      }\n    };\n    \n    // 添加事件监听器\n    playButton.addEventListener('click', () => {\n      window.flashReader.start();\n    });\n    \n    pauseButton.addEventListener('click', () => {\n      window.flashReader.pause();\n    });\n    \n    stopButton.addEventListener('click', () => {\n      window.flashReader.stop();\n    });\n    \n    speedSlider.addEventListener('input', (e) => {\n      const newSpeed = parseInt(e.target.value);\n      window.flashReader.updateSpeed(newSpeed);\n    });\n\n    prevButton.addEventListener('click', () => {\n      window.flashReader.prevSentence();\n    });\n\n    nextButton.addEventListener('click', () => {\n      window.flashReader.nextSentence();\n    });\n    \n    // 初始化\n    const savedSpeed = localStorage.getItem('flash-reading-speed');\n    const initialSpeed = savedSpeed ? parseInt(savedSpeed) : 1000;\n    speedSlider.value = initialSpeed;\n    window.flashReader.updateSpeed(initialSpeed);\n    \n    console.log('闪读模式已初始化，共 ' + sentences.length + ' 个句子');\n  };\n  \n  // 创建闪读内容\n  const createFlashReadingContent = (text) => {\n    return `<div class=\"flash-reading-content\">\n      <p>${text}</p>\n    </div>`;\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 格式化文本用于鼠标跟随\n  const formatTextForMouseFollow = (text) => {\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个单词添加span，以便于添加高亮效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"follow-word\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\" data-follow=\"true\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用静态高亮\n  const applyStaticHighlight = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为单词随机添加颜色高亮\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      let lastColor = null;\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n          return;\n        }\n        \n        // 随机决定是否高亮和使用哪种颜色\n        if (Math.random() < 0.7) {\n          let color;\n          if (lastColor === 'red') {\n            color = 'blue';\n          } else if (lastColor === 'blue') {\n            color = 'red';\n          } else {\n            color = Math.random() < 0.5 ? 'red' : 'blue';\n          }\n          lastColor = color;\n          \n          processedParagraph += `<span class=\"highlight-word ${color}\">${word}</span>`;\n        } else {\n          processedParagraph += word;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用裸眼3D效果\n  const applyNakedEye3dEffect = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content naked-eye-3d-container\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个词添加3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"naked-eye-3d-text\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用舒适3D效果\n  const applyComfortable3dEffect = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个词随机应用不同的3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n  } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          \n          processedParagraph += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 初始化裸眼3D\n  const initializeNakedEye3D = () => {\n    // 为裸眼3D文本添加动画\n    const textElements = document.querySelectorAll('.naked-eye-3d-text');\n    textElements.forEach((element, index) => {\n      // 添加随机延迟，使动画错开\n      const delay = Math.random() * 2;\n      element.style.animationDelay = `${delay}s`;\n    });\n  };\n\n  // 初始化节奏阅读\n  const initializeRhythmReading = () => {\n    if (window.rhythmReader && typeof window.rhythmReader.initializeTextNodes === 'function') {\n      window.rhythmReader.initializeTextNodes();\n    }\n  };\n  \n  // 启动节奏阅读\n  const startRhythmReading = () => {\n    if (window.rhythmReader && typeof window.rhythmReader.start === 'function') {\n      window.rhythmReader.start();\n    }\n  };\n\n  // 添加鼠标跟随监听器\n  const addMouseFollowListeners = () => {\n    // 获取内容容器\n    const contentArea = document.querySelector('.mouse-follow-content');\n    if (!contentArea) {\n      console.error('未找到鼠标跟随内容区域');\n      return;\n    }\n    \n    // 上一个高亮的行\n    let lastHighlightedLine = null;\n    \n    // 监听鼠标移动 - 精确的行检测\n    const mouseMoveHandler = (e) => {\n      // 获取鼠标位置\n      const mouseY = e.clientY;\n      \n      // 获取所有行\n      const allLines = contentArea.querySelectorAll('.follow-line');\n      let foundLine = null;\n      let minDistance = Infinity;\n      \n      // 寻找鼠标所在的精确行\n      allLines.forEach(line => {\n        const rect = line.getBoundingClientRect();\n        const lineCenter = rect.top + rect.height / 2;\n        const distance = Math.abs(mouseY - lineCenter);\n        \n        // 如果鼠标在行范围内，计算到行中心的距离\n        if (mouseY >= rect.top && mouseY <= rect.bottom) {\n          if (distance < minDistance) {\n            minDistance = distance;\n            foundLine = line;\n        }\n      }\n    });\n    \n      // 更新高亮状态\n      if (lastHighlightedLine && lastHighlightedLine !== foundLine) {\n        // 移除旧高亮\n        lastHighlightedLine.classList.remove('highlighted');\n      }\n      \n      if (foundLine) {\n        // 添加新高亮\n        foundLine.classList.add('highlighted');\n        lastHighlightedLine = foundLine;\n        \n        // 调试输出\n        console.log('当前高亮行:', foundLine.textContent.substring(0, 30) + '...');\n      } else if (lastHighlightedLine) {\n        // 如果没有找到新行，且有上一个高亮行，移除它\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n    \n    // 鼠标离开处理\n    const mouseLeaveHandler = () => {\n      // 清除当前高亮\n      if (lastHighlightedLine) {\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n    \n    // 存储处理函数引用\n    window.eventTracker = window.eventTracker || { mouseFollowHandlers: [] };\n    window.eventTracker.mouseFollowHandlers.push(\n      { element: contentArea, event: 'mousemove', handler: mouseMoveHandler },\n      { element: contentArea, event: 'mouseleave', handler: mouseLeaveHandler }\n    );\n    \n    // 添加事件监听器\n    contentArea.addEventListener('mousemove', mouseMoveHandler);\n    contentArea.addEventListener('mouseleave', mouseLeaveHandler);\n    \n    console.log('改进的鼠标跟随监听器已初始化');\n  };\n  \n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n  }, []);\n  \n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async (file) => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      \n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n      \n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n      \n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n  \n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({ scale: 1.0 });\n      \n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      \n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      \n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async (textContent) => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n    \n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n    \n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n    \n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    \n    const lines = [...lineMap.values()];\n    \n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    \n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    \n    return hasTocKeywords || hasPageNumberPatterns || (shortLineRatio > 0.7 && numberLineRatio > 0.3);\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n    \n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    \n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n      \n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n      \n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n      \n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    \n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && \n              x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = (text) => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    \n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      \n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        \n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    \n    return result;\n  };\n\n  // 处理内容页面 - 按句子划分段落\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      \n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n      // 按句子划分内容（句号、问号、感叹号等作为分隔符）\n      const sentences = splitIntoSentences(extractedText);\n      \n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch(mode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          // 使用ADHD友好的静态高亮处理\n          console.log('应用ADHD友好的静态高亮模式');\n          processedContent = formatSimpleHighlightedText(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'rhythm':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          processedContent = createFlashReadingContentFromSentences(sentences);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n      \n      setContent(processedContent);\n      \n      // 如果是静态高亮模式，添加延时验证检查\n      if (mode === 'static') {\n        setTimeout(() => {\n          const contentArea = document.querySelector('.adhd-highlight-mode');\n          if (contentArea) {\n            console.log('静态高亮模式元素存在');\n            const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n            console.log(`找到 ${paragraphs.length} 个段落`);\n            \n            // 检查样式是否正确应用\n            if (paragraphs.length > 0) {\n              const firstPara = paragraphs[0];\n              const styles = window.getComputedStyle(firstPara);\n              console.log('段落应用的样式:', {\n                color: styles.color,\n                backgroundColor: styles.backgroundColor,\n                fontFamily: styles.fontFamily,\n                fontSize: styles.fontSize\n              });\n            }\n          }\n        }, 200);\n      }\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 将文本分割成句子\n  const splitIntoSentences = (text) => {\n    // 匹配句号、问号、感叹号后跟空格或结束的模式\n    // 支持中英文标点符号\n    const sentenceRegex = /([.!?。！？；;]+\\s*)/g;\n    \n    // 分割文本成句子\n    const sentences = [];\n    let lastIndex = 0;\n    let match;\n    \n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const sentence = text.substring(lastIndex, endIndex).trim();\n      \n      // 避免添加空句子\n      if (sentence) {\n        sentences.push(sentence);\n      }\n      \n      lastIndex = endIndex;\n    }\n    \n    // 处理最后一部分（如果没有以句号等结尾）\n    if (lastIndex < text.length) {\n      const lastSentence = text.substring(lastIndex).trim();\n      if (lastSentence) {\n        sentences.push(lastSentence);\n      }\n    }\n    \n    return sentences;\n  };\n\n  // 专门为闪读模式分割文本，以任意标点符号为分隔点\n  const splitIntoFlashReadingSegments = (text) => {\n    // 匹配任意标点符号包括中英文标点\n    const sentenceRegex = /([,.!?:;，。！？：；、]+\\s*)/g;\n    \n    // 分割文本成短句\n    const segments = [];\n    let lastIndex = 0;\n    let match;\n    \n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const segment = text.substring(lastIndex, endIndex).trim();\n      \n      // 避免添加空段落\n      if (segment) {\n        segments.push(segment);\n      }\n      \n      lastIndex = endIndex;\n    }\n    \n    // 处理最后一部分（如果没有以标点符号结尾）\n    if (lastIndex < text.length) {\n      const lastSegment = text.substring(lastIndex).trim();\n      if (lastSegment) {\n        segments.push(lastSegment);\n      }\n    }\n    \n    return segments;\n  };\n\n  // 格式化句子为HTML\n  const formatSentencesToHtml = (sentences) => {\n    let html = '<div class=\"pdf-content\">';\n    \n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${sentence}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为句子应用静态高亮\n  const applyStaticHighlightToSentences = (sentences) => {\n    let html = '<div class=\"pdf-content adhd-content\">';\n    \n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      \n      // 简单地为句子添加特定样式的class\n      html += `<p class=\"pdf-paragraph adhd-sentence\">${sentence}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为鼠标跟随模式格式化句子\n  const formatSentencesForMouseFollow = (sentences) => {\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    sentences.forEach((sentence, index) => {\n      if (sentence.trim() === '') return;\n      \n      // 每个句子作为独立行，使用div而不是p标签\n      html += `<div class=\"follow-line\" data-line=\"${index}\" data-sentence=\"${sentence.substring(0, 20)}...\" style=\"color: inherit;\">${sentence}</div>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为舒适3D模式格式化句子\n  const applyComfortable3dEffectToSentences = (sentences) => {\n    let html = '<div class=\"pdf-content\">';\n    \n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      \n      // 为每个词随机应用不同的3D效果\n      const words = sentence.split(/(\\s+)/);\n      let processedSentence = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedSentence += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          \n          processedSentence += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedSentence}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为闪读模式创建内容\n  const createFlashReadingContentFromSentences = (sentences) => {\n    // 储存句子到全局变量，用于后续显示\n    window.flashReadingSentences = sentences;\n\n    // 返回闪读界面的HTML结构\n    return `\n      <div class=\"flash-reading-container\">\n        <div class=\"flash-reading-controls\">\n          <div class=\"flash-reading-buttons\">\n            <button id=\"flash-reading-prev-sentence\" class=\"flash-reading-btn\">上一句</button>\n            <button id=\"flash-reading-play\" class=\"flash-reading-btn\">开始</button>\n            <button id=\"flash-reading-pause\" class=\"flash-reading-btn\" disabled>暂停</button>\n            <button id=\"flash-reading-stop\" class=\"flash-reading-btn\">停止</button>\n            <button id=\"flash-reading-next-sentence\" class=\"flash-reading-btn\">下一句</button>\n          </div>\n          <div class=\"flash-reading-speed\">\n            <span>速度：</span>\n            <input type=\"range\" id=\"flash-reading-speed\" min=\"300\" max=\"1700\" step=\"50\" value=\"1000\" class=\"flash-reading-slider\">\n            <span id=\"flash-reading-speed-value\">1000 ms</span>\n            <span class=\"flash-reading-speed-note\">（数值越小，切换越快）</span>\n          </div>\n          <div class=\"flash-reading-progress\">\n            <span id=\"flash-reading-progress\">进度：0 / ${sentences.length}</span>\n          </div>\n        </div>\n        <div class=\"flash-reading-display-wrapper\">\n          <div class=\"flash-reading-cover\"></div> <!-- 这里是闪卡 -->\n          <div id=\"flash-reading-display\" class=\"flash-reading-display\">准备开始</div>\n        </div>\n      </div>`;\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async (file) => {\n    try {\n      const text = await file.text();\n      \n      // 根据阅读模式选择不同的处理方式\n      let processedContent = '';\n      \n      if (readingMode === 'flash-reading') {\n        // 闪读模式下使用特定的分割函数\n        const segments = splitIntoFlashReadingSegments(text);\n        processedContent = createFlashReadingContentFromSentences(segments);\n        \n        // 初始化闪读模式\n        setTimeout(() => {\n          initializeFlashReading();\n        }, 100);\n      } else {\n        // 其他模式使用默认的分割方式\n        const sentences = splitIntoSentences(text);\n        \n        switch(readingMode) {\n          case 'normal':\n            processedContent = formatSentencesToHtml(sentences);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlightToSentences(sentences);\n            break;\n          case 'follow-mouse':\n            processedContent = formatSentencesForMouseFollow(sentences);\n            break;\n          case 'comfortable-3d':\n            processedContent = applyComfortable3dEffectToSentences(sentences);\n            break;\n          default:\n            processedContent = formatSentencesToHtml(sentences);\n        }\n      }\n      \n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n      \n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setContent('<div class=\"error-message\">TXT文件处理失败</div>');\n    }\n  };\n\n  // 处理Markdown文件\n  const handleMarkdownFile = async (file) => {\n    try {\n      const text = await file.text();\n      \n      // 使用marked库转换markdown为HTML\n      let html = '';\n      try {\n        if (window.marked) {\n          html = window.marked.parse(text);\n        } else {\n          // 如果没有marked库，简单地拆分为段落\n          html = `<div>${text.split(\"\\n\\n\").map(p => `<p>${p}</p>`).join(\"\")}</div>`;\n        }\n      } catch (parseError) {\n        console.error('Markdown解析错误:', parseError);\n        html = `<div>${text}</div>`;\n      }\n      \n      // 提取纯文本内容\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = html;\n      const plainText = tempDiv.textContent || tempDiv.innerText || '';\n      \n      // 分割文本为句子\n      const sentences = splitIntoSentences(plainText);\n      \n      // 根据当前阅读模式处理内容\n      let processedContent = '';\n      switch(readingMode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlightToSentences(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          // 使用特定的闪读分割函数重新处理文本\n          const segments = splitIntoFlashReadingSegments(plainText);\n          processedContent = createFlashReadingContentFromSentences(segments);\n          \n          // 初始化闪读模式\n          setTimeout(() => {\n            initializeFlashReading();\n          }, 100);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n      \n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n      \n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('Markdown处理错误:', error);\n      setContent('<div class=\"error-message\">Markdown文件处理失败</div>');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async (e) => {\n    const uploadedFile = e.target.files[0];\n    if (!uploadedFile) return;\n    \n    setLoading(true);\n    setFileName(uploadedFile.name);\n    \n    try {\n      if (uploadedFile.type === 'application/pdf') {\n        await handlePdfFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/plain' || uploadedFile.name.endsWith('.txt')) {\n        await handleTxtFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/markdown' || uploadedFile.name.endsWith('.md')) {\n        await handleMarkdownFile(uploadedFile);\n    } else {\n        setContent('<div class=\"error-message\">不支持的文件格式</div>');\n      }\n    } catch (error) {\n      console.error('处理文件时出错:', error);\n      setContent('<div class=\"error-message\">处理文件时出错</div>');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = (container) => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    \n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n      \n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n      \n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          \n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n          \n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width/2,  // 水平中心\n            y: rect.bottom,               // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n    \n    // 过滤无效位置并排序\n    return positions\n      .filter(p => p.char.trim() !== '')\n      .sort((a, b) => {\n        // 先按行排序，同行按列排序\n        const yDiff = a.y - b.y;\n        if (Math.abs(yDiff) > 5) { // 5px阈值判断是否同一行\n          return yDiff;\n        }\n        return a.x - b.x;\n      });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    \n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - (containerVisibleHeight / 2);\n      \n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - (window.innerHeight / 2);\n      \n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    \n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n    \n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    \n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n    \n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length || // 已到末尾\n          positions[nextIndex].char.trim() === '' || // 下一个是空白\n          positions[nextIndex].y > charPosition.y + 5) { // 下一个在新行\n        return true;\n      }\n    }\n    \n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n    \n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n      \n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || \n          current.y > prev.y + 5) { // 有明显换行\n        break;\n      }\n      \n      start--;\n    }\n    \n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n      \n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      \n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n      \n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      \n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (window.autoReader.charPositions.length === 0) {\n      if (window.currentPage < window.totalPages) {\n        window.changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 重置索引到开头\n    window.autoReader.currentIndex = 0;\n    \n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    \n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n    \n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n    \n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none';\n      highlight.style.zIndex = '998';\n      contentContainer.appendChild(highlight);\n    }\n    \n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight &&\n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n    \n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20;\n    \n    // 尝试获取实际行高\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(window.autoReader.charPositions[i].y - window.autoReader.charPositions[i-1].y);\n        if (yDiff > 5) {\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n    \n    // 记录上次滚动的位置\n    let lastScrolledY = -1;\n    const scrollSafeZone = lineHeight * 2.5;\n    \n    // 设置字符大小的估计值\n    let charWidth = 20;\n    let charHeight = lineHeight * 0.8;\n    \n    // 尝试估计字符宽度\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        if (window.autoReader.charPositions[i].x !== window.autoReader.charPositions[i-1].x) {\n          const xDiff = Math.abs(window.autoReader.charPositions[i].x - window.autoReader.charPositions[i-1].x);\n          if (xDiff > 0 && xDiff < 50) {\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    \n    window.autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (window.autoReader.currentIndex < window.autoReader.charPositions.length && \n             window.autoReader.charPositions[window.autoReader.currentIndex]?.char.trim() === '') {\n        window.autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (window.autoReader.currentIndex >= window.autoReader.charPositions.length) {\n        if (window.currentPage < window.totalPages) {\n          window.changePage(1);\n          clearInterval(window.autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n\n      const pos = window.autoReader.charPositions[window.autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      \n      if (cursor && highlight) {\n        const contentRect = contentContainer.getBoundingClientRect();\n        \n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        \n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        \n        highlight.style.left = `${relativeX - charWidth/2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n        \n        // 滚动处理\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        \n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          \n          if (isContainerScrollable) {\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n            \n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            \n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = relativeY;\n            }\n          } else {\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n            \n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            \n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      \n      window.autoReader.currentIndex++;\n      \n    }, window.autoReader.speed);\n    \n    // 在停止自动阅读时清除所有高亮\n    window.autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n      \n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n      \n      // 调用清理函数\n      if (window.autoReader.cleanup) {\n        window.autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n    \n    // 重置翻页状态\n    window.autoReader.isPageChanging = false;\n    \n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n    \n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n    \n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n    \n    // 收集字符位置\n    window.autoReader.charPositions = getAllCharacterPositions(content);\n    \n    // 如果当前页没有内容，尝试翻页\n    if (window.autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !window.autoReader.isPageChanging) {\n        window.autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async (e) => {\n    const newMode = e.target.value;\n    const prevMode = readingMode;\n    \n    console.log(`切换阅读模式: 从 ${prevMode} 到 ${newMode}`);\n    \n    // 更新状态\n    setReadingMode(newMode);\n    \n    // 如果有PDF文档和当前页，重新处理当前页内容\n    if (pdfDocument && currentPage > 0) {\n      try {\n        console.log('重新处理当前页面内容');\n        const page = await pdfDocument.getPage(currentPage);\n        \n        // 不使用任何额外处理，直接使用最原始的方式重新加载页面\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n        \n        // 根据当前模式设置内容\n        if (newMode === 'static') {\n          // 静态高亮模式 - 使用改进的句子处理\n          const html = formatSimpleHighlightedText(sentences);\n          console.log('设置静态高亮内容');\n          setContent(html);\n          \n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n        if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n              \n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n                \n                // 验证文字颜色\n                if (styles.color === 'rgb(51, 51, 51)' || styles.color === '#333333') {\n                  console.log('文字颜色正确应用');\n                } else {\n                  console.warn('文字颜色可能未正确应用:', styles.color);\n                }\n              }\n            } else {\n              console.error('未找到静态高亮模式内容区域');\n            }\n          }, 200);\n        } else if (newMode === 'flash-reading') {\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n            \n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n            \n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n            \n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n        } else {\n          // 其他模式保持不变\n          const handler = getContentHandlerForMode(newMode);\n          const processedContent = handler(sentences);\n          setContent(processedContent);\n        }\n      } catch (error) {\n        console.error('应用阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 首先确保移除鼠标跟随监听器\n    removeMouseFollowListeners();\n    \n    // 清理节奏阅读器\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    \n    // 清理闪读器\n    if (window.flashReader) {\n      window.flashReader.cleanup();\n    }\n    \n    // 清理舒适3D效果\n    const comfortable3DElements = document.querySelectorAll('.emboss-3d-text, .float-3d-text, .gradient-3d-text');\n    comfortable3DElements.forEach(el => el.remove());\n    \n    // 清理闪读模式元素\n    const flashReadingElements = document.querySelectorAll('.flash-reading-container, .flash-reading-display, .flash-reading-controls');\n    flashReadingElements.forEach(el => el.remove());\n    \n    // 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll(\n      '.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line, .rhythm-char'\n    );\n    highlights.forEach(el => {\n      if (el.parentNode) el.parentNode.removeChild(el);\n    });\n    \n    // 彻底替换内容区域以移除所有事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 先保存底部翻页控件\n      const bottomPagination = contentArea.querySelector('.bottom-pagination');\n      \n      // 深度克隆内容，但不克隆事件监听器\n      const contentHTML = contentArea.querySelector('div[dangerouslySetInnerHTML]')?.innerHTML || '';\n      const newContentArea = contentArea.cloneNode(false);\n      \n      // 创建新的内容容器\n      const newContentContainer = document.createElement('div');\n      newContentContainer.innerHTML = contentHTML;\n      newContentArea.appendChild(newContentContainer);\n      \n      // 如果有底部翻页控件，重新添加\n      if (bottomPagination && totalPages > 0) {\n        const newBottomPagination = bottomPagination.cloneNode(true);\n        // 重新绑定事件\n        const prevBtn = newBottomPagination.querySelector('.page-btn:first-child');\n        const nextBtn = newBottomPagination.querySelector('.page-btn:last-child');\n        if (prevBtn) prevBtn.onclick = () => changePage(-1);\n        if (nextBtn) nextBtn.onclick = () => changePage(1);\n        newContentArea.appendChild(newBottomPagination);\n      }\n      \n      if (contentArea.parentNode) {\n        contentArea.parentNode.replaceChild(newContentArea, contentArea);\n      }\n    }\n    \n    // 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 移除所有特殊标记和样式\n      paragraph.removeAttribute('data-follow');\n      paragraph.removeAttribute('style');\n      \n      // 清理特殊span标签\n      paragraph.innerHTML = paragraph.innerHTML\n        .replace(/<span class=\"text-line\"[^>]*>/g, '')\n        .replace(/<span class=\"rhythm-char\"[^>]*>/g, '')\n        .replace(/<span class=\"line-highlight[^\"]*\"[^>]*>/g, '')\n        .replace(/<span class=\"mouse-highlight[^\"]*\"[^>]*>/g, '')\n        .replace(/<\\/span>/g, '');\n    });\n    \n    // 移除特殊UI元素\n    const elementsToRemove = [\n      'rhythm-speed-slider',\n      'rhythm-notification'\n    ];\n    \n    elementsToRemove.forEach(id => {\n      const element = document.getElementById(id);\n      if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    });\n    \n    // 移除暗色背景\n    document.body.classList.remove('dark-background');\n    \n    // 清理闪读模式\n    if (window.flashReader && typeof window.flashReader.cleanup === 'function') {\n      window.flashReader.cleanup();\n    }\n  };\n\n  const handleAutoScroll = () => {\n    window.autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = (e) => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    \n    const rect = contentArea.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    \n    clearAllHighlights();\n    \n    const paragraphs = contentArea.querySelectorAll('p');\n    paragraphs.forEach(paragraph => {\n      const paragraphRect = paragraph.getBoundingClientRect();\n      const paragraphX = paragraphRect.left - rect.left;\n      const paragraphY = paragraphRect.top - rect.top;\n      \n      if (y >= paragraphY && y <= paragraphY + paragraphRect.height) {\n        const words = paragraph.querySelectorAll('span');\n        words.forEach(word => {\n          const wordRect = word.getBoundingClientRect();\n          const wordX = wordRect.left - rect.left;\n          \n          if (x >= wordX && x <= wordX + wordRect.width) {\n            word.classList.add('highlight');\n          }\n        });\n      }\n    });\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 专门用于移除鼠标跟随事件的函数\n  const removeMouseFollowListeners = () => {\n    // 移除记录的所有监听器\n    if (window.eventTracker && window.eventTracker.mouseFollowHandlers) {\n      window.eventTracker.mouseFollowHandlers.forEach(({element, event, handler}) => {\n        if (element && element.removeEventListener) {\n          element.removeEventListener(event, handler);\n        }\n      });\n      window.eventTracker.mouseFollowHandlers = [];\n    }\n    \n    // 为安全起见，尝试从document和内容区域移除通用处理函数\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    }\n    \n    document.removeEventListener('mousemove', handleMouseMove);\n    \n    // 清除所有当前高亮\n    clearAllHighlights();\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n    \n    // 添加底部翻页控件样式\n    const bottomPaginationStyles = document.createElement('style');\n    bottomPaginationStyles.id = 'bottom-pagination-styles';\n    bottomPaginationStyles.innerHTML = `\n      .bottom-pagination {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        padding: 20px 0 30px;\n        margin-top: 30px;\n        width: 100%;\n        background-color: transparent;\n        border-radius: 5px;\n      }\n\n      .bottom-pagination .page-btn {\n        background-color: #6c5ce7;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        padding: 8px 15px;\n        margin: 0 10px;\n        cursor: pointer;\n        font-size: 14px;\n        transition: background-color 0.2s ease;\n      }\n\n      .bottom-pagination .page-btn:hover {\n        background-color: #4834d4;\n      }\n\n      .bottom-pagination .page-btn:disabled {\n        background-color: #aaa;\n        cursor: not-allowed;\n      }\n\n      .bottom-pagination .page-info {\n        font-size: 14px;\n        margin: 0 10px;\n      }\n    `;\n    document.head.appendChild(bottomPaginationStyles);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n    addComfortable3DStyles();\n    \n    // 添加鼠标跟随模式的样式\n    const mouseFollowStyle = document.createElement('style');\n    mouseFollowStyle.id = 'intelligent-mouse-follow-style';\n    mouseFollowStyle.textContent = `\n      /* 基础样式 */\n      .mouse-follow-content {\n        position: relative;\n        line-height: 1.8;\n      }\n      \n      .mouse-follow-content .follow-line {\n        position: relative;\n        padding: 8px 16px;\n        margin: 4px 0;\n        border-radius: 6px;\n        transition: all 0.2s ease;\n        display: block;\n        min-height: 1.8em;\n        white-space: normal;\n        word-wrap: break-word;\n        text-indent: 2em;\n      }\n      \n      /* 高亮状态 */\n      .follow-line.highlighted {\n        background-color: #ffa500 !important; /* 橙色背景 */\n        color: #ffffff !important; /* 白色文字 */\n        font-weight: bold !important;\n        font-size: 1.1em; /* 稍微调小字号 */\n        transform: translateX(5px);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n      }\n      \n      \n      /* 平滑过渡效果 */\n      .follow-line {\n        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n      }\n      \n      /* 行间距优化 */\n      .mouse-follow-content .follow-line + .follow-line {\n        margin-top: 4px;\n      }\n      \n      /* 添加行指示器 */\n      .follow-line::before {\n        content: '';\n        position: absolute;\n        left: 0;\n        top: 0;\n        bottom: 0;\n        width: 3px;\n        background: linear-gradient(to bottom, transparent, rgba(255, 255, 255, 0.5), transparent);\n        opacity: 0;\n        transition: opacity 0.2s ease;\n      }\n      \n      .follow-line.highlighted::before {\n        opacity: 1;\n      }\n    `;\n    document.head.appendChild(mouseFollowStyle);\n    \n    // 创建深色背景下的ADHD友好高亮样式\n    const style = document.createElement('style');\n    style.id = 'adhd-friendly-highlight-style';\n    style.textContent = `\n      /* ADHD友好的高亮样式 - 适配深色背景 */\n      .adhd-highlight-mode {\n        line-height: 1.8;\n        padding: 20px;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph {\n        margin-bottom: 1.2em;\n        background-color: transparent;\n        padding: 12px 15px;\n        border-radius: 6px;\n        border-left: 3px solid rgba(255, 255, 255, 0.2);\n        transition: all 0.3s ease;\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover {\n        transform: translateX(5px);\n        border-left-color: rgba(255, 255, 255, 0.4);\n      }\n      \n      /* 加粗样式 - 白色加粗 */\n      .adhd-bold {\n        font-weight: 700;\n        color: #ffffff;\n        letter-spacing: 0.02em;\n        font-size: 1.1em;\n        text-shadow: 0 0 1px rgba(255, 255, 255, 0.2);\n      }\n      \n      /* 彩色样式 - 使用鲜明的蓝色 */\n      .adhd-colored {\n        color: #6c5ce7;\n        font-weight: 500;\n        font-size: 1.05em;\n        text-shadow: 0 0 1px rgba(108, 92, 231, 0.2);\n      }\n      \n      /* 正常样式 - 普通白色 */\n      .adhd-normal {\n        color: rgba(255, 255, 255, 0.8);\n        font-size: 1em;\n      }\n\n      /* 添加平滑过渡效果 */\n      .adhd-bold, .adhd-colored, .adhd-normal {\n        transition: all 0.2s ease;\n      }\n\n      /* 悬停效果 */\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-bold {\n        color: #ffffff;\n        text-shadow: 0 0 2px rgba(255, 255, 255, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-colored {\n        color: #8a7ff7;\n        text-shadow: 0 0 2px rgba(138, 127, 247, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-normal {\n        color: rgba(255, 255, 255, 0.9);\n      }\n\n      /* 添加段落间距的视觉引导 */\n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph {\n        margin-top: 1.5em;\n        position: relative;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph::before {\n        content: '';\n        position: absolute;\n        top: -0.75em;\n        left: 0;\n        right: 0;\n        height: 1px;\n        background: linear-gradient(\n          to right,\n          transparent,\n          rgba(255, 255, 255, 0.1),\n          transparent\n        );\n      }\n    `;\n    document.head.appendChild(style);\n    \n    // 添加基础鼠标跟随样式\n    const mouseFollowPageStyle = document.createElement('style');\n    mouseFollowPageStyle.id = 'basic-mouse-follow-style';\n    mouseFollowPageStyle.textContent = `\n      .follow-line {\n        padding: 8px 12px;\n        margin: 4px 0;\n        border-radius: 4px;\n        transition: background-color 0.2s ease;\n      }\n      .follow-line.highlighted {\n        background-color: #ffa500;\n        color: #000080;\n        font-weight: bold;\n      }\n    `;\n    document.head.appendChild(mouseFollowPageStyle);\n    \n    return () => {\n      const existingStyle = document.getElementById('adhd-friendly-highlight-style');\n      if (existingStyle) existingStyle.remove();\n      \n      const existingMouseFollowStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (existingMouseFollowStyle) existingMouseFollowStyle.remove();\n      \n      const existingBasicMouseFollowStyle = document.getElementById('basic-mouse-follow-style');\n      if (existingBasicMouseFollowStyle) existingBasicMouseFollowStyle.remove();\n      \n      mouseFollowPageStyle.remove();\n    };\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 清理旧监听器\n    removeMouseFollowListeners();\n    \n    // 添加新监听器\n    setTimeout(() => {\n      addMouseFollowListeners();\n      \n      // 添加调试辅助 - 显示行边界\n      const contentArea = document.querySelector('.mouse-follow-content');\n      if (contentArea) {\n        const lines = contentArea.querySelectorAll('.follow-line');\n        console.log(`初始化鼠标跟随模式，共 ${lines.length} 行`);\n        \n        // 可选：启用可视化调试\n        if (false) { // 设置为true可以启用可视化调试\n          lines.forEach((line, index) => {\n            line.style.border = '1px dashed #888';\n            line.setAttribute('title', `行 ${index+1}`);\n          });\n        }\n        \n        // 验证行高亮效果\n        const firstLine = lines[0];\n        if (firstLine) {\n          console.log('行样式验证:', {\n            padding: window.getComputedStyle(firstLine).padding,\n            margin: window.getComputedStyle(firstLine).margin,\n            fontSize: window.getComputedStyle(firstLine).fontSize,\n            lineHeight: window.getComputedStyle(firstLine).lineHeight\n          });\n        }\n      }\n    }, 100);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = (delta) => {\n    window.autoReader.speed = Math.max(100, window.autoReader.speed + delta);\n    \n    if (window.autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async (delta) => {\n    console.log(`翻页请求: 当前页 ${currentPage}, 增量 ${delta}`);\n    const newPage = currentPage + delta;\n    \n    if (newPage < 1 || newPage > totalPages) {\n      console.log('无效页码，不执行翻页');\n          return;\n        }\n        \n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n    const wasFlashReading = readingMode === 'flash-reading' && window.flashReader && window.flashReader.isPlaying;\n    \n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    \n    if (wasFlashReading && window.flashReader) {\n      window.flashReader.cleanup();\n    }\n    \n    // 更新页码\n    setCurrentPage(newPage);\n    \n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n      \n      // 检查是否为目录页\n      const textContent = await page.getTextContent();\n      const isToc = await detectIfTocPage(textContent);\n      setIsTableOfContents(isToc);\n      \n      if (isToc) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, page.getViewport({ scale: 1.0 }));\n      } else {\n        // 处理正文页面 - 根据当前阅读模式处理\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n        \n        // 根据当前模式设置内容\n        if (readingMode === 'static') {\n          console.log('翻页后应用静态高亮模式');\n          const processedContent = formatSimpleHighlightedText(sentences);\n          setContent(processedContent);\n          \n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n            if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n              \n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n              }\n            }\n          }, 200);\n        } else if (readingMode === 'flash-reading') {\n          // 如果是闪读模式，则需要特殊处理\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n            \n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n            \n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n            \n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n          return; // 已处理，直接返回\n        } else {\n          // 其他模式使用原处理函数\n          await processContentPage(page, readingMode);\n        }\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n    } catch (error) {\n      console.error('页面切换错误:', error);\n    }\n  };\n\n  // ADHD友好的静态高亮处理函数\n  const formatSimpleHighlightedText = (sentences) => {\n    console.log('开始处理ADHD友好的静态高亮文本，句子数量:', sentences.length);\n    \n    let html = '<div class=\"pdf-content adhd-highlight-mode\">';\n    \n    sentences.forEach((sentence, sentenceIndex) => {\n      if (!sentence || sentence.trim() === '') {\n        console.log(`跳过空句子，索引: ${sentenceIndex}`);\n      return;\n    }\n    \n      // 清理和规范化文本\n      const cleanText = sentence\n        .trim()\n        .replace(/\\s+/g, ' ')  // 规范化空白字符\n        .replace(/&/g, '&amp;')  // 转义特殊字符\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n      \n      // 处理句子中的单词，为它们添加不同样式\n      const words = cleanText.split(/(\\s+)/);\n      let formattedSentence = '';\n      \n      words.forEach((word, wordIndex) => {\n        if (word.trim() === '') {\n          // 保留空格\n          formattedSentence += word;\n      } else {\n          // 根据位置应用不同的样式类\n          // 三种交替样式: 加粗、彩色、正常\n          const styleClass = wordIndex % 3 === 0 ? 'adhd-bold' : \n                           wordIndex % 3 === 1 ? 'adhd-colored' : 'adhd-normal';\n          \n          formattedSentence += `<span class=\"${styleClass}\">${word}</span>`;\n        }\n      });\n      \n      console.log(`处理句子 ${sentenceIndex + 1}:`, cleanText.substring(0, 50) + '...');\n      html += `<p class=\"pdf-paragraph\">${formattedSentence}</p>`;\n    });\n    \n    html += '</div>';\n    \n    // 调试输出\n    console.log('生成的ADHD友好静态高亮HTML:', html.substring(0, 200) + '...');\n    \n    return html;\n  };\n\n  // 根据阅读模式获取相应的内容处理函数\n  const getContentHandlerForMode = (mode) => {\n    switch(mode) {\n      case 'normal': return formatSentencesToHtml;\n      case 'static': return applyStaticHighlightToSentences;\n      case 'follow-mouse': return formatSentencesForMouseFollow;\n      case 'comfortable-3d': return applyComfortable3dEffectToSentences;\n      case 'flash-reading': \n        return (sentences) => {\n          // 闪读模式使用专门的分割函数重新处理文本\n          return createFlashReadingContentFromSentences(sentences);\n        };\n      default: return formatSentencesToHtml;\n    }\n  };\n\n  // 监听阅读模式和当前页面的变化\n  useEffect(() => {\n    if (readingMode === 'mouse-follow' && currentPage && !isTableOfContents) {\n      // 移除之前的样式\n      const oldStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (oldStyle) {\n        oldStyle.remove();\n      }\n      \n      // 添加基础鼠标跟随样式\n      const followModeStyle = document.createElement('style');\n      followModeStyle.id = 'basic-mouse-follow-style';\n      followModeStyle.textContent = `\n        .follow-line {\n          padding: 8px 12px;\n          margin: 4px 0;\n          border-radius: 4px;\n          transition: background-color 0.2s ease;\n        }\n        .follow-line.highlighted {\n          background-color: #ffa500;\n          color: #000080;\n          font-weight: bold;\n        }\n      `;\n      document.head.appendChild(followModeStyle);\n      \n      // 处理当前页面内容\n      const page = pdfDocument.getPage(currentPage);\n      const textContent = page.getTextContent();\n      const sentences = textContent.items\n        .map(item => item.str)\n        .join(' ')\n        .split(/[。！？]/)\n        .filter(s => s.trim());\n      \n      // 应用基础鼠标跟随格式化\n      setContent(formatSentencesForMouseFollow(sentences));\n      \n      // 添加鼠标跟随监听器\n      setTimeout(() => {\n        addMouseFollowListeners();\n      }, 100);\n      \n      return () => {\n        followModeStyle.remove();\n      };\n    }\n  }, [readingMode, currentPage, pdfDocument]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        <div className=\"logo\">\n          <h2>ADHD阅读助手</h2>\n        </div>\n        \n        <div className=\"reading-controls\">\n          <h3>阅读模式</h3>\n          <select \n            id=\"reading-mode-select\" \n            value={readingMode} \n            onChange={handleReadingModeChange}\n            className=\"mode-select\"\n          >\n            <option value=\"normal\">普通模式</option>\n            <option value=\"static\">静态高亮</option>\n            <option value=\"follow-mouse\">鼠标跟随</option>\n            <option value=\"rhythm\">节奏阅读</option>\n            <option value=\"flash-reading\">闪读模式</option>\n          </select>\n        </div>\n        \n        <div className=\"upload-section\">\n          <input\n            type=\"file\"\n            accept=\".pdf,.txt,.md\" \n            hidden\n            id=\"file-upload\"\n            onChange={handleFileUpload}\n            ref={fileRef}\n          />\n          <button \n            className=\"upload-btn\"\n            onClick={() => fileRef.current.click()}\n          >\n            上传文件 (.pdf/.txt/.md)\n          </button>\n      </div>\n            </div>\n      \n      <div className=\"main-content\">\n        <div className=\"toolbar\">\n          {fileName && <h3 className=\"filename\">{fileName}</h3>}\n          {/* 移除了原有翻页控件 */}\n            </div>\n        \n        <div className=\"page-content\" ref={readerContainerRef}>\n            <div dangerouslySetInnerHTML={{ __html: content }} />\n          \n          {totalPages > 0 && (\n            <div className=\"bottom-pagination\">\n              <button \n                onClick={() => changePage(-1)} \n                disabled={currentPage <= 1}\n                className=\"page-btn\"\n              >\n                上一页\n              </button>\n            <span className=\"page-info\">\n                第 {currentPage} / {totalPages} 页\n              </span>\n              <button \n                onClick={() => changePage(1)} \n                disabled={currentPage >= totalPages}\n                className=\"page-btn\"\n              >\n                下一页\n              </button>\n          </div>\n        )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App; \n"],"mappings":"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AAC/c,EAAE,GAAG,0BAA0B;IACtD+c,sBAAsB,CAACzF,SAAS,GAAG;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDrY,QAAQ,CAACiB,IAAI,CAACC,WAAW,CAAC4c,sBAAsB,CAAC;EACnD,CAAC;;EAED;EACA/f,SAAS,CAAC,MAAM;IACd8f,mBAAmB,CAAC,CAAC;IACrBzP,sBAAsB,CAAC,CAAC;;IAExB;IACA,MAAM2P,gBAAgB,GAAG/d,QAAQ,CAACc,aAAa,CAAC,OAAO,CAAC;IACxDid,gBAAgB,CAAChd,EAAE,GAAG,gCAAgC;IACtDgd,gBAAgB,CAAC/c,WAAW,GAAG;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDhB,QAAQ,CAACiB,IAAI,CAACC,WAAW,CAAC6c,gBAAgB,CAAC;;IAE3C;IACA,MAAMzb,KAAK,GAAGtC,QAAQ,CAACc,aAAa,CAAC,OAAO,CAAC;IAC7CwB,KAAK,CAACvB,EAAE,GAAG,+BAA+B;IAC1CuB,KAAK,CAACtB,WAAW,GAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}