{"ast":null,"code":"var _jsxFileName = \"D:\\\\adhd-read-helper\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 添加全局事件跟踪对象\nwindow.eventTracker = window.eventTracker || {\n  mouseFollowHandlers: []\n};\n\n// 自动阅读器全局对象\nwindow.autoReader = {\n  charPositions: [],\n  intervalId: null,\n  currentIndex: 0,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false,\n  cleanup: null\n};\n\n// 添加新的节奏阅读模式代码\n// 全局变量，确保在页面切换后仍然保持状态\nwindow.rhythmReaderGlobal = window.rhythmReaderGlobal || {\n  active: false,\n  speed: 300\n};\n\n// 节奏阅读模式 - 最终修复版\n(function () {\n  console.log(\"节奏阅读模式初始化 - 最终修复版\");\n\n  // 创建控制面板 - 只有暂停/继续按钮\n  const addControlPanel = function () {\n    // 如果已存在，先移除\n    const existingPanel = document.getElementById('rhythm-control-panel');\n    if (existingPanel) existingPanel.remove();\n\n    // 创建新的控制面板\n    const panel = document.createElement('div');\n    panel.id = 'rhythm-control-panel';\n    panel.style.cssText = `\n      position: fixed;\n      bottom: 20px;\n      right: 20px;\n      background-color: rgba(0, 0, 0, 0.8);\n      color: white;\n      padding: 10px 15px;\n      border-radius: 5px;\n      z-index: 99999;\n      font-size: 14px;\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      box-shadow: 0 2px 8px rgba(0,0,0,0.4);\n    `;\n\n    // 标签\n    const label = document.createElement('span');\n    label.textContent = \"节奏阅读:\";\n    label.style.fontWeight = 'bold';\n    panel.appendChild(label);\n\n    // 暂停/继续按钮\n    const pauseButton = document.createElement('button');\n    pauseButton.id = 'rhythm-pause-button';\n    pauseButton.textContent = \"暂停\";\n    pauseButton.style.cssText = `\n      padding: 5px 12px;\n      background: #2196F3;\n      color: white;\n      border: none;\n      border-radius: 3px;\n      cursor: pointer;\n      font-size: 13px;\n      font-weight: bold;\n      transition: background 0.2s;\n    `;\n    pauseButton.onclick = function () {\n      if (rhythmReader.intervalId) {\n        // 当前正在运行，暂停它\n        rhythmReader.pause();\n        this.textContent = \"继续\";\n        this.style.background = \"#4CAF50\";\n      } else if (rhythmReader.active) {\n        // 当前暂停中，继续\n        rhythmReader.resume();\n        this.textContent = \"暂停\";\n        this.style.background = \"#2196F3\";\n      }\n    };\n    panel.appendChild(pauseButton);\n\n    // 速度控制\n    const speedContainer = document.createElement('div');\n    speedContainer.style.display = 'flex';\n    speedContainer.style.alignItems = 'center';\n    speedContainer.style.marginLeft = '5px';\n    const speedLabel = document.createElement('span');\n    speedLabel.textContent = \"速度:\";\n    speedLabel.style.marginRight = '5px';\n    speedContainer.appendChild(speedLabel);\n    const speedInput = document.createElement('input');\n    speedInput.type = 'range';\n    speedInput.min = '50';\n    speedInput.max = '600';\n    speedInput.step = '50';\n    speedInput.value = rhythmReader.speed;\n    speedInput.style.width = '80px';\n    speedInput.oninput = function () {\n      const speed = parseInt(this.value);\n      rhythmReader.setSpeed(speed);\n    };\n    speedContainer.appendChild(speedInput);\n    panel.appendChild(speedContainer);\n\n    // 添加到文档\n    document.body.appendChild(panel);\n    console.log(\"控制面板已创建\");\n    return panel;\n  };\n\n  // 简单通知\n  const showNotification = function (message) {\n    const notification = document.createElement('div');\n    notification.style.cssText = `\n      position: fixed;\n      top: 20px;\n      left: 50%;\n      transform: translateX(-50%);\n      background-color: rgba(0, 0, 0, 0.8);\n      color: white;\n      padding: 10px 20px;\n      border-radius: 4px;\n      z-index: 100000;\n      font-size: 14px;\n      box-shadow: 0 2px 8px rgba(0,0,0,0.3);\n    `;\n    notification.textContent = message;\n    document.body.appendChild(notification);\n    setTimeout(() => {\n      notification.style.opacity = '0';\n      notification.style.transition = 'opacity 0.5s';\n      setTimeout(() => notification.remove(), 500);\n    }, 2000);\n  };\n\n  // 节奏阅读核心功能\n  const rhythmReader = {\n    active: false,\n    intervalId: null,\n    speed: 300,\n    currentIndex: 0,\n    readIndices: new Set(),\n    charElements: [],\n    // 启动功能\n    start: function () {\n      if (this.active) {\n        return;\n      }\n      console.log(\"开始节奏阅读...\");\n\n      // 找到PDF内容容器 - 使用多种选择器确保可靠性\n      const pdfContent = document.querySelector('.pdf-content') || document.querySelector('[class*=\"pdf-content\"]') || document.querySelector('[id*=\"pdf\"]') || document.querySelector('article') || document.querySelector('main');\n      if (!pdfContent) {\n        console.error(\"未找到内容容器\");\n        showNotification(\"错误：未找到内容容器\");\n        return;\n      }\n      console.log(`找到内容容器: ${pdfContent.tagName} ${pdfContent.className || pdfContent.id || ''}`);\n\n      // 设置为活动状态\n      this.active = true;\n\n      // 初始化文本节点\n      this.charElements = [];\n\n      // 查找所有文本节点\n      const textNodes = [];\n      this.findTextNodes(pdfContent, textNodes);\n      if (textNodes.length === 0) {\n        console.error(\"未找到文本节点\");\n        showNotification(\"错误：未找到文本节点\");\n        this.active = false;\n        return;\n      }\n      console.log(`找到 ${textNodes.length} 个文本节点`);\n\n      // 为每个文本节点创建字符span\n      let processedCount = 0;\n      textNodes.forEach(node => {\n        const text = node.nodeValue;\n        if (!text) return;\n        const fragment = document.createDocumentFragment();\n        for (let i = 0; i < text.length; i++) {\n          const char = text[i];\n          const span = document.createElement('span');\n          span.textContent = char;\n          span.className = 'rhythm-char';\n          span.dataset.rhythmIndex = this.charElements.length;\n          if (char.trim() === '') {\n            span.dataset.whitespace = 'true';\n          }\n          span.style.cssText = `\n            display: inline;\n            margin: 0;\n            padding: 0;\n            border: none;\n            background-color: transparent;\n          `;\n          fragment.appendChild(span);\n          this.charElements.push(span);\n        }\n        if (node.parentNode) {\n          node.parentNode.replaceChild(fragment, node);\n          processedCount++;\n        }\n      });\n      console.log(`处理了 ${processedCount}/${textNodes.length} 个文本节点`);\n      if (this.charElements.length === 0) {\n        console.error(\"未能创建字符span\");\n        showNotification(\"错误：未能创建字符span\");\n        this.active = false;\n        return;\n      }\n      console.log(`创建了 ${this.charElements.length} 个字符span`);\n\n      // 创建控制面板\n      addControlPanel();\n\n      // 重置位置\n      this.currentIndex = 0;\n      this.readIndices.clear();\n\n      // 更新颜色\n      this.updateTextColors();\n\n      // 滚动到开始位置\n      this.scrollToCurrentChar();\n\n      // 设置间隔\n      this.intervalId = setInterval(() => this.moveToNextChar(), this.speed);\n\n      // 添加键盘控制\n      document.addEventListener('keydown', this.handleKeyDown);\n      showNotification(\"节奏阅读模式已启动\");\n    },\n    // 暂停功能\n    pause: function () {\n      if (!this.active || !this.intervalId) return;\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n      showNotification(\"节奏阅读已暂停\");\n      console.log(\"节奏阅读已暂停\");\n    },\n    // 继续功能\n    resume: function () {\n      if (!this.active || this.intervalId) return;\n      this.intervalId = setInterval(() => this.moveToNextChar(), this.speed);\n      showNotification(\"节奏阅读已继续\");\n      console.log(\"节奏阅读已继续\");\n    },\n    // 设置速度\n    setSpeed: function (newSpeed) {\n      this.speed = newSpeed;\n\n      // 如果正在运行，重新设置间隔\n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = setInterval(() => this.moveToNextChar(), this.speed);\n      }\n      console.log(`节奏阅读速度已设置为 ${newSpeed}ms`);\n    },\n    // 停止功能 - 只会在切换模式时内部调用\n    stop: function () {\n      if (!this.active) return;\n      console.log(\"停止节奏阅读模式\");\n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n      }\n      this.active = false;\n\n      // 移除键盘事件监听\n      document.removeEventListener('keydown', this.handleKeyDown);\n\n      // 恢复原始文本\n      const charSpans = document.querySelectorAll('.rhythm-char');\n      if (charSpans.length > 0) {\n        console.log(`恢复 ${charSpans.length} 个字符span`);\n\n        // 按父节点分组\n        const parentMap = new Map();\n        charSpans.forEach(span => {\n          const parent = span.parentNode;\n          if (!parent) return;\n          if (!parentMap.has(parent)) {\n            parentMap.set(parent, []);\n          }\n          parentMap.get(parent).push(span);\n        });\n\n        // 恢复文本\n        parentMap.forEach((spans, parent) => {\n          if (spans.length === 0) return;\n\n          // 排序spans确保顺序正确\n          spans.sort((a, b) => {\n            const indexA = parseInt(a.dataset.rhythmIndex || '0');\n            const indexB = parseInt(b.dataset.rhythmIndex || '0');\n            return indexA - indexB;\n          });\n\n          // 合并文本\n          const text = spans.map(span => span.textContent).join('');\n          const textNode = document.createTextNode(text);\n\n          // 替换节点\n          if (spans[0].parentNode === parent) {\n            parent.replaceChild(textNode, spans[0]);\n            for (let i = 1; i < spans.length; i++) {\n              if (spans[i].parentNode === parent) {\n                parent.removeChild(spans[i]);\n              }\n            }\n          }\n        });\n      }\n\n      // 重置\n      this.charElements = [];\n\n      // 移除控制面板\n      const panel = document.getElementById('rhythm-control-panel');\n      if (panel) panel.remove();\n    },\n    // 查找文本节点\n    findTextNodes: function (element, collection) {\n      // 排除这些标签\n      const excludeTags = ['BUTTON', 'INPUT', 'SELECT', 'TEXTAREA', 'SCRIPT', 'STYLE', 'NAV', 'HEADER', 'FOOTER'];\n      if (excludeTags.includes(element.tagName)) return;\n      for (let i = 0; i < element.childNodes.length; i++) {\n        const node = element.childNodes[i];\n\n        // 文本节点且有内容\n        if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() !== '') {\n          collection.push(node);\n        }\n        // 元素节点且不是UI元素\n        else if (node.nodeType === Node.ELEMENT_NODE && !excludeTags.includes(node.tagName)) {\n          // 排除明显的UI元素\n          const className = (node.className || '').toLowerCase();\n          const id = (node.id || '').toLowerCase();\n          if (!/nav|menu|button|control|header|footer/i.test(className) && !/nav|menu|button|control|header|footer/i.test(id)) {\n            this.findTextNodes(node, collection);\n          }\n        }\n      }\n    },\n    // 键盘事件处理\n    handleKeyDown: function (e) {\n      // 空格键 - 暂停/继续\n      if (e.key === ' ' && rhythmReader.active) {\n        e.preventDefault();\n        const pauseButton = document.getElementById('rhythm-pause-button');\n        if (rhythmReader.intervalId) {\n          rhythmReader.pause();\n          if (pauseButton) {\n            pauseButton.textContent = \"继续\";\n            pauseButton.style.background = \"#4CAF50\";\n          }\n        } else {\n          rhythmReader.resume();\n          if (pauseButton) {\n            pauseButton.textContent = \"暂停\";\n            pauseButton.style.background = \"#2196F3\";\n          }\n        }\n      }\n    },\n    // 更新颜色\n    updateTextColors: function () {\n      if (this.charElements.length === 0) return;\n      this.charElements.forEach((span, index) => {\n        let color,\n          fontWeight = 'inherit';\n        if (index === this.currentIndex) {\n          color = '#00aa00'; // 当前字符 - 绿色\n          fontWeight = 'bold';\n        } else if (index === this.currentIndex + 1 || index === this.currentIndex + 2) {\n          color = '#aaaaaa'; // 下一个字符 - 灰色\n        } else if (this.readIndices.has(index)) {\n          color = '#ffffff'; // 已读字符 - 白色\n        } else {\n          color = 'rgba(160, 160, 160, 0.25)'; // 未读字符 - 淡灰色\n        }\n        span.style.color = color;\n        span.style.fontWeight = fontWeight;\n      });\n    },\n    // 移动到下一个字符\n    moveToNextChar: function () {\n      if (!this.active || this.charElements.length === 0) return;\n      this.readIndices.add(this.currentIndex);\n      do {\n        this.currentIndex++;\n        if (this.currentIndex >= this.charElements.length) {\n          showNotification(\"已到达文本末尾\");\n          this.stop();\n          return;\n        }\n      } while (this.currentIndex < this.charElements.length && this.charElements[this.currentIndex] && this.charElements[this.currentIndex].dataset.whitespace === 'true');\n      this.updateTextColors();\n      this.scrollToCurrentChar();\n    },\n    // 滚动到当前字符\n    scrollToCurrentChar: function () {\n      const span = this.charElements[this.currentIndex];\n      if (!span) return;\n      const rect = span.getBoundingClientRect();\n      window.scrollTo({\n        top: window.scrollY + rect.top - window.innerHeight * 0.4,\n        behavior: 'smooth'\n      });\n    }\n  };\n\n  // 模式切换处理\n  const originalReadingModeChanged = window.readingModeChanged;\n  window.readingModeChanged = function (mode) {\n    console.log(`模式变更为: ${mode}`);\n\n    // 如果不是节奏阅读模式，则停止节奏阅读\n    if (mode !== 'rhythm' && mode !== 'rhythmReading') {\n      if (rhythmReader.active) {\n        rhythmReader.stop();\n        showNotification(\"节奏阅读模式已关闭\");\n      }\n    }\n\n    // 调用原始函数\n    if (typeof originalReadingModeChanged === 'function') {\n      try {\n        originalReadingModeChanged(mode);\n      } catch (e) {\n        console.error(\"原始函数错误:\", e);\n      }\n    }\n\n    // 如果是节奏阅读模式，启动\n    if (mode === 'rhythm' || mode === 'rhythmReading') {\n      console.log(\"选择了节奏阅读模式，立即启动\");\n      // 延迟一点启动，确保其他模式切换操作完成\n      setTimeout(() => {\n        rhythmReader.start();\n      }, 100);\n    }\n  };\n\n  // 将对象暴露到全局\n  window.rhythmReader = rhythmReader;\n\n  // 监听下拉菜单变化\n  const setupSelectors = function () {\n    const selects = document.querySelectorAll('select');\n    selects.forEach(select => {\n      select.addEventListener('change', function () {\n        const value = this.value || '';\n        console.log(`下拉菜单值变化: ${value}`);\n        if (value.includes('rhythm') || value.includes('节奏')) {\n          console.log(\"从下拉菜单选择了节奏阅读模式\");\n          setTimeout(() => rhythmReader.start(), 100);\n        } else if (rhythmReader.active) {\n          rhythmReader.stop();\n        }\n      });\n    });\n  };\n\n  // 初始化\n  const initialize = function () {\n    console.log(\"初始化节奏阅读组件...\");\n    setupSelectors();\n\n    // 检查当前是否已选择节奏阅读模式\n    setTimeout(function () {\n      // 通过下拉菜单检测\n      const selects = document.querySelectorAll('select');\n      for (const select of selects) {\n        const value = (select.value || '').toLowerCase();\n        if (value.includes('rhythm') || value.includes('节奏')) {\n          console.log(\"检测到已选择节奏阅读模式:\", value);\n          rhythmReader.start();\n          return;\n        }\n      }\n    }, 500);\n  };\n\n  // 确保初始化在DOM加载后执行\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initialize);\n  } else {\n    initialize();\n  }\n  console.log(\"节奏阅读模式初始化完成\");\n})();\n\n// 定义一个全局函数用于从应用代码中启动节奏阅读\nwindow.activateRhythmReadingMode = function () {\n  console.log(\"尝试从应用代码中启动节奏阅读模式\");\n  if (window.rhythmReader) {\n    if (window.rhythmReader.active) {\n      console.log(\"节奏阅读模式已经在运行\");\n    } else {\n      window.rhythmReader.start();\n    }\n  } else {\n    console.error(\"节奏阅读模式未初始化\");\n    alert(\"无法启动节奏阅读模式：组件未初始化\");\n  }\n};\n\n// 更新初始化函数\nconst initializeRhythmReading = () => {\n  // 不再自动初始化，而是等待用户选择\n  console.log(\"节奏阅读模式准备就绪，等待用户选择\");\n};\n\n// 更新启动函数\nconst startRhythmReading = () => {\n  if (window.rhythmReader && typeof window.rhythmReader.start === 'function') {\n    window.rhythmReader.start();\n  }\n};\nconst App = () => {\n  _s();\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  const [isTableOfContents, setIsTableOfContents] = useState(false);\n\n  // 实现缺失的函数\n  // 应用深色背景\n  const applyDarkBackground = () => {\n    document.body.classList.add('dark-background');\n\n    // 添加必要的CSS样式\n    if (!document.getElementById('dark-background-style')) {\n      const style = document.createElement('style');\n      style.id = 'dark-background-style';\n      style.textContent = `\n        .dark-background {\n          background-color: #000 !important;\n        }\n        .dark-background .sidebar {\n          background: linear-gradient(145deg, #4834d4, #341f9e) !important;\n        }\n        .dark-background .page-content {\n          background-color: #000 !important;\n        }\n        .dark-background .main-content {\n          background-color: #000 !important;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 恢复正常背景\n  const restoreDarkBackground = () => {\n    document.body.classList.remove('dark-background');\n  };\n\n  // 添加裸眼3D样式\n  const addNakedEye3DStyles = () => {\n    if (!document.getElementById('naked-eye-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'naked-eye-3d-style';\n      style.textContent = `\n        .naked-eye-3d-container {\n          position: relative;\n          perspective: 800px;\n          width: 100%;\n        }\n        \n        .naked-eye-3d-text {\n          display: inline-block;\n          animation: float 3s ease-in-out infinite;\n          text-shadow: 0 0 5px rgba(255,255,255,0.3);\n          padding: 0 4px;\n          color: white;\n          filter: drop-shadow(0 0 5px rgba(120, 220, 255, 0.6));\n        }\n        \n        @keyframes float {\n          0% { transform: translateZ(0px); }\n          50% { transform: translateZ(20px); }\n          100% { transform: translateZ(0px); }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 添加舒适3D样式\n  const addComfortable3DStyles = () => {\n    if (!document.getElementById('comfortable-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'comfortable-3d-style';\n      style.textContent = `\n        .emboss-3d-text {\n          color: #fff;\n          text-shadow: \n            1px 1px 1px rgba(0,0,0,0.5),\n            -1px -1px 1px rgba(255,255,255,0.5);\n          letter-spacing: 1.5px;\n          font-weight: 500;\n        }\n        \n        .float-3d-text {\n          display: inline-block;\n          transform-style: preserve-3d;\n          transform: perspective(500px) translateZ(10px);\n          text-shadow: 0 2px 5px rgba(0,0,0,0.5);\n        }\n        \n        .gradient-3d-text {\n          display: inline-block;\n          background: linear-gradient(to bottom, #fff, #aaa);\n          -webkit-background-clip: text;\n          -webkit-text-fill-color: transparent;\n          text-shadow: 0 2px 4px rgba(0,0,0,0.3);\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 添加闪读样式\n  const addFlashReadingStyles = () => {\n    if (!document.getElementById('flash-reading-style')) {\n      const style = document.createElement('style');\n      style.id = 'flash-reading-style';\n      style.textContent = `\n        .flash-reading-container {\n          position: relative;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          z-index: 1000;\n          padding: 20px;\n        }\n        \n        .flash-reading-display-wrapper {\n          position: relative;\n          margin: 40px 0;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        \n        .flash-reading-display {\n          font-size: 36px;\n          font-weight: bold;\n          text-align: center;\n          color: white;\n          min-height: 80px;\n          max-width: 90%;\n          padding: 20px 40px;\n          position: relative; /* 允许绝对定位的覆盖层 */\n          z-index: 2;\n        }\n        \n        .flash-reading-cover {\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(128, 128, 128, 0.6); /* 灰色遮罩 */\n          border-radius: 8px;\n          z-index: 1; /* 确保在文本后面 */\n        }\n        \n        .flash-reading-controls {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          gap: 20px;\n          margin-bottom: 20px;\n          width: 100%;\n        }\n        \n        .flash-reading-buttons {\n          display: flex;\n          gap: 10px;\n          flex-wrap: wrap;\n          justify-content: center;\n        }\n        \n        .flash-reading-speed {\n          display: flex;\n          align-items: center;\n          color: white;\n          width: 80%;\n          max-width: 400px;\n          gap: 10px;\n        }\n        \n        .flash-reading-slider {\n          flex: 1;\n          height: 8px;\n          appearance: none;\n          background: #555;\n          border-radius: 4px;\n          outline: none;\n        }\n        \n        .flash-reading-slider::-webkit-slider-thumb {\n          appearance: none;\n          width: 20px;\n          height: 20px;\n          border-radius: 50%;\n          background: #6c5ce7;\n          cursor: pointer;\n        }\n        \n        .flash-reading-btn {\n          padding: 10px 20px;\n          border: none;\n          border-radius: 4px;\n          background-color: #6c5ce7;\n          color: white;\n          font-size: 16px;\n          cursor: pointer;\n          transition: background-color 0.2s;\n        }\n        \n        .flash-reading-btn:hover {\n          background-color: #5344c0;\n        }\n        \n        .flash-reading-btn:disabled {\n          background-color: #aaa;\n          cursor: not-allowed;\n        }\n        \n        .flash-reading-progress {\n          color: white;\n          font-size: 14px;\n          margin-top: 10px;\n        }\n        .flash-reading-speed-note {\n          font-size: 12px;\n          color: #ccc;\n          margin-left: 5px;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 初始化闪读模式\n  const initializeFlashReading = () => {\n    // 添加样式\n    addFlashReadingStyles();\n    const sentences = window.flashReadingSentences;\n    if (!sentences || !Array.isArray(sentences) || sentences.length === 0) {\n      console.error('闪读模式: 未找到句子数据');\n      return;\n    }\n\n    // 获取全局UI元素\n    const display = document.getElementById('flash-reading-display');\n    const speedSlider = document.getElementById('flash-reading-speed');\n    const speedValue = document.getElementById('flash-reading-speed-value');\n    const playButton = document.getElementById('flash-reading-play');\n    const pauseButton = document.getElementById('flash-reading-pause');\n    const stopButton = document.getElementById('flash-reading-stop');\n    const prevButton = document.getElementById('flash-reading-prev-sentence');\n    const nextButton = document.getElementById('flash-reading-next-sentence');\n    const progress = document.getElementById('flash-reading-progress');\n    const cover = document.querySelector('.flash-reading-cover');\n    if (!display || !speedSlider || !speedValue || !playButton || !pauseButton || !stopButton || !prevButton || !nextButton || !progress || !cover) {\n      console.error('闪读模式: 未找到UI元素');\n      return;\n    }\n\n    // 创建闪读控制器\n    window.flashReader = {\n      sentences: sentences,\n      currentIndex: 0,\n      interval: null,\n      speed: parseInt(speedSlider.value),\n      isPlaying: false,\n      // 开始闪读\n      start() {\n        if (this.interval) {\n          clearInterval(this.interval);\n        }\n        this.isPlaying = true;\n        playButton.disabled = true;\n        pauseButton.disabled = false;\n        progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n\n        // 显示当前句子\n        this.displayCurrentSentence();\n\n        // 设置闪读间隔\n        this.interval = setInterval(() => {\n          this.currentIndex++;\n          if (this.currentIndex >= this.sentences.length) {\n            this.stop();\n            display.textContent = '阅读完成';\n            return;\n          }\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }, this.speed);\n      },\n      // 显示当前句子\n      displayCurrentSentence() {\n        if (this.currentIndex < this.sentences.length) {\n          const currentSentence = this.sentences[this.currentIndex];\n          display.textContent = currentSentence;\n          display.style.color = 'white'; // 确保文本为白色\n\n          // 调整背景以适应内容\n          setTimeout(() => {\n            const displayRect = display.getBoundingClientRect();\n            // 确保覆盖层完全包裹文本\n            cover.style.width = `${displayRect.width}px`;\n            cover.style.height = `${displayRect.height}px`;\n          }, 10);\n        }\n      },\n      // 暂停闪读\n      pause() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n      },\n      // 停止闪读\n      stop() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        this.currentIndex = 0;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n        display.textContent = '准备开始';\n        progress.textContent = `进度：0 / ${this.sentences.length}`; // 重置进度\n      },\n      // 更新速度\n      updateSpeed(newSpeed) {\n        this.speed = newSpeed;\n        speedValue.textContent = `${newSpeed} ms`;\n\n        // 保存速度设置到本地存储\n        localStorage.setItem('flash-reading-speed', newSpeed);\n\n        // 如果正在播放，重新开始以应用新速度\n        if (this.isPlaying) {\n          clearInterval(this.interval);\n          this.start(); // 直接调用start方法重新开始\n        }\n      },\n      // 返回上一句\n      prevSentence() {\n        if (this.currentIndex > 0) {\n          this.currentIndex--;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n      // 跳到下一句\n      nextSentence() {\n        if (this.currentIndex < this.sentences.length - 1) {\n          this.currentIndex++;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n      // 清理资源\n      cleanup() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        this.currentIndex = 0;\n      }\n    };\n\n    // 添加事件监听器\n    playButton.addEventListener('click', () => {\n      window.flashReader.start();\n    });\n    pauseButton.addEventListener('click', () => {\n      window.flashReader.pause();\n    });\n    stopButton.addEventListener('click', () => {\n      window.flashReader.stop();\n    });\n    speedSlider.addEventListener('input', e => {\n      const newSpeed = parseInt(e.target.value);\n      window.flashReader.updateSpeed(newSpeed);\n    });\n    prevButton.addEventListener('click', () => {\n      window.flashReader.prevSentence();\n    });\n    nextButton.addEventListener('click', () => {\n      window.flashReader.nextSentence();\n    });\n\n    // 初始化\n    const savedSpeed = localStorage.getItem('flash-reading-speed');\n    const initialSpeed = savedSpeed ? parseInt(savedSpeed) : 1000;\n    speedSlider.value = initialSpeed;\n    window.flashReader.updateSpeed(initialSpeed);\n    console.log('闪读模式已初始化，共 ' + sentences.length + ' 个句子');\n  };\n\n  // 创建闪读内容\n  const createFlashReadingContent = text => {\n    return `<div class=\"flash-reading-content\">\n      <p>${text}</p>\n    </div>`;\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 格式化文本用于鼠标跟随\n  const formatTextForMouseFollow = text => {\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个单词添加span，以便于添加高亮效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"follow-word\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\" data-follow=\"true\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用静态高亮\n  const applyStaticHighlight = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为单词随机添加颜色高亮\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      let lastColor = null;\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n          return;\n        }\n\n        // 随机决定是否高亮和使用哪种颜色\n        if (Math.random() < 0.7) {\n          let color;\n          if (lastColor === 'red') {\n            color = 'blue';\n          } else if (lastColor === 'blue') {\n            color = 'red';\n          } else {\n            color = Math.random() < 0.5 ? 'red' : 'blue';\n          }\n          lastColor = color;\n          processedParagraph += `<span class=\"highlight-word ${color}\">${word}</span>`;\n        } else {\n          processedParagraph += word;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用裸眼3D效果\n  const applyNakedEye3dEffect = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content naked-eye-3d-container\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个词添加3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"naked-eye-3d-text\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用舒适3D效果\n  const applyComfortable3dEffect = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个词随机应用不同的3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          processedParagraph += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 初始化裸眼3D\n  const initializeNakedEye3D = () => {\n    // 为裸眼3D文本添加动画\n    const textElements = document.querySelectorAll('.naked-eye-3d-text');\n    textElements.forEach((element, index) => {\n      // 添加随机延迟，使动画错开\n      const delay = Math.random() * 2;\n      element.style.animationDelay = `${delay}s`;\n    });\n  };\n\n  // 添加鼠标跟随监听器\n  const addMouseFollowListeners = () => {\n    // 获取内容容器\n    const contentArea = document.querySelector('.mouse-follow-content');\n    if (!contentArea) {\n      console.error('未找到鼠标跟随内容区域');\n      return;\n    }\n\n    // 上一个高亮的行\n    let lastHighlightedLine = null;\n\n    // 监听鼠标移动 - 精确的行检测\n    const mouseMoveHandler = e => {\n      // 获取鼠标位置\n      const mouseY = e.clientY;\n\n      // 获取所有行\n      const allLines = contentArea.querySelectorAll('.follow-line');\n      let foundLine = null;\n      let minDistance = Infinity;\n\n      // 寻找鼠标所在的精确行\n      allLines.forEach(line => {\n        const rect = line.getBoundingClientRect();\n        const lineCenter = rect.top + rect.height / 2;\n        const distance = Math.abs(mouseY - lineCenter);\n\n        // 如果鼠标在行范围内，计算到行中心的距离\n        if (mouseY >= rect.top && mouseY <= rect.bottom) {\n          if (distance < minDistance) {\n            minDistance = distance;\n            foundLine = line;\n          }\n        }\n      });\n\n      // 更新高亮状态\n      if (lastHighlightedLine && lastHighlightedLine !== foundLine) {\n        // 移除旧高亮\n        lastHighlightedLine.classList.remove('highlighted');\n      }\n      if (foundLine) {\n        // 添加新高亮\n        foundLine.classList.add('highlighted');\n        lastHighlightedLine = foundLine;\n\n        // 调试输出\n        console.log('当前高亮行:', foundLine.textContent.substring(0, 30) + '...');\n      } else if (lastHighlightedLine) {\n        // 如果没有找到新行，且有上一个高亮行，移除它\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n\n    // 鼠标离开处理\n    const mouseLeaveHandler = () => {\n      // 清除当前高亮\n      if (lastHighlightedLine) {\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n\n    // 存储处理函数引用\n    window.eventTracker = window.eventTracker || {\n      mouseFollowHandlers: []\n    };\n    window.eventTracker.mouseFollowHandlers.push({\n      element: contentArea,\n      event: 'mousemove',\n      handler: mouseMoveHandler\n    }, {\n      element: contentArea,\n      event: 'mouseleave',\n      handler: mouseLeaveHandler\n    });\n\n    // 添加事件监听器\n    contentArea.addEventListener('mousemove', mouseMoveHandler);\n    contentArea.addEventListener('mouseleave', mouseLeaveHandler);\n    console.log('改进的鼠标跟随监听器已初始化');\n  };\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n  }, []);\n\n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async file => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n\n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n\n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n\n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({\n        scale: 1.0\n      });\n\n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async textContent => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n\n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n\n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n\n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    const lines = [...lineMap.values()];\n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    return hasTocKeywords || hasPageNumberPatterns || shortLineRatio > 0.7 && numberLineRatio > 0.3;\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n\n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n\n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n\n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n\n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = text => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    return result;\n  };\n\n  // 处理内容页面 - 按句子划分段落\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n\n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 按句子划分内容（句号、问号、感叹号等作为分隔符）\n      const sentences = splitIntoSentences(extractedText);\n\n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch (mode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          // 使用ADHD友好的静态高亮处理\n          console.log('应用ADHD友好的静态高亮模式');\n          processedContent = formatSimpleHighlightedText(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'rhythm':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          processedContent = createFlashReadingContentFromSentences(sentences);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n      setContent(processedContent);\n\n      // 如果是静态高亮模式，添加延时验证检查\n      if (mode === 'static') {\n        setTimeout(() => {\n          const contentArea = document.querySelector('.adhd-highlight-mode');\n          if (contentArea) {\n            console.log('静态高亮模式元素存在');\n            const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n            console.log(`找到 ${paragraphs.length} 个段落`);\n\n            // 检查样式是否正确应用\n            if (paragraphs.length > 0) {\n              const firstPara = paragraphs[0];\n              const styles = window.getComputedStyle(firstPara);\n              console.log('段落应用的样式:', {\n                color: styles.color,\n                backgroundColor: styles.backgroundColor,\n                fontFamily: styles.fontFamily,\n                fontSize: styles.fontSize\n              });\n            }\n          }\n        }, 200);\n      }\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 将文本分割成句子\n  const splitIntoSentences = text => {\n    // 匹配句号、问号、感叹号后跟空格或结束的模式\n    // 支持中英文标点符号\n    const sentenceRegex = /([.!?。！？；;]+\\s*)/g;\n\n    // 分割文本成句子\n    const sentences = [];\n    let lastIndex = 0;\n    let match;\n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const sentence = text.substring(lastIndex, endIndex).trim();\n\n      // 避免添加空句子\n      if (sentence) {\n        sentences.push(sentence);\n      }\n      lastIndex = endIndex;\n    }\n\n    // 处理最后一部分（如果没有以句号等结尾）\n    if (lastIndex < text.length) {\n      const lastSentence = text.substring(lastIndex).trim();\n      if (lastSentence) {\n        sentences.push(lastSentence);\n      }\n    }\n    return sentences;\n  };\n\n  // 专门为闪读模式分割文本，以任意标点符号为分隔点\n  const splitIntoFlashReadingSegments = text => {\n    // 匹配任意标点符号包括中英文标点\n    const sentenceRegex = /([,.!?:;，。！？：；、]+\\s*)/g;\n\n    // 分割文本成短句\n    const segments = [];\n    let lastIndex = 0;\n    let match;\n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const segment = text.substring(lastIndex, endIndex).trim();\n\n      // 避免添加空段落\n      if (segment) {\n        segments.push(segment);\n      }\n      lastIndex = endIndex;\n    }\n\n    // 处理最后一部分（如果没有以标点符号结尾）\n    if (lastIndex < text.length) {\n      const lastSegment = text.substring(lastIndex).trim();\n      if (lastSegment) {\n        segments.push(lastSegment);\n      }\n    }\n    return segments;\n  };\n\n  // 格式化句子为HTML\n  const formatSentencesToHtml = sentences => {\n    let html = '<div class=\"pdf-content\">';\n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${sentence}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为句子应用静态高亮\n  const applyStaticHighlightToSentences = sentences => {\n    let html = '<div class=\"pdf-content adhd-content\">';\n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n\n      // 简单地为句子添加特定样式的class\n      html += `<p class=\"pdf-paragraph adhd-sentence\">${sentence}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为鼠标跟随模式格式化句子\n  const formatSentencesForMouseFollow = sentences => {\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    sentences.forEach((sentence, index) => {\n      if (sentence.trim() === '') return;\n\n      // 每个句子作为独立行，使用div而不是p标签\n      html += `<div class=\"follow-line\" data-line=\"${index}\" data-sentence=\"${sentence.substring(0, 20)}...\" style=\"color: inherit;\">${sentence}</div>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为舒适3D模式格式化句子\n  const applyComfortable3dEffectToSentences = sentences => {\n    let html = '<div class=\"pdf-content\">';\n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n\n      // 为每个词随机应用不同的3D效果\n      const words = sentence.split(/(\\s+)/);\n      let processedSentence = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedSentence += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          processedSentence += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedSentence}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为闪读模式创建内容\n  const createFlashReadingContentFromSentences = sentences => {\n    // 储存句子到全局变量，用于后续显示\n    window.flashReadingSentences = sentences;\n\n    // 返回闪读界面的HTML结构\n    return `\n      <div class=\"flash-reading-container\">\n        <div class=\"flash-reading-controls\">\n          <div class=\"flash-reading-buttons\">\n            <button id=\"flash-reading-prev-sentence\" class=\"flash-reading-btn\">上一句</button>\n            <button id=\"flash-reading-play\" class=\"flash-reading-btn\">开始</button>\n            <button id=\"flash-reading-pause\" class=\"flash-reading-btn\" disabled>暂停</button>\n            <button id=\"flash-reading-stop\" class=\"flash-reading-btn\">停止</button>\n            <button id=\"flash-reading-next-sentence\" class=\"flash-reading-btn\">下一句</button>\n          </div>\n          <div class=\"flash-reading-speed\">\n            <span>速度：</span>\n            <input type=\"range\" id=\"flash-reading-speed\" min=\"300\" max=\"1700\" step=\"50\" value=\"1000\" class=\"flash-reading-slider\">\n            <span id=\"flash-reading-speed-value\">1000 ms</span>\n            <span class=\"flash-reading-speed-note\">（数值越小，切换越快）</span>\n          </div>\n          <div class=\"flash-reading-progress\">\n            <span id=\"flash-reading-progress\">进度：0 / ${sentences.length}</span>\n          </div>\n        </div>\n        <div class=\"flash-reading-display-wrapper\">\n          <div class=\"flash-reading-cover\"></div> <!-- 这里是闪卡 -->\n          <div id=\"flash-reading-display\" class=\"flash-reading-display\">准备开始</div>\n        </div>\n      </div>`;\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async file => {\n    try {\n      const text = await file.text();\n\n      // 根据阅读模式选择不同的处理方式\n      let processedContent = '';\n      if (readingMode === 'flash-reading') {\n        // 闪读模式下使用特定的分割函数\n        const segments = splitIntoFlashReadingSegments(text);\n        processedContent = createFlashReadingContentFromSentences(segments);\n\n        // 初始化闪读模式\n        setTimeout(() => {\n          initializeFlashReading();\n        }, 100);\n      } else {\n        // 其他模式使用默认的分割方式\n        const sentences = splitIntoSentences(text);\n        switch (readingMode) {\n          case 'normal':\n            processedContent = formatSentencesToHtml(sentences);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlightToSentences(sentences);\n            break;\n          case 'follow-mouse':\n            processedContent = formatSentencesForMouseFollow(sentences);\n            break;\n          case 'comfortable-3d':\n            processedContent = applyComfortable3dEffectToSentences(sentences);\n            break;\n          default:\n            processedContent = formatSentencesToHtml(sentences);\n        }\n      }\n\n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n\n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setContent('<div class=\"error-message\">TXT文件处理失败</div>');\n    }\n  };\n\n  // 处理Markdown文件\n  const handleMarkdownFile = async file => {\n    try {\n      const text = await file.text();\n\n      // 使用marked库转换markdown为HTML\n      let html = '';\n      try {\n        if (window.marked) {\n          html = window.marked.parse(text);\n        } else {\n          // 如果没有marked库，简单地拆分为段落\n          html = `<div>${text.split(\"\\n\\n\").map(p => `<p>${p}</p>`).join(\"\")}</div>`;\n        }\n      } catch (parseError) {\n        console.error('Markdown解析错误:', parseError);\n        html = `<div>${text}</div>`;\n      }\n\n      // 提取纯文本内容\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = html;\n      const plainText = tempDiv.textContent || tempDiv.innerText || '';\n\n      // 分割文本为句子\n      const sentences = splitIntoSentences(plainText);\n\n      // 根据当前阅读模式处理内容\n      let processedContent = '';\n      switch (readingMode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlightToSentences(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          // 使用特定的闪读分割函数重新处理文本\n          const segments = splitIntoFlashReadingSegments(plainText);\n          processedContent = createFlashReadingContentFromSentences(segments);\n\n          // 初始化闪读模式\n          setTimeout(() => {\n            initializeFlashReading();\n          }, 100);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n\n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n\n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('Markdown处理错误:', error);\n      setContent('<div class=\"error-message\">Markdown文件处理失败</div>');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async e => {\n    const uploadedFile = e.target.files[0];\n    if (!uploadedFile) return;\n    setLoading(true);\n    setFileName(uploadedFile.name);\n    try {\n      if (uploadedFile.type === 'application/pdf') {\n        await handlePdfFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/plain' || uploadedFile.name.endsWith('.txt')) {\n        await handleTxtFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/markdown' || uploadedFile.name.endsWith('.md')) {\n        await handleMarkdownFile(uploadedFile);\n      } else {\n        setContent('<div class=\"error-message\">不支持的文件格式</div>');\n      }\n    } catch (error) {\n      console.error('处理文件时出错:', error);\n      setContent('<div class=\"error-message\">处理文件时出错</div>');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = container => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n\n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n\n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n\n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width / 2,\n            // 水平中心\n            y: rect.bottom,\n            // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n\n    // 过滤无效位置并排序\n    return positions.filter(p => p.char.trim() !== '').sort((a, b) => {\n      // 先按行排序，同行按列排序\n      const yDiff = a.y - b.y;\n      if (Math.abs(yDiff) > 5) {\n        // 5px阈值判断是否同一行\n        return yDiff;\n      }\n      return a.x - b.x;\n    });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n\n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - containerVisibleHeight / 2;\n\n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - window.innerHeight / 2;\n\n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n\n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n\n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length ||\n      // 已到末尾\n      positions[nextIndex].char.trim() === '' ||\n      // 下一个是空白\n      positions[nextIndex].y > charPosition.y + 5) {\n        // 下一个在新行\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n\n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n\n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || current.y > prev.y + 5) {\n        // 有明显换行\n        break;\n      }\n      start--;\n    }\n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n\n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n\n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (window.autoReader.charPositions.length === 0) {\n      if (window.currentPage < window.totalPages) {\n        window.changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 重置索引到开头\n    window.autoReader.currentIndex = 0;\n\n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n\n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n\n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none';\n      highlight.style.zIndex = '998';\n      contentContainer.appendChild(highlight);\n    }\n\n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n\n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20;\n\n    // 尝试获取实际行高\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(window.autoReader.charPositions[i].y - window.autoReader.charPositions[i - 1].y);\n        if (yDiff > 5) {\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n\n    // 记录上次滚动的位置\n    let lastScrolledY = -1;\n    const scrollSafeZone = lineHeight * 2.5;\n\n    // 设置字符大小的估计值\n    let charWidth = 20;\n    let charHeight = lineHeight * 0.8;\n\n    // 尝试估计字符宽度\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        if (window.autoReader.charPositions[i].x !== window.autoReader.charPositions[i - 1].x) {\n          const xDiff = Math.abs(window.autoReader.charPositions[i].x - window.autoReader.charPositions[i - 1].x);\n          if (xDiff > 0 && xDiff < 50) {\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    window.autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (window.autoReader.currentIndex < window.autoReader.charPositions.length && ((_window$autoReader$ch = window.autoReader.charPositions[window.autoReader.currentIndex]) === null || _window$autoReader$ch === void 0 ? void 0 : _window$autoReader$ch.char.trim()) === '') {\n        var _window$autoReader$ch;\n        window.autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (window.autoReader.currentIndex >= window.autoReader.charPositions.length) {\n        if (window.currentPage < window.totalPages) {\n          window.changePage(1);\n          clearInterval(window.autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n      const pos = window.autoReader.charPositions[window.autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      if (cursor && highlight) {\n        const contentRect = contentContainer.getBoundingClientRect();\n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        highlight.style.left = `${relativeX - charWidth / 2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n\n        // 滚动处理\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          if (isContainerScrollable) {\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = relativeY;\n            }\n          } else {\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      window.autoReader.currentIndex++;\n    }, window.autoReader.speed);\n\n    // 在停止自动阅读时清除所有高亮\n    window.autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n\n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n\n      // 调用清理函数\n      if (window.autoReader.cleanup) {\n        window.autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n\n    // 重置翻页状态\n    window.autoReader.isPageChanging = false;\n\n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n\n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n\n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n\n    // 收集字符位置\n    window.autoReader.charPositions = getAllCharacterPositions(content);\n\n    // 如果当前页没有内容，尝试翻页\n    if (window.autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !window.autoReader.isPageChanging) {\n        window.autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async e => {\n    const newMode = e.target.value;\n    const prevMode = readingMode;\n    console.log(`切换阅读模式: 从 ${prevMode} 到 ${newMode}`);\n\n    // 更新状态\n    setReadingMode(newMode);\n\n    // 如果有PDF文档和当前页，重新处理当前页内容\n    if (pdfDocument && currentPage > 0) {\n      try {\n        console.log('重新处理当前页面内容');\n        const page = await pdfDocument.getPage(currentPage);\n\n        // 不使用任何额外处理，直接使用最原始的方式重新加载页面\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n\n        // 根据当前模式设置内容\n        if (newMode === 'static') {\n          // 静态高亮模式 - 使用改进的句子处理\n          const html = formatSimpleHighlightedText(sentences);\n          console.log('设置静态高亮内容');\n          setContent(html);\n\n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n            if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n\n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n\n                // 验证文字颜色\n                if (styles.color === 'rgb(51, 51, 51)' || styles.color === '#333333') {\n                  console.log('文字颜色正确应用');\n                } else {\n                  console.warn('文字颜色可能未正确应用:', styles.color);\n                }\n              }\n            } else {\n              console.error('未找到静态高亮模式内容区域');\n            }\n          }, 200);\n        } else if (newMode === 'flash-reading') {\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n\n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n\n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n        } else {\n          // 其他模式保持不变\n          const handler = getContentHandlerForMode(newMode);\n          const processedContent = handler(sentences);\n          setContent(processedContent);\n        }\n      } catch (error) {\n        console.error('应用阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 首先确保移除鼠标跟随监听器\n    removeMouseFollowListeners();\n\n    // 清理节奏阅读器\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n\n    // 清理闪读器\n    if (window.flashReader) {\n      window.flashReader.cleanup();\n    }\n\n    // 清理舒适3D效果\n    const comfortable3DElements = document.querySelectorAll('.emboss-3d-text, .float-3d-text, .gradient-3d-text');\n    comfortable3DElements.forEach(el => el.remove());\n\n    // 清理闪读模式元素\n    const flashReadingElements = document.querySelectorAll('.flash-reading-container, .flash-reading-display, .flash-reading-controls');\n    flashReadingElements.forEach(el => el.remove());\n\n    // 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll('.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line, .rhythm-char');\n    highlights.forEach(el => {\n      if (el.parentNode) el.parentNode.removeChild(el);\n    });\n\n    // 彻底替换内容区域以移除所有事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      var _contentArea$querySel;\n      // 先保存底部翻页控件\n      const bottomPagination = contentArea.querySelector('.bottom-pagination');\n\n      // 深度克隆内容，但不克隆事件监听器\n      const contentHTML = ((_contentArea$querySel = contentArea.querySelector('div[dangerouslySetInnerHTML]')) === null || _contentArea$querySel === void 0 ? void 0 : _contentArea$querySel.innerHTML) || '';\n      const newContentArea = contentArea.cloneNode(false);\n\n      // 创建新的内容容器\n      const newContentContainer = document.createElement('div');\n      newContentContainer.innerHTML = contentHTML;\n      newContentArea.appendChild(newContentContainer);\n\n      // 如果有底部翻页控件，重新添加\n      if (bottomPagination && totalPages > 0) {\n        const newBottomPagination = bottomPagination.cloneNode(true);\n        // 重新绑定事件\n        const prevBtn = newBottomPagination.querySelector('.page-btn:first-child');\n        const nextBtn = newBottomPagination.querySelector('.page-btn:last-child');\n        if (prevBtn) prevBtn.onclick = () => changePage(-1);\n        if (nextBtn) nextBtn.onclick = () => changePage(1);\n        newContentArea.appendChild(newBottomPagination);\n      }\n      if (contentArea.parentNode) {\n        contentArea.parentNode.replaceChild(newContentArea, contentArea);\n      }\n    }\n\n    // 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 移除所有特殊标记和样式\n      paragraph.removeAttribute('data-follow');\n      paragraph.removeAttribute('style');\n\n      // 清理特殊span标签\n      paragraph.innerHTML = paragraph.innerHTML.replace(/<span class=\"text-line\"[^>]*>/g, '').replace(/<span class=\"rhythm-char\"[^>]*>/g, '').replace(/<span class=\"line-highlight[^\"]*\"[^>]*>/g, '').replace(/<span class=\"mouse-highlight[^\"]*\"[^>]*>/g, '').replace(/<\\/span>/g, '');\n    });\n\n    // 移除特殊UI元素\n    const elementsToRemove = ['rhythm-speed-slider', 'rhythm-notification'];\n    elementsToRemove.forEach(id => {\n      const element = document.getElementById(id);\n      if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    });\n\n    // 移除暗色背景\n    document.body.classList.remove('dark-background');\n\n    // 清理闪读模式\n    if (window.flashReader && typeof window.flashReader.cleanup === 'function') {\n      window.flashReader.cleanup();\n    }\n  };\n  const handleAutoScroll = () => {\n    window.autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = e => {\n    if (readingMode !== 'follow-mouse') return;\n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    const rect = contentArea.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    clearAllHighlights();\n    const paragraphs = contentArea.querySelectorAll('p');\n    paragraphs.forEach(paragraph => {\n      const paragraphRect = paragraph.getBoundingClientRect();\n      const paragraphX = paragraphRect.left - rect.left;\n      const paragraphY = paragraphRect.top - rect.top;\n      if (y >= paragraphY && y <= paragraphY + paragraphRect.height) {\n        const words = paragraph.querySelectorAll('span');\n        words.forEach(word => {\n          const wordRect = word.getBoundingClientRect();\n          const wordX = wordRect.left - rect.left;\n          if (x >= wordX && x <= wordX + wordRect.width) {\n            word.classList.add('highlight');\n          }\n        });\n      }\n    });\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 专门用于移除鼠标跟随事件的函数\n  const removeMouseFollowListeners = () => {\n    // 移除记录的所有监听器\n    if (window.eventTracker && window.eventTracker.mouseFollowHandlers) {\n      window.eventTracker.mouseFollowHandlers.forEach(({\n        element,\n        event,\n        handler\n      }) => {\n        if (element && element.removeEventListener) {\n          element.removeEventListener(event, handler);\n        }\n      });\n      window.eventTracker.mouseFollowHandlers = [];\n    }\n\n    // 为安全起见，尝试从document和内容区域移除通用处理函数\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    }\n    document.removeEventListener('mousemove', handleMouseMove);\n\n    // 清除所有当前高亮\n    clearAllHighlights();\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n\n    // 添加底部翻页控件样式\n    const bottomPaginationStyles = document.createElement('style');\n    bottomPaginationStyles.id = 'bottom-pagination-styles';\n    bottomPaginationStyles.innerHTML = `\n      .bottom-pagination {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        padding: 20px 0 30px;\n        margin-top: 30px;\n        width: 100%;\n        background-color: transparent;\n        border-radius: 5px;\n      }\n\n      .bottom-pagination .page-btn {\n        background-color: #6c5ce7;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        padding: 8px 15px;\n        margin: 0 10px;\n        cursor: pointer;\n        font-size: 14px;\n        transition: background-color 0.2s ease;\n      }\n\n      .bottom-pagination .page-btn:hover {\n        background-color: #4834d4;\n      }\n\n      .bottom-pagination .page-btn:disabled {\n        background-color: #aaa;\n        cursor: not-allowed;\n      }\n\n      .bottom-pagination .page-info {\n        font-size: 14px;\n        margin: 0 10px;\n      }\n    `;\n    document.head.appendChild(bottomPaginationStyles);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n    addComfortable3DStyles();\n\n    // 添加鼠标跟随模式的样式\n    const mouseFollowStyle = document.createElement('style');\n    mouseFollowStyle.id = 'intelligent-mouse-follow-style';\n    mouseFollowStyle.textContent = `\n      /* 基础样式 */\n      .mouse-follow-content {\n        position: relative;\n        line-height: 1.8;\n      }\n      \n      .mouse-follow-content .follow-line {\n        position: relative;\n        padding: 8px 16px;\n        margin: 4px 0;\n        border-radius: 6px;\n        transition: all 0.2s ease;\n        display: block;\n        min-height: 1.8em;\n        white-space: normal;\n        word-wrap: break-word;\n        text-indent: 2em;\n      }\n      \n      /* 高亮状态 */\n      .follow-line.highlighted {\n        background-color: #ffa500 !important; /* 橙色背景 */\n        color: #ffffff !important; /* 白色文字 */\n        font-weight: bold !important;\n        font-size: 1.1em; /* 稍微调小字号 */\n        transform: translateX(5px);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n      }\n      \n      \n      /* 平滑过渡效果 */\n      .follow-line {\n        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n      }\n      \n      /* 行间距优化 */\n      .mouse-follow-content .follow-line + .follow-line {\n        margin-top: 4px;\n      }\n      \n      /* 添加行指示器 */\n      .follow-line::before {\n        content: '';\n        position: absolute;\n        left: 0;\n        top: 0;\n        bottom: 0;\n        width: 3px;\n        background: linear-gradient(to bottom, transparent, rgba(255, 255, 255, 0.5), transparent);\n        opacity: 0;\n        transition: opacity 0.2s ease;\n      }\n      \n      .follow-line.highlighted::before {\n        opacity: 1;\n      }\n    `;\n    document.head.appendChild(mouseFollowStyle);\n\n    // 创建深色背景下的ADHD友好高亮样式\n    const style = document.createElement('style');\n    style.id = 'adhd-friendly-highlight-style';\n    style.textContent = `\n      /* ADHD友好的高亮样式 - 适配深色背景 */\n      .adhd-highlight-mode {\n        line-height: 1.8;\n        padding: 20px;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph {\n        margin-bottom: 1.2em;\n        background-color: transparent;\n        padding: 12px 15px;\n        border-radius: 6px;\n        border-left: 3px solid rgba(255, 255, 255, 0.2);\n        transition: all 0.3s ease;\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover {\n        transform: translateX(5px);\n        border-left-color: rgba(255, 255, 255, 0.4);\n      }\n      \n      /* 加粗样式 - 白色加粗 */\n      .adhd-bold {\n        font-weight: 700;\n        color: #ffffff;\n        letter-spacing: 0.02em;\n        font-size: 1.1em;\n        text-shadow: 0 0 1px rgba(255, 255, 255, 0.2);\n      }\n      \n      /* 彩色样式 - 使用鲜明的蓝色 */\n      .adhd-colored {\n        color: #6c5ce7;\n        font-weight: 500;\n        font-size: 1.05em;\n        text-shadow: 0 0 1px rgba(108, 92, 231, 0.2);\n      }\n      \n      /* 正常样式 - 普通白色 */\n      .adhd-normal {\n        color: rgba(255, 255, 255, 0.8);\n        font-size: 1em;\n      }\n\n      /* 添加平滑过渡效果 */\n      .adhd-bold, .adhd-colored, .adhd-normal {\n        transition: all 0.2s ease;\n      }\n\n      /* 悬停效果 */\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-bold {\n        color: #ffffff;\n        text-shadow: 0 0 2px rgba(255, 255, 255, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-colored {\n        color: #8a7ff7;\n        text-shadow: 0 0 2px rgba(138, 127, 247, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-normal {\n        color: rgba(255, 255, 255, 0.9);\n      }\n\n      /* 添加段落间距的视觉引导 */\n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph {\n        margin-top: 1.5em;\n        position: relative;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph::before {\n        content: '';\n        position: absolute;\n        top: -0.75em;\n        left: 0;\n        right: 0;\n        height: 1px;\n        background: linear-gradient(\n          to right,\n          transparent,\n          rgba(255, 255, 255, 0.1),\n          transparent\n        );\n      }\n    `;\n    document.head.appendChild(style);\n\n    // 添加基础鼠标跟随样式\n    const mouseFollowPageStyle = document.createElement('style');\n    mouseFollowPageStyle.id = 'basic-mouse-follow-style';\n    mouseFollowPageStyle.textContent = `\n      .follow-line {\n        padding: 8px 12px;\n        margin: 4px 0;\n        border-radius: 4px;\n        transition: background-color 0.2s ease;\n      }\n      .follow-line.highlighted {\n        background-color: #ffa500;\n        color: #000080;\n        font-weight: bold;\n      }\n    `;\n    document.head.appendChild(mouseFollowPageStyle);\n    return () => {\n      const existingStyle = document.getElementById('adhd-friendly-highlight-style');\n      if (existingStyle) existingStyle.remove();\n      const existingMouseFollowStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (existingMouseFollowStyle) existingMouseFollowStyle.remove();\n      const existingBasicMouseFollowStyle = document.getElementById('basic-mouse-follow-style');\n      if (existingBasicMouseFollowStyle) existingBasicMouseFollowStyle.remove();\n      mouseFollowPageStyle.remove();\n    };\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 清理旧监听器\n    removeMouseFollowListeners();\n\n    // 添加新监听器\n    setTimeout(() => {\n      addMouseFollowListeners();\n\n      // 添加调试辅助 - 显示行边界\n      const contentArea = document.querySelector('.mouse-follow-content');\n      if (contentArea) {\n        const lines = contentArea.querySelectorAll('.follow-line');\n        console.log(`初始化鼠标跟随模式，共 ${lines.length} 行`);\n\n        // 可选：启用可视化调试\n        if (false) {\n          // 设置为true可以启用可视化调试\n          lines.forEach((line, index) => {\n            line.style.border = '1px dashed #888';\n            line.setAttribute('title', `行 ${index + 1}`);\n          });\n        }\n\n        // 验证行高亮效果\n        const firstLine = lines[0];\n        if (firstLine) {\n          console.log('行样式验证:', {\n            padding: window.getComputedStyle(firstLine).padding,\n            margin: window.getComputedStyle(firstLine).margin,\n            fontSize: window.getComputedStyle(firstLine).fontSize,\n            lineHeight: window.getComputedStyle(firstLine).lineHeight\n          });\n        }\n      }\n    }, 100);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = delta => {\n    window.autoReader.speed = Math.max(100, window.autoReader.speed + delta);\n    if (window.autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async delta => {\n    console.log(`翻页请求: 当前页 ${currentPage}, 增量 ${delta}`);\n    const newPage = currentPage + delta;\n    if (newPage < 1 || newPage > totalPages) {\n      console.log('无效页码，不执行翻页');\n      return;\n    }\n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n    const wasFlashReading = readingMode === 'flash-reading' && window.flashReader && window.flashReader.isPlaying;\n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    if (wasFlashReading && window.flashReader) {\n      window.flashReader.cleanup();\n    }\n\n    // 更新页码\n    setCurrentPage(newPage);\n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n\n      // 检查是否为目录页\n      const textContent = await page.getTextContent();\n      const isToc = await detectIfTocPage(textContent);\n      setIsTableOfContents(isToc);\n      if (isToc) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, page.getViewport({\n          scale: 1.0\n        }));\n      } else {\n        // 处理正文页面 - 根据当前阅读模式处理\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n\n        // 根据当前模式设置内容\n        if (readingMode === 'static') {\n          console.log('翻页后应用静态高亮模式');\n          const processedContent = formatSimpleHighlightedText(sentences);\n          setContent(processedContent);\n\n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n            if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n\n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n              }\n            }\n          }, 200);\n        } else if (readingMode === 'flash-reading') {\n          // 如果是闪读模式，则需要特殊处理\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n\n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n\n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n          return; // 已处理，直接返回\n        } else {\n          // 其他模式使用原处理函数\n          await processContentPage(page, readingMode);\n        }\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n    } catch (error) {\n      console.error('页面切换错误:', error);\n    }\n  };\n\n  // ADHD友好的静态高亮处理函数\n  const formatSimpleHighlightedText = sentences => {\n    console.log('开始处理ADHD友好的静态高亮文本，句子数量:', sentences.length);\n    let html = '<div class=\"pdf-content adhd-highlight-mode\">';\n    sentences.forEach((sentence, sentenceIndex) => {\n      if (!sentence || sentence.trim() === '') {\n        console.log(`跳过空句子，索引: ${sentenceIndex}`);\n        return;\n      }\n\n      // 清理和规范化文本\n      const cleanText = sentence.trim().replace(/\\s+/g, ' ') // 规范化空白字符\n      .replace(/&/g, '&amp;') // 转义特殊字符\n      .replace(/</g, '&lt;').replace(/>/g, '&gt;');\n\n      // 处理句子中的单词，为它们添加不同样式\n      const words = cleanText.split(/(\\s+)/);\n      let formattedSentence = '';\n      words.forEach((word, wordIndex) => {\n        if (word.trim() === '') {\n          // 保留空格\n          formattedSentence += word;\n        } else {\n          // 根据位置应用不同的样式类\n          // 三种交替样式: 加粗、彩色、正常\n          const styleClass = wordIndex % 3 === 0 ? 'adhd-bold' : wordIndex % 3 === 1 ? 'adhd-colored' : 'adhd-normal';\n          formattedSentence += `<span class=\"${styleClass}\">${word}</span>`;\n        }\n      });\n      console.log(`处理句子 ${sentenceIndex + 1}:`, cleanText.substring(0, 50) + '...');\n      html += `<p class=\"pdf-paragraph\">${formattedSentence}</p>`;\n    });\n    html += '</div>';\n\n    // 调试输出\n    console.log('生成的ADHD友好静态高亮HTML:', html.substring(0, 200) + '...');\n    return html;\n  };\n\n  // 根据阅读模式获取相应的内容处理函数\n  const getContentHandlerForMode = mode => {\n    switch (mode) {\n      case 'normal':\n        return formatSentencesToHtml;\n      case 'static':\n        return applyStaticHighlightToSentences;\n      case 'follow-mouse':\n        return formatSentencesForMouseFollow;\n      case 'comfortable-3d':\n        return applyComfortable3dEffectToSentences;\n      case 'flash-reading':\n        return sentences => {\n          // 闪读模式使用专门的分割函数重新处理文本\n          return createFlashReadingContentFromSentences(sentences);\n        };\n      default:\n        return formatSentencesToHtml;\n    }\n  };\n\n  // 监听阅读模式和当前页面的变化\n  useEffect(() => {\n    if (readingMode === 'mouse-follow' && currentPage && !isTableOfContents) {\n      // 移除之前的样式\n      const oldStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (oldStyle) {\n        oldStyle.remove();\n      }\n\n      // 添加基础鼠标跟随样式\n      const followModeStyle = document.createElement('style');\n      followModeStyle.id = 'basic-mouse-follow-style';\n      followModeStyle.textContent = `\n        .follow-line {\n          padding: 8px 12px;\n          margin: 4px 0;\n          border-radius: 4px;\n          transition: background-color 0.2s ease;\n        }\n        .follow-line.highlighted {\n          background-color: #ffa500;\n          color: #000080;\n          font-weight: bold;\n        }\n      `;\n      document.head.appendChild(followModeStyle);\n\n      // 处理当前页面内容\n      const page = pdfDocument.getPage(currentPage);\n      const textContent = page.getTextContent();\n      const sentences = textContent.items.map(item => item.str).join(' ').split(/[。！？]/).filter(s => s.trim());\n\n      // 应用基础鼠标跟随格式化\n      setContent(formatSentencesForMouseFollow(sentences));\n\n      // 添加鼠标跟随监听器\n      setTimeout(() => {\n        addMouseFollowListeners();\n      }, 100);\n      return () => {\n        followModeStyle.remove();\n      };\n    }\n  }, [readingMode, currentPage, pdfDocument]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3121,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reading-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u9605\\u8BFB\\u6A21\\u5F0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"reading-mode-select\",\n          value: readingMode,\n          onChange: handleReadingModeChange,\n          className: \"mode-select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"normal\",\n            children: \"\\u666E\\u901A\\u6A21\\u5F0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3132,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"static\",\n            children: \"\\u9759\\u6001\\u9AD8\\u4EAE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3133,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"follow-mouse\",\n            children: \"\\u9F20\\u6807\\u8DDF\\u968F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3134,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"rhythm\",\n            children: \"\\u8282\\u594F\\u9605\\u8BFB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3135,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"flash-reading\",\n            children: \"\\u95EA\\u8BFB\\u6A21\\u5F0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3136,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 3126,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".pdf,.txt,.md\",\n          hidden: true,\n          id: \"file-upload\",\n          onChange: handleFileUpload,\n          ref: fileRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3141,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"upload-btn\",\n          onClick: () => fileRef.current.click(),\n          children: \"\\u4E0A\\u4F20\\u6587\\u4EF6 (.pdf/.txt/.md)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3149,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3140,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 3119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toolbar\",\n        children: fileName && /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"filename\",\n          children: fileName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3160,\n          columnNumber: 24\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-content\",\n        ref: readerContainerRef,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: content\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3165,\n          columnNumber: 13\n        }, this), totalPages > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bottom-pagination\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => changePage(-1),\n            disabled: currentPage <= 1,\n            className: \"page-btn\",\n            children: \"\\u4E0A\\u4E00\\u9875\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3169,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"page-info\",\n            children: [\"\\u7B2C \", currentPage, \" / \", totalPages, \" \\u9875\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 3176,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => changePage(1),\n            disabled: currentPage >= totalPages,\n            className: \"page-btn\",\n            children: \"\\u4E0B\\u4E00\\u9875\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3179,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 3168,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3164,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 3158,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 3118,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"x5N0itQI0gqtA84jt63lPsdPeRI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","pdfjsLib","pdfjsViewer","marked","pdfjs","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","window","currentPage","totalPages","changePage","eventTracker","mouseFollowHandlers","autoReader","charPositions","intervalId","currentIndex","speed","pageContainer","isScrolling","isPageChanging","cleanup","rhythmReaderGlobal","active","console","log","addControlPanel","existingPanel","document","getElementById","remove","panel","createElement","id","style","cssText","label","textContent","fontWeight","appendChild","pauseButton","onclick","rhythmReader","pause","background","resume","speedContainer","display","alignItems","marginLeft","speedLabel","marginRight","speedInput","type","min","max","step","value","width","oninput","parseInt","setSpeed","body","showNotification","message","notification","setTimeout","opacity","transition","readIndices","Set","charElements","start","pdfContent","querySelector","error","tagName","className","textNodes","findTextNodes","length","processedCount","forEach","node","text","nodeValue","fragment","createDocumentFragment","i","char","span","dataset","rhythmIndex","trim","whitespace","push","parentNode","replaceChild","clear","updateTextColors","scrollToCurrentChar","setInterval","moveToNextChar","addEventListener","handleKeyDown","clearInterval","newSpeed","stop","removeEventListener","charSpans","querySelectorAll","parentMap","Map","parent","has","set","get","spans","sort","a","b","indexA","indexB","map","join","textNode","createTextNode","removeChild","element","collection","excludeTags","includes","childNodes","nodeType","Node","TEXT_NODE","ELEMENT_NODE","toLowerCase","test","e","key","preventDefault","index","color","add","rect","getBoundingClientRect","scrollTo","top","scrollY","innerHeight","behavior","originalReadingModeChanged","readingModeChanged","mode","setupSelectors","selects","select","initialize","readyState","activateRhythmReadingMode","alert","initializeRhythmReading","startRhythmReading","App","_s","pages","setPages","setCurrentPage","setTotalPages","fileName","setFileName","loading","setLoading","fileRef","file","setFile","pdfInstance","setPdfInstance","extractedTextPages","setExtractedTextPages","readingMode","setReadingMode","posMode","setPosMode","markdownContent","setMarkdownContent","readerContainerRef","content","setContent","pdfDocument","setPdfDocument","isTableOfContents","setIsTableOfContents","applyDarkBackground","classList","head","restoreDarkBackground","addNakedEye3DStyles","addComfortable3DStyles","addFlashReadingStyles","initializeFlashReading","sentences","flashReadingSentences","Array","isArray","speedSlider","speedValue","playButton","stopButton","prevButton","nextButton","progress","cover","flashReader","interval","isPlaying","disabled","displayCurrentSentence","currentSentence","displayRect","height","updateSpeed","localStorage","setItem","prevSentence","nextSentence","target","savedSpeed","getItem","initialSpeed","createFlashReadingContent","formatTextToHtml","paragraphs","split","html","paragraph","formatTextForMouseFollow","words","processedParagraph","word","applyStaticHighlight","lastColor","Math","random","applyNakedEye3dEffect","applyComfortable3dEffect","effectTypes","effectClass","floor","initializeNakedEye3D","textElements","delay","animationDelay","addMouseFollowListeners","contentArea","lastHighlightedLine","mouseMoveHandler","mouseY","clientY","allLines","foundLine","minDistance","Infinity","line","lineCenter","distance","abs","bottom","substring","mouseLeaveHandler","event","handler","initializeMouseFollow","handlePdfFile","fileURL","URL","createObjectURL","loadingTask","getDocument","pdf","promise","numPages","extractAndProcessPage","pageNum","page","getPage","getTextContent","viewport","getViewport","scale","detectIfTocPage","processTocPage","processContentPage","textItems","items","fullText","item","str","hasTocKeywords","hasPageNumberPatterns","shortLinesCount","linesWithNumbersCount","lineMap","yKey","round","transform","lines","values","lineText","shortLineRatio","numberLineRatio","htmlContent","x","y","fontSize","sqrt","fontName","spacedText","getTextNodeAtPosition","nodes","range","createRange","selectNodeContents","rects","getClientRects","j","left","right","found","processTextWithHighlight","result","extractedText","replace","splitIntoSentences","processedContent","formatSentencesToHtml","formatSimpleHighlightedText","formatSentencesForMouseFollow","applyComfortable3dEffectToSentences","createFlashReadingContentFromSentences","firstPara","styles","getComputedStyle","backgroundColor","fontFamily","sentenceRegex","lastIndex","match","exec","endIndex","sentence","lastSentence","splitIntoFlashReadingSegments","segments","segment","lastSegment","applyStaticHighlightToSentences","processedSentence","handleTxtFile","name","handleMarkdownFile","parse","p","parseError","tempDiv","innerHTML","plainText","innerText","handleFileUpload","uploadedFile","files","endsWith","getAllCharacterPositions","container","walker","createTreeWalker","NodeFilter","SHOW_TEXT","positions","nextNode","currentNode","setStart","setEnd","warn","filter","yDiff","scrollElementToCenter","elementY","isContainerScrollable","scrollHeight","clientHeight","overflowY","targetScrollTop","containerVisibleHeight","absoluteElementY","createReaderCursor","cursor","isSentenceEnd","charPosition","sentenceEndMarks","nextIndex","findSentenceStart","prev","current","isInVisibleArea","threshold","visibleTop","scrollTop","visibleBottom","topThreshold","bottomThreshold","startAutoReader","contentContainer","position","highlight","borderRadius","pointerEvents","zIndex","lineHeight","lastScrolledY","scrollSafeZone","charWidth","charHeight","xDiff","_window$autoReader$ch","stopAutoReader","pos","contentRect","relativeX","relativeY","isInRecentlyScrolledArea","needsScroll","scrollAmount","scrollBy","absoluteY","initializeAutoReader","handleReadingModeChange","newMode","prevMode","getContentHandlerForMode","cleanupDOM","removeMouseFollowListeners","comfortable3DElements","el","flashReadingElements","highlights","_contentArea$querySel","bottomPagination","contentHTML","newContentArea","cloneNode","newContentContainer","newBottomPagination","prevBtn","nextBtn","removeAttribute","elementsToRemove","handleAutoScroll","updateCursorPosition","force","handleMouseMove","clientX","clearAllHighlights","paragraphRect","paragraphX","paragraphY","wordRect","wordX","addAutoReaderStyles","bottomPaginationStyles","mouseFollowStyle","mouseFollowPageStyle","existingStyle","existingMouseFollowStyle","existingBasicMouseFollowStyle","border","setAttribute","firstLine","padding","margin","adjustSpeed","delta","newPage","wasRhythmReading","wasFlashReading","isToc","sentenceIndex","cleanText","formattedSentence","wordIndex","styleClass","oldStyle","followModeStyle","s","children","_jsxFileName","lineNumber","columnNumber","onChange","accept","hidden","ref","onClick","click","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["D:/adhd-read-helper/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 添加全局事件跟踪对象\nwindow.eventTracker = window.eventTracker || {\n  mouseFollowHandlers: []\n};\n\n// 自动阅读器全局对象\nwindow.autoReader = {\n  charPositions: [],\n  intervalId: null,\n  currentIndex: 0,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false,\n  cleanup: null\n};\n\n// 添加新的节奏阅读模式代码\n// 全局变量，确保在页面切换后仍然保持状态\nwindow.rhythmReaderGlobal = window.rhythmReaderGlobal || {\n  active: false,\n  speed: 300\n};\n\n// 节奏阅读模式 - 最终修复版\n(function() {\n  console.log(\"节奏阅读模式初始化 - 最终修复版\");\n  \n  // 创建控制面板 - 只有暂停/继续按钮\n  const addControlPanel = function() {\n    // 如果已存在，先移除\n    const existingPanel = document.getElementById('rhythm-control-panel');\n    if (existingPanel) existingPanel.remove();\n    \n    // 创建新的控制面板\n    const panel = document.createElement('div');\n    panel.id = 'rhythm-control-panel';\n    panel.style.cssText = `\n      position: fixed;\n      bottom: 20px;\n      right: 20px;\n      background-color: rgba(0, 0, 0, 0.8);\n      color: white;\n      padding: 10px 15px;\n      border-radius: 5px;\n      z-index: 99999;\n      font-size: 14px;\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      box-shadow: 0 2px 8px rgba(0,0,0,0.4);\n    `;\n    \n    // 标签\n    const label = document.createElement('span');\n    label.textContent = \"节奏阅读:\";\n    label.style.fontWeight = 'bold';\n    panel.appendChild(label);\n    \n    // 暂停/继续按钮\n    const pauseButton = document.createElement('button');\n    pauseButton.id = 'rhythm-pause-button';\n    pauseButton.textContent = \"暂停\";\n    pauseButton.style.cssText = `\n      padding: 5px 12px;\n      background: #2196F3;\n      color: white;\n      border: none;\n      border-radius: 3px;\n      cursor: pointer;\n      font-size: 13px;\n      font-weight: bold;\n      transition: background 0.2s;\n    `;\n    pauseButton.onclick = function() {\n      if (rhythmReader.intervalId) {\n        // 当前正在运行，暂停它\n        rhythmReader.pause();\n        this.textContent = \"继续\";\n        this.style.background = \"#4CAF50\";\n      } else if (rhythmReader.active) {\n        // 当前暂停中，继续\n        rhythmReader.resume();\n        this.textContent = \"暂停\";\n        this.style.background = \"#2196F3\";\n      }\n    };\n    panel.appendChild(pauseButton);\n    \n    // 速度控制\n    const speedContainer = document.createElement('div');\n    speedContainer.style.display = 'flex';\n    speedContainer.style.alignItems = 'center';\n    speedContainer.style.marginLeft = '5px';\n    \n    const speedLabel = document.createElement('span');\n    speedLabel.textContent = \"速度:\";\n    speedLabel.style.marginRight = '5px';\n    speedContainer.appendChild(speedLabel);\n    \n    const speedInput = document.createElement('input');\n    speedInput.type = 'range';\n    speedInput.min = '50';\n    speedInput.max = '600';\n    speedInput.step = '50';\n    speedInput.value = rhythmReader.speed;\n    speedInput.style.width = '80px';\n    \n    speedInput.oninput = function() {\n      const speed = parseInt(this.value);\n      rhythmReader.setSpeed(speed);\n    };\n    speedContainer.appendChild(speedInput);\n    \n    panel.appendChild(speedContainer);\n    \n    // 添加到文档\n    document.body.appendChild(panel);\n    console.log(\"控制面板已创建\");\n    return panel;\n  };\n  \n  // 简单通知\n  const showNotification = function(message) {\n    const notification = document.createElement('div');\n    notification.style.cssText = `\n      position: fixed;\n      top: 20px;\n      left: 50%;\n      transform: translateX(-50%);\n      background-color: rgba(0, 0, 0, 0.8);\n      color: white;\n      padding: 10px 20px;\n      border-radius: 4px;\n      z-index: 100000;\n      font-size: 14px;\n      box-shadow: 0 2px 8px rgba(0,0,0,0.3);\n    `;\n    notification.textContent = message;\n    document.body.appendChild(notification);\n    \n    setTimeout(() => {\n      notification.style.opacity = '0';\n      notification.style.transition = 'opacity 0.5s';\n      setTimeout(() => notification.remove(), 500);\n    }, 2000);\n  };\n  \n  // 节奏阅读核心功能\n  const rhythmReader = {\n    active: false,\n    intervalId: null,\n    speed: 300,\n    currentIndex: 0,\n    readIndices: new Set(),\n    charElements: [],\n    \n    // 启动功能\n    start: function() {\n      if (this.active) {\n        return;\n      }\n      \n      console.log(\"开始节奏阅读...\");\n      \n      // 找到PDF内容容器 - 使用多种选择器确保可靠性\n      const pdfContent = document.querySelector('.pdf-content') || \n                        document.querySelector('[class*=\"pdf-content\"]') || \n                        document.querySelector('[id*=\"pdf\"]') || \n                        document.querySelector('article') || \n                        document.querySelector('main');\n      \n      if (!pdfContent) {\n        console.error(\"未找到内容容器\");\n        showNotification(\"错误：未找到内容容器\");\n        return;\n      }\n      \n      console.log(`找到内容容器: ${pdfContent.tagName} ${pdfContent.className || pdfContent.id || ''}`);\n      \n      // 设置为活动状态\n      this.active = true;\n      \n      // 初始化文本节点\n      this.charElements = [];\n      \n      // 查找所有文本节点\n      const textNodes = [];\n      this.findTextNodes(pdfContent, textNodes);\n      \n      if (textNodes.length === 0) {\n        console.error(\"未找到文本节点\");\n        showNotification(\"错误：未找到文本节点\");\n        this.active = false;\n        return;\n      }\n      \n      console.log(`找到 ${textNodes.length} 个文本节点`);\n      \n      // 为每个文本节点创建字符span\n      let processedCount = 0;\n      textNodes.forEach(node => {\n        const text = node.nodeValue;\n        if (!text) return;\n        \n        const fragment = document.createDocumentFragment();\n        \n        for (let i = 0; i < text.length; i++) {\n          const char = text[i];\n          const span = document.createElement('span');\n          span.textContent = char;\n          span.className = 'rhythm-char';\n          span.dataset.rhythmIndex = this.charElements.length;\n          \n          if (char.trim() === '') {\n            span.dataset.whitespace = 'true';\n          }\n          \n          span.style.cssText = `\n            display: inline;\n            margin: 0;\n            padding: 0;\n            border: none;\n            background-color: transparent;\n          `;\n          \n          fragment.appendChild(span);\n          this.charElements.push(span);\n        }\n        \n        if (node.parentNode) {\n          node.parentNode.replaceChild(fragment, node);\n          processedCount++;\n        }\n      });\n      \n      console.log(`处理了 ${processedCount}/${textNodes.length} 个文本节点`);\n      \n      if (this.charElements.length === 0) {\n        console.error(\"未能创建字符span\");\n        showNotification(\"错误：未能创建字符span\");\n        this.active = false;\n        return;\n      }\n      \n      console.log(`创建了 ${this.charElements.length} 个字符span`);\n      \n      // 创建控制面板\n      addControlPanel();\n      \n      // 重置位置\n      this.currentIndex = 0;\n      this.readIndices.clear();\n      \n      // 更新颜色\n      this.updateTextColors();\n      \n      // 滚动到开始位置\n      this.scrollToCurrentChar();\n      \n      // 设置间隔\n      this.intervalId = setInterval(() => this.moveToNextChar(), this.speed);\n      \n      // 添加键盘控制\n      document.addEventListener('keydown', this.handleKeyDown);\n      \n      showNotification(\"节奏阅读模式已启动\");\n    },\n    \n    // 暂停功能\n    pause: function() {\n      if (!this.active || !this.intervalId) return;\n      \n      clearInterval(this.intervalId);\n      this.intervalId = null;\n      \n      showNotification(\"节奏阅读已暂停\");\n      console.log(\"节奏阅读已暂停\");\n    },\n    \n    // 继续功能\n    resume: function() {\n      if (!this.active || this.intervalId) return;\n      \n      this.intervalId = setInterval(() => this.moveToNextChar(), this.speed);\n      \n      showNotification(\"节奏阅读已继续\");\n      console.log(\"节奏阅读已继续\");\n    },\n    \n    // 设置速度\n    setSpeed: function(newSpeed) {\n      this.speed = newSpeed;\n      \n      // 如果正在运行，重新设置间隔\n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = setInterval(() => this.moveToNextChar(), this.speed);\n      }\n      \n      console.log(`节奏阅读速度已设置为 ${newSpeed}ms`);\n    },\n    \n    // 停止功能 - 只会在切换模式时内部调用\n    stop: function() {\n      if (!this.active) return;\n      \n      console.log(\"停止节奏阅读模式\");\n      \n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n      }\n      \n      this.active = false;\n      \n      // 移除键盘事件监听\n      document.removeEventListener('keydown', this.handleKeyDown);\n      \n      // 恢复原始文本\n      const charSpans = document.querySelectorAll('.rhythm-char');\n      \n      if (charSpans.length > 0) {\n        console.log(`恢复 ${charSpans.length} 个字符span`);\n        \n        // 按父节点分组\n        const parentMap = new Map();\n        \n        charSpans.forEach(span => {\n          const parent = span.parentNode;\n          if (!parent) return;\n          \n          if (!parentMap.has(parent)) {\n            parentMap.set(parent, []);\n          }\n          parentMap.get(parent).push(span);\n        });\n        \n        // 恢复文本\n        parentMap.forEach((spans, parent) => {\n          if (spans.length === 0) return;\n          \n          // 排序spans确保顺序正确\n          spans.sort((a, b) => {\n            const indexA = parseInt(a.dataset.rhythmIndex || '0');\n            const indexB = parseInt(b.dataset.rhythmIndex || '0');\n            return indexA - indexB;\n          });\n          \n          // 合并文本\n          const text = spans.map(span => span.textContent).join('');\n          const textNode = document.createTextNode(text);\n          \n          // 替换节点\n          if (spans[0].parentNode === parent) {\n            parent.replaceChild(textNode, spans[0]);\n            for (let i = 1; i < spans.length; i++) {\n              if (spans[i].parentNode === parent) {\n                parent.removeChild(spans[i]);\n              }\n            }\n          }\n        });\n      }\n      \n      // 重置\n      this.charElements = [];\n      \n      // 移除控制面板\n      const panel = document.getElementById('rhythm-control-panel');\n      if (panel) panel.remove();\n    },\n    \n    // 查找文本节点\n    findTextNodes: function(element, collection) {\n      // 排除这些标签\n      const excludeTags = ['BUTTON', 'INPUT', 'SELECT', 'TEXTAREA', 'SCRIPT', 'STYLE', 'NAV', 'HEADER', 'FOOTER'];\n      \n      if (excludeTags.includes(element.tagName)) return;\n      \n      for (let i = 0; i < element.childNodes.length; i++) {\n        const node = element.childNodes[i];\n        \n        // 文本节点且有内容\n        if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() !== '') {\n          collection.push(node);\n        } \n        // 元素节点且不是UI元素\n        else if (node.nodeType === Node.ELEMENT_NODE && !excludeTags.includes(node.tagName)) {\n          // 排除明显的UI元素\n          const className = (node.className || '').toLowerCase();\n          const id = (node.id || '').toLowerCase();\n          \n          if (!/nav|menu|button|control|header|footer/i.test(className) && \n              !/nav|menu|button|control|header|footer/i.test(id)) {\n            this.findTextNodes(node, collection);\n          }\n        }\n      }\n    },\n    \n    // 键盘事件处理\n    handleKeyDown: function(e) {\n      // 空格键 - 暂停/继续\n      if (e.key === ' ' && rhythmReader.active) {\n        e.preventDefault();\n        \n        const pauseButton = document.getElementById('rhythm-pause-button');\n        \n        if (rhythmReader.intervalId) {\n          rhythmReader.pause();\n          if (pauseButton) {\n            pauseButton.textContent = \"继续\";\n            pauseButton.style.background = \"#4CAF50\";\n          }\n        } else {\n          rhythmReader.resume();\n          if (pauseButton) {\n            pauseButton.textContent = \"暂停\";\n            pauseButton.style.background = \"#2196F3\";\n          }\n        }\n      }\n    },\n    \n    // 更新颜色\n    updateTextColors: function() {\n      if (this.charElements.length === 0) return;\n      \n      this.charElements.forEach((span, index) => {\n        let color, fontWeight = 'inherit';\n        \n        if (index === this.currentIndex) {\n          color = '#00aa00'; // 当前字符 - 绿色\n          fontWeight = 'bold';\n        } else if (index === this.currentIndex + 1 || index === this.currentIndex + 2) {\n          color = '#aaaaaa'; // 下一个字符 - 灰色\n        } else if (this.readIndices.has(index)) {\n          color = '#ffffff'; // 已读字符 - 白色\n        } else {\n          color = 'rgba(160, 160, 160, 0.25)'; // 未读字符 - 淡灰色\n        }\n        \n        span.style.color = color;\n        span.style.fontWeight = fontWeight;\n      });\n    },\n    \n    // 移动到下一个字符\n    moveToNextChar: function() {\n      if (!this.active || this.charElements.length === 0) return;\n      \n      this.readIndices.add(this.currentIndex);\n      \n      do {\n        this.currentIndex++;\n        \n        if (this.currentIndex >= this.charElements.length) {\n          showNotification(\"已到达文本末尾\");\n          this.stop();\n          return;\n        }\n      } while (\n        this.currentIndex < this.charElements.length && \n        this.charElements[this.currentIndex] && \n        this.charElements[this.currentIndex].dataset.whitespace === 'true'\n      );\n      \n      this.updateTextColors();\n      this.scrollToCurrentChar();\n    },\n    \n    // 滚动到当前字符\n    scrollToCurrentChar: function() {\n      const span = this.charElements[this.currentIndex];\n      if (!span) return;\n      \n      const rect = span.getBoundingClientRect();\n      \n      window.scrollTo({\n        top: window.scrollY + rect.top - (window.innerHeight * 0.4),\n        behavior: 'smooth'\n      });\n    }\n  };\n  \n  // 模式切换处理\n  const originalReadingModeChanged = window.readingModeChanged;\n  \n  window.readingModeChanged = function(mode) {\n    console.log(`模式变更为: ${mode}`);\n    \n    // 如果不是节奏阅读模式，则停止节奏阅读\n    if (mode !== 'rhythm' && mode !== 'rhythmReading') {\n      if (rhythmReader.active) {\n        rhythmReader.stop();\n        showNotification(\"节奏阅读模式已关闭\");\n      }\n    }\n    \n    // 调用原始函数\n    if (typeof originalReadingModeChanged === 'function') {\n      try {\n        originalReadingModeChanged(mode);\n      } catch(e) {\n        console.error(\"原始函数错误:\", e);\n      }\n    }\n    \n    // 如果是节奏阅读模式，启动\n    if (mode === 'rhythm' || mode === 'rhythmReading') {\n      console.log(\"选择了节奏阅读模式，立即启动\");\n      // 延迟一点启动，确保其他模式切换操作完成\n      setTimeout(() => {\n        rhythmReader.start();\n      }, 100);\n    }\n  };\n  \n  // 将对象暴露到全局\n  window.rhythmReader = rhythmReader;\n  \n  // 监听下拉菜单变化\n  const setupSelectors = function() {\n    const selects = document.querySelectorAll('select');\n    selects.forEach(select => {\n      select.addEventListener('change', function() {\n        const value = this.value || '';\n        console.log(`下拉菜单值变化: ${value}`);\n        \n        if (value.includes('rhythm') || value.includes('节奏')) {\n          console.log(\"从下拉菜单选择了节奏阅读模式\");\n          setTimeout(() => rhythmReader.start(), 100);\n        } else if (rhythmReader.active) {\n          rhythmReader.stop();\n        }\n      });\n    });\n  };\n  \n  // 初始化\n  const initialize = function() {\n    console.log(\"初始化节奏阅读组件...\");\n    setupSelectors();\n    \n    // 检查当前是否已选择节奏阅读模式\n    setTimeout(function() {\n      // 通过下拉菜单检测\n      const selects = document.querySelectorAll('select');\n      for (const select of selects) {\n        const value = (select.value || '').toLowerCase();\n        if (value.includes('rhythm') || value.includes('节奏')) {\n          console.log(\"检测到已选择节奏阅读模式:\", value);\n          rhythmReader.start();\n          return;\n        }\n      }\n    }, 500);\n  };\n  \n  // 确保初始化在DOM加载后执行\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initialize);\n  } else {\n    initialize();\n  }\n  \n  console.log(\"节奏阅读模式初始化完成\");\n})();\n\n// 定义一个全局函数用于从应用代码中启动节奏阅读\nwindow.activateRhythmReadingMode = function() {\n  console.log(\"尝试从应用代码中启动节奏阅读模式\");\n  if (window.rhythmReader) {\n    if (window.rhythmReader.active) {\n      console.log(\"节奏阅读模式已经在运行\");\n    } else {\n      window.rhythmReader.start();\n    }\n  } else {\n    console.error(\"节奏阅读模式未初始化\");\n    alert(\"无法启动节奏阅读模式：组件未初始化\");\n  }\n};\n\n// 更新初始化函数\nconst initializeRhythmReading = () => {\n  // 不再自动初始化，而是等待用户选择\n  console.log(\"节奏阅读模式准备就绪，等待用户选择\");\n};\n\n// 更新启动函数\nconst startRhythmReading = () => {\n  if (window.rhythmReader && typeof window.rhythmReader.start === 'function') {\n    window.rhythmReader.start();\n  }\n};\n\nconst App = () => {\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  const [isTableOfContents, setIsTableOfContents] = useState(false);\n  \n  // 实现缺失的函数\n  // 应用深色背景\n  const applyDarkBackground = () => {\n    document.body.classList.add('dark-background');\n    \n    // 添加必要的CSS样式\n    if (!document.getElementById('dark-background-style')) {\n      const style = document.createElement('style');\n      style.id = 'dark-background-style';\n      style.textContent = `\n        .dark-background {\n          background-color: #000 !important;\n        }\n        .dark-background .sidebar {\n          background: linear-gradient(145deg, #4834d4, #341f9e) !important;\n        }\n        .dark-background .page-content {\n          background-color: #000 !important;\n        }\n        .dark-background .main-content {\n          background-color: #000 !important;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 恢复正常背景\n  const restoreDarkBackground = () => {\n    document.body.classList.remove('dark-background');\n  };\n  \n  // 添加裸眼3D样式\n  const addNakedEye3DStyles = () => {\n    if (!document.getElementById('naked-eye-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'naked-eye-3d-style';\n      style.textContent = `\n        .naked-eye-3d-container {\n          position: relative;\n          perspective: 800px;\n          width: 100%;\n        }\n        \n        .naked-eye-3d-text {\n          display: inline-block;\n          animation: float 3s ease-in-out infinite;\n          text-shadow: 0 0 5px rgba(255,255,255,0.3);\n          padding: 0 4px;\n          color: white;\n          filter: drop-shadow(0 0 5px rgba(120, 220, 255, 0.6));\n        }\n        \n        @keyframes float {\n          0% { transform: translateZ(0px); }\n          50% { transform: translateZ(20px); }\n          100% { transform: translateZ(0px); }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 添加舒适3D样式\n  const addComfortable3DStyles = () => {\n    if (!document.getElementById('comfortable-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'comfortable-3d-style';\n      style.textContent = `\n        .emboss-3d-text {\n          color: #fff;\n          text-shadow: \n            1px 1px 1px rgba(0,0,0,0.5),\n            -1px -1px 1px rgba(255,255,255,0.5);\n          letter-spacing: 1.5px;\n          font-weight: 500;\n        }\n        \n        .float-3d-text {\n          display: inline-block;\n          transform-style: preserve-3d;\n          transform: perspective(500px) translateZ(10px);\n          text-shadow: 0 2px 5px rgba(0,0,0,0.5);\n        }\n        \n        .gradient-3d-text {\n          display: inline-block;\n          background: linear-gradient(to bottom, #fff, #aaa);\n          -webkit-background-clip: text;\n          -webkit-text-fill-color: transparent;\n          text-shadow: 0 2px 4px rgba(0,0,0,0.3);\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 添加闪读样式\n  const addFlashReadingStyles = () => {\n    if (!document.getElementById('flash-reading-style')) {\n      const style = document.createElement('style');\n      style.id = 'flash-reading-style';\n      style.textContent = `\n        .flash-reading-container {\n          position: relative;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          z-index: 1000;\n          padding: 20px;\n        }\n        \n        .flash-reading-display-wrapper {\n          position: relative;\n          margin: 40px 0;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        \n        .flash-reading-display {\n          font-size: 36px;\n          font-weight: bold;\n          text-align: center;\n          color: white;\n          min-height: 80px;\n          max-width: 90%;\n          padding: 20px 40px;\n          position: relative; /* 允许绝对定位的覆盖层 */\n          z-index: 2;\n        }\n        \n        .flash-reading-cover {\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(128, 128, 128, 0.6); /* 灰色遮罩 */\n          border-radius: 8px;\n          z-index: 1; /* 确保在文本后面 */\n        }\n        \n        .flash-reading-controls {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          gap: 20px;\n          margin-bottom: 20px;\n          width: 100%;\n        }\n        \n        .flash-reading-buttons {\n          display: flex;\n          gap: 10px;\n          flex-wrap: wrap;\n          justify-content: center;\n        }\n        \n        .flash-reading-speed {\n          display: flex;\n          align-items: center;\n          color: white;\n          width: 80%;\n          max-width: 400px;\n          gap: 10px;\n        }\n        \n        .flash-reading-slider {\n          flex: 1;\n          height: 8px;\n          appearance: none;\n          background: #555;\n          border-radius: 4px;\n          outline: none;\n        }\n        \n        .flash-reading-slider::-webkit-slider-thumb {\n          appearance: none;\n          width: 20px;\n          height: 20px;\n          border-radius: 50%;\n          background: #6c5ce7;\n          cursor: pointer;\n        }\n        \n        .flash-reading-btn {\n          padding: 10px 20px;\n          border: none;\n          border-radius: 4px;\n          background-color: #6c5ce7;\n          color: white;\n          font-size: 16px;\n          cursor: pointer;\n          transition: background-color 0.2s;\n        }\n        \n        .flash-reading-btn:hover {\n          background-color: #5344c0;\n        }\n        \n        .flash-reading-btn:disabled {\n          background-color: #aaa;\n          cursor: not-allowed;\n        }\n        \n        .flash-reading-progress {\n          color: white;\n          font-size: 14px;\n          margin-top: 10px;\n        }\n        .flash-reading-speed-note {\n          font-size: 12px;\n          color: #ccc;\n          margin-left: 5px;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 初始化闪读模式\n  const initializeFlashReading = () => {\n    // 添加样式\n    addFlashReadingStyles();\n    \n    const sentences = window.flashReadingSentences;\n    if (!sentences || !Array.isArray(sentences) || sentences.length === 0) {\n      console.error('闪读模式: 未找到句子数据');\n        return;\n      }\n    \n    // 获取全局UI元素\n    const display = document.getElementById('flash-reading-display');\n    const speedSlider = document.getElementById('flash-reading-speed');\n    const speedValue = document.getElementById('flash-reading-speed-value');\n    const playButton = document.getElementById('flash-reading-play');\n    const pauseButton = document.getElementById('flash-reading-pause');\n    const stopButton = document.getElementById('flash-reading-stop');\n    const prevButton = document.getElementById('flash-reading-prev-sentence');\n    const nextButton = document.getElementById('flash-reading-next-sentence');\n    const progress = document.getElementById('flash-reading-progress');\n    const cover = document.querySelector('.flash-reading-cover');\n    \n    if (!display || !speedSlider || !speedValue || !playButton || !pauseButton || !stopButton || !prevButton || !nextButton || !progress || !cover) {\n      console.error('闪读模式: 未找到UI元素');\n        return;\n      }\n\n    // 创建闪读控制器\n    window.flashReader = {\n      sentences: sentences,\n      currentIndex: 0,\n      interval: null,\n      speed: parseInt(speedSlider.value),\n      isPlaying: false,\n      \n      // 开始闪读\n      start() {\n        if (this.interval) {\n          clearInterval(this.interval);\n        }\n        \n        this.isPlaying = true;\n        playButton.disabled = true;\n        pauseButton.disabled = false;\n        progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        \n        // 显示当前句子\n        this.displayCurrentSentence();\n        \n        // 设置闪读间隔\n        this.interval = setInterval(() => {\n          this.currentIndex++;\n          \n          if (this.currentIndex >= this.sentences.length) {\n            this.stop();\n            display.textContent = '阅读完成';\n            return;\n          }\n          \n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }, this.speed);\n      },\n      \n      // 显示当前句子\n      displayCurrentSentence() {\n        if (this.currentIndex < this.sentences.length) {\n          const currentSentence = this.sentences[this.currentIndex];\n          display.textContent = currentSentence;\n          display.style.color = 'white'; // 确保文本为白色\n          \n          // 调整背景以适应内容\n          setTimeout(() => {\n            const displayRect = display.getBoundingClientRect();\n            // 确保覆盖层完全包裹文本\n            cover.style.width = `${displayRect.width}px`;\n            cover.style.height = `${displayRect.height}px`;\n          }, 10);\n        }\n      },\n      \n      // 暂停闪读\n      pause() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        \n        this.isPlaying = false;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n      },\n      \n      // 停止闪读\n      stop() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        \n        this.isPlaying = false;\n        this.currentIndex = 0;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n        \n        display.textContent = '准备开始';\n        progress.textContent = `进度：0 / ${this.sentences.length}`; // 重置进度\n      },\n      \n      // 更新速度\n      updateSpeed(newSpeed) {\n        this.speed = newSpeed;\n        speedValue.textContent = `${newSpeed} ms`;\n        \n        // 保存速度设置到本地存储\n        localStorage.setItem('flash-reading-speed', newSpeed);\n        \n        // 如果正在播放，重新开始以应用新速度\n        if (this.isPlaying) {\n          clearInterval(this.interval);\n          this.start(); // 直接调用start方法重新开始\n        }\n      },\n\n      // 返回上一句\n      prevSentence() {\n        if (this.currentIndex > 0) {\n          this.currentIndex--;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n\n      // 跳到下一句\n      nextSentence() {\n        if (this.currentIndex < this.sentences.length - 1) {\n          this.currentIndex++;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n\n      // 清理资源\n      cleanup() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        this.currentIndex = 0;\n      }\n    };\n    \n    // 添加事件监听器\n    playButton.addEventListener('click', () => {\n      window.flashReader.start();\n    });\n    \n    pauseButton.addEventListener('click', () => {\n      window.flashReader.pause();\n    });\n    \n    stopButton.addEventListener('click', () => {\n      window.flashReader.stop();\n    });\n    \n    speedSlider.addEventListener('input', (e) => {\n      const newSpeed = parseInt(e.target.value);\n      window.flashReader.updateSpeed(newSpeed);\n    });\n\n    prevButton.addEventListener('click', () => {\n      window.flashReader.prevSentence();\n    });\n\n    nextButton.addEventListener('click', () => {\n      window.flashReader.nextSentence();\n    });\n    \n    // 初始化\n    const savedSpeed = localStorage.getItem('flash-reading-speed');\n    const initialSpeed = savedSpeed ? parseInt(savedSpeed) : 1000;\n    speedSlider.value = initialSpeed;\n    window.flashReader.updateSpeed(initialSpeed);\n    \n    console.log('闪读模式已初始化，共 ' + sentences.length + ' 个句子');\n  };\n  \n  // 创建闪读内容\n  const createFlashReadingContent = (text) => {\n    return `<div class=\"flash-reading-content\">\n      <p>${text}</p>\n    </div>`;\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 格式化文本用于鼠标跟随\n  const formatTextForMouseFollow = (text) => {\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个单词添加span，以便于添加高亮效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"follow-word\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\" data-follow=\"true\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用静态高亮\n  const applyStaticHighlight = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为单词随机添加颜色高亮\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      let lastColor = null;\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n          return;\n        }\n        \n        // 随机决定是否高亮和使用哪种颜色\n        if (Math.random() < 0.7) {\n          let color;\n          if (lastColor === 'red') {\n            color = 'blue';\n          } else if (lastColor === 'blue') {\n            color = 'red';\n          } else {\n            color = Math.random() < 0.5 ? 'red' : 'blue';\n          }\n          lastColor = color;\n          \n          processedParagraph += `<span class=\"highlight-word ${color}\">${word}</span>`;\n        } else {\n          processedParagraph += word;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用裸眼3D效果\n  const applyNakedEye3dEffect = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content naked-eye-3d-container\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个词添加3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"naked-eye-3d-text\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用舒适3D效果\n  const applyComfortable3dEffect = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个词随机应用不同的3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n  } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          \n          processedParagraph += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 初始化裸眼3D\n  const initializeNakedEye3D = () => {\n    // 为裸眼3D文本添加动画\n    const textElements = document.querySelectorAll('.naked-eye-3d-text');\n    textElements.forEach((element, index) => {\n      // 添加随机延迟，使动画错开\n      const delay = Math.random() * 2;\n      element.style.animationDelay = `${delay}s`;\n    });\n  };\n\n  // 添加鼠标跟随监听器\n  const addMouseFollowListeners = () => {\n    // 获取内容容器\n    const contentArea = document.querySelector('.mouse-follow-content');\n    if (!contentArea) {\n      console.error('未找到鼠标跟随内容区域');\n      return;\n    }\n    \n    // 上一个高亮的行\n    let lastHighlightedLine = null;\n    \n    // 监听鼠标移动 - 精确的行检测\n    const mouseMoveHandler = (e) => {\n      // 获取鼠标位置\n      const mouseY = e.clientY;\n      \n      // 获取所有行\n      const allLines = contentArea.querySelectorAll('.follow-line');\n      let foundLine = null;\n      let minDistance = Infinity;\n      \n      // 寻找鼠标所在的精确行\n      allLines.forEach(line => {\n        const rect = line.getBoundingClientRect();\n        const lineCenter = rect.top + rect.height / 2;\n        const distance = Math.abs(mouseY - lineCenter);\n        \n        // 如果鼠标在行范围内，计算到行中心的距离\n        if (mouseY >= rect.top && mouseY <= rect.bottom) {\n          if (distance < minDistance) {\n            minDistance = distance;\n            foundLine = line;\n        }\n      }\n    });\n    \n      // 更新高亮状态\n      if (lastHighlightedLine && lastHighlightedLine !== foundLine) {\n        // 移除旧高亮\n        lastHighlightedLine.classList.remove('highlighted');\n      }\n      \n      if (foundLine) {\n        // 添加新高亮\n        foundLine.classList.add('highlighted');\n        lastHighlightedLine = foundLine;\n        \n        // 调试输出\n        console.log('当前高亮行:', foundLine.textContent.substring(0, 30) + '...');\n      } else if (lastHighlightedLine) {\n        // 如果没有找到新行，且有上一个高亮行，移除它\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n    \n    // 鼠标离开处理\n    const mouseLeaveHandler = () => {\n      // 清除当前高亮\n      if (lastHighlightedLine) {\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n    \n    // 存储处理函数引用\n    window.eventTracker = window.eventTracker || { mouseFollowHandlers: [] };\n    window.eventTracker.mouseFollowHandlers.push(\n      { element: contentArea, event: 'mousemove', handler: mouseMoveHandler },\n      { element: contentArea, event: 'mouseleave', handler: mouseLeaveHandler }\n    );\n    \n    // 添加事件监听器\n    contentArea.addEventListener('mousemove', mouseMoveHandler);\n    contentArea.addEventListener('mouseleave', mouseLeaveHandler);\n    \n    console.log('改进的鼠标跟随监听器已初始化');\n  };\n  \n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n  }, []);\n  \n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async (file) => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      \n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n      \n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n      \n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n  \n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({ scale: 1.0 });\n      \n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      \n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      \n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async (textContent) => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n    \n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n    \n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n    \n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    \n    const lines = [...lineMap.values()];\n    \n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    \n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    \n    return hasTocKeywords || hasPageNumberPatterns || (shortLineRatio > 0.7 && numberLineRatio > 0.3);\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n    \n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    \n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n      \n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n      \n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n      \n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    \n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && \n              x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = (text) => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    \n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      \n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        \n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    \n    return result;\n  };\n\n  // 处理内容页面 - 按句子划分段落\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      \n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n      // 按句子划分内容（句号、问号、感叹号等作为分隔符）\n      const sentences = splitIntoSentences(extractedText);\n      \n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch(mode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          // 使用ADHD友好的静态高亮处理\n          console.log('应用ADHD友好的静态高亮模式');\n          processedContent = formatSimpleHighlightedText(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'rhythm':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          processedContent = createFlashReadingContentFromSentences(sentences);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n      \n      setContent(processedContent);\n      \n      // 如果是静态高亮模式，添加延时验证检查\n      if (mode === 'static') {\n        setTimeout(() => {\n          const contentArea = document.querySelector('.adhd-highlight-mode');\n          if (contentArea) {\n            console.log('静态高亮模式元素存在');\n            const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n            console.log(`找到 ${paragraphs.length} 个段落`);\n            \n            // 检查样式是否正确应用\n            if (paragraphs.length > 0) {\n              const firstPara = paragraphs[0];\n              const styles = window.getComputedStyle(firstPara);\n              console.log('段落应用的样式:', {\n                color: styles.color,\n                backgroundColor: styles.backgroundColor,\n                fontFamily: styles.fontFamily,\n                fontSize: styles.fontSize\n              });\n            }\n          }\n        }, 200);\n      }\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 将文本分割成句子\n  const splitIntoSentences = (text) => {\n    // 匹配句号、问号、感叹号后跟空格或结束的模式\n    // 支持中英文标点符号\n    const sentenceRegex = /([.!?。！？；;]+\\s*)/g;\n    \n    // 分割文本成句子\n    const sentences = [];\n    let lastIndex = 0;\n    let match;\n    \n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const sentence = text.substring(lastIndex, endIndex).trim();\n      \n      // 避免添加空句子\n      if (sentence) {\n        sentences.push(sentence);\n      }\n      \n      lastIndex = endIndex;\n    }\n    \n    // 处理最后一部分（如果没有以句号等结尾）\n    if (lastIndex < text.length) {\n      const lastSentence = text.substring(lastIndex).trim();\n      if (lastSentence) {\n        sentences.push(lastSentence);\n      }\n    }\n    \n    return sentences;\n  };\n\n  // 专门为闪读模式分割文本，以任意标点符号为分隔点\n  const splitIntoFlashReadingSegments = (text) => {\n    // 匹配任意标点符号包括中英文标点\n    const sentenceRegex = /([,.!?:;，。！？：；、]+\\s*)/g;\n    \n    // 分割文本成短句\n    const segments = [];\n    let lastIndex = 0;\n    let match;\n    \n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const segment = text.substring(lastIndex, endIndex).trim();\n      \n      // 避免添加空段落\n      if (segment) {\n        segments.push(segment);\n      }\n      \n      lastIndex = endIndex;\n    }\n    \n    // 处理最后一部分（如果没有以标点符号结尾）\n    if (lastIndex < text.length) {\n      const lastSegment = text.substring(lastIndex).trim();\n      if (lastSegment) {\n        segments.push(lastSegment);\n      }\n    }\n    \n    return segments;\n  };\n\n  // 格式化句子为HTML\n  const formatSentencesToHtml = (sentences) => {\n    let html = '<div class=\"pdf-content\">';\n    \n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${sentence}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为句子应用静态高亮\n  const applyStaticHighlightToSentences = (sentences) => {\n    let html = '<div class=\"pdf-content adhd-content\">';\n    \n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      \n      // 简单地为句子添加特定样式的class\n      html += `<p class=\"pdf-paragraph adhd-sentence\">${sentence}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为鼠标跟随模式格式化句子\n  const formatSentencesForMouseFollow = (sentences) => {\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    sentences.forEach((sentence, index) => {\n      if (sentence.trim() === '') return;\n      \n      // 每个句子作为独立行，使用div而不是p标签\n      html += `<div class=\"follow-line\" data-line=\"${index}\" data-sentence=\"${sentence.substring(0, 20)}...\" style=\"color: inherit;\">${sentence}</div>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为舒适3D模式格式化句子\n  const applyComfortable3dEffectToSentences = (sentences) => {\n    let html = '<div class=\"pdf-content\">';\n    \n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      \n      // 为每个词随机应用不同的3D效果\n      const words = sentence.split(/(\\s+)/);\n      let processedSentence = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedSentence += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          \n          processedSentence += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedSentence}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为闪读模式创建内容\n  const createFlashReadingContentFromSentences = (sentences) => {\n    // 储存句子到全局变量，用于后续显示\n    window.flashReadingSentences = sentences;\n\n    // 返回闪读界面的HTML结构\n    return `\n      <div class=\"flash-reading-container\">\n        <div class=\"flash-reading-controls\">\n          <div class=\"flash-reading-buttons\">\n            <button id=\"flash-reading-prev-sentence\" class=\"flash-reading-btn\">上一句</button>\n            <button id=\"flash-reading-play\" class=\"flash-reading-btn\">开始</button>\n            <button id=\"flash-reading-pause\" class=\"flash-reading-btn\" disabled>暂停</button>\n            <button id=\"flash-reading-stop\" class=\"flash-reading-btn\">停止</button>\n            <button id=\"flash-reading-next-sentence\" class=\"flash-reading-btn\">下一句</button>\n          </div>\n          <div class=\"flash-reading-speed\">\n            <span>速度：</span>\n            <input type=\"range\" id=\"flash-reading-speed\" min=\"300\" max=\"1700\" step=\"50\" value=\"1000\" class=\"flash-reading-slider\">\n            <span id=\"flash-reading-speed-value\">1000 ms</span>\n            <span class=\"flash-reading-speed-note\">（数值越小，切换越快）</span>\n          </div>\n          <div class=\"flash-reading-progress\">\n            <span id=\"flash-reading-progress\">进度：0 / ${sentences.length}</span>\n          </div>\n        </div>\n        <div class=\"flash-reading-display-wrapper\">\n          <div class=\"flash-reading-cover\"></div> <!-- 这里是闪卡 -->\n          <div id=\"flash-reading-display\" class=\"flash-reading-display\">准备开始</div>\n        </div>\n      </div>`;\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async (file) => {\n    try {\n      const text = await file.text();\n      \n      // 根据阅读模式选择不同的处理方式\n      let processedContent = '';\n      \n      if (readingMode === 'flash-reading') {\n        // 闪读模式下使用特定的分割函数\n        const segments = splitIntoFlashReadingSegments(text);\n        processedContent = createFlashReadingContentFromSentences(segments);\n        \n        // 初始化闪读模式\n        setTimeout(() => {\n          initializeFlashReading();\n        }, 100);\n      } else {\n        // 其他模式使用默认的分割方式\n        const sentences = splitIntoSentences(text);\n        \n        switch(readingMode) {\n          case 'normal':\n            processedContent = formatSentencesToHtml(sentences);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlightToSentences(sentences);\n            break;\n          case 'follow-mouse':\n            processedContent = formatSentencesForMouseFollow(sentences);\n            break;\n          case 'comfortable-3d':\n            processedContent = applyComfortable3dEffectToSentences(sentences);\n            break;\n          default:\n            processedContent = formatSentencesToHtml(sentences);\n        }\n      }\n      \n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n      \n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setContent('<div class=\"error-message\">TXT文件处理失败</div>');\n    }\n  };\n\n  // 处理Markdown文件\n  const handleMarkdownFile = async (file) => {\n    try {\n      const text = await file.text();\n      \n      // 使用marked库转换markdown为HTML\n      let html = '';\n      try {\n        if (window.marked) {\n          html = window.marked.parse(text);\n        } else {\n          // 如果没有marked库，简单地拆分为段落\n          html = `<div>${text.split(\"\\n\\n\").map(p => `<p>${p}</p>`).join(\"\")}</div>`;\n        }\n      } catch (parseError) {\n        console.error('Markdown解析错误:', parseError);\n        html = `<div>${text}</div>`;\n      }\n      \n      // 提取纯文本内容\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = html;\n      const plainText = tempDiv.textContent || tempDiv.innerText || '';\n      \n      // 分割文本为句子\n      const sentences = splitIntoSentences(plainText);\n      \n      // 根据当前阅读模式处理内容\n      let processedContent = '';\n      switch(readingMode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlightToSentences(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          // 使用特定的闪读分割函数重新处理文本\n          const segments = splitIntoFlashReadingSegments(plainText);\n          processedContent = createFlashReadingContentFromSentences(segments);\n          \n          // 初始化闪读模式\n          setTimeout(() => {\n            initializeFlashReading();\n          }, 100);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n      \n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n      \n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('Markdown处理错误:', error);\n      setContent('<div class=\"error-message\">Markdown文件处理失败</div>');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async (e) => {\n    const uploadedFile = e.target.files[0];\n    if (!uploadedFile) return;\n    \n    setLoading(true);\n    setFileName(uploadedFile.name);\n    \n    try {\n      if (uploadedFile.type === 'application/pdf') {\n        await handlePdfFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/plain' || uploadedFile.name.endsWith('.txt')) {\n        await handleTxtFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/markdown' || uploadedFile.name.endsWith('.md')) {\n        await handleMarkdownFile(uploadedFile);\n    } else {\n        setContent('<div class=\"error-message\">不支持的文件格式</div>');\n      }\n    } catch (error) {\n      console.error('处理文件时出错:', error);\n      setContent('<div class=\"error-message\">处理文件时出错</div>');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = (container) => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    \n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n      \n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n      \n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          \n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n          \n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width/2,  // 水平中心\n            y: rect.bottom,               // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n    \n    // 过滤无效位置并排序\n    return positions\n      .filter(p => p.char.trim() !== '')\n      .sort((a, b) => {\n        // 先按行排序，同行按列排序\n        const yDiff = a.y - b.y;\n        if (Math.abs(yDiff) > 5) { // 5px阈值判断是否同一行\n          return yDiff;\n        }\n        return a.x - b.x;\n      });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    \n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - (containerVisibleHeight / 2);\n      \n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - (window.innerHeight / 2);\n      \n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    \n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n    \n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    \n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n    \n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length || // 已到末尾\n          positions[nextIndex].char.trim() === '' || // 下一个是空白\n          positions[nextIndex].y > charPosition.y + 5) { // 下一个在新行\n        return true;\n      }\n    }\n    \n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n    \n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n      \n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || \n          current.y > prev.y + 5) { // 有明显换行\n        break;\n      }\n      \n      start--;\n    }\n    \n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n      \n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      \n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n      \n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      \n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (window.autoReader.charPositions.length === 0) {\n      if (window.currentPage < window.totalPages) {\n        window.changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 重置索引到开头\n    window.autoReader.currentIndex = 0;\n    \n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    \n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n    \n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n    \n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none';\n      highlight.style.zIndex = '998';\n      contentContainer.appendChild(highlight);\n    }\n    \n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight &&\n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n    \n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20;\n    \n    // 尝试获取实际行高\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(window.autoReader.charPositions[i].y - window.autoReader.charPositions[i-1].y);\n        if (yDiff > 5) {\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n    \n    // 记录上次滚动的位置\n    let lastScrolledY = -1;\n    const scrollSafeZone = lineHeight * 2.5;\n    \n    // 设置字符大小的估计值\n    let charWidth = 20;\n    let charHeight = lineHeight * 0.8;\n    \n    // 尝试估计字符宽度\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        if (window.autoReader.charPositions[i].x !== window.autoReader.charPositions[i-1].x) {\n          const xDiff = Math.abs(window.autoReader.charPositions[i].x - window.autoReader.charPositions[i-1].x);\n          if (xDiff > 0 && xDiff < 50) {\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    \n    window.autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (window.autoReader.currentIndex < window.autoReader.charPositions.length && \n             window.autoReader.charPositions[window.autoReader.currentIndex]?.char.trim() === '') {\n        window.autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (window.autoReader.currentIndex >= window.autoReader.charPositions.length) {\n        if (window.currentPage < window.totalPages) {\n          window.changePage(1);\n          clearInterval(window.autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n\n      const pos = window.autoReader.charPositions[window.autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      \n      if (cursor && highlight) {\n        const contentRect = contentContainer.getBoundingClientRect();\n        \n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        \n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        \n        highlight.style.left = `${relativeX - charWidth/2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n        \n        // 滚动处理\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        \n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          \n          if (isContainerScrollable) {\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n            \n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            \n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = relativeY;\n            }\n          } else {\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n            \n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            \n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      \n      window.autoReader.currentIndex++;\n      \n    }, window.autoReader.speed);\n    \n    // 在停止自动阅读时清除所有高亮\n    window.autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n      \n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n      \n      // 调用清理函数\n      if (window.autoReader.cleanup) {\n        window.autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n    \n    // 重置翻页状态\n    window.autoReader.isPageChanging = false;\n    \n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n    \n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n    \n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n    \n    // 收集字符位置\n    window.autoReader.charPositions = getAllCharacterPositions(content);\n    \n    // 如果当前页没有内容，尝试翻页\n    if (window.autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !window.autoReader.isPageChanging) {\n        window.autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async (e) => {\n    const newMode = e.target.value;\n    const prevMode = readingMode;\n    \n    console.log(`切换阅读模式: 从 ${prevMode} 到 ${newMode}`);\n    \n    // 更新状态\n    setReadingMode(newMode);\n    \n    // 如果有PDF文档和当前页，重新处理当前页内容\n    if (pdfDocument && currentPage > 0) {\n      try {\n        console.log('重新处理当前页面内容');\n        const page = await pdfDocument.getPage(currentPage);\n        \n        // 不使用任何额外处理，直接使用最原始的方式重新加载页面\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n        \n        // 根据当前模式设置内容\n        if (newMode === 'static') {\n          // 静态高亮模式 - 使用改进的句子处理\n          const html = formatSimpleHighlightedText(sentences);\n          console.log('设置静态高亮内容');\n          setContent(html);\n          \n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n        if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n              \n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n                \n                // 验证文字颜色\n                if (styles.color === 'rgb(51, 51, 51)' || styles.color === '#333333') {\n                  console.log('文字颜色正确应用');\n                } else {\n                  console.warn('文字颜色可能未正确应用:', styles.color);\n                }\n              }\n            } else {\n              console.error('未找到静态高亮模式内容区域');\n            }\n          }, 200);\n        } else if (newMode === 'flash-reading') {\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n            \n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n            \n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n            \n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n        } else {\n          // 其他模式保持不变\n          const handler = getContentHandlerForMode(newMode);\n          const processedContent = handler(sentences);\n          setContent(processedContent);\n        }\n      } catch (error) {\n        console.error('应用阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 首先确保移除鼠标跟随监听器\n    removeMouseFollowListeners();\n    \n    // 清理节奏阅读器\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    \n    // 清理闪读器\n    if (window.flashReader) {\n      window.flashReader.cleanup();\n    }\n    \n    // 清理舒适3D效果\n    const comfortable3DElements = document.querySelectorAll('.emboss-3d-text, .float-3d-text, .gradient-3d-text');\n    comfortable3DElements.forEach(el => el.remove());\n    \n    // 清理闪读模式元素\n    const flashReadingElements = document.querySelectorAll('.flash-reading-container, .flash-reading-display, .flash-reading-controls');\n    flashReadingElements.forEach(el => el.remove());\n    \n    // 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll(\n      '.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line, .rhythm-char'\n    );\n    highlights.forEach(el => {\n      if (el.parentNode) el.parentNode.removeChild(el);\n    });\n    \n    // 彻底替换内容区域以移除所有事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 先保存底部翻页控件\n      const bottomPagination = contentArea.querySelector('.bottom-pagination');\n      \n      // 深度克隆内容，但不克隆事件监听器\n      const contentHTML = contentArea.querySelector('div[dangerouslySetInnerHTML]')?.innerHTML || '';\n      const newContentArea = contentArea.cloneNode(false);\n      \n      // 创建新的内容容器\n      const newContentContainer = document.createElement('div');\n      newContentContainer.innerHTML = contentHTML;\n      newContentArea.appendChild(newContentContainer);\n      \n      // 如果有底部翻页控件，重新添加\n      if (bottomPagination && totalPages > 0) {\n        const newBottomPagination = bottomPagination.cloneNode(true);\n        // 重新绑定事件\n        const prevBtn = newBottomPagination.querySelector('.page-btn:first-child');\n        const nextBtn = newBottomPagination.querySelector('.page-btn:last-child');\n        if (prevBtn) prevBtn.onclick = () => changePage(-1);\n        if (nextBtn) nextBtn.onclick = () => changePage(1);\n        newContentArea.appendChild(newBottomPagination);\n      }\n      \n      if (contentArea.parentNode) {\n        contentArea.parentNode.replaceChild(newContentArea, contentArea);\n      }\n    }\n    \n    // 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 移除所有特殊标记和样式\n      paragraph.removeAttribute('data-follow');\n      paragraph.removeAttribute('style');\n      \n      // 清理特殊span标签\n      paragraph.innerHTML = paragraph.innerHTML\n        .replace(/<span class=\"text-line\"[^>]*>/g, '')\n        .replace(/<span class=\"rhythm-char\"[^>]*>/g, '')\n        .replace(/<span class=\"line-highlight[^\"]*\"[^>]*>/g, '')\n        .replace(/<span class=\"mouse-highlight[^\"]*\"[^>]*>/g, '')\n        .replace(/<\\/span>/g, '');\n    });\n    \n    // 移除特殊UI元素\n    const elementsToRemove = [\n      'rhythm-speed-slider',\n      'rhythm-notification'\n    ];\n    \n    elementsToRemove.forEach(id => {\n      const element = document.getElementById(id);\n      if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    });\n    \n    // 移除暗色背景\n    document.body.classList.remove('dark-background');\n    \n    // 清理闪读模式\n    if (window.flashReader && typeof window.flashReader.cleanup === 'function') {\n      window.flashReader.cleanup();\n    }\n  };\n\n  const handleAutoScroll = () => {\n    window.autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = (e) => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    \n    const rect = contentArea.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    \n    clearAllHighlights();\n    \n    const paragraphs = contentArea.querySelectorAll('p');\n    paragraphs.forEach(paragraph => {\n      const paragraphRect = paragraph.getBoundingClientRect();\n      const paragraphX = paragraphRect.left - rect.left;\n      const paragraphY = paragraphRect.top - rect.top;\n      \n      if (y >= paragraphY && y <= paragraphY + paragraphRect.height) {\n        const words = paragraph.querySelectorAll('span');\n        words.forEach(word => {\n          const wordRect = word.getBoundingClientRect();\n          const wordX = wordRect.left - rect.left;\n          \n          if (x >= wordX && x <= wordX + wordRect.width) {\n            word.classList.add('highlight');\n          }\n        });\n      }\n    });\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 专门用于移除鼠标跟随事件的函数\n  const removeMouseFollowListeners = () => {\n    // 移除记录的所有监听器\n    if (window.eventTracker && window.eventTracker.mouseFollowHandlers) {\n      window.eventTracker.mouseFollowHandlers.forEach(({element, event, handler}) => {\n        if (element && element.removeEventListener) {\n          element.removeEventListener(event, handler);\n        }\n      });\n      window.eventTracker.mouseFollowHandlers = [];\n    }\n    \n    // 为安全起见，尝试从document和内容区域移除通用处理函数\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    }\n    \n    document.removeEventListener('mousemove', handleMouseMove);\n    \n    // 清除所有当前高亮\n    clearAllHighlights();\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n    \n    // 添加底部翻页控件样式\n    const bottomPaginationStyles = document.createElement('style');\n    bottomPaginationStyles.id = 'bottom-pagination-styles';\n    bottomPaginationStyles.innerHTML = `\n      .bottom-pagination {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        padding: 20px 0 30px;\n        margin-top: 30px;\n        width: 100%;\n        background-color: transparent;\n        border-radius: 5px;\n      }\n\n      .bottom-pagination .page-btn {\n        background-color: #6c5ce7;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        padding: 8px 15px;\n        margin: 0 10px;\n        cursor: pointer;\n        font-size: 14px;\n        transition: background-color 0.2s ease;\n      }\n\n      .bottom-pagination .page-btn:hover {\n        background-color: #4834d4;\n      }\n\n      .bottom-pagination .page-btn:disabled {\n        background-color: #aaa;\n        cursor: not-allowed;\n      }\n\n      .bottom-pagination .page-info {\n        font-size: 14px;\n        margin: 0 10px;\n      }\n    `;\n    document.head.appendChild(bottomPaginationStyles);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n    addComfortable3DStyles();\n    \n    // 添加鼠标跟随模式的样式\n    const mouseFollowStyle = document.createElement('style');\n    mouseFollowStyle.id = 'intelligent-mouse-follow-style';\n    mouseFollowStyle.textContent = `\n      /* 基础样式 */\n      .mouse-follow-content {\n        position: relative;\n        line-height: 1.8;\n      }\n      \n      .mouse-follow-content .follow-line {\n        position: relative;\n        padding: 8px 16px;\n        margin: 4px 0;\n        border-radius: 6px;\n        transition: all 0.2s ease;\n        display: block;\n        min-height: 1.8em;\n        white-space: normal;\n        word-wrap: break-word;\n        text-indent: 2em;\n      }\n      \n      /* 高亮状态 */\n      .follow-line.highlighted {\n        background-color: #ffa500 !important; /* 橙色背景 */\n        color: #ffffff !important; /* 白色文字 */\n        font-weight: bold !important;\n        font-size: 1.1em; /* 稍微调小字号 */\n        transform: translateX(5px);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n      }\n      \n      \n      /* 平滑过渡效果 */\n      .follow-line {\n        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n      }\n      \n      /* 行间距优化 */\n      .mouse-follow-content .follow-line + .follow-line {\n        margin-top: 4px;\n      }\n      \n      /* 添加行指示器 */\n      .follow-line::before {\n        content: '';\n        position: absolute;\n        left: 0;\n        top: 0;\n        bottom: 0;\n        width: 3px;\n        background: linear-gradient(to bottom, transparent, rgba(255, 255, 255, 0.5), transparent);\n        opacity: 0;\n        transition: opacity 0.2s ease;\n      }\n      \n      .follow-line.highlighted::before {\n        opacity: 1;\n      }\n    `;\n    document.head.appendChild(mouseFollowStyle);\n    \n    // 创建深色背景下的ADHD友好高亮样式\n    const style = document.createElement('style');\n    style.id = 'adhd-friendly-highlight-style';\n    style.textContent = `\n      /* ADHD友好的高亮样式 - 适配深色背景 */\n      .adhd-highlight-mode {\n        line-height: 1.8;\n        padding: 20px;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph {\n        margin-bottom: 1.2em;\n        background-color: transparent;\n        padding: 12px 15px;\n        border-radius: 6px;\n        border-left: 3px solid rgba(255, 255, 255, 0.2);\n        transition: all 0.3s ease;\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover {\n        transform: translateX(5px);\n        border-left-color: rgba(255, 255, 255, 0.4);\n      }\n      \n      /* 加粗样式 - 白色加粗 */\n      .adhd-bold {\n        font-weight: 700;\n        color: #ffffff;\n        letter-spacing: 0.02em;\n        font-size: 1.1em;\n        text-shadow: 0 0 1px rgba(255, 255, 255, 0.2);\n      }\n      \n      /* 彩色样式 - 使用鲜明的蓝色 */\n      .adhd-colored {\n        color: #6c5ce7;\n        font-weight: 500;\n        font-size: 1.05em;\n        text-shadow: 0 0 1px rgba(108, 92, 231, 0.2);\n      }\n      \n      /* 正常样式 - 普通白色 */\n      .adhd-normal {\n        color: rgba(255, 255, 255, 0.8);\n        font-size: 1em;\n      }\n\n      /* 添加平滑过渡效果 */\n      .adhd-bold, .adhd-colored, .adhd-normal {\n        transition: all 0.2s ease;\n      }\n\n      /* 悬停效果 */\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-bold {\n        color: #ffffff;\n        text-shadow: 0 0 2px rgba(255, 255, 255, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-colored {\n        color: #8a7ff7;\n        text-shadow: 0 0 2px rgba(138, 127, 247, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-normal {\n        color: rgba(255, 255, 255, 0.9);\n      }\n\n      /* 添加段落间距的视觉引导 */\n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph {\n        margin-top: 1.5em;\n        position: relative;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph::before {\n        content: '';\n        position: absolute;\n        top: -0.75em;\n        left: 0;\n        right: 0;\n        height: 1px;\n        background: linear-gradient(\n          to right,\n          transparent,\n          rgba(255, 255, 255, 0.1),\n          transparent\n        );\n      }\n    `;\n    document.head.appendChild(style);\n    \n    // 添加基础鼠标跟随样式\n    const mouseFollowPageStyle = document.createElement('style');\n    mouseFollowPageStyle.id = 'basic-mouse-follow-style';\n    mouseFollowPageStyle.textContent = `\n      .follow-line {\n        padding: 8px 12px;\n        margin: 4px 0;\n        border-radius: 4px;\n        transition: background-color 0.2s ease;\n      }\n      .follow-line.highlighted {\n        background-color: #ffa500;\n        color: #000080;\n        font-weight: bold;\n      }\n    `;\n    document.head.appendChild(mouseFollowPageStyle);\n    \n    return () => {\n      const existingStyle = document.getElementById('adhd-friendly-highlight-style');\n      if (existingStyle) existingStyle.remove();\n      \n      const existingMouseFollowStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (existingMouseFollowStyle) existingMouseFollowStyle.remove();\n      \n      const existingBasicMouseFollowStyle = document.getElementById('basic-mouse-follow-style');\n      if (existingBasicMouseFollowStyle) existingBasicMouseFollowStyle.remove();\n      \n      mouseFollowPageStyle.remove();\n    };\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 清理旧监听器\n    removeMouseFollowListeners();\n    \n    // 添加新监听器\n    setTimeout(() => {\n      addMouseFollowListeners();\n      \n      // 添加调试辅助 - 显示行边界\n      const contentArea = document.querySelector('.mouse-follow-content');\n      if (contentArea) {\n        const lines = contentArea.querySelectorAll('.follow-line');\n        console.log(`初始化鼠标跟随模式，共 ${lines.length} 行`);\n        \n        // 可选：启用可视化调试\n        if (false) { // 设置为true可以启用可视化调试\n          lines.forEach((line, index) => {\n            line.style.border = '1px dashed #888';\n            line.setAttribute('title', `行 ${index+1}`);\n          });\n        }\n        \n        // 验证行高亮效果\n        const firstLine = lines[0];\n        if (firstLine) {\n          console.log('行样式验证:', {\n            padding: window.getComputedStyle(firstLine).padding,\n            margin: window.getComputedStyle(firstLine).margin,\n            fontSize: window.getComputedStyle(firstLine).fontSize,\n            lineHeight: window.getComputedStyle(firstLine).lineHeight\n          });\n        }\n      }\n    }, 100);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = (delta) => {\n    window.autoReader.speed = Math.max(100, window.autoReader.speed + delta);\n    \n    if (window.autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async (delta) => {\n    console.log(`翻页请求: 当前页 ${currentPage}, 增量 ${delta}`);\n    const newPage = currentPage + delta;\n    \n    if (newPage < 1 || newPage > totalPages) {\n      console.log('无效页码，不执行翻页');\n          return;\n        }\n        \n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n    const wasFlashReading = readingMode === 'flash-reading' && window.flashReader && window.flashReader.isPlaying;\n    \n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    \n    if (wasFlashReading && window.flashReader) {\n      window.flashReader.cleanup();\n    }\n    \n    // 更新页码\n    setCurrentPage(newPage);\n    \n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n      \n      // 检查是否为目录页\n      const textContent = await page.getTextContent();\n      const isToc = await detectIfTocPage(textContent);\n      setIsTableOfContents(isToc);\n      \n      if (isToc) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, page.getViewport({ scale: 1.0 }));\n      } else {\n        // 处理正文页面 - 根据当前阅读模式处理\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n        \n        // 根据当前模式设置内容\n        if (readingMode === 'static') {\n          console.log('翻页后应用静态高亮模式');\n          const processedContent = formatSimpleHighlightedText(sentences);\n          setContent(processedContent);\n          \n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n            if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n              \n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n              }\n            }\n          }, 200);\n        } else if (readingMode === 'flash-reading') {\n          // 如果是闪读模式，则需要特殊处理\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n            \n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n            \n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n            \n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n          return; // 已处理，直接返回\n        } else {\n          // 其他模式使用原处理函数\n          await processContentPage(page, readingMode);\n        }\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n    } catch (error) {\n      console.error('页面切换错误:', error);\n    }\n  };\n\n  // ADHD友好的静态高亮处理函数\n  const formatSimpleHighlightedText = (sentences) => {\n    console.log('开始处理ADHD友好的静态高亮文本，句子数量:', sentences.length);\n    \n    let html = '<div class=\"pdf-content adhd-highlight-mode\">';\n    \n    sentences.forEach((sentence, sentenceIndex) => {\n      if (!sentence || sentence.trim() === '') {\n        console.log(`跳过空句子，索引: ${sentenceIndex}`);\n      return;\n    }\n    \n      // 清理和规范化文本\n      const cleanText = sentence\n        .trim()\n        .replace(/\\s+/g, ' ')  // 规范化空白字符\n        .replace(/&/g, '&amp;')  // 转义特殊字符\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n      \n      // 处理句子中的单词，为它们添加不同样式\n      const words = cleanText.split(/(\\s+)/);\n      let formattedSentence = '';\n      \n      words.forEach((word, wordIndex) => {\n        if (word.trim() === '') {\n          // 保留空格\n          formattedSentence += word;\n      } else {\n          // 根据位置应用不同的样式类\n          // 三种交替样式: 加粗、彩色、正常\n          const styleClass = wordIndex % 3 === 0 ? 'adhd-bold' : \n                           wordIndex % 3 === 1 ? 'adhd-colored' : 'adhd-normal';\n          \n          formattedSentence += `<span class=\"${styleClass}\">${word}</span>`;\n        }\n      });\n      \n      console.log(`处理句子 ${sentenceIndex + 1}:`, cleanText.substring(0, 50) + '...');\n      html += `<p class=\"pdf-paragraph\">${formattedSentence}</p>`;\n    });\n    \n    html += '</div>';\n    \n    // 调试输出\n    console.log('生成的ADHD友好静态高亮HTML:', html.substring(0, 200) + '...');\n    \n    return html;\n  };\n\n  // 根据阅读模式获取相应的内容处理函数\n  const getContentHandlerForMode = (mode) => {\n    switch(mode) {\n      case 'normal': return formatSentencesToHtml;\n      case 'static': return applyStaticHighlightToSentences;\n      case 'follow-mouse': return formatSentencesForMouseFollow;\n      case 'comfortable-3d': return applyComfortable3dEffectToSentences;\n      case 'flash-reading': \n        return (sentences) => {\n          // 闪读模式使用专门的分割函数重新处理文本\n          return createFlashReadingContentFromSentences(sentences);\n        };\n      default: return formatSentencesToHtml;\n    }\n  };\n\n  // 监听阅读模式和当前页面的变化\n  useEffect(() => {\n    if (readingMode === 'mouse-follow' && currentPage && !isTableOfContents) {\n      // 移除之前的样式\n      const oldStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (oldStyle) {\n        oldStyle.remove();\n      }\n      \n      // 添加基础鼠标跟随样式\n      const followModeStyle = document.createElement('style');\n      followModeStyle.id = 'basic-mouse-follow-style';\n      followModeStyle.textContent = `\n        .follow-line {\n          padding: 8px 12px;\n          margin: 4px 0;\n          border-radius: 4px;\n          transition: background-color 0.2s ease;\n        }\n        .follow-line.highlighted {\n          background-color: #ffa500;\n          color: #000080;\n          font-weight: bold;\n        }\n      `;\n      document.head.appendChild(followModeStyle);\n      \n      // 处理当前页面内容\n      const page = pdfDocument.getPage(currentPage);\n      const textContent = page.getTextContent();\n      const sentences = textContent.items\n        .map(item => item.str)\n        .join(' ')\n        .split(/[。！？]/)\n        .filter(s => s.trim());\n      \n      // 应用基础鼠标跟随格式化\n      setContent(formatSentencesForMouseFollow(sentences));\n      \n      // 添加鼠标跟随监听器\n      setTimeout(() => {\n        addMouseFollowListeners();\n      }, 100);\n      \n      return () => {\n        followModeStyle.remove();\n      };\n    }\n  }, [readingMode, currentPage, pdfDocument]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        <div className=\"logo\">\n          <h2>ADHD阅读助手</h2>\n        </div>\n        \n        <div className=\"reading-controls\">\n          <h3>阅读模式</h3>\n          <select \n            id=\"reading-mode-select\" \n            value={readingMode} \n            onChange={handleReadingModeChange}\n            className=\"mode-select\"\n          >\n            <option value=\"normal\">普通模式</option>\n            <option value=\"static\">静态高亮</option>\n            <option value=\"follow-mouse\">鼠标跟随</option>\n            <option value=\"rhythm\">节奏阅读</option>\n            <option value=\"flash-reading\">闪读模式</option>\n          </select>\n        </div>\n        \n        <div className=\"upload-section\">\n          <input\n            type=\"file\"\n            accept=\".pdf,.txt,.md\" \n            hidden\n            id=\"file-upload\"\n            onChange={handleFileUpload}\n            ref={fileRef}\n          />\n          <button \n            className=\"upload-btn\"\n            onClick={() => fileRef.current.click()}\n          >\n            上传文件 (.pdf/.txt/.md)\n          </button>\n      </div>\n            </div>\n      \n      <div className=\"main-content\">\n        <div className=\"toolbar\">\n          {fileName && <h3 className=\"filename\">{fileName}</h3>}\n          {/* 移除了原有翻页控件 */}\n            </div>\n        \n        <div className=\"page-content\" ref={readerContainerRef}>\n            <div dangerouslySetInnerHTML={{ __html: content }} />\n          \n          {totalPages > 0 && (\n            <div className=\"bottom-pagination\">\n              <button \n                onClick={() => changePage(-1)} \n                disabled={currentPage <= 1}\n                className=\"page-btn\"\n              >\n                上一页\n              </button>\n            <span className=\"page-info\">\n                第 {currentPage} / {totalPages} 页\n              </span>\n              <button \n                onClick={() => changePage(1)} \n                disabled={currentPage >= totalPages}\n                className=\"page-btn\"\n              >\n                下一页\n              </button>\n          </div>\n        )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App; \n"],"mappings":"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AMnb,KAAK,GAAGN,QAAQ,CAACI,aAAa,CAAC,OAAO,CAAC;IAC7CE,KAAK,CAACG,WAAW,GAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDT,QAAQ,CAACwK,IAAI,CAAC7J,WAAW,CAACL,KAAK,CAAC;;IAEhC;IACA,MAAMob,sBAAsB,GAAG1b,QAAQ,CAACI,aAAa,CAAC,OAAO,CAAC;IAC9Dsb,sBAAsB,CAACrb,EAAE,GAAG,0BAA0B;IACtDqb,sBAAsB,CAACxG,SAAS,GAAG;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDlV,QAAQ,CAACwK,IAAI,CAAC7J,WAAW,CAAC+a,sBAAsB,CAAC;EACnD,CAAC;;EAED;EACAzd,SAAS,CAAC,MAAM;IACdwd,mBAAmB,CAAC,CAAC;IACrB9Q,sBAAsB,CAAC,CAAC;;IAExB;IACA,MAAMgR,gBAAgB,GAAG3b,QAAQ,CAACI,aAAa,CAAC,OAAO,CAAC;IACxDub,gBAAgB,CAACtb,EAAE,GAAG,gCAAgC;IACtDsb,gBAAgB,CAAClb,WAAW,GAAG;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDT,QAAQ,CAACwK,IAAI,CAAC7J,WAAW,CAACgb,gBAAgB,CAAC;;IAE3C;IACA,MAAMrb,KAAK,GAAGN,QAAQ,CAACI,aAAa,CAAC,OAAO,CAAC;IAC7CE,KAAK,CAACD,EAAE,GAAG,+BAA+B;IAC1CC,KAAK,CAACG,WAAW,GAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDT,QAAQ,CAACwK,IAAI,CAAC7J,WAAW,CAACL,KAAK,CAAC;;IAEhC;IACA,MAAMsb,oBAAoB,GAAG5b,QAAQ,CAACI,aAAa,CAAC,OAAO,CAAC;IAC5Dwb,oBAAoB,CAACvb,EAAE,GAAG,0BAA0B;IACpDub,oBAAoB,CAACnb,WAAW,GAAG;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDT,QAAQ,CAACwK,IAAI,CAAC7J,WAAW,CAACib,oBAAoB,CAAC;IAE/C,OAAO,MAAM;MACX,MAAMC,aAAa,GAAG7b,QAAQ,CAACC,cAAc,CAAC,+BAA+B,CAAC;MAC9E,IAAI4b,aAAa,EAAEA,aAAa,CAAC3b,MAAM,CAAC,CAAC;MAEzC,MAAM4b,wBAAwB,GAAG9b,QAAQ,CAACC,cAAc,CAAC,gCAAgC,CAAC;MAC1F,IAAI6b,wBAAwB,EAAEA,wBAAwB,CAAC5b,MAAM,CAAC,CAAC;MAE/D,MAAM6b,6BAA6B,GAAG/b,QAAQ,CAACC,cAAc,CAAC,0BAA0B,CAAC;MACzF,IAAI8b,6BAA6B,EAAEA,6BAA6B,CAAC7b,MAAM,CAAC,CAAC;MAEzE0b,oBAAoB,CAAC1b,MAAM,CAAC,CAAC;IAC/B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMmP,qBAAqB,GAAGA,CAAA,KAAM;IAClC;IACAyK,0BAA0B,CAAC,CAAC;;IAE5B;IACAxX,UAAU,CAAC,MAAM;MACf4L,uBAAuB,CAAC,CAAC;;MAEzB;MACA,MAAMC,WAAW,GAAGnO,QAAQ,CAAC8C,aAAa,CAAC,uBAAuB,CAAC;MACnE,IAAIqL,WAAW,EAAE;QACf,MAAMoD,KAAK,GAAGpD,WAAW,CAACjJ,gBAAgB,CAAC,cAAc,CAAC;QAC1DtF,OAAO,CAACC,GAAG,CAAC,eAAe0R,KAAK,CAACnO,MAAM,IAAI,CAAC;;QAE5C;QACA,IAAI,KAAK,EAAE;UAAE;UACXmO,KAAK,CAACjO,OAAO,CAAC,CAACsL,IAAI,EAAE1H,KAAK,KAAK;YAC7B0H,IAAI,CAACtO,KAAK,CAAC0b,MAAM,GAAG,iBAAiB;YACrCpN,IAAI,CAACqN,YAAY,CAAC,OAAO,EAAE,KAAK/U,KAAK,GAAC,CAAC,EAAE,CAAC;UAC5C,CAAC,CAAC;QACJ;;QAEA;QACA,MAAMgV,SAAS,GAAG3K,KAAK,CAAC,CAAC,CAAC;QAC1B,IAAI2K,SAAS,EAAE;UACbtc,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAE;YACpBsc,OAAO,EAAExd,MAAM,CAACgV,gBAAgB,CAACuI,SAAS,CAAC,CAACC,OAAO;YACnDC,MAAM,EAAEzd,MAAM,CAACgV,gBAAgB,CAACuI,SAAS,CAAC,CAACE,MAAM;YACjDrK,QAAQ,EAAEpT,MAAM,CAACgV,gBAAgB,CAACuI,SAAS,CAAC,CAACnK,QAAQ;YACrDwG,UAAU,EAAE5Z,MAAM,CAACgV,gBAAgB,CAACuI,SAAS,CAAC,CAAC3D;UACjD,CAAC,CAAC;QACJ;MACF;IACF,CAAC,EAAE,GAAG,CAAC;EACT,CAAC;;EAED;EACA,MAAM8D,WAAW,GAAIC,KAAK,IAAK;IAC7B3d,MAAM,CAACM,UAAU,CAACI,KAAK,GAAGkO,IAAI,CAAC5L,GAAG,CAAC,GAAG,EAAEhD,MAAM,CAACM,UAAU,CAACI,KAAK,GAAGid,KAAK,CAAC;IAExE,IAAI3d,MAAM,CAACM,UAAU,CAACE,UAAU,EAAE;MAChC2Z,cAAc,CAAC,CAAC;MAChBd,eAAe,CAAC,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAMlZ,UAAU,GAAG,MAAOwd,KAAK,IAAK;IAClC1c,OAAO,CAACC,GAAG,CAAC,aAAajB,WAAW,QAAQ0d,KAAK,EAAE,CAAC;IACpD,MAAMC,OAAO,GAAG3d,WAAW,GAAG0d,KAAK;IAEnC,IAAIC,OAAO,GAAG,CAAC,IAAIA,OAAO,GAAG1d,UAAU,EAAE;MACvCe,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;MACrB;IACF;IAEJ,MAAM2c,gBAAgB,GAAG/S,WAAW,KAAK,QAAQ,IAAI9K,MAAM,CAACe,kBAAkB,CAACC,MAAM;IACrF,MAAM8c,eAAe,GAAGhT,WAAW,KAAK,eAAe,IAAI9K,MAAM,CAAC+M,WAAW,IAAI/M,MAAM,CAAC+M,WAAW,CAACE,SAAS;IAE7G,IAAI4Q,gBAAgB,IAAI7d,MAAM,CAACmC,YAAY,EAAE;MAC3CnC,MAAM,CAACmC,YAAY,CAACiE,IAAI,CAAC,CAAC;IAC5B;IAEA,IAAI0X,eAAe,IAAI9d,MAAM,CAAC+M,WAAW,EAAE;MACzC/M,MAAM,CAAC+M,WAAW,CAACjM,OAAO,CAAC,CAAC;IAC9B;;IAEA;IACAmJ,cAAc,CAAC2T,OAAO,CAAC;IAEvB,IAAI;MACF;MACA,MAAMtM,IAAI,GAAG,MAAM/F,WAAW,CAACgG,OAAO,CAACqM,OAAO,CAAC;;MAE/C;MACA,MAAM9b,WAAW,GAAG,MAAMwP,IAAI,CAACE,cAAc,CAAC,CAAC;MAC/C,MAAMuM,KAAK,GAAG,MAAMnM,eAAe,CAAC9P,WAAW,CAAC;MAChD4J,oBAAoB,CAACqS,KAAK,CAAC;MAE3B,IAAIA,KAAK,EAAE;QACT;QACA,MAAMlM,cAAc,CAAC/P,WAAW,EAAEwP,IAAI,CAACI,WAAW,CAAC;UAAEC,KAAK,EAAE;QAAI,CAAC,CAAC,CAAC;MACrE,CAAC,MAAM;QACL;QACA,MAAMI,SAAS,GAAGjQ,WAAW,CAACkQ,KAAK;QACnC,IAAIqC,aAAa,GAAGtC,SAAS,CAAC3K,GAAG,CAAC8K,IAAI,IAAIA,IAAI,CAACC,GAAG,CAAC,CAAC9K,IAAI,CAAC,GAAG,CAAC;QAC7DgN,aAAa,GAAGA,aAAa,CAACC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAChP,IAAI,CAAC,CAAC;;QAEzD;QACA,MAAM6G,SAAS,GAAGoI,kBAAkB,CAACF,aAAa,CAAC;;QAEnD;QACA,IAAIvJ,WAAW,KAAK,QAAQ,EAAE;UAC5B7J,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;UAC1B,MAAMsT,gBAAgB,GAAGE,2BAA2B,CAACvI,SAAS,CAAC;UAC/Db,UAAU,CAACkJ,gBAAgB,CAAC;;UAE5B;UACA7Q,UAAU,CAAC,MAAM;YACf,MAAM6L,WAAW,GAAGnO,QAAQ,CAAC8C,aAAa,CAAC,sBAAsB,CAAC;YAClE,IAAIqL,WAAW,EAAE;cACfvO,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;cACzB,MAAMgN,UAAU,GAAGsB,WAAW,CAACjJ,gBAAgB,CAAC,gBAAgB,CAAC;cACjEtF,OAAO,CAACC,GAAG,CAAC,MAAMgN,UAAU,CAACzJ,MAAM,MAAM,CAAC;;cAE1C;cACA,IAAIyJ,UAAU,CAACzJ,MAAM,GAAG,CAAC,EAAE;gBACzB,MAAMqQ,SAAS,GAAG5G,UAAU,CAAC,CAAC,CAAC;gBAC/B,MAAM6G,MAAM,GAAG/U,MAAM,CAACgV,gBAAgB,CAACF,SAAS,CAAC;gBACjD7T,OAAO,CAACC,GAAG,CAAC,UAAU,EAAE;kBACtBsH,KAAK,EAAEuM,MAAM,CAACvM,KAAK;kBACnByM,eAAe,EAAEF,MAAM,CAACE,eAAe;kBACvCC,UAAU,EAAEH,MAAM,CAACG,UAAU;kBAC7B9B,QAAQ,EAAE2B,MAAM,CAAC3B;gBACnB,CAAC,CAAC;cACJ;YACF;UACF,CAAC,EAAE,GAAG,CAAC;QACT,CAAC,MAAM,IAAItI,WAAW,KAAK,eAAe,EAAE;UAC1C;UACA,IAAI;YACF,MAAMwG,IAAI,GAAG,MAAM/F,WAAW,CAACgG,OAAO,CAACtR,WAAW,CAAC;YACnD,MAAM6B,WAAW,GAAG,MAAMwP,IAAI,CAACE,cAAc,CAAC,CAAC;YAC/C,MAAMO,SAAS,GAAGjQ,WAAW,CAACkQ,KAAK;YACnC,IAAIqC,aAAa,GAAGtC,SAAS,CAAC3K,GAAG,CAAC8K,IAAI,IAAIA,IAAI,CAACC,GAAG,CAAC,CAAC9K,IAAI,CAAC,GAAG,CAAC;YAC7DgN,aAAa,GAAGA,aAAa,CAACC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAChP,IAAI,CAAC,CAAC;;YAEzD;YACA,MAAMqQ,QAAQ,GAAGD,6BAA6B,CAACrB,aAAa,CAAC;;YAE7D;YACA,MAAMG,gBAAgB,GAAGK,sCAAsC,CAACc,QAAQ,CAAC;YACzErK,UAAU,CAACkJ,gBAAgB,CAAC;;YAE5B;YACA7Q,UAAU,CAAC,MAAM;cACfuI,sBAAsB,CAAC,CAAC;YAC1B,CAAC,EAAE,GAAG,CAAC;UACT,CAAC,CAAC,OAAO9H,KAAK,EAAE;YACdnD,OAAO,CAACmD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;UACpC;UACA,OAAO,CAAC;QACV,CAAC,MAAM;UACL;UACA,MAAM0N,kBAAkB,CAACR,IAAI,EAAExG,WAAW,CAAC;QAC7C;MACF;;MAEA;MACA,IAAIA,WAAW,KAAK,cAAc,EAAE;QAClCnH,UAAU,CAAC,MAAM;UACf4L,uBAAuB,CAAC,CAAC;QAC3B,CAAC,EAAE,EAAE,CAAC;MACR;IACF,CAAC,CAAC,OAAOnL,KAAK,EAAE;MACdnD,OAAO,CAACmD,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;IACjC;EACF,CAAC;;EAED;EACA,MAAMsQ,2BAA2B,GAAIvI,SAAS,IAAK;IACjDlL,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEiL,SAAS,CAAC1H,MAAM,CAAC;IAExD,IAAI2J,IAAI,GAAG,+CAA+C;IAE1DjC,SAAS,CAACxH,OAAO,CAAC,CAAC6Q,QAAQ,EAAEwI,aAAa,KAAK;MAC7C,IAAI,CAACxI,QAAQ,IAAIA,QAAQ,CAAClQ,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QACvCrE,OAAO,CAACC,GAAG,CAAC,aAAa8c,aAAa,EAAE,CAAC;QAC3C;MACF;;MAEE;MACA,MAAMC,SAAS,GAAGzI,QAAQ,CACvBlQ,IAAI,CAAC,CAAC,CACNgP,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAE;MAAA,CACtBA,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAE;MAAA,CACxBA,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CACrBA,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC;;MAExB;MACA,MAAM/F,KAAK,GAAG0P,SAAS,CAAC9P,KAAK,CAAC,OAAO,CAAC;MACtC,IAAI+P,iBAAiB,GAAG,EAAE;MAE1B3P,KAAK,CAAC5J,OAAO,CAAC,CAAC8J,IAAI,EAAE0P,SAAS,KAAK;QACjC,IAAI1P,IAAI,CAACnJ,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;UACtB;UACA4Y,iBAAiB,IAAIzP,IAAI;QAC7B,CAAC,MAAM;UACH;UACA;UACA,MAAM2P,UAAU,GAAGD,SAAS,GAAG,CAAC,KAAK,CAAC,GAAG,WAAW,GACnCA,SAAS,GAAG,CAAC,KAAK,CAAC,GAAG,cAAc,GAAG,aAAa;UAErED,iBAAiB,IAAI,gBAAgBE,UAAU,KAAK3P,IAAI,SAAS;QACnE;MACF,CAAC,CAAC;MAEFxN,OAAO,CAACC,GAAG,CAAC,QAAQ8c,aAAa,GAAG,CAAC,GAAG,EAAEC,SAAS,CAAC3N,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;MAC7ElC,IAAI,IAAI,4BAA4B8P,iBAAiB,MAAM;IAC7D,CAAC,CAAC;IAEF9P,IAAI,IAAI,QAAQ;;IAEhB;IACAnN,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEkN,IAAI,CAACkC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK,CAAC;IAEjE,OAAOlC,IAAI;EACb,CAAC;;EAED;EACA,MAAM6M,wBAAwB,GAAI9R,IAAI,IAAK;IACzC,QAAOA,IAAI;MACT,KAAK,QAAQ;QAAE,OAAOsL,qBAAqB;MAC3C,KAAK,QAAQ;QAAE,OAAOqB,+BAA+B;MACrD,KAAK,cAAc;QAAE,OAAOnB,6BAA6B;MACzD,KAAK,gBAAgB;QAAE,OAAOC,mCAAmC;MACjE,KAAK,eAAe;QAClB,OAAQzI,SAAS,IAAK;UACpB;UACA,OAAO0I,sCAAsC,CAAC1I,SAAS,CAAC;QAC1D,CAAC;MACH;QAAS,OAAOsI,qBAAqB;IACvC;EACF,CAAC;;EAED;EACAnV,SAAS,CAAC,MAAM;IACd,IAAIwL,WAAW,KAAK,cAAc,IAAI7K,WAAW,IAAI,CAACwL,iBAAiB,EAAE;MACvE;MACA,MAAM4S,QAAQ,GAAGhd,QAAQ,CAACC,cAAc,CAAC,gCAAgC,CAAC;MAC1E,IAAI+c,QAAQ,EAAE;QACZA,QAAQ,CAAC9c,MAAM,CAAC,CAAC;MACnB;;MAEA;MACA,MAAM+c,eAAe,GAAGjd,QAAQ,CAACI,aAAa,CAAC,OAAO,CAAC;MACvD6c,eAAe,CAAC5c,EAAE,GAAG,0BAA0B;MAC/C4c,eAAe,CAACxc,WAAW,GAAG;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;MACDT,QAAQ,CAACwK,IAAI,CAAC7J,WAAW,CAACsc,eAAe,CAAC;;MAE1C;MACA,MAAMhN,IAAI,GAAG/F,WAAW,CAACgG,OAAO,CAACtR,WAAW,CAAC;MAC7C,MAAM6B,WAAW,GAAGwP,IAAI,CAACE,cAAc,CAAC,CAAC;MACzC,MAAMrF,SAAS,GAAGrK,WAAW,CAACkQ,KAAK,CAChC5K,GAAG,CAAC8K,IAAI,IAAIA,IAAI,CAACC,GAAG,CAAC,CACrB9K,IAAI,CAAC,GAAG,CAAC,CACT8G,KAAK,CAAC,OAAO,CAAC,CACduJ,MAAM,CAAC6G,CAAC,IAAIA,CAAC,CAACjZ,IAAI,CAAC,CAAC,CAAC;;MAExB;MACAgG,UAAU,CAACqJ,6BAA6B,CAACxI,SAAS,CAAC,CAAC;;MAEpD;MACAxI,UAAU,CAAC,MAAM;QACf4L,uBAAuB,CAAC,CAAC;MAC3B,CAAC,EAAE,GAAG,CAAC;MAEP,OAAO,MAAM;QACX+O,eAAe,CAAC/c,MAAM,CAAC,CAAC;MAC1B,CAAC;IACH;EACF,CAAC,EAAE,CAACuJ,WAAW,EAAE7K,WAAW,EAAEsL,WAAW,CAAC,CAAC;EAE3C,oBACE3L,OAAA;IAAK0E,SAAS,EAAC,KAAK;IAAAka,QAAA,gBAClB5e,OAAA;MAAK0E,SAAS,EAAC,SAAS;MAAAka,QAAA,gBACtB5e,OAAA;QAAK0E,SAAS,EAAC,MAAM;QAAAka,QAAA,eACnB5e,OAAA;UAAA4e,QAAA,EAAI;QAAQ;UAAArU,QAAA,EAAAsU,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAxU,QAAA,EAAAsU,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACd,CAAC,eAEN/e,OAAA;QAAK0E,SAAS,EAAC,kBAAkB;QAAAka,QAAA,gBAC/B5e,OAAA;UAAA4e,QAAA,EAAI;QAAI;UAAArU,QAAA,EAAAsU,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACb/e,OAAA;UACE8B,EAAE,EAAC,qBAAqB;UACxBwB,KAAK,EAAE4H,WAAY;UACnB8T,QAAQ,EAAE9D,uBAAwB;UAClCxW,SAAS,EAAC,aAAa;UAAAka,QAAA,gBAEvB5e,OAAA;YAAQsD,KAAK,EAAC,QAAQ;YAAAsb,QAAA,EAAC;UAAI;YAAArU,QAAA,EAAAsU,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACpC/e,OAAA;YAAQsD,KAAK,EAAC,QAAQ;YAAAsb,QAAA,EAAC;UAAI;YAAArU,QAAA,EAAAsU,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACpC/e,OAAA;YAAQsD,KAAK,EAAC,cAAc;YAAAsb,QAAA,EAAC;UAAI;YAAArU,QAAA,EAAAsU,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC1C/e,OAAA;YAAQsD,KAAK,EAAC,QAAQ;YAAAsb,QAAA,EAAC;UAAI;YAAArU,QAAA,EAAAsU,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACpC/e,OAAA;YAAQsD,KAAK,EAAC,eAAe;YAAAsb,QAAA,EAAC;UAAI;YAAArU,QAAA,EAAAsU,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAxU,QAAA,EAAAsU,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrC,CAAC;MAAA;QAAAxU,QAAA,EAAAsU,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,eAEN/e,OAAA;QAAK0E,SAAS,EAAC,gBAAgB;QAAAka,QAAA,gBAC7B5e,OAAA;UACEkD,IAAI,EAAC,MAAM;UACX+b,MAAM,EAAC,eAAe;UACtBC,MAAM;UACNpd,EAAE,EAAC,aAAa;UAChBkd,QAAQ,EAAElI,gBAAiB;UAC3BqI,GAAG,EAAExU;QAAQ;UAAAJ,QAAA,EAAAsU,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACd,CAAC,eACF/e,OAAA;UACE0E,SAAS,EAAC,YAAY;UACtB0a,OAAO,EAAEA,CAAA,KAAMzU,OAAO,CAACsO,OAAO,CAACoG,KAAK,CAAC,CAAE;UAAAT,QAAA,EACxC;QAED;UAAArU,QAAA,EAAAsU,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAxU,QAAA,EAAAsU,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC;IAAA;MAAAxU,QAAA,EAAAsU,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACK,CAAC,eAEZ/e,OAAA;MAAK0E,SAAS,EAAC,cAAc;MAAAka,QAAA,gBAC3B5e,OAAA;QAAK0E,SAAS,EAAC,SAAS;QAAAka,QAAA,EACrBrU,QAAQ,iBAAIvK,OAAA;UAAI0E,SAAS,EAAC,UAAU;UAAAka,QAAA,EAAErU;QAAQ;UAAAA,QAAA,EAAAsU,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK;MAAC;QAAAxU,QAAA,EAAAsU,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAE9C,CAAC,eAEV/e,OAAA;QAAK0E,SAAS,EAAC,cAAc;QAACya,GAAG,EAAE3T,kBAAmB;QAAAoT,QAAA,gBAClD5e,OAAA;UAAKsf,uBAAuB,EAAE;YAAEC,MAAM,EAAE9T;UAAQ;QAAE;UAAAlB,QAAA,EAAAsU,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,EAEtDze,UAAU,GAAG,CAAC,iBACbN,OAAA;UAAK0E,SAAS,EAAC,mBAAmB;UAAAka,QAAA,gBAChC5e,OAAA;YACEof,OAAO,EAAEA,CAAA,KAAM7e,UAAU,CAAC,CAAC,CAAC,CAAE;YAC9B+M,QAAQ,EAAEjN,WAAW,IAAI,CAAE;YAC3BqE,SAAS,EAAC,UAAU;YAAAka,QAAA,EACrB;UAED;YAAArU,QAAA,EAAAsU,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACX/e,OAAA;YAAM0E,SAAS,EAAC,WAAW;YAAAka,QAAA,GAAC,SACtB,EAACve,WAAW,EAAC,KAAG,EAACC,UAAU,EAAC,SAChC;UAAA;YAAAiK,QAAA,EAAAsU,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eACP/e,OAAA;YACEof,OAAO,EAAEA,CAAA,KAAM7e,UAAU,CAAC,CAAC,CAAE;YAC7B+M,QAAQ,EAAEjN,WAAW,IAAIC,UAAW;YACpCoE,SAAS,EAAC,UAAU;YAAAka,QAAA,EACrB;UAED;YAAArU,QAAA,EAAAsU,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAxU,QAAA,EAAAsU,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACR,CACN;MAAA;QAAAxU,QAAA,EAAAsU,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC;IAAA;MAAAxU,QAAA,EAAAsU,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAxU,QAAA,EAAAsU,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC7U,EAAA,CAjhFID,GAAG;AAAAuV,EAAA,GAAHvV,GAAG;AAmhFT,eAAeA,GAAG;AAAC,IAAAuV,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}