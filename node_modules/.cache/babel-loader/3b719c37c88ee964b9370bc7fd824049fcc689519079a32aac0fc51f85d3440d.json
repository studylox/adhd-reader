{"ast":null,"code":"var _jsxFileName = \"D:\\\\adhd-read-helper\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 添加全局事件跟踪对象\nwindow.eventTracker = window.eventTracker || {\n  mouseFollowHandlers: []\n};\n\n// 自动阅读器全局对象\nwindow.autoReader = {\n  charPositions: [],\n  intervalId: null,\n  currentIndex: 0,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false,\n  cleanup: null\n};\n\n// 添加新的节奏阅读模式代码\n// 全局变量，确保在页面切换后仍然保持状态\nwindow.rhythmReaderGlobal = window.rhythmReaderGlobal || {\n  active: false,\n  speed: 300\n};\n\n// 节奏阅读模式 - 增强控制版\n(function () {\n  console.log(\"节奏阅读模式 - 增强控制版初始化\");\n\n  // 配置参数\n  const defaultSpeed = 300; // 默认速度 (ms/字符)\n  const minSpeed = 50; // 最小速度\n  const maxSpeed = 1500; // 最大速度\n  const speedStep = 50; // 速度调整步长\n\n  // 状态变量\n  let isActive = false;\n  let intervalId = null;\n  let charElements = [];\n  let currentIndex = 0;\n  let readIndices = new Set();\n  let currentSpeed = defaultSpeed;\n  let pagesRead = 0;\n\n  // 查找下一页按钮\n  const findNextPageButton = function () {\n    const selectors = ['.next-page', '.next', '#next', '[aria-label=\"下一页\"]', '[aria-label=\"Next\"]', 'button:contains(\"下一页\")', 'button:contains(\"Next\")'];\n    for (const selector of selectors) {\n      try {\n        const buttons = document.querySelectorAll(selector);\n        for (const btn of buttons) {\n          if (btn.offsetParent !== null) {\n            return btn;\n          }\n        }\n      } catch (e) {}\n    }\n    const allButtons = document.querySelectorAll('button, a, div[role=\"button\"]');\n    for (const btn of allButtons) {\n      const text = (btn.textContent || '').trim().toLowerCase();\n      if (text === '下一页' || text === 'next' || text === '>' || text === '→') {\n        if (btn.offsetParent !== null) {\n          return btn;\n        }\n      }\n    }\n    return null;\n  };\n\n  // 自动翻页\n  const autoTurnPage = function () {\n    console.log(\"尝试自动翻页...\");\n    const nextButton = findNextPageButton();\n    if (!nextButton) {\n      console.log(\"未找到下一页按钮\");\n      showMessage(\"已读完当前页，但未找到下一页按钮\");\n      return;\n    }\n    if (intervalId) {\n      clearInterval(intervalId);\n      intervalId = null;\n    }\n    pagesRead++;\n    console.log(`已读完第 ${pagesRead} 页，点击下一页按钮`);\n    nextButton.click();\n    const observer = new MutationObserver(mutations => {\n      const contentAdded = mutations.some(mutation => mutation.type === 'childList' && mutation.addedNodes.length > 0);\n      if (contentAdded) {\n        console.log(\"检测到新内容已加载\");\n        observer.disconnect();\n        setTimeout(() => {\n          console.log(\"在新页面上重新启动节奏阅读模式\");\n          startReading();\n        }, 800);\n      }\n    });\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  };\n\n  // 清理\n  const cleanup = function () {\n    console.log(\"执行清理...\");\n    if (intervalId) {\n      clearInterval(intervalId);\n      intervalId = null;\n    }\n    try {\n      document.querySelectorAll('.rhythm-char').forEach(span => {\n        if (span.parentNode) {\n          span.parentNode.replaceChild(document.createTextNode(span.textContent), span);\n        }\n      });\n    } catch (e) {\n      console.error(\"清理文本失败:\", e);\n    }\n    charElements = [];\n    currentIndex = 0;\n    readIndices = new Set();\n    isActive = false;\n    pagesRead = 0;\n    const panel = document.getElementById('rhythm-control-panel');\n    if (panel) panel.remove();\n  };\n\n  // 简单通知\n  const showMessage = function (message) {\n    console.log(message);\n    alert(message);\n  };\n\n  // 添加控制面板\n  const addControlPanel = function () {\n    const existingPanel = document.getElementById('rhythm-control-panel');\n    if (existingPanel) existingPanel.remove();\n    const panel = document.createElement('div');\n    panel.id = 'rhythm-control-panel';\n    panel.style.cssText = `\n      position: fixed;\n      bottom: 20px;\n      right: 20px;\n      z-index: 999999;\n      background: rgba(0, 0, 0, 0.8);\n      color: white;\n      padding: 15px;\n      border-radius: 8px;\n      display: flex;\n      flex-direction: column;\n      gap: 10px;\n      min-width: 240px;\n    `;\n\n    // 控制按钮\n    const controlButton = document.createElement('button');\n    controlButton.id = 'rhythm-control-button';\n    controlButton.textContent = '暂停节奏阅读';\n    controlButton.style.cssText = `\n      background: #4CAF50;\n      color: white;\n      border: none;\n      border-radius: 4px;\n      padding: 8px;\n      font-size: 14px;\n      cursor: pointer;\n      margin-bottom: 10px;\n    `;\n    controlButton.onclick = function () {\n      if (intervalId) {\n        // 暂停\n        if (intervalId) {\n          clearInterval(intervalId);\n          intervalId = null;\n        }\n        controlButton.textContent = '继续节奏阅读';\n        controlButton.style.background = '#2196F3';\n      } else {\n        // 继续\n        intervalId = setInterval(nextChar, currentSpeed);\n        controlButton.textContent = '暂停节奏阅读';\n        controlButton.style.background = '#4CAF50';\n      }\n    };\n    panel.appendChild(controlButton);\n\n    // 速度控制\n    const speedControl = document.createElement('div');\n    speedControl.style.display = 'flex';\n    speedControl.style.alignItems = 'center';\n    speedControl.style.gap = '8px';\n    const speedLabel = document.createElement('span');\n    speedLabel.textContent = `速度: ${currentSpeed}ms`;\n    speedLabel.style.fontSize = '13px';\n    speedControl.appendChild(speedLabel);\n    const speedSlider = document.createElement('input');\n    speedSlider.type = 'range';\n    speedSlider.min = minSpeed;\n    speedSlider.max = maxSpeed;\n    speedSlider.step = speedStep;\n    speedSlider.value = currentSpeed;\n    speedSlider.style.flex = '1';\n    speedSlider.addEventListener('input', function () {\n      const newSpeed = parseInt(this.value);\n      currentSpeed = newSpeed;\n      speedLabel.textContent = `速度: ${newSpeed}ms`;\n\n      // 如果正在运行，立即更新间隔时间\n      if (intervalId) {\n        clearInterval(intervalId);\n        intervalId = setInterval(nextChar, currentSpeed);\n      }\n    });\n    speedControl.appendChild(speedSlider);\n    panel.appendChild(speedControl);\n    panel.appendChild(speedControl);\n    document.body.appendChild(panel);\n    return panel;\n  };\n\n  // 启动阅读\n  const startReading = function () {\n    console.log(\"启动节奏阅读...\");\n\n    // 清理之前的实例\n    cleanup();\n    const container = document.querySelector('.pdf-content') || document.querySelector('[class*=\"pdf\"]') || document.querySelector('article') || document.querySelector('main') || document.body;\n    const textNodes = [];\n    const findText = function (element) {\n      for (let i = 0; i < element.childNodes.length; i++) {\n        const node = element.childNodes[i];\n        if (node.nodeType === 3 && node.nodeValue.trim() !== '') {\n          textNodes.push(node);\n        } else if (node.nodeType === 1 && !['SCRIPT', 'STYLE', 'BUTTON', 'INPUT', 'SELECT', 'NOSCRIPT'].includes(node.tagName)) {\n          findText(node);\n        }\n      }\n    };\n    findText(container);\n    if (textNodes.length === 0) {\n      showMessage(\"错误: 未找到文本内容\");\n      return;\n    }\n    try {\n      textNodes.forEach(node => {\n        if (!node.nodeValue || !node.parentNode) return;\n        const text = node.nodeValue;\n        const fragment = document.createDocumentFragment();\n        for (let i = 0; i < text.length; i++) {\n          const span = document.createElement('span');\n          span.textContent = text[i];\n          span.className = 'rhythm-char';\n          span.dataset.index = charElements.length;\n          fragment.appendChild(span);\n          charElements.push(span);\n        }\n        node.parentNode.replaceChild(fragment, node);\n      });\n    } catch (e) {\n      console.error(\"处理文本失败:\", e);\n      showMessage(\"生成节奏阅读效果失败\");\n      return;\n    }\n    if (charElements.length === 0) {\n      showMessage(\"未找到可读内容\");\n      return;\n    }\n    isActive = true;\n    currentIndex = 0;\n    updateDisplay();\n    intervalId = setInterval(nextChar, currentSpeed);\n    addControlPanel();\n  };\n\n  // 更新显示\n  const updateDisplay = function () {\n    charElements.forEach((span, index) => {\n      if (index === currentIndex) {\n        span.style.color = 'green';\n        span.style.fontWeight = 'bold';\n      } else if (readIndices.has(index)) {\n        span.style.color = 'white';\n      } else {\n        span.style.color = 'rgba(200,200,200,0.3)';\n      }\n    });\n  };\n\n  // 检查是否在视口中\n  const isInViewport = function (element) {\n    const rect = element.getBoundingClientRect();\n    return rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth);\n  };\n\n  // 下一个字符\n  const nextChar = function () {\n    if (!isActive || !charElements.length) return;\n    readIndices.add(currentIndex);\n    currentIndex++;\n    if (currentIndex >= charElements.length) {\n      if (intervalId) {\n        clearInterval(intervalId);\n        intervalId = null;\n      }\n      console.log(\"当前页已读完，尝试翻页\");\n      autoTurnPage();\n      return;\n    }\n    updateDisplay();\n\n    // 确保当前字符可见\n    const currentChar = charElements[currentIndex];\n    if (currentChar && !isInViewport(currentChar)) {\n      currentChar.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center'\n      });\n    }\n  };\n\n  // 处理模式切换\n  const handleModeChange = function (mode) {\n    console.log(\"模式更改为:\", mode);\n    if (mode !== 'rhythm' && mode !== '节奏阅读' && isActive) {\n      cleanup();\n    }\n  };\n\n  // 重写模式切换函数\n  const originalFunction = window.readingModeChanged;\n  window.readingModeChanged = function (mode) {\n    if (typeof originalFunction === 'function') {\n      try {\n        originalFunction(mode);\n      } catch (e) {}\n    }\n    handleModeChange(mode);\n  };\n\n  // 添加测试按钮\n  const addTestButton = function () {\n    const button = document.createElement('button');\n    button.id = 'rhythm-test-button';\n    button.textContent = '测试节奏阅读';\n    button.style.cssText = `\n      position: fixed;\n      top: 10px;\n      right: 10px;\n      z-index: 999999;\n      background: #ff9800;\n      color: white;\n      padding: 8px 12px;\n      border: none;\n      border-radius: 4px;\n      font-size: 14px;\n      cursor: pointer;\n    `;\n    button.onclick = startReading; // 直接启动阅读\n    document.body.appendChild(button);\n  };\n\n  // 初始化\n  const initialize = function () {\n    console.log(\"初始化节奏阅读组件...\");\n    addTestButton();\n  };\n\n  // 等待DOM加载完成\n  document.addEventListener('DOMContentLoaded', initialize);\n\n  // 暴露全局API\n  window.manualStartRhythmReading = startReading;\n  console.log(\"节奏阅读模式初始化完成 - 增强控制版\");\n})();\n\n// 定义一个全局函数用于从应用代码中启动节奏阅读\nwindow.activateRhythmReadingMode = function () {\n  console.log(\"尝试从应用代码中启动节奏阅读模式\");\n  if (window.rhythmReader) {\n    if (window.rhythmReader.active) {\n      console.log(\"节奏阅读模式已经在运行\");\n    } else {\n      window.rhythmReader.start();\n    }\n  } else {\n    console.error(\"节奏阅读模式未初始化\");\n    alert(\"无法启动节奏阅读模式：组件未初始化\");\n  }\n};\n\n// 更新初始化函数\nconst initializeRhythmReading = () => {\n  // 不再自动初始化，而是等待用户选择\n  console.log(\"节奏阅读模式准备就绪，等待用户选择\");\n};\n\n// 更新启动函数\nconst startRhythmReading = () => {\n  if (window.rhythmReader && typeof window.rhythmReader.start === 'function') {\n    window.rhythmReader.start();\n  }\n};\n\n// 节奏阅读模式 - 自动翻页版\n(function () {\n  console.log(\"节奏阅读模式 - 自动翻页版初始化\");\n\n  // 状态变量\n  let isActive = false;\n  let intervalId = null;\n  let charElements = [];\n  let currentIndex = 0;\n  let readIndices = new Set();\n\n  // 进度监控 - 记录已读页数\n  let pagesRead = 0;\n\n  // 查找下一页按钮的帮助函数\n  const findNextPageButton = function () {\n    // 常见的选择器\n    const selectors = ['.next-page', '.next', '#next', '[aria-label=\"下一页\"]', '[aria-label=\"Next\"]', 'button:contains(\"下一页\")', 'button:contains(\"Next\")'];\n    for (const selector of selectors) {\n      try {\n        const buttons = document.querySelectorAll(selector);\n        for (const btn of buttons) {\n          if (btn.offsetParent !== null) {\n            // 确保按钮可见\n            return btn;\n          }\n        }\n      } catch (e) {}\n    }\n\n    // 如果通过选择器找不到，尝试通过文本内容查找\n    const allButtons = document.querySelectorAll('button, a, div[role=\"button\"]');\n    for (const btn of allButtons) {\n      const text = (btn.textContent || '').trim().toLowerCase();\n      if (text === '下一页' || text === 'next' || text === '>' || text === '→') {\n        if (btn.offsetParent !== null) {\n          return btn;\n        }\n      }\n    }\n    return null;\n  };\n\n  // 自动翻页函数\n  const autoTurnPage = function () {\n    console.log(\"尝试自动翻页...\");\n\n    // 找到下一页按钮\n    const nextButton = findNextPageButton();\n    if (!nextButton) {\n      console.log(\"未找到下一页按钮\");\n      showMessage(\"已读完当前页，但未找到下一页按钮\");\n      return;\n    }\n\n    // 暂停当前阅读\n    if (intervalId) {\n      clearInterval(intervalId);\n      intervalId = null;\n    }\n\n    // 增加已读页数\n    pagesRead++;\n    console.log(`已读完第 ${pagesRead} 页，点击下一页按钮`);\n\n    // 模拟点击下一页按钮\n    nextButton.click();\n\n    // 监听DOM变化，等待新页面加载\n    const observer = new MutationObserver(mutations => {\n      // 检查新内容是否已加载\n      const contentAdded = mutations.some(mutation => mutation.type === 'childList' && mutation.addedNodes.length > 0);\n      if (contentAdded) {\n        console.log(\"检测到新内容已加载\");\n        // 停止观察\n        observer.disconnect();\n\n        // 延迟一下，确保新页面完全加载\n        setTimeout(() => {\n          // 重新启动节奏阅读模式\n          console.log(\"在新页面上重新启动节奏阅读模式\");\n          startReading();\n        }, 800);\n      }\n    });\n\n    // 开始观察文档变化\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  };\n\n  // 清理函数\n  const cleanup = function () {\n    console.log(\"执行清理...\");\n    if (intervalId) {\n      clearInterval(intervalId);\n      intervalId = null;\n    }\n    try {\n      document.querySelectorAll('.rhythm-char').forEach(span => {\n        if (span.parentNode) {\n          span.parentNode.replaceChild(document.createTextNode(span.textContent), span);\n        }\n      });\n    } catch (e) {\n      console.error(\"清理文本失败:\", e);\n    }\n    charElements = [];\n    currentIndex = 0;\n    readIndices = new Set();\n    isActive = false;\n    pagesRead = 0;\n    const button = document.getElementById('rhythm-control-button');\n    if (button) button.remove();\n  };\n\n  // 简单通知\n  const showMessage = function (message) {\n    console.log(message);\n    alert(message);\n  };\n\n  // 添加控制按钮\n  const addButton = function () {\n    const existingButton = document.getElementById('rhythm-control-button');\n    if (existingButton) existingButton.remove();\n    const button = document.createElement('button');\n    button.id = 'rhythm-control-button';\n    button.textContent = '暂停节奏阅读';\n    button.style.cssText = `\n      position: fixed;\n      bottom: 20px;\n      right: 20px;\n      z-index: 999999;\n      background: #4CAF50;\n      color: white;\n      padding: 10px 15px;\n      border: none;\n      border-radius: 5px;\n      font-size: 16px;\n      font-weight: bold;\n      cursor: pointer;\n    `;\n    button.onclick = function () {\n      if (intervalId) {\n        // 暂停\n        if (intervalId) {\n          clearInterval(intervalId);\n          intervalId = null;\n        }\n        button.textContent = '继续节奏阅读';\n        button.style.background = '#2196F3';\n      } else {\n        // 继续\n        intervalId = setInterval(nextChar, 300);\n        button.textContent = '暂停节奏阅读';\n        button.style.background = '#4CAF50';\n      }\n    };\n    document.body.appendChild(button);\n    return button;\n  };\n\n  // 启动阅读\n  const startReading = function () {\n    console.log(\"启动节奏阅读...\");\n\n    // 清理之前的实例\n    cleanup();\n\n    // 查找内容容器\n    const container = document.querySelector('.pdf-content') || document.querySelector('[class*=\"pdf\"]') || document.querySelector('article') || document.querySelector('main') || document.body;\n\n    // 查找所有文本节点\n    const textNodes = [];\n    const findText = function (element) {\n      for (let i = 0; i < element.childNodes.length; i++) {\n        const node = element.childNodes[i];\n        if (node.nodeType === 3 && node.nodeValue.trim() !== '') {\n          textNodes.push(node);\n        } else if (node.nodeType === 1 && !['SCRIPT', 'STYLE', 'BUTTON', 'INPUT', 'SELECT', 'NOSCRIPT'].includes(node.tagName)) {\n          findText(node);\n        }\n      }\n    };\n    findText(container);\n    if (textNodes.length === 0) {\n      showMessage(\"错误: 未找到文本内容\");\n      return;\n    }\n\n    // 处理文本节点\n    try {\n      textNodes.forEach(node => {\n        if (!node.nodeValue || !node.parentNode) return;\n        const text = node.nodeValue;\n        const fragment = document.createDocumentFragment();\n        for (let i = 0; i < text.length; i++) {\n          const span = document.createElement('span');\n          span.textContent = text[i];\n          span.className = 'rhythm-char';\n          span.dataset.index = charElements.length;\n          fragment.appendChild(span);\n          charElements.push(span);\n        }\n        node.parentNode.replaceChild(fragment, node);\n      });\n    } catch (e) {\n      console.error(\"处理文本失败:\", e);\n      showMessage(\"生成节奏阅读效果失败\");\n      return;\n    }\n    if (charElements.length === 0) {\n      showMessage(\"未找到可读内容\");\n      return;\n    }\n\n    // 激活状态\n    isActive = true;\n    currentIndex = 0;\n\n    // 更新显示\n    updateDisplay();\n\n    // 开始阅读\n    intervalId = setInterval(nextChar, 300);\n    addButton();\n  };\n\n  // 更新显示\n  const updateDisplay = function () {\n    charElements.forEach((span, index) => {\n      if (index === currentIndex) {\n        span.style.color = 'green';\n        span.style.fontWeight = 'bold';\n      } else if (readIndices.has(index)) {\n        span.style.color = 'white';\n      } else {\n        span.style.color = 'rgba(200,200,200,0.3)';\n      }\n    });\n  };\n\n  // 下一个字符\n  const nextChar = function () {\n    if (!isActive || !charElements.length) return;\n    readIndices.add(currentIndex);\n    currentIndex++;\n    if (currentIndex >= charElements.length) {\n      // 当前页已读完\n      if (intervalId) {\n        clearInterval(intervalId);\n        intervalId = null;\n      }\n      console.log(\"当前页已读完，尝试翻页\");\n      autoTurnPage(); // 尝试自动翻页\n      return;\n    }\n    updateDisplay();\n  };\n\n  // 处理模式切换\n  const handleModeChange = function (mode) {\n    console.log(\"模式更改为:\", mode);\n    if (mode !== 'rhythm' && mode !== 'rhythmReading' && isActive) {\n      cleanup();\n    }\n  };\n\n  // 重写模式切换函数\n  const originalFunction = window.readingModeChanged;\n  window.readingModeChanged = function (mode) {\n    if (typeof originalFunction === 'function') {\n      try {\n        originalFunction(mode);\n      } catch (e) {}\n    }\n    handleModeChange(mode);\n  };\n\n  // 添加测试按钮\n  const addTestButton = function () {\n    const button = document.createElement('button');\n    button.id = 'rhythm-test-button';\n    button.textContent = '测试节奏阅读';\n    button.style.cssText = `\n      position: fixed;\n      top: 10px;\n      right: 10px;\n      z-index: 999999;\n      background: #ff9800;\n      color: white;\n      padding: 8px;\n      border: none;\n      border-radius: 4px;\n      font-size: 14px;\n      cursor: pointer;\n    `;\n    button.onclick = startReading; // 直接启动阅读\n    document.body.appendChild(button);\n  };\n\n  // 初始化\n  const initialize = function () {\n    console.log(\"初始化节奏阅读组件...\");\n    addTestButton();\n  };\n\n  // 等待DOM加载完成\n  document.addEventListener('DOMContentLoaded', initialize);\n\n  // 暴露全局API\n  window.manualStartRhythmReading = startReading;\n  console.log(\"节奏阅读模式初始化完成 - 自动翻页版\");\n})();\nconst App = () => {\n  _s();\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  const [isTableOfContents, setIsTableOfContents] = useState(false);\n\n  // 实现缺失的函数\n  // 应用深色背景\n  const applyDarkBackground = () => {\n    document.body.classList.add('dark-background');\n\n    // 添加必要的CSS样式\n    if (!document.getElementById('dark-background-style')) {\n      const style = document.createElement('style');\n      style.id = 'dark-background-style';\n      style.textContent = `\n        .dark-background {\n          background-color: #000 !important;\n        }\n        .dark-background .sidebar {\n          background: linear-gradient(145deg, #4834d4, #341f9e) !important;\n        }\n        .dark-background .page-content {\n          background-color: #000 !important;\n        }\n        .dark-background .main-content {\n          background-color: #000 !important;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 恢复正常背景\n  const restoreDarkBackground = () => {\n    document.body.classList.remove('dark-background');\n  };\n\n  // 添加裸眼3D样式\n  const addNakedEye3DStyles = () => {\n    if (!document.getElementById('naked-eye-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'naked-eye-3d-style';\n      style.textContent = `\n        .naked-eye-3d-container {\n          position: relative;\n          perspective: 800px;\n          width: 100%;\n        }\n        \n        .naked-eye-3d-text {\n          display: inline-block;\n          animation: float 3s ease-in-out infinite;\n          text-shadow: 0 0 5px rgba(255,255,255,0.3);\n          padding: 0 4px;\n          color: white;\n          filter: drop-shadow(0 0 5px rgba(120, 220, 255, 0.6));\n        }\n        \n        @keyframes float {\n          0% { transform: translateZ(0px); }\n          50% { transform: translateZ(20px); }\n          100% { transform: translateZ(0px); }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 添加舒适3D样式\n  const addComfortable3DStyles = () => {\n    if (!document.getElementById('comfortable-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'comfortable-3d-style';\n      style.textContent = `\n        .emboss-3d-text {\n          color: #fff;\n          text-shadow: \n            1px 1px 1px rgba(0,0,0,0.5),\n            -1px -1px 1px rgba(255,255,255,0.5);\n          letter-spacing: 1.5px;\n          font-weight: 500;\n        }\n        \n        .float-3d-text {\n          display: inline-block;\n          transform-style: preserve-3d;\n          transform: perspective(500px) translateZ(10px);\n          text-shadow: 0 2px 5px rgba(0,0,0,0.5);\n        }\n        \n        .gradient-3d-text {\n          display: inline-block;\n          background: linear-gradient(to bottom, #fff, #aaa);\n          -webkit-background-clip: text;\n          -webkit-text-fill-color: transparent;\n          text-shadow: 0 2px 4px rgba(0,0,0,0.3);\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 添加闪读样式\n  const addFlashReadingStyles = () => {\n    if (!document.getElementById('flash-reading-style')) {\n      const style = document.createElement('style');\n      style.id = 'flash-reading-style';\n      style.textContent = `\n        .flash-reading-container {\n          position: relative;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          z-index: 1000;\n          padding: 20px;\n        }\n        \n        .flash-reading-display-wrapper {\n          position: relative;\n          margin: 40px 0;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        \n        .flash-reading-display {\n          font-size: 36px;\n          font-weight: bold;\n          text-align: center;\n          color: white;\n          min-height: 80px;\n          max-width: 90%;\n          padding: 20px 40px;\n          position: relative; /* 允许绝对定位的覆盖层 */\n          z-index: 2;\n        }\n        \n        .flash-reading-cover {\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(128, 128, 128, 0.6); /* 灰色遮罩 */\n          border-radius: 8px;\n          z-index: 1; /* 确保在文本后面 */\n        }\n        \n        .flash-reading-controls {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          gap: 20px;\n          margin-bottom: 20px;\n          width: 100%;\n        }\n        \n        .flash-reading-buttons {\n          display: flex;\n          gap: 10px;\n          flex-wrap: wrap;\n          justify-content: center;\n        }\n        \n        .flash-reading-speed {\n          display: flex;\n          align-items: center;\n          color: white;\n          width: 80%;\n          max-width: 400px;\n          gap: 10px;\n        }\n        \n        .flash-reading-slider {\n          flex: 1;\n          height: 8px;\n          appearance: none;\n          background: #555;\n          border-radius: 4px;\n          outline: none;\n        }\n        \n        .flash-reading-slider::-webkit-slider-thumb {\n          appearance: none;\n          width: 20px;\n          height: 20px;\n          border-radius: 50%;\n          background: #6c5ce7;\n          cursor: pointer;\n        }\n        \n        .flash-reading-btn {\n          padding: 10px 20px;\n          border: none;\n          border-radius: 4px;\n          background-color: #6c5ce7;\n          color: white;\n          font-size: 16px;\n          cursor: pointer;\n          transition: background-color 0.2s;\n        }\n        \n        .flash-reading-btn:hover {\n          background-color: #5344c0;\n        }\n        \n        .flash-reading-btn:disabled {\n          background-color: #aaa;\n          cursor: not-allowed;\n        }\n        \n        .flash-reading-progress {\n          color: white;\n          font-size: 14px;\n          margin-top: 10px;\n        }\n        .flash-reading-speed-note {\n          font-size: 12px;\n          color: #ccc;\n          margin-left: 5px;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n\n  // 初始化闪读模式\n  const initializeFlashReading = () => {\n    // 添加样式\n    addFlashReadingStyles();\n    const sentences = window.flashReadingSentences;\n    if (!sentences || !Array.isArray(sentences) || sentences.length === 0) {\n      console.error('闪读模式: 未找到句子数据');\n      return;\n    }\n\n    // 获取全局UI元素\n    const display = document.getElementById('flash-reading-display');\n    const speedSlider = document.getElementById('flash-reading-speed');\n    const speedValue = document.getElementById('flash-reading-speed-value');\n    const playButton = document.getElementById('flash-reading-play');\n    const pauseButton = document.getElementById('flash-reading-pause');\n    const stopButton = document.getElementById('flash-reading-stop');\n    const prevButton = document.getElementById('flash-reading-prev-sentence');\n    const nextButton = document.getElementById('flash-reading-next-sentence');\n    const progress = document.getElementById('flash-reading-progress');\n    const cover = document.querySelector('.flash-reading-cover');\n    if (!display || !speedSlider || !speedValue || !playButton || !pauseButton || !stopButton || !prevButton || !nextButton || !progress || !cover) {\n      console.error('闪读模式: 未找到UI元素');\n      return;\n    }\n\n    // 创建闪读控制器\n    window.flashReader = {\n      sentences: sentences,\n      currentIndex: 0,\n      interval: null,\n      speed: parseInt(speedSlider.value),\n      isPlaying: false,\n      // 开始闪读\n      start() {\n        if (this.interval) {\n          clearInterval(this.interval);\n        }\n        this.isPlaying = true;\n        playButton.disabled = true;\n        pauseButton.disabled = false;\n        progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n\n        // 显示当前句子\n        this.displayCurrentSentence();\n\n        // 设置闪读间隔\n        this.interval = setInterval(() => {\n          this.currentIndex++;\n          if (this.currentIndex >= this.sentences.length) {\n            this.stop();\n            display.textContent = '阅读完成';\n            return;\n          }\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }, this.speed);\n      },\n      // 显示当前句子\n      displayCurrentSentence() {\n        if (this.currentIndex < this.sentences.length) {\n          const currentSentence = this.sentences[this.currentIndex];\n          display.textContent = currentSentence;\n          display.style.color = 'white'; // 确保文本为白色\n\n          // 调整背景以适应内容\n          setTimeout(() => {\n            const displayRect = display.getBoundingClientRect();\n            // 确保覆盖层完全包裹文本\n            cover.style.width = `${displayRect.width}px`;\n            cover.style.height = `${displayRect.height}px`;\n          }, 10);\n        }\n      },\n      // 暂停闪读\n      pause() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n      },\n      // 停止闪读\n      stop() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        this.currentIndex = 0;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n        display.textContent = '准备开始';\n        progress.textContent = `进度：0 / ${this.sentences.length}`; // 重置进度\n      },\n      // 更新速度\n      updateSpeed(newSpeed) {\n        this.speed = newSpeed;\n        speedValue.textContent = `${newSpeed} ms`;\n\n        // 保存速度设置到本地存储\n        localStorage.setItem('flash-reading-speed', newSpeed);\n\n        // 如果正在播放，重新开始以应用新速度\n        if (this.isPlaying) {\n          clearInterval(this.interval);\n          this.start(); // 直接调用start方法重新开始\n        }\n      },\n      // 返回上一句\n      prevSentence() {\n        if (this.currentIndex > 0) {\n          this.currentIndex--;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n      // 跳到下一句\n      nextSentence() {\n        if (this.currentIndex < this.sentences.length - 1) {\n          this.currentIndex++;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n      // 清理资源\n      cleanup() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        this.currentIndex = 0;\n      }\n    };\n\n    // 添加事件监听器\n    playButton.addEventListener('click', () => {\n      window.flashReader.start();\n    });\n    pauseButton.addEventListener('click', () => {\n      window.flashReader.pause();\n    });\n    stopButton.addEventListener('click', () => {\n      window.flashReader.stop();\n    });\n    speedSlider.addEventListener('input', e => {\n      const newSpeed = parseInt(e.target.value);\n      window.flashReader.updateSpeed(newSpeed);\n    });\n    prevButton.addEventListener('click', () => {\n      window.flashReader.prevSentence();\n    });\n    nextButton.addEventListener('click', () => {\n      window.flashReader.nextSentence();\n    });\n\n    // 初始化\n    const savedSpeed = localStorage.getItem('flash-reading-speed');\n    const initialSpeed = savedSpeed ? parseInt(savedSpeed) : 1000;\n    speedSlider.value = initialSpeed;\n    window.flashReader.updateSpeed(initialSpeed);\n    console.log('闪读模式已初始化，共 ' + sentences.length + ' 个句子');\n  };\n\n  // 创建闪读内容\n  const createFlashReadingContent = text => {\n    return `<div class=\"flash-reading-content\">\n      <p>${text}</p>\n    </div>`;\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 格式化文本用于鼠标跟随\n  const formatTextForMouseFollow = text => {\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个单词添加span，以便于添加高亮效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"follow-word\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\" data-follow=\"true\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用静态高亮\n  const applyStaticHighlight = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为单词随机添加颜色高亮\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      let lastColor = null;\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n          return;\n        }\n\n        // 随机决定是否高亮和使用哪种颜色\n        if (Math.random() < 0.7) {\n          let color;\n          if (lastColor === 'red') {\n            color = 'blue';\n          } else if (lastColor === 'blue') {\n            color = 'red';\n          } else {\n            color = Math.random() < 0.5 ? 'red' : 'blue';\n          }\n          lastColor = color;\n          processedParagraph += `<span class=\"highlight-word ${color}\">${word}</span>`;\n        } else {\n          processedParagraph += word;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用裸眼3D效果\n  const applyNakedEye3dEffect = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content naked-eye-3d-container\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个词添加3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"naked-eye-3d-text\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 应用舒适3D效果\n  const applyComfortable3dEffect = text => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n\n      // 为每个词随机应用不同的3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          processedParagraph += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 初始化裸眼3D\n  const initializeNakedEye3D = () => {\n    // 为裸眼3D文本添加动画\n    const textElements = document.querySelectorAll('.naked-eye-3d-text');\n    textElements.forEach((element, index) => {\n      // 添加随机延迟，使动画错开\n      const delay = Math.random() * 2;\n      element.style.animationDelay = `${delay}s`;\n    });\n  };\n\n  // 添加鼠标跟随监听器\n  const addMouseFollowListeners = () => {\n    // 获取内容容器\n    const contentArea = document.querySelector('.mouse-follow-content');\n    if (!contentArea) {\n      console.error('未找到鼠标跟随内容区域');\n      return;\n    }\n\n    // 上一个高亮的行\n    let lastHighlightedLine = null;\n\n    // 监听鼠标移动 - 精确的行检测\n    const mouseMoveHandler = e => {\n      // 获取鼠标位置\n      const mouseY = e.clientY;\n\n      // 获取所有行\n      const allLines = contentArea.querySelectorAll('.follow-line');\n      let foundLine = null;\n      let minDistance = Infinity;\n\n      // 寻找鼠标所在的精确行\n      allLines.forEach(line => {\n        const rect = line.getBoundingClientRect();\n        const lineCenter = rect.top + rect.height / 2;\n        const distance = Math.abs(mouseY - lineCenter);\n\n        // 如果鼠标在行范围内，计算到行中心的距离\n        if (mouseY >= rect.top && mouseY <= rect.bottom) {\n          if (distance < minDistance) {\n            minDistance = distance;\n            foundLine = line;\n          }\n        }\n      });\n\n      // 更新高亮状态\n      if (lastHighlightedLine && lastHighlightedLine !== foundLine) {\n        // 移除旧高亮\n        lastHighlightedLine.classList.remove('highlighted');\n      }\n      if (foundLine) {\n        // 添加新高亮\n        foundLine.classList.add('highlighted');\n        lastHighlightedLine = foundLine;\n\n        // 调试输出\n        console.log('当前高亮行:', foundLine.textContent.substring(0, 30) + '...');\n      } else if (lastHighlightedLine) {\n        // 如果没有找到新行，且有上一个高亮行，移除它\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n\n    // 鼠标离开处理\n    const mouseLeaveHandler = () => {\n      // 清除当前高亮\n      if (lastHighlightedLine) {\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n\n    // 存储处理函数引用\n    window.eventTracker = window.eventTracker || {\n      mouseFollowHandlers: []\n    };\n    window.eventTracker.mouseFollowHandlers.push({\n      element: contentArea,\n      event: 'mousemove',\n      handler: mouseMoveHandler\n    }, {\n      element: contentArea,\n      event: 'mouseleave',\n      handler: mouseLeaveHandler\n    });\n\n    // 添加事件监听器\n    contentArea.addEventListener('mousemove', mouseMoveHandler);\n    contentArea.addEventListener('mouseleave', mouseLeaveHandler);\n    console.log('改进的鼠标跟随监听器已初始化');\n  };\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n  }, []);\n\n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async file => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n\n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n\n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n\n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({\n        scale: 1.0\n      });\n\n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async textContent => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n\n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n\n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n\n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    const lines = [...lineMap.values()];\n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    return hasTocKeywords || hasPageNumberPatterns || shortLineRatio > 0.7 && numberLineRatio > 0.3;\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n\n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n\n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n\n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n\n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = text => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    return result;\n  };\n\n  // 处理内容页面 - 按句子划分段落\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n\n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 按句子划分内容（句号、问号、感叹号等作为分隔符）\n      const sentences = splitIntoSentences(extractedText);\n\n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch (mode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          // 使用ADHD友好的静态高亮处理\n          console.log('应用ADHD友好的静态高亮模式');\n          processedContent = formatSimpleHighlightedText(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'rhythm':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          processedContent = createFlashReadingContentFromSentences(sentences);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n      setContent(processedContent);\n\n      // 如果是静态高亮模式，添加延时验证检查\n      if (mode === 'static') {\n        setTimeout(() => {\n          const contentArea = document.querySelector('.adhd-highlight-mode');\n          if (contentArea) {\n            console.log('静态高亮模式元素存在');\n            const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n            console.log(`找到 ${paragraphs.length} 个段落`);\n\n            // 检查样式是否正确应用\n            if (paragraphs.length > 0) {\n              const firstPara = paragraphs[0];\n              const styles = window.getComputedStyle(firstPara);\n              console.log('段落应用的样式:', {\n                color: styles.color,\n                backgroundColor: styles.backgroundColor,\n                fontFamily: styles.fontFamily,\n                fontSize: styles.fontSize\n              });\n            }\n          }\n        }, 200);\n      }\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 将文本分割成句子\n  const splitIntoSentences = text => {\n    // 匹配句号、问号、感叹号后跟空格或结束的模式\n    // 支持中英文标点符号\n    const sentenceRegex = /([.!?。！？；;]+\\s*)/g;\n\n    // 分割文本成句子\n    const sentences = [];\n    let lastIndex = 0;\n    let match;\n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const sentence = text.substring(lastIndex, endIndex).trim();\n\n      // 避免添加空句子\n      if (sentence) {\n        sentences.push(sentence);\n      }\n      lastIndex = endIndex;\n    }\n\n    // 处理最后一部分（如果没有以句号等结尾）\n    if (lastIndex < text.length) {\n      const lastSentence = text.substring(lastIndex).trim();\n      if (lastSentence) {\n        sentences.push(lastSentence);\n      }\n    }\n    return sentences;\n  };\n\n  // 专门为闪读模式分割文本，以任意标点符号为分隔点\n  const splitIntoFlashReadingSegments = text => {\n    // 匹配任意标点符号包括中英文标点\n    const sentenceRegex = /([,.!?:;，。！？：；、]+\\s*)/g;\n\n    // 分割文本成短句\n    const segments = [];\n    let lastIndex = 0;\n    let match;\n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const segment = text.substring(lastIndex, endIndex).trim();\n\n      // 避免添加空段落\n      if (segment) {\n        segments.push(segment);\n      }\n      lastIndex = endIndex;\n    }\n\n    // 处理最后一部分（如果没有以标点符号结尾）\n    if (lastIndex < text.length) {\n      const lastSegment = text.substring(lastIndex).trim();\n      if (lastSegment) {\n        segments.push(lastSegment);\n      }\n    }\n    return segments;\n  };\n\n  // 格式化句子为HTML\n  const formatSentencesToHtml = sentences => {\n    let html = '<div class=\"pdf-content\">';\n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${sentence}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为句子应用静态高亮\n  const applyStaticHighlightToSentences = sentences => {\n    let html = '<div class=\"pdf-content adhd-content\">';\n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n\n      // 简单地为句子添加特定样式的class\n      html += `<p class=\"pdf-paragraph adhd-sentence\">${sentence}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为鼠标跟随模式格式化句子\n  const formatSentencesForMouseFollow = sentences => {\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    sentences.forEach((sentence, index) => {\n      if (sentence.trim() === '') return;\n\n      // 每个句子作为独立行，使用div而不是p标签\n      html += `<div class=\"follow-line\" data-line=\"${index}\" data-sentence=\"${sentence.substring(0, 20)}...\" style=\"color: inherit;\">${sentence}</div>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为舒适3D模式格式化句子\n  const applyComfortable3dEffectToSentences = sentences => {\n    let html = '<div class=\"pdf-content\">';\n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n\n      // 为每个词随机应用不同的3D效果\n      const words = sentence.split(/(\\s+)/);\n      let processedSentence = '';\n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedSentence += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          processedSentence += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      html += `<p class=\"pdf-paragraph\">${processedSentence}</p>`;\n    });\n    html += '</div>';\n    return html;\n  };\n\n  // 为闪读模式创建内容\n  const createFlashReadingContentFromSentences = sentences => {\n    // 储存句子到全局变量，用于后续显示\n    window.flashReadingSentences = sentences;\n\n    // 返回闪读界面的HTML结构\n    return `\n      <div class=\"flash-reading-container\">\n        <div class=\"flash-reading-controls\">\n          <div class=\"flash-reading-buttons\">\n            <button id=\"flash-reading-prev-sentence\" class=\"flash-reading-btn\">上一句</button>\n            <button id=\"flash-reading-play\" class=\"flash-reading-btn\">开始</button>\n            <button id=\"flash-reading-pause\" class=\"flash-reading-btn\" disabled>暂停</button>\n            <button id=\"flash-reading-stop\" class=\"flash-reading-btn\">停止</button>\n            <button id=\"flash-reading-next-sentence\" class=\"flash-reading-btn\">下一句</button>\n          </div>\n          <div class=\"flash-reading-speed\">\n            <span>速度：</span>\n            <input type=\"range\" id=\"flash-reading-speed\" min=\"300\" max=\"1700\" step=\"50\" value=\"1000\" class=\"flash-reading-slider\">\n            <span id=\"flash-reading-speed-value\">1000 ms</span>\n            <span class=\"flash-reading-speed-note\">（数值越小，切换越快）</span>\n          </div>\n          <div class=\"flash-reading-progress\">\n            <span id=\"flash-reading-progress\">进度：0 / ${sentences.length}</span>\n          </div>\n        </div>\n        <div class=\"flash-reading-display-wrapper\">\n          <div class=\"flash-reading-cover\"></div> <!-- 这里是闪卡 -->\n          <div id=\"flash-reading-display\" class=\"flash-reading-display\">准备开始</div>\n        </div>\n      </div>`;\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async file => {\n    try {\n      const text = await file.text();\n\n      // 根据阅读模式选择不同的处理方式\n      let processedContent = '';\n      if (readingMode === 'flash-reading') {\n        // 闪读模式下使用特定的分割函数\n        const segments = splitIntoFlashReadingSegments(text);\n        processedContent = createFlashReadingContentFromSentences(segments);\n\n        // 初始化闪读模式\n        setTimeout(() => {\n          initializeFlashReading();\n        }, 100);\n      } else {\n        // 其他模式使用默认的分割方式\n        const sentences = splitIntoSentences(text);\n        switch (readingMode) {\n          case 'normal':\n            processedContent = formatSentencesToHtml(sentences);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlightToSentences(sentences);\n            break;\n          case 'follow-mouse':\n            processedContent = formatSentencesForMouseFollow(sentences);\n            break;\n          case 'comfortable-3d':\n            processedContent = applyComfortable3dEffectToSentences(sentences);\n            break;\n          default:\n            processedContent = formatSentencesToHtml(sentences);\n        }\n      }\n\n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n\n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setContent('<div class=\"error-message\">TXT文件处理失败</div>');\n    }\n  };\n\n  // 处理Markdown文件\n  const handleMarkdownFile = async file => {\n    try {\n      const text = await file.text();\n\n      // 使用marked库转换markdown为HTML\n      let html = '';\n      try {\n        if (window.marked) {\n          html = window.marked.parse(text);\n        } else {\n          // 如果没有marked库，简单地拆分为段落\n          html = `<div>${text.split(\"\\n\\n\").map(p => `<p>${p}</p>`).join(\"\")}</div>`;\n        }\n      } catch (parseError) {\n        console.error('Markdown解析错误:', parseError);\n        html = `<div>${text}</div>`;\n      }\n\n      // 提取纯文本内容\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = html;\n      const plainText = tempDiv.textContent || tempDiv.innerText || '';\n\n      // 分割文本为句子\n      const sentences = splitIntoSentences(plainText);\n\n      // 根据当前阅读模式处理内容\n      let processedContent = '';\n      switch (readingMode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlightToSentences(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          // 使用特定的闪读分割函数重新处理文本\n          const segments = splitIntoFlashReadingSegments(plainText);\n          processedContent = createFlashReadingContentFromSentences(segments);\n\n          // 初始化闪读模式\n          setTimeout(() => {\n            initializeFlashReading();\n          }, 100);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n\n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n\n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('Markdown处理错误:', error);\n      setContent('<div class=\"error-message\">Markdown文件处理失败</div>');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async e => {\n    const uploadedFile = e.target.files[0];\n    if (!uploadedFile) return;\n    setLoading(true);\n    setFileName(uploadedFile.name);\n    try {\n      if (uploadedFile.type === 'application/pdf') {\n        await handlePdfFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/plain' || uploadedFile.name.endsWith('.txt')) {\n        await handleTxtFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/markdown' || uploadedFile.name.endsWith('.md')) {\n        await handleMarkdownFile(uploadedFile);\n      } else {\n        setContent('<div class=\"error-message\">不支持的文件格式</div>');\n      }\n    } catch (error) {\n      console.error('处理文件时出错:', error);\n      setContent('<div class=\"error-message\">处理文件时出错</div>');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = container => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n\n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n\n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n\n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width / 2,\n            // 水平中心\n            y: rect.bottom,\n            // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n\n    // 过滤无效位置并排序\n    return positions.filter(p => p.char.trim() !== '').sort((a, b) => {\n      // 先按行排序，同行按列排序\n      const yDiff = a.y - b.y;\n      if (Math.abs(yDiff) > 5) {\n        // 5px阈值判断是否同一行\n        return yDiff;\n      }\n      return a.x - b.x;\n    });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n\n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - containerVisibleHeight / 2;\n\n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - window.innerHeight / 2;\n\n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n\n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n\n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length ||\n      // 已到末尾\n      positions[nextIndex].char.trim() === '' ||\n      // 下一个是空白\n      positions[nextIndex].y > charPosition.y + 5) {\n        // 下一个在新行\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n\n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n\n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || current.y > prev.y + 5) {\n        // 有明显换行\n        break;\n      }\n      start--;\n    }\n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n\n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n\n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (window.autoReader.charPositions.length === 0) {\n      if (window.currentPage < window.totalPages) {\n        window.changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 重置索引到开头\n    window.autoReader.currentIndex = 0;\n\n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n\n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n\n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none';\n      highlight.style.zIndex = '998';\n      contentContainer.appendChild(highlight);\n    }\n\n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n\n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20;\n\n    // 尝试获取实际行高\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(window.autoReader.charPositions[i].y - window.autoReader.charPositions[i - 1].y);\n        if (yDiff > 5) {\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n\n    // 记录上次滚动的位置\n    let lastScrolledY = -1;\n    const scrollSafeZone = lineHeight * 2.5;\n\n    // 设置字符大小的估计值\n    let charWidth = 20;\n    let charHeight = lineHeight * 0.8;\n\n    // 尝试估计字符宽度\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        if (window.autoReader.charPositions[i].x !== window.autoReader.charPositions[i - 1].x) {\n          const xDiff = Math.abs(window.autoReader.charPositions[i].x - window.autoReader.charPositions[i - 1].x);\n          if (xDiff > 0 && xDiff < 50) {\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    window.autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (window.autoReader.currentIndex < window.autoReader.charPositions.length && ((_window$autoReader$ch = window.autoReader.charPositions[window.autoReader.currentIndex]) === null || _window$autoReader$ch === void 0 ? void 0 : _window$autoReader$ch.char.trim()) === '') {\n        var _window$autoReader$ch;\n        window.autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (window.autoReader.currentIndex >= window.autoReader.charPositions.length) {\n        if (window.currentPage < window.totalPages) {\n          window.changePage(1);\n          clearInterval(window.autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n      const pos = window.autoReader.charPositions[window.autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      if (cursor && highlight) {\n        const contentRect = contentContainer.getBoundingClientRect();\n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        highlight.style.left = `${relativeX - charWidth / 2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n\n        // 滚动处理\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          if (isContainerScrollable) {\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = relativeY;\n            }\n          } else {\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      window.autoReader.currentIndex++;\n    }, window.autoReader.speed);\n\n    // 在停止自动阅读时清除所有高亮\n    window.autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n\n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n\n      // 调用清理函数\n      if (window.autoReader.cleanup) {\n        window.autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n\n    // 重置翻页状态\n    window.autoReader.isPageChanging = false;\n\n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n\n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n\n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n\n    // 收集字符位置\n    window.autoReader.charPositions = getAllCharacterPositions(content);\n\n    // 如果当前页没有内容，尝试翻页\n    if (window.autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !window.autoReader.isPageChanging) {\n        window.autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async e => {\n    const newMode = e.target.value;\n    const prevMode = readingMode;\n    console.log(`切换阅读模式: 从 ${prevMode} 到 ${newMode}`);\n\n    // 更新状态\n    setReadingMode(newMode);\n\n    // 如果有PDF文档和当前页，重新处理当前页内容\n    if (pdfDocument && currentPage > 0) {\n      try {\n        console.log('重新处理当前页面内容');\n        const page = await pdfDocument.getPage(currentPage);\n\n        // 不使用任何额外处理，直接使用最原始的方式重新加载页面\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n\n        // 根据当前模式设置内容\n        if (newMode === 'static') {\n          // 静态高亮模式 - 使用改进的句子处理\n          const html = formatSimpleHighlightedText(sentences);\n          console.log('设置静态高亮内容');\n          setContent(html);\n\n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n            if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n\n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n\n                // 验证文字颜色\n                if (styles.color === 'rgb(51, 51, 51)' || styles.color === '#333333') {\n                  console.log('文字颜色正确应用');\n                } else {\n                  console.warn('文字颜色可能未正确应用:', styles.color);\n                }\n              }\n            } else {\n              console.error('未找到静态高亮模式内容区域');\n            }\n          }, 200);\n        } else if (newMode === 'flash-reading') {\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n\n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n\n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n        } else {\n          // 其他模式保持不变\n          const handler = getContentHandlerForMode(newMode);\n          const processedContent = handler(sentences);\n          setContent(processedContent);\n        }\n      } catch (error) {\n        console.error('应用阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 首先确保移除鼠标跟随监听器\n    removeMouseFollowListeners();\n\n    // 清理节奏阅读器\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n\n    // 清理闪读器\n    if (window.flashReader) {\n      window.flashReader.cleanup();\n    }\n\n    // 清理舒适3D效果\n    const comfortable3DElements = document.querySelectorAll('.emboss-3d-text, .float-3d-text, .gradient-3d-text');\n    comfortable3DElements.forEach(el => el.remove());\n\n    // 清理闪读模式元素\n    const flashReadingElements = document.querySelectorAll('.flash-reading-container, .flash-reading-display, .flash-reading-controls');\n    flashReadingElements.forEach(el => el.remove());\n\n    // 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll('.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line, .rhythm-char');\n    highlights.forEach(el => {\n      if (el.parentNode) el.parentNode.removeChild(el);\n    });\n\n    // 彻底替换内容区域以移除所有事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      var _contentArea$querySel;\n      // 先保存底部翻页控件\n      const bottomPagination = contentArea.querySelector('.bottom-pagination');\n\n      // 深度克隆内容，但不克隆事件监听器\n      const contentHTML = ((_contentArea$querySel = contentArea.querySelector('div[dangerouslySetInnerHTML]')) === null || _contentArea$querySel === void 0 ? void 0 : _contentArea$querySel.innerHTML) || '';\n      const newContentArea = contentArea.cloneNode(false);\n\n      // 创建新的内容容器\n      const newContentContainer = document.createElement('div');\n      newContentContainer.innerHTML = contentHTML;\n      newContentArea.appendChild(newContentContainer);\n\n      // 如果有底部翻页控件，重新添加\n      if (bottomPagination && totalPages > 0) {\n        const newBottomPagination = bottomPagination.cloneNode(true);\n        // 重新绑定事件\n        const prevBtn = newBottomPagination.querySelector('.page-btn:first-child');\n        const nextBtn = newBottomPagination.querySelector('.page-btn:last-child');\n        if (prevBtn) prevBtn.onclick = () => changePage(-1);\n        if (nextBtn) nextBtn.onclick = () => changePage(1);\n        newContentArea.appendChild(newBottomPagination);\n      }\n      if (contentArea.parentNode) {\n        contentArea.parentNode.replaceChild(newContentArea, contentArea);\n      }\n    }\n\n    // 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 移除所有特殊标记和样式\n      paragraph.removeAttribute('data-follow');\n      paragraph.removeAttribute('style');\n\n      // 清理特殊span标签\n      paragraph.innerHTML = paragraph.innerHTML.replace(/<span class=\"text-line\"[^>]*>/g, '').replace(/<span class=\"rhythm-char\"[^>]*>/g, '').replace(/<span class=\"line-highlight[^\"]*\"[^>]*>/g, '').replace(/<span class=\"mouse-highlight[^\"]*\"[^>]*>/g, '').replace(/<\\/span>/g, '');\n    });\n\n    // 移除特殊UI元素\n    const elementsToRemove = ['rhythm-speed-slider', 'rhythm-notification'];\n    elementsToRemove.forEach(id => {\n      const element = document.getElementById(id);\n      if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    });\n\n    // 移除暗色背景\n    document.body.classList.remove('dark-background');\n\n    // 清理闪读模式\n    if (window.flashReader && typeof window.flashReader.cleanup === 'function') {\n      window.flashReader.cleanup();\n    }\n  };\n  const handleAutoScroll = () => {\n    window.autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = e => {\n    if (readingMode !== 'follow-mouse') return;\n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    const rect = contentArea.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    clearAllHighlights();\n    const paragraphs = contentArea.querySelectorAll('p');\n    paragraphs.forEach(paragraph => {\n      const paragraphRect = paragraph.getBoundingClientRect();\n      const paragraphX = paragraphRect.left - rect.left;\n      const paragraphY = paragraphRect.top - rect.top;\n      if (y >= paragraphY && y <= paragraphY + paragraphRect.height) {\n        const words = paragraph.querySelectorAll('span');\n        words.forEach(word => {\n          const wordRect = word.getBoundingClientRect();\n          const wordX = wordRect.left - rect.left;\n          if (x >= wordX && x <= wordX + wordRect.width) {\n            word.classList.add('highlight');\n          }\n        });\n      }\n    });\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 专门用于移除鼠标跟随事件的函数\n  const removeMouseFollowListeners = () => {\n    // 移除记录的所有监听器\n    if (window.eventTracker && window.eventTracker.mouseFollowHandlers) {\n      window.eventTracker.mouseFollowHandlers.forEach(({\n        element,\n        event,\n        handler\n      }) => {\n        if (element && element.removeEventListener) {\n          element.removeEventListener(event, handler);\n        }\n      });\n      window.eventTracker.mouseFollowHandlers = [];\n    }\n\n    // 为安全起见，尝试从document和内容区域移除通用处理函数\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    }\n    document.removeEventListener('mousemove', handleMouseMove);\n\n    // 清除所有当前高亮\n    clearAllHighlights();\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n\n    // 添加底部翻页控件样式\n    const bottomPaginationStyles = document.createElement('style');\n    bottomPaginationStyles.id = 'bottom-pagination-styles';\n    bottomPaginationStyles.innerHTML = `\n      .bottom-pagination {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        padding: 20px 0 30px;\n        margin-top: 30px;\n        width: 100%;\n        background-color: transparent;\n        border-radius: 5px;\n      }\n\n      .bottom-pagination .page-btn {\n        background-color: #6c5ce7;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        padding: 8px 15px;\n        margin: 0 10px;\n        cursor: pointer;\n        font-size: 14px;\n        transition: background-color 0.2s ease;\n      }\n\n      .bottom-pagination .page-btn:hover {\n        background-color: #4834d4;\n      }\n\n      .bottom-pagination .page-btn:disabled {\n        background-color: #aaa;\n        cursor: not-allowed;\n      }\n\n      .bottom-pagination .page-info {\n        font-size: 14px;\n        margin: 0 10px;\n      }\n    `;\n    document.head.appendChild(bottomPaginationStyles);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n    addComfortable3DStyles();\n\n    // 添加鼠标跟随模式的样式\n    const mouseFollowStyle = document.createElement('style');\n    mouseFollowStyle.id = 'intelligent-mouse-follow-style';\n    mouseFollowStyle.textContent = `\n      /* 基础样式 */\n      .mouse-follow-content {\n        position: relative;\n        line-height: 1.8;\n      }\n      \n      .mouse-follow-content .follow-line {\n        position: relative;\n        padding: 8px 16px;\n        margin: 4px 0;\n        border-radius: 6px;\n        transition: all 0.2s ease;\n        display: block;\n        min-height: 1.8em;\n        white-space: normal;\n        word-wrap: break-word;\n        text-indent: 2em;\n      }\n      \n      /* 高亮状态 */\n      .follow-line.highlighted {\n        background-color: #ffa500 !important; /* 橙色背景 */\n        color: #ffffff !important; /* 白色文字 */\n        font-weight: bold !important;\n        font-size: 1.1em; /* 稍微调小字号 */\n        transform: translateX(5px);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n      }\n      \n      \n      /* 平滑过渡效果 */\n      .follow-line {\n        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n      }\n      \n      /* 行间距优化 */\n      .mouse-follow-content .follow-line + .follow-line {\n        margin-top: 4px;\n      }\n      \n      /* 添加行指示器 */\n      .follow-line::before {\n        content: '';\n        position: absolute;\n        left: 0;\n        top: 0;\n        bottom: 0;\n        width: 3px;\n        background: linear-gradient(to bottom, transparent, rgba(255, 255, 255, 0.5), transparent);\n        opacity: 0;\n        transition: opacity 0.2s ease;\n      }\n      \n      .follow-line.highlighted::before {\n        opacity: 1;\n      }\n    `;\n    document.head.appendChild(mouseFollowStyle);\n\n    // 创建深色背景下的ADHD友好高亮样式\n    const style = document.createElement('style');\n    style.id = 'adhd-friendly-highlight-style';\n    style.textContent = `\n      /* ADHD友好的高亮样式 - 适配深色背景 */\n      .adhd-highlight-mode {\n        line-height: 1.8;\n        padding: 20px;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph {\n        margin-bottom: 1.2em;\n        background-color: transparent;\n        padding: 12px 15px;\n        border-radius: 6px;\n        border-left: 3px solid rgba(255, 255, 255, 0.2);\n        transition: all 0.3s ease;\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover {\n        transform: translateX(5px);\n        border-left-color: rgba(255, 255, 255, 0.4);\n      }\n      \n      /* 加粗样式 - 白色加粗 */\n      .adhd-bold {\n        font-weight: 700;\n        color: #ffffff;\n        letter-spacing: 0.02em;\n        font-size: 1.1em;\n        text-shadow: 0 0 1px rgba(255, 255, 255, 0.2);\n      }\n      \n      /* 彩色样式 - 使用鲜明的蓝色 */\n      .adhd-colored {\n        color: #6c5ce7;\n        font-weight: 500;\n        font-size: 1.05em;\n        text-shadow: 0 0 1px rgba(108, 92, 231, 0.2);\n      }\n      \n      /* 正常样式 - 普通白色 */\n      .adhd-normal {\n        color: rgba(255, 255, 255, 0.8);\n        font-size: 1em;\n      }\n\n      /* 添加平滑过渡效果 */\n      .adhd-bold, .adhd-colored, .adhd-normal {\n        transition: all 0.2s ease;\n      }\n\n      /* 悬停效果 */\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-bold {\n        color: #ffffff;\n        text-shadow: 0 0 2px rgba(255, 255, 255, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-colored {\n        color: #8a7ff7;\n        text-shadow: 0 0 2px rgba(138, 127, 247, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-normal {\n        color: rgba(255, 255, 255, 0.9);\n      }\n\n      /* 添加段落间距的视觉引导 */\n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph {\n        margin-top: 1.5em;\n        position: relative;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph::before {\n        content: '';\n        position: absolute;\n        top: -0.75em;\n        left: 0;\n        right: 0;\n        height: 1px;\n        background: linear-gradient(\n          to right,\n          transparent,\n          rgba(255, 255, 255, 0.1),\n          transparent\n        );\n      }\n    `;\n    document.head.appendChild(style);\n\n    // 添加基础鼠标跟随样式\n    const mouseFollowPageStyle = document.createElement('style');\n    mouseFollowPageStyle.id = 'basic-mouse-follow-style';\n    mouseFollowPageStyle.textContent = `\n      .follow-line {\n        padding: 8px 12px;\n        margin: 4px 0;\n        border-radius: 4px;\n        transition: background-color 0.2s ease;\n      }\n      .follow-line.highlighted {\n        background-color: #ffa500;\n        color: #000080;\n        font-weight: bold;\n      }\n    `;\n    document.head.appendChild(mouseFollowPageStyle);\n    return () => {\n      const existingStyle = document.getElementById('adhd-friendly-highlight-style');\n      if (existingStyle) existingStyle.remove();\n      const existingMouseFollowStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (existingMouseFollowStyle) existingMouseFollowStyle.remove();\n      const existingBasicMouseFollowStyle = document.getElementById('basic-mouse-follow-style');\n      if (existingBasicMouseFollowStyle) existingBasicMouseFollowStyle.remove();\n      mouseFollowPageStyle.remove();\n    };\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 清理旧监听器\n    removeMouseFollowListeners();\n\n    // 添加新监听器\n    setTimeout(() => {\n      addMouseFollowListeners();\n\n      // 添加调试辅助 - 显示行边界\n      const contentArea = document.querySelector('.mouse-follow-content');\n      if (contentArea) {\n        const lines = contentArea.querySelectorAll('.follow-line');\n        console.log(`初始化鼠标跟随模式，共 ${lines.length} 行`);\n\n        // 可选：启用可视化调试\n        if (false) {\n          // 设置为true可以启用可视化调试\n          lines.forEach((line, index) => {\n            line.style.border = '1px dashed #888';\n            line.setAttribute('title', `行 ${index + 1}`);\n          });\n        }\n\n        // 验证行高亮效果\n        const firstLine = lines[0];\n        if (firstLine) {\n          console.log('行样式验证:', {\n            padding: window.getComputedStyle(firstLine).padding,\n            margin: window.getComputedStyle(firstLine).margin,\n            fontSize: window.getComputedStyle(firstLine).fontSize,\n            lineHeight: window.getComputedStyle(firstLine).lineHeight\n          });\n        }\n      }\n    }, 100);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = delta => {\n    window.autoReader.speed = Math.max(100, window.autoReader.speed + delta);\n    if (window.autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async delta => {\n    console.log(`翻页请求: 当前页 ${currentPage}, 增量 ${delta}`);\n    const newPage = currentPage + delta;\n    if (newPage < 1 || newPage > totalPages) {\n      console.log('无效页码，不执行翻页');\n      return;\n    }\n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n    const wasFlashReading = readingMode === 'flash-reading' && window.flashReader && window.flashReader.isPlaying;\n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    if (wasFlashReading && window.flashReader) {\n      window.flashReader.cleanup();\n    }\n\n    // 更新页码\n    setCurrentPage(newPage);\n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n\n      // 检查是否为目录页\n      const textContent = await page.getTextContent();\n      const isToc = await detectIfTocPage(textContent);\n      setIsTableOfContents(isToc);\n      if (isToc) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, page.getViewport({\n          scale: 1.0\n        }));\n      } else {\n        // 处理正文页面 - 根据当前阅读模式处理\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n\n        // 根据当前模式设置内容\n        if (readingMode === 'static') {\n          console.log('翻页后应用静态高亮模式');\n          const processedContent = formatSimpleHighlightedText(sentences);\n          setContent(processedContent);\n\n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n            if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n\n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n              }\n            }\n          }, 200);\n        } else if (readingMode === 'flash-reading') {\n          // 如果是闪读模式，则需要特殊处理\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n\n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n\n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n          return; // 已处理，直接返回\n        } else {\n          // 其他模式使用原处理函数\n          await processContentPage(page, readingMode);\n        }\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n    } catch (error) {\n      console.error('页面切换错误:', error);\n    }\n  };\n\n  // ADHD友好的静态高亮处理函数\n  const formatSimpleHighlightedText = sentences => {\n    console.log('开始处理ADHD友好的静态高亮文本，句子数量:', sentences.length);\n    let html = '<div class=\"pdf-content adhd-highlight-mode\">';\n    sentences.forEach((sentence, sentenceIndex) => {\n      if (!sentence || sentence.trim() === '') {\n        console.log(`跳过空句子，索引: ${sentenceIndex}`);\n        return;\n      }\n\n      // 清理和规范化文本\n      const cleanText = sentence.trim().replace(/\\s+/g, ' ') // 规范化空白字符\n      .replace(/&/g, '&amp;') // 转义特殊字符\n      .replace(/</g, '&lt;').replace(/>/g, '&gt;');\n\n      // 处理句子中的单词，为它们添加不同样式\n      const words = cleanText.split(/(\\s+)/);\n      let formattedSentence = '';\n      words.forEach((word, wordIndex) => {\n        if (word.trim() === '') {\n          // 保留空格\n          formattedSentence += word;\n        } else {\n          // 根据位置应用不同的样式类\n          // 三种交替样式: 加粗、彩色、正常\n          const styleClass = wordIndex % 3 === 0 ? 'adhd-bold' : wordIndex % 3 === 1 ? 'adhd-colored' : 'adhd-normal';\n          formattedSentence += `<span class=\"${styleClass}\">${word}</span>`;\n        }\n      });\n      console.log(`处理句子 ${sentenceIndex + 1}:`, cleanText.substring(0, 50) + '...');\n      html += `<p class=\"pdf-paragraph\">${formattedSentence}</p>`;\n    });\n    html += '</div>';\n\n    // 调试输出\n    console.log('生成的ADHD友好静态高亮HTML:', html.substring(0, 200) + '...');\n    return html;\n  };\n\n  // 根据阅读模式获取相应的内容处理函数\n  const getContentHandlerForMode = mode => {\n    switch (mode) {\n      case 'normal':\n        return formatSentencesToHtml;\n      case 'static':\n        return applyStaticHighlightToSentences;\n      case 'follow-mouse':\n        return formatSentencesForMouseFollow;\n      case 'comfortable-3d':\n        return applyComfortable3dEffectToSentences;\n      case 'flash-reading':\n        return sentences => {\n          // 闪读模式使用专门的分割函数重新处理文本\n          return createFlashReadingContentFromSentences(sentences);\n        };\n      default:\n        return formatSentencesToHtml;\n    }\n  };\n\n  // 监听阅读模式和当前页面的变化\n  useEffect(() => {\n    if (readingMode === 'mouse-follow' && currentPage && !isTableOfContents) {\n      // 移除之前的样式\n      const oldStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (oldStyle) {\n        oldStyle.remove();\n      }\n\n      // 添加基础鼠标跟随样式\n      const followModeStyle = document.createElement('style');\n      followModeStyle.id = 'basic-mouse-follow-style';\n      followModeStyle.textContent = `\n        .follow-line {\n          padding: 8px 12px;\n          margin: 4px 0;\n          border-radius: 4px;\n          transition: background-color 0.2s ease;\n        }\n        .follow-line.highlighted {\n          background-color: #ffa500;\n          color: #000080;\n          font-weight: bold;\n        }\n      `;\n      document.head.appendChild(followModeStyle);\n\n      // 处理当前页面内容\n      const page = pdfDocument.getPage(currentPage);\n      const textContent = page.getTextContent();\n      const sentences = textContent.items.map(item => item.str).join(' ').split(/[。！？]/).filter(s => s.trim());\n\n      // 应用基础鼠标跟随格式化\n      setContent(formatSentencesForMouseFollow(sentences));\n\n      // 添加鼠标跟随监听器\n      setTimeout(() => {\n        addMouseFollowListeners();\n      }, 100);\n      return () => {\n        followModeStyle.remove();\n      };\n    }\n  }, [readingMode, currentPage, pdfDocument]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3343,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3342,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reading-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u9605\\u8BFB\\u6A21\\u5F0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3347,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"reading-mode-select\",\n          value: readingMode,\n          onChange: handleReadingModeChange,\n          className: \"mode-select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"normal\",\n            children: \"\\u666E\\u901A\\u6A21\\u5F0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3354,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"static\",\n            children: \"\\u9759\\u6001\\u9AD8\\u4EAE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3355,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"follow-mouse\",\n            children: \"\\u9F20\\u6807\\u8DDF\\u968F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3356,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"rhythm\",\n            children: \"\\u8282\\u594F\\u9605\\u8BFB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3357,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"flash-reading\",\n            children: \"\\u95EA\\u8BFB\\u6A21\\u5F0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3358,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 3348,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3346,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".pdf,.txt,.md\",\n          hidden: true,\n          id: \"file-upload\",\n          onChange: handleFileUpload,\n          ref: fileRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3363,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"upload-btn\",\n          onClick: () => fileRef.current.click(),\n          children: \"\\u4E0A\\u4F20\\u6587\\u4EF6 (.pdf/.txt/.md)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3371,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3362,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 3341,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toolbar\",\n        children: fileName && /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"filename\",\n          children: fileName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3382,\n          columnNumber: 24\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3381,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-content\",\n        ref: readerContainerRef,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: content\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3387,\n          columnNumber: 13\n        }, this), totalPages > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bottom-pagination\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => changePage(-1),\n            disabled: currentPage <= 1,\n            className: \"page-btn\",\n            children: \"\\u4E0A\\u4E00\\u9875\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3391,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"page-info\",\n            children: [\"\\u7B2C \", currentPage, \" / \", totalPages, \" \\u9875\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 3398,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => changePage(1),\n            disabled: currentPage >= totalPages,\n            className: \"page-btn\",\n            children: \"\\u4E0B\\u4E00\\u9875\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3401,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 3390,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3386,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 3380,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 3340,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"x5N0itQI0gqtA84jt63lPsdPeRI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","pdfjsLib","pdfjsViewer","marked","pdfjs","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","window","currentPage","totalPages","changePage","eventTracker","mouseFollowHandlers","autoReader","charPositions","intervalId","currentIndex","speed","pageContainer","isScrolling","isPageChanging","cleanup","rhythmReaderGlobal","active","console","log","defaultSpeed","minSpeed","maxSpeed","speedStep","isActive","charElements","readIndices","Set","currentSpeed","pagesRead","findNextPageButton","selectors","selector","buttons","document","querySelectorAll","btn","offsetParent","e","allButtons","text","textContent","trim","toLowerCase","autoTurnPage","nextButton","showMessage","clearInterval","click","observer","MutationObserver","mutations","contentAdded","some","mutation","type","addedNodes","length","disconnect","setTimeout","startReading","observe","body","childList","subtree","forEach","span","parentNode","replaceChild","createTextNode","error","panel","getElementById","remove","message","alert","addControlPanel","existingPanel","createElement","id","style","cssText","controlButton","onclick","background","setInterval","nextChar","appendChild","speedControl","display","alignItems","gap","speedLabel","fontSize","speedSlider","min","max","step","value","flex","addEventListener","newSpeed","parseInt","container","querySelector","textNodes","findText","element","i","childNodes","node","nodeType","nodeValue","push","includes","tagName","fragment","createDocumentFragment","className","dataset","index","updateDisplay","color","fontWeight","has","isInViewport","rect","getBoundingClientRect","top","left","bottom","innerHeight","documentElement","clientHeight","right","innerWidth","clientWidth","add","currentChar","scrollIntoView","behavior","block","handleModeChange","mode","originalFunction","readingModeChanged","addTestButton","button","initialize","manualStartRhythmReading","activateRhythmReadingMode","rhythmReader","start","initializeRhythmReading","startRhythmReading","addButton","existingButton","App","_s","pages","setPages","setCurrentPage","setTotalPages","fileName","setFileName","loading","setLoading","fileRef","file","setFile","pdfInstance","setPdfInstance","extractedTextPages","setExtractedTextPages","readingMode","setReadingMode","posMode","setPosMode","markdownContent","setMarkdownContent","readerContainerRef","content","setContent","pdfDocument","setPdfDocument","isTableOfContents","setIsTableOfContents","applyDarkBackground","classList","head","restoreDarkBackground","addNakedEye3DStyles","addComfortable3DStyles","addFlashReadingStyles","initializeFlashReading","sentences","flashReadingSentences","Array","isArray","speedValue","playButton","pauseButton","stopButton","prevButton","progress","cover","flashReader","interval","isPlaying","disabled","displayCurrentSentence","stop","currentSentence","displayRect","width","height","pause","updateSpeed","localStorage","setItem","prevSentence","nextSentence","target","savedSpeed","getItem","initialSpeed","createFlashReadingContent","formatTextToHtml","paragraphs","split","html","paragraph","formatTextForMouseFollow","words","processedParagraph","word","applyStaticHighlight","lastColor","Math","random","applyNakedEye3dEffect","applyComfortable3dEffect","effectTypes","effectClass","floor","initializeNakedEye3D","textElements","delay","animationDelay","addMouseFollowListeners","contentArea","lastHighlightedLine","mouseMoveHandler","mouseY","clientY","allLines","foundLine","minDistance","Infinity","line","lineCenter","distance","abs","substring","mouseLeaveHandler","event","handler","initializeMouseFollow","handlePdfFile","fileURL","URL","createObjectURL","loadingTask","getDocument","pdf","promise","numPages","extractAndProcessPage","pageNum","page","getPage","getTextContent","viewport","getViewport","scale","detectIfTocPage","processTocPage","processContentPage","textItems","items","fullText","map","item","str","join","hasTocKeywords","test","hasPageNumberPatterns","shortLinesCount","linesWithNumbersCount","lineMap","Map","yKey","round","transform","set","get","lines","values","lineText","shortLineRatio","numberLineRatio","htmlContent","x","y","sqrt","fontName","spacedText","getTextNodeAtPosition","nodes","Node","TEXT_NODE","range","createRange","selectNodeContents","rects","getClientRects","j","ELEMENT_NODE","found","processTextWithHighlight","result","extractedText","replace","splitIntoSentences","processedContent","formatSentencesToHtml","formatSimpleHighlightedText","formatSentencesForMouseFollow","applyComfortable3dEffectToSentences","createFlashReadingContentFromSentences","firstPara","styles","getComputedStyle","backgroundColor","fontFamily","sentenceRegex","lastIndex","match","exec","endIndex","sentence","lastSentence","splitIntoFlashReadingSegments","segments","segment","lastSegment","applyStaticHighlightToSentences","processedSentence","handleTxtFile","name","handleMarkdownFile","parse","p","parseError","tempDiv","innerHTML","plainText","innerText","handleFileUpload","uploadedFile","files","endsWith","getAllCharacterPositions","walker","createTreeWalker","NodeFilter","SHOW_TEXT","positions","nextNode","currentNode","setStart","setEnd","char","warn","filter","sort","a","b","yDiff","scrollElementToCenter","elementY","isContainerScrollable","scrollHeight","overflowY","targetScrollTop","containerVisibleHeight","scrollTo","absoluteElementY","createReaderCursor","cursor","isSentenceEnd","charPosition","sentenceEndMarks","nextIndex","findSentenceStart","prev","current","isInVisibleArea","threshold","visibleTop","scrollTop","visibleBottom","topThreshold","bottomThreshold","scrollY","startAutoReader","contentContainer","position","highlight","borderRadius","pointerEvents","zIndex","lineHeight","lastScrolledY","scrollSafeZone","charWidth","charHeight","xDiff","_window$autoReader$ch","stopAutoReader","pos","contentRect","relativeX","relativeY","isInRecentlyScrolledArea","needsScroll","scrollAmount","scrollBy","absoluteY","initializeAutoReader","handleReadingModeChange","newMode","prevMode","getContentHandlerForMode","cleanupDOM","removeMouseFollowListeners","comfortable3DElements","el","flashReadingElements","highlights","removeChild","_contentArea$querySel","bottomPagination","contentHTML","newContentArea","cloneNode","newContentContainer","newBottomPagination","prevBtn","nextBtn","removeAttribute","elementsToRemove","handleAutoScroll","updateCursorPosition","force","handleMouseMove","clientX","clearAllHighlights","paragraphRect","paragraphX","paragraphY","wordRect","wordX","removeEventListener","addAutoReaderStyles","bottomPaginationStyles","mouseFollowStyle","mouseFollowPageStyle","existingStyle","existingMouseFollowStyle","existingBasicMouseFollowStyle","border","setAttribute","firstLine","padding","margin","adjustSpeed","delta","newPage","wasRhythmReading","wasFlashReading","isToc","sentenceIndex","cleanText","formattedSentence","wordIndex","styleClass","oldStyle","followModeStyle","s","children","_jsxFileName","lineNumber","columnNumber","onChange","accept","hidden","ref","onClick","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["D:/adhd-read-helper/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 添加全局事件跟踪对象\nwindow.eventTracker = window.eventTracker || {\n  mouseFollowHandlers: []\n};\n\n// 自动阅读器全局对象\nwindow.autoReader = {\n  charPositions: [],\n  intervalId: null,\n  currentIndex: 0,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false,\n  cleanup: null\n};\n\n// 添加新的节奏阅读模式代码\n// 全局变量，确保在页面切换后仍然保持状态\nwindow.rhythmReaderGlobal = window.rhythmReaderGlobal || {\n  active: false,\n  speed: 300\n};\n\n// 节奏阅读模式 - 增强控制版\n(function() {\n  console.log(\"节奏阅读模式 - 增强控制版初始化\");\n  \n  // 配置参数\n  const defaultSpeed = 300;  // 默认速度 (ms/字符)\n  const minSpeed = 50;       // 最小速度\n  const maxSpeed = 1500;     // 最大速度\n  const speedStep = 50;      // 速度调整步长\n  \n  // 状态变量\n  let isActive = false;\n  let intervalId = null;\n  let charElements = [];\n  let currentIndex = 0;\n  let readIndices = new Set();\n  let currentSpeed = defaultSpeed;\n  let pagesRead = 0;\n  \n  // 查找下一页按钮\n  const findNextPageButton = function() {\n    const selectors = [\n      '.next-page',\n      '.next',\n      '#next',\n      '[aria-label=\"下一页\"]',\n      '[aria-label=\"Next\"]',\n      'button:contains(\"下一页\")', \n      'button:contains(\"Next\")'\n    ];\n    \n    for (const selector of selectors) {\n      try {\n        const buttons = document.querySelectorAll(selector);\n        for (const btn of buttons) {\n          if (btn.offsetParent !== null) {\n            return btn;\n          }\n        }\n      } catch(e) {}\n    }\n    \n    const allButtons = document.querySelectorAll('button, a, div[role=\"button\"]');\n    for (const btn of allButtons) {\n      const text = (btn.textContent || '').trim().toLowerCase();\n      if (text === '下一页' || text === 'next' || text === '>' || text === '→') {\n        if (btn.offsetParent !== null) {\n          return btn;\n        }\n      }\n    }\n    \n    return null;\n  };\n  \n  // 自动翻页\n  const autoTurnPage = function() {\n    console.log(\"尝试自动翻页...\");\n    \n    const nextButton = findNextPageButton();\n    \n    if (!nextButton) {\n      console.log(\"未找到下一页按钮\");\n      showMessage(\"已读完当前页，但未找到下一页按钮\");\n      return;\n    }\n    \n    if (intervalId) {\n      clearInterval(intervalId);\n      intervalId = null;\n    }\n    \n    pagesRead++;\n    console.log(`已读完第 ${pagesRead} 页，点击下一页按钮`);\n    \n    nextButton.click();\n    \n    const observer = new MutationObserver((mutations) => {\n      const contentAdded = mutations.some(mutation => \n        mutation.type === 'childList' && mutation.addedNodes.length > 0\n      );\n      \n      if (contentAdded) {\n        console.log(\"检测到新内容已加载\");\n        observer.disconnect();\n        \n        setTimeout(() => {\n          console.log(\"在新页面上重新启动节奏阅读模式\");\n          startReading();\n        }, 800);\n      }\n    });\n    \n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  };\n  \n  // 清理\n  const cleanup = function() {\n    console.log(\"执行清理...\");\n    \n    if (intervalId) {\n      clearInterval(intervalId);\n      intervalId = null;\n    }\n    \n    try {\n      document.querySelectorAll('.rhythm-char').forEach(span => {\n        if (span.parentNode) {\n          span.parentNode.replaceChild(document.createTextNode(span.textContent), span);\n        }\n      });\n    } catch(e) {\n      console.error(\"清理文本失败:\", e);\n    }\n    \n    charElements = [];\n    currentIndex = 0;\n    readIndices = new Set();\n    isActive = false;\n    pagesRead = 0;\n    \n    const panel = document.getElementById('rhythm-control-panel');\n    if (panel) panel.remove();\n  };\n  \n  // 简单通知\n  const showMessage = function(message) {\n    console.log(message);\n    alert(message);\n  };\n  \n  // 添加控制面板\n  const addControlPanel = function() {\n    const existingPanel = document.getElementById('rhythm-control-panel');\n    if (existingPanel) existingPanel.remove();\n    \n    const panel = document.createElement('div');\n    panel.id = 'rhythm-control-panel';\n    panel.style.cssText = `\n      position: fixed;\n      bottom: 20px;\n      right: 20px;\n      z-index: 999999;\n      background: rgba(0, 0, 0, 0.8);\n      color: white;\n      padding: 15px;\n      border-radius: 8px;\n      display: flex;\n      flex-direction: column;\n      gap: 10px;\n      min-width: 240px;\n    `;\n    \n    // 控制按钮\n    const controlButton = document.createElement('button');\n    controlButton.id = 'rhythm-control-button';\n    controlButton.textContent = '暂停节奏阅读';\n    controlButton.style.cssText = `\n      background: #4CAF50;\n      color: white;\n      border: none;\n      border-radius: 4px;\n      padding: 8px;\n      font-size: 14px;\n      cursor: pointer;\n      margin-bottom: 10px;\n    `;\n    \n    controlButton.onclick = function() {\n      if (intervalId) {\n        // 暂停\n        if (intervalId) {\n          clearInterval(intervalId);\n          intervalId = null;\n        }\n        controlButton.textContent = '继续节奏阅读';\n        controlButton.style.background = '#2196F3';\n      } else {\n        // 继续\n        intervalId = setInterval(nextChar, currentSpeed);\n        controlButton.textContent = '暂停节奏阅读';\n        controlButton.style.background = '#4CAF50';\n      }\n    };\n    panel.appendChild(controlButton);\n    \n    // 速度控制\n    const speedControl = document.createElement('div');\n    speedControl.style.display = 'flex';\n    speedControl.style.alignItems = 'center';\n    speedControl.style.gap = '8px';\n    \n    const speedLabel = document.createElement('span');\n    speedLabel.textContent = `速度: ${currentSpeed}ms`;\n    speedLabel.style.fontSize = '13px';\n    speedControl.appendChild(speedLabel);\n    \n    const speedSlider = document.createElement('input');\n    speedSlider.type = 'range';\n    speedSlider.min = minSpeed;\n    speedSlider.max = maxSpeed;\n    speedSlider.step = speedStep;\n    speedSlider.value = currentSpeed;\n    speedSlider.style.flex = '1';\n    \n    speedSlider.addEventListener('input', function() {\n      const newSpeed = parseInt(this.value);\n      currentSpeed = newSpeed;\n      speedLabel.textContent = `速度: ${newSpeed}ms`;\n      \n      // 如果正在运行，立即更新间隔时间\n      if (intervalId) {\n        clearInterval(intervalId);\n        intervalId = setInterval(nextChar, currentSpeed);\n      }\n    });\n    speedControl.appendChild(speedSlider);\n    panel.appendChild(speedControl);\n    panel.appendChild(speedControl);\n    document.body.appendChild(panel);\n    return panel;\n  };\n  \n  // 启动阅读\n  const startReading = function() {\n    console.log(\"启动节奏阅读...\");\n    \n    // 清理之前的实例\n    cleanup();\n    \n    const container = document.querySelector('.pdf-content') || \n                      document.querySelector('[class*=\"pdf\"]') || \n                      document.querySelector('article') || \n                      document.querySelector('main') || \n                      document.body;\n    \n    const textNodes = [];\n    const findText = function(element) {\n      for (let i = 0; i < element.childNodes.length; i++) {\n        const node = element.childNodes[i];\n        if (node.nodeType === 3 && node.nodeValue.trim() !== '') {\n          textNodes.push(node);\n        } else if (node.nodeType === 1 && \n                  !['SCRIPT', 'STYLE', 'BUTTON', 'INPUT', 'SELECT', 'NOSCRIPT'].includes(node.tagName)) {\n          findText(node);\n        }\n      }\n    };\n    findText(container);\n    \n    if (textNodes.length === 0) {\n      showMessage(\"错误: 未找到文本内容\");\n      return;\n    }\n    \n    try {\n      textNodes.forEach(node => {\n        if (!node.nodeValue || !node.parentNode) return;\n        \n        const text = node.nodeValue;\n        const fragment = document.createDocumentFragment();\n        \n        for (let i = 0; i < text.length; i++) {\n          const span = document.createElement('span');\n          span.textContent = text[i];\n          span.className = 'rhythm-char';\n          span.dataset.index = charElements.length;\n          \n          fragment.appendChild(span);\n          charElements.push(span);\n        }\n        \n        node.parentNode.replaceChild(fragment, node);\n      });\n    } catch(e) {\n      console.error(\"处理文本失败:\", e);\n      showMessage(\"生成节奏阅读效果失败\");\n      return;\n    }\n    \n    if (charElements.length === 0) {\n      showMessage(\"未找到可读内容\");\n      return;\n    }\n    \n    isActive = true;\n    currentIndex = 0;\n    \n    updateDisplay();\n    intervalId = setInterval(nextChar, currentSpeed);\n    \n    addControlPanel();\n  };\n  \n  // 更新显示\n  const updateDisplay = function() {\n    charElements.forEach((span, index) => {\n      if (index === currentIndex) {\n        span.style.color = 'green';\n        span.style.fontWeight = 'bold';\n      } else if (readIndices.has(index)) {\n        span.style.color = 'white';\n      } else {\n        span.style.color = 'rgba(200,200,200,0.3)';\n      }\n    });\n  };\n  \n  // 检查是否在视口中\n  const isInViewport = function(element) {\n    const rect = element.getBoundingClientRect();\n    return (\n      rect.top >= 0 &&\n      rect.left >= 0 &&\n      rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n      rect.right <= (window.innerWidth || document.documentElement.clientWidth)\n    );\n  };\n  \n  // 下一个字符\n  const nextChar = function() {\n    if (!isActive || !charElements.length) return;\n    \n    readIndices.add(currentIndex);\n    \n    currentIndex++;\n    if (currentIndex >= charElements.length) {\n      if (intervalId) {\n        clearInterval(intervalId);\n        intervalId = null;\n      }\n      console.log(\"当前页已读完，尝试翻页\");\n      autoTurnPage();\n      return;\n    }\n    \n    updateDisplay();\n    \n    // 确保当前字符可见\n    const currentChar = charElements[currentIndex];\n    if (currentChar && !isInViewport(currentChar)) {\n      currentChar.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center'\n      });\n    }\n  };\n  \n  // 处理模式切换\n  const handleModeChange = function(mode) {\n    console.log(\"模式更改为:\", mode);\n    \n    if (mode !== 'rhythm' && mode !== '节奏阅读' && isActive) {\n      cleanup();\n    }\n  };\n  \n  // 重写模式切换函数\n  const originalFunction = window.readingModeChanged;\n  window.readingModeChanged = function(mode) {\n    if (typeof originalFunction === 'function') {\n      try {\n        originalFunction(mode);\n      } catch(e) {}\n    }\n    handleModeChange(mode);\n  };\n  \n  // 添加测试按钮\n  const addTestButton = function() {\n    const button = document.createElement('button');\n    button.id = 'rhythm-test-button';\n    button.textContent = '测试节奏阅读';\n    button.style.cssText = `\n      position: fixed;\n      top: 10px;\n      right: 10px;\n      z-index: 999999;\n      background: #ff9800;\n      color: white;\n      padding: 8px 12px;\n      border: none;\n      border-radius: 4px;\n      font-size: 14px;\n      cursor: pointer;\n    `;\n    \n    button.onclick = startReading;  // 直接启动阅读\n    document.body.appendChild(button);\n  };\n  \n  // 初始化\n  const initialize = function() {\n    console.log(\"初始化节奏阅读组件...\");\n    \n    addTestButton();\n  };\n  \n  // 等待DOM加载完成\n  document.addEventListener('DOMContentLoaded', initialize);\n  \n  // 暴露全局API\n  window.manualStartRhythmReading = startReading;\n  \n  console.log(\"节奏阅读模式初始化完成 - 增强控制版\");\n})();\n\n// 定义一个全局函数用于从应用代码中启动节奏阅读\nwindow.activateRhythmReadingMode = function() {\n  console.log(\"尝试从应用代码中启动节奏阅读模式\");\n  if (window.rhythmReader) {\n    if (window.rhythmReader.active) {\n      console.log(\"节奏阅读模式已经在运行\");\n    } else {\n      window.rhythmReader.start();\n    }\n  } else {\n    console.error(\"节奏阅读模式未初始化\");\n    alert(\"无法启动节奏阅读模式：组件未初始化\");\n  }\n};\n\n// 更新初始化函数\nconst initializeRhythmReading = () => {\n  // 不再自动初始化，而是等待用户选择\n  console.log(\"节奏阅读模式准备就绪，等待用户选择\");\n};\n\n// 更新启动函数\nconst startRhythmReading = () => {\n  if (window.rhythmReader && typeof window.rhythmReader.start === 'function') {\n    window.rhythmReader.start();\n  }\n};\n\n// 节奏阅读模式 - 自动翻页版\n(function() {\n  console.log(\"节奏阅读模式 - 自动翻页版初始化\");\n  \n  // 状态变量\n  let isActive = false;\n  let intervalId = null;\n  let charElements = [];\n  let currentIndex = 0;\n  let readIndices = new Set();\n  \n  // 进度监控 - 记录已读页数\n  let pagesRead = 0;\n  \n  // 查找下一页按钮的帮助函数\n  const findNextPageButton = function() {\n    // 常见的选择器\n    const selectors = [\n      '.next-page',\n      '.next',\n      '#next',\n      '[aria-label=\"下一页\"]',\n      '[aria-label=\"Next\"]',\n      'button:contains(\"下一页\")', \n      'button:contains(\"Next\")'\n    ];\n    \n    for (const selector of selectors) {\n      try {\n        const buttons = document.querySelectorAll(selector);\n        for (const btn of buttons) {\n          if (btn.offsetParent !== null) { // 确保按钮可见\n            return btn;\n          }\n        }\n      } catch(e) {}\n    }\n    \n    // 如果通过选择器找不到，尝试通过文本内容查找\n    const allButtons = document.querySelectorAll('button, a, div[role=\"button\"]');\n    for (const btn of allButtons) {\n      const text = (btn.textContent || '').trim().toLowerCase();\n      if (text === '下一页' || text === 'next' || text === '>' || text === '→') {\n        if (btn.offsetParent !== null) {\n          return btn;\n        }\n      }\n    }\n    \n    return null;\n  };\n  \n  // 自动翻页函数\n  const autoTurnPage = function() {\n    console.log(\"尝试自动翻页...\");\n    \n    // 找到下一页按钮\n    const nextButton = findNextPageButton();\n    \n    if (!nextButton) {\n      console.log(\"未找到下一页按钮\");\n      showMessage(\"已读完当前页，但未找到下一页按钮\");\n      return;\n    }\n    \n    // 暂停当前阅读\n    if (intervalId) {\n      clearInterval(intervalId);\n      intervalId = null;\n    }\n    \n    // 增加已读页数\n    pagesRead++;\n    console.log(`已读完第 ${pagesRead} 页，点击下一页按钮`);\n    \n    // 模拟点击下一页按钮\n    nextButton.click();\n    \n    // 监听DOM变化，等待新页面加载\n    const observer = new MutationObserver((mutations) => {\n      // 检查新内容是否已加载\n      const contentAdded = mutations.some(mutation => \n        mutation.type === 'childList' && mutation.addedNodes.length > 0\n      );\n      \n      if (contentAdded) {\n        console.log(\"检测到新内容已加载\");\n        // 停止观察\n        observer.disconnect();\n        \n        // 延迟一下，确保新页面完全加载\n        setTimeout(() => {\n          // 重新启动节奏阅读模式\n          console.log(\"在新页面上重新启动节奏阅读模式\");\n          startReading();\n        }, 800);\n      }\n    });\n    \n    // 开始观察文档变化\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  };\n  \n  // 清理函数\n  const cleanup = function() {\n    console.log(\"执行清理...\");\n    \n    if (intervalId) {\n      clearInterval(intervalId);\n      intervalId = null;\n    }\n    \n    try {\n      document.querySelectorAll('.rhythm-char').forEach(span => {\n        if (span.parentNode) {\n          span.parentNode.replaceChild(document.createTextNode(span.textContent), span);\n        }\n      });\n    } catch(e) {\n      console.error(\"清理文本失败:\", e);\n    }\n    \n    charElements = [];\n    currentIndex = 0;\n    readIndices = new Set();\n    isActive = false;\n    pagesRead = 0;\n    \n    const button = document.getElementById('rhythm-control-button');\n    if (button) button.remove();\n  };\n  \n  // 简单通知\n  const showMessage = function(message) {\n    console.log(message);\n    alert(message);\n  };\n  \n  // 添加控制按钮\n  const addButton = function() {\n    const existingButton = document.getElementById('rhythm-control-button');\n    if (existingButton) existingButton.remove();\n    \n    const button = document.createElement('button');\n    button.id = 'rhythm-control-button';\n    button.textContent = '暂停节奏阅读';\n    button.style.cssText = `\n      position: fixed;\n      bottom: 20px;\n      right: 20px;\n      z-index: 999999;\n      background: #4CAF50;\n      color: white;\n      padding: 10px 15px;\n      border: none;\n      border-radius: 5px;\n      font-size: 16px;\n      font-weight: bold;\n      cursor: pointer;\n    `;\n    \n    button.onclick = function() {\n      if (intervalId) {\n        // 暂停\n        if (intervalId) {\n          clearInterval(intervalId);\n          intervalId = null;\n        }\n        button.textContent = '继续节奏阅读';\n        button.style.background = '#2196F3';\n      } else {\n        // 继续\n        intervalId = setInterval(nextChar, 300);\n        button.textContent = '暂停节奏阅读';\n        button.style.background = '#4CAF50';\n      }\n    };\n    \n    document.body.appendChild(button);\n    return button;\n  };\n  \n  // 启动阅读\n  const startReading = function() {\n    console.log(\"启动节奏阅读...\");\n    \n    // 清理之前的实例\n    cleanup();\n    \n    // 查找内容容器\n    const container = document.querySelector('.pdf-content') || \n                      document.querySelector('[class*=\"pdf\"]') || \n                      document.querySelector('article') || \n                      document.querySelector('main') || \n                      document.body;\n    \n    // 查找所有文本节点\n    const textNodes = [];\n    const findText = function(element) {\n      for (let i = 0; i < element.childNodes.length; i++) {\n        const node = element.childNodes[i];\n        if (node.nodeType === 3 && node.nodeValue.trim() !== '') {\n          textNodes.push(node);\n        } else if (node.nodeType === 1 && \n                  !['SCRIPT', 'STYLE', 'BUTTON', 'INPUT', 'SELECT', 'NOSCRIPT'].includes(node.tagName)) {\n          findText(node);\n        }\n      }\n    };\n    findText(container);\n    \n    if (textNodes.length === 0) {\n      showMessage(\"错误: 未找到文本内容\");\n      return;\n    }\n    \n    // 处理文本节点\n    try {\n      textNodes.forEach(node => {\n        if (!node.nodeValue || !node.parentNode) return;\n        \n        const text = node.nodeValue;\n        const fragment = document.createDocumentFragment();\n        \n        for (let i = 0; i < text.length; i++) {\n          const span = document.createElement('span');\n          span.textContent = text[i];\n          span.className = 'rhythm-char';\n          span.dataset.index = charElements.length;\n          \n          fragment.appendChild(span);\n          charElements.push(span);\n        }\n        \n        node.parentNode.replaceChild(fragment, node);\n      });\n    } catch(e) {\n      console.error(\"处理文本失败:\", e);\n      showMessage(\"生成节奏阅读效果失败\");\n      return;\n    }\n    \n    if (charElements.length === 0) {\n      showMessage(\"未找到可读内容\");\n      return;\n    }\n    \n    // 激活状态\n    isActive = true;\n    currentIndex = 0;\n    \n    // 更新显示\n    updateDisplay();\n    \n    // 开始阅读\n    intervalId = setInterval(nextChar, 300);\n    \n    addButton();\n  };\n  \n  // 更新显示\n  const updateDisplay = function() {\n    charElements.forEach((span, index) => {\n      if (index === currentIndex) {\n        span.style.color = 'green';\n        span.style.fontWeight = 'bold';\n      } else if (readIndices.has(index)) {\n        span.style.color = 'white';\n      } else {\n        span.style.color = 'rgba(200,200,200,0.3)';\n      }\n    });\n  };\n  \n  // 下一个字符\n  const nextChar = function() {\n    if (!isActive || !charElements.length) return;\n    \n    readIndices.add(currentIndex);\n    \n    currentIndex++;\n    if (currentIndex >= charElements.length) {\n      // 当前页已读完\n      if (intervalId) {\n        clearInterval(intervalId);\n        intervalId = null;\n      }\n      console.log(\"当前页已读完，尝试翻页\");\n      autoTurnPage(); // 尝试自动翻页\n      return;\n    }\n    \n    updateDisplay();\n  };\n  \n  // 处理模式切换\n  const handleModeChange = function(mode) {\n    console.log(\"模式更改为:\", mode);\n    \n    if (mode !== 'rhythm' && mode !== 'rhythmReading' && isActive) {\n      cleanup();\n    }\n  };\n  \n  // 重写模式切换函数\n  const originalFunction = window.readingModeChanged;\n  window.readingModeChanged = function(mode) {\n    if (typeof originalFunction === 'function') {\n      try {\n        originalFunction(mode);\n      } catch(e) {}\n    }\n    \n    handleModeChange(mode);\n  };\n  \n  // 添加测试按钮\n  const addTestButton = function() {\n    const button = document.createElement('button');\n    button.id = 'rhythm-test-button';\n    button.textContent = '测试节奏阅读';\n    button.style.cssText = `\n      position: fixed;\n      top: 10px;\n      right: 10px;\n      z-index: 999999;\n      background: #ff9800;\n      color: white;\n      padding: 8px;\n      border: none;\n      border-radius: 4px;\n      font-size: 14px;\n      cursor: pointer;\n    `;\n    \n    button.onclick = startReading;  // 直接启动阅读\n    document.body.appendChild(button);\n  };\n  \n  // 初始化\n  const initialize = function() {\n    console.log(\"初始化节奏阅读组件...\");\n    \n    addTestButton();\n  };\n  \n  // 等待DOM加载完成\n  document.addEventListener('DOMContentLoaded', initialize);\n  \n  // 暴露全局API\n  window.manualStartRhythmReading = startReading;\n  \n  console.log(\"节奏阅读模式初始化完成 - 自动翻页版\");\n})();\n\nconst App = () => {\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  const [isTableOfContents, setIsTableOfContents] = useState(false);\n  \n  // 实现缺失的函数\n  // 应用深色背景\n  const applyDarkBackground = () => {\n    document.body.classList.add('dark-background');\n    \n    // 添加必要的CSS样式\n    if (!document.getElementById('dark-background-style')) {\n      const style = document.createElement('style');\n      style.id = 'dark-background-style';\n      style.textContent = `\n        .dark-background {\n          background-color: #000 !important;\n        }\n        .dark-background .sidebar {\n          background: linear-gradient(145deg, #4834d4, #341f9e) !important;\n        }\n        .dark-background .page-content {\n          background-color: #000 !important;\n        }\n        .dark-background .main-content {\n          background-color: #000 !important;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 恢复正常背景\n  const restoreDarkBackground = () => {\n    document.body.classList.remove('dark-background');\n  };\n  \n  // 添加裸眼3D样式\n  const addNakedEye3DStyles = () => {\n    if (!document.getElementById('naked-eye-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'naked-eye-3d-style';\n      style.textContent = `\n        .naked-eye-3d-container {\n          position: relative;\n          perspective: 800px;\n          width: 100%;\n        }\n        \n        .naked-eye-3d-text {\n          display: inline-block;\n          animation: float 3s ease-in-out infinite;\n          text-shadow: 0 0 5px rgba(255,255,255,0.3);\n          padding: 0 4px;\n          color: white;\n          filter: drop-shadow(0 0 5px rgba(120, 220, 255, 0.6));\n        }\n        \n        @keyframes float {\n          0% { transform: translateZ(0px); }\n          50% { transform: translateZ(20px); }\n          100% { transform: translateZ(0px); }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 添加舒适3D样式\n  const addComfortable3DStyles = () => {\n    if (!document.getElementById('comfortable-3d-style')) {\n      const style = document.createElement('style');\n      style.id = 'comfortable-3d-style';\n      style.textContent = `\n        .emboss-3d-text {\n          color: #fff;\n          text-shadow: \n            1px 1px 1px rgba(0,0,0,0.5),\n            -1px -1px 1px rgba(255,255,255,0.5);\n          letter-spacing: 1.5px;\n          font-weight: 500;\n        }\n        \n        .float-3d-text {\n          display: inline-block;\n          transform-style: preserve-3d;\n          transform: perspective(500px) translateZ(10px);\n          text-shadow: 0 2px 5px rgba(0,0,0,0.5);\n        }\n        \n        .gradient-3d-text {\n          display: inline-block;\n          background: linear-gradient(to bottom, #fff, #aaa);\n          -webkit-background-clip: text;\n          -webkit-text-fill-color: transparent;\n          text-shadow: 0 2px 4px rgba(0,0,0,0.3);\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 添加闪读样式\n  const addFlashReadingStyles = () => {\n    if (!document.getElementById('flash-reading-style')) {\n      const style = document.createElement('style');\n      style.id = 'flash-reading-style';\n      style.textContent = `\n        .flash-reading-container {\n          position: relative;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          z-index: 1000;\n          padding: 20px;\n        }\n        \n        .flash-reading-display-wrapper {\n          position: relative;\n          margin: 40px 0;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        \n        .flash-reading-display {\n          font-size: 36px;\n          font-weight: bold;\n          text-align: center;\n          color: white;\n          min-height: 80px;\n          max-width: 90%;\n          padding: 20px 40px;\n          position: relative; /* 允许绝对定位的覆盖层 */\n          z-index: 2;\n        }\n        \n        .flash-reading-cover {\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(128, 128, 128, 0.6); /* 灰色遮罩 */\n          border-radius: 8px;\n          z-index: 1; /* 确保在文本后面 */\n        }\n        \n        .flash-reading-controls {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          gap: 20px;\n          margin-bottom: 20px;\n          width: 100%;\n        }\n        \n        .flash-reading-buttons {\n          display: flex;\n          gap: 10px;\n          flex-wrap: wrap;\n          justify-content: center;\n        }\n        \n        .flash-reading-speed {\n          display: flex;\n          align-items: center;\n          color: white;\n          width: 80%;\n          max-width: 400px;\n          gap: 10px;\n        }\n        \n        .flash-reading-slider {\n          flex: 1;\n          height: 8px;\n          appearance: none;\n          background: #555;\n          border-radius: 4px;\n          outline: none;\n        }\n        \n        .flash-reading-slider::-webkit-slider-thumb {\n          appearance: none;\n          width: 20px;\n          height: 20px;\n          border-radius: 50%;\n          background: #6c5ce7;\n          cursor: pointer;\n        }\n        \n        .flash-reading-btn {\n          padding: 10px 20px;\n          border: none;\n          border-radius: 4px;\n          background-color: #6c5ce7;\n          color: white;\n          font-size: 16px;\n          cursor: pointer;\n          transition: background-color 0.2s;\n        }\n        \n        .flash-reading-btn:hover {\n          background-color: #5344c0;\n        }\n        \n        .flash-reading-btn:disabled {\n          background-color: #aaa;\n          cursor: not-allowed;\n        }\n        \n        .flash-reading-progress {\n          color: white;\n          font-size: 14px;\n          margin-top: 10px;\n        }\n        .flash-reading-speed-note {\n          font-size: 12px;\n          color: #ccc;\n          margin-left: 5px;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n  };\n  \n  // 初始化闪读模式\n  const initializeFlashReading = () => {\n    // 添加样式\n    addFlashReadingStyles();\n    \n    const sentences = window.flashReadingSentences;\n    if (!sentences || !Array.isArray(sentences) || sentences.length === 0) {\n      console.error('闪读模式: 未找到句子数据');\n        return;\n      }\n    \n    // 获取全局UI元素\n    const display = document.getElementById('flash-reading-display');\n    const speedSlider = document.getElementById('flash-reading-speed');\n    const speedValue = document.getElementById('flash-reading-speed-value');\n    const playButton = document.getElementById('flash-reading-play');\n    const pauseButton = document.getElementById('flash-reading-pause');\n    const stopButton = document.getElementById('flash-reading-stop');\n    const prevButton = document.getElementById('flash-reading-prev-sentence');\n    const nextButton = document.getElementById('flash-reading-next-sentence');\n    const progress = document.getElementById('flash-reading-progress');\n    const cover = document.querySelector('.flash-reading-cover');\n    \n    if (!display || !speedSlider || !speedValue || !playButton || !pauseButton || !stopButton || !prevButton || !nextButton || !progress || !cover) {\n      console.error('闪读模式: 未找到UI元素');\n        return;\n      }\n\n    // 创建闪读控制器\n    window.flashReader = {\n      sentences: sentences,\n      currentIndex: 0,\n      interval: null,\n      speed: parseInt(speedSlider.value),\n      isPlaying: false,\n      \n      // 开始闪读\n      start() {\n        if (this.interval) {\n          clearInterval(this.interval);\n        }\n        \n        this.isPlaying = true;\n        playButton.disabled = true;\n        pauseButton.disabled = false;\n        progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        \n        // 显示当前句子\n        this.displayCurrentSentence();\n        \n        // 设置闪读间隔\n        this.interval = setInterval(() => {\n          this.currentIndex++;\n          \n          if (this.currentIndex >= this.sentences.length) {\n            this.stop();\n            display.textContent = '阅读完成';\n            return;\n          }\n          \n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }, this.speed);\n      },\n      \n      // 显示当前句子\n      displayCurrentSentence() {\n        if (this.currentIndex < this.sentences.length) {\n          const currentSentence = this.sentences[this.currentIndex];\n          display.textContent = currentSentence;\n          display.style.color = 'white'; // 确保文本为白色\n          \n          // 调整背景以适应内容\n          setTimeout(() => {\n            const displayRect = display.getBoundingClientRect();\n            // 确保覆盖层完全包裹文本\n            cover.style.width = `${displayRect.width}px`;\n            cover.style.height = `${displayRect.height}px`;\n          }, 10);\n        }\n      },\n      \n      // 暂停闪读\n      pause() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        \n        this.isPlaying = false;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n      },\n      \n      // 停止闪读\n      stop() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        \n        this.isPlaying = false;\n        this.currentIndex = 0;\n        playButton.disabled = false;\n        pauseButton.disabled = true;\n        \n        display.textContent = '准备开始';\n        progress.textContent = `进度：0 / ${this.sentences.length}`; // 重置进度\n      },\n      \n      // 更新速度\n      updateSpeed(newSpeed) {\n        this.speed = newSpeed;\n        speedValue.textContent = `${newSpeed} ms`;\n        \n        // 保存速度设置到本地存储\n        localStorage.setItem('flash-reading-speed', newSpeed);\n        \n        // 如果正在播放，重新开始以应用新速度\n        if (this.isPlaying) {\n          clearInterval(this.interval);\n          this.start(); // 直接调用start方法重新开始\n        }\n      },\n\n      // 返回上一句\n      prevSentence() {\n        if (this.currentIndex > 0) {\n          this.currentIndex--;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n\n      // 跳到下一句\n      nextSentence() {\n        if (this.currentIndex < this.sentences.length - 1) {\n          this.currentIndex++;\n          this.displayCurrentSentence();\n          progress.textContent = `进度：${this.currentIndex + 1} / ${this.sentences.length}`;\n        }\n      },\n\n      // 清理资源\n      cleanup() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n        this.isPlaying = false;\n        this.currentIndex = 0;\n      }\n    };\n    \n    // 添加事件监听器\n    playButton.addEventListener('click', () => {\n      window.flashReader.start();\n    });\n    \n    pauseButton.addEventListener('click', () => {\n      window.flashReader.pause();\n    });\n    \n    stopButton.addEventListener('click', () => {\n      window.flashReader.stop();\n    });\n    \n    speedSlider.addEventListener('input', (e) => {\n      const newSpeed = parseInt(e.target.value);\n      window.flashReader.updateSpeed(newSpeed);\n    });\n\n    prevButton.addEventListener('click', () => {\n      window.flashReader.prevSentence();\n    });\n\n    nextButton.addEventListener('click', () => {\n      window.flashReader.nextSentence();\n    });\n    \n    // 初始化\n    const savedSpeed = localStorage.getItem('flash-reading-speed');\n    const initialSpeed = savedSpeed ? parseInt(savedSpeed) : 1000;\n    speedSlider.value = initialSpeed;\n    window.flashReader.updateSpeed(initialSpeed);\n    \n    console.log('闪读模式已初始化，共 ' + sentences.length + ' 个句子');\n  };\n  \n  // 创建闪读内容\n  const createFlashReadingContent = (text) => {\n    return `<div class=\"flash-reading-content\">\n      <p>${text}</p>\n    </div>`;\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 格式化文本用于鼠标跟随\n  const formatTextForMouseFollow = (text) => {\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个单词添加span，以便于添加高亮效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"follow-word\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\" data-follow=\"true\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用静态高亮\n  const applyStaticHighlight = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为单词随机添加颜色高亮\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      let lastColor = null;\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n          return;\n        }\n        \n        // 随机决定是否高亮和使用哪种颜色\n        if (Math.random() < 0.7) {\n          let color;\n          if (lastColor === 'red') {\n            color = 'blue';\n          } else if (lastColor === 'blue') {\n            color = 'red';\n          } else {\n            color = Math.random() < 0.5 ? 'red' : 'blue';\n          }\n          lastColor = color;\n          \n          processedParagraph += `<span class=\"highlight-word ${color}\">${word}</span>`;\n        } else {\n          processedParagraph += word;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用裸眼3D效果\n  const applyNakedEye3dEffect = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content naked-eye-3d-container\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个词添加3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n        } else {\n          processedParagraph += `<span class=\"naked-eye-3d-text\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 应用舒适3D效果\n  const applyComfortable3dEffect = (text) => {\n    // 分段处理\n    const paragraphs = text.split(/(?<=\\.)\\s+/);\n    let html = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      if (paragraph.trim() === '') return;\n      \n      // 为每个词随机应用不同的3D效果\n      const words = paragraph.split(/(\\s+)/);\n      let processedParagraph = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedParagraph += word;\n  } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          \n          processedParagraph += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedParagraph}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n  \n  // 初始化裸眼3D\n  const initializeNakedEye3D = () => {\n    // 为裸眼3D文本添加动画\n    const textElements = document.querySelectorAll('.naked-eye-3d-text');\n    textElements.forEach((element, index) => {\n      // 添加随机延迟，使动画错开\n      const delay = Math.random() * 2;\n      element.style.animationDelay = `${delay}s`;\n    });\n  };\n\n  // 添加鼠标跟随监听器\n  const addMouseFollowListeners = () => {\n    // 获取内容容器\n    const contentArea = document.querySelector('.mouse-follow-content');\n    if (!contentArea) {\n      console.error('未找到鼠标跟随内容区域');\n      return;\n    }\n    \n    // 上一个高亮的行\n    let lastHighlightedLine = null;\n    \n    // 监听鼠标移动 - 精确的行检测\n    const mouseMoveHandler = (e) => {\n      // 获取鼠标位置\n      const mouseY = e.clientY;\n      \n      // 获取所有行\n      const allLines = contentArea.querySelectorAll('.follow-line');\n      let foundLine = null;\n      let minDistance = Infinity;\n      \n      // 寻找鼠标所在的精确行\n      allLines.forEach(line => {\n        const rect = line.getBoundingClientRect();\n        const lineCenter = rect.top + rect.height / 2;\n        const distance = Math.abs(mouseY - lineCenter);\n        \n        // 如果鼠标在行范围内，计算到行中心的距离\n        if (mouseY >= rect.top && mouseY <= rect.bottom) {\n          if (distance < minDistance) {\n            minDistance = distance;\n            foundLine = line;\n        }\n      }\n    });\n    \n      // 更新高亮状态\n      if (lastHighlightedLine && lastHighlightedLine !== foundLine) {\n        // 移除旧高亮\n        lastHighlightedLine.classList.remove('highlighted');\n      }\n      \n      if (foundLine) {\n        // 添加新高亮\n        foundLine.classList.add('highlighted');\n        lastHighlightedLine = foundLine;\n        \n        // 调试输出\n        console.log('当前高亮行:', foundLine.textContent.substring(0, 30) + '...');\n      } else if (lastHighlightedLine) {\n        // 如果没有找到新行，且有上一个高亮行，移除它\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n    \n    // 鼠标离开处理\n    const mouseLeaveHandler = () => {\n      // 清除当前高亮\n      if (lastHighlightedLine) {\n        lastHighlightedLine.classList.remove('highlighted');\n        lastHighlightedLine = null;\n      }\n    };\n    \n    // 存储处理函数引用\n    window.eventTracker = window.eventTracker || { mouseFollowHandlers: [] };\n    window.eventTracker.mouseFollowHandlers.push(\n      { element: contentArea, event: 'mousemove', handler: mouseMoveHandler },\n      { element: contentArea, event: 'mouseleave', handler: mouseLeaveHandler }\n    );\n    \n    // 添加事件监听器\n    contentArea.addEventListener('mousemove', mouseMoveHandler);\n    contentArea.addEventListener('mouseleave', mouseLeaveHandler);\n    \n    console.log('改进的鼠标跟随监听器已初始化');\n  };\n  \n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n  }, []);\n  \n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async (file) => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      \n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n      \n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n      \n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n  \n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({ scale: 1.0 });\n      \n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      \n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      \n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async (textContent) => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n    \n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n    \n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n    \n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    \n    const lines = [...lineMap.values()];\n    \n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    \n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    \n    return hasTocKeywords || hasPageNumberPatterns || (shortLineRatio > 0.7 && numberLineRatio > 0.3);\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n    \n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    \n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n      \n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n      \n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n      \n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    \n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && \n              x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = (text) => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    \n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      \n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        \n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    \n    return result;\n  };\n\n  // 处理内容页面 - 按句子划分段落\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      \n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n      // 按句子划分内容（句号、问号、感叹号等作为分隔符）\n      const sentences = splitIntoSentences(extractedText);\n      \n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch(mode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          // 使用ADHD友好的静态高亮处理\n          console.log('应用ADHD友好的静态高亮模式');\n          processedContent = formatSimpleHighlightedText(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'rhythm':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          processedContent = createFlashReadingContentFromSentences(sentences);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n      \n      setContent(processedContent);\n      \n      // 如果是静态高亮模式，添加延时验证检查\n      if (mode === 'static') {\n        setTimeout(() => {\n          const contentArea = document.querySelector('.adhd-highlight-mode');\n          if (contentArea) {\n            console.log('静态高亮模式元素存在');\n            const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n            console.log(`找到 ${paragraphs.length} 个段落`);\n            \n            // 检查样式是否正确应用\n            if (paragraphs.length > 0) {\n              const firstPara = paragraphs[0];\n              const styles = window.getComputedStyle(firstPara);\n              console.log('段落应用的样式:', {\n                color: styles.color,\n                backgroundColor: styles.backgroundColor,\n                fontFamily: styles.fontFamily,\n                fontSize: styles.fontSize\n              });\n            }\n          }\n        }, 200);\n      }\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 将文本分割成句子\n  const splitIntoSentences = (text) => {\n    // 匹配句号、问号、感叹号后跟空格或结束的模式\n    // 支持中英文标点符号\n    const sentenceRegex = /([.!?。！？；;]+\\s*)/g;\n    \n    // 分割文本成句子\n    const sentences = [];\n    let lastIndex = 0;\n    let match;\n    \n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const sentence = text.substring(lastIndex, endIndex).trim();\n      \n      // 避免添加空句子\n      if (sentence) {\n        sentences.push(sentence);\n      }\n      \n      lastIndex = endIndex;\n    }\n    \n    // 处理最后一部分（如果没有以句号等结尾）\n    if (lastIndex < text.length) {\n      const lastSentence = text.substring(lastIndex).trim();\n      if (lastSentence) {\n        sentences.push(lastSentence);\n      }\n    }\n    \n    return sentences;\n  };\n\n  // 专门为闪读模式分割文本，以任意标点符号为分隔点\n  const splitIntoFlashReadingSegments = (text) => {\n    // 匹配任意标点符号包括中英文标点\n    const sentenceRegex = /([,.!?:;，。！？：；、]+\\s*)/g;\n    \n    // 分割文本成短句\n    const segments = [];\n    let lastIndex = 0;\n    let match;\n    \n    while ((match = sentenceRegex.exec(text)) !== null) {\n      const endIndex = match.index + match[0].length;\n      const segment = text.substring(lastIndex, endIndex).trim();\n      \n      // 避免添加空段落\n      if (segment) {\n        segments.push(segment);\n      }\n      \n      lastIndex = endIndex;\n    }\n    \n    // 处理最后一部分（如果没有以标点符号结尾）\n    if (lastIndex < text.length) {\n      const lastSegment = text.substring(lastIndex).trim();\n      if (lastSegment) {\n        segments.push(lastSegment);\n      }\n    }\n    \n    return segments;\n  };\n\n  // 格式化句子为HTML\n  const formatSentencesToHtml = (sentences) => {\n    let html = '<div class=\"pdf-content\">';\n    \n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      html += `<p class=\"pdf-paragraph\">${sentence}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为句子应用静态高亮\n  const applyStaticHighlightToSentences = (sentences) => {\n    let html = '<div class=\"pdf-content adhd-content\">';\n    \n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      \n      // 简单地为句子添加特定样式的class\n      html += `<p class=\"pdf-paragraph adhd-sentence\">${sentence}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为鼠标跟随模式格式化句子\n  const formatSentencesForMouseFollow = (sentences) => {\n    let html = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    sentences.forEach((sentence, index) => {\n      if (sentence.trim() === '') return;\n      \n      // 每个句子作为独立行，使用div而不是p标签\n      html += `<div class=\"follow-line\" data-line=\"${index}\" data-sentence=\"${sentence.substring(0, 20)}...\" style=\"color: inherit;\">${sentence}</div>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为舒适3D模式格式化句子\n  const applyComfortable3dEffectToSentences = (sentences) => {\n    let html = '<div class=\"pdf-content\">';\n    \n    sentences.forEach(sentence => {\n      if (sentence.trim() === '') return;\n      \n      // 为每个词随机应用不同的3D效果\n      const words = sentence.split(/(\\s+)/);\n      let processedSentence = '';\n      \n      words.forEach(word => {\n        if (word.trim() === '') {\n          processedSentence += word;\n        } else {\n          // 随机选择3D效果类型\n          const effectTypes = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n          const effectClass = effectTypes[Math.floor(Math.random() * effectTypes.length)];\n          \n          processedSentence += `<span class=\"${effectClass}\">${word}</span>`;\n        }\n      });\n      \n      html += `<p class=\"pdf-paragraph\">${processedSentence}</p>`;\n    });\n    \n    html += '</div>';\n    return html;\n  };\n\n  // 为闪读模式创建内容\n  const createFlashReadingContentFromSentences = (sentences) => {\n    // 储存句子到全局变量，用于后续显示\n    window.flashReadingSentences = sentences;\n\n    // 返回闪读界面的HTML结构\n    return `\n      <div class=\"flash-reading-container\">\n        <div class=\"flash-reading-controls\">\n          <div class=\"flash-reading-buttons\">\n            <button id=\"flash-reading-prev-sentence\" class=\"flash-reading-btn\">上一句</button>\n            <button id=\"flash-reading-play\" class=\"flash-reading-btn\">开始</button>\n            <button id=\"flash-reading-pause\" class=\"flash-reading-btn\" disabled>暂停</button>\n            <button id=\"flash-reading-stop\" class=\"flash-reading-btn\">停止</button>\n            <button id=\"flash-reading-next-sentence\" class=\"flash-reading-btn\">下一句</button>\n          </div>\n          <div class=\"flash-reading-speed\">\n            <span>速度：</span>\n            <input type=\"range\" id=\"flash-reading-speed\" min=\"300\" max=\"1700\" step=\"50\" value=\"1000\" class=\"flash-reading-slider\">\n            <span id=\"flash-reading-speed-value\">1000 ms</span>\n            <span class=\"flash-reading-speed-note\">（数值越小，切换越快）</span>\n          </div>\n          <div class=\"flash-reading-progress\">\n            <span id=\"flash-reading-progress\">进度：0 / ${sentences.length}</span>\n          </div>\n        </div>\n        <div class=\"flash-reading-display-wrapper\">\n          <div class=\"flash-reading-cover\"></div> <!-- 这里是闪卡 -->\n          <div id=\"flash-reading-display\" class=\"flash-reading-display\">准备开始</div>\n        </div>\n      </div>`;\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async (file) => {\n    try {\n      const text = await file.text();\n      \n      // 根据阅读模式选择不同的处理方式\n      let processedContent = '';\n      \n      if (readingMode === 'flash-reading') {\n        // 闪读模式下使用特定的分割函数\n        const segments = splitIntoFlashReadingSegments(text);\n        processedContent = createFlashReadingContentFromSentences(segments);\n        \n        // 初始化闪读模式\n        setTimeout(() => {\n          initializeFlashReading();\n        }, 100);\n      } else {\n        // 其他模式使用默认的分割方式\n        const sentences = splitIntoSentences(text);\n        \n        switch(readingMode) {\n          case 'normal':\n            processedContent = formatSentencesToHtml(sentences);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlightToSentences(sentences);\n            break;\n          case 'follow-mouse':\n            processedContent = formatSentencesForMouseFollow(sentences);\n            break;\n          case 'comfortable-3d':\n            processedContent = applyComfortable3dEffectToSentences(sentences);\n            break;\n          default:\n            processedContent = formatSentencesToHtml(sentences);\n        }\n      }\n      \n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n      \n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setContent('<div class=\"error-message\">TXT文件处理失败</div>');\n    }\n  };\n\n  // 处理Markdown文件\n  const handleMarkdownFile = async (file) => {\n    try {\n      const text = await file.text();\n      \n      // 使用marked库转换markdown为HTML\n      let html = '';\n      try {\n        if (window.marked) {\n          html = window.marked.parse(text);\n        } else {\n          // 如果没有marked库，简单地拆分为段落\n          html = `<div>${text.split(\"\\n\\n\").map(p => `<p>${p}</p>`).join(\"\")}</div>`;\n        }\n      } catch (parseError) {\n        console.error('Markdown解析错误:', parseError);\n        html = `<div>${text}</div>`;\n      }\n      \n      // 提取纯文本内容\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = html;\n      const plainText = tempDiv.textContent || tempDiv.innerText || '';\n      \n      // 分割文本为句子\n      const sentences = splitIntoSentences(plainText);\n      \n      // 根据当前阅读模式处理内容\n      let processedContent = '';\n      switch(readingMode) {\n        case 'normal':\n          processedContent = formatSentencesToHtml(sentences);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlightToSentences(sentences);\n          break;\n        case 'follow-mouse':\n          processedContent = formatSentencesForMouseFollow(sentences);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffectToSentences(sentences);\n          break;\n        case 'flash-reading':\n          // 使用特定的闪读分割函数重新处理文本\n          const segments = splitIntoFlashReadingSegments(plainText);\n          processedContent = createFlashReadingContentFromSentences(segments);\n          \n          // 初始化闪读模式\n          setTimeout(() => {\n            initializeFlashReading();\n          }, 100);\n          break;\n        default:\n          processedContent = formatSentencesToHtml(sentences);\n      }\n      \n      // 设置内容\n      setContent(processedContent);\n      setFileName(file.name);\n      \n      // 简单模拟页数\n      setTotalPages(1);\n      setCurrentPage(1);\n    } catch (error) {\n      console.error('Markdown处理错误:', error);\n      setContent('<div class=\"error-message\">Markdown文件处理失败</div>');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async (e) => {\n    const uploadedFile = e.target.files[0];\n    if (!uploadedFile) return;\n    \n    setLoading(true);\n    setFileName(uploadedFile.name);\n    \n    try {\n      if (uploadedFile.type === 'application/pdf') {\n        await handlePdfFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/plain' || uploadedFile.name.endsWith('.txt')) {\n        await handleTxtFile(uploadedFile);\n      } else if (uploadedFile.type === 'text/markdown' || uploadedFile.name.endsWith('.md')) {\n        await handleMarkdownFile(uploadedFile);\n    } else {\n        setContent('<div class=\"error-message\">不支持的文件格式</div>');\n      }\n    } catch (error) {\n      console.error('处理文件时出错:', error);\n      setContent('<div class=\"error-message\">处理文件时出错</div>');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = (container) => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    \n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n      \n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n      \n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          \n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n          \n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width/2,  // 水平中心\n            y: rect.bottom,               // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n    \n    // 过滤无效位置并排序\n    return positions\n      .filter(p => p.char.trim() !== '')\n      .sort((a, b) => {\n        // 先按行排序，同行按列排序\n        const yDiff = a.y - b.y;\n        if (Math.abs(yDiff) > 5) { // 5px阈值判断是否同一行\n          return yDiff;\n        }\n        return a.x - b.x;\n      });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    \n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - (containerVisibleHeight / 2);\n      \n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - (window.innerHeight / 2);\n      \n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    \n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n    \n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    \n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n    \n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length || // 已到末尾\n          positions[nextIndex].char.trim() === '' || // 下一个是空白\n          positions[nextIndex].y > charPosition.y + 5) { // 下一个在新行\n        return true;\n      }\n    }\n    \n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n    \n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n      \n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || \n          current.y > prev.y + 5) { // 有明显换行\n        break;\n      }\n      \n      start--;\n    }\n    \n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n      \n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      \n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n      \n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      \n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (window.autoReader.charPositions.length === 0) {\n      if (window.currentPage < window.totalPages) {\n        window.changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 重置索引到开头\n    window.autoReader.currentIndex = 0;\n    \n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    \n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n    \n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n    \n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none';\n      highlight.style.zIndex = '998';\n      contentContainer.appendChild(highlight);\n    }\n    \n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight &&\n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n    \n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20;\n    \n    // 尝试获取实际行高\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(window.autoReader.charPositions[i].y - window.autoReader.charPositions[i-1].y);\n        if (yDiff > 5) {\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n    \n    // 记录上次滚动的位置\n    let lastScrolledY = -1;\n    const scrollSafeZone = lineHeight * 2.5;\n    \n    // 设置字符大小的估计值\n    let charWidth = 20;\n    let charHeight = lineHeight * 0.8;\n    \n    // 尝试估计字符宽度\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        if (window.autoReader.charPositions[i].x !== window.autoReader.charPositions[i-1].x) {\n          const xDiff = Math.abs(window.autoReader.charPositions[i].x - window.autoReader.charPositions[i-1].x);\n          if (xDiff > 0 && xDiff < 50) {\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    \n    window.autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (window.autoReader.currentIndex < window.autoReader.charPositions.length && \n             window.autoReader.charPositions[window.autoReader.currentIndex]?.char.trim() === '') {\n        window.autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (window.autoReader.currentIndex >= window.autoReader.charPositions.length) {\n        if (window.currentPage < window.totalPages) {\n          window.changePage(1);\n          clearInterval(window.autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n\n      const pos = window.autoReader.charPositions[window.autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      \n      if (cursor && highlight) {\n        const contentRect = contentContainer.getBoundingClientRect();\n        \n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        \n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        \n        highlight.style.left = `${relativeX - charWidth/2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n        \n        // 滚动处理\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        \n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          \n          if (isContainerScrollable) {\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n            \n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            \n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = relativeY;\n            }\n          } else {\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n            \n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            \n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      \n      window.autoReader.currentIndex++;\n      \n    }, window.autoReader.speed);\n    \n    // 在停止自动阅读时清除所有高亮\n    window.autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n      \n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n      \n      // 调用清理函数\n      if (window.autoReader.cleanup) {\n        window.autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n    \n    // 重置翻页状态\n    window.autoReader.isPageChanging = false;\n    \n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n    \n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n    \n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n    \n    // 收集字符位置\n    window.autoReader.charPositions = getAllCharacterPositions(content);\n    \n    // 如果当前页没有内容，尝试翻页\n    if (window.autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !window.autoReader.isPageChanging) {\n        window.autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async (e) => {\n    const newMode = e.target.value;\n    const prevMode = readingMode;\n    \n    console.log(`切换阅读模式: 从 ${prevMode} 到 ${newMode}`);\n    \n    // 更新状态\n    setReadingMode(newMode);\n    \n    // 如果有PDF文档和当前页，重新处理当前页内容\n    if (pdfDocument && currentPage > 0) {\n      try {\n        console.log('重新处理当前页面内容');\n        const page = await pdfDocument.getPage(currentPage);\n        \n        // 不使用任何额外处理，直接使用最原始的方式重新加载页面\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n        \n        // 根据当前模式设置内容\n        if (newMode === 'static') {\n          // 静态高亮模式 - 使用改进的句子处理\n          const html = formatSimpleHighlightedText(sentences);\n          console.log('设置静态高亮内容');\n          setContent(html);\n          \n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n        if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n              \n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n                \n                // 验证文字颜色\n                if (styles.color === 'rgb(51, 51, 51)' || styles.color === '#333333') {\n                  console.log('文字颜色正确应用');\n                } else {\n                  console.warn('文字颜色可能未正确应用:', styles.color);\n                }\n              }\n            } else {\n              console.error('未找到静态高亮模式内容区域');\n            }\n          }, 200);\n        } else if (newMode === 'flash-reading') {\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n            \n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n            \n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n            \n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n        } else {\n          // 其他模式保持不变\n          const handler = getContentHandlerForMode(newMode);\n          const processedContent = handler(sentences);\n          setContent(processedContent);\n        }\n      } catch (error) {\n        console.error('应用阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 首先确保移除鼠标跟随监听器\n    removeMouseFollowListeners();\n    \n    // 清理节奏阅读器\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    \n    // 清理闪读器\n    if (window.flashReader) {\n      window.flashReader.cleanup();\n    }\n    \n    // 清理舒适3D效果\n    const comfortable3DElements = document.querySelectorAll('.emboss-3d-text, .float-3d-text, .gradient-3d-text');\n    comfortable3DElements.forEach(el => el.remove());\n    \n    // 清理闪读模式元素\n    const flashReadingElements = document.querySelectorAll('.flash-reading-container, .flash-reading-display, .flash-reading-controls');\n    flashReadingElements.forEach(el => el.remove());\n    \n    // 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll(\n      '.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line, .rhythm-char'\n    );\n    highlights.forEach(el => {\n      if (el.parentNode) el.parentNode.removeChild(el);\n    });\n    \n    // 彻底替换内容区域以移除所有事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 先保存底部翻页控件\n      const bottomPagination = contentArea.querySelector('.bottom-pagination');\n      \n      // 深度克隆内容，但不克隆事件监听器\n      const contentHTML = contentArea.querySelector('div[dangerouslySetInnerHTML]')?.innerHTML || '';\n      const newContentArea = contentArea.cloneNode(false);\n      \n      // 创建新的内容容器\n      const newContentContainer = document.createElement('div');\n      newContentContainer.innerHTML = contentHTML;\n      newContentArea.appendChild(newContentContainer);\n      \n      // 如果有底部翻页控件，重新添加\n      if (bottomPagination && totalPages > 0) {\n        const newBottomPagination = bottomPagination.cloneNode(true);\n        // 重新绑定事件\n        const prevBtn = newBottomPagination.querySelector('.page-btn:first-child');\n        const nextBtn = newBottomPagination.querySelector('.page-btn:last-child');\n        if (prevBtn) prevBtn.onclick = () => changePage(-1);\n        if (nextBtn) nextBtn.onclick = () => changePage(1);\n        newContentArea.appendChild(newBottomPagination);\n      }\n      \n      if (contentArea.parentNode) {\n        contentArea.parentNode.replaceChild(newContentArea, contentArea);\n      }\n    }\n    \n    // 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 移除所有特殊标记和样式\n      paragraph.removeAttribute('data-follow');\n      paragraph.removeAttribute('style');\n      \n      // 清理特殊span标签\n      paragraph.innerHTML = paragraph.innerHTML\n        .replace(/<span class=\"text-line\"[^>]*>/g, '')\n        .replace(/<span class=\"rhythm-char\"[^>]*>/g, '')\n        .replace(/<span class=\"line-highlight[^\"]*\"[^>]*>/g, '')\n        .replace(/<span class=\"mouse-highlight[^\"]*\"[^>]*>/g, '')\n        .replace(/<\\/span>/g, '');\n    });\n    \n    // 移除特殊UI元素\n    const elementsToRemove = [\n      'rhythm-speed-slider',\n      'rhythm-notification'\n    ];\n    \n    elementsToRemove.forEach(id => {\n      const element = document.getElementById(id);\n      if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    });\n    \n    // 移除暗色背景\n    document.body.classList.remove('dark-background');\n    \n    // 清理闪读模式\n    if (window.flashReader && typeof window.flashReader.cleanup === 'function') {\n      window.flashReader.cleanup();\n    }\n  };\n\n  const handleAutoScroll = () => {\n    window.autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = (e) => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    \n    const rect = contentArea.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    \n    clearAllHighlights();\n    \n    const paragraphs = contentArea.querySelectorAll('p');\n    paragraphs.forEach(paragraph => {\n      const paragraphRect = paragraph.getBoundingClientRect();\n      const paragraphX = paragraphRect.left - rect.left;\n      const paragraphY = paragraphRect.top - rect.top;\n      \n      if (y >= paragraphY && y <= paragraphY + paragraphRect.height) {\n        const words = paragraph.querySelectorAll('span');\n        words.forEach(word => {\n          const wordRect = word.getBoundingClientRect();\n          const wordX = wordRect.left - rect.left;\n          \n          if (x >= wordX && x <= wordX + wordRect.width) {\n            word.classList.add('highlight');\n          }\n        });\n      }\n    });\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 专门用于移除鼠标跟随事件的函数\n  const removeMouseFollowListeners = () => {\n    // 移除记录的所有监听器\n    if (window.eventTracker && window.eventTracker.mouseFollowHandlers) {\n      window.eventTracker.mouseFollowHandlers.forEach(({element, event, handler}) => {\n        if (element && element.removeEventListener) {\n          element.removeEventListener(event, handler);\n        }\n      });\n      window.eventTracker.mouseFollowHandlers = [];\n    }\n    \n    // 为安全起见，尝试从document和内容区域移除通用处理函数\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    }\n    \n    document.removeEventListener('mousemove', handleMouseMove);\n    \n    // 清除所有当前高亮\n    clearAllHighlights();\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n    \n    // 添加底部翻页控件样式\n    const bottomPaginationStyles = document.createElement('style');\n    bottomPaginationStyles.id = 'bottom-pagination-styles';\n    bottomPaginationStyles.innerHTML = `\n      .bottom-pagination {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        padding: 20px 0 30px;\n        margin-top: 30px;\n        width: 100%;\n        background-color: transparent;\n        border-radius: 5px;\n      }\n\n      .bottom-pagination .page-btn {\n        background-color: #6c5ce7;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        padding: 8px 15px;\n        margin: 0 10px;\n        cursor: pointer;\n        font-size: 14px;\n        transition: background-color 0.2s ease;\n      }\n\n      .bottom-pagination .page-btn:hover {\n        background-color: #4834d4;\n      }\n\n      .bottom-pagination .page-btn:disabled {\n        background-color: #aaa;\n        cursor: not-allowed;\n      }\n\n      .bottom-pagination .page-info {\n        font-size: 14px;\n        margin: 0 10px;\n      }\n    `;\n    document.head.appendChild(bottomPaginationStyles);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n    addComfortable3DStyles();\n    \n    // 添加鼠标跟随模式的样式\n    const mouseFollowStyle = document.createElement('style');\n    mouseFollowStyle.id = 'intelligent-mouse-follow-style';\n    mouseFollowStyle.textContent = `\n      /* 基础样式 */\n      .mouse-follow-content {\n        position: relative;\n        line-height: 1.8;\n      }\n      \n      .mouse-follow-content .follow-line {\n        position: relative;\n        padding: 8px 16px;\n        margin: 4px 0;\n        border-radius: 6px;\n        transition: all 0.2s ease;\n        display: block;\n        min-height: 1.8em;\n        white-space: normal;\n        word-wrap: break-word;\n        text-indent: 2em;\n      }\n      \n      /* 高亮状态 */\n      .follow-line.highlighted {\n        background-color: #ffa500 !important; /* 橙色背景 */\n        color: #ffffff !important; /* 白色文字 */\n        font-weight: bold !important;\n        font-size: 1.1em; /* 稍微调小字号 */\n        transform: translateX(5px);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n      }\n      \n      \n      /* 平滑过渡效果 */\n      .follow-line {\n        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n      }\n      \n      /* 行间距优化 */\n      .mouse-follow-content .follow-line + .follow-line {\n        margin-top: 4px;\n      }\n      \n      /* 添加行指示器 */\n      .follow-line::before {\n        content: '';\n        position: absolute;\n        left: 0;\n        top: 0;\n        bottom: 0;\n        width: 3px;\n        background: linear-gradient(to bottom, transparent, rgba(255, 255, 255, 0.5), transparent);\n        opacity: 0;\n        transition: opacity 0.2s ease;\n      }\n      \n      .follow-line.highlighted::before {\n        opacity: 1;\n      }\n    `;\n    document.head.appendChild(mouseFollowStyle);\n    \n    // 创建深色背景下的ADHD友好高亮样式\n    const style = document.createElement('style');\n    style.id = 'adhd-friendly-highlight-style';\n    style.textContent = `\n      /* ADHD友好的高亮样式 - 适配深色背景 */\n      .adhd-highlight-mode {\n        line-height: 1.8;\n        padding: 20px;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph {\n        margin-bottom: 1.2em;\n        background-color: transparent;\n        padding: 12px 15px;\n        border-radius: 6px;\n        border-left: 3px solid rgba(255, 255, 255, 0.2);\n        transition: all 0.3s ease;\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover {\n        transform: translateX(5px);\n        border-left-color: rgba(255, 255, 255, 0.4);\n      }\n      \n      /* 加粗样式 - 白色加粗 */\n      .adhd-bold {\n        font-weight: 700;\n        color: #ffffff;\n        letter-spacing: 0.02em;\n        font-size: 1.1em;\n        text-shadow: 0 0 1px rgba(255, 255, 255, 0.2);\n      }\n      \n      /* 彩色样式 - 使用鲜明的蓝色 */\n      .adhd-colored {\n        color: #6c5ce7;\n        font-weight: 500;\n        font-size: 1.05em;\n        text-shadow: 0 0 1px rgba(108, 92, 231, 0.2);\n      }\n      \n      /* 正常样式 - 普通白色 */\n      .adhd-normal {\n        color: rgba(255, 255, 255, 0.8);\n        font-size: 1em;\n      }\n\n      /* 添加平滑过渡效果 */\n      .adhd-bold, .adhd-colored, .adhd-normal {\n        transition: all 0.2s ease;\n      }\n\n      /* 悬停效果 */\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-bold {\n        color: #ffffff;\n        text-shadow: 0 0 2px rgba(255, 255, 255, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-colored {\n        color: #8a7ff7;\n        text-shadow: 0 0 2px rgba(138, 127, 247, 0.3);\n      }\n\n      .adhd-highlight-mode .pdf-paragraph:hover .adhd-normal {\n        color: rgba(255, 255, 255, 0.9);\n      }\n\n      /* 添加段落间距的视觉引导 */\n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph {\n        margin-top: 1.5em;\n        position: relative;\n      }\n      \n      .adhd-highlight-mode .pdf-paragraph + .pdf-paragraph::before {\n        content: '';\n        position: absolute;\n        top: -0.75em;\n        left: 0;\n        right: 0;\n        height: 1px;\n        background: linear-gradient(\n          to right,\n          transparent,\n          rgba(255, 255, 255, 0.1),\n          transparent\n        );\n      }\n    `;\n    document.head.appendChild(style);\n    \n    // 添加基础鼠标跟随样式\n    const mouseFollowPageStyle = document.createElement('style');\n    mouseFollowPageStyle.id = 'basic-mouse-follow-style';\n    mouseFollowPageStyle.textContent = `\n      .follow-line {\n        padding: 8px 12px;\n        margin: 4px 0;\n        border-radius: 4px;\n        transition: background-color 0.2s ease;\n      }\n      .follow-line.highlighted {\n        background-color: #ffa500;\n        color: #000080;\n        font-weight: bold;\n      }\n    `;\n    document.head.appendChild(mouseFollowPageStyle);\n    \n    return () => {\n      const existingStyle = document.getElementById('adhd-friendly-highlight-style');\n      if (existingStyle) existingStyle.remove();\n      \n      const existingMouseFollowStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (existingMouseFollowStyle) existingMouseFollowStyle.remove();\n      \n      const existingBasicMouseFollowStyle = document.getElementById('basic-mouse-follow-style');\n      if (existingBasicMouseFollowStyle) existingBasicMouseFollowStyle.remove();\n      \n      mouseFollowPageStyle.remove();\n    };\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 清理旧监听器\n    removeMouseFollowListeners();\n    \n    // 添加新监听器\n    setTimeout(() => {\n      addMouseFollowListeners();\n      \n      // 添加调试辅助 - 显示行边界\n      const contentArea = document.querySelector('.mouse-follow-content');\n      if (contentArea) {\n        const lines = contentArea.querySelectorAll('.follow-line');\n        console.log(`初始化鼠标跟随模式，共 ${lines.length} 行`);\n        \n        // 可选：启用可视化调试\n        if (false) { // 设置为true可以启用可视化调试\n          lines.forEach((line, index) => {\n            line.style.border = '1px dashed #888';\n            line.setAttribute('title', `行 ${index+1}`);\n          });\n        }\n        \n        // 验证行高亮效果\n        const firstLine = lines[0];\n        if (firstLine) {\n          console.log('行样式验证:', {\n            padding: window.getComputedStyle(firstLine).padding,\n            margin: window.getComputedStyle(firstLine).margin,\n            fontSize: window.getComputedStyle(firstLine).fontSize,\n            lineHeight: window.getComputedStyle(firstLine).lineHeight\n          });\n        }\n      }\n    }, 100);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = (delta) => {\n    window.autoReader.speed = Math.max(100, window.autoReader.speed + delta);\n    \n    if (window.autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async (delta) => {\n    console.log(`翻页请求: 当前页 ${currentPage}, 增量 ${delta}`);\n    const newPage = currentPage + delta;\n    \n    if (newPage < 1 || newPage > totalPages) {\n      console.log('无效页码，不执行翻页');\n          return;\n        }\n        \n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n    const wasFlashReading = readingMode === 'flash-reading' && window.flashReader && window.flashReader.isPlaying;\n    \n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    \n    if (wasFlashReading && window.flashReader) {\n      window.flashReader.cleanup();\n    }\n    \n    // 更新页码\n    setCurrentPage(newPage);\n    \n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n      \n      // 检查是否为目录页\n      const textContent = await page.getTextContent();\n      const isToc = await detectIfTocPage(textContent);\n      setIsTableOfContents(isToc);\n      \n      if (isToc) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, page.getViewport({ scale: 1.0 }));\n      } else {\n        // 处理正文页面 - 根据当前阅读模式处理\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        // 分割成句子\n        const sentences = splitIntoSentences(extractedText);\n        \n        // 根据当前模式设置内容\n        if (readingMode === 'static') {\n          console.log('翻页后应用静态高亮模式');\n          const processedContent = formatSimpleHighlightedText(sentences);\n          setContent(processedContent);\n          \n          // 添加延时验证检查\n          setTimeout(() => {\n            const contentArea = document.querySelector('.adhd-highlight-mode');\n            if (contentArea) {\n              console.log('静态高亮模式元素存在');\n              const paragraphs = contentArea.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落`);\n              \n              // 检查样式是否正确应用\n              if (paragraphs.length > 0) {\n                const firstPara = paragraphs[0];\n                const styles = window.getComputedStyle(firstPara);\n                console.log('段落应用的样式:', {\n                  color: styles.color,\n                  backgroundColor: styles.backgroundColor,\n                  fontFamily: styles.fontFamily,\n                  fontSize: styles.fontSize\n                });\n              }\n            }\n          }, 200);\n        } else if (readingMode === 'flash-reading') {\n          // 如果是闪读模式，则需要特殊处理\n          try {\n            const page = await pdfDocument.getPage(currentPage);\n            const textContent = await page.getTextContent();\n            const textItems = textContent.items;\n            let extractedText = textItems.map(item => item.str).join(' ');\n            extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n            \n            // 使用特定的闪读分割函数\n            const segments = splitIntoFlashReadingSegments(extractedText);\n            \n            // 生成闪读内容\n            const processedContent = createFlashReadingContentFromSentences(segments);\n            setContent(processedContent);\n            \n            // 延迟初始化，确保DOM已更新\n            setTimeout(() => {\n              initializeFlashReading();\n            }, 100);\n          } catch (error) {\n            console.error('应用闪读模式时出错:', error);\n          }\n          return; // 已处理，直接返回\n        } else {\n          // 其他模式使用原处理函数\n          await processContentPage(page, readingMode);\n        }\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n    } catch (error) {\n      console.error('页面切换错误:', error);\n    }\n  };\n\n  // ADHD友好的静态高亮处理函数\n  const formatSimpleHighlightedText = (sentences) => {\n    console.log('开始处理ADHD友好的静态高亮文本，句子数量:', sentences.length);\n    \n    let html = '<div class=\"pdf-content adhd-highlight-mode\">';\n    \n    sentences.forEach((sentence, sentenceIndex) => {\n      if (!sentence || sentence.trim() === '') {\n        console.log(`跳过空句子，索引: ${sentenceIndex}`);\n      return;\n    }\n    \n      // 清理和规范化文本\n      const cleanText = sentence\n        .trim()\n        .replace(/\\s+/g, ' ')  // 规范化空白字符\n        .replace(/&/g, '&amp;')  // 转义特殊字符\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n      \n      // 处理句子中的单词，为它们添加不同样式\n      const words = cleanText.split(/(\\s+)/);\n      let formattedSentence = '';\n      \n      words.forEach((word, wordIndex) => {\n        if (word.trim() === '') {\n          // 保留空格\n          formattedSentence += word;\n      } else {\n          // 根据位置应用不同的样式类\n          // 三种交替样式: 加粗、彩色、正常\n          const styleClass = wordIndex % 3 === 0 ? 'adhd-bold' : \n                           wordIndex % 3 === 1 ? 'adhd-colored' : 'adhd-normal';\n          \n          formattedSentence += `<span class=\"${styleClass}\">${word}</span>`;\n        }\n      });\n      \n      console.log(`处理句子 ${sentenceIndex + 1}:`, cleanText.substring(0, 50) + '...');\n      html += `<p class=\"pdf-paragraph\">${formattedSentence}</p>`;\n    });\n    \n    html += '</div>';\n    \n    // 调试输出\n    console.log('生成的ADHD友好静态高亮HTML:', html.substring(0, 200) + '...');\n    \n    return html;\n  };\n\n  // 根据阅读模式获取相应的内容处理函数\n  const getContentHandlerForMode = (mode) => {\n    switch(mode) {\n      case 'normal': return formatSentencesToHtml;\n      case 'static': return applyStaticHighlightToSentences;\n      case 'follow-mouse': return formatSentencesForMouseFollow;\n      case 'comfortable-3d': return applyComfortable3dEffectToSentences;\n      case 'flash-reading': \n        return (sentences) => {\n          // 闪读模式使用专门的分割函数重新处理文本\n          return createFlashReadingContentFromSentences(sentences);\n        };\n      default: return formatSentencesToHtml;\n    }\n  };\n\n  // 监听阅读模式和当前页面的变化\n  useEffect(() => {\n    if (readingMode === 'mouse-follow' && currentPage && !isTableOfContents) {\n      // 移除之前的样式\n      const oldStyle = document.getElementById('intelligent-mouse-follow-style');\n      if (oldStyle) {\n        oldStyle.remove();\n      }\n      \n      // 添加基础鼠标跟随样式\n      const followModeStyle = document.createElement('style');\n      followModeStyle.id = 'basic-mouse-follow-style';\n      followModeStyle.textContent = `\n        .follow-line {\n          padding: 8px 12px;\n          margin: 4px 0;\n          border-radius: 4px;\n          transition: background-color 0.2s ease;\n        }\n        .follow-line.highlighted {\n          background-color: #ffa500;\n          color: #000080;\n          font-weight: bold;\n        }\n      `;\n      document.head.appendChild(followModeStyle);\n      \n      // 处理当前页面内容\n      const page = pdfDocument.getPage(currentPage);\n      const textContent = page.getTextContent();\n      const sentences = textContent.items\n        .map(item => item.str)\n        .join(' ')\n        .split(/[。！？]/)\n        .filter(s => s.trim());\n      \n      // 应用基础鼠标跟随格式化\n      setContent(formatSentencesForMouseFollow(sentences));\n      \n      // 添加鼠标跟随监听器\n      setTimeout(() => {\n        addMouseFollowListeners();\n      }, 100);\n      \n      return () => {\n        followModeStyle.remove();\n      };\n    }\n  }, [readingMode, currentPage, pdfDocument]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        <div className=\"logo\">\n          <h2>ADHD阅读助手</h2>\n        </div>\n        \n        <div className=\"reading-controls\">\n          <h3>阅读模式</h3>\n          <select \n            id=\"reading-mode-select\" \n            value={readingMode} \n            onChange={handleReadingModeChange}\n            className=\"mode-select\"\n          >\n            <option value=\"normal\">普通模式</option>\n            <option value=\"static\">静态高亮</option>\n            <option value=\"follow-mouse\">鼠标跟随</option>\n            <option value=\"rhythm\">节奏阅读</option>\n            <option value=\"flash-reading\">闪读模式</option>\n          </select>\n        </div>\n        \n        <div className=\"upload-section\">\n          <input\n            type=\"file\"\n            accept=\".pdf,.txt,.md\" \n            hidden\n            id=\"file-upload\"\n            onChange={handleFileUpload}\n            ref={fileRef}\n          />\n          <button \n            className=\"upload-btn\"\n            onClick={() => fileRef.current.click()}\n          >\n            上传文件 (.pdf/.txt/.md)\n          </button>\n      </div>\n            </div>\n      \n      <div className=\"main-content\">\n        <div className=\"toolbar\">\n          {fileName && <h3 className=\"filename\">{fileName}</h3>}\n          {/* 移除了原有翻页控件 */}\n            </div>\n        \n        <div className=\"page-content\" ref={readerContainerRef}>\n            <div dangerouslySetInnerHTML={{ __html: content }} />\n          \n          {totalPages > 0 && (\n            <div className=\"bottom-pagination\">\n              <button \n                onClick={() => changePage(-1)} \n                disabled={currentPage <= 1}\n                className=\"page-btn\"\n              >\n                上一页\n              </button>\n            <span className=\"page-info\">\n                第 {currentPage} / {totalPages} 页\n              </span>\n              <button \n                onClick={() => changePage(1)} \n                disabled={currentPage >= totalPages}\n                className=\"page-btn\"\n              >\n                下一页\n              </button>\n          </div>\n        )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App; \n"],"mappings":"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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDP,QAAQ,CAAC2J,IAAI,CAACtG,WAAW,CAACsY,gBAAgB,CAAC;;IAE3C;IACA,MAAM7Y,KAAK,GAAG9C,QAAQ,CAAC4C,aAAa,CAAC,OAAO,CAAC;IAC7CE,KAAK,CAACD,EAAE,GAAG,+BAA+B;IAC1CC,KAAK,CAACvC,WAAW,GAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDP,QAAQ,CAAC2J,IAAI,CAACtG,WAAW,CAACP,KAAK,CAAC;;IAEhC;IACA,MAAM8Y,oBAAoB,GAAG5b,QAAQ,CAAC4C,aAAa,CAAC,OAAO,CAAC;IAC5DgZ,oBAAoB,CAAC/Y,EAAE,GAAG,0BAA0B;IACpD+Y,oBAAoB,CAACrb,WAAW,GAAG;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDP,QAAQ,CAAC2J,IAAI,CAACtG,WAAW,CAACuY,oBAAoB,CAAC;IAE/C,OAAO,MAAM;MACX,MAAMC,aAAa,GAAG7b,Q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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}