{"ast":null,"code":"var _jsxFileName = \"D:\\\\adhd-read-helper\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 模拟NLP词性标注功能（实际应用中建议使用专业NLP库如nlp.js或调用API）\nconst tagPartsOfSpeech = text => {\n  // 定义所有标点符号\n  const punctuationMarks = ['，', '。', '！', '？', '；', '：', '（', '）', '【', '】', '《', '》', '〈', '〉', '…', '—', '～', '·', ',', '.', '!', '?', ';', ':', '(', ')', '[', ']', '{', '}', '-', '...', '..'];\n\n  // 将文本按标点符号分割，保留标点符号\n  const segments = text.split(new RegExp(`([${punctuationMarks.map(mark => '\\\\' + mark).join('')}])`));\n  let result = '';\n  let colorIndex = 0; // 0: 红色, 1: 蓝色, 2: 黑色\n  let currentText = '';\n  segments.forEach((segment, index) => {\n    // 跳过空字符串和纯空格\n    if (!segment || /^\\s+$/.test(segment)) {\n      result += segment;\n      return;\n    }\n\n    // 检查是否是标点符号\n    const isPunctuation = punctuationMarks.includes(segment);\n\n    // 根据索引选择颜色\n    let color;\n    switch (colorIndex) {\n      case 0:\n        color = 'red';\n        break;\n      case 1:\n        color = 'blue';\n        break;\n      case 2:\n        color = 'black';\n        break;\n      default:\n        color = 'black';\n    }\n\n    // 将当前文本和标点符号放在同一个颜色块中\n    if (isPunctuation) {\n      // 如果有累积的文本，先添加文本\n      if (currentText) {\n        result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n        currentText = '';\n      }\n      // 添加标点符号\n      result += `<span class=\"highlight-word ${color}\">${segment}</span>`;\n      // 切换颜色\n      colorIndex = (colorIndex + 1) % 3;\n    } else {\n      // 累积文本\n      currentText += segment;\n    }\n  });\n\n  // 处理最后可能剩余的文本\n  if (currentText) {\n    const color = colorIndex === 0 ? 'red' : colorIndex === 1 ? 'blue' : 'black';\n    result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n  }\n  return result;\n};\nconst App = () => {\n  _s();\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const autoReadGuideRef = useRef(null);\n  const autoReadIntervalRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n\n  // 新增自动阅读器状态\n  const [autoReaderState, setAutoReaderState] = useState({\n    currentIndex: 0,\n    charPositions: [],\n    intervalId: null,\n    speed: 300,\n    pageContainer: null,\n    isUserScrolling: false,\n    scrollTimeout: null,\n    contentLoaded: false\n  });\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n    return () => {\n      // 清理自动阅读定时器\n      if (autoReadIntervalRef.current) {\n        clearInterval(autoReadIntervalRef.current);\n      }\n    };\n  }, []);\n\n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async file => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n\n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n\n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n\n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({\n        scale: 1.0\n      });\n\n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async textContent => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n\n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n\n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n\n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    const lines = [...lineMap.values()];\n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    return hasTocKeywords || hasPageNumberPatterns || shortLineRatio > 0.7 && numberLineRatio > 0.3;\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n\n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n\n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n\n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n\n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 修改文本处理函数，实现按完整词随机高亮\n  const processTextWithHighlight = text => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    return result;\n  };\n\n  // 修改processContentPage函数\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n\n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch (mode) {\n        case 'normal':\n          // 普通模式 - 简单分段显示\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'static':\n          // 静态高亮模式 - 应用词性标注和颜色高亮\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'follow-mouse':\n          // 鼠标跟随高亮模式 - 分段落但不预先高亮，由鼠标事件触发高亮\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      setContent(processedContent);\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async file => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain') {\n      handleTxtFile(file);\n    } else {\n      alert('请上传PDF或TXT文件');\n    }\n  };\n\n  // 修改字符位置采集逻辑\n  const getAllCharacterPositions = container => {\n    const rect = container.getBoundingClientRect();\n    const nodes = Array.from(container.querySelectorAll('*')).flatMap(el => [...el.childNodes]).filter(node => node.nodeType === Node.TEXT_NODE);\n    return nodes.flatMap(node => {\n      return [...node.textContent].map((char, i) => {\n        const range = new Range();\n        range.setStart(node, i);\n        range.setEnd(node, i + 1);\n        const charRect = range.getBoundingClientRect();\n        return {\n          x: charRect.left + window.scrollX,\n          y: charRect.top + window.scrollY,\n          char: char\n        };\n      });\n    }).filter(pos => pos.char.trim() !== '');\n  };\n\n  // 修改初始化函数\n  const initializeAutoReader = () => {\n    // 清理旧状态\n    stopAutoReader();\n\n    // 1. 确保页面加载完成\n    if (!autoReaderState.contentLoaded) {\n      setTimeout(initializeAutoReader, 100);\n      return;\n    }\n\n    // 2. 获取容器（带备用选择器）\n    const container = document.querySelector('.page-content') || document.querySelector('.content-container');\n    if (!container) {\n      console.error('自动阅读器初始化失败：未找到内容容器');\n      return;\n    }\n\n    // 3. 收集位置数据（带重试机制）\n    let retryCount = 0;\n    const collectPositions = () => {\n      const positions = getAllCharacterPositions(container);\n      if (positions.length === 0 && retryCount < 3) {\n        retryCount++;\n        setTimeout(collectPositions, 200);\n        return;\n      }\n\n      // 4. 创建可见光标\n      const cursor = document.createElement('div');\n      cursor.id = 'auto-reader-cursor';\n      cursor.style.cssText = `\n        width: 20px;\n        height: 20px;\n        background: #ff0000;\n        border-radius: 50%;\n        position: fixed;\n        transition: all 0.3s;\n        z-index: 9999;\n        pointer-events: none;\n        box-shadow: 0 0 10px red;\n      `;\n      document.body.appendChild(cursor);\n      setAutoReaderState(prev => ({\n        ...prev,\n        pageContainer: container,\n        charPositions: positions,\n        currentIndex: 0,\n        isUserScrolling: false\n      }));\n\n      // 5. 启动带保护的运动逻辑\n      if (positions.length > 0) {\n        startAutoReader();\n      } else {\n        console.error('自动阅读器初始化失败：无有效内容');\n      }\n    };\n    collectPositions();\n  };\n\n  // 修改自动阅读器启动函数\n  const startAutoReader = () => {\n    let index = 0;\n    const move = () => {\n      setAutoReaderState(prev => {\n        if (index >= prev.charPositions.length) {\n          handlePageEnd();\n          return prev;\n        }\n        const pos = prev.charPositions[index];\n        const cursor = document.getElementById('auto-reader-cursor');\n        if (!cursor) return prev;\n\n        // 可视区域检测\n        const viewportY = pos.y - window.scrollY;\n        if (viewportY < 0 || viewportY > window.innerHeight) {\n          window.scrollTo({\n            top: pos.y - window.innerHeight * 0.4,\n            behavior: 'smooth'\n          });\n        }\n\n        // 更新位置（带缓动动画）\n        cursor.animate([{\n          transform: `translate(${pos.x}px, ${pos.y}px)`\n        }], {\n          duration: prev.speed * 0.8,\n          easing: 'ease-in-out'\n        });\n        index++;\n        return prev;\n      });\n      setTimeout(move, autoReaderState.speed);\n    };\n    move();\n  };\n\n  // 修改停止函数\n  const stopAutoReader = () => {\n    setAutoReaderState(prev => {\n      if (prev.intervalId) {\n        clearInterval(prev.intervalId);\n      }\n      if (prev.scrollTimeout) {\n        clearTimeout(prev.scrollTimeout);\n      }\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) cursor.remove();\n      return {\n        ...prev,\n        intervalId: null,\n        currentIndex: 0,\n        isUserScrolling: false,\n        scrollTimeout: null\n      };\n    });\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async e => {\n    const newMode = e.target.value;\n    console.log(`切换阅读模式: ${readingMode} -> ${newMode}`);\n\n    // 清理旧模式\n    cleanupDOM();\n    stopAutoReader();\n\n    // 更新状态\n    setReadingMode(newMode);\n\n    // 应用新模式\n    if (pdfDocument && currentPage > 0) {\n      try {\n        const page = await pdfDocument.getPage(currentPage);\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        let processedContent = '';\n        switch (newMode) {\n          case 'follow-mouse':\n            processedContent = formatTextForMouseFollow(extractedText);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlight(extractedText);\n            break;\n          case 'auto-reader':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          default:\n            processedContent = formatTextToHtml(extractedText);\n        }\n        const contentArea = document.querySelector('.page-content');\n        if (contentArea) {\n          contentArea.textContent = '';\n          contentArea.innerHTML = processedContent;\n\n          // 标记内容已加载\n          setAutoReaderState(prev => ({\n            ...prev,\n            contentLoaded: true\n          }));\n          switch (newMode) {\n            case 'follow-mouse':\n              initializeMouseFollow();\n              break;\n            case 'auto-reader':\n              setTimeout(initializeAutoReader, 100);\n              break;\n            case 'static':\n              void contentArea.offsetHeight;\n              break;\n          }\n        }\n      } catch (error) {\n        console.error('应用新阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清除所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 在组件卸载时清除事件监听器\n  useEffect(() => {\n    return () => {\n      removeMouseFollowListeners();\n    };\n  }, []);\n\n  // 格式化文本为HTML\n  const formatTextToHtml = text => {\n    // 分段\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n\n    // 创建HTML内容\n    let htmlContent = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      htmlContent += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 修改后的静态高亮应用函数\n  const applyStaticHighlight = text => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    let htmlContent = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      // 新增强制清理逻辑\n      const cleanParagraph = paragraph.replace(/<span class=\"text-line\">/g, '').replace(/<\\/span>/g, '');\n      const highlightedText = processTextWithHighlight(cleanParagraph);\n      htmlContent += `<p class=\"pdf-paragraph\">${highlightedText}</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 修改后的清理函数\n  const cleanupDOM = () => {\n    console.log('清理DOM元素和效果...');\n\n    // 1. 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll('.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line');\n    highlights.forEach(el => el.remove());\n\n    // 2. 移除事件监听器（增强版）\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 克隆内容区域以彻底移除所有事件监听器\n      const cleanContent = contentArea.cloneNode(false);\n      cleanContent.innerHTML = contentArea.innerHTML;\n      contentArea.parentNode.replaceChild(cleanContent, contentArea);\n\n      // 清理MutationObserver\n      if (contentArea._highlightObserver) {\n        contentArea._highlightObserver.disconnect();\n        delete contentArea._highlightObserver;\n      }\n    }\n\n    // 3. 重置段落结构（增强版）\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 创建新段落并保留基本结构\n      const newParagraph = document.createElement('p');\n      newParagraph.className = 'pdf-paragraph';\n      newParagraph.innerHTML = paragraph.innerHTML.replace(/<span class=\"text-line\">/g, '').replace(/<\\/span>/g, '');\n\n      // 移除特殊属性\n      newParagraph.removeAttribute('data-follow');\n      newParagraph.removeAttribute('style');\n      if (paragraph.parentNode) {\n        paragraph.parentNode.replaceChild(newParagraph, paragraph);\n      }\n    });\n  };\n\n  // 移除鼠标跟随事件监听器\n  const removeMouseFollowListeners = () => {\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 移除所有事件监听器\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n\n      // 移除MutationObserver\n      if (contentArea._highlightObserver) {\n        contentArea._highlightObserver.disconnect();\n        delete contentArea._highlightObserver;\n      }\n\n      // 移除所有段落的鼠标事件监听器\n      const paragraphs = document.querySelectorAll('.pdf-paragraph');\n      paragraphs.forEach(paragraph => {\n        const newParagraph = paragraph.cloneNode(true);\n        if (paragraph.parentNode) {\n          paragraph.parentNode.replaceChild(newParagraph, paragraph);\n        }\n      });\n\n      // 移除mouse-follow-content类\n      const mouseFollowContent = document.querySelector('.mouse-follow-content');\n      if (mouseFollowContent) {\n        mouseFollowContent.classList.remove('mouse-follow-content');\n      }\n    }\n  };\n\n  // 格式化文本用于鼠标跟随高亮模式\n  const formatTextForMouseFollow = text => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    let htmlContent = '<div class=\"pdf-content mouse-follow-content\">';\n    paragraphs.forEach(paragraph => {\n      // 将段落分割成行\n      const lines = paragraph.split('\\n').filter(line => line.trim());\n      htmlContent += `<p class=\"pdf-paragraph\" data-follow=\"true\" style=\"position: relative; line-height: 1.5;\">`;\n      lines.forEach((line, i) => {\n        // 每行用span包裹\n        htmlContent += `<span class=\"text-line\" style=\"display: block;\">${line}</span>`;\n      });\n      htmlContent += `</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 辅助函数：获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = e => {\n    if (readingMode !== 'follow-mouse') return;\n\n    // 清除所有现有高亮\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n    const mouseTarget = document.elementFromPoint(e.clientX, e.clientY);\n    if (mouseTarget && (mouseTarget.classList.contains('pdf-paragraph') || mouseTarget.tagName === 'P' || mouseTarget.tagName === 'SPAN')) {\n      const targetParagraph = mouseTarget.closest('.pdf-paragraph');\n      if (!targetParagraph) return;\n\n      // 获取段落文本节点\n      const textNode = getTextNodeAtPosition(targetParagraph, e.clientX, e.clientY);\n      if (!textNode) return;\n\n      // 获取精确的行位置和尺寸\n      const range = document.createRange();\n      range.selectNodeContents(textNode);\n      const rects = range.getClientRects();\n\n      // 找到鼠标所在的具体行\n      let targetRect = null;\n      for (let i = 0; i < rects.length; i++) {\n        const rect = rects[i];\n        if (e.clientY >= rect.top && e.clientY <= rect.bottom) {\n          targetRect = rect;\n          break;\n        }\n      }\n      if (targetRect) {\n        // 创建高亮元素\n        const lineHighlight = document.createElement('div');\n        lineHighlight.className = 'line-highlight mouse-highlight';\n\n        // 计算相对于段落的位置\n        const paragraphRect = targetParagraph.getBoundingClientRect();\n        const top = targetRect.top - paragraphRect.top;\n        const left = targetRect.left - paragraphRect.left;\n\n        // 设置高亮样式\n        lineHighlight.style.position = 'absolute';\n        lineHighlight.style.left = `${left}px`;\n        lineHighlight.style.top = `${top}px`;\n        lineHighlight.style.width = `${targetRect.width}px`;\n        lineHighlight.style.height = `${targetRect.height}px`;\n        lineHighlight.style.pointerEvents = 'none';\n        lineHighlight.style.backgroundColor = 'rgba(255, 165, 0, 0.3)';\n        lineHighlight.style.borderRadius = '4px';\n        lineHighlight.style.boxShadow = '0 0 8px rgba(255, 165, 0, 0.5)';\n        lineHighlight.style.zIndex = '5';\n        lineHighlight.style.transition = 'all 0.1s ease';\n\n        // 确保段落有相对定位\n        targetParagraph.style.position = 'relative';\n        targetParagraph.appendChild(lineHighlight);\n\n        // 计算并滚动到居中位置\n        const windowHeight = window.innerHeight;\n        const desiredPosition = windowHeight / 2;\n        const currentPosition = targetRect.top;\n        const scrollOffset = currentPosition - desiredPosition;\n        window.scrollTo({\n          top: window.scrollY + scrollOffset,\n          behavior: 'smooth'\n        });\n      }\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async delta => {\n    const newPage = currentPage + delta;\n    if (newPage >= 1 && newPage <= totalPages && pdfDocument) {\n      setCurrentPage(newPage);\n      try {\n        const page = await pdfDocument.getPage(newPage);\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        let processedContent = '';\n        switch (readingMode) {\n          case 'follow-mouse':\n            processedContent = formatTextForMouseFollow(extractedText);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlight(extractedText);\n            break;\n          case 'auto-reader':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          default:\n            processedContent = formatTextToHtml(extractedText);\n        }\n        const contentArea = document.querySelector('.page-content');\n        if (contentArea) {\n          contentArea.textContent = '';\n          contentArea.innerHTML = processedContent;\n\n          // 根据当前模式重新初始化\n          switch (readingMode) {\n            case 'follow-mouse':\n              initializeMouseFollow();\n              break;\n            case 'auto-reader':\n              // 重置自动阅读器状态并重新初始化\n              setAutoReaderState(prev => ({\n                ...prev,\n                currentIndex: 0\n              }));\n              setTimeout(initializeAutoReader, 50);\n              break;\n            case 'static':\n              void contentArea.offsetHeight;\n              break;\n          }\n        }\n      } catch (error) {\n        console.error('翻页处理出错:', error);\n      }\n    }\n  };\n\n  // 修改后的鼠标跟随初始化函数\n  const initializeMouseFollow = () => {\n    // 新增延迟补偿\n    setTimeout(() => {\n      addMouseFollowListeners();\n\n      // 强制触发重排\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        void contentArea.offsetHeight;\n\n        // 模拟鼠标移动事件\n        const fakeEvent = new MouseEvent('mousemove', {\n          clientX: window.innerWidth / 2,\n          clientY: window.innerHeight / 2,\n          bubbles: true\n        });\n        contentArea.dispatchEvent(fakeEvent);\n      }\n    }, 50);\n  };\n\n  // 添加鼠标跟随监听器\n  const addMouseFollowListeners = () => {\n    if (readingMode !== 'follow-mouse') return;\n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n\n    // 清理旧的监听器\n    contentArea.removeEventListener('mousemove', handleMouseMove);\n    contentArea.removeEventListener('mouseleave', clearAllHighlights);\n\n    // 添加新的监听器\n    contentArea.addEventListener('mousemove', handleMouseMove);\n    contentArea.addEventListener('mouseleave', clearAllHighlights);\n\n    // 确保所有段落都有正确的样式\n    document.querySelectorAll('.pdf-paragraph').forEach(p => {\n      p.style.position = 'relative';\n      p.style.lineHeight = '1.5';\n    });\n  };\n\n  // 处理页面末尾\n  const handlePageEnd = () => {\n    if (currentPage < totalPages) {\n      changePage(1);\n    } else {\n      stopAutoReader();\n    }\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = delta => {\n    setAutoReaderState(prev => {\n      const newSpeed = Math.max(100, Math.min(1000, prev.speed + delta));\n\n      // 如果正在运行，需要重启以应用新速度\n      if (prev.intervalId) {\n        clearInterval(prev.intervalId);\n        const cursor = document.getElementById('auto-reader-cursor');\n        if (cursor && prev.charPositions.length > 0) {\n          const currentPos = prev.charPositions[prev.currentIndex];\n          cursor.style.left = `${currentPos.x - window.scrollX}px`;\n          cursor.style.top = `${currentPos.y - window.scrollY}px`;\n        }\n        return {\n          ...prev,\n          speed: newSpeed,\n          intervalId: null\n        };\n      }\n      return {\n        ...prev,\n        speed: newSpeed\n      };\n    });\n\n    // 如果正在运行，重新启动自动阅读器\n    if (autoReaderState.intervalId) {\n      startAutoReader();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 974,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 973,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"upload-btn\",\n        children: [\"\\u9009\\u62E9\\u6587\\u4EF6\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".pdf,.txt\",\n          onChange: handleFileUpload,\n          style: {\n            display: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 978,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 976,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 972,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 988,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mode-selector\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: readingMode,\n              onChange: handleReadingModeChange,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"normal\",\n                children: \"\\u666E\\u901A\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 992,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"static\",\n                children: \"\\u9759\\u6001\\u9AD8\\u4EAE\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 993,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"follow-mouse\",\n                children: \"\\u9F20\\u6807\\u8DDF\\u968F\\u9AD8\\u4EAE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 994,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"auto-reader\",\n                children: \"\\u81EA\\u52A8\\u9605\\u8BFB\\u5668\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 995,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 991,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 990,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mode-selector\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: posMode,\n              onChange: e => setPosMode(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"none\",\n                children: \"\\u65E0\\u8BCD\\u6027\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1000,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"noun\",\n                children: \"\\u540D\\u8BCD\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1001,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"all\",\n                children: \"\\u5168\\u8BCD\\u6027\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1002,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 999,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 998,\n            columnNumber: 13\n          }, this), readingMode === 'auto-reader' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"speed-control\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => adjustSpeed(-100),\n              children: \"-\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1007,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [autoReaderState.speed, \"ms\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1008,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => adjustSpeed(100),\n              children: \"+\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1009,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1006,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 989,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 987,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-content\",\n        children: content ? /*#__PURE__*/_jsxDEV(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: content\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1016,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-state\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u8BF7\\u4E0A\\u4F20PDF\\u6216TXT\\u6587\\u4EF6\\u5F00\\u59CB\\u9605\\u8BFB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1019,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1018,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1014,\n        columnNumber: 9\n      }, this), content && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"page-btn prev\",\n          onClick: () => changePage(-1),\n          disabled: currentPage === 1,\n          children: \"\\u4E0A\\u4E00\\u9875\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1025,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"page-info\",\n          children: [\"\\u7B2C \", currentPage, \" \\u9875 / \\u5171 \", totalPages, \" \\u9875\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1028,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"page-btn next\",\n          onClick: () => changePage(1),\n          disabled: currentPage === totalPages,\n          children: \"\\u4E0B\\u4E00\\u9875\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1031,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1024,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 986,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 971,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"FdIIE1mY5AAmB921foSmrxDLqNQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","pdfjsLib","pdfjsViewer","marked","pdfjs","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","tagPartsOfSpeech","text","punctuationMarks","segments","split","RegExp","map","mark","join","result","colorIndex","currentText","forEach","segment","index","test","isPunctuation","includes","color","App","_s","pages","setPages","currentPage","setCurrentPage","totalPages","setTotalPages","fileName","setFileName","loading","setLoading","fileRef","file","setFile","pdfInstance","setPdfInstance","extractedTextPages","setExtractedTextPages","readingMode","setReadingMode","posMode","setPosMode","markdownContent","setMarkdownContent","readerContainerRef","autoReadGuideRef","autoReadIntervalRef","content","setContent","pdfDocument","setPdfDocument","autoReaderState","setAutoReaderState","currentIndex","charPositions","intervalId","speed","pageContainer","isUserScrolling","scrollTimeout","contentLoaded","current","clearInterval","setTimeout","initializeMouseFollow","handlePdfFile","fileURL","URL","createObjectURL","loadingTask","getDocument","pdf","promise","numPages","extractAndProcessPage","console","log","error","alert","pageNum","page","getPage","textContent","getTextContent","viewport","getViewport","scale","isTableOfContents","detectIfTocPage","processTocPage","processContentPage","addMouseFollowListeners","textItems","items","fullText","item","str","hasTocKeywords","hasPageNumberPatterns","shortLinesCount","linesWithNumbersCount","lineMap","Map","yKey","Math","round","transform","has","set","get","push","lines","values","line","lineText","length","shortLineRatio","numberLineRatio","htmlContent","x","y","height","fontSize","sqrt","fontWeight","fontName","toLowerCase","spacedText","processTextWithHighlight","words","lastColor","word","random","mode","extractedText","replace","trim","processedContent","formatTextToHtml","applyStaticHighlight","formatTextForMouseFollow","handleTxtFile","pageTexts","paragraph","fontFamily","handleFileUpload","e","target","files","type","getAllCharacterPositions","container","rect","getBoundingClientRect","nodes","Array","from","querySelectorAll","flatMap","el","childNodes","filter","node","nodeType","Node","TEXT_NODE","char","i","range","Range","setStart","setEnd","charRect","left","window","scrollX","top","scrollY","pos","initializeAutoReader","stopAutoReader","document","querySelector","retryCount","collectPositions","positions","cursor","createElement","id","style","cssText","body","appendChild","prev","startAutoReader","move","handlePageEnd","getElementById","viewportY","innerHeight","scrollTo","behavior","animate","duration","easing","clearTimeout","remove","handleReadingModeChange","newMode","value","cleanupDOM","contentArea","innerHTML","offsetHeight","clearAllHighlights","removeMouseFollowListeners","paragraphs","p","cleanParagraph","highlightedText","highlights","cleanContent","cloneNode","parentNode","replaceChild","_highlightObserver","disconnect","newParagraph","className","removeAttribute","removeEventListener","handleMouseMove","mouseFollowContent","classList","getTextNodeAtPosition","element","createRange","selectNodeContents","rects","getClientRects","j","bottom","right","ELEMENT_NODE","found","mouseTarget","elementFromPoint","clientX","clientY","contains","tagName","targetParagraph","closest","textNode","targetRect","lineHighlight","paragraphRect","position","width","pointerEvents","backgroundColor","borderRadius","boxShadow","zIndex","transition","windowHeight","desiredPosition","currentPosition","scrollOffset","changePage","delta","newPage","fakeEvent","MouseEvent","innerWidth","bubbles","dispatchEvent","addEventListener","lineHeight","adjustSpeed","newSpeed","max","min","currentPos","children","_jsxFileName","lineNumber","columnNumber","accept","onChange","display","onClick","dangerouslySetInnerHTML","__html","disabled","_c","$RefreshReg$"],"sources":["D:/adhd-read-helper/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 模拟NLP词性标注功能（实际应用中建议使用专业NLP库如nlp.js或调用API）\nconst tagPartsOfSpeech = (text) => {\n  // 定义所有标点符号\n  const punctuationMarks = [\n    '，', '。', '！', '？', '；', '：', '（', '）', '【', '】', '《', '》', '〈', '〉', '…', '—', '～', '·',\n    ',', '.', '!', '?', ';', ':', '(', ')', '[', ']', '{', '}', '-', '...', '..'\n  ];\n  \n  // 将文本按标点符号分割，保留标点符号\n  const segments = text.split(new RegExp(`([${punctuationMarks.map(mark => '\\\\' + mark).join('')}])`));\n  let result = '';\n  let colorIndex = 0; // 0: 红色, 1: 蓝色, 2: 黑色\n  let currentText = '';\n  \n  segments.forEach((segment, index) => {\n    // 跳过空字符串和纯空格\n    if (!segment || /^\\s+$/.test(segment)) {\n      result += segment;\n      return;\n    }\n    \n    // 检查是否是标点符号\n    const isPunctuation = punctuationMarks.includes(segment);\n    \n    // 根据索引选择颜色\n    let color;\n    switch (colorIndex) {\n      case 0:\n        color = 'red';\n        break;\n      case 1:\n        color = 'blue';\n        break;\n      case 2:\n        color = 'black';\n        break;\n      default:\n        color = 'black';\n    }\n    \n    // 将当前文本和标点符号放在同一个颜色块中\n    if (isPunctuation) {\n      // 如果有累积的文本，先添加文本\n      if (currentText) {\n        result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n        currentText = '';\n      }\n      // 添加标点符号\n      result += `<span class=\"highlight-word ${color}\">${segment}</span>`;\n      // 切换颜色\n      colorIndex = (colorIndex + 1) % 3;\n    } else {\n      // 累积文本\n      currentText += segment;\n    }\n  });\n  \n  // 处理最后可能剩余的文本\n  if (currentText) {\n    const color = colorIndex === 0 ? 'red' : colorIndex === 1 ? 'blue' : 'black';\n    result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n  }\n  \n  return result;\n};\n\nconst App = () => {\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const autoReadGuideRef = useRef(null);\n  const autoReadIntervalRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  \n  // 新增自动阅读器状态\n  const [autoReaderState, setAutoReaderState] = useState({\n    currentIndex: 0,\n    charPositions: [],\n    intervalId: null,\n    speed: 300,\n    pageContainer: null,\n    isUserScrolling: false,\n    scrollTimeout: null,\n    contentLoaded: false\n  });\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n    \n    return () => {\n      // 清理自动阅读定时器\n      if (autoReadIntervalRef.current) {\n        clearInterval(autoReadIntervalRef.current);\n      }\n    };\n  }, []);\n  \n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async (file) => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      \n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n      \n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n      \n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n  \n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({ scale: 1.0 });\n      \n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      \n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      \n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async (textContent) => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n    \n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n    \n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n    \n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    \n    const lines = [...lineMap.values()];\n    \n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    \n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    \n    return hasTocKeywords || hasPageNumberPatterns || (shortLineRatio > 0.7 && numberLineRatio > 0.3);\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n    \n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    \n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n      \n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n      \n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n      \n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    \n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 修改文本处理函数，实现按完整词随机高亮\n  const processTextWithHighlight = (text) => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    \n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      \n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        \n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    \n    return result;\n  };\n\n  // 修改processContentPage函数\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      \n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch(mode) {\n        case 'normal':\n          // 普通模式 - 简单分段显示\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'static':\n          // 静态高亮模式 - 应用词性标注和颜色高亮\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'follow-mouse':\n          // 鼠标跟随高亮模式 - 分段落但不预先高亮，由鼠标事件触发高亮\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      \n      setContent(processedContent);\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async (file) => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n    \n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain') {\n      handleTxtFile(file);\n    } else {\n      alert('请上传PDF或TXT文件');\n    }\n  };\n\n  // 修改字符位置采集逻辑\n  const getAllCharacterPositions = (container) => {\n    const rect = container.getBoundingClientRect();\n    const nodes = Array.from(container.querySelectorAll('*'))\n      .flatMap(el => [...el.childNodes])\n      .filter(node => node.nodeType === Node.TEXT_NODE);\n\n    return nodes.flatMap(node => {\n      return [...node.textContent].map((char, i) => {\n        const range = new Range();\n        range.setStart(node, i);\n        range.setEnd(node, i+1);\n        const charRect = range.getBoundingClientRect();\n        return {\n          x: charRect.left + window.scrollX,\n          y: charRect.top + window.scrollY,\n          char: char\n        };\n      });\n    }).filter(pos => pos.char.trim() !== '');\n  };\n\n  // 修改初始化函数\n  const initializeAutoReader = () => {\n    // 清理旧状态\n    stopAutoReader();\n    \n    // 1. 确保页面加载完成\n    if (!autoReaderState.contentLoaded) {\n      setTimeout(initializeAutoReader, 100);\n      return;\n    }\n\n    // 2. 获取容器（带备用选择器）\n    const container = document.querySelector('.page-content') || \n                     document.querySelector('.content-container');\n    \n    if (!container) {\n      console.error('自动阅读器初始化失败：未找到内容容器');\n      return;\n    }\n\n    // 3. 收集位置数据（带重试机制）\n    let retryCount = 0;\n    const collectPositions = () => {\n      const positions = getAllCharacterPositions(container);\n      if (positions.length === 0 && retryCount < 3) {\n        retryCount++;\n        setTimeout(collectPositions, 200);\n        return;\n      }\n\n      // 4. 创建可见光标\n      const cursor = document.createElement('div');\n      cursor.id = 'auto-reader-cursor';\n      cursor.style.cssText = `\n        width: 20px;\n        height: 20px;\n        background: #ff0000;\n        border-radius: 50%;\n        position: fixed;\n        transition: all 0.3s;\n        z-index: 9999;\n        pointer-events: none;\n        box-shadow: 0 0 10px red;\n      `;\n      document.body.appendChild(cursor);\n\n      setAutoReaderState(prev => ({\n        ...prev,\n        pageContainer: container,\n        charPositions: positions,\n        currentIndex: 0,\n        isUserScrolling: false\n      }));\n\n      // 5. 启动带保护的运动逻辑\n      if (positions.length > 0) {\n        startAutoReader();\n      } else {\n        console.error('自动阅读器初始化失败：无有效内容');\n      }\n    };\n\n    collectPositions();\n  };\n\n  // 修改自动阅读器启动函数\n  const startAutoReader = () => {\n    let index = 0;\n    const move = () => {\n      setAutoReaderState(prev => {\n        if (index >= prev.charPositions.length) {\n          handlePageEnd();\n          return prev;\n        }\n        \n        const pos = prev.charPositions[index];\n        const cursor = document.getElementById('auto-reader-cursor');\n        \n        if (!cursor) return prev;\n        \n        // 可视区域检测\n        const viewportY = pos.y - window.scrollY;\n        if (viewportY < 0 || viewportY > window.innerHeight) {\n          window.scrollTo({\n            top: pos.y - window.innerHeight * 0.4,\n            behavior: 'smooth'\n          });\n        }\n        \n        // 更新位置（带缓动动画）\n        cursor.animate([\n          { transform: `translate(${pos.x}px, ${pos.y}px)` }\n        ], {\n          duration: prev.speed * 0.8,\n          easing: 'ease-in-out'\n        });\n        \n        index++;\n        return prev;\n      });\n      \n      setTimeout(move, autoReaderState.speed);\n    };\n    \n    move();\n  };\n\n  // 修改停止函数\n  const stopAutoReader = () => {\n    setAutoReaderState(prev => {\n      if (prev.intervalId) {\n        clearInterval(prev.intervalId);\n      }\n      if (prev.scrollTimeout) {\n        clearTimeout(prev.scrollTimeout);\n      }\n      \n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) cursor.remove();\n      \n      return {\n        ...prev,\n        intervalId: null,\n        currentIndex: 0,\n        isUserScrolling: false,\n        scrollTimeout: null\n      };\n    });\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async (e) => {\n    const newMode = e.target.value;\n    console.log(`切换阅读模式: ${readingMode} -> ${newMode}`);\n    \n    // 清理旧模式\n    cleanupDOM();\n    stopAutoReader();\n    \n    // 更新状态\n    setReadingMode(newMode);\n    \n    // 应用新模式\n    if (pdfDocument && currentPage > 0) {\n      try {\n        const page = await pdfDocument.getPage(currentPage);\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        let processedContent = '';\n        switch(newMode) {\n          case 'follow-mouse':\n            processedContent = formatTextForMouseFollow(extractedText);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlight(extractedText);\n            break;\n          case 'auto-reader':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          default:\n            processedContent = formatTextToHtml(extractedText);\n        }\n        \n        const contentArea = document.querySelector('.page-content');\n        if (contentArea) {\n          contentArea.textContent = '';\n          contentArea.innerHTML = processedContent;\n          \n          // 标记内容已加载\n          setAutoReaderState(prev => ({ ...prev, contentLoaded: true }));\n          \n          switch(newMode) {\n            case 'follow-mouse':\n              initializeMouseFollow();\n              break;\n            case 'auto-reader':\n              setTimeout(initializeAutoReader, 100);\n              break;\n            case 'static':\n              void contentArea.offsetHeight;\n              break;\n          }\n        }\n      } catch (error) {\n        console.error('应用新阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清除所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 在组件卸载时清除事件监听器\n  useEffect(() => {\n    return () => {\n      removeMouseFollowListeners();\n    };\n  }, []);\n\n  // 格式化文本为HTML\n  const formatTextToHtml = (text) => {\n    // 分段\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    // 创建HTML内容\n    let htmlContent = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      htmlContent += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 修改后的静态高亮应用函数\n  const applyStaticHighlight = (text) => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    let htmlContent = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      // 新增强制清理逻辑\n      const cleanParagraph = paragraph\n        .replace(/<span class=\"text-line\">/g, '')\n        .replace(/<\\/span>/g, '');\n      \n      const highlightedText = processTextWithHighlight(cleanParagraph);\n      htmlContent += `<p class=\"pdf-paragraph\">${highlightedText}</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 修改后的清理函数\n  const cleanupDOM = () => {\n    console.log('清理DOM元素和效果...');\n    \n    // 1. 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll(\n      '.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line'\n    );\n    highlights.forEach(el => el.remove());\n    \n    // 2. 移除事件监听器（增强版）\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 克隆内容区域以彻底移除所有事件监听器\n      const cleanContent = contentArea.cloneNode(false);\n      cleanContent.innerHTML = contentArea.innerHTML;\n      contentArea.parentNode.replaceChild(cleanContent, contentArea);\n      \n      // 清理MutationObserver\n      if (contentArea._highlightObserver) {\n        contentArea._highlightObserver.disconnect();\n        delete contentArea._highlightObserver;\n      }\n    }\n    \n    // 3. 重置段落结构（增强版）\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 创建新段落并保留基本结构\n      const newParagraph = document.createElement('p');\n      newParagraph.className = 'pdf-paragraph';\n      newParagraph.innerHTML = paragraph.innerHTML\n        .replace(/<span class=\"text-line\">/g, '')\n        .replace(/<\\/span>/g, '');\n      \n      // 移除特殊属性\n      newParagraph.removeAttribute('data-follow');\n      newParagraph.removeAttribute('style');\n      \n      if (paragraph.parentNode) {\n        paragraph.parentNode.replaceChild(newParagraph, paragraph);\n      }\n    });\n  };\n\n  // 移除鼠标跟随事件监听器\n  const removeMouseFollowListeners = () => {\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 移除所有事件监听器\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n      \n      // 移除MutationObserver\n      if (contentArea._highlightObserver) {\n        contentArea._highlightObserver.disconnect();\n        delete contentArea._highlightObserver;\n      }\n      \n      // 移除所有段落的鼠标事件监听器\n      const paragraphs = document.querySelectorAll('.pdf-paragraph');\n      paragraphs.forEach(paragraph => {\n        const newParagraph = paragraph.cloneNode(true);\n        if (paragraph.parentNode) {\n          paragraph.parentNode.replaceChild(newParagraph, paragraph);\n        }\n      });\n      \n      // 移除mouse-follow-content类\n      const mouseFollowContent = document.querySelector('.mouse-follow-content');\n      if (mouseFollowContent) {\n        mouseFollowContent.classList.remove('mouse-follow-content');\n      }\n    }\n  };\n\n  // 格式化文本用于鼠标跟随高亮模式\n  const formatTextForMouseFollow = (text) => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    let htmlContent = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      // 将段落分割成行\n      const lines = paragraph.split('\\n').filter(line => line.trim());\n      htmlContent += `<p class=\"pdf-paragraph\" data-follow=\"true\" style=\"position: relative; line-height: 1.5;\">`;\n      \n      lines.forEach((line, i) => {\n        // 每行用span包裹\n        htmlContent += `<span class=\"text-line\" style=\"display: block;\">${line}</span>`;\n      });\n      \n      htmlContent += `</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 辅助函数：获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && \n              x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = (e) => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    // 清除所有现有高亮\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n    \n    const mouseTarget = document.elementFromPoint(e.clientX, e.clientY);\n    \n    if (mouseTarget && \n       (mouseTarget.classList.contains('pdf-paragraph') || \n        mouseTarget.tagName === 'P' || \n        mouseTarget.tagName === 'SPAN')) {\n      \n      const targetParagraph = mouseTarget.closest('.pdf-paragraph');\n      if (!targetParagraph) return;\n      \n      // 获取段落文本节点\n      const textNode = getTextNodeAtPosition(targetParagraph, e.clientX, e.clientY);\n      if (!textNode) return;\n      \n      // 获取精确的行位置和尺寸\n      const range = document.createRange();\n      range.selectNodeContents(textNode);\n      const rects = range.getClientRects();\n      \n      // 找到鼠标所在的具体行\n      let targetRect = null;\n      for (let i = 0; i < rects.length; i++) {\n        const rect = rects[i];\n        if (e.clientY >= rect.top && e.clientY <= rect.bottom) {\n          targetRect = rect;\n          break;\n        }\n      }\n      \n      if (targetRect) {\n        // 创建高亮元素\n        const lineHighlight = document.createElement('div');\n        lineHighlight.className = 'line-highlight mouse-highlight';\n        \n        // 计算相对于段落的位置\n        const paragraphRect = targetParagraph.getBoundingClientRect();\n        const top = targetRect.top - paragraphRect.top;\n        const left = targetRect.left - paragraphRect.left;\n        \n        // 设置高亮样式\n        lineHighlight.style.position = 'absolute';\n        lineHighlight.style.left = `${left}px`;\n        lineHighlight.style.top = `${top}px`;\n        lineHighlight.style.width = `${targetRect.width}px`;\n        lineHighlight.style.height = `${targetRect.height}px`;\n        lineHighlight.style.pointerEvents = 'none';\n        lineHighlight.style.backgroundColor = 'rgba(255, 165, 0, 0.3)';\n        lineHighlight.style.borderRadius = '4px';\n        lineHighlight.style.boxShadow = '0 0 8px rgba(255, 165, 0, 0.5)';\n        lineHighlight.style.zIndex = '5';\n        lineHighlight.style.transition = 'all 0.1s ease';\n        \n        // 确保段落有相对定位\n        targetParagraph.style.position = 'relative';\n        targetParagraph.appendChild(lineHighlight);\n        \n        // 计算并滚动到居中位置\n        const windowHeight = window.innerHeight;\n        const desiredPosition = windowHeight / 2;\n        const currentPosition = targetRect.top;\n        const scrollOffset = currentPosition - desiredPosition;\n        \n        window.scrollTo({\n          top: window.scrollY + scrollOffset,\n          behavior: 'smooth'\n        });\n      }\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async (delta) => {\n    const newPage = currentPage + delta;\n    if (newPage >= 1 && newPage <= totalPages && pdfDocument) {\n      setCurrentPage(newPage);\n      \n      try {\n        const page = await pdfDocument.getPage(newPage);\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        let processedContent = '';\n        switch(readingMode) {\n          case 'follow-mouse':\n            processedContent = formatTextForMouseFollow(extractedText);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlight(extractedText);\n            break;\n          case 'auto-reader':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          default:\n            processedContent = formatTextToHtml(extractedText);\n        }\n        \n        const contentArea = document.querySelector('.page-content');\n        if (contentArea) {\n          contentArea.textContent = '';\n          contentArea.innerHTML = processedContent;\n          \n          // 根据当前模式重新初始化\n          switch(readingMode) {\n            case 'follow-mouse':\n              initializeMouseFollow();\n              break;\n            case 'auto-reader':\n              // 重置自动阅读器状态并重新初始化\n              setAutoReaderState(prev => ({ ...prev, currentIndex: 0 }));\n              setTimeout(initializeAutoReader, 50);\n              break;\n            case 'static':\n              void contentArea.offsetHeight;\n              break;\n          }\n        }\n      } catch (error) {\n        console.error('翻页处理出错:', error);\n      }\n    }\n  };\n\n  // 修改后的鼠标跟随初始化函数\n  const initializeMouseFollow = () => {\n    // 新增延迟补偿\n    setTimeout(() => {\n      addMouseFollowListeners();\n      \n      // 强制触发重排\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        void contentArea.offsetHeight;\n        \n        // 模拟鼠标移动事件\n        const fakeEvent = new MouseEvent('mousemove', {\n          clientX: window.innerWidth / 2,\n          clientY: window.innerHeight / 2,\n          bubbles: true\n        });\n        contentArea.dispatchEvent(fakeEvent);\n      }\n    }, 50);\n  };\n\n  // 添加鼠标跟随监听器\n  const addMouseFollowListeners = () => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    \n    // 清理旧的监听器\n    contentArea.removeEventListener('mousemove', handleMouseMove);\n    contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    \n    // 添加新的监听器\n    contentArea.addEventListener('mousemove', handleMouseMove);\n    contentArea.addEventListener('mouseleave', clearAllHighlights);\n    \n    // 确保所有段落都有正确的样式\n    document.querySelectorAll('.pdf-paragraph').forEach(p => {\n      p.style.position = 'relative';\n      p.style.lineHeight = '1.5';\n    });\n  };\n\n  // 处理页面末尾\n  const handlePageEnd = () => {\n    if (currentPage < totalPages) {\n      changePage(1);\n    } else {\n      stopAutoReader();\n    }\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = (delta) => {\n    setAutoReaderState(prev => {\n      const newSpeed = Math.max(100, Math.min(1000, prev.speed + delta));\n      \n      // 如果正在运行，需要重启以应用新速度\n      if (prev.intervalId) {\n        clearInterval(prev.intervalId);\n        const cursor = document.getElementById('auto-reader-cursor');\n        if (cursor && prev.charPositions.length > 0) {\n          const currentPos = prev.charPositions[prev.currentIndex];\n          cursor.style.left = `${currentPos.x - window.scrollX}px`;\n          cursor.style.top = `${currentPos.y - window.scrollY}px`;\n        }\n        \n        return {\n          ...prev,\n          speed: newSpeed,\n          intervalId: null\n        };\n      }\n      \n      return { ...prev, speed: newSpeed };\n    });\n    \n    // 如果正在运行，重新启动自动阅读器\n    if (autoReaderState.intervalId) {\n      startAutoReader();\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        <div className=\"logo\">\n          <h2>ADHD阅读助手</h2>\n        </div>\n        <label className=\"upload-btn\">\n          选择文件\n          <input\n            type=\"file\"\n            accept=\".pdf,.txt\"\n            onChange={handleFileUpload}\n            style={{ display: 'none' }}\n          />\n        </label>\n      </div>\n      <div className=\"main-content\">\n        <div className=\"header\">\n          <h1>ADHD阅读助手</h1>\n          <div className=\"controls\">\n            <div className=\"mode-selector\">\n              <select value={readingMode} onChange={handleReadingModeChange}>\n                <option value=\"normal\">普通模式</option>\n                <option value=\"static\">静态高亮模式</option>\n                <option value=\"follow-mouse\">鼠标跟随高亮</option>\n                <option value=\"auto-reader\">自动阅读器</option>\n              </select>\n            </div>\n            <div className=\"mode-selector\">\n              <select value={posMode} onChange={(e) => setPosMode(e.target.value)}>\n                <option value=\"none\">无词性标注</option>\n                <option value=\"noun\">名词标注</option>\n                <option value=\"all\">全词性标注</option>\n              </select>\n            </div>\n            {readingMode === 'auto-reader' && (\n              <div className=\"speed-control\">\n                <button onClick={() => adjustSpeed(-100)}>-</button>\n                <span>{autoReaderState.speed}ms</span>\n                <button onClick={() => adjustSpeed(100)}>+</button>\n              </div>\n            )}\n          </div>\n        </div>\n        <div className=\"page-content\">\n          {content ? (\n            <div dangerouslySetInnerHTML={{ __html: content }} />\n          ) : (\n            <div className=\"empty-state\">\n              <p>请上传PDF或TXT文件开始阅读</p>\n            </div>\n          )}\n        </div>\n        {content && (\n          <div className=\"nav-buttons\">\n            <button className=\"page-btn prev\" onClick={() => changePage(-1)} disabled={currentPage === 1}>\n              上一页\n            </button>\n            <span className=\"page-info\">\n              第 {currentPage} 页 / 共 {totalPages} 页\n            </span>\n            <button className=\"page-btn next\" onClick={() => changePage(1)} disabled={currentPage === totalPages}>\n              下一页\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}