{"ast":null,"code":"var _jsxFileName = \"D:\\\\adhd-read-helper\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 模拟NLP词性标注功能（实际应用中建议使用专业NLP库如nlp.js或调用API）\nconst tagPartsOfSpeech = text => {\n  // 定义所有标点符号\n  const punctuationMarks = ['，', '。', '！', '？', '；', '：', '（', '）', '【', '】', '《', '》', '〈', '〉', '…', '—', '～', '·', ',', '.', '!', '?', ';', ':', '(', ')', '[', ']', '{', '}', '-', '...', '..'];\n\n  // 将文本按标点符号分割，保留标点符号\n  const segments = text.split(new RegExp(`([${punctuationMarks.map(mark => '\\\\' + mark).join('')}])`));\n  let result = '';\n  let colorIndex = 0; // 0: 红色, 1: 蓝色, 2: 黑色\n  let currentText = '';\n  segments.forEach((segment, index) => {\n    // 跳过空字符串和纯空格\n    if (!segment || /^\\s+$/.test(segment)) {\n      result += segment;\n      return;\n    }\n\n    // 检查是否是标点符号\n    const isPunctuation = punctuationMarks.includes(segment);\n\n    // 根据索引选择颜色\n    let color;\n    switch (colorIndex) {\n      case 0:\n        color = 'red';\n        break;\n      case 1:\n        color = 'blue';\n        break;\n      case 2:\n        color = 'black';\n        break;\n      default:\n        color = 'black';\n    }\n\n    // 将当前文本和标点符号放在同一个颜色块中\n    if (isPunctuation) {\n      // 如果有累积的文本，先添加文本\n      if (currentText) {\n        result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n        currentText = '';\n      }\n      // 添加标点符号\n      result += `<span class=\"highlight-word ${color}\">${segment}</span>`;\n      // 切换颜色\n      colorIndex = (colorIndex + 1) % 3;\n    } else {\n      // 累积文本\n      currentText += segment;\n    }\n  });\n\n  // 处理最后可能剩余的文本\n  if (currentText) {\n    const color = colorIndex === 0 ? 'red' : colorIndex === 1 ? 'blue' : 'black';\n    result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n  }\n  return result;\n};\nconst App = () => {\n  _s();\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const autoReadGuideRef = useRef(null);\n  const autoReadIntervalRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n    return () => {\n      // 清理自动阅读定时器\n      if (autoReadIntervalRef.current) {\n        clearInterval(autoReadIntervalRef.current);\n      }\n    };\n  }, []);\n\n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'auto-guide') {\n      startAutoReadGuide();\n    } else if (autoReadIntervalRef.current) {\n      clearInterval(autoReadIntervalRef.current);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async file => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n\n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n\n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n\n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({\n        scale: 1.0\n      });\n\n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async textContent => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n\n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n\n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n\n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    const lines = [...lineMap.values()];\n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    return hasTocKeywords || hasPageNumberPatterns || shortLineRatio > 0.7 && numberLineRatio > 0.3;\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n\n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n\n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n\n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n\n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 修改文本处理函数，实现按完整词随机高亮\n  const processTextWithHighlight = text => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？.!?]+)/);\n    let result = '';\n    let lastColor = null; // 记录上一个高亮颜色\n\n    words.forEach(word => {\n      // 跳过空字符串和纯空格\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n\n      // 增加高亮概率到60%\n      if (Math.random() < 0.6) {\n        // 确保相邻高亮词颜色不同\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          // 第一次高亮时随机选择颜色\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    return result;\n  };\n\n  // 修改processContentPage函数\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({\n        scale: 1.0\n      });\n\n      // 生成HTML内容\n      let htmlContent = '<div class=\"pdf-content\">';\n\n      // 将文本项按视觉顺序排列（从上到下，从左到右）\n      const sortedItems = [...textContent.items].sort((a, b) => {\n        if (Math.abs(b.transform[5] - a.transform[5]) < 5) {\n          return a.transform[4] - b.transform[4];\n        }\n        return b.transform[5] - a.transform[5];\n      });\n\n      // 构建完整文本\n      let fullText = sortedItems.map(item => item.str).join('');\n\n      // 使用正则表达式按句号（和其他句尾标点）分割文本成段落\n      const sentenceRegex = /([^。！？.!?]+[。！？.!?])/g;\n      const sentences = fullText.match(sentenceRegex) || [fullText];\n\n      // 处理每个句子\n      sentences.forEach(sentence => {\n        // 根据阅读模式处理文本\n        let processedText = sentence;\n        if (mode === 'static') {\n          // 高亮静息模式：应用颜色高亮\n          processedText = tagPartsOfSpeech(sentence);\n        } else if (mode === 'follow-mouse') {\n          // 鼠标跟随模式：应用ADHD友好的字间距\n          processedText = sentence.split('').join('\\u200A');\n        }\n        // 普通模式：保持原始文本\n\n        // 添加段落，设置首行缩进\n        htmlContent += `<p class=\"pdf-paragraph\">${processedText}</p>`;\n      });\n      htmlContent += '</div>';\n      setContent(htmlContent);\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async file => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain') {\n      handleTxtFile(file);\n    } else {\n      alert('请上传PDF或TXT文件');\n    }\n  };\n\n  // 翻页函数\n  const changePage = async delta => {\n    const newPage = currentPage + delta;\n    if (newPage >= 1 && newPage <= totalPages && pdfDocument) {\n      setCurrentPage(newPage);\n      await extractAndProcessPage(pdfDocument, newPage);\n    }\n  };\n\n  // 设置鼠标跟随高亮\n  const setupMouseFollowHighlight = () => {\n    const pageContent = document.querySelector('.pdf-content');\n    if (!pageContent) return;\n    pageContent.addEventListener('mousemove', e => {\n      if (readingMode !== 'follow-mouse') return;\n\n      // 清除之前的高亮\n      const prevHighlighted = pageContent.querySelectorAll('.reading-line');\n      prevHighlighted.forEach(el => el.classList.remove('reading-line'));\n\n      // 获取鼠标所在的行\n      const lines = pageContent.querySelectorAll('.text-line');\n      lines.forEach(line => {\n        const rect = line.getBoundingClientRect();\n        if (e.clientY >= rect.top && e.clientY <= rect.bottom) {\n          line.classList.add('reading-line');\n        }\n      });\n    });\n  };\n\n  // 自动阅读引导\n  const startAutoReadGuide = () => {\n    if (autoReadIntervalRef.current) {\n      clearInterval(autoReadIntervalRef.current);\n    }\n\n    // 创建阅读指示点\n    if (!autoReadGuideRef.current) {\n      const guide = document.createElement('div');\n      guide.className = 'auto-read-guide';\n      document.querySelector('.page-content').appendChild(guide);\n      autoReadGuideRef.current = guide;\n    }\n\n    // 获取页面内所有段落\n    const paragraphs = document.querySelectorAll('.page-content p');\n    if (!paragraphs.length) return;\n    let currentParagraphIndex = 0;\n    let currentCharIndex = 0;\n    autoReadIntervalRef.current = setInterval(() => {\n      if (currentParagraphIndex >= paragraphs.length) {\n        clearInterval(autoReadIntervalRef.current);\n        return;\n      }\n      const paragraph = paragraphs[currentParagraphIndex];\n      const text = paragraph.textContent;\n      if (currentCharIndex >= text.length) {\n        currentParagraphIndex++;\n        currentCharIndex = 0;\n        return;\n      }\n\n      // 计算当前字符位置\n      const range = document.createRange();\n      const textNode = paragraph.firstChild;\n      if (textNode && textNode.nodeType === Node.TEXT_NODE) {\n        range.setStart(textNode, Math.min(currentCharIndex, textNode.length));\n        range.setStart(textNode, Math.min(currentCharIndex, textNode.length));\n        const rect = range.getBoundingClientRect();\n\n        // 更新指示点位置\n        if (autoReadGuideRef.current) {\n          const guide = autoReadGuideRef.current;\n          guide.style.left = `${rect.left}px`;\n          guide.style.top = `${rect.bottom + 5}px`;\n\n          // 闪烁效果\n          guide.style.opacity = 1;\n          setTimeout(() => {\n            guide.style.opacity = 0.5;\n          }, 100);\n        }\n      }\n      currentCharIndex += 1;\n    }, 200); // 每秒5个字符的速度\n  };\n\n  // 处理阅读模式切换\n  const handleReadingModeChange = e => {\n    const mode = e.target.value;\n    setReadingMode(mode);\n\n    // 获取当前页面内容\n    const pageContent = document.querySelector('.pdf-content');\n    if (!pageContent) return;\n\n    // 获取所有段落\n    const paragraphs = pageContent.querySelectorAll('.pdf-paragraph');\n\n    // 根据模式处理每个段落\n    paragraphs.forEach(paragraph => {\n      const originalText = paragraph.textContent;\n      if (mode === 'static') {\n        // 高亮静息模式：应用颜色高亮\n        paragraph.innerHTML = tagPartsOfSpeech(originalText);\n      } else if (mode === 'follow-mouse') {\n        // 鼠标跟随模式：保持原始文本，添加字间距\n        paragraph.innerHTML = originalText.split('').join('\\u200A');\n        // 延迟设置鼠标跟随高亮\n        setTimeout(() => {\n          setupMouseFollowHighlight();\n        }, 100);\n      } else {\n        // 普通模式：保持原始文本\n        paragraph.innerHTML = originalText;\n      }\n    });\n  };\n  useEffect(() => {\n    // 当阅读模式为follow-mouse时，设置鼠标跟随高亮\n    if (readingMode === 'follow-mouse' && content) {\n      setTimeout(setupMouseFollowHighlight, 100);\n    }\n  }, [readingMode, content]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"ADHD \\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"file-upload\",\n        accept: \".pdf,.txt\",\n        onChange: handleFileUpload,\n        style: {\n          display: 'none'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file-upload\",\n        className: \"upload-btn\",\n        children: \"\\u9009\\u62E9\\u6587\\u4EF6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: fileName || '《PDF阅读器》'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mode-selector\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: readingMode,\n              onChange: handleReadingModeChange,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"normal\",\n                children: \"\\u666E\\u901A\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 524,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"static\",\n                children: \"\\u9AD8\\u4EAE\\u9759\\u6001\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 525,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"follow\",\n                children: \"\\u9F20\\u6807\\u8DDF\\u968F\\u9AD8\\u4EAE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 526,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 523,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 522,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pos-selector\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: posMode,\n              onChange: e => setPosMode(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"none\",\n                children: \"\\u65E0\\u8BCD\\u6027\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 531,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"noun\",\n                children: \"\\u540D\\u8BCD\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 532,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"all\",\n                children: \"\\u5168\\u8BCD\\u6027\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 533,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 530,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 529,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-content\",\n        children: content ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pdf-content\",\n          ref: contentRef,\n          children: processedContent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 541,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-state\",\n          children: \"\\u8BF7\\u4E0A\\u4F20PDF\\u6216TXT\\u6587\\u4EF6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 9\n      }, this), content && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"page-btn prev\",\n          onClick: () => changePage(-1),\n          disabled: currentPage <= 1,\n          \"aria-label\": \"\\u4E0A\\u4E00\\u9875\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"page-info\",\n          children: [\"\\u7B2C \", currentPage, \" / \", totalPages, \" \\u9875\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"page-btn next\",\n          onClick: () => changePage(1),\n          disabled: currentPage >= totalPages,\n          \"aria-label\": \"\\u4E0B\\u4E00\\u9875\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 518,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 501,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"h5JipuZG13btp4lKlvCy8zJdNPI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","pdfjsLib","pdfjsViewer","marked","pdfjs","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","tagPartsOfSpeech","text","punctuationMarks","segments","split","RegExp","map","mark","join","result","colorIndex","currentText","forEach","segment","index","test","isPunctuation","includes","color","App","_s","pages","setPages","currentPage","setCurrentPage","totalPages","setTotalPages","fileName","setFileName","loading","setLoading","fileRef","file","setFile","pdfInstance","setPdfInstance","extractedTextPages","setExtractedTextPages","readingMode","setReadingMode","posMode","setPosMode","markdownContent","setMarkdownContent","readerContainerRef","autoReadGuideRef","autoReadIntervalRef","content","setContent","pdfDocument","setPdfDocument","current","clearInterval","startAutoReadGuide","handlePdfFile","fileURL","URL","createObjectURL","loadingTask","getDocument","pdf","promise","numPages","extractAndProcessPage","console","log","error","alert","pageNum","page","getPage","textContent","getTextContent","viewport","getViewport","scale","isTableOfContents","detectIfTocPage","processTocPage","processContentPage","textItems","items","fullText","item","str","hasTocKeywords","hasPageNumberPatterns","shortLinesCount","linesWithNumbersCount","lineMap","Map","yKey","Math","round","transform","has","set","get","push","lines","values","line","lineText","length","shortLineRatio","numberLineRatio","htmlContent","x","y","height","fontSize","sqrt","fontWeight","fontName","toLowerCase","spacedText","processTextWithHighlight","words","lastColor","word","random","mode","sortedItems","sort","a","b","abs","sentenceRegex","sentences","match","sentence","processedText","handleTxtFile","pageTexts","paragraph","fontFamily","handleFileUpload","e","target","files","type","changePage","delta","newPage","setupMouseFollowHighlight","pageContent","document","querySelector","addEventListener","prevHighlighted","querySelectorAll","el","classList","remove","rect","getBoundingClientRect","clientY","top","bottom","add","guide","createElement","className","appendChild","paragraphs","currentParagraphIndex","currentCharIndex","setInterval","range","createRange","textNode","firstChild","nodeType","Node","TEXT_NODE","setStart","min","style","left","opacity","setTimeout","handleReadingModeChange","value","originalText","innerHTML","children","_jsxFileName","lineNumber","columnNumber","id","accept","onChange","display","htmlFor","ref","contentRef","processedContent","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/adhd-read-helper/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 模拟NLP词性标注功能（实际应用中建议使用专业NLP库如nlp.js或调用API）\nconst tagPartsOfSpeech = (text) => {\n  // 定义所有标点符号\n  const punctuationMarks = [\n    '，', '。', '！', '？', '；', '：', '（', '）', '【', '】', '《', '》', '〈', '〉', '…', '—', '～', '·',\n    ',', '.', '!', '?', ';', ':', '(', ')', '[', ']', '{', '}', '-', '...', '..'\n  ];\n  \n  // 将文本按标点符号分割，保留标点符号\n  const segments = text.split(new RegExp(`([${punctuationMarks.map(mark => '\\\\' + mark).join('')}])`));\n  let result = '';\n  let colorIndex = 0; // 0: 红色, 1: 蓝色, 2: 黑色\n  let currentText = '';\n  \n  segments.forEach((segment, index) => {\n    // 跳过空字符串和纯空格\n    if (!segment || /^\\s+$/.test(segment)) {\n      result += segment;\n      return;\n    }\n    \n    // 检查是否是标点符号\n    const isPunctuation = punctuationMarks.includes(segment);\n    \n    // 根据索引选择颜色\n    let color;\n    switch (colorIndex) {\n      case 0:\n        color = 'red';\n        break;\n      case 1:\n        color = 'blue';\n        break;\n      case 2:\n        color = 'black';\n        break;\n      default:\n        color = 'black';\n    }\n    \n    // 将当前文本和标点符号放在同一个颜色块中\n    if (isPunctuation) {\n      // 如果有累积的文本，先添加文本\n      if (currentText) {\n        result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n        currentText = '';\n      }\n      // 添加标点符号\n      result += `<span class=\"highlight-word ${color}\">${segment}</span>`;\n      // 切换颜色\n      colorIndex = (colorIndex + 1) % 3;\n    } else {\n      // 累积文本\n      currentText += segment;\n    }\n  });\n  \n  // 处理最后可能剩余的文本\n  if (currentText) {\n    const color = colorIndex === 0 ? 'red' : colorIndex === 1 ? 'blue' : 'black';\n    result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n  }\n  \n  return result;\n};\n\nconst App = () => {\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const autoReadGuideRef = useRef(null);\n  const autoReadIntervalRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n    \n    return () => {\n      // 清理自动阅读定时器\n      if (autoReadIntervalRef.current) {\n        clearInterval(autoReadIntervalRef.current);\n      }\n    };\n  }, []);\n  \n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'auto-guide') {\n      startAutoReadGuide();\n    } else if (autoReadIntervalRef.current) {\n      clearInterval(autoReadIntervalRef.current);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async (file) => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      \n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n      \n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n      \n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n  \n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({ scale: 1.0 });\n      \n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      \n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async (textContent) => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n    \n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n    \n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n    \n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    \n    const lines = [...lineMap.values()];\n    \n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    \n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    \n    return hasTocKeywords || hasPageNumberPatterns || (shortLineRatio > 0.7 && numberLineRatio > 0.3);\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n    \n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    \n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n      \n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n      \n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n      \n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    \n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 修改文本处理函数，实现按完整词随机高亮\n  const processTextWithHighlight = (text) => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？.!?]+)/);\n    let result = '';\n    let lastColor = null; // 记录上一个高亮颜色\n    \n    words.forEach(word => {\n      // 跳过空字符串和纯空格\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      \n      // 增加高亮概率到60%\n      if (Math.random() < 0.6) {\n        // 确保相邻高亮词颜色不同\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          // 第一次高亮时随机选择颜色\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        \n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    \n    return result;\n  };\n\n  // 修改processContentPage函数\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({ scale: 1.0 });\n      \n      // 生成HTML内容\n      let htmlContent = '<div class=\"pdf-content\">';\n      \n      // 将文本项按视觉顺序排列（从上到下，从左到右）\n      const sortedItems = [...textContent.items].sort((a, b) => {\n        if (Math.abs(b.transform[5] - a.transform[5]) < 5) {\n          return a.transform[4] - b.transform[4];\n        }\n        return b.transform[5] - a.transform[5];\n      });\n      \n      // 构建完整文本\n      let fullText = sortedItems.map(item => item.str).join('');\n      \n      // 使用正则表达式按句号（和其他句尾标点）分割文本成段落\n      const sentenceRegex = /([^。！？.!?]+[。！？.!?])/g;\n      const sentences = fullText.match(sentenceRegex) || [fullText];\n      \n      // 处理每个句子\n      sentences.forEach(sentence => {\n        // 根据阅读模式处理文本\n        let processedText = sentence;\n        if (mode === 'static') {\n          // 高亮静息模式：应用颜色高亮\n          processedText = tagPartsOfSpeech(sentence);\n        } else if (mode === 'follow-mouse') {\n          // 鼠标跟随模式：应用ADHD友好的字间距\n          processedText = sentence.split('').join('\\u200A');\n        }\n        // 普通模式：保持原始文本\n        \n        // 添加段落，设置首行缩进\n        htmlContent += `<p class=\"pdf-paragraph\">${processedText}</p>`;\n      });\n      \n      htmlContent += '</div>';\n      setContent(htmlContent);\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async (file) => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n    \n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain') {\n      handleTxtFile(file);\n    } else {\n      alert('请上传PDF或TXT文件');\n    }\n  };\n\n  // 翻页函数\n  const changePage = async (delta) => {\n    const newPage = currentPage + delta;\n    if (newPage >= 1 && newPage <= totalPages && pdfDocument) {\n      setCurrentPage(newPage);\n      await extractAndProcessPage(pdfDocument, newPage);\n    }\n  };\n\n  // 设置鼠标跟随高亮\n  const setupMouseFollowHighlight = () => {\n    const pageContent = document.querySelector('.pdf-content');\n    if (!pageContent) return;\n    \n    pageContent.addEventListener('mousemove', (e) => {\n      if (readingMode !== 'follow-mouse') return;\n      \n      // 清除之前的高亮\n      const prevHighlighted = pageContent.querySelectorAll('.reading-line');\n      prevHighlighted.forEach(el => el.classList.remove('reading-line'));\n      \n      // 获取鼠标所在的行\n      const lines = pageContent.querySelectorAll('.text-line');\n      lines.forEach(line => {\n        const rect = line.getBoundingClientRect();\n        if (e.clientY >= rect.top && e.clientY <= rect.bottom) {\n          line.classList.add('reading-line');\n        }\n      });\n    });\n  };\n  \n  // 自动阅读引导\n  const startAutoReadGuide = () => {\n    if (autoReadIntervalRef.current) {\n      clearInterval(autoReadIntervalRef.current);\n    }\n    \n    // 创建阅读指示点\n    if (!autoReadGuideRef.current) {\n      const guide = document.createElement('div');\n      guide.className = 'auto-read-guide';\n      document.querySelector('.page-content').appendChild(guide);\n      autoReadGuideRef.current = guide;\n    }\n    \n    // 获取页面内所有段落\n    const paragraphs = document.querySelectorAll('.page-content p');\n    if (!paragraphs.length) return;\n    \n    let currentParagraphIndex = 0;\n    let currentCharIndex = 0;\n    \n    autoReadIntervalRef.current = setInterval(() => {\n      if (currentParagraphIndex >= paragraphs.length) {\n        clearInterval(autoReadIntervalRef.current);\n        return;\n      }\n      \n      const paragraph = paragraphs[currentParagraphIndex];\n      const text = paragraph.textContent;\n      \n      if (currentCharIndex >= text.length) {\n        currentParagraphIndex++;\n        currentCharIndex = 0;\n        return;\n      }\n      \n      // 计算当前字符位置\n      const range = document.createRange();\n      const textNode = paragraph.firstChild;\n      \n      if (textNode && textNode.nodeType === Node.TEXT_NODE) {\n        range.setStart(textNode, Math.min(currentCharIndex, textNode.length));\n        range.setStart(textNode, Math.min(currentCharIndex, textNode.length));\n        \n        const rect = range.getBoundingClientRect();\n        \n        // 更新指示点位置\n        if (autoReadGuideRef.current) {\n          const guide = autoReadGuideRef.current;\n          guide.style.left = `${rect.left}px`;\n          guide.style.top = `${rect.bottom + 5}px`;\n          \n          // 闪烁效果\n          guide.style.opacity = 1;\n          setTimeout(() => {\n            guide.style.opacity = 0.5;\n          }, 100);\n        }\n      }\n      \n      currentCharIndex += 1;\n    }, 200); // 每秒5个字符的速度\n  };\n  \n  // 处理阅读模式切换\n  const handleReadingModeChange = (e) => {\n    const mode = e.target.value;\n    setReadingMode(mode);\n    \n    // 获取当前页面内容\n    const pageContent = document.querySelector('.pdf-content');\n    if (!pageContent) return;\n    \n    // 获取所有段落\n    const paragraphs = pageContent.querySelectorAll('.pdf-paragraph');\n    \n    // 根据模式处理每个段落\n    paragraphs.forEach(paragraph => {\n      const originalText = paragraph.textContent;\n      \n      if (mode === 'static') {\n        // 高亮静息模式：应用颜色高亮\n        paragraph.innerHTML = tagPartsOfSpeech(originalText);\n      } else if (mode === 'follow-mouse') {\n        // 鼠标跟随模式：保持原始文本，添加字间距\n        paragraph.innerHTML = originalText.split('').join('\\u200A');\n        // 延迟设置鼠标跟随高亮\n        setTimeout(() => {\n          setupMouseFollowHighlight();\n        }, 100);\n      } else {\n        // 普通模式：保持原始文本\n        paragraph.innerHTML = originalText;\n      }\n    });\n  };\n\n  useEffect(() => {\n    // 当阅读模式为follow-mouse时，设置鼠标跟随高亮\n    if (readingMode === 'follow-mouse' && content) {\n      setTimeout(setupMouseFollowHighlight, 100);\n    }\n  }, [readingMode, content]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        <div className=\"logo\">\n          <h2>ADHD 阅读助手</h2>\n        </div>\n        <input\n          type=\"file\"\n          id=\"file-upload\"\n          accept=\".pdf,.txt\"\n          onChange={handleFileUpload}\n          style={{ display: 'none' }}\n        />\n        <label htmlFor=\"file-upload\" className=\"upload-btn\">\n          选择文件\n        </label>\n      </div>\n\n      <div className=\"main-content\">\n        <div className=\"header\">\n          <h1>{fileName || '《PDF阅读器》'}</h1>\n          <div className=\"controls\">\n            <div className=\"mode-selector\">\n              <select value={readingMode} onChange={handleReadingModeChange}>\n                <option value=\"normal\">普通模式</option>\n                <option value=\"static\">高亮静态模式</option>\n                <option value=\"follow\">鼠标跟随高亮</option>\n              </select>\n            </div>\n            <div className=\"pos-selector\">\n              <select value={posMode} onChange={(e) => setPosMode(e.target.value)}>\n                <option value=\"none\">无词性标注</option>\n                <option value=\"noun\">名词标注</option>\n                <option value=\"all\">全词性标注</option>\n              </select>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"page-content\">\n          {content ? (\n            <div className=\"pdf-content\" ref={contentRef}>\n              {processedContent}\n            </div>\n          ) : (\n            <div className=\"empty-state\">\n              请上传PDF或TXT文件\n            </div>\n          )}\n        </div>\n\n        {content && (\n          <div className=\"nav-buttons\">\n            <button \n              className=\"page-btn prev\" \n              onClick={() => changePage(-1)} \n              disabled={currentPage <= 1}\n              aria-label=\"上一页\"\n            ></button>\n            <div className=\"page-info\">\n              第 {currentPage} / {totalPages} 页\n            </div>\n            <button \n              className=\"page-btn next\" \n              onClick={() => changePage(1)} \n              disabled={currentPage >= totalPages}\n              aria-label=\"下一页\"\n            ></button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}