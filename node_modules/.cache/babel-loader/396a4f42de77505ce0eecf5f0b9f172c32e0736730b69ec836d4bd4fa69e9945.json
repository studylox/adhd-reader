{"ast":null,"code":"var _jsxFileName = \"D:\\\\adhd-read-helper\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 添加全局事件跟踪对象\nwindow.eventTracker = window.eventTracker || {\n  mouseFollowHandlers: []\n};\n\n// 自动阅读器全局对象\nwindow.autoReader = {\n  charPositions: [],\n  intervalId: null,\n  currentIndex: 0,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false,\n  cleanup: null\n};\n\n// 添加新的节奏阅读模式代码\n// 全局变量，确保在页面切换后仍然保持状态\nwindow.rhythmReaderGlobal = window.rhythmReaderGlobal || {\n  active: false,\n  speed: 300\n};\n\n// 节奏阅读模式 - 确保手动翻页后也能自动恢复\n(function () {\n  console.log(\"正在初始化节奏阅读模式...\");\n\n  // 确保只初始化一次\n  if (window.rhythmReadingInitialized) {\n    console.log(\"节奏阅读模式已经初始化过，跳过\");\n    return;\n  }\n  window.rhythmReadingInitialized = true;\n\n  // 改进的存储函数，同时使用session和local storage提高可靠性\n  function setStorage(key, value) {\n    try {\n      sessionStorage.setItem(key, value);\n      localStorage.setItem(key, value);\n    } catch (e) {\n      console.error(\"无法写入存储\", e);\n    }\n  }\n  function getStorage(key) {\n    try {\n      // 优先使用sessionStorage，这样更适合单次会话\n      return sessionStorage.getItem(key) || localStorage.getItem(key);\n    } catch (e) {\n      console.error(\"无法读取存储\", e);\n      return null;\n    }\n  }\n\n  // 状态变量和功能对象\n  const rhythmReader = {\n    active: false,\n    intervalId: null,\n    speed: 300,\n    currentIndex: 0,\n    readIndices: new Set(),\n    charElements: [],\n    pageTransitionInProgress: false,\n    // 初始化文本节点\n    initializeTextNodes: function () {\n      console.log(\"【节奏阅读】初始化文本节点...\");\n\n      // 重置字符元素数组\n      this.charElements = [];\n\n      // 获取内容容器\n      const contentContainer = document.querySelector('.page-content');\n      if (!contentContainer) {\n        console.error(\"【节奏阅读】找不到内容容器\");\n        return false;\n      }\n\n      // 查找所有文本节点并处理\n      const textNodes = [];\n      this.findTextNodes(contentContainer, textNodes);\n      if (textNodes.length === 0) {\n        console.error(\"【节奏阅读】未找到文本节点\");\n        this.showNotification(\"无法启动节奏阅读：未找到文本内容\");\n        return false;\n      }\n      console.log(`【节奏阅读】找到 ${textNodes.length} 个文本节点`);\n\n      // 为每个文本节点创建字符span\n      textNodes.forEach(node => {\n        const text = node.nodeValue;\n        if (!text || text.trim() === '') return;\n\n        // 创建文档片段来存放字符span\n        const fragment = document.createDocumentFragment();\n\n        // 为每个字符创建span\n        for (let i = 0; i < text.length; i++) {\n          const char = text[i];\n          const span = document.createElement('span');\n          span.textContent = char;\n          span.className = 'rhythm-char';\n          span.dataset.rhythmIndex = this.charElements.length;\n\n          // 如果是空白字符，添加一个标志\n          if (char.trim() === '') {\n            span.dataset.whitespace = 'true';\n          }\n\n          // 保持原始样式，不设置背景\n          span.style.display = 'inline';\n          span.style.margin = '0';\n          span.style.padding = '0';\n          span.style.border = 'none';\n          span.style.backgroundColor = 'transparent';\n          fragment.appendChild(span);\n          this.charElements.push(span);\n        }\n\n        // 替换原始节点\n        if (node.parentNode) {\n          node.parentNode.replaceChild(fragment, node);\n        }\n      });\n      console.log(`【节奏阅读】总共创建了 ${this.charElements.length} 个字符span`);\n      return this.charElements.length > 0;\n    },\n    // 递归查找所有文本节点\n    findTextNodes: function (element, textNodes) {\n      // 处理子节点\n      for (let i = 0; i < element.childNodes.length; i++) {\n        const node = element.childNodes[i];\n\n        // 如果是文本节点且有内容\n        if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() !== '') {\n          textNodes.push(node);\n        }\n        // 如果是元素节点，递归处理\n        else if (node.nodeType === Node.ELEMENT_NODE) {\n          // 跳过读者UI元素\n          if (node.id === 'rhythm-speed-slider' || node.id === 'rhythm-notification' || node.className === 'rhythm-char') {\n            continue;\n          }\n          this.findTextNodes(node, textNodes);\n        }\n      }\n    },\n    // 更新文本颜色\n    updateTextColors: function () {\n      // 更新所有字符的颜色\n      this.charElements.forEach((span, index) => {\n        // 确定颜色\n        let color;\n        let fontWeight = 'inherit';\n        if (index === this.currentIndex) {\n          color = '#00aa00'; // 当前阅读的字 - 绿色\n          fontWeight = 'bold';\n        } else if (index === this.currentIndex + 1 || index === this.currentIndex + 2) {\n          color = '#aaaaaa'; // 接下来两个字 - 淡灰色\n        } else if (this.readIndices.has(index)) {\n          color = '#ffffff'; // 已读字符 - 白色（表示已读）\n        } else {\n          color = 'rgba(160, 160, 160, 0.25)'; // 未读字符 - 非常淡的灰色（可见但不明显）\n        }\n        span.style.color = color;\n        span.style.fontWeight = fontWeight;\n\n        // 确保没有背景\n        span.style.backgroundColor = 'transparent';\n        span.style.background = 'none';\n      });\n    },\n    // 移动到下一个字符\n    moveToNextChar: function () {\n      // 将当前字符标记为已读\n      this.readIndices.add(this.currentIndex);\n\n      // 移动到下一个非空白字符\n      do {\n        this.currentIndex++;\n\n        // 检查是否到达末尾\n        if (this.currentIndex >= this.charElements.length) {\n          console.log(\"【节奏阅读】已到达页尾，尝试翻页\");\n\n          // 尝试点击下一页按钮\n          if (!this.clickNextPageButton()) {\n            // 如果没有找到下一页按钮，完全停止阅读\n            this.stop();\n          }\n          return;\n        }\n      } while (this.currentIndex < this.charElements.length && this.charElements[this.currentIndex] && this.charElements[this.currentIndex].dataset.whitespace === 'true');\n\n      // 更新颜色\n      this.updateTextColors();\n\n      // 滚动到当前字符\n      this.scrollToCurrentChar();\n    },\n    // 滚动到当前字符\n    scrollToCurrentChar: function () {\n      const span = this.charElements[this.currentIndex];\n      if (!span) return;\n      const rect = span.getBoundingClientRect();\n      const contentContainer = document.querySelector('.page-content');\n\n      // 估计行高\n      const lineHeight = parseInt(window.getComputedStyle(span).lineHeight) || Math.max(20, rect.height * 1.5);\n\n      // 确定滚动容器\n      const isContainerScrollable = contentContainer && contentContainer.scrollHeight > contentContainer.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n      if (isContainerScrollable) {\n        // 容器滚动\n        const containerRect = contentContainer.getBoundingClientRect();\n        const relativeTop = rect.top - containerRect.top + contentContainer.scrollTop;\n        const visibleTop = contentContainer.scrollTop;\n        const visibleBottom = visibleTop + contentContainer.clientHeight;\n        if (relativeTop < visibleTop + lineHeight || relativeTop > visibleBottom - lineHeight) {\n          contentContainer.scrollBy({\n            top: lineHeight * 2 * (relativeTop > visibleBottom - lineHeight ? 1 : -1),\n            behavior: 'smooth'\n          });\n        }\n      } else {\n        // 窗口滚动\n        const viewportTop = window.scrollY;\n        const viewportBottom = viewportTop + window.innerHeight;\n        const absoluteTop = rect.top + window.scrollY;\n        if (absoluteTop < viewportTop + lineHeight || absoluteTop > viewportBottom - lineHeight) {\n          window.scrollBy({\n            top: lineHeight * 2 * (absoluteTop > viewportBottom - lineHeight ? 1 : -1),\n            behavior: 'smooth'\n          });\n        }\n      }\n    },\n    // 添加速度滑块\n    addSpeedSlider: function () {\n      let slider = document.getElementById('rhythm-speed-slider');\n      if (slider) slider.remove();\n      const container = document.createElement('div');\n      container.id = 'rhythm-speed-slider';\n      container.style.position = 'fixed';\n      container.style.top = '70px';\n      container.style.right = '20px';\n      container.style.backgroundColor = 'white';\n      container.style.padding = '10px';\n      container.style.borderRadius = '5px';\n      container.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';\n      container.style.zIndex = '10000';\n      container.style.display = 'flex';\n      container.style.alignItems = 'center';\n      container.style.maxWidth = '300px';\n      const label = document.createElement('label');\n      label.textContent = '速度: ';\n      label.style.marginRight = '8px';\n      container.appendChild(label);\n      const input = document.createElement('input');\n      input.type = 'range';\n      input.min = '50';\n      input.max = '1000';\n      input.step = '50';\n      input.value = this.speed;\n      input.style.width = '120px';\n      const valueDisplay = document.createElement('span');\n      valueDisplay.textContent = `${this.speed}ms`;\n      valueDisplay.style.marginLeft = '8px';\n      valueDisplay.style.minWidth = '60px';\n      const self = this;\n      input.addEventListener('input', function () {\n        const newSpeed = parseInt(this.value);\n        self.speed = newSpeed;\n        valueDisplay.textContent = `${newSpeed}ms`;\n        if (self.intervalId) {\n          clearInterval(self.intervalId);\n          self.intervalId = setInterval(() => self.moveToNextChar(), newSpeed);\n        }\n      });\n      container.appendChild(input);\n      container.appendChild(valueDisplay);\n      document.body.appendChild(container);\n    },\n    // 恢复原始文本\n    restoreOriginalText: function () {\n      // 获取所有已创建的字符span\n      const charSpans = document.querySelectorAll('.rhythm-char');\n\n      // 按父节点分组\n      const parentNodeMap = new Map();\n      charSpans.forEach(span => {\n        const parent = span.parentNode;\n        if (!parent) return;\n        if (!parentNodeMap.has(parent)) {\n          parentNodeMap.set(parent, []);\n        }\n        parentNodeMap.get(parent).push(span);\n      });\n\n      // 对每个父节点，将连续的字符span合并回文本节点\n      parentNodeMap.forEach((spans, parent) => {\n        if (spans.length === 0) return;\n\n        // 排序spans确保顺序正确\n        spans.sort((a, b) => {\n          const indexA = parseInt(a.dataset.rhythmIndex || '0');\n          const indexB = parseInt(b.dataset.rhythmIndex || '0');\n          return indexA - indexB;\n        });\n\n        // 根据连续性分组\n        const groups = [];\n        if (spans.length > 0) {\n          let currentGroup = [spans[0]];\n          for (let i = 1; i < spans.length; i++) {\n            const prevIndex = parseInt(spans[i - 1].dataset.rhythmIndex || '0');\n            const currentIndex = parseInt(spans[i].dataset.rhythmIndex || '0');\n            if (currentIndex === prevIndex + 1 && spans[i].previousSibling === spans[i - 1]) {\n              currentGroup.push(spans[i]);\n            } else {\n              groups.push(currentGroup);\n              currentGroup = [spans[i]];\n            }\n          }\n          groups.push(currentGroup);\n        }\n\n        // 对每个连续组替换为文本节点\n        groups.forEach(group => {\n          if (group.length === 0) return;\n          try {\n            const text = group.map(span => span.textContent).join('');\n            const textNode = document.createTextNode(text);\n\n            // 替换第一个span，然后移除其余的\n            if (group[0].parentNode === parent) {\n              parent.replaceChild(textNode, group[0]);\n              for (let i = 1; i < group.length; i++) {\n                if (group[i].parentNode === parent) {\n                  parent.removeChild(group[i]);\n                }\n              }\n            }\n          } catch (e) {\n            console.error(\"【节奏阅读】恢复文本时出错:\", e);\n          }\n        });\n      });\n\n      // 清除字符元素数组\n      this.charElements = [];\n    },\n    // 启动节奏阅读\n    start: function () {\n      console.log(\"【节奏阅读】启动中...\");\n\n      // 检查是否正在进行页面转换\n      if (this.pageTransitionInProgress) {\n        console.log(\"【节奏阅读】页面转换正在进行中，延迟启动\");\n        setTimeout(() => this.start(), 500);\n        return;\n      }\n\n      // 先停止已有的\n      this.stop(false);\n\n      // 设置为活动状态\n      this.active = true;\n      setStorage('rhythmReadingActive', 'true');\n\n      // 初始化文本\n      if (!this.initializeTextNodes()) {\n        console.error(\"【节奏阅读】无法初始化文本节点\");\n        return;\n      }\n\n      // 重要：始终从头开始阅读\n      this.currentIndex = 0;\n      this.readIndices.clear();\n\n      // 添加速度滑块\n      this.addSpeedSlider();\n\n      // 更新颜色\n      this.updateTextColors();\n\n      // 滚动到开始位置\n      this.scrollToCurrentChar();\n\n      // 设置阅读间隔\n      this.intervalId = setInterval(() => this.moveToNextChar(), this.speed);\n      console.log(\"【节奏阅读】成功启动\");\n\n      // 显示提示\n      this.showNotification(\"节奏阅读模式已启动\");\n\n      // 劫持翻页函数 - 重要步骤\n      this.hijackPageTurningFunctions();\n\n      // 设置页面导航事件监听\n      this.setupPageNavigationListeners();\n    },\n    // 停止节奏阅读\n    stop: function (showNotification = true) {\n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n      }\n      if (this.active) {\n        console.log(\"【节奏阅读】停止中...\");\n        this.active = false;\n\n        // 仅当不是因翻页而停止时才清除活动状态\n        if (!this.pageTransitionInProgress) {\n          setStorage('rhythmReadingActive', 'false');\n        }\n\n        // 恢复原始文本\n        this.restoreOriginalText();\n\n        // 移除速度滑块\n        const slider = document.getElementById('rhythm-speed-slider');\n        if (slider) slider.remove();\n        if (showNotification) {\n          this.showNotification(\"节奏阅读模式已停止\");\n        }\n      }\n    },\n    // 显示通知\n    showNotification: function (message) {\n      let notification = document.getElementById('rhythm-notification');\n      if (notification) notification.remove();\n      notification = document.createElement('div');\n      notification.id = 'rhythm-notification';\n      notification.textContent = message;\n      notification.style.position = 'fixed';\n      notification.style.top = '50%';\n      notification.style.left = '50%';\n      notification.style.transform = 'translate(-50%, -50%)';\n      notification.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';\n      notification.style.color = 'white';\n      notification.style.padding = '15px 25px';\n      notification.style.borderRadius = '5px';\n      notification.style.zIndex = '10001';\n      notification.style.fontSize = '18px';\n      document.body.appendChild(notification);\n\n      // 2秒后自动消失\n      setTimeout(() => {\n        if (notification && notification.parentNode) {\n          notification.parentNode.removeChild(notification);\n        }\n      }, 2000);\n    },\n    // 劫持页面翻转函数 - 改进版本\n    hijackPageTurningFunctions: function () {\n      if (typeof window.changePage === 'function' && !window._originalChangePage) {\n        console.log(\"【节奏阅读】劫持changePage函数\");\n        window._originalChangePage = window.changePage;\n        const self = this;\n        window.changePage = function (page) {\n          console.log(\"【节奏阅读】检测到changePage调用，参数:\", page);\n          const wasActive = self.active;\n          self.pageTransitionInProgress = true;\n          if (wasActive) {\n            self.stop(false);\n            setStorage('rhythmReadingActive', 'true');\n            setStorage('rhythmReadingPending', 'true');\n            document.body.dataset.rhythmReadingActive = 'true';\n          }\n          try {\n            if (page === undefined || page === null) {\n              console.warn('【节奏阅读】安全处理：page参数为空');\n              page = {};\n            }\n            if (typeof page === 'object' && !page.something) {\n              console.log('【节奏阅读】添加空的something对象防止错误');\n              page.something = {\n                active: false\n              };\n            }\n            window._originalChangePage(page);\n          } catch (err) {\n            console.error(\"【节奏阅读】翻页函数执行出错:\", err);\n            self.clickNextPageButton();\n          }\n          setTimeout(() => {\n            self.pageTransitionInProgress = false;\n            if (wasActive && getStorage('rhythmReadingPending') === 'true') {\n              setStorage('rhythmReadingPending', 'false');\n              console.log(\"【节奏阅读】翻页后重新启动\");\n              setTimeout(() => self.start(), 500);\n            }\n          }, 1000);\n        };\n      }\n    },\n    // 设置页面导航事件监听 - 加强版\n    setupPageNavigationListeners: function () {\n      // 查找所有可能的翻页按钮\n      console.log(\"【节奏阅读】正在设置页面导航监听\");\n      const self = this;\n\n      // 使用事件委托来捕获所有可能的点击\n      document.addEventListener('click', function (e) {\n        // 检查点击的元素是否可能是翻页按钮\n        let target = e.target;\n        while (target && target !== document.body) {\n          // 检查是否是翻页元素\n          if (target.tagName === 'BUTTON' || target.tagName === 'A' || target.getAttribute('role') === 'button') {\n            const text = (target.textContent || '').trim().toLowerCase();\n            const ariaLabel = (target.getAttribute('aria-label') || '').toLowerCase();\n\n            // 检查是否是翻页元素\n            if (text.includes('上一页') || text.includes('下一页') || text.includes('prev') || text.includes('next') || ariaLabel.includes('page') || ariaLabel.includes('页') || text === '<' || text === '>' || text === '←' || text === '→') {\n              if (self.active) {\n                console.log(`【节奏阅读】检测到可能的翻页元素点击: ${text || ariaLabel}`);\n\n                // 标记页面转换开始\n                self.pageTransitionInProgress = true;\n\n                // 保存状态到存储\n                setStorage('rhythmReadingActive', 'true');\n                setStorage('rhythmReadingPending', 'true');\n                document.body.dataset.rhythmReadingActive = 'true';\n\n                // 停止当前的阅读\n                self.stop(false);\n\n                // 添加延迟执行的监听器，确保数据在页面加载后恢复\n                setTimeout(() => {\n                  self.pageTransitionInProgress = false;\n                  if (getStorage('rhythmReadingPending') === 'true') {\n                    setStorage('rhythmReadingPending', 'false');\n                    self.start();\n                  }\n                }, 1500);\n              }\n              break;\n            }\n          }\n          target = target.parentNode;\n        }\n      });\n\n      // 监听键盘导航事件\n      document.addEventListener('keydown', function (e) {\n        // 检查是否是翻页快捷键\n        if (['ArrowLeft', 'ArrowRight', 'PageUp', 'PageDown'].includes(e.key)) {\n          if (self.active) {\n            console.log(`【节奏阅读】检测到键盘翻页: ${e.key}`);\n\n            // 保存状态到存储\n            setStorage('rhythmReadingActive', 'true');\n            setStorage('rhythmReadingPending', 'true');\n\n            // 标记页面转换开始\n            self.pageTransitionInProgress = true;\n\n            // 停止当前的阅读\n            self.stop(false);\n\n            // 添加延迟执行的监听器\n            setTimeout(() => {\n              self.pageTransitionInProgress = false;\n              if (getStorage('rhythmReadingPending') === 'true') {\n                setStorage('rhythmReadingPending', 'false');\n                self.start();\n              }\n            }, 1500);\n          }\n        }\n      });\n\n      // 添加popstate监听器捕获浏览器前进/后退导航\n      window.addEventListener('popstate', function () {\n        if (self.active) {\n          console.log(\"【节奏阅读】检测到历史导航事件\");\n\n          // 保存状态\n          setStorage('rhythmReadingActive', 'true');\n          setStorage('rhythmReadingPending', 'true');\n\n          // 标记页面转换开始\n          self.pageTransitionInProgress = true;\n\n          // 停止当前阅读\n          self.stop(false);\n\n          // 延迟恢复\n          setTimeout(() => {\n            self.pageTransitionInProgress = false;\n            if (getStorage('rhythmReadingPending') === 'true') {\n              setStorage('rhythmReadingPending', 'false');\n              self.start();\n            }\n          }, 1500);\n        }\n      });\n    },\n    // 改进的自动翻页函数，更精确地处理状态保存\n    clickNextPageButton: function () {\n      console.log(\"【节奏阅读】尝试查找并点击下一页按钮\");\n\n      // 查找下一页按钮\n      const nextPageSelectors = ['button.next-page', 'button[aria-label=\"下一页\"]', 'a.next-page', 'a[aria-label=\"下一页\"]', '.next-page', '#next-page', 'button.next', 'a.next'];\n      let nextPageButton = null;\n\n      // 尝试通过选择器找到按钮\n      for (const selector of nextPageSelectors) {\n        try {\n          const elements = document.querySelectorAll(selector);\n          for (const el of elements) {\n            if (el.offsetParent !== null) {\n              // 检查元素是否可见\n              console.log(`【节奏阅读】找到下一页按钮: ${selector}`);\n              nextPageButton = el;\n              break;\n            }\n          }\n          if (nextPageButton) break;\n        } catch (e) {\n          // 某些选择器可能不被支持，忽略错误\n        }\n      }\n\n      // 如果没找到，尝试按文本内容查找\n      if (!nextPageButton) {\n        const buttons = document.querySelectorAll('button, a, div[role=\"button\"]');\n        for (const button of buttons) {\n          const text = button.textContent.trim().toLowerCase();\n          if ((text.includes('下一页') || text.includes('next') || text === '>' || text === '→') && button.offsetParent !== null) {\n            console.log(`【节奏阅读】通过文本内容找到下一页按钮: ${text}`);\n            nextPageButton = button;\n            break;\n          }\n        }\n      }\n      if (nextPageButton) {\n        console.log(\"【节奏阅读】模拟点击下一页按钮\");\n\n        // 明确标记页面转换开始\n        this.pageTransitionInProgress = true;\n\n        // 保存状态\n        setStorage('rhythmReadingActive', 'true');\n        setStorage('rhythmReadingPending', 'true');\n        document.body.dataset.rhythmReadingActive = 'true';\n\n        // 恢复原始文本\n        this.restoreOriginalText();\n\n        // 停止计时器\n        if (this.intervalId) {\n          clearInterval(this.intervalId);\n          this.intervalId = null;\n        }\n\n        // 模拟点击\n        nextPageButton.click();\n\n        // 延迟结束页面转换状态\n        setTimeout(() => {\n          this.pageTransitionInProgress = false;\n        }, 1000);\n        return true;\n      } else {\n        console.log(\"【节奏阅读】未找到下一页按钮\");\n        return false;\n      }\n    }\n  };\n\n  // 暴露到全局，以便调试和直接调用\n  window.rhythmReader = rhythmReader;\n\n  // 额外添加一个全局安全函数用于检查节奏阅读状态\n  window.isRhythmActive = function () {\n    return rhythmReader.active || getStorage('rhythmReadingActive') === 'true';\n  };\n\n  // 添加一个停止函数供外部安全调用\n  window.stopRhythmSafely = function () {\n    try {\n      setStorage('rhythmReadingActive', 'false');\n      setStorage('rhythmReadingPending', 'false');\n      if (rhythmReader && typeof rhythmReader.stop === 'function') {\n        rhythmReader.stop();\n      }\n    } catch (e) {\n      console.error(\"停止节奏阅读出错\", e);\n    }\n  };\n\n  // 设置页面加载监听器，确保页面转换后能恢复\n  function setupPageLoadListener() {\n    // DOM内容加载和完全加载的事件监听...\n\n    // 改进的页面变化监测\n    const observer = new MutationObserver(function (mutations) {\n      // 检测到内容变化且有待处理的节奏阅读时\n      if (getStorage('rhythmReadingPending') === 'true') {\n        const contentChanges = mutations.some(m => m.type === 'childList' && m.addedNodes.length > 5); // 使用更高的阈值，确保是真正的内容变化\n\n        if (contentChanges) {\n          console.log(\"【节奏阅读】检测到大量DOM变化，可能是页面切换\");\n\n          // 给页面一点时间稳定下来\n          setTimeout(() => {\n            if (getStorage('rhythmReadingPending') === 'true') {\n              console.log(\"【节奏阅读】页面内容变化后，尝试恢复阅读\");\n              setStorage('rhythmReadingPending', 'false');\n              if (!rhythmReader.pageTransitionInProgress) {\n                rhythmReader.start();\n              }\n            }\n          }, 800);\n        }\n      }\n    });\n\n    // 观察body变化\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  }\n\n  // 设置页面加载监听器\n  setupPageLoadListener();\n\n  // 检查是否需要立即恢复阅读状态\n  if (getStorage('rhythmReadingActive') === 'true') {\n    console.log(\"【节奏阅读】检测到之前的阅读状态，准备恢复\");\n    setStorage('rhythmReadingPending', 'false');\n    setTimeout(function () {\n      rhythmReader.start();\n    }, 800);\n  }\n  console.log(\"【节奏阅读】初始化完成\");\n})();\nconst App = () => {\n  _s();\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n  }, []);\n\n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async file => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n\n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n\n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n\n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({\n        scale: 1.0\n      });\n\n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async textContent => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n\n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n\n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n\n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    const lines = [...lineMap.values()];\n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    return hasTocKeywords || hasPageNumberPatterns || shortLineRatio > 0.7 && numberLineRatio > 0.3;\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n\n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n\n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n\n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n\n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = text => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    return result;\n  };\n\n  // 修改processContentPage函数\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n\n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch (mode) {\n        case 'normal':\n          // 普通模式 - 简单分段显示\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'static':\n          // 静态高亮模式 - 应用词性标注和颜色高亮\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'follow-mouse':\n          // 鼠标跟随高亮模式 - 分段落但不预先高亮，由鼠标事件触发高亮\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      setContent(processedContent);\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async file => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain') {\n      handleTxtFile(file);\n    } else {\n      alert('请上传PDF或TXT文件');\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = container => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n\n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n\n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n\n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width / 2,\n            // 水平中心\n            y: rect.bottom,\n            // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n\n    // 过滤无效位置并排序\n    return positions.filter(p => p.char.trim() !== '').sort((a, b) => {\n      // 先按行排序，同行按列排序\n      const yDiff = a.y - b.y;\n      if (Math.abs(yDiff) > 5) {\n        // 5px阈值判断是否同一行\n        return yDiff;\n      }\n      return a.x - b.x;\n    });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n\n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - containerVisibleHeight / 2;\n\n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - window.innerHeight / 2;\n\n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n\n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n\n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length ||\n      // 已到末尾\n      positions[nextIndex].char.trim() === '' ||\n      // 下一个是空白\n      positions[nextIndex].y > charPosition.y + 5) {\n        // 下一个在新行\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n\n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n\n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || current.y > prev.y + 5) {\n        // 有明显换行\n        break;\n      }\n      start--;\n    }\n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n\n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n\n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (window.autoReader.charPositions.length === 0) {\n      if (window.currentPage < window.totalPages) {\n        window.changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 重置索引到开头\n    window.autoReader.currentIndex = 0;\n\n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n\n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n\n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none';\n      highlight.style.zIndex = '998';\n      contentContainer.appendChild(highlight);\n    }\n\n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n\n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20;\n\n    // 尝试获取实际行高\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(window.autoReader.charPositions[i].y - window.autoReader.charPositions[i - 1].y);\n        if (yDiff > 5) {\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n\n    // 记录上次滚动的位置\n    let lastScrolledY = -1;\n    const scrollSafeZone = lineHeight * 2.5;\n\n    // 设置字符大小的估计值\n    let charWidth = 20;\n    let charHeight = lineHeight * 0.8;\n\n    // 尝试估计字符宽度\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        if (window.autoReader.charPositions[i].x !== window.autoReader.charPositions[i - 1].x) {\n          const xDiff = Math.abs(window.autoReader.charPositions[i].x - window.autoReader.charPositions[i - 1].x);\n          if (xDiff > 0 && xDiff < 50) {\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    window.autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (window.autoReader.currentIndex < window.autoReader.charPositions.length && ((_window$autoReader$ch = window.autoReader.charPositions[window.autoReader.currentIndex]) === null || _window$autoReader$ch === void 0 ? void 0 : _window$autoReader$ch.char.trim()) === '') {\n        var _window$autoReader$ch;\n        window.autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (window.autoReader.currentIndex >= window.autoReader.charPositions.length) {\n        if (window.currentPage < window.totalPages) {\n          window.changePage(1);\n          clearInterval(window.autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n      const pos = window.autoReader.charPositions[window.autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      if (cursor && highlight) {\n        const contentRect = contentContainer.getBoundingClientRect();\n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        highlight.style.left = `${relativeX - charWidth / 2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n\n        // 滚动处理\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          if (isContainerScrollable) {\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = relativeY;\n            }\n          } else {\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      window.autoReader.currentIndex++;\n    }, window.autoReader.speed);\n\n    // 在停止自动阅读时清除所有高亮\n    window.autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n\n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n\n      // 调用清理函数\n      if (window.autoReader.cleanup) {\n        window.autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n\n    // 重置翻页状态\n    window.autoReader.isPageChanging = false;\n\n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n\n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n\n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n\n    // 收集字符位置\n    window.autoReader.charPositions = getAllCharacterPositions(content);\n\n    // 如果当前页没有内容，尝试翻页\n    if (window.autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !window.autoReader.isPageChanging) {\n        window.autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async e => {\n    const newMode = e.target.value;\n    const prevMode = readingMode;\n\n    // 如果是从裸眼3D模式或舒适3D模式切换出来，恢复背景色\n    if (prevMode === 'naked-eye-3d' || prevMode === 'comfortable-3d') {\n      restoreDarkBackground();\n    }\n\n    // 停止当前可能正在运行的自动阅读和节奏阅读\n    stopAutoReader();\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    if (window.flashReader && window.flashReader.cleanup) {\n      window.flashReader.cleanup();\n    }\n\n    // 清理旧模式\n    cleanupDOM();\n\n    // 更新状态\n    setReadingMode(newMode);\n\n    // 应用新模式\n    if (pdfDocument && currentPage > 0) {\n      try {\n        const page = await pdfDocument.getPage(currentPage);\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        let processedContent = '';\n\n        // 应用对应模式的文本处理\n        switch (newMode) {\n          case 'follow-mouse':\n            processedContent = formatTextForMouseFollow(extractedText);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlight(extractedText);\n            break;\n          case 'auto-reader':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          case 'rhythm':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          case 'naked-eye-3d':\n            processedContent = applyNakedEye3dEffect(extractedText);\n            setTimeout(applyDarkBackground, 50);\n            break;\n          case 'comfortable-3d':\n            processedContent = applyComfortable3dEffect(extractedText);\n            setTimeout(applyDarkBackground, 50);\n            break;\n          case 'flash-reading':\n            addFlashReadingStyles();\n            processedContent = createFlashReadingContent(extractedText);\n            setTimeout(applyDarkBackground, 50);\n            setTimeout(initializeFlashReading, 100);\n            break;\n          default:\n            processedContent = formatTextToHtml(extractedText);\n        }\n        const contentArea = document.querySelector('.page-content');\n        if (contentArea) {\n          contentArea.textContent = '';\n          contentArea.innerHTML = processedContent;\n\n          // 滚动到页面顶部\n          window.scrollTo(0, 0);\n          if (contentArea.scrollTo) {\n            contentArea.scrollTo(0, 0);\n          }\n\n          // 立即初始化对应模式\n          if (newMode === 'auto-reader') {\n            setTimeout(initializeAutoReader, 50);\n          } else if (newMode === 'follow-mouse') {\n            setTimeout(initializeMouseFollow, 50);\n          } else if (newMode === 'rhythm') {\n            setTimeout(() => {\n              if (window.rhythmReader) {\n                window.rhythmReader.start();\n              }\n            }, 50);\n          } else if (newMode === 'naked-eye-3d') {\n            setTimeout(() => {\n              initializeNakedEye3D();\n              applyDarkBackground();\n            }, 50);\n          } else if (newMode === 'comfortable-3d') {\n            setTimeout(() => {\n              applyDarkBackground();\n            }, 50);\n          }\n        }\n      } catch (error) {\n        console.error('应用新阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 首先确保移除鼠标跟随监听器\n    removeMouseFollowListeners();\n\n    // 清理自动阅读器\n    if (window.autoReader && window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n    }\n\n    // 清理节奏阅读器\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n\n    // 清理闪读器\n    if (window.flashReader) {\n      window.flashReader.cleanup();\n    }\n\n    // 清理裸眼3D效果\n    const threeDElements = document.querySelectorAll('.naked-eye-3d');\n    threeDElements.forEach(el => el.remove());\n\n    // 清理舒适3D效果\n    const comfortable3DElements = document.querySelectorAll('.emboss-3d-text, .float-3d-text, .gradient-3d-text');\n    comfortable3DElements.forEach(el => el.remove());\n\n    // 清理闪读模式元素\n    const flashReadingElements = document.querySelectorAll('.flash-reading-container, .flash-reading-display, .flash-reading-controls');\n    flashReadingElements.forEach(el => el.remove());\n\n    // 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll('.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line, .rhythm-char');\n    highlights.forEach(el => {\n      if (el.parentNode) el.parentNode.removeChild(el);\n    });\n\n    // 彻底替换内容区域以移除所有事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 深度克隆内容，但不克隆事件监听器\n      const contentHTML = contentArea.innerHTML;\n      const newContentArea = contentArea.cloneNode(false);\n      newContentArea.innerHTML = contentHTML;\n      if (contentArea.parentNode) {\n        contentArea.parentNode.replaceChild(newContentArea, contentArea);\n      }\n    }\n\n    // 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 移除所有特殊标记和样式\n      paragraph.removeAttribute('data-follow');\n      paragraph.removeAttribute('style');\n\n      // 清理特殊span标签\n      paragraph.innerHTML = paragraph.innerHTML.replace(/<span class=\"text-line\"[^>]*>/g, '').replace(/<span class=\"rhythm-char\"[^>]*>/g, '').replace(/<span class=\"line-highlight[^\"]*\"[^>]*>/g, '').replace(/<span class=\"mouse-highlight[^\"]*\"[^>]*>/g, '').replace(/<\\/span>/g, '');\n    });\n\n    // 移除特殊UI元素\n    const elementsToRemove = ['rhythm-speed-slider', 'rhythm-notification', 'auto-reader-cursor', 'auto-reader-highlight'];\n    elementsToRemove.forEach(id => {\n      const element = document.getElementById(id);\n      if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    });\n\n    // 移除暗色背景\n    document.body.classList.remove('dark-background');\n  };\n  const handleAutoScroll = () => {\n    window.autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = e => {\n    if (readingMode !== 'follow-mouse') return;\n\n    // 清除所有现有高亮\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n    const mouseTarget = document.elementFromPoint(e.clientX, e.clientY);\n    if (mouseTarget && (mouseTarget.classList.contains('pdf-paragraph') || mouseTarget.tagName === 'P' || mouseTarget.tagName === 'SPAN')) {\n      const targetParagraph = mouseTarget.closest('.pdf-paragraph');\n      if (!targetParagraph) return;\n\n      // 获取段落文本节点\n      const textNode = getTextNodeAtPosition(targetParagraph, e.clientX, e.clientY);\n      if (!textNode) return;\n\n      // 获取精确的行位置和尺寸\n      const range = document.createRange();\n      range.selectNodeContents(textNode);\n      const rects = range.getClientRects();\n\n      // 找到鼠标所在的具体行\n      let targetRect = null;\n      for (let i = 0; i < rects.length; i++) {\n        const rect = rects[i];\n        if (e.clientY >= rect.top && e.clientY <= rect.bottom) {\n          targetRect = rect;\n          break;\n        }\n      }\n      if (targetRect) {\n        // 创建高亮元素\n        const lineHighlight = document.createElement('div');\n        lineHighlight.className = 'line-highlight mouse-highlight';\n\n        // 计算相对于段落的位置\n        const paragraphRect = targetParagraph.getBoundingClientRect();\n        const top = targetRect.top - paragraphRect.top;\n        const left = targetRect.left - paragraphRect.left;\n\n        // 设置高亮样式\n        lineHighlight.style.position = 'absolute';\n        lineHighlight.style.left = `${left}px`;\n        lineHighlight.style.top = `${top}px`;\n        lineHighlight.style.width = `${targetRect.width}px`;\n        lineHighlight.style.height = `${targetRect.height}px`;\n        lineHighlight.style.pointerEvents = 'none';\n        lineHighlight.style.backgroundColor = 'rgba(255, 165, 0, 0.3)';\n        lineHighlight.style.borderRadius = '4px';\n        lineHighlight.style.boxShadow = '0 0 8px rgba(255, 165, 0, 0.5)';\n        lineHighlight.style.zIndex = '5';\n        lineHighlight.style.transition = 'all 0.1s ease';\n\n        // 确保段落有相对定位\n        targetParagraph.style.position = 'relative';\n        targetParagraph.appendChild(lineHighlight);\n      }\n    }\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 专门用于移除鼠标跟随事件的函数\n  const removeMouseFollowListeners = () => {\n    // 移除记录的所有监听器\n    if (window.eventTracker && window.eventTracker.mouseFollowHandlers) {\n      window.eventTracker.mouseFollowHandlers.forEach(({\n        element,\n        event,\n        handler\n      }) => {\n        if (element && element.removeEventListener) {\n          element.removeEventListener(event, handler);\n        }\n      });\n      window.eventTracker.mouseFollowHandlers = [];\n    }\n\n    // 为安全起见，尝试从document和内容区域移除通用处理函数\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    }\n    document.removeEventListener('mousemove', handleMouseMove);\n\n    // 清除所有当前高亮\n    clearAllHighlights();\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n    addNakedEye3DStyles();\n    addComfortable3DStyles();\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 新增延迟补偿\n    setTimeout(() => {\n      addMouseFollowListeners();\n\n      // 强制触发重排\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        void contentArea.offsetHeight;\n\n        // 模拟鼠标移动事件\n        const fakeEvent = new MouseEvent('mousemove', {\n          clientX: window.innerWidth / 2,\n          clientY: window.innerHeight / 2,\n          bubbles: true\n        });\n        contentArea.dispatchEvent(fakeEvent);\n      }\n    }, 50);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = delta => {\n    window.autoReader.speed = Math.max(100, window.autoReader.speed + delta);\n    setAutoReaderState(prev => ({\n      ...prev,\n      speed: window.autoReader.speed\n    }));\n    if (window.autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async delta => {\n    const newPage = currentPage + delta;\n    if (newPage < 1 || newPage > totalPages) return;\n    const wasAutoReading = readingMode === 'auto-reader' && window.autoReader.intervalId;\n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n    const wasFlashReading = readingMode === 'flash-reading' && window.flashReader && window.flashReader.isPlaying;\n\n    // 如果正在自动阅读或节奏阅读，先停止\n    if (wasAutoReading) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n    }\n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    if (wasFlashReading && window.flashReader) {\n      window.flashReader.cleanup();\n    }\n\n    // 更新页码\n    setCurrentPage(newPage);\n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 按当前阅读模式处理内容\n      let processedContent = '';\n      switch (readingMode) {\n        case 'follow-mouse':\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'auto-reader':\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'rhythm':\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'naked-eye-3d':\n          processedContent = applyNakedEye3dEffect(extractedText);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffect(extractedText);\n          break;\n        case 'flash-reading':\n          processedContent = createFlashReadingContent(extractedText);\n          setTimeout(() => {\n            initializeFlashReading();\n            if (wasFlashReading) {\n              const startBtn = document.getElementById('flash-reading-start');\n              if (startBtn) startBtn.click();\n            }\n          }, 100);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n\n      // 更新页面内容\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        contentArea.textContent = '';\n        contentArea.innerHTML = processedContent;\n\n        // 滚动到页面顶部\n        window.scrollTo(0, 0);\n        if (contentArea.scrollTo) {\n          contentArea.scrollTo(0, 0);\n        }\n\n        // 重新启动对应的阅读模式\n        if (wasAutoReading) {\n          setTimeout(initializeAutoReader, 50);\n        } else if (wasRhythmReading && window.rhythmReader) {\n          setTimeout(() => {\n            window.rhythmReader.start();\n          }, 50);\n        } else if (readingMode === 'naked-eye-3d') {\n          setTimeout(() => {\n            initializeNakedEye3D();\n            applyDarkBackground();\n          }, 50);\n        } else if (readingMode === 'comfortable-3d') {\n          setTimeout(() => {\n            applyDarkBackground();\n          }, 50);\n        }\n      }\n    } catch (error) {\n      console.error('翻页失败:', error);\n    }\n  };\n\n  // 修改后的监听器设置函数\n  const addMouseFollowListeners = () => {\n    if (readingMode !== 'follow-mouse') return;\n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n\n    // 清理旧的监听器\n    contentArea.removeEventListener('mousemove', handleMouseMove);\n    contentArea.removeEventListener('mouseleave', clearAllHighlights);\n\n    // 添加新的监听器\n    contentArea.addEventListener('mousemove', handleMouseMove);\n    contentArea.addEventListener('mouseleave', clearAllHighlights);\n\n    // 确保所有段落都有正确的样式\n    document.querySelectorAll('.pdf-paragraph').forEach(p => {\n      p.style.position = 'relative';\n      p.style.lineHeight = '1.5';\n    });\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = text => {\n    // 分段\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n\n    // 创建HTML内容\n    let htmlContent = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      htmlContent += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 应用静态高亮\n  const applyStaticHighlight = text => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    let htmlContent = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      // 新增强制清理逻辑\n      const cleanParagraph = paragraph.replace(/<span class=\"text-line\">/g, '').replace(/<\\/span>/g, '');\n      const highlightedText = processTextWithHighlight(cleanParagraph);\n      htmlContent += `<p class=\"pdf-paragraph\">${highlightedText}</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 格式化文本用于鼠标跟随高亮模式\n  const formatTextForMouseFollow = text => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    let htmlContent = '<div class=\"pdf-content mouse-follow-content\">';\n    paragraphs.forEach(paragraph => {\n      // 将段落分割成行\n      const lines = paragraph.split('\\n').filter(line => line.trim());\n      htmlContent += `<p class=\"pdf-paragraph\" data-follow=\"true\" style=\"position: relative; line-height: 1.5;\">`;\n      lines.forEach((line, i) => {\n        // 每行用span包裹\n        htmlContent += `<span class=\"text-line\" style=\"display: block;\">${line}</span>`;\n      });\n      htmlContent += `</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 强制初始化字符位置（这是关键步骤！）\n  function forceInitReader() {\n    console.log(\"强制初始化阅读器...\");\n\n    // 1. 如果autoReader或charPositions不存在，创建它们\n    if (typeof window.autoReader === 'undefined') {\n      window.autoReader = {\n        charPositions: [],\n        intervalId: null,\n        currentIndex: 0,\n        speed: 30\n      };\n    }\n\n    // 2. 如果没有字符位置数据，尝试触发它的创建\n    if (!window.autoReader.charPositions || window.autoReader.charPositions.length === 0) {\n      console.log(\"未找到字符位置数据，尝试强制创建...\");\n\n      // 直接使用scanTextPositionsSimple函数\n      scanTextPositionsSimple();\n    }\n    return window.autoReader.charPositions && window.autoReader.charPositions.length > 0;\n  }\n\n  // 简单的文本位置扫描函数\n  function scanTextPositionsSimple() {\n    console.log(\"使用简单文本扫描...\");\n    window.autoReader.charPositions = [];\n    const contentElement = document.querySelector('.page-content');\n    if (!contentElement) {\n      console.error(\"找不到内容容器\");\n      return;\n    }\n\n    // 递归处理文本节点\n    function processTextNodes(element) {\n      if (element.nodeType === Node.TEXT_NODE) {\n        const text = element.textContent;\n        if (!text || text.trim() === '') return;\n\n        // 获取元素的位置信息\n        const range = document.createRange();\n\n        // 为每个字符创建一个独立的范围\n        for (let i = 0; i < text.length; i++) {\n          try {\n            range.setStart(element, i);\n            range.setEnd(element, i + 1);\n            const rect = range.getBoundingClientRect();\n            if (rect.width > 0 && rect.height > 0) {\n              window.autoReader.charPositions.push({\n                char: text[i],\n                x: rect.left + rect.width / 2,\n                y: rect.top + rect.height / 2,\n                element: element.parentElement\n              });\n            }\n          } catch (e) {\n            console.warn(\"无法处理字符\", e);\n          }\n        }\n      } else if (element.nodeType === Node.ELEMENT_NODE) {\n        // 递归处理子元素\n        for (const child of element.childNodes) {\n          processTextNodes(child);\n        }\n      }\n    }\n    processTextNodes(contentElement);\n    console.log(\"扫描完成，找到字符数量:\", window.autoReader.charPositions.length);\n  }\n\n  // 处理文本应用裸眼3D效果\n  const applyNakedEye3dEffect = text => {\n    // 分段落处理\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    let htmlContent = '<div class=\"pdf-content naked-eye-3d-content\">';\n    paragraphs.forEach(paragraph => {\n      // 清理可能存在的标签\n      const cleanParagraph = paragraph.replace(/<span[^>]*>/g, '').replace(/<\\/span>/g, '');\n\n      // 分词处理，为一小部分词添加3D效果\n      const words = cleanParagraph.split(/(\\s+|[,.!?，。！？])/);\n      let processedText = '';\n      words.forEach(word => {\n        if (!word || /^\\s+$/.test(word) || /^[,.!?，。！？]$/.test(word)) {\n          // 保持空格和标点原样，但使其为白色\n          processedText += `<span class=\"normal-text\">${word}</span>`;\n          return;\n        }\n\n        // 约20%的单词应用3D效果\n        if (Math.random() < 0.2) {\n          // 创建裸眼3D效果\n          processedText += `<span class=\"naked-eye-3d-text\">${word}</span>`;\n        } else {\n          // 非3D文字显示为白色\n          processedText += `<span class=\"normal-text\">${word}</span>`;\n        }\n      });\n\n      // 包装成段落，应用ADHD友好的样式\n      htmlContent += `<p class=\"pdf-paragraph adhd-friendly\">${processedText}</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 添加裸眼3D样式\n  const addNakedEye3DStyles = () => {\n    // 避免重复添加\n    if (document.getElementById('naked-eye-3d-styles')) return;\n    const style = document.createElement('style');\n    style.id = 'naked-eye-3d-styles';\n    style.textContent = `\n      /* 深色背景以确保白色文字可见 */\n      .naked-eye-3d-content {\n        background-color: #222;\n        padding: 20px;\n        border-radius: 8px;\n      }\n      \n      /* 普通文字（白色） */\n      .normal-text {\n        color: white;\n        display: inline-block;\n        margin: 0;\n        padding: 0;\n      }\n      \n      /* 3D文字基本样式 */\n      .naked-eye-3d-text {\n        position: relative;\n        display: inline-block;\n        transform-style: preserve-3d;\n        color: white;  /* 基础颜色也是白色 */\n      }\n      \n      /* 3D效果 - 红色偏移 */\n      .naked-eye-3d-text::before {\n        content: attr(data-text);\n        position: absolute;\n        top: 0;\n        left: 0;\n        z-index: -1;\n        color: rgba(255, 0, 0, 0.8);\n        transform: translateX(-3px);\n      }\n      \n      /* 3D效果 - 青色偏移 */\n      .naked-eye-3d-text::after {\n        content: attr(data-text);\n        position: absolute;\n        top: 0;\n        left: 0;\n        z-index: -1;\n        color: rgba(0, 255, 255, 0.8);\n        transform: translateX(3px);\n      }\n      \n      /* ADHD友好样式 */\n      .adhd-friendly {\n        font-size: 1.1em;\n        line-height: 1.8;\n        color: white;\n        padding: 15px 0;\n      }\n    `;\n    document.head.appendChild(style);\n  };\n\n  // 在裸眼3D模式初始化后处理元素\n  const initializeNakedEye3D = () => {\n    // 为裸眼3D文本元素添加文本内容作为data属性\n    document.querySelectorAll('.naked-eye-3d-text').forEach(el => {\n      el.setAttribute('data-text', el.textContent);\n    });\n\n    // 确保深色背景已应用\n    applyDarkBackground();\n  };\n\n  // 在切换到裸眼3D模式时应用深色背景\n  const applyDarkBackground = () => {\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.style.backgroundColor = '#222';\n    }\n  };\n\n  // 在离开裸眼3D模式时恢复背景\n  const restoreDarkBackground = () => {\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.style.backgroundColor = '';\n    }\n  };\n\n  // 添加改进的3D文字样式\n  const addComfortable3DStyles = () => {\n    // 避免重复添加\n    if (document.getElementById('comfortable-3d-styles')) return;\n    const style = document.createElement('style');\n    style.id = 'comfortable-3d-styles';\n    style.textContent = `\n      /* 深色背景 */\n      .comfortable-3d-content {\n        background-color: #222;\n        padding: 20px;\n        border-radius: 8px;\n      }\n      \n      /* 普通文字（白色） */\n      .normal-text {\n        color: white;\n        display: inline-block;\n        margin: 0;\n        padding: 0;\n      }\n      \n      /* 柔和浮雕效果 */\n      .emboss-3d-text {\n        display: inline-block;\n        color: #ff0000;\n        text-shadow: \n          -1px -1px 1px rgba(255,0,0,0.6),\n          1px 1px 1px rgba(255,0,0,0.6);\n        position: relative;\n        font-weight: bold;\n        margin: 0;\n        padding: 0;\n      }\n      \n      /* 悬浮效果 */\n      .float-3d-text {\n        display: inline-block;\n        color: #ff0000;\n        position: relative;\n        transform: translateY(-2px);\n        text-shadow: 0 4px 3px rgba(255,0,0,0.5);\n        margin: 0;\n        padding: 0;\n      }\n      \n      /* 渐变效果 */\n      .gradient-3d-text {\n        display: inline-block;\n        background: linear-gradient(to bottom, #ff0000 30%, #ff6666 100%);\n        -webkit-background-clip: text;\n        background-clip: text;\n        -webkit-text-fill-color: transparent;\n        text-fill-color: transparent;\n        text-shadow: 0px 2px 2px rgba(255,0,0,0.2);\n        font-weight: bold;\n        margin: 0;\n        padding: 0;\n      }\n      \n      /* ADHD友好样式 */\n      .adhd-friendly {\n        font-size: 1.1em;\n        line-height: 1.8;\n        color: white;\n        padding: 15px 0;\n      }\n    `;\n    document.head.appendChild(style);\n  };\n\n  // 处理文本应用多种柔和3D效果\n  const applyComfortable3dEffect = text => {\n    // 分段落处理\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    let htmlContent = '<div class=\"pdf-content comfortable-3d-content\">';\n\n    // 3D效果类型数组\n    const effectClasses = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n    paragraphs.forEach(paragraph => {\n      // 清理可能存在的标签\n      const cleanParagraph = paragraph.replace(/<span[^>]*>/g, '').replace(/<\\/span>/g, '');\n\n      // 分词处理\n      const words = cleanParagraph.split(/(\\s+|[,.!?，。！？])/);\n      let processedText = '';\n      words.forEach(word => {\n        if (!word || /^\\s+$/.test(word) || /^[,.!?，。！？]$/.test(word)) {\n          // 保持空格和标点原样，但使其为白色\n          processedText += `<span class=\"normal-text\">${word}</span>`;\n          return;\n        }\n\n        // 约20%的单词应用3D效果\n        if (Math.random() < 0.2) {\n          // 随机选择一种3D效果\n          const effectClass = effectClasses[Math.floor(Math.random() * effectClasses.length)];\n          processedText += `<span class=\"${effectClass}\">${word}</span>`;\n        } else {\n          // 非3D文字显示为白色\n          processedText += `<span class=\"normal-text\">${word}</span>`;\n        }\n      });\n\n      // 包装成段落，应用ADHD友好的样式\n      htmlContent += `<p class=\"pdf-paragraph adhd-friendly\">${processedText}</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 添加闪读模式样式\n  const addFlashReadingStyles = () => {\n    if (document.getElementById('flash-reading-styles')) return;\n    const style = document.createElement('style');\n    style.id = 'flash-reading-styles';\n    style.textContent = `\n      .flash-reading-container {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        height: 80vh;\n        width: 100%;\n        background-color: #222;\n        color: white;\n      }\n      \n      .flash-reading-display {\n        font-size: 2em;\n        min-height: 3em;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        text-align: center;\n        padding: 20px;\n        margin: 40px 0;\n        width: 80%;\n        max-width: 800px;\n        border-radius: 10px;\n        background-color: rgba(255,255,255,0.05);\n        transition: background-color 0.3s ease;\n      }\n      \n      @keyframes flash-in {\n        0% { opacity: 0; transform: scale(0.95); }\n        100% { opacity: 1; transform: scale(1); }\n      }\n      \n      .flash-reading-animate {\n        animation: flash-in 0.3s ease forwards;\n      }\n      \n      .flash-reading-controls {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        width: 80%;\n        max-width: 600px;\n        background-color: rgba(255,255,255,0.1);\n        padding: 20px;\n        border-radius: 10px;\n      }\n      \n      .flash-reading-slider-container {\n        width: 100%;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        margin-bottom: 15px;\n      }\n      \n      .flash-reading-slider {\n        width: 100%;\n        margin: 10px 0;\n      }\n      \n      .flash-reading-buttons {\n        display: flex;\n        gap: 10px;\n        margin-top: 15px;\n      }\n      \n      .flash-reading-button {\n        padding: 8px 16px;\n        background-color: #4CAF50;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        cursor: pointer;\n        font-size: 16px;\n      }\n      \n      .flash-reading-button:hover {\n        background-color: #3e8e41;\n      }\n      \n      .flash-reading-button.pause {\n        background-color: #f44336;\n      }\n      \n      .flash-reading-button.pause:hover {\n        background-color: #d32f2f;\n      }\n      \n      .flash-reading-stats {\n        margin-top: 15px;\n        font-size: 14px;\n        color: #aaa;\n      }\n    `;\n    document.head.appendChild(style);\n  };\n\n  // 将文本分割成句子\n  const splitTextIntoSentences = text => {\n    // 匹配任意标点符号\n    const punctuationPattern = /[,.!?，。！？；;：:、]/g;\n    const sentences = [];\n    let lastIndex = 0;\n    let match;\n    while ((match = punctuationPattern.exec(text)) !== null) {\n      const endIndex = match.index + 1; // 包含标点符号\n      const sentence = text.slice(lastIndex, endIndex).trim();\n      if (sentence) {\n        sentences.push(sentence);\n      }\n      lastIndex = endIndex;\n    }\n\n    // 处理剩余的文本\n    if (lastIndex < text.length) {\n      const remainingText = text.slice(lastIndex).trim();\n      if (remainingText) {\n        sentences.push(remainingText);\n      }\n    }\n    return sentences;\n  };\n\n  // 创建闪读模式的HTML结构\n  const createFlashReadingContent = text => {\n    const sentences = splitTextIntoSentences(text);\n    window.flashReader = {\n      sentences: sentences,\n      currentIndex: 0,\n      isPlaying: false,\n      speed: 1000,\n      intervalId: null\n    };\n    let htmlContent = `\n      <div class=\"flash-reading-container\">\n        <div id=\"flash-reading-display\" class=\"flash-reading-display\">\n          点击\"开始\"按钮开始闪读\n        </div>\n        \n        <div class=\"flash-reading-controls\">\n          <div class=\"flash-reading-slider-container\">\n            <label for=\"flash-reading-speed\">\n              速度: <span id=\"flash-reading-speed-value\">1000ms</span>\n            </label>\n            <input \n              type=\"range\" \n              id=\"flash-reading-speed\" \n              class=\"flash-reading-slider\" \n              min=\"200\" \n              max=\"3000\" \n              step=\"100\" \n              value=\"1000\"\n            >\n          </div>\n          \n          <div class=\"flash-reading-buttons\">\n            <button id=\"flash-reading-start\" class=\"flash-reading-button\">开始</button>\n            <button id=\"flash-reading-pause\" class=\"flash-reading-button pause\" disabled>暂停</button>\n            <button id=\"flash-reading-prev\" class=\"flash-reading-button\">上一句</button>\n            <button id=\"flash-reading-next\" class=\"flash-reading-button\">下一句</button>\n          </div>\n          \n          <div class=\"flash-reading-stats\">\n            进度: <span id=\"flash-reading-progress\">0/${sentences.length}</span>\n          </div>\n        </div>\n      </div>\n    `;\n    return htmlContent;\n  };\n\n  // 初始化闪读模式的控制逻辑\n  const initializeFlashReading = () => {\n    const displayEl = document.getElementById('flash-reading-display');\n    const speedSlider = document.getElementById('flash-reading-speed');\n    const speedValue = document.getElementById('flash-reading-speed-value');\n    const startBtn = document.getElementById('flash-reading-start');\n    const pauseBtn = document.getElementById('flash-reading-pause');\n    const prevBtn = document.getElementById('flash-reading-prev');\n    const nextBtn = document.getElementById('flash-reading-next');\n    const progressEl = document.getElementById('flash-reading-progress');\n    if (!displayEl || !speedSlider || !speedValue || !startBtn || !pauseBtn || !prevBtn || !nextBtn || !progressEl) {\n      console.error('闪读模式初始化失败：缺少必要的DOM元素');\n      return;\n    }\n    const reader = window.flashReader;\n    if (!reader || !Array.isArray(reader.sentences) || reader.sentences.length === 0) {\n      displayEl.textContent = '没有可用的文本内容';\n      return;\n    }\n    const updateProgress = () => {\n      progressEl.textContent = `${reader.currentIndex + 1}/${reader.sentences.length}`;\n    };\n    const displayCurrentSentence = () => {\n      if (reader.currentIndex >= 0 && reader.currentIndex < reader.sentences.length) {\n        displayEl.classList.remove('flash-reading-animate');\n        displayEl.textContent = reader.sentences[reader.currentIndex];\n        void displayEl.offsetWidth;\n        displayEl.classList.add('flash-reading-animate');\n        updateProgress();\n      }\n    };\n    const advanceToNextSentence = () => {\n      if (reader.currentIndex < reader.sentences.length - 1) {\n        reader.currentIndex++;\n        displayCurrentSentence();\n      } else {\n        stopFlashReading();\n        displayEl.textContent = '阅读完成！';\n      }\n    };\n    const startFlashReading = () => {\n      if (reader.isPlaying) return;\n      reader.isPlaying = true;\n      startBtn.disabled = true;\n      pauseBtn.disabled = false;\n      displayCurrentSentence();\n      reader.intervalId = setInterval(() => {\n        advanceToNextSentence();\n      }, reader.speed);\n    };\n    const pauseFlashReading = () => {\n      if (!reader.isPlaying) return;\n      if (reader.intervalId) {\n        clearInterval(reader.intervalId);\n        reader.intervalId = null;\n      }\n      reader.isPlaying = false;\n      startBtn.disabled = false;\n      pauseBtn.disabled = true;\n    };\n    const stopFlashReading = () => {\n      if (reader.intervalId) {\n        clearInterval(reader.intervalId);\n        reader.intervalId = null;\n      }\n      reader.isPlaying = false;\n      startBtn.disabled = false;\n      pauseBtn.disabled = true;\n    };\n    const showPreviousSentence = () => {\n      if (reader.currentIndex > 0) {\n        pauseFlashReading();\n        reader.currentIndex--;\n        displayCurrentSentence();\n      }\n    };\n    const showNextSentence = () => {\n      if (reader.currentIndex < reader.sentences.length - 1) {\n        pauseFlashReading();\n        reader.currentIndex++;\n        displayCurrentSentence();\n      }\n    };\n    speedSlider.addEventListener('input', function () {\n      const newSpeed = parseInt(this.value);\n      reader.speed = newSpeed;\n      speedValue.textContent = `${newSpeed}ms`;\n      if (reader.isPlaying) {\n        clearInterval(reader.intervalId);\n        reader.intervalId = setInterval(() => {\n          advanceToNextSentence();\n        }, reader.speed);\n      }\n    });\n    startBtn.addEventListener('click', startFlashReading);\n    pauseBtn.addEventListener('click', pauseFlashReading);\n    prevBtn.addEventListener('click', showPreviousSentence);\n    nextBtn.addEventListener('click', showNextSentence);\n    const handleKeydown = function (event) {\n      if (document.activeElement.tagName === 'INPUT') return;\n      switch (event.key) {\n        case ' ':\n          reader.isPlaying ? pauseFlashReading() : startFlashReading();\n          event.preventDefault();\n          break;\n        case 'ArrowLeft':\n          showPreviousSentence();\n          event.preventDefault();\n          break;\n        case 'ArrowRight':\n          showNextSentence();\n          event.preventDefault();\n          break;\n      }\n    };\n    document.addEventListener('keydown', handleKeydown);\n    reader.cleanup = () => {\n      document.removeEventListener('keydown', handleKeydown);\n      stopFlashReading();\n    };\n    updateProgress();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2789,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2788,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"upload-btn\",\n        children: [\"\\u9009\\u62E9\\u6587\\u4EF6\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".pdf,.txt\",\n          onChange: handleFileUpload,\n          style: {\n            display: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2793,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2791,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2787,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2803,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mode-selector\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: readingMode,\n              onChange: handleReadingModeChange,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"normal\",\n                children: \"\\u666E\\u901A\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2807,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"static\",\n                children: \"\\u9759\\u6001\\u9AD8\\u4EAE\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2808,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"follow-mouse\",\n                children: \"\\u9F20\\u6807\\u8DDF\\u968F\\u9AD8\\u4EAE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2809,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"auto-reader\",\n                children: \"\\u81EA\\u52A8\\u9605\\u8BFB\\u5668\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2810,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"rhythm\",\n                children: \"\\u8282\\u594F\\u9605\\u8BFB\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2811,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"flash-reading\",\n                children: \"\\u95EA\\u8BFB\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2812,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"comfortable-3d\",\n                children: \"\\u8212\\u90023D\\u6587\\u5B57\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2813,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2806,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2805,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mode-selector\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: posMode,\n              onChange: e => setPosMode(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"none\",\n                children: \"\\u65E0\\u8BCD\\u6027\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2818,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"noun\",\n                children: \"\\u540D\\u8BCD\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2819,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"all\",\n                children: \"\\u5168\\u8BCD\\u6027\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2820,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2817,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2816,\n            columnNumber: 13\n          }, this), readingMode === 'auto-reader' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"speed-control\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => adjustSpeed(-100),\n              children: \"-\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2825,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [autoReaderState.speed, \"ms\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2826,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => adjustSpeed(100),\n              children: \"+\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2827,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2824,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2804,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2802,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-content\",\n        children: content ? /*#__PURE__*/_jsxDEV(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: content\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2834,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-state\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u8BF7\\u4E0A\\u4F20PDF\\u6216TXT\\u6587\\u4EF6\\u5F00\\u59CB\\u9605\\u8BFB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2837,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2836,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2832,\n        columnNumber: 9\n      }, this), content && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"page-btn prev\",\n          onClick: () => changePage(-1),\n          disabled: currentPage === 1,\n          children: \"\\u4E0A\\u4E00\\u9875\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2843,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"page-info\",\n          children: [\"\\u7B2C \", currentPage, \" \\u9875 / \\u5171 \", totalPages, \" \\u9875\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2846,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"page-btn next\",\n          onClick: () => changePage(1),\n          disabled: currentPage === totalPages,\n          children: \"\\u4E0B\\u4E00\\u9875\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2849,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2842,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2801,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 2786,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"hN5MIR5nO8HlAOV4fHPYVU54OrE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","pdfjsLib","pdfjsViewer","marked","pdfjs","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","window","currentPage","totalPages","changePage","eventTracker","mouseFollowHandlers","autoReader","charPositions","intervalId","currentIndex","speed","pageContainer","isScrolling","isPageChanging","cleanup","rhythmReaderGlobal","active","console","log","rhythmReadingInitialized","setStorage","key","value","sessionStorage","setItem","localStorage","e","error","getStorage","getItem","rhythmReader","readIndices","Set","charElements","pageTransitionInProgress","initializeTextNodes","contentContainer","document","querySelector","textNodes","findTextNodes","length","showNotification","forEach","node","text","nodeValue","trim","fragment","createDocumentFragment","i","char","span","createElement","textContent","className","dataset","rhythmIndex","whitespace","style","display","margin","padding","border","backgroundColor","appendChild","push","parentNode","replaceChild","element","childNodes","nodeType","Node","TEXT_NODE","ELEMENT_NODE","id","updateTextColors","index","color","fontWeight","has","background","moveToNextChar","add","clickNextPageButton","stop","scrollToCurrentChar","rect","getBoundingClientRect","lineHeight","parseInt","getComputedStyle","Math","max","height","isContainerScrollable","scrollHeight","clientHeight","includes","overflowY","containerRect","relativeTop","top","scrollTop","visibleTop","visibleBottom","scrollBy","behavior","viewportTop","scrollY","viewportBottom","innerHeight","absoluteTop","addSpeedSlider","slider","getElementById","remove","container","position","right","borderRadius","boxShadow","zIndex","alignItems","maxWidth","label","marginRight","input","type","min","step","width","valueDisplay","marginLeft","minWidth","self","addEventListener","newSpeed","clearInterval","setInterval","body","restoreOriginalText","charSpans","querySelectorAll","parentNodeMap","Map","parent","set","get","spans","sort","a","b","indexA","indexB","groups","currentGroup","prevIndex","previousSibling","group","map","join","textNode","createTextNode","removeChild","start","setTimeout","clear","hijackPageTurningFunctions","setupPageNavigationListeners","message","notification","left","transform","fontSize","_originalChangePage","page","wasActive","rhythmReadingActive","undefined","warn","something","err","target","tagName","getAttribute","toLowerCase","ariaLabel","nextPageSelectors","nextPageButton","selector","elements","el","offsetParent","buttons","button","click","isRhythmActive","stopRhythmSafely","setupPageLoadListener","observer","MutationObserver","mutations","contentChanges","some","m","addedNodes","observe","childList","subtree","App","_s","pages","setPages","setCurrentPage","setTotalPages","fileName","setFileName","loading","setLoading","fileRef","file","setFile","pdfInstance","setPdfInstance","extractedTextPages","setExtractedTextPages","readingMode","setReadingMode","posMode","setPosMode","markdownContent","setMarkdownContent","readerContainerRef","content","setContent","pdfDocument","setPdfDocument","initializeMouseFollow","handlePdfFile","fileURL","URL","createObjectURL","loadingTask","getDocument","pdf","promise","numPages","extractAndProcessPage","alert","pageNum","getPage","getTextContent","viewport","getViewport","scale","isTableOfContents","detectIfTocPage","processTocPage","processContentPage","addMouseFollowListeners","textItems","items","fullText","item","str","hasTocKeywords","test","hasPageNumberPatterns","shortLinesCount","linesWithNumbersCount","lineMap","yKey","round","lines","values","line","lineText","shortLineRatio","numberLineRatio","htmlContent","x","y","sqrt","fontName","spacedText","split","getTextNodeAtPosition","nodes","range","createRange","selectNodeContents","rects","getClientRects","j","bottom","found","processTextWithHighlight","words","result","lastColor","word","random","mode","extractedText","replace","processedContent","formatTextToHtml","applyStaticHighlight","formatTextForMouseFollow","handleTxtFile","pageTexts","paragraph","fontFamily","handleFileUpload","files","getAllCharacterPositions","walker","createTreeWalker","NodeFilter","SHOW_TEXT","positions","nextNode","currentNode","setStart","setEnd","filter","p","yDiff","abs","scrollElementToCenter","elementY","targetScrollTop","containerVisibleHeight","scrollTo","absoluteElementY","createReaderCursor","cursor","cssText","head","isSentenceEnd","charPosition","sentenceEndMarks","nextIndex","findSentenceStart","prev","current","isInVisibleArea","threshold","topThreshold","bottomThreshold","startAutoReader","highlight","pointerEvents","lastScrolledY","scrollSafeZone","charWidth","charHeight","xDiff","_window$autoReader$ch","stopAutoReader","pos","contentRect","relativeX","relativeY","isInRecentlyScrolledArea","needsScroll","scrollAmount","absoluteY","initializeAutoReader","handleReadingModeChange","newMode","prevMode","restoreDarkBackground","flashReader","cleanupDOM","applyNakedEye3dEffect","applyDarkBackground","applyComfortable3dEffect","addFlashReadingStyles","createFlashReadingContent","initializeFlashReading","contentArea","innerHTML","initializeNakedEye3D","removeMouseFollowListeners","threeDElements","comfortable3DElements","flashReadingElements","highlights","contentHTML","newContentArea","cloneNode","paragraphs","removeAttribute","elementsToRemove","classList","handleAutoScroll","updateCursorPosition","force","handleMouseMove","mouseTarget","elementFromPoint","clientX","clientY","contains","targetParagraph","closest","targetRect","lineHighlight","paragraphRect","transition","clearAllHighlights","event","handler","removeEventListener","addAutoReaderStyles","addNakedEye3DStyles","addComfortable3DStyles","offsetHeight","fakeEvent","MouseEvent","innerWidth","bubbles","dispatchEvent","adjustSpeed","delta","setAutoReaderState","newPage","wasAutoReading","wasRhythmReading","wasFlashReading","isPlaying","startBtn","cleanParagraph","highlightedText","forceInitReader","scanTextPositionsSimple","contentElement","processTextNodes","parentElement","child","processedText","setAttribute","effectClasses","effectClass","floor","splitTextIntoSentences","punctuationPattern","sentences","lastIndex","match","exec","endIndex","sentence","slice","remainingText","displayEl","speedSlider","speedValue","pauseBtn","prevBtn","nextBtn","progressEl","reader","Array","isArray","updateProgress","displayCurrentSentence","offsetWidth","advanceToNextSentence","stopFlashReading","startFlashReading","disabled","pauseFlashReading","showPreviousSentence","showNextSentence","handleKeydown","activeElement","preventDefault","children","_jsxFileName","lineNumber","columnNumber","accept","onChange","onClick","autoReaderState","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["D:/adhd-read-helper/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 添加全局事件跟踪对象\nwindow.eventTracker = window.eventTracker || {\n  mouseFollowHandlers: []\n};\n\n// 自动阅读器全局对象\nwindow.autoReader = {\n  charPositions: [],\n  intervalId: null,\n  currentIndex: 0,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false,\n  cleanup: null\n};\n\n// 添加新的节奏阅读模式代码\n// 全局变量，确保在页面切换后仍然保持状态\nwindow.rhythmReaderGlobal = window.rhythmReaderGlobal || {\n  active: false,\n  speed: 300\n};\n\n// 节奏阅读模式 - 确保手动翻页后也能自动恢复\n(function() {\n  console.log(\"正在初始化节奏阅读模式...\");\n  \n  // 确保只初始化一次\n  if (window.rhythmReadingInitialized) {\n    console.log(\"节奏阅读模式已经初始化过，跳过\");\n    return;\n  }\n  window.rhythmReadingInitialized = true;\n  \n  // 改进的存储函数，同时使用session和local storage提高可靠性\n  function setStorage(key, value) {\n    try {\n      sessionStorage.setItem(key, value);\n      localStorage.setItem(key, value);\n    } catch (e) {\n      console.error(\"无法写入存储\", e);\n    }\n  }\n  \n  function getStorage(key) {\n    try {\n      // 优先使用sessionStorage，这样更适合单次会话\n      return sessionStorage.getItem(key) || localStorage.getItem(key);\n    } catch (e) {\n      console.error(\"无法读取存储\", e);\n      return null;\n    }\n  }\n  \n  // 状态变量和功能对象\n  const rhythmReader = {\n    active: false,\n    intervalId: null,\n    speed: 300,\n    currentIndex: 0,\n    readIndices: new Set(),\n    charElements: [],\n    pageTransitionInProgress: false,\n    \n    // 初始化文本节点\n    initializeTextNodes: function() {\n      console.log(\"【节奏阅读】初始化文本节点...\");\n      \n    // 重置字符元素数组\n      this.charElements = [];\n    \n    // 获取内容容器\n      const contentContainer = document.querySelector('.page-content');\n      if (!contentContainer) {\n        console.error(\"【节奏阅读】找不到内容容器\");\n        return false;\n      }\n    \n    // 查找所有文本节点并处理\n    const textNodes = [];\n      this.findTextNodes(contentContainer, textNodes);\n    \n    if (textNodes.length === 0) {\n        console.error(\"【节奏阅读】未找到文本节点\");\n        this.showNotification(\"无法启动节奏阅读：未找到文本内容\");\n      return false;\n    }\n    \n      console.log(`【节奏阅读】找到 ${textNodes.length} 个文本节点`);\n    \n    // 为每个文本节点创建字符span\n    textNodes.forEach(node => {\n      const text = node.nodeValue;\n      if (!text || text.trim() === '') return;\n      \n      // 创建文档片段来存放字符span\n      const fragment = document.createDocumentFragment();\n      \n      // 为每个字符创建span\n      for (let i = 0; i < text.length; i++) {\n        const char = text[i];\n        const span = document.createElement('span');\n        span.textContent = char;\n        span.className = 'rhythm-char';\n        span.dataset.rhythmIndex = this.charElements.length;\n        \n        // 如果是空白字符，添加一个标志\n        if (char.trim() === '') {\n          span.dataset.whitespace = 'true';\n        }\n        \n          // 保持原始样式，不设置背景\n        span.style.display = 'inline';\n        span.style.margin = '0';\n        span.style.padding = '0';\n        span.style.border = 'none';\n        span.style.backgroundColor = 'transparent';\n        \n        fragment.appendChild(span);\n          this.charElements.push(span);\n      }\n      \n      // 替换原始节点\n      if (node.parentNode) {\n        node.parentNode.replaceChild(fragment, node);\n      }\n    });\n    \n      console.log(`【节奏阅读】总共创建了 ${this.charElements.length} 个字符span`);\n      return this.charElements.length > 0;\n    },\n  \n  // 递归查找所有文本节点\n    findTextNodes: function(element, textNodes) {\n    // 处理子节点\n    for (let i = 0; i < element.childNodes.length; i++) {\n      const node = element.childNodes[i];\n      \n      // 如果是文本节点且有内容\n      if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() !== '') {\n        textNodes.push(node);\n      } \n      // 如果是元素节点，递归处理\n      else if (node.nodeType === Node.ELEMENT_NODE) {\n        // 跳过读者UI元素\n        if (node.id === 'rhythm-speed-slider' || \n              node.id === 'rhythm-notification' ||\n            node.className === 'rhythm-char') {\n          continue;\n        }\n          this.findTextNodes(node, textNodes);\n      }\n    }\n    },\n  \n  // 更新文本颜色\n    updateTextColors: function() {\n    // 更新所有字符的颜色\n      this.charElements.forEach((span, index) => {\n      // 确定颜色\n      let color;\n      let fontWeight = 'inherit';\n      \n        if (index === this.currentIndex) {\n        color = '#00aa00'; // 当前阅读的字 - 绿色\n        fontWeight = 'bold';\n        } else if (index === this.currentIndex + 1 || index === this.currentIndex + 2) {\n        color = '#aaaaaa'; // 接下来两个字 - 淡灰色\n        } else if (this.readIndices.has(index)) {\n        color = '#ffffff'; // 已读字符 - 白色（表示已读）\n      } else {\n        color = 'rgba(160, 160, 160, 0.25)'; // 未读字符 - 非常淡的灰色（可见但不明显）\n      }\n      \n      span.style.color = color;\n      span.style.fontWeight = fontWeight;\n      \n      // 确保没有背景\n      span.style.backgroundColor = 'transparent';\n      span.style.background = 'none';\n    });\n    },\n  \n  // 移动到下一个字符\n    moveToNextChar: function() {\n    // 将当前字符标记为已读\n      this.readIndices.add(this.currentIndex);\n    \n    // 移动到下一个非空白字符\n    do {\n        this.currentIndex++;\n      \n      // 检查是否到达末尾\n        if (this.currentIndex >= this.charElements.length) {\n          console.log(\"【节奏阅读】已到达页尾，尝试翻页\");\n          \n          // 尝试点击下一页按钮\n          if (!this.clickNextPageButton()) {\n            // 如果没有找到下一页按钮，完全停止阅读\n            this.stop();\n          }\n          return;\n      }\n    } while (\n        this.currentIndex < this.charElements.length && \n        this.charElements[this.currentIndex] && \n        this.charElements[this.currentIndex].dataset.whitespace === 'true'\n    );\n    \n    // 更新颜色\n      this.updateTextColors();\n    \n    // 滚动到当前字符\n      this.scrollToCurrentChar();\n    },\n  \n  // 滚动到当前字符\n    scrollToCurrentChar: function() {\n      const span = this.charElements[this.currentIndex];\n    if (!span) return;\n    \n    const rect = span.getBoundingClientRect();\n    const contentContainer = document.querySelector('.page-content');\n    \n    // 估计行高\n    const lineHeight = parseInt(window.getComputedStyle(span).lineHeight) || \n                       Math.max(20, rect.height * 1.5);\n    \n    // 确定滚动容器\n    const isContainerScrollable = contentContainer && \n      contentContainer.scrollHeight > contentContainer.clientHeight &&\n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n    \n    if (isContainerScrollable) {\n      // 容器滚动\n      const containerRect = contentContainer.getBoundingClientRect();\n      const relativeTop = rect.top - containerRect.top + contentContainer.scrollTop;\n      \n      const visibleTop = contentContainer.scrollTop;\n      const visibleBottom = visibleTop + contentContainer.clientHeight;\n      \n      if (relativeTop < visibleTop + lineHeight || relativeTop > visibleBottom - lineHeight) {\n        contentContainer.scrollBy({\n          top: lineHeight * 2 * (relativeTop > visibleBottom - lineHeight ? 1 : -1),\n          behavior: 'smooth'\n        });\n      }\n    } else {\n      // 窗口滚动\n      const viewportTop = window.scrollY;\n      const viewportBottom = viewportTop + window.innerHeight;\n      const absoluteTop = rect.top + window.scrollY;\n      \n      if (absoluteTop < viewportTop + lineHeight || absoluteTop > viewportBottom - lineHeight) {\n        window.scrollBy({\n          top: lineHeight * 2 * (absoluteTop > viewportBottom - lineHeight ? 1 : -1),\n          behavior: 'smooth'\n        });\n      }\n    }\n    },\n    \n    // 添加速度滑块\n    addSpeedSlider: function() {\n      let slider = document.getElementById('rhythm-speed-slider');\n      if (slider) slider.remove();\n      \n      const container = document.createElement('div');\n      container.id = 'rhythm-speed-slider';\n      container.style.position = 'fixed';\n      container.style.top = '70px';\n      container.style.right = '20px';\n      container.style.backgroundColor = 'white';\n      container.style.padding = '10px';\n      container.style.borderRadius = '5px';\n      container.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';\n      container.style.zIndex = '10000';\n      container.style.display = 'flex';\n      container.style.alignItems = 'center';\n      container.style.maxWidth = '300px';\n      \n      const label = document.createElement('label');\n      label.textContent = '速度: ';\n      label.style.marginRight = '8px';\n      container.appendChild(label);\n      \n      const input = document.createElement('input');\n      input.type = 'range';\n      input.min = '50';\n      input.max = '1000';\n      input.step = '50';\n      input.value = this.speed;\n      input.style.width = '120px';\n      \n      const valueDisplay = document.createElement('span');\n      valueDisplay.textContent = `${this.speed}ms`;\n      valueDisplay.style.marginLeft = '8px';\n      valueDisplay.style.minWidth = '60px';\n      \n      const self = this;\n      input.addEventListener('input', function() {\n        const newSpeed = parseInt(this.value);\n        self.speed = newSpeed;\n        valueDisplay.textContent = `${newSpeed}ms`;\n        \n        if (self.intervalId) {\n          clearInterval(self.intervalId);\n          self.intervalId = setInterval(() => self.moveToNextChar(), newSpeed);\n        }\n      });\n      \n      container.appendChild(input);\n      container.appendChild(valueDisplay);\n      document.body.appendChild(container);\n    },\n  \n  // 恢复原始文本\n    restoreOriginalText: function() {\n    // 获取所有已创建的字符span\n    const charSpans = document.querySelectorAll('.rhythm-char');\n    \n    // 按父节点分组\n    const parentNodeMap = new Map();\n    \n    charSpans.forEach(span => {\n      const parent = span.parentNode;\n      if (!parent) return;\n      \n      if (!parentNodeMap.has(parent)) {\n        parentNodeMap.set(parent, []);\n      }\n      parentNodeMap.get(parent).push(span);\n    });\n    \n    // 对每个父节点，将连续的字符span合并回文本节点\n    parentNodeMap.forEach((spans, parent) => {\n      if (spans.length === 0) return;\n      \n      // 排序spans确保顺序正确\n      spans.sort((a, b) => {\n        const indexA = parseInt(a.dataset.rhythmIndex || '0');\n        const indexB = parseInt(b.dataset.rhythmIndex || '0');\n        return indexA - indexB;\n      });\n      \n      // 根据连续性分组\n      const groups = [];\n        if (spans.length > 0) {\n      let currentGroup = [spans[0]];\n      \n      for (let i = 1; i < spans.length; i++) {\n        const prevIndex = parseInt(spans[i-1].dataset.rhythmIndex || '0');\n        const currentIndex = parseInt(spans[i].dataset.rhythmIndex || '0');\n        \n        if (currentIndex === prevIndex + 1 && spans[i].previousSibling === spans[i-1]) {\n          currentGroup.push(spans[i]);\n        } else {\n          groups.push(currentGroup);\n          currentGroup = [spans[i]];\n        }\n      }\n      \n      groups.push(currentGroup);\n        }\n      \n      // 对每个连续组替换为文本节点\n      groups.forEach(group => {\n        if (group.length === 0) return;\n        \n        try {\n          const text = group.map(span => span.textContent).join('');\n          const textNode = document.createTextNode(text);\n          \n          // 替换第一个span，然后移除其余的\n          if (group[0].parentNode === parent) {\n            parent.replaceChild(textNode, group[0]);\n            for (let i = 1; i < group.length; i++) {\n              if (group[i].parentNode === parent) {\n                parent.removeChild(group[i]);\n              }\n            }\n          }\n        } catch (e) {\n            console.error(\"【节奏阅读】恢复文本时出错:\", e);\n        }\n      });\n    });\n    \n    // 清除字符元素数组\n      this.charElements = [];\n    },\n  \n  // 启动节奏阅读\n    start: function() {\n      console.log(\"【节奏阅读】启动中...\");\n      \n      // 检查是否正在进行页面转换\n      if (this.pageTransitionInProgress) {\n        console.log(\"【节奏阅读】页面转换正在进行中，延迟启动\");\n        setTimeout(() => this.start(), 500);\n        return;\n      }\n    \n    // 先停止已有的\n      this.stop(false);\n    \n    // 设置为活动状态\n      this.active = true;\n      setStorage('rhythmReadingActive', 'true');\n    \n    // 初始化文本\n      if (!this.initializeTextNodes()) {\n        console.error(\"【节奏阅读】无法初始化文本节点\");\n        return;\n      }\n\n      // 重要：始终从头开始阅读\n      this.currentIndex = 0;\n      this.readIndices.clear();\n      \n      // 添加速度滑块\n      this.addSpeedSlider();\n    \n    // 更新颜色\n      this.updateTextColors();\n    \n    // 滚动到开始位置\n      this.scrollToCurrentChar();\n    \n    // 设置阅读间隔\n      this.intervalId = setInterval(() => this.moveToNextChar(), this.speed);\n      \n      console.log(\"【节奏阅读】成功启动\");\n      \n      // 显示提示\n      this.showNotification(\"节奏阅读模式已启动\");\n      \n      // 劫持翻页函数 - 重要步骤\n      this.hijackPageTurningFunctions();\n      \n      // 设置页面导航事件监听\n      this.setupPageNavigationListeners();\n    },\n    \n    // 停止节奏阅读\n    stop: function(showNotification = true) {\n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n      }\n      \n      if (this.active) {\n        console.log(\"【节奏阅读】停止中...\");\n        this.active = false;\n        \n        // 仅当不是因翻页而停止时才清除活动状态\n        if (!this.pageTransitionInProgress) {\n          setStorage('rhythmReadingActive', 'false');\n        }\n        \n        // 恢复原始文本\n        this.restoreOriginalText();\n        \n        // 移除速度滑块\n        const slider = document.getElementById('rhythm-speed-slider');\n        if (slider) slider.remove();\n        \n        if (showNotification) {\n          this.showNotification(\"节奏阅读模式已停止\");\n        }\n      }\n    },\n    \n    // 显示通知\n    showNotification: function(message) {\n      let notification = document.getElementById('rhythm-notification');\n      if (notification) notification.remove();\n      \n      notification = document.createElement('div');\n      notification.id = 'rhythm-notification';\n      notification.textContent = message;\n      notification.style.position = 'fixed';\n      notification.style.top = '50%';\n      notification.style.left = '50%';\n      notification.style.transform = 'translate(-50%, -50%)';\n      notification.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';\n      notification.style.color = 'white';\n      notification.style.padding = '15px 25px';\n      notification.style.borderRadius = '5px';\n      notification.style.zIndex = '10001';\n      notification.style.fontSize = '18px';\n      \n      document.body.appendChild(notification);\n      \n      // 2秒后自动消失\n      setTimeout(() => {\n        if (notification && notification.parentNode) {\n          notification.parentNode.removeChild(notification);\n        }\n      }, 2000);\n    },\n    \n    // 劫持页面翻转函数 - 改进版本\n    hijackPageTurningFunctions: function() {\n      if (typeof window.changePage === 'function' && !window._originalChangePage) {\n        console.log(\"【节奏阅读】劫持changePage函数\");\n        window._originalChangePage = window.changePage;\n        \n        const self = this;\n        window.changePage = function(page) {\n          console.log(\"【节奏阅读】检测到changePage调用，参数:\", page);\n          \n          const wasActive = self.active;\n          self.pageTransitionInProgress = true;\n          \n          if (wasActive) {\n            self.stop(false);\n            setStorage('rhythmReadingActive', 'true'); \n            setStorage('rhythmReadingPending', 'true');\n            document.body.dataset.rhythmReadingActive = 'true';\n          }\n          \n          try {\n            if (page === undefined || page === null) {\n              console.warn('【节奏阅读】安全处理：page参数为空');\n              page = {};\n            }\n            \n            if (typeof page === 'object' && !page.something) {\n              console.log('【节奏阅读】添加空的something对象防止错误');\n              page.something = { active: false };\n            }\n            \n            window._originalChangePage(page);\n          } catch (err) {\n            console.error(\"【节奏阅读】翻页函数执行出错:\", err);\n            self.clickNextPageButton();\n          }\n          \n          setTimeout(() => {\n            self.pageTransitionInProgress = false;\n            \n            if (wasActive && getStorage('rhythmReadingPending') === 'true') {\n              setStorage('rhythmReadingPending', 'false');\n              console.log(\"【节奏阅读】翻页后重新启动\");\n              setTimeout(() => self.start(), 500);\n            }\n          }, 1000);\n        };\n      }\n    },\n    \n    // 设置页面导航事件监听 - 加强版\n    setupPageNavigationListeners: function() {\n      // 查找所有可能的翻页按钮\n      console.log(\"【节奏阅读】正在设置页面导航监听\");\n      \n      const self = this;\n      \n      // 使用事件委托来捕获所有可能的点击\n      document.addEventListener('click', function(e) {\n        // 检查点击的元素是否可能是翻页按钮\n        let target = e.target;\n        while (target && target !== document.body) {\n          // 检查是否是翻页元素\n          if (target.tagName === 'BUTTON' || target.tagName === 'A' || \n              target.getAttribute('role') === 'button') {\n            \n            const text = (target.textContent || '').trim().toLowerCase();\n            const ariaLabel = (target.getAttribute('aria-label') || '').toLowerCase();\n            \n            // 检查是否是翻页元素\n            if (text.includes('上一页') || text.includes('下一页') || \n                text.includes('prev') || text.includes('next') ||\n                ariaLabel.includes('page') || ariaLabel.includes('页') ||\n                text === '<' || text === '>' || text === '←' || text === '→') {\n              \n              if (self.active) {\n                console.log(`【节奏阅读】检测到可能的翻页元素点击: ${text || ariaLabel}`);\n                \n                // 标记页面转换开始\n                self.pageTransitionInProgress = true;\n                \n                // 保存状态到存储\n                setStorage('rhythmReadingActive', 'true');\n                setStorage('rhythmReadingPending', 'true');\n                document.body.dataset.rhythmReadingActive = 'true';\n                \n                // 停止当前的阅读\n                self.stop(false);\n                \n                // 添加延迟执行的监听器，确保数据在页面加载后恢复\n                setTimeout(() => {\n                  self.pageTransitionInProgress = false;\n                  \n                  if (getStorage('rhythmReadingPending') === 'true') {\n                    setStorage('rhythmReadingPending', 'false');\n                    self.start();\n                  }\n                }, 1500);\n              }\n              \n              break;\n            }\n          }\n          \n          target = target.parentNode;\n        }\n      });\n      \n      // 监听键盘导航事件\n      document.addEventListener('keydown', function(e) {\n        // 检查是否是翻页快捷键\n        if (['ArrowLeft', 'ArrowRight', 'PageUp', 'PageDown'].includes(e.key)) {\n          if (self.active) {\n            console.log(`【节奏阅读】检测到键盘翻页: ${e.key}`);\n            \n            // 保存状态到存储\n            setStorage('rhythmReadingActive', 'true');\n            setStorage('rhythmReadingPending', 'true');\n            \n            // 标记页面转换开始\n            self.pageTransitionInProgress = true;\n            \n            // 停止当前的阅读\n            self.stop(false);\n            \n            // 添加延迟执行的监听器\n            setTimeout(() => {\n              self.pageTransitionInProgress = false;\n              \n              if (getStorage('rhythmReadingPending') === 'true') {\n                setStorage('rhythmReadingPending', 'false');\n                self.start();\n              }\n            }, 1500);\n          }\n        }\n      });\n      \n      // 添加popstate监听器捕获浏览器前进/后退导航\n      window.addEventListener('popstate', function() {\n        if (self.active) {\n          console.log(\"【节奏阅读】检测到历史导航事件\");\n          \n          // 保存状态\n          setStorage('rhythmReadingActive', 'true');\n          setStorage('rhythmReadingPending', 'true');\n          \n          // 标记页面转换开始\n          self.pageTransitionInProgress = true;\n          \n          // 停止当前阅读\n          self.stop(false);\n          \n          // 延迟恢复\n          setTimeout(() => {\n            self.pageTransitionInProgress = false;\n            \n            if (getStorage('rhythmReadingPending') === 'true') {\n              setStorage('rhythmReadingPending', 'false');\n              self.start();\n            }\n          }, 1500);\n        }\n      });\n    },\n    \n    // 改进的自动翻页函数，更精确地处理状态保存\n    clickNextPageButton: function() {\n      console.log(\"【节奏阅读】尝试查找并点击下一页按钮\");\n      \n      // 查找下一页按钮\n      const nextPageSelectors = [\n        'button.next-page', \n        'button[aria-label=\"下一页\"]',\n        'a.next-page',\n        'a[aria-label=\"下一页\"]',\n        '.next-page',\n        '#next-page',\n        'button.next',\n        'a.next'\n      ];\n      \n      let nextPageButton = null;\n      \n      // 尝试通过选择器找到按钮\n      for (const selector of nextPageSelectors) {\n        try {\n          const elements = document.querySelectorAll(selector);\n          for (const el of elements) {\n            if (el.offsetParent !== null) { // 检查元素是否可见\n              console.log(`【节奏阅读】找到下一页按钮: ${selector}`);\n              nextPageButton = el;\n              break;\n            }\n          }\n          if (nextPageButton) break;\n        } catch (e) {\n          // 某些选择器可能不被支持，忽略错误\n        }\n      }\n      \n      // 如果没找到，尝试按文本内容查找\n      if (!nextPageButton) {\n        const buttons = document.querySelectorAll('button, a, div[role=\"button\"]');\n        for (const button of buttons) {\n          const text = button.textContent.trim().toLowerCase();\n          if ((text.includes('下一页') || text.includes('next') || text === '>' || text === '→') && \n              button.offsetParent !== null) {\n            console.log(`【节奏阅读】通过文本内容找到下一页按钮: ${text}`);\n            nextPageButton = button;\n            break;\n          }\n        }\n      }\n      \n      if (nextPageButton) {\n        console.log(\"【节奏阅读】模拟点击下一页按钮\");\n        \n        // 明确标记页面转换开始\n        this.pageTransitionInProgress = true;\n        \n        // 保存状态\n        setStorage('rhythmReadingActive', 'true');\n        setStorage('rhythmReadingPending', 'true');\n        document.body.dataset.rhythmReadingActive = 'true';\n        \n        // 恢复原始文本\n        this.restoreOriginalText();\n        \n        // 停止计时器\n        if (this.intervalId) {\n          clearInterval(this.intervalId);\n          this.intervalId = null;\n        }\n        \n        // 模拟点击\n        nextPageButton.click();\n        \n        // 延迟结束页面转换状态\n        setTimeout(() => {\n          this.pageTransitionInProgress = false;\n        }, 1000);\n        \n        return true;\n  } else {\n        console.log(\"【节奏阅读】未找到下一页按钮\");\n        return false;\n      }\n    }\n  };\n  \n  // 暴露到全局，以便调试和直接调用\n  window.rhythmReader = rhythmReader;\n  \n  // 额外添加一个全局安全函数用于检查节奏阅读状态\n  window.isRhythmActive = function() {\n    return rhythmReader.active || getStorage('rhythmReadingActive') === 'true';\n  };\n  \n  // 添加一个停止函数供外部安全调用\n  window.stopRhythmSafely = function() {\n    try {\n      setStorage('rhythmReadingActive', 'false');\n      setStorage('rhythmReadingPending', 'false');\n      \n      if (rhythmReader && typeof rhythmReader.stop === 'function') {\n        rhythmReader.stop();\n      }\n    } catch (e) {\n      console.error(\"停止节奏阅读出错\", e);\n    }\n  };\n  \n  // 设置页面加载监听器，确保页面转换后能恢复\n  function setupPageLoadListener() {\n    // DOM内容加载和完全加载的事件监听...\n    \n    // 改进的页面变化监测\n    const observer = new MutationObserver(function(mutations) {\n      // 检测到内容变化且有待处理的节奏阅读时\n      if (getStorage('rhythmReadingPending') === 'true') {\n        const contentChanges = mutations.some(m => \n          m.type === 'childList' && m.addedNodes.length > 5); // 使用更高的阈值，确保是真正的内容变化\n          \n        if (contentChanges) {\n          console.log(\"【节奏阅读】检测到大量DOM变化，可能是页面切换\");\n          \n          // 给页面一点时间稳定下来\n          setTimeout(() => {\n            if (getStorage('rhythmReadingPending') === 'true') {\n              console.log(\"【节奏阅读】页面内容变化后，尝试恢复阅读\");\n              setStorage('rhythmReadingPending', 'false');\n              \n              if (!rhythmReader.pageTransitionInProgress) {\n                rhythmReader.start();\n              }\n            }\n          }, 800);\n        }\n      }\n    });\n    \n    // 观察body变化\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  }\n  \n  // 设置页面加载监听器\n  setupPageLoadListener();\n  \n  // 检查是否需要立即恢复阅读状态\n  if (getStorage('rhythmReadingActive') === 'true') {\n    console.log(\"【节奏阅读】检测到之前的阅读状态，准备恢复\");\n    setStorage('rhythmReadingPending', 'false');\n    \n    setTimeout(function() {\n      rhythmReader.start();\n    }, 800);\n  }\n  \n  console.log(\"【节奏阅读】初始化完成\");\n})();\n\nconst App = () => {\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  \n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n  }, []);\n  \n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async (file) => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      \n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n      \n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n      \n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n  \n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({ scale: 1.0 });\n      \n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      \n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      \n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async (textContent) => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n    \n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n    \n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n    \n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    \n    const lines = [...lineMap.values()];\n    \n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    \n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    \n    return hasTocKeywords || hasPageNumberPatterns || (shortLineRatio > 0.7 && numberLineRatio > 0.3);\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n    \n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    \n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n      \n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n      \n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n      \n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    \n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && \n              x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = (text) => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    \n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      \n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        \n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    \n    return result;\n  };\n\n  // 修改processContentPage函数\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      \n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch(mode) {\n        case 'normal':\n          // 普通模式 - 简单分段显示\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'static':\n          // 静态高亮模式 - 应用词性标注和颜色高亮\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'follow-mouse':\n          // 鼠标跟随高亮模式 - 分段落但不预先高亮，由鼠标事件触发高亮\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      \n      setContent(processedContent);\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async (file) => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n    \n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain') {\n      handleTxtFile(file);\n    } else {\n      alert('请上传PDF或TXT文件');\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = (container) => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    \n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n      \n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n      \n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          \n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n          \n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width/2,  // 水平中心\n            y: rect.bottom,               // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n    \n    // 过滤无效位置并排序\n    return positions\n      .filter(p => p.char.trim() !== '')\n      .sort((a, b) => {\n        // 先按行排序，同行按列排序\n        const yDiff = a.y - b.y;\n        if (Math.abs(yDiff) > 5) { // 5px阈值判断是否同一行\n          return yDiff;\n        }\n        return a.x - b.x;\n      });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    \n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - (containerVisibleHeight / 2);\n      \n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - (window.innerHeight / 2);\n      \n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    \n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n    \n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    \n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n    \n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length || // 已到末尾\n          positions[nextIndex].char.trim() === '' || // 下一个是空白\n          positions[nextIndex].y > charPosition.y + 5) { // 下一个在新行\n        return true;\n      }\n    }\n    \n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n    \n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n      \n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || \n          current.y > prev.y + 5) { // 有明显换行\n        break;\n      }\n      \n      start--;\n    }\n    \n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n      \n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      \n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n      \n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      \n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (window.autoReader.charPositions.length === 0) {\n      if (window.currentPage < window.totalPages) {\n        window.changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 重置索引到开头\n    window.autoReader.currentIndex = 0;\n    \n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    \n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n    \n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n    \n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none';\n      highlight.style.zIndex = '998';\n      contentContainer.appendChild(highlight);\n    }\n    \n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight &&\n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n    \n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20;\n    \n    // 尝试获取实际行高\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(window.autoReader.charPositions[i].y - window.autoReader.charPositions[i-1].y);\n        if (yDiff > 5) {\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n    \n    // 记录上次滚动的位置\n    let lastScrolledY = -1;\n    const scrollSafeZone = lineHeight * 2.5;\n    \n    // 设置字符大小的估计值\n    let charWidth = 20;\n    let charHeight = lineHeight * 0.8;\n    \n    // 尝试估计字符宽度\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        if (window.autoReader.charPositions[i].x !== window.autoReader.charPositions[i-1].x) {\n          const xDiff = Math.abs(window.autoReader.charPositions[i].x - window.autoReader.charPositions[i-1].x);\n          if (xDiff > 0 && xDiff < 50) {\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    \n    window.autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (window.autoReader.currentIndex < window.autoReader.charPositions.length && \n             window.autoReader.charPositions[window.autoReader.currentIndex]?.char.trim() === '') {\n        window.autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (window.autoReader.currentIndex >= window.autoReader.charPositions.length) {\n        if (window.currentPage < window.totalPages) {\n          window.changePage(1);\n          clearInterval(window.autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n\n      const pos = window.autoReader.charPositions[window.autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      \n      if (cursor && highlight) {\n        const contentRect = contentContainer.getBoundingClientRect();\n        \n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        \n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        \n        highlight.style.left = `${relativeX - charWidth/2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n        \n        // 滚动处理\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        \n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          \n          if (isContainerScrollable) {\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n            \n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            \n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = relativeY;\n            }\n          } else {\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n            \n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            \n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      \n      window.autoReader.currentIndex++;\n      \n    }, window.autoReader.speed);\n    \n    // 在停止自动阅读时清除所有高亮\n    window.autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n      \n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n      \n      // 调用清理函数\n      if (window.autoReader.cleanup) {\n        window.autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n    \n    // 重置翻页状态\n    window.autoReader.isPageChanging = false;\n    \n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n    \n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n    \n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n    \n    // 收集字符位置\n    window.autoReader.charPositions = getAllCharacterPositions(content);\n    \n    // 如果当前页没有内容，尝试翻页\n    if (window.autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !window.autoReader.isPageChanging) {\n        window.autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async (e) => {\n    const newMode = e.target.value;\n    const prevMode = readingMode;\n    \n    // 如果是从裸眼3D模式或舒适3D模式切换出来，恢复背景色\n    if (prevMode === 'naked-eye-3d' || prevMode === 'comfortable-3d') {\n      restoreDarkBackground();\n    }\n    \n    // 停止当前可能正在运行的自动阅读和节奏阅读\n    stopAutoReader();\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    if (window.flashReader && window.flashReader.cleanup) {\n      window.flashReader.cleanup();\n    }\n    \n    // 清理旧模式\n    cleanupDOM();\n    \n    // 更新状态\n    setReadingMode(newMode);\n    \n    // 应用新模式\n    if (pdfDocument && currentPage > 0) {\n      try {\n        const page = await pdfDocument.getPage(currentPage);\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        let processedContent = '';\n        \n        // 应用对应模式的文本处理\n        switch(newMode) {\n          case 'follow-mouse':\n            processedContent = formatTextForMouseFollow(extractedText);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlight(extractedText);\n            break;\n          case 'auto-reader':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          case 'rhythm':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          case 'naked-eye-3d':\n            processedContent = applyNakedEye3dEffect(extractedText);\n            setTimeout(applyDarkBackground, 50);\n            break;\n          case 'comfortable-3d':\n            processedContent = applyComfortable3dEffect(extractedText);\n            setTimeout(applyDarkBackground, 50);\n            break;\n          case 'flash-reading':\n            addFlashReadingStyles();\n            processedContent = createFlashReadingContent(extractedText);\n            setTimeout(applyDarkBackground, 50);\n            setTimeout(initializeFlashReading, 100);\n            break;\n          default:\n            processedContent = formatTextToHtml(extractedText);\n        }\n        \n        const contentArea = document.querySelector('.page-content');\n        if (contentArea) {\n          contentArea.textContent = '';\n          contentArea.innerHTML = processedContent;\n          \n          // 滚动到页面顶部\n          window.scrollTo(0, 0);\n          if (contentArea.scrollTo) {\n            contentArea.scrollTo(0, 0);\n          }\n          \n          // 立即初始化对应模式\n          if (newMode === 'auto-reader') {\n            setTimeout(initializeAutoReader, 50);\n          } else if (newMode === 'follow-mouse') {\n            setTimeout(initializeMouseFollow, 50);\n          } else if (newMode === 'rhythm') {\n            setTimeout(() => {\n              if (window.rhythmReader) {\n                window.rhythmReader.start();\n              }\n            }, 50);\n          } else if (newMode === 'naked-eye-3d') {\n            setTimeout(() => {\n              initializeNakedEye3D();\n              applyDarkBackground();\n            }, 50);\n          } else if (newMode === 'comfortable-3d') {\n            setTimeout(() => {\n              applyDarkBackground();\n            }, 50);\n          }\n        }\n      } catch (error) {\n        console.error('应用新阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 首先确保移除鼠标跟随监听器\n    removeMouseFollowListeners();\n    \n    // 清理自动阅读器\n    if (window.autoReader && window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n    }\n    \n    // 清理节奏阅读器\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    \n    // 清理闪读器\n    if (window.flashReader) {\n      window.flashReader.cleanup();\n    }\n    \n    // 清理裸眼3D效果\n    const threeDElements = document.querySelectorAll('.naked-eye-3d');\n    threeDElements.forEach(el => el.remove());\n    \n    // 清理舒适3D效果\n    const comfortable3DElements = document.querySelectorAll('.emboss-3d-text, .float-3d-text, .gradient-3d-text');\n    comfortable3DElements.forEach(el => el.remove());\n    \n    // 清理闪读模式元素\n    const flashReadingElements = document.querySelectorAll('.flash-reading-container, .flash-reading-display, .flash-reading-controls');\n    flashReadingElements.forEach(el => el.remove());\n    \n    // 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll(\n      '.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line, .rhythm-char'\n    );\n    highlights.forEach(el => {\n      if (el.parentNode) el.parentNode.removeChild(el);\n    });\n    \n    // 彻底替换内容区域以移除所有事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 深度克隆内容，但不克隆事件监听器\n      const contentHTML = contentArea.innerHTML;\n      const newContentArea = contentArea.cloneNode(false);\n      newContentArea.innerHTML = contentHTML;\n      \n      if (contentArea.parentNode) {\n        contentArea.parentNode.replaceChild(newContentArea, contentArea);\n      }\n    }\n    \n    // 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 移除所有特殊标记和样式\n      paragraph.removeAttribute('data-follow');\n      paragraph.removeAttribute('style');\n      \n      // 清理特殊span标签\n      paragraph.innerHTML = paragraph.innerHTML\n        .replace(/<span class=\"text-line\"[^>]*>/g, '')\n        .replace(/<span class=\"rhythm-char\"[^>]*>/g, '')\n        .replace(/<span class=\"line-highlight[^\"]*\"[^>]*>/g, '')\n        .replace(/<span class=\"mouse-highlight[^\"]*\"[^>]*>/g, '')\n        .replace(/<\\/span>/g, '');\n    });\n    \n    // 移除特殊UI元素\n    const elementsToRemove = [\n      'rhythm-speed-slider',\n      'rhythm-notification',\n      'auto-reader-cursor',\n      'auto-reader-highlight'\n    ];\n    \n    elementsToRemove.forEach(id => {\n      const element = document.getElementById(id);\n      if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    });\n    \n    // 移除暗色背景\n    document.body.classList.remove('dark-background');\n  };\n\n  const handleAutoScroll = () => {\n    window.autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = (e) => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    // 清除所有现有高亮\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n    \n    const mouseTarget = document.elementFromPoint(e.clientX, e.clientY);\n    \n    if (mouseTarget && \n       (mouseTarget.classList.contains('pdf-paragraph') || \n        mouseTarget.tagName === 'P' || \n        mouseTarget.tagName === 'SPAN')) {\n      \n      const targetParagraph = mouseTarget.closest('.pdf-paragraph');\n      if (!targetParagraph) return;\n      \n      // 获取段落文本节点\n      const textNode = getTextNodeAtPosition(targetParagraph, e.clientX, e.clientY);\n      if (!textNode) return;\n      \n      // 获取精确的行位置和尺寸\n      const range = document.createRange();\n      range.selectNodeContents(textNode);\n      const rects = range.getClientRects();\n      \n      // 找到鼠标所在的具体行\n      let targetRect = null;\n      for (let i = 0; i < rects.length; i++) {\n        const rect = rects[i];\n        if (e.clientY >= rect.top && e.clientY <= rect.bottom) {\n          targetRect = rect;\n          break;\n        }\n      }\n      \n      if (targetRect) {\n        // 创建高亮元素\n        const lineHighlight = document.createElement('div');\n        lineHighlight.className = 'line-highlight mouse-highlight';\n        \n        // 计算相对于段落的位置\n        const paragraphRect = targetParagraph.getBoundingClientRect();\n        const top = targetRect.top - paragraphRect.top;\n        const left = targetRect.left - paragraphRect.left;\n        \n        // 设置高亮样式\n        lineHighlight.style.position = 'absolute';\n        lineHighlight.style.left = `${left}px`;\n        lineHighlight.style.top = `${top}px`;\n        lineHighlight.style.width = `${targetRect.width}px`;\n        lineHighlight.style.height = `${targetRect.height}px`;\n        lineHighlight.style.pointerEvents = 'none';\n        lineHighlight.style.backgroundColor = 'rgba(255, 165, 0, 0.3)';\n        lineHighlight.style.borderRadius = '4px';\n        lineHighlight.style.boxShadow = '0 0 8px rgba(255, 165, 0, 0.5)';\n        lineHighlight.style.zIndex = '5';\n        lineHighlight.style.transition = 'all 0.1s ease';\n        \n        // 确保段落有相对定位\n          targetParagraph.style.position = 'relative';\n        targetParagraph.appendChild(lineHighlight);\n      }\n    }\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 专门用于移除鼠标跟随事件的函数\n  const removeMouseFollowListeners = () => {\n    // 移除记录的所有监听器\n    if (window.eventTracker && window.eventTracker.mouseFollowHandlers) {\n      window.eventTracker.mouseFollowHandlers.forEach(({element, event, handler}) => {\n        if (element && element.removeEventListener) {\n          element.removeEventListener(event, handler);\n        }\n      });\n      window.eventTracker.mouseFollowHandlers = [];\n    }\n    \n    // 为安全起见，尝试从document和内容区域移除通用处理函数\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.removeEventListener('mousemove', handleMouseMove);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    }\n    \n    document.removeEventListener('mousemove', handleMouseMove);\n    \n    // 清除所有当前高亮\n    clearAllHighlights();\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n    addNakedEye3DStyles();\n    addComfortable3DStyles();\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 新增延迟补偿\n    setTimeout(() => {\n      addMouseFollowListeners();\n      \n      // 强制触发重排\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        void contentArea.offsetHeight;\n        \n        // 模拟鼠标移动事件\n        const fakeEvent = new MouseEvent('mousemove', {\n          clientX: window.innerWidth / 2,\n          clientY: window.innerHeight / 2,\n          bubbles: true\n        });\n        contentArea.dispatchEvent(fakeEvent);\n      }\n    }, 50);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = (delta) => {\n    window.autoReader.speed = Math.max(100, window.autoReader.speed + delta);\n    setAutoReaderState(prev => ({ ...prev, speed: window.autoReader.speed }));\n    \n    if (window.autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async (delta) => {\n    const newPage = currentPage + delta;\n    \n    if (newPage < 1 || newPage > totalPages) return;\n    \n    const wasAutoReading = readingMode === 'auto-reader' && window.autoReader.intervalId;\n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n    const wasFlashReading = readingMode === 'flash-reading' && window.flashReader && window.flashReader.isPlaying;\n    \n    // 如果正在自动阅读或节奏阅读，先停止\n    if (wasAutoReading) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n    }\n    \n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    \n    if (wasFlashReading && window.flashReader) {\n      window.flashReader.cleanup();\n    }\n    \n    // 更新页码\n    setCurrentPage(newPage);\n    \n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n      // 按当前阅读模式处理内容\n      let processedContent = '';\n      switch(readingMode) {\n        case 'follow-mouse':\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'auto-reader':\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'rhythm':\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'naked-eye-3d':\n          processedContent = applyNakedEye3dEffect(extractedText);\n          break;\n        case 'comfortable-3d':\n          processedContent = applyComfortable3dEffect(extractedText);\n          break;\n        case 'flash-reading':\n          processedContent = createFlashReadingContent(extractedText);\n          setTimeout(() => {\n            initializeFlashReading();\n            if (wasFlashReading) {\n              const startBtn = document.getElementById('flash-reading-start');\n              if (startBtn) startBtn.click();\n            }\n          }, 100);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      \n      // 更新页面内容\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        contentArea.textContent = '';\n        contentArea.innerHTML = processedContent;\n        \n        // 滚动到页面顶部\n        window.scrollTo(0, 0);\n        if (contentArea.scrollTo) {\n          contentArea.scrollTo(0, 0);\n        }\n        \n        // 重新启动对应的阅读模式\n        if (wasAutoReading) {\n          setTimeout(initializeAutoReader, 50);\n        } else if (wasRhythmReading && window.rhythmReader) {\n          setTimeout(() => {\n            window.rhythmReader.start();\n          }, 50);\n        } else if (readingMode === 'naked-eye-3d') {\n          setTimeout(() => {\n            initializeNakedEye3D();\n            applyDarkBackground();\n          }, 50);\n        } else if (readingMode === 'comfortable-3d') {\n          setTimeout(() => {\n            applyDarkBackground();\n          }, 50);\n        }\n      }\n    } catch (error) {\n      console.error('翻页失败:', error);\n    }\n  };\n\n  // 修改后的监听器设置函数\n  const addMouseFollowListeners = () => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    \n    // 清理旧的监听器\n    contentArea.removeEventListener('mousemove', handleMouseMove);\n    contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    \n    // 添加新的监听器\n    contentArea.addEventListener('mousemove', handleMouseMove);\n    contentArea.addEventListener('mouseleave', clearAllHighlights);\n    \n    // 确保所有段落都有正确的样式\n    document.querySelectorAll('.pdf-paragraph').forEach(p => {\n      p.style.position = 'relative';\n      p.style.lineHeight = '1.5';\n    });\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = (text) => {\n    // 分段\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    // 创建HTML内容\n    let htmlContent = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      htmlContent += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 应用静态高亮\n  const applyStaticHighlight = (text) => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    let htmlContent = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      // 新增强制清理逻辑\n      const cleanParagraph = paragraph\n        .replace(/<span class=\"text-line\">/g, '')\n        .replace(/<\\/span>/g, '');\n      \n      const highlightedText = processTextWithHighlight(cleanParagraph);\n      htmlContent += `<p class=\"pdf-paragraph\">${highlightedText}</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 格式化文本用于鼠标跟随高亮模式\n  const formatTextForMouseFollow = (text) => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    let htmlContent = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      // 将段落分割成行\n      const lines = paragraph.split('\\n').filter(line => line.trim());\n      htmlContent += `<p class=\"pdf-paragraph\" data-follow=\"true\" style=\"position: relative; line-height: 1.5;\">`;\n      \n      lines.forEach((line, i) => {\n        // 每行用span包裹\n        htmlContent += `<span class=\"text-line\" style=\"display: block;\">${line}</span>`;\n      });\n      \n      htmlContent += `</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 强制初始化字符位置（这是关键步骤！）\n  function forceInitReader() {\n    console.log(\"强制初始化阅读器...\");\n    \n    // 1. 如果autoReader或charPositions不存在，创建它们\n    if (typeof window.autoReader === 'undefined') {\n      window.autoReader = {\n        charPositions: [],\n        intervalId: null,\n        currentIndex: 0,\n        speed: 30\n      };\n    }\n    \n    // 2. 如果没有字符位置数据，尝试触发它的创建\n    if (!window.autoReader.charPositions || window.autoReader.charPositions.length === 0) {\n      console.log(\"未找到字符位置数据，尝试强制创建...\");\n      \n      // 直接使用scanTextPositionsSimple函数\n      scanTextPositionsSimple();\n    }\n    \n    return window.autoReader.charPositions && window.autoReader.charPositions.length > 0;\n  }\n\n  // 简单的文本位置扫描函数\n  function scanTextPositionsSimple() {\n    console.log(\"使用简单文本扫描...\");\n    \n    window.autoReader.charPositions = [];\n    const contentElement = document.querySelector('.page-content');\n    if (!contentElement) {\n      console.error(\"找不到内容容器\");\n      return;\n    }\n    \n    // 递归处理文本节点\n    function processTextNodes(element) {\n      if (element.nodeType === Node.TEXT_NODE) {\n        const text = element.textContent;\n        if (!text || text.trim() === '') return;\n        \n        // 获取元素的位置信息\n        const range = document.createRange();\n        \n        // 为每个字符创建一个独立的范围\n        for (let i = 0; i < text.length; i++) {\n          try {\n            range.setStart(element, i);\n            range.setEnd(element, i + 1);\n            \n            const rect = range.getBoundingClientRect();\n            if (rect.width > 0 && rect.height > 0) {\n              window.autoReader.charPositions.push({\n                char: text[i],\n                x: rect.left + rect.width/2,\n                y: rect.top + rect.height/2,\n                element: element.parentElement\n              });\n            }\n          } catch (e) {\n            console.warn(\"无法处理字符\", e);\n          }\n        }\n      } else if (element.nodeType === Node.ELEMENT_NODE) {\n        // 递归处理子元素\n        for (const child of element.childNodes) {\n          processTextNodes(child);\n        }\n      }\n    }\n    \n    processTextNodes(contentElement);\n    console.log(\"扫描完成，找到字符数量:\", window.autoReader.charPositions.length);\n  }\n\n  // 处理文本应用裸眼3D效果\n  const applyNakedEye3dEffect = (text) => {\n    // 分段落处理\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    let htmlContent = '<div class=\"pdf-content naked-eye-3d-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      // 清理可能存在的标签\n      const cleanParagraph = paragraph\n        .replace(/<span[^>]*>/g, '')\n        .replace(/<\\/span>/g, '');\n      \n      // 分词处理，为一小部分词添加3D效果\n      const words = cleanParagraph.split(/(\\s+|[,.!?，。！？])/);\n      let processedText = '';\n      \n      words.forEach(word => {\n        if (!word || /^\\s+$/.test(word) || /^[,.!?，。！？]$/.test(word)) {\n          // 保持空格和标点原样，但使其为白色\n          processedText += `<span class=\"normal-text\">${word}</span>`;\n          return;\n        }\n        \n        // 约20%的单词应用3D效果\n        if (Math.random() < 0.2) {\n          // 创建裸眼3D效果\n          processedText += `<span class=\"naked-eye-3d-text\">${word}</span>`;\n        } else {\n          // 非3D文字显示为白色\n          processedText += `<span class=\"normal-text\">${word}</span>`;\n        }\n      });\n      \n      // 包装成段落，应用ADHD友好的样式\n      htmlContent += `<p class=\"pdf-paragraph adhd-friendly\">${processedText}</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 添加裸眼3D样式\n  const addNakedEye3DStyles = () => {\n    // 避免重复添加\n    if (document.getElementById('naked-eye-3d-styles')) return;\n    \n    const style = document.createElement('style');\n    style.id = 'naked-eye-3d-styles';\n    style.textContent = `\n      /* 深色背景以确保白色文字可见 */\n      .naked-eye-3d-content {\n        background-color: #222;\n        padding: 20px;\n        border-radius: 8px;\n      }\n      \n      /* 普通文字（白色） */\n      .normal-text {\n        color: white;\n        display: inline-block;\n        margin: 0;\n        padding: 0;\n      }\n      \n      /* 3D文字基本样式 */\n      .naked-eye-3d-text {\n        position: relative;\n        display: inline-block;\n        transform-style: preserve-3d;\n        color: white;  /* 基础颜色也是白色 */\n      }\n      \n      /* 3D效果 - 红色偏移 */\n      .naked-eye-3d-text::before {\n        content: attr(data-text);\n        position: absolute;\n        top: 0;\n        left: 0;\n        z-index: -1;\n        color: rgba(255, 0, 0, 0.8);\n        transform: translateX(-3px);\n      }\n      \n      /* 3D效果 - 青色偏移 */\n      .naked-eye-3d-text::after {\n        content: attr(data-text);\n        position: absolute;\n        top: 0;\n        left: 0;\n        z-index: -1;\n        color: rgba(0, 255, 255, 0.8);\n        transform: translateX(3px);\n      }\n      \n      /* ADHD友好样式 */\n      .adhd-friendly {\n        font-size: 1.1em;\n        line-height: 1.8;\n        color: white;\n        padding: 15px 0;\n      }\n    `;\n    document.head.appendChild(style);\n  };\n\n  // 在裸眼3D模式初始化后处理元素\n  const initializeNakedEye3D = () => {\n    // 为裸眼3D文本元素添加文本内容作为data属性\n    document.querySelectorAll('.naked-eye-3d-text').forEach(el => {\n      el.setAttribute('data-text', el.textContent);\n    });\n    \n    // 确保深色背景已应用\n    applyDarkBackground();\n  };\n\n  // 在切换到裸眼3D模式时应用深色背景\n  const applyDarkBackground = () => {\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.style.backgroundColor = '#222';\n    }\n  };\n\n  // 在离开裸眼3D模式时恢复背景\n  const restoreDarkBackground = () => {\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.style.backgroundColor = '';\n    }\n  };\n\n  // 添加改进的3D文字样式\n  const addComfortable3DStyles = () => {\n    // 避免重复添加\n    if (document.getElementById('comfortable-3d-styles')) return;\n    \n    const style = document.createElement('style');\n    style.id = 'comfortable-3d-styles';\n    style.textContent = `\n      /* 深色背景 */\n      .comfortable-3d-content {\n        background-color: #222;\n        padding: 20px;\n        border-radius: 8px;\n      }\n      \n      /* 普通文字（白色） */\n      .normal-text {\n        color: white;\n        display: inline-block;\n        margin: 0;\n        padding: 0;\n      }\n      \n      /* 柔和浮雕效果 */\n      .emboss-3d-text {\n        display: inline-block;\n        color: #ff0000;\n        text-shadow: \n          -1px -1px 1px rgba(255,0,0,0.6),\n          1px 1px 1px rgba(255,0,0,0.6);\n        position: relative;\n        font-weight: bold;\n        margin: 0;\n        padding: 0;\n      }\n      \n      /* 悬浮效果 */\n      .float-3d-text {\n        display: inline-block;\n        color: #ff0000;\n        position: relative;\n        transform: translateY(-2px);\n        text-shadow: 0 4px 3px rgba(255,0,0,0.5);\n        margin: 0;\n        padding: 0;\n      }\n      \n      /* 渐变效果 */\n      .gradient-3d-text {\n        display: inline-block;\n        background: linear-gradient(to bottom, #ff0000 30%, #ff6666 100%);\n        -webkit-background-clip: text;\n        background-clip: text;\n        -webkit-text-fill-color: transparent;\n        text-fill-color: transparent;\n        text-shadow: 0px 2px 2px rgba(255,0,0,0.2);\n        font-weight: bold;\n        margin: 0;\n        padding: 0;\n      }\n      \n      /* ADHD友好样式 */\n      .adhd-friendly {\n        font-size: 1.1em;\n        line-height: 1.8;\n        color: white;\n        padding: 15px 0;\n      }\n    `;\n    document.head.appendChild(style);\n  };\n\n  // 处理文本应用多种柔和3D效果\n  const applyComfortable3dEffect = (text) => {\n    // 分段落处理\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    let htmlContent = '<div class=\"pdf-content comfortable-3d-content\">';\n    \n    // 3D效果类型数组\n    const effectClasses = ['emboss-3d-text', 'float-3d-text', 'gradient-3d-text'];\n    \n    paragraphs.forEach(paragraph => {\n      // 清理可能存在的标签\n      const cleanParagraph = paragraph\n        .replace(/<span[^>]*>/g, '')\n        .replace(/<\\/span>/g, '');\n      \n      // 分词处理\n      const words = cleanParagraph.split(/(\\s+|[,.!?，。！？])/);\n      let processedText = '';\n      \n      words.forEach(word => {\n        if (!word || /^\\s+$/.test(word) || /^[,.!?，。！？]$/.test(word)) {\n          // 保持空格和标点原样，但使其为白色\n          processedText += `<span class=\"normal-text\">${word}</span>`;\n          return;\n        }\n        \n        // 约20%的单词应用3D效果\n        if (Math.random() < 0.2) {\n          // 随机选择一种3D效果\n          const effectClass = effectClasses[Math.floor(Math.random() * effectClasses.length)];\n          processedText += `<span class=\"${effectClass}\">${word}</span>`;\n        } else {\n          // 非3D文字显示为白色\n          processedText += `<span class=\"normal-text\">${word}</span>`;\n        }\n      });\n      \n      // 包装成段落，应用ADHD友好的样式\n      htmlContent += `<p class=\"pdf-paragraph adhd-friendly\">${processedText}</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 添加闪读模式样式\n  const addFlashReadingStyles = () => {\n    if (document.getElementById('flash-reading-styles')) return;\n    \n    const style = document.createElement('style');\n    style.id = 'flash-reading-styles';\n    style.textContent = `\n      .flash-reading-container {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        height: 80vh;\n        width: 100%;\n        background-color: #222;\n        color: white;\n      }\n      \n      .flash-reading-display {\n        font-size: 2em;\n        min-height: 3em;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        text-align: center;\n        padding: 20px;\n        margin: 40px 0;\n        width: 80%;\n        max-width: 800px;\n        border-radius: 10px;\n        background-color: rgba(255,255,255,0.05);\n        transition: background-color 0.3s ease;\n      }\n      \n      @keyframes flash-in {\n        0% { opacity: 0; transform: scale(0.95); }\n        100% { opacity: 1; transform: scale(1); }\n      }\n      \n      .flash-reading-animate {\n        animation: flash-in 0.3s ease forwards;\n      }\n      \n      .flash-reading-controls {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        width: 80%;\n        max-width: 600px;\n        background-color: rgba(255,255,255,0.1);\n        padding: 20px;\n        border-radius: 10px;\n      }\n      \n      .flash-reading-slider-container {\n        width: 100%;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        margin-bottom: 15px;\n      }\n      \n      .flash-reading-slider {\n        width: 100%;\n        margin: 10px 0;\n      }\n      \n      .flash-reading-buttons {\n        display: flex;\n        gap: 10px;\n        margin-top: 15px;\n      }\n      \n      .flash-reading-button {\n        padding: 8px 16px;\n        background-color: #4CAF50;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        cursor: pointer;\n        font-size: 16px;\n      }\n      \n      .flash-reading-button:hover {\n        background-color: #3e8e41;\n      }\n      \n      .flash-reading-button.pause {\n        background-color: #f44336;\n      }\n      \n      .flash-reading-button.pause:hover {\n        background-color: #d32f2f;\n      }\n      \n      .flash-reading-stats {\n        margin-top: 15px;\n        font-size: 14px;\n        color: #aaa;\n      }\n    `;\n    document.head.appendChild(style);\n  };\n\n  // 将文本分割成句子\n  const splitTextIntoSentences = (text) => {\n    // 匹配任意标点符号\n    const punctuationPattern = /[,.!?，。！？；;：:、]/g;\n    const sentences = [];\n    let lastIndex = 0;\n    \n    let match;\n    while ((match = punctuationPattern.exec(text)) !== null) {\n      const endIndex = match.index + 1; // 包含标点符号\n      const sentence = text.slice(lastIndex, endIndex).trim();\n      \n      if (sentence) {\n        sentences.push(sentence);\n      }\n      \n      lastIndex = endIndex;\n    }\n    \n    // 处理剩余的文本\n    if (lastIndex < text.length) {\n      const remainingText = text.slice(lastIndex).trim();\n      if (remainingText) {\n        sentences.push(remainingText);\n      }\n    }\n    \n    return sentences;\n  };\n\n  // 创建闪读模式的HTML结构\n  const createFlashReadingContent = (text) => {\n    const sentences = splitTextIntoSentences(text);\n    \n    window.flashReader = {\n      sentences: sentences,\n      currentIndex: 0,\n      isPlaying: false,\n      speed: 1000,\n      intervalId: null\n    };\n    \n    let htmlContent = `\n      <div class=\"flash-reading-container\">\n        <div id=\"flash-reading-display\" class=\"flash-reading-display\">\n          点击\"开始\"按钮开始闪读\n        </div>\n        \n        <div class=\"flash-reading-controls\">\n          <div class=\"flash-reading-slider-container\">\n            <label for=\"flash-reading-speed\">\n              速度: <span id=\"flash-reading-speed-value\">1000ms</span>\n            </label>\n            <input \n              type=\"range\" \n              id=\"flash-reading-speed\" \n              class=\"flash-reading-slider\" \n              min=\"200\" \n              max=\"3000\" \n              step=\"100\" \n              value=\"1000\"\n            >\n          </div>\n          \n          <div class=\"flash-reading-buttons\">\n            <button id=\"flash-reading-start\" class=\"flash-reading-button\">开始</button>\n            <button id=\"flash-reading-pause\" class=\"flash-reading-button pause\" disabled>暂停</button>\n            <button id=\"flash-reading-prev\" class=\"flash-reading-button\">上一句</button>\n            <button id=\"flash-reading-next\" class=\"flash-reading-button\">下一句</button>\n          </div>\n          \n          <div class=\"flash-reading-stats\">\n            进度: <span id=\"flash-reading-progress\">0/${sentences.length}</span>\n          </div>\n        </div>\n      </div>\n    `;\n    \n    return htmlContent;\n  };\n\n  // 初始化闪读模式的控制逻辑\n  const initializeFlashReading = () => {\n    const displayEl = document.getElementById('flash-reading-display');\n    const speedSlider = document.getElementById('flash-reading-speed');\n    const speedValue = document.getElementById('flash-reading-speed-value');\n    const startBtn = document.getElementById('flash-reading-start');\n    const pauseBtn = document.getElementById('flash-reading-pause');\n    const prevBtn = document.getElementById('flash-reading-prev');\n    const nextBtn = document.getElementById('flash-reading-next');\n    const progressEl = document.getElementById('flash-reading-progress');\n    \n    if (!displayEl || !speedSlider || !speedValue || !startBtn || \n        !pauseBtn || !prevBtn || !nextBtn || !progressEl) {\n      console.error('闪读模式初始化失败：缺少必要的DOM元素');\n      return;\n    }\n    \n    const reader = window.flashReader;\n    if (!reader || !Array.isArray(reader.sentences) || reader.sentences.length === 0) {\n      displayEl.textContent = '没有可用的文本内容';\n      return;\n    }\n    \n    const updateProgress = () => {\n      progressEl.textContent = `${reader.currentIndex + 1}/${reader.sentences.length}`;\n    };\n    \n    const displayCurrentSentence = () => {\n      if (reader.currentIndex >= 0 && reader.currentIndex < reader.sentences.length) {\n        displayEl.classList.remove('flash-reading-animate');\n        displayEl.textContent = reader.sentences[reader.currentIndex];\n        void displayEl.offsetWidth;\n        displayEl.classList.add('flash-reading-animate');\n        updateProgress();\n      }\n    };\n    \n    const advanceToNextSentence = () => {\n      if (reader.currentIndex < reader.sentences.length - 1) {\n        reader.currentIndex++;\n        displayCurrentSentence();\n      } else {\n        stopFlashReading();\n        displayEl.textContent = '阅读完成！';\n      }\n    };\n    \n    const startFlashReading = () => {\n      if (reader.isPlaying) return;\n      \n      reader.isPlaying = true;\n      startBtn.disabled = true;\n      pauseBtn.disabled = false;\n      \n      displayCurrentSentence();\n      \n      reader.intervalId = setInterval(() => {\n        advanceToNextSentence();\n      }, reader.speed);\n    };\n    \n    const pauseFlashReading = () => {\n      if (!reader.isPlaying) return;\n      \n      if (reader.intervalId) {\n        clearInterval(reader.intervalId);\n        reader.intervalId = null;\n      }\n      \n      reader.isPlaying = false;\n      startBtn.disabled = false;\n      pauseBtn.disabled = true;\n    };\n    \n    const stopFlashReading = () => {\n      if (reader.intervalId) {\n        clearInterval(reader.intervalId);\n        reader.intervalId = null;\n      }\n      \n      reader.isPlaying = false;\n      startBtn.disabled = false;\n      pauseBtn.disabled = true;\n    };\n    \n    const showPreviousSentence = () => {\n      if (reader.currentIndex > 0) {\n        pauseFlashReading();\n        reader.currentIndex--;\n        displayCurrentSentence();\n      }\n    };\n    \n    const showNextSentence = () => {\n      if (reader.currentIndex < reader.sentences.length - 1) {\n        pauseFlashReading();\n        reader.currentIndex++;\n        displayCurrentSentence();\n      }\n    };\n    \n    speedSlider.addEventListener('input', function() {\n      const newSpeed = parseInt(this.value);\n      reader.speed = newSpeed;\n      speedValue.textContent = `${newSpeed}ms`;\n      \n      if (reader.isPlaying) {\n        clearInterval(reader.intervalId);\n        reader.intervalId = setInterval(() => {\n          advanceToNextSentence();\n        }, reader.speed);\n      }\n    });\n    \n    startBtn.addEventListener('click', startFlashReading);\n    pauseBtn.addEventListener('click', pauseFlashReading);\n    prevBtn.addEventListener('click', showPreviousSentence);\n    nextBtn.addEventListener('click', showNextSentence);\n    \n    const handleKeydown = function(event) {\n      if (document.activeElement.tagName === 'INPUT') return;\n      \n      switch(event.key) {\n        case ' ':\n          reader.isPlaying ? pauseFlashReading() : startFlashReading();\n          event.preventDefault();\n          break;\n        case 'ArrowLeft':\n          showPreviousSentence();\n          event.preventDefault();\n          break;\n        case 'ArrowRight':\n          showNextSentence();\n          event.preventDefault();\n          break;\n      }\n    };\n    \n    document.addEventListener('keydown', handleKeydown);\n    \n    reader.cleanup = () => {\n      document.removeEventListener('keydown', handleKeydown);\n      stopFlashReading();\n    };\n    \n    updateProgress();\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        <div className=\"logo\">\n          <h2>ADHD阅读助手</h2>\n        </div>\n        <label className=\"upload-btn\">\n          选择文件\n          <input\n            type=\"file\"\n            accept=\".pdf,.txt\"\n            onChange={handleFileUpload}\n            style={{ display: 'none' }}\n          />\n        </label>\n      </div>\n      <div className=\"main-content\">\n        <div className=\"header\">\n          <h1>ADHD阅读助手</h1>\n          <div className=\"controls\">\n            <div className=\"mode-selector\">\n              <select value={readingMode} onChange={handleReadingModeChange}>\n                <option value=\"normal\">普通模式</option>\n                <option value=\"static\">静态高亮模式</option>\n                <option value=\"follow-mouse\">鼠标跟随高亮</option>\n                <option value=\"auto-reader\">自动阅读器</option>\n                <option value=\"rhythm\">节奏阅读模式</option>\n                <option value=\"flash-reading\">闪读模式</option>\n                <option value=\"comfortable-3d\">舒适3D文字</option>\n              </select>\n            </div>\n            <div className=\"mode-selector\">\n              <select value={posMode} onChange={(e) => setPosMode(e.target.value)}>\n                <option value=\"none\">无词性标注</option>\n                <option value=\"noun\">名词标注</option>\n                <option value=\"all\">全词性标注</option>\n              </select>\n            </div>\n            {readingMode === 'auto-reader' && (\n              <div className=\"speed-control\">\n                <button onClick={() => adjustSpeed(-100)}>-</button>\n                <span>{autoReaderState.speed}ms</span>\n                <button onClick={() => adjustSpeed(100)}>+</button>\n              </div>\n            )}\n          </div>\n        </div>\n        <div className=\"page-content\">\n          {content ? (\n            <div dangerouslySetInnerHTML={{ __html: content }} />\n          ) : (\n            <div className=\"empty-state\">\n              <p>请上传PDF或TXT文件开始阅读</p>\n            </div>\n          )}\n        </div>\n        {content && (\n          <div className=\"nav-buttons\">\n            <button className=\"page-btn prev\" onClick={() => changePage(-1)} disabled={currentPage === 1}>\n              上一页\n            </button>\n            <span className=\"page-info\">\n              第 {currentPage} 页 / 共 {totalPages} 页\n            </span>\n            <button className=\"page-btn next\" onClick={() => changePage(1)} disabled={currentPage === totalPages}>\n              下一页\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App; "],"mappings":"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;QAEA;QACA,IAAIjN,IAAI,CAACkN,MAAM,CAAC,CAAC,GAAG,GAAG,EAAE;UACvB;UACA,MAAM+I,WAAW,GAAGD,aAAa,CAAChW,IAAI,CAACkW,KAAK,CAAClW,IAAI,CAACkN,MAAM,CAAC,CAAC,GAAG8I,aAAa,CAACnZ,MAAM,CAAC,CAAC;UACnFiZ,aAAa,IAAI,gBAAgBG,WAAW,KAAKhJ,IAAI,SAAS;QAChE,CAAC,MAAM;UACL;UACA6I,aAAa,IAAI,6BAA6B7I,IAAI,SAAS;QAC7D;MACF,CAAC,CAAC;;MAEF;MACArB,WAAW,IAAI,0CAA0CkK,aAAa,MAAM;IAC9E,CAAC,CAAC;IAEFlK,WAAW,IAAI,QAAQ;IACvB,OAAOA,WAAW;EACpB,CAAC;;EAED;EACA,MAAMmG,qBAAqB,GAAGA,CAAA,KAAM;IAClC,IAAItV,QAAQ,CAAC8E,cAAc,CAAC,sBAAsB,CAAC,EAAE;IAErD,MAAMxD,KAAK,GAAGtB,QAAQ,CAACgB,aAAa,CAAC,OAAO,CAAC;IAC7CM,KAAK,CAACgB,EAAE,GAAG,sBAAsB;IACjChB,KAAK,CAACL,WAAW,GAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDjB,QAAQ,CAAC8S,IAAI,CAAClR,WAAW,CAACN,KAAK,CAAC;EAClC,CAAC;;EAED;EACA,MAAMoY,sBAAsB,G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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}