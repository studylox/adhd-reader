{"ast":null,"code":"var _jsxFileName = \"D:\\\\adhd-read-helper\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 模拟NLP词性标注功能（实际应用中建议使用专业NLP库如nlp.js或调用API）\nconst tagPartsOfSpeech = text => {\n  // 简单的名词识别（示例）\n  const commonNouns = ['文件', '阅读', '文本', '内容', '模式', '页面', '浏览器', '系统', '用户', '功能', '屏幕', '颜色', '词性', '名词', '高亮', '设置'];\n  let result = text;\n  commonNouns.forEach(noun => {\n    // 使用标记将名词包装为高亮\n    const regex = new RegExp(`(${noun})`, 'g');\n    result = result.replace(regex, '<span class=\"highlight noun\">$1</span>');\n  });\n  return result;\n};\nconst App = () => {\n  _s();\n  // 状态定义\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null); // 添加文件引用\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('static'); // static, follow-mouse, auto-guide\n  const [highlightColor, setHighlightColor] = useState('#ffeb3b'); // 默认高亮颜色\n  const [highlightPOS, setHighlightPOS] = useState(['noun']); // 默认高亮词性\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const autoReadGuideRef = useRef(null);\n  const autoReadIntervalRef = useRef(null);\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n    // 设置高亮颜色\n    document.documentElement.style.setProperty('--highlight-color', highlightColor);\n    return () => {\n      // 清理自动阅读定时器\n      if (autoReadIntervalRef.current) {\n        clearInterval(autoReadIntervalRef.current);\n      }\n    };\n  }, [highlightColor]);\n\n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'auto-guide') {\n      startAutoReadGuide();\n    } else if (autoReadIntervalRef.current) {\n      clearInterval(autoReadIntervalRef.current);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 处理PDF文件\n  const handlePdfFile = async file => {\n    try {\n      console.log(\"开始处理PDF文件\");\n      const fileReader = new FileReader();\n      fileReader.onload = async function () {\n        console.log(\"文件已读取\");\n        const typedarray = new Uint8Array(this.result);\n\n        // 加载PDF文档\n        const loadingTask = pdfjsLib.getDocument(typedarray);\n        const pdf = await loadingTask.promise;\n        console.log(`PDF加载完成，共${pdf.numPages}页`);\n        setPdfInstance(pdf);\n        setTotalPages(pdf.numPages);\n        // 初始化显示第一页\n        extractAndProcessPage(pdf, 1);\n      };\n      fileReader.readAsArrayBuffer(file);\n    } catch (error) {\n      console.error('PDF处理错误:', error);\n    }\n  };\n\n  // 简单的文本处理函数，替代marked库\n  const simpleFormat = text => {\n    // 将文本分段，确保空白行被视为段落分隔符\n    const paragraphs = text.split('\\n\\n').map(p => p.trim()).filter(p => p.length > 0);\n\n    // 为每个段落添加适当的HTML标签\n    return paragraphs.map(p => `<p>${p}</p>`).join('');\n  };\n\n  // 改进PDF文本提取和段落保留逻辑\n  const extractAndProcessPage = async (pdf, pageNumber) => {\n    try {\n      const page = await pdf.getPage(pageNumber);\n\n      // 获取文本内容\n      const textContent = await page.getTextContent();\n\n      // 获取页面尺寸，用于更准确判断段落\n      const viewport = page.getViewport({\n        scale: 1.0\n      });\n      const pageWidth = viewport.width;\n\n      // 按y坐标排序，从上到下\n      const sortedItems = [...textContent.items].sort((a, b) => b.transform[5] - a.transform[5]);\n\n      // 收集行信息，保留原始格式\n      const lines = [];\n      let currentY = null;\n      let currentLine = [];\n\n      // 按行组织文本项\n      sortedItems.forEach(item => {\n        const y = Math.round(item.transform[5]);\n\n        // 如果Y坐标变化超过一定阈值，认为是新行\n        if (currentY === null || Math.abs(y - currentY) > 3) {\n          if (currentLine.length > 0) {\n            // 按x坐标排序\n            currentLine.sort((a, b) => a.transform[4] - b.transform[4]);\n            lines.push({\n              items: currentLine,\n              y: currentY\n            });\n          }\n          currentLine = [item];\n          currentY = y;\n        } else {\n          currentLine.push(item);\n        }\n      });\n\n      // 处理最后一行\n      if (currentLine.length > 0) {\n        currentLine.sort((a, b) => a.transform[4] - b.transform[4]);\n        lines.push({\n          items: currentLine,\n          y: currentY\n        });\n      }\n\n      // 构建HTML，严格保持原始段落结构\n      let htmlContent = '';\n      let paragraphOpen = false;\n      let prevLineY = null;\n      let firstLineOfPage = true;\n\n      // 处理页面标题\n      if (lines.length > 0 && lines[0].items.length > 0) {\n        const firstItem = lines[0].items[0];\n        // 检测是否为标题（居中或字体较大）\n        if (firstItem.transform[4] > pageWidth * 0.3 || firstItem.height > 12) {\n          htmlContent += `<h2>${lines[0].items.map(i => i.str).join('')}</h2>`;\n          lines.shift(); // 移除标题行\n        }\n      }\n\n      // 构建段落\n      lines.forEach((line, lineIndex) => {\n        // 将行内项组合成完整文本\n        const lineText = line.items.map(item => item.str).join('');\n        if (lineText.trim().length === 0) return; // 跳过空行\n\n        // 确定是否是段落开始\n        const isNewParagraph = firstLineOfPage ||\n        // 页面第一行\n        prevLineY !== null && line.y - prevLineY > 15 ||\n        // 行间距较大\n        lineText.trim().length > 0 && line.items[0].transform[4] > 60; // 首行缩进较大\n\n        // 结束前一段落\n        if (paragraphOpen && isNewParagraph) {\n          htmlContent += '</p>';\n          paragraphOpen = false;\n        }\n\n        // 开始新段落\n        if (!paragraphOpen && isNewParagraph) {\n          // 检查是否有首行缩进\n          const hasIndent = line.items[0].transform[4] > 60;\n          htmlContent += `<p class=\"${hasIndent ? 'indented' : ''}\">`;\n          paragraphOpen = true;\n        } else if (!paragraphOpen) {\n          // 如果不是新段落但前面没有段落开始，强制开始段落\n          htmlContent += '<p>';\n          paragraphOpen = true;\n        }\n\n        // 添加行内容\n        if (lineIndex > 0 && paragraphOpen && !isNewParagraph) {\n          // 在同一段落内的行之间添加空格\n          htmlContent += ' ';\n        }\n\n        // 对文本进行词性标注\n        const taggedLineText = tagPartsOfSpeech(lineText);\n        htmlContent += taggedLineText;\n        prevLineY = line.y;\n        firstLineOfPage = false;\n      });\n\n      // 确保最后一个段落关闭\n      if (paragraphOpen) {\n        htmlContent += '</p>';\n      }\n\n      // 渲染页面\n      const pageContainer = document.querySelector('.page-content');\n      if (pageContainer) {\n        pageContainer.innerHTML = htmlContent;\n\n        // 添加事件监听，用于鼠标跟随高亮模式\n        if (readingMode === 'follow-mouse') {\n          setupMouseFollowHighlight();\n        }\n      }\n    } catch (error) {\n      console.error('处理页面错误:', error);\n    }\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async file => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    if (file.size > 100 * 1024 * 1024) {\n      alert('文件大小不能超过100MB');\n      return;\n    }\n    setFileName(file.name);\n    setPages([]); // 清空现有页面\n\n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain' || file.name.endsWith('.txt')) {\n      await handleTxtFile(file);\n    }\n  };\n\n  // 翻页函数\n  const changePage = delta => {\n    const newPage = currentPage + delta;\n    if (newPage >= 1 && newPage <= totalPages && pdfInstance) {\n      console.log(`切换到第${newPage}页`);\n      setCurrentPage(newPage);\n      extractAndProcessPage(pdfInstance, newPage);\n    }\n  };\n\n  // 设置鼠标跟随高亮\n  const setupMouseFollowHighlight = () => {\n    const pageContent = document.querySelector('.page-content');\n    if (!pageContent) return;\n    pageContent.addEventListener('mousemove', e => {\n      if (readingMode !== 'follow-mouse') return;\n\n      // 清除之前的高亮\n      const prevHighlighted = pageContent.querySelectorAll('.reading-line');\n      prevHighlighted.forEach(el => el.classList.remove('reading-line'));\n\n      // 获取鼠标所在的行\n      const lines = pageContent.querySelectorAll('p');\n      lines.forEach(line => {\n        const rect = line.getBoundingClientRect();\n        if (e.clientY >= rect.top && e.clientY <= rect.bottom) {\n          line.classList.add('reading-line');\n        }\n      });\n    });\n  };\n\n  // 自动阅读引导\n  const startAutoReadGuide = () => {\n    if (autoReadIntervalRef.current) {\n      clearInterval(autoReadIntervalRef.current);\n    }\n\n    // 创建阅读指示点\n    if (!autoReadGuideRef.current) {\n      const guide = document.createElement('div');\n      guide.className = 'auto-read-guide';\n      document.querySelector('.page-content').appendChild(guide);\n      autoReadGuideRef.current = guide;\n    }\n\n    // 获取页面内所有段落\n    const paragraphs = document.querySelectorAll('.page-content p');\n    if (!paragraphs.length) return;\n    let currentParagraphIndex = 0;\n    let currentCharIndex = 0;\n    autoReadIntervalRef.current = setInterval(() => {\n      if (currentParagraphIndex >= paragraphs.length) {\n        clearInterval(autoReadIntervalRef.current);\n        return;\n      }\n      const paragraph = paragraphs[currentParagraphIndex];\n      const text = paragraph.textContent;\n      if (currentCharIndex >= text.length) {\n        currentParagraphIndex++;\n        currentCharIndex = 0;\n        return;\n      }\n\n      // 计算当前字符位置\n      const range = document.createRange();\n      const textNode = paragraph.firstChild;\n      if (textNode && textNode.nodeType === Node.TEXT_NODE) {\n        range.setStart(textNode, Math.min(currentCharIndex, textNode.length));\n        range.setStart(textNode, Math.min(currentCharIndex, textNode.length));\n        const rect = range.getBoundingClientRect();\n\n        // 更新指示点位置\n        if (autoReadGuideRef.current) {\n          const guide = autoReadGuideRef.current;\n          guide.style.left = `${rect.left}px`;\n          guide.style.top = `${rect.bottom + 5}px`;\n\n          // 闪烁效果\n          guide.style.opacity = 1;\n          setTimeout(() => {\n            guide.style.opacity = 0.5;\n          }, 100);\n        }\n      }\n      currentCharIndex += 1;\n    }, 200); // 每秒5个字符的速度\n  };\n\n  // 处理阅读模式切换\n  const handleReadingModeChange = mode => {\n    setReadingMode(mode);\n\n    // 清除之前的高亮\n    const pageContent = document.querySelector('.page-content');\n    if (pageContent) {\n      const prevHighlighted = pageContent.querySelectorAll('.reading-line');\n      prevHighlighted.forEach(el => el.classList.remove('reading-line'));\n    }\n\n    // 如果切换到鼠标跟随模式，设置事件监听\n    if (mode === 'follow-mouse') {\n      setupMouseFollowHighlight();\n    }\n\n    // 如果切换到自动阅读模式，启动阅读指导\n    if (mode === 'auto-guide') {\n      startAutoReadGuide();\n    } else if (autoReadIntervalRef.current) {\n      clearInterval(autoReadIntervalRef.current);\n      if (autoReadGuideRef.current) {\n        autoReadGuideRef.current.remove();\n        autoReadGuideRef.current = null;\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `App ${isDarkMode ? 'dark' : 'light'}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"ADHD \\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"upload-btn\",\n            onClick: () => document.getElementById('fileInput').click(),\n            children: \"\\u9009\\u62E9\\u6587\\u4EF6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"fileInput\",\n            type: \"file\",\n            accept: \".pdf,.txt\",\n            style: {\n              display: 'none'\n            },\n            onChange: e => {\n              const file = e.target.files[0];\n              if (file) {\n                console.log(\"选择了文件:\", file.name);\n                setFile(file);\n                setCurrentPage(1);\n                handlePdfFile(file);\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"mode-btn\",\n            children: \"\\u5207\\u6362\\u660E\\u4EAE\\u6A21\\u5F0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"color-picker\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"\\u9AD8\\u4EAE\\u989C\\u8272:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 447,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"color\",\n              value: highlightColor,\n              onChange: e => setHighlightColor(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mode-selector\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: readingMode,\n              onChange: e => handleReadingModeChange(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"static\",\n                children: \"\\u9AD8\\u4EAE\\u9759\\u606F\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 461,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"follow-mouse\",\n                children: \"\\u9F20\\u6807\\u8DDF\\u968F\\u9AD8\\u4EAE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 462,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"auto-guide\",\n                children: \"\\u81EA\\u52A8\\u9605\\u8BFB\\u5F15\\u5BFC\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 463,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 457,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pos-selector\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: highlightPOS,\n              onChange: e => {\n                const options = Array.from(e.target.selectedOptions, option => option.value);\n                setHighlightPOS(options);\n              },\n              multiple: true,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"noun\",\n                children: \"\\u540D\\u8BCD\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 477,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"verb\",\n                children: \"\\u52A8\\u8BCD\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 478,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"adj\",\n                children: \"\\u5F62\\u5BB9\\u8BCD\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 479,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 469,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reader-container\",\n        ref: readerContainerRef,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"page-btn prev\",\n          onClick: () => changePage(-1),\n          disabled: currentPage <= 1,\n          children: \"\\u2190\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"page-content\",\n          children: !file && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"upload-hint\",\n            children: [\"\\u8BF7\\u4E0A\\u4F20\\u6587\\u4EF6\\u5F00\\u59CB\\u9605\\u8BFB\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 498,\n              columnNumber: 17\n            }, this), \"\\u652F\\u6301\\u7684\\u683C\\u5F0F: PDF, TXT (\\u6700\\u5927100MB)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 496,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"page-btn next\",\n          onClick: () => changePage(1),\n          disabled: currentPage >= totalPages,\n          children: \"\\u2192\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 9\n      }, this), file && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-info\",\n        children: [\"\\u7B2C \", currentPage, \" \\u9875 / \\u5171 \", totalPages, \" \\u9875\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 415,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"rT6geIQOfNVWQ9OoJXd9YiVu9sc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","pdfjsLib","pdfjsViewer","marked","pdfjs","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","tagPartsOfSpeech","text","commonNouns","result","forEach","noun","regex","RegExp","replace","App","_s","isDarkMode","setIsDarkMode","pages","setPages","currentPage","setCurrentPage","totalPages","setTotalPages","fileName","setFileName","loading","setLoading","fileRef","file","setFile","pdfInstance","setPdfInstance","extractedTextPages","setExtractedTextPages","readingMode","setReadingMode","highlightColor","setHighlightColor","highlightPOS","setHighlightPOS","markdownContent","setMarkdownContent","readerContainerRef","autoReadGuideRef","autoReadIntervalRef","document","documentElement","style","setProperty","current","clearInterval","startAutoReadGuide","handlePdfFile","console","log","fileReader","FileReader","onload","typedarray","Uint8Array","loadingTask","getDocument","pdf","promise","numPages","extractAndProcessPage","readAsArrayBuffer","error","simpleFormat","paragraphs","split","map","p","trim","filter","length","join","pageNumber","page","getPage","textContent","getTextContent","viewport","getViewport","scale","pageWidth","width","sortedItems","items","sort","a","b","transform","lines","currentY","currentLine","item","y","Math","round","abs","push","htmlContent","paragraphOpen","prevLineY","firstLineOfPage","firstItem","height","i","str","shift","line","lineIndex","lineText","isNewParagraph","hasIndent","taggedLineText","pageContainer","querySelector","innerHTML","setupMouseFollowHighlight","handleTxtFile","pageTexts","paragraph","x","fontSize","fontFamily","alert","handleFileUpload","event","target","files","size","name","type","endsWith","changePage","delta","newPage","pageContent","addEventListener","e","prevHighlighted","querySelectorAll","el","classList","remove","rect","getBoundingClientRect","clientY","top","bottom","add","guide","createElement","className","appendChild","currentParagraphIndex","currentCharIndex","setInterval","range","createRange","textNode","firstChild","nodeType","Node","TEXT_NODE","setStart","min","left","opacity","setTimeout","handleReadingModeChange","mode","children","_jsxFileName","lineNumber","columnNumber","onClick","getElementById","click","id","accept","display","onChange","value","options","Array","from","selectedOptions","option","multiple","ref","disabled","_c","$RefreshReg$"],"sources":["D:/adhd-read-helper/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 模拟NLP词性标注功能（实际应用中建议使用专业NLP库如nlp.js或调用API）\nconst tagPartsOfSpeech = (text) => {\n  // 简单的名词识别（示例）\n  const commonNouns = ['文件', '阅读', '文本', '内容', '模式', '页面', '浏览器', '系统', \n                       '用户', '功能', '屏幕', '颜色', '词性', '名词', '高亮', '设置'];\n  \n  let result = text;\n  commonNouns.forEach(noun => {\n    // 使用标记将名词包装为高亮\n    const regex = new RegExp(`(${noun})`, 'g');\n    result = result.replace(regex, '<span class=\"highlight noun\">$1</span>');\n  });\n  \n  return result;\n};\n\nconst App = () => {\n  // 状态定义\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null); // 添加文件引用\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('static'); // static, follow-mouse, auto-guide\n  const [highlightColor, setHighlightColor] = useState('#ffeb3b'); // 默认高亮颜色\n  const [highlightPOS, setHighlightPOS] = useState(['noun']); // 默认高亮词性\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const autoReadGuideRef = useRef(null);\n  const autoReadIntervalRef = useRef(null);\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n    \n    // 设置高亮颜色\n    document.documentElement.style.setProperty('--highlight-color', highlightColor);\n    \n    return () => {\n      // 清理自动阅读定时器\n      if (autoReadIntervalRef.current) {\n        clearInterval(autoReadIntervalRef.current);\n      }\n    };\n  }, [highlightColor]);\n  \n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'auto-guide') {\n      startAutoReadGuide();\n    } else if (autoReadIntervalRef.current) {\n      clearInterval(autoReadIntervalRef.current);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 处理PDF文件\n  const handlePdfFile = async (file) => {\n    try {\n      console.log(\"开始处理PDF文件\");\n      const fileReader = new FileReader();\n      \n      fileReader.onload = async function() {\n        console.log(\"文件已读取\");\n        const typedarray = new Uint8Array(this.result);\n        \n        // 加载PDF文档\n        const loadingTask = pdfjsLib.getDocument(typedarray);\n        const pdf = await loadingTask.promise;\n        console.log(`PDF加载完成，共${pdf.numPages}页`);\n        \n        setPdfInstance(pdf);\n        setTotalPages(pdf.numPages);\n        // 初始化显示第一页\n        extractAndProcessPage(pdf, 1);\n      };\n      \n      fileReader.readAsArrayBuffer(file);\n    } catch (error) {\n      console.error('PDF处理错误:', error);\n    }\n  };\n  \n  // 简单的文本处理函数，替代marked库\n  const simpleFormat = (text) => {\n    // 将文本分段，确保空白行被视为段落分隔符\n    const paragraphs = text.split('\\n\\n')\n      .map(p => p.trim())\n      .filter(p => p.length > 0);\n    \n    // 为每个段落添加适当的HTML标签\n    return paragraphs\n      .map(p => `<p>${p}</p>`)\n      .join('');\n  };\n\n  // 改进PDF文本提取和段落保留逻辑\n  const extractAndProcessPage = async (pdf, pageNumber) => {\n    try {\n      const page = await pdf.getPage(pageNumber);\n      \n      // 获取文本内容\n      const textContent = await page.getTextContent();\n      \n      // 获取页面尺寸，用于更准确判断段落\n      const viewport = page.getViewport({ scale: 1.0 });\n      const pageWidth = viewport.width;\n      \n      // 按y坐标排序，从上到下\n      const sortedItems = [...textContent.items].sort((a, b) => b.transform[5] - a.transform[5]);\n      \n      // 收集行信息，保留原始格式\n      const lines = [];\n      let currentY = null;\n      let currentLine = [];\n      \n      // 按行组织文本项\n      sortedItems.forEach(item => {\n        const y = Math.round(item.transform[5]);\n        \n        // 如果Y坐标变化超过一定阈值，认为是新行\n        if (currentY === null || Math.abs(y - currentY) > 3) {\n          if (currentLine.length > 0) {\n            // 按x坐标排序\n            currentLine.sort((a, b) => a.transform[4] - b.transform[4]);\n            lines.push({\n              items: currentLine,\n              y: currentY\n            });\n          }\n          currentLine = [item];\n          currentY = y;\n        } else {\n          currentLine.push(item);\n        }\n      });\n      \n      // 处理最后一行\n      if (currentLine.length > 0) {\n        currentLine.sort((a, b) => a.transform[4] - b.transform[4]);\n        lines.push({\n          items: currentLine,\n          y: currentY\n        });\n      }\n      \n      // 构建HTML，严格保持原始段落结构\n      let htmlContent = '';\n      let paragraphOpen = false;\n      let prevLineY = null;\n      let firstLineOfPage = true;\n      \n      // 处理页面标题\n      if (lines.length > 0 && lines[0].items.length > 0) {\n        const firstItem = lines[0].items[0];\n        // 检测是否为标题（居中或字体较大）\n        if (firstItem.transform[4] > pageWidth * 0.3 || firstItem.height > 12) {\n          htmlContent += `<h2>${lines[0].items.map(i => i.str).join('')}</h2>`;\n          lines.shift(); // 移除标题行\n        }\n      }\n      \n      // 构建段落\n      lines.forEach((line, lineIndex) => {\n        // 将行内项组合成完整文本\n        const lineText = line.items.map(item => item.str).join('');\n        \n        if (lineText.trim().length === 0) return; // 跳过空行\n        \n        // 确定是否是段落开始\n        const isNewParagraph = \n          firstLineOfPage || // 页面第一行\n          (prevLineY !== null && (line.y - prevLineY > 15)) || // 行间距较大\n          (lineText.trim().length > 0 && line.items[0].transform[4] > 60); // 首行缩进较大\n        \n        // 结束前一段落\n        if (paragraphOpen && isNewParagraph) {\n          htmlContent += '</p>';\n          paragraphOpen = false;\n        }\n        \n        // 开始新段落\n        if (!paragraphOpen && isNewParagraph) {\n          // 检查是否有首行缩进\n          const hasIndent = line.items[0].transform[4] > 60;\n          htmlContent += `<p class=\"${hasIndent ? 'indented' : ''}\">`;\n          paragraphOpen = true;\n        } else if (!paragraphOpen) {\n          // 如果不是新段落但前面没有段落开始，强制开始段落\n          htmlContent += '<p>';\n          paragraphOpen = true;\n        }\n        \n        // 添加行内容\n        if (lineIndex > 0 && paragraphOpen && !isNewParagraph) {\n          // 在同一段落内的行之间添加空格\n          htmlContent += ' ';\n        }\n        \n        // 对文本进行词性标注\n        const taggedLineText = tagPartsOfSpeech(lineText);\n        htmlContent += taggedLineText;\n        \n        prevLineY = line.y;\n        firstLineOfPage = false;\n      });\n      \n      // 确保最后一个段落关闭\n      if (paragraphOpen) {\n        htmlContent += '</p>';\n      }\n      \n      // 渲染页面\n      const pageContainer = document.querySelector('.page-content');\n      if (pageContainer) {\n        pageContainer.innerHTML = htmlContent;\n        \n        // 添加事件监听，用于鼠标跟随高亮模式\n        if (readingMode === 'follow-mouse') {\n          setupMouseFollowHighlight();\n        }\n      }\n      \n    } catch (error) {\n      console.error('处理页面错误:', error);\n    }\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async (file) => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async (event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    if (file.size > 100 * 1024 * 1024) {\n      alert('文件大小不能超过100MB');\n      return;\n    }\n\n    setFileName(file.name);\n    setPages([]); // 清空现有页面\n\n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain' || file.name.endsWith('.txt')) {\n      await handleTxtFile(file);\n    }\n  };\n\n  // 翻页函数\n  const changePage = (delta) => {\n    const newPage = currentPage + delta;\n    if (newPage >= 1 && newPage <= totalPages && pdfInstance) {\n      console.log(`切换到第${newPage}页`);\n      setCurrentPage(newPage);\n      extractAndProcessPage(pdfInstance, newPage);\n    }\n  };\n\n  // 设置鼠标跟随高亮\n  const setupMouseFollowHighlight = () => {\n    const pageContent = document.querySelector('.page-content');\n    if (!pageContent) return;\n    \n    pageContent.addEventListener('mousemove', (e) => {\n      if (readingMode !== 'follow-mouse') return;\n      \n      // 清除之前的高亮\n      const prevHighlighted = pageContent.querySelectorAll('.reading-line');\n      prevHighlighted.forEach(el => el.classList.remove('reading-line'));\n      \n      // 获取鼠标所在的行\n      const lines = pageContent.querySelectorAll('p');\n      \n      lines.forEach(line => {\n        const rect = line.getBoundingClientRect();\n        if (e.clientY >= rect.top && e.clientY <= rect.bottom) {\n          line.classList.add('reading-line');\n        }\n      });\n    });\n  };\n  \n  // 自动阅读引导\n  const startAutoReadGuide = () => {\n    if (autoReadIntervalRef.current) {\n      clearInterval(autoReadIntervalRef.current);\n    }\n    \n    // 创建阅读指示点\n    if (!autoReadGuideRef.current) {\n      const guide = document.createElement('div');\n      guide.className = 'auto-read-guide';\n      document.querySelector('.page-content').appendChild(guide);\n      autoReadGuideRef.current = guide;\n    }\n    \n    // 获取页面内所有段落\n    const paragraphs = document.querySelectorAll('.page-content p');\n    if (!paragraphs.length) return;\n    \n    let currentParagraphIndex = 0;\n    let currentCharIndex = 0;\n    \n    autoReadIntervalRef.current = setInterval(() => {\n      if (currentParagraphIndex >= paragraphs.length) {\n        clearInterval(autoReadIntervalRef.current);\n        return;\n      }\n      \n      const paragraph = paragraphs[currentParagraphIndex];\n      const text = paragraph.textContent;\n      \n      if (currentCharIndex >= text.length) {\n        currentParagraphIndex++;\n        currentCharIndex = 0;\n        return;\n      }\n      \n      // 计算当前字符位置\n      const range = document.createRange();\n      const textNode = paragraph.firstChild;\n      \n      if (textNode && textNode.nodeType === Node.TEXT_NODE) {\n        range.setStart(textNode, Math.min(currentCharIndex, textNode.length));\n        range.setStart(textNode, Math.min(currentCharIndex, textNode.length));\n        \n        const rect = range.getBoundingClientRect();\n        \n        // 更新指示点位置\n        if (autoReadGuideRef.current) {\n          const guide = autoReadGuideRef.current;\n          guide.style.left = `${rect.left}px`;\n          guide.style.top = `${rect.bottom + 5}px`;\n          \n          // 闪烁效果\n          guide.style.opacity = 1;\n          setTimeout(() => {\n            guide.style.opacity = 0.5;\n          }, 100);\n        }\n      }\n      \n      currentCharIndex += 1;\n    }, 200); // 每秒5个字符的速度\n  };\n  \n  // 处理阅读模式切换\n  const handleReadingModeChange = (mode) => {\n    setReadingMode(mode);\n    \n    // 清除之前的高亮\n    const pageContent = document.querySelector('.page-content');\n    if (pageContent) {\n      const prevHighlighted = pageContent.querySelectorAll('.reading-line');\n      prevHighlighted.forEach(el => el.classList.remove('reading-line'));\n    }\n    \n    // 如果切换到鼠标跟随模式，设置事件监听\n    if (mode === 'follow-mouse') {\n      setupMouseFollowHighlight();\n    }\n    \n    // 如果切换到自动阅读模式，启动阅读指导\n    if (mode === 'auto-guide') {\n      startAutoReadGuide();\n    } else if (autoReadIntervalRef.current) {\n      clearInterval(autoReadIntervalRef.current);\n      \n      if (autoReadGuideRef.current) {\n        autoReadGuideRef.current.remove();\n        autoReadGuideRef.current = null;\n      }\n    }\n  };\n\n  return (\n    <div className={`App ${isDarkMode ? 'dark' : 'light'}`}>\n      <div className=\"app-container\">\n        <header className=\"header\">\n          <h1>ADHD 阅读助手</h1>\n          <div className=\"controls\">\n            <button \n              className=\"upload-btn\"\n              onClick={() => document.getElementById('fileInput').click()}\n            >\n              选择文件\n            </button>\n            <input\n              id=\"fileInput\"\n              type=\"file\"\n              accept=\".pdf,.txt\"\n              style={{ display: 'none' }}\n              onChange={(e) => {\n                const file = e.target.files[0];\n                if (file) {\n                  console.log(\"选择了文件:\", file.name);\n                  setFile(file);\n                  setCurrentPage(1);\n                  handlePdfFile(file);\n                }\n              }}\n            />\n            <button className=\"mode-btn\">\n              切换明亮模式\n            </button>\n            \n            {/* 高亮颜色选择 */}\n            <div className=\"color-picker\">\n              <label>高亮颜色:</label>\n              <input \n                type=\"color\" \n                value={highlightColor}\n                onChange={(e) => setHighlightColor(e.target.value)}\n              />\n            </div>\n            \n            {/* 阅读模式选择 */}\n            <div className=\"mode-selector\">\n              <select \n                value={readingMode}\n                onChange={(e) => handleReadingModeChange(e.target.value)}\n              >\n                <option value=\"static\">高亮静息模式</option>\n                <option value=\"follow-mouse\">鼠标跟随高亮</option>\n                <option value=\"auto-guide\">自动阅读引导</option>\n              </select>\n            </div>\n            \n            {/* 词性选择 */}\n            <div className=\"pos-selector\">\n              <select\n                value={highlightPOS}\n                onChange={(e) => {\n                  const options = Array.from(e.target.selectedOptions, option => option.value);\n                  setHighlightPOS(options);\n                }}\n                multiple\n              >\n                <option value=\"noun\">名词</option>\n                <option value=\"verb\">动词</option>\n                <option value=\"adj\">形容词</option>\n              </select>\n            </div>\n          </div>\n        </header>\n        \n        <div className=\"reader-container\" ref={readerContainerRef}>\n          <button \n            className=\"page-btn prev\"\n            onClick={() => changePage(-1)}\n            disabled={currentPage <= 1}\n          >\n            ←\n          </button>\n\n          <div className=\"page-content\">\n            {!file && (\n              <div className=\"upload-hint\">\n                请上传文件开始阅读\n                <br />\n                支持的格式: PDF, TXT (最大100MB)\n              </div>\n            )}\n          </div>\n\n          <button \n            className=\"page-btn next\"\n            onClick={() => changePage(1)}\n            disabled={currentPage >= totalPages}\n          >\n            →\n          </button>\n        </div>\n\n        {file && (\n          <div className=\"page-info\">\n            第 {currentPage} 页 / 共 {totalPages} 页\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}