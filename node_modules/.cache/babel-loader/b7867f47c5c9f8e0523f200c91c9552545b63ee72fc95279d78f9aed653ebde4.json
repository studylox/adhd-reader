{"ast":null,"code":"var _jsxFileName = \"D:\\\\adhd-read-helper\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 新增全局变量\nlet autoReader = {\n  currentIndex: 0,\n  charPositions: [],\n  intervalId: null,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1\n};\n\n// 模拟NLP词性标注功能（实际应用中建议使用专业NLP库如nlp.js或调用API）\nconst tagPartsOfSpeech = text => {\n  // 定义所有标点符号\n  const punctuationMarks = ['，', '。', '！', '？', '；', '：', '（', '）', '【', '】', '《', '》', '〈', '〉', '…', '—', '～', '·', ',', '.', '!', '?', ';', ':', '(', ')', '[', ']', '{', '}', '-', '...', '..'];\n\n  // 将文本按标点符号分割，保留标点符号\n  const segments = text.split(new RegExp(`([${punctuationMarks.map(mark => '\\\\' + mark).join('')}])`));\n  let result = '';\n  let colorIndex = 0; // 0: 红色, 1: 蓝色, 2: 黑色\n  let currentText = '';\n  segments.forEach((segment, index) => {\n    // 跳过空字符串和纯空格\n    if (!segment || /^\\s+$/.test(segment)) {\n      result += segment;\n      return;\n    }\n\n    // 检查是否是标点符号\n    const isPunctuation = punctuationMarks.includes(segment);\n\n    // 根据索引选择颜色\n    let color;\n    switch (colorIndex) {\n      case 0:\n        color = 'red';\n        break;\n      case 1:\n        color = 'blue';\n        break;\n      case 2:\n        color = 'black';\n        break;\n      default:\n        color = 'black';\n    }\n\n    // 将当前文本和标点符号放在同一个颜色块中\n    if (isPunctuation) {\n      // 如果有累积的文本，先添加文本\n      if (currentText) {\n        result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n        currentText = '';\n      }\n      // 添加标点符号\n      result += `<span class=\"highlight-word ${color}\">${segment}</span>`;\n      // 切换颜色\n      colorIndex = (colorIndex + 1) % 3;\n    } else {\n      // 累积文本\n      currentText += segment;\n    }\n  });\n\n  // 处理最后可能剩余的文本\n  if (currentText) {\n    const color = colorIndex === 0 ? 'red' : colorIndex === 1 ? 'blue' : 'black';\n    result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n  }\n  return result;\n};\nconst App = () => {\n  _s();\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const autoReadGuideRef = useRef(null);\n  const autoReadIntervalRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n\n  // 新增自动阅读器状态\n  const [autoReaderState, setAutoReaderState] = useState({\n    currentIndex: 0,\n    charPositions: [],\n    intervalId: null,\n    speed: 300,\n    pageContainer: null,\n    isUserScrolling: false,\n    scrollTimeout: null,\n    contentLoaded: false\n  });\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n    return () => {\n      // 清理自动阅读定时器\n      if (autoReadIntervalRef.current) {\n        clearInterval(autoReadIntervalRef.current);\n      }\n    };\n  }, []);\n\n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async file => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n\n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n\n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n\n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({\n        scale: 1.0\n      });\n\n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async textContent => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n\n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n\n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n\n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    const lines = [...lineMap.values()];\n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    return hasTocKeywords || hasPageNumberPatterns || shortLineRatio > 0.7 && numberLineRatio > 0.3;\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n\n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n\n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n\n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n\n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = text => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    return result;\n  };\n\n  // 修改processContentPage函数\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n\n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch (mode) {\n        case 'normal':\n          // 普通模式 - 简单分段显示\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'static':\n          // 静态高亮模式 - 应用词性标注和颜色高亮\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'follow-mouse':\n          // 鼠标跟随高亮模式 - 分段落但不预先高亮，由鼠标事件触发高亮\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      setContent(processedContent);\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async file => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain') {\n      handleTxtFile(file);\n    } else {\n      alert('请上传PDF或TXT文件');\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = container => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n\n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n\n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n\n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width / 2,\n            // 水平中心\n            y: rect.bottom,\n            // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n\n    // 过滤无效位置并排序\n    return positions.filter(p => p.char.trim() !== '').sort((a, b) => {\n      // 先按行排序，同行按列排序\n      const yDiff = a.y - b.y;\n      if (Math.abs(yDiff) > 5) {\n        // 5px阈值判断是否同一行\n        return yDiff;\n      }\n      return a.x - b.x;\n    });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n\n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - containerVisibleHeight / 2;\n\n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - window.innerHeight / 2;\n\n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n\n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    return cursor;\n  };\n\n  // 始终保持正在阅读的内容在视野中心\n  const startAutoReader = () => {\n    if (autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages) {\n        changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 重置索引到开头\n    autoReader.currentIndex = 0;\n\n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n\n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n\n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n\n    // 滚动目标\n    const scrollTarget = isContainerScrollable ? contentContainer : window;\n    autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (autoReader.currentIndex < autoReader.charPositions.length && ((_autoReader$charPosit = autoReader.charPositions[autoReader.currentIndex]) === null || _autoReader$charPosit === void 0 ? void 0 : _autoReader$charPosit.char.trim()) === '') {\n        var _autoReader$charPosit;\n        autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (autoReader.currentIndex >= autoReader.charPositions.length) {\n        if (currentPage < totalPages) {\n          changePage(1);\n          clearInterval(autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n      const pos = autoReader.charPositions[autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        // 获取容器的位置\n        const contentRect = contentContainer.getBoundingClientRect();\n\n        // 计算光标相对于容器的坐标\n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n\n        // 更新光标位置为相对容器的坐标\n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n\n        // ===== 强制使正在阅读的内容居中 =====\n\n        // 计算目标滚动位置\n        let targetScrollTop;\n        if (isContainerScrollable) {\n          // 如果容器可滚动，计算将当前位置放在容器中央所需的滚动量\n          targetScrollTop = relativeY - contentContainer.clientHeight / 2;\n        } else {\n          // 如果是窗口滚动，计算将当前位置放在窗口中央所需的滚动量\n          targetScrollTop = pos.y - window.innerHeight / 2;\n        }\n\n        // 立即执行滚动，将当前阅读位置居中\n        scrollTarget.scrollTo({\n          top: targetScrollTop,\n          behavior: 'smooth'\n        });\n      }\n      autoReader.currentIndex++;\n    }, autoReader.speed);\n  };\n\n  // 停止自动阅读\n  const stopAutoReader = () => {\n    clearInterval(autoReader.intervalId);\n    autoReader.intervalId = null;\n    const cursor = document.getElementById('auto-reader-cursor');\n    if (cursor) cursor.remove();\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n\n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n\n    // 确保容器有正确的定位和滚动属性\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n\n    // 确保有正确的overflow属性\n    const style = window.getComputedStyle(content);\n    if (content.scrollHeight > content.clientHeight && style.overflowY !== 'auto' && style.overflowY !== 'scroll') {\n      content.style.overflowY = 'auto';\n    }\n\n    // 收集字符位置\n    autoReader.charPositions = getAllCharacterPositions(content);\n\n    // 如果当前页没有内容，尝试翻页\n    if (autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages) {\n        changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 立即开始移动\n    startAutoReader();\n\n    // 初始滚动到第一个字符\n    if (autoReader.charPositions.length > 0) {\n      setTimeout(() => {\n        const firstPos = autoReader.charPositions[0];\n        scrollElementToCenter(firstPos.y, content);\n      }, 100);\n    }\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async e => {\n    const newMode = e.target.value;\n\n    // 停止当前可能正在运行的自动阅读\n    stopAutoReader();\n\n    // 清理旧模式\n    cleanupDOM();\n\n    // 更新状态\n    setReadingMode(newMode);\n\n    // 应用新模式\n    if (pdfDocument && currentPage > 0) {\n      try {\n        const page = await pdfDocument.getPage(currentPage);\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        let processedContent = '';\n\n        // 应用对应模式的文本处理\n        switch (newMode) {\n          case 'follow-mouse':\n            processedContent = formatTextForMouseFollow(extractedText);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlight(extractedText);\n            break;\n          case 'auto-reader':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          default:\n            processedContent = formatTextToHtml(extractedText);\n        }\n        const contentArea = document.querySelector('.page-content');\n        if (contentArea) {\n          contentArea.textContent = '';\n          contentArea.innerHTML = processedContent;\n\n          // 立即初始化对应模式\n          if (newMode === 'auto-reader') {\n            // 短暂延迟确保DOM已更新\n            setTimeout(initializeAutoReader, 50);\n          } else if (newMode === 'follow-mouse') {\n            setTimeout(initializeMouseFollow, 50);\n          }\n        }\n      } catch (error) {\n        console.error('应用新阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 1. 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll('.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line');\n    highlights.forEach(el => el.remove());\n\n    // 2. 移除事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 克隆内容区域以彻底移除所有事件监听器\n      const cleanContent = contentArea.cloneNode(false);\n      cleanContent.innerHTML = contentArea.innerHTML;\n      contentArea.parentNode.replaceChild(cleanContent, contentArea);\n    }\n\n    // 3. 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 创建新段落并保留基本结构\n      const newParagraph = document.createElement('p');\n      newParagraph.className = 'pdf-paragraph';\n      newParagraph.innerHTML = paragraph.innerHTML.replace(/<span class=\"text-line\">/g, '').replace(/<\\/span>/g, '');\n\n      // 移除特殊属性\n      newParagraph.removeAttribute('data-follow');\n      newParagraph.removeAttribute('style');\n      if (paragraph.parentNode) {\n        paragraph.parentNode.replaceChild(newParagraph, paragraph);\n      }\n    });\n\n    // 4. 清理自动阅读器\n    stopAutoReader();\n  };\n  const handleAutoScroll = () => {\n    autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 添加鼠标跟随监听器\n  const addMouseFollowListeners = () => {\n    if (readingMode !== 'follow-mouse') return;\n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n\n    // 清理旧的监听器\n    contentArea.removeEventListener('mousemove', handleMouseMove);\n    contentArea.removeEventListener('mouseleave', clearAllHighlights);\n\n    // 添加新的监听器\n    contentArea.addEventListener('mousemove', handleMouseMove);\n    contentArea.addEventListener('mouseleave', clearAllHighlights);\n\n    // 确保所有段落都有正确的样式\n    document.querySelectorAll('.pdf-paragraph').forEach(p => {\n      p.style.position = 'relative';\n      p.style.lineHeight = '1.5';\n    });\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = text => {\n    // 分段\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n\n    // 创建HTML内容\n    let htmlContent = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      htmlContent += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 格式化文本用于鼠标跟随高亮模式\n  const formatTextForMouseFollow = text => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    let htmlContent = '<div class=\"pdf-content mouse-follow-content\">';\n    paragraphs.forEach(paragraph => {\n      // 将段落分割成行\n      const lines = paragraph.split('\\n').filter(line => line.trim());\n      htmlContent += `<p class=\"pdf-paragraph\" data-follow=\"true\" style=\"position: relative; line-height: 1.5;\">`;\n      lines.forEach((line, i) => {\n        // 每行用span包裹\n        htmlContent += `<span class=\"text-line\" style=\"display: block;\">${line}</span>`;\n      });\n      htmlContent += `</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 应用静态高亮\n  const applyStaticHighlight = text => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    let htmlContent = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      // 新增强制清理逻辑\n      const cleanParagraph = paragraph.replace(/<span class=\"text-line\">/g, '').replace(/<\\/span>/g, '');\n      const highlightedText = processTextWithHighlight(cleanParagraph);\n      htmlContent += `<p class=\"pdf-paragraph\">${highlightedText}</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = e => {\n    if (readingMode !== 'follow-mouse') return;\n\n    // 清除所有现有高亮\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n    const mouseTarget = document.elementFromPoint(e.clientX, e.clientY);\n    if (mouseTarget && (mouseTarget.classList.contains('pdf-paragraph') || mouseTarget.tagName === 'P' || mouseTarget.tagName === 'SPAN')) {\n      const targetParagraph = mouseTarget.closest('.pdf-paragraph');\n      if (!targetParagraph) return;\n\n      // 获取段落文本节点\n      const textNode = getTextNodeAtPosition(targetParagraph, e.clientX, e.clientY);\n      if (!textNode) return;\n\n      // 获取精确的行位置和尺寸\n      const range = document.createRange();\n      range.selectNodeContents(textNode);\n      const rects = range.getClientRects();\n\n      // 找到鼠标所在的具体行\n      if (rects.length > 0) {\n        const rect = rects[0];\n        const lineHighlight = document.createElement('div');\n        lineHighlight.className = 'line-highlight';\n        lineHighlight.style.position = 'absolute';\n        lineHighlight.style.left = `${rect.left}px`;\n        lineHighlight.style.right = `${rect.right}px`;\n        lineHighlight.style.top = `${rect.top}px`;\n        lineHighlight.style.height = `${rect.height}px`;\n        lineHighlight.style.background = 'rgba(0, 255, 0, 0.2)';\n        lineHighlight.style.pointerEvents = 'none';\n        document.body.appendChild(lineHighlight);\n      }\n    }\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 新增延迟补偿\n    setTimeout(() => {\n      addMouseFollowListeners();\n\n      // 强制触发重排\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        void contentArea.offsetHeight;\n\n        // 模拟鼠标移动事件\n        const fakeEvent = new MouseEvent('mousemove', {\n          clientX: window.innerWidth / 2,\n          clientY: window.innerHeight / 2,\n          bubbles: true\n        });\n        contentArea.dispatchEvent(fakeEvent);\n      }\n    }, 50);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = delta => {\n    autoReader.speed = Math.max(100, autoReader.speed + delta);\n    setAutoReaderState(prev => ({\n      ...prev,\n      speed: autoReader.speed\n    }));\n    if (autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async delta => {\n    const newPage = currentPage + delta;\n    if (newPage < 1 || newPage > totalPages) return;\n    const wasAutoReading = readingMode === 'auto-reader' && autoReader.intervalId;\n\n    // 如果正在自动阅读，先停止\n    if (wasAutoReading) {\n      clearInterval(autoReader.intervalId);\n      autoReader.intervalId = null;\n    }\n\n    // 更新页码\n    setCurrentPage(newPage);\n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 按当前阅读模式处理内容\n      let processedContent = '';\n      switch (readingMode) {\n        case 'follow-mouse':\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'auto-reader':\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n\n      // 更新页面内容\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        contentArea.textContent = '';\n        contentArea.innerHTML = processedContent;\n\n        // 滚动到页面顶部\n        window.scrollTo(0, 0);\n\n        // 如果之前在自动阅读，重新启动自动阅读\n        if (readingMode === 'auto-reader') {\n          setTimeout(initializeAutoReader, 50);\n        } else if (readingMode === 'follow-mouse') {\n          setTimeout(initializeMouseFollow, 50);\n        }\n      }\n    } catch (error) {\n      console.error('翻页失败:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1040,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1039,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"upload-btn\",\n        children: [\"\\u9009\\u62E9\\u6587\\u4EF6\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".pdf,.txt\",\n          onChange: handleFileUpload,\n          style: {\n            display: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1044,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1042,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1038,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1054,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mode-selector\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: readingMode,\n              onChange: handleReadingModeChange,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"normal\",\n                children: \"\\u666E\\u901A\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1058,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"static\",\n                children: \"\\u9759\\u6001\\u9AD8\\u4EAE\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1059,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"follow-mouse\",\n                children: \"\\u9F20\\u6807\\u8DDF\\u968F\\u9AD8\\u4EAE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1060,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"auto-reader\",\n                children: \"\\u81EA\\u52A8\\u9605\\u8BFB\\u5668\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1061,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1057,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1056,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mode-selector\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: posMode,\n              onChange: e => setPosMode(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"none\",\n                children: \"\\u65E0\\u8BCD\\u6027\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1066,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"noun\",\n                children: \"\\u540D\\u8BCD\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1067,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"all\",\n                children: \"\\u5168\\u8BCD\\u6027\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1068,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1065,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1064,\n            columnNumber: 13\n          }, this), readingMode === 'auto-reader' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"speed-control\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => adjustSpeed(-100),\n              children: \"-\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1073,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [autoReaderState.speed, \"ms\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1074,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => adjustSpeed(100),\n              children: \"+\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1075,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1072,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1055,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1053,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-content\",\n        children: content ? /*#__PURE__*/_jsxDEV(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: content\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1082,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-state\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u8BF7\\u4E0A\\u4F20PDF\\u6216TXT\\u6587\\u4EF6\\u5F00\\u59CB\\u9605\\u8BFB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1085,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1084,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1080,\n        columnNumber: 9\n      }, this), content && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"page-btn prev\",\n          onClick: () => changePage(-1),\n          disabled: currentPage === 1,\n          children: \"\\u4E0A\\u4E00\\u9875\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1091,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"page-info\",\n          children: [\"\\u7B2C \", currentPage, \" \\u9875 / \\u5171 \", totalPages, \" \\u9875\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1094,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"page-btn next\",\n          onClick: () => changePage(1),\n          disabled: currentPage === totalPages,\n          children: \"\\u4E0B\\u4E00\\u9875\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1097,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1090,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1052,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1037,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"FdIIE1mY5AAmB921foSmrxDLqNQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","pdfjsLib","pdfjsViewer","marked","pdfjs","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","autoReader","currentIndex","charPositions","intervalId","speed","pageContainer","isScrolling","currentPage","tagPartsOfSpeech","text","punctuationMarks","segments","split","RegExp","map","mark","join","result","colorIndex","currentText","forEach","segment","index","test","isPunctuation","includes","color","App","_s","pages","setPages","setCurrentPage","totalPages","setTotalPages","fileName","setFileName","loading","setLoading","fileRef","file","setFile","pdfInstance","setPdfInstance","extractedTextPages","setExtractedTextPages","readingMode","setReadingMode","posMode","setPosMode","markdownContent","setMarkdownContent","readerContainerRef","autoReadGuideRef","autoReadIntervalRef","content","setContent","pdfDocument","setPdfDocument","autoReaderState","setAutoReaderState","isUserScrolling","scrollTimeout","contentLoaded","current","clearInterval","setTimeout","initializeMouseFollow","handlePdfFile","fileURL","URL","createObjectURL","loadingTask","getDocument","pdf","promise","numPages","extractAndProcessPage","console","log","error","alert","pageNum","page","getPage","textContent","getTextContent","viewport","getViewport","scale","isTableOfContents","detectIfTocPage","processTocPage","processContentPage","addMouseFollowListeners","textItems","items","fullText","item","str","hasTocKeywords","hasPageNumberPatterns","shortLinesCount","linesWithNumbersCount","lineMap","Map","yKey","Math","round","transform","has","set","get","push","lines","values","line","lineText","length","shortLineRatio","numberLineRatio","htmlContent","x","y","height","fontSize","sqrt","fontWeight","fontName","toLowerCase","spacedText","getTextNodeAtPosition","element","nodes","childNodes","i","node","nodeType","Node","TEXT_NODE","range","document","createRange","selectNodeContents","rects","getClientRects","j","rect","top","bottom","left","right","ELEMENT_NODE","found","processTextWithHighlight","words","lastColor","word","random","mode","extractedText","replace","trim","processedContent","formatTextToHtml","applyStaticHighlight","formatTextForMouseFollow","handleTxtFile","pageTexts","paragraph","fontFamily","handleFileUpload","e","target","files","type","getAllCharacterPositions","container","walker","createTreeWalker","NodeFilter","SHOW_TEXT","positions","nextNode","currentNode","setStart","setEnd","getBoundingClientRect","width","char","warn","filter","p","sort","a","b","yDiff","abs","scrollElementToCenter","elementY","isContainerScrollable","scrollHeight","clientHeight","window","getComputedStyle","overflowY","targetScrollTop","containerVisibleHeight","scrollTo","max","behavior","absoluteElementY","innerHeight","createReaderCursor","cursor","createElement","id","style","cssText","getElementById","head","appendChild","startAutoReader","changePage","contentContainer","querySelector","position","scrollTarget","setInterval","_autoReader$charPosit","stopAutoReader","pos","contentRect","relativeX","relativeY","scrollTop","remove","initializeAutoReader","firstPos","handleReadingModeChange","newMode","value","cleanupDOM","contentArea","innerHTML","highlights","querySelectorAll","el","cleanContent","cloneNode","parentNode","replaceChild","paragraphs","newParagraph","className","removeAttribute","handleAutoScroll","updateCursorPosition","force","removeEventListener","handleMouseMove","clearAllHighlights","addEventListener","lineHeight","cleanParagraph","highlightedText","mouseTarget","elementFromPoint","clientX","clientY","classList","contains","tagName","targetParagraph","closest","textNode","lineHighlight","background","pointerEvents","body","addAutoReaderStyles","offsetHeight","fakeEvent","MouseEvent","innerWidth","bubbles","dispatchEvent","adjustSpeed","delta","prev","newPage","wasAutoReading","children","_jsxFileName","lineNumber","columnNumber","accept","onChange","display","onClick","dangerouslySetInnerHTML","__html","disabled","_c","$RefreshReg$"],"sources":["D:/adhd-read-helper/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 新增全局变量\nlet autoReader = {\n  currentIndex: 0,\n  charPositions: [],\n  intervalId: null,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1\n};\n\n// 模拟NLP词性标注功能（实际应用中建议使用专业NLP库如nlp.js或调用API）\nconst tagPartsOfSpeech = (text) => {\n  // 定义所有标点符号\n  const punctuationMarks = [\n    '，', '。', '！', '？', '；', '：', '（', '）', '【', '】', '《', '》', '〈', '〉', '…', '—', '～', '·',\n    ',', '.', '!', '?', ';', ':', '(', ')', '[', ']', '{', '}', '-', '...', '..'\n  ];\n  \n  // 将文本按标点符号分割，保留标点符号\n  const segments = text.split(new RegExp(`([${punctuationMarks.map(mark => '\\\\' + mark).join('')}])`));\n  let result = '';\n  let colorIndex = 0; // 0: 红色, 1: 蓝色, 2: 黑色\n  let currentText = '';\n  \n  segments.forEach((segment, index) => {\n    // 跳过空字符串和纯空格\n    if (!segment || /^\\s+$/.test(segment)) {\n      result += segment;\n      return;\n    }\n    \n    // 检查是否是标点符号\n    const isPunctuation = punctuationMarks.includes(segment);\n    \n    // 根据索引选择颜色\n    let color;\n    switch (colorIndex) {\n      case 0:\n        color = 'red';\n        break;\n      case 1:\n        color = 'blue';\n        break;\n      case 2:\n        color = 'black';\n        break;\n      default:\n        color = 'black';\n    }\n    \n    // 将当前文本和标点符号放在同一个颜色块中\n    if (isPunctuation) {\n      // 如果有累积的文本，先添加文本\n      if (currentText) {\n        result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n        currentText = '';\n      }\n      // 添加标点符号\n      result += `<span class=\"highlight-word ${color}\">${segment}</span>`;\n      // 切换颜色\n      colorIndex = (colorIndex + 1) % 3;\n    } else {\n      // 累积文本\n      currentText += segment;\n    }\n  });\n  \n  // 处理最后可能剩余的文本\n  if (currentText) {\n    const color = colorIndex === 0 ? 'red' : colorIndex === 1 ? 'blue' : 'black';\n    result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n  }\n  \n  return result;\n};\n\nconst App = () => {\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const autoReadGuideRef = useRef(null);\n  const autoReadIntervalRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  \n  // 新增自动阅读器状态\n  const [autoReaderState, setAutoReaderState] = useState({\n    currentIndex: 0,\n    charPositions: [],\n    intervalId: null,\n    speed: 300,\n    pageContainer: null,\n    isUserScrolling: false,\n    scrollTimeout: null,\n    contentLoaded: false\n  });\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n    \n    return () => {\n      // 清理自动阅读定时器\n      if (autoReadIntervalRef.current) {\n        clearInterval(autoReadIntervalRef.current);\n      }\n    };\n  }, []);\n  \n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async (file) => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      \n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n      \n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n      \n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n  \n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({ scale: 1.0 });\n      \n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      \n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      \n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async (textContent) => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n    \n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n    \n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n    \n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    \n    const lines = [...lineMap.values()];\n    \n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    \n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    \n    return hasTocKeywords || hasPageNumberPatterns || (shortLineRatio > 0.7 && numberLineRatio > 0.3);\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n    \n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    \n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n      \n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n      \n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n      \n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    \n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && \n              x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = (text) => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    \n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      \n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        \n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    \n    return result;\n  };\n\n  // 修改processContentPage函数\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      \n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch(mode) {\n        case 'normal':\n          // 普通模式 - 简单分段显示\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'static':\n          // 静态高亮模式 - 应用词性标注和颜色高亮\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'follow-mouse':\n          // 鼠标跟随高亮模式 - 分段落但不预先高亮，由鼠标事件触发高亮\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      \n      setContent(processedContent);\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async (file) => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n    \n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain') {\n      handleTxtFile(file);\n    } else {\n      alert('请上传PDF或TXT文件');\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = (container) => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    \n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n      \n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n      \n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          \n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n          \n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width/2,  // 水平中心\n            y: rect.bottom,               // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n    \n    // 过滤无效位置并排序\n    return positions\n      .filter(p => p.char.trim() !== '')\n      .sort((a, b) => {\n        // 先按行排序，同行按列排序\n        const yDiff = a.y - b.y;\n        if (Math.abs(yDiff) > 5) { // 5px阈值判断是否同一行\n          return yDiff;\n        }\n        return a.x - b.x;\n      });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    \n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - (containerVisibleHeight / 2);\n      \n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - (window.innerHeight / 2);\n      \n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    \n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n    \n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    \n    return cursor;\n  };\n\n  // 始终保持正在阅读的内容在视野中心\n  const startAutoReader = () => {\n    if (autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages) {\n        changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 重置索引到开头\n    autoReader.currentIndex = 0;\n    \n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    \n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n    \n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n    \n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight &&\n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n    \n    // 滚动目标\n    const scrollTarget = isContainerScrollable ? contentContainer : window;\n    \n    autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (autoReader.currentIndex < autoReader.charPositions.length && \n             autoReader.charPositions[autoReader.currentIndex]?.char.trim() === '') {\n        autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (autoReader.currentIndex >= autoReader.charPositions.length) {\n        if (currentPage < totalPages) {\n          changePage(1);\n          clearInterval(autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n\n      const pos = autoReader.charPositions[autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      \n      if (cursor) {\n        // 获取容器的位置\n        const contentRect = contentContainer.getBoundingClientRect();\n        \n        // 计算光标相对于容器的坐标\n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        \n        // 更新光标位置为相对容器的坐标\n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        \n        // ===== 强制使正在阅读的内容居中 =====\n        \n        // 计算目标滚动位置\n        let targetScrollTop;\n        \n        if (isContainerScrollable) {\n          // 如果容器可滚动，计算将当前位置放在容器中央所需的滚动量\n          targetScrollTop = relativeY - (contentContainer.clientHeight / 2);\n        } else {\n          // 如果是窗口滚动，计算将当前位置放在窗口中央所需的滚动量\n          targetScrollTop = pos.y - (window.innerHeight / 2);\n        }\n        \n        // 立即执行滚动，将当前阅读位置居中\n        scrollTarget.scrollTo({\n          top: targetScrollTop,\n          behavior: 'smooth'\n        });\n      }\n      \n      autoReader.currentIndex++;\n      \n    }, autoReader.speed);\n  };\n\n  // 停止自动阅读\n  const stopAutoReader = () => {\n    clearInterval(autoReader.intervalId);\n    autoReader.intervalId = null;\n    const cursor = document.getElementById('auto-reader-cursor');\n    if (cursor) cursor.remove();\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n    \n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n    \n    // 确保容器有正确的定位和滚动属性\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n    \n    // 确保有正确的overflow属性\n    const style = window.getComputedStyle(content);\n    if (content.scrollHeight > content.clientHeight && \n        style.overflowY !== 'auto' && style.overflowY !== 'scroll') {\n      content.style.overflowY = 'auto';\n    }\n    \n    // 收集字符位置\n    autoReader.charPositions = getAllCharacterPositions(content);\n    \n    // 如果当前页没有内容，尝试翻页\n    if (autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages) {\n        changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 立即开始移动\n    startAutoReader();\n    \n    // 初始滚动到第一个字符\n    if (autoReader.charPositions.length > 0) {\n      setTimeout(() => {\n        const firstPos = autoReader.charPositions[0];\n        scrollElementToCenter(firstPos.y, content);\n      }, 100);\n    }\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async (e) => {\n    const newMode = e.target.value;\n    \n    // 停止当前可能正在运行的自动阅读\n    stopAutoReader();\n    \n    // 清理旧模式\n    cleanupDOM();\n    \n    // 更新状态\n    setReadingMode(newMode);\n    \n    // 应用新模式\n    if (pdfDocument && currentPage > 0) {\n      try {\n        const page = await pdfDocument.getPage(currentPage);\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        let processedContent = '';\n        \n        // 应用对应模式的文本处理\n        switch(newMode) {\n          case 'follow-mouse':\n            processedContent = formatTextForMouseFollow(extractedText);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlight(extractedText);\n            break;\n          case 'auto-reader':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          default:\n            processedContent = formatTextToHtml(extractedText);\n        }\n        \n        const contentArea = document.querySelector('.page-content');\n        if (contentArea) {\n          contentArea.textContent = '';\n          contentArea.innerHTML = processedContent;\n          \n          // 立即初始化对应模式\n          if (newMode === 'auto-reader') {\n            // 短暂延迟确保DOM已更新\n            setTimeout(initializeAutoReader, 50);\n          } else if (newMode === 'follow-mouse') {\n            setTimeout(initializeMouseFollow, 50);\n          }\n        }\n      } catch (error) {\n        console.error('应用新阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 1. 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll(\n      '.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line'\n    );\n    highlights.forEach(el => el.remove());\n    \n    // 2. 移除事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 克隆内容区域以彻底移除所有事件监听器\n      const cleanContent = contentArea.cloneNode(false);\n      cleanContent.innerHTML = contentArea.innerHTML;\n      contentArea.parentNode.replaceChild(cleanContent, contentArea);\n    }\n    \n    // 3. 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 创建新段落并保留基本结构\n      const newParagraph = document.createElement('p');\n      newParagraph.className = 'pdf-paragraph';\n      newParagraph.innerHTML = paragraph.innerHTML\n        .replace(/<span class=\"text-line\">/g, '')\n        .replace(/<\\/span>/g, '');\n      \n      // 移除特殊属性\n      newParagraph.removeAttribute('data-follow');\n      newParagraph.removeAttribute('style');\n      \n      if (paragraph.parentNode) {\n        paragraph.parentNode.replaceChild(newParagraph, paragraph);\n      }\n    });\n    \n    // 4. 清理自动阅读器\n    stopAutoReader();\n  };\n\n  const handleAutoScroll = () => {\n    autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 添加鼠标跟随监听器\n  const addMouseFollowListeners = () => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    \n    // 清理旧的监听器\n    contentArea.removeEventListener('mousemove', handleMouseMove);\n    contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    \n    // 添加新的监听器\n    contentArea.addEventListener('mousemove', handleMouseMove);\n    contentArea.addEventListener('mouseleave', clearAllHighlights);\n    \n    // 确保所有段落都有正确的样式\n    document.querySelectorAll('.pdf-paragraph').forEach(p => {\n      p.style.position = 'relative';\n      p.style.lineHeight = '1.5';\n    });\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = (text) => {\n    // 分段\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    // 创建HTML内容\n    let htmlContent = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      htmlContent += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 格式化文本用于鼠标跟随高亮模式\n  const formatTextForMouseFollow = (text) => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    let htmlContent = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      // 将段落分割成行\n      const lines = paragraph.split('\\n').filter(line => line.trim());\n      htmlContent += `<p class=\"pdf-paragraph\" data-follow=\"true\" style=\"position: relative; line-height: 1.5;\">`;\n      \n      lines.forEach((line, i) => {\n        // 每行用span包裹\n        htmlContent += `<span class=\"text-line\" style=\"display: block;\">${line}</span>`;\n      });\n      \n      htmlContent += `</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 应用静态高亮\n  const applyStaticHighlight = (text) => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    let htmlContent = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      // 新增强制清理逻辑\n      const cleanParagraph = paragraph\n        .replace(/<span class=\"text-line\">/g, '')\n        .replace(/<\\/span>/g, '');\n      \n      const highlightedText = processTextWithHighlight(cleanParagraph);\n      htmlContent += `<p class=\"pdf-paragraph\">${highlightedText}</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = (e) => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    // 清除所有现有高亮\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n    \n    const mouseTarget = document.elementFromPoint(e.clientX, e.clientY);\n    \n    if (mouseTarget && \n       (mouseTarget.classList.contains('pdf-paragraph') || \n        mouseTarget.tagName === 'P' || \n        mouseTarget.tagName === 'SPAN')) {\n      \n      const targetParagraph = mouseTarget.closest('.pdf-paragraph');\n      if (!targetParagraph) return;\n      \n      // 获取段落文本节点\n      const textNode = getTextNodeAtPosition(targetParagraph, e.clientX, e.clientY);\n      if (!textNode) return;\n      \n      // 获取精确的行位置和尺寸\n      const range = document.createRange();\n      range.selectNodeContents(textNode);\n      const rects = range.getClientRects();\n      \n      // 找到鼠标所在的具体行\n      if (rects.length > 0) {\n        const rect = rects[0];\n        const lineHighlight = document.createElement('div');\n        lineHighlight.className = 'line-highlight';\n        lineHighlight.style.position = 'absolute';\n        lineHighlight.style.left = `${rect.left}px`;\n        lineHighlight.style.right = `${rect.right}px`;\n        lineHighlight.style.top = `${rect.top}px`;\n        lineHighlight.style.height = `${rect.height}px`;\n        lineHighlight.style.background = 'rgba(0, 255, 0, 0.2)';\n        lineHighlight.style.pointerEvents = 'none';\n        document.body.appendChild(lineHighlight);\n      }\n    }\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 新增延迟补偿\n    setTimeout(() => {\n      addMouseFollowListeners();\n      \n      // 强制触发重排\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        void contentArea.offsetHeight;\n        \n        // 模拟鼠标移动事件\n        const fakeEvent = new MouseEvent('mousemove', {\n          clientX: window.innerWidth / 2,\n          clientY: window.innerHeight / 2,\n          bubbles: true\n        });\n        contentArea.dispatchEvent(fakeEvent);\n      }\n    }, 50);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = (delta) => {\n    autoReader.speed = Math.max(100, autoReader.speed + delta);\n    setAutoReaderState(prev => ({ ...prev, speed: autoReader.speed }));\n    \n    if (autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async (delta) => {\n    const newPage = currentPage + delta;\n    \n    if (newPage < 1 || newPage > totalPages) return;\n    \n    const wasAutoReading = readingMode === 'auto-reader' && autoReader.intervalId;\n    \n    // 如果正在自动阅读，先停止\n    if (wasAutoReading) {\n      clearInterval(autoReader.intervalId);\n      autoReader.intervalId = null;\n    }\n    \n    // 更新页码\n    setCurrentPage(newPage);\n    \n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n      // 按当前阅读模式处理内容\n      let processedContent = '';\n      switch(readingMode) {\n        case 'follow-mouse':\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'auto-reader':\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      \n      // 更新页面内容\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        contentArea.textContent = '';\n        contentArea.innerHTML = processedContent;\n        \n        // 滚动到页面顶部\n        window.scrollTo(0, 0);\n        \n        // 如果之前在自动阅读，重新启动自动阅读\n        if (readingMode === 'auto-reader') {\n          setTimeout(initializeAutoReader, 50);\n        } else if (readingMode === 'follow-mouse') {\n          setTimeout(initializeMouseFollow, 50);\n        }\n      }\n    } catch (error) {\n      console.error('翻页失败:', error);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        <div className=\"logo\">\n          <h2>ADHD阅读助手</h2>\n        </div>\n        <label className=\"upload-btn\">\n          选择文件\n          <input\n            type=\"file\"\n            accept=\".pdf,.txt\"\n            onChange={handleFileUpload}\n            style={{ display: 'none' }}\n          />\n        </label>\n      </div>\n      <div className=\"main-content\">\n        <div className=\"header\">\n          <h1>ADHD阅读助手</h1>\n          <div className=\"controls\">\n            <div className=\"mode-selector\">\n              <select value={readingMode} onChange={handleReadingModeChange}>\n                <option value=\"normal\">普通模式</option>\n                <option value=\"static\">静态高亮模式</option>\n                <option value=\"follow-mouse\">鼠标跟随高亮</option>\n                <option value=\"auto-reader\">自动阅读器</option>\n              </select>\n            </div>\n            <div className=\"mode-selector\">\n              <select value={posMode} onChange={(e) => setPosMode(e.target.value)}>\n                <option value=\"none\">无词性标注</option>\n                <option value=\"noun\">名词标注</option>\n                <option value=\"all\">全词性标注</option>\n              </select>\n            </div>\n            {readingMode === 'auto-reader' && (\n              <div className=\"speed-control\">\n                <button onClick={() => adjustSpeed(-100)}>-</button>\n                <span>{autoReaderState.speed}ms</span>\n                <button onClick={() => adjustSpeed(100)}>+</button>\n              </div>\n            )}\n          </div>\n        </div>\n        <div className=\"page-content\">\n          {content ? (\n            <div dangerouslySetInnerHTML={{ __html: content }} />\n          ) : (\n            <div className=\"empty-state\">\n              <p>请上传PDF或TXT文件开始阅读</p>\n            </div>\n          )}\n        </div>\n        {content && (\n          <div className=\"nav-buttons\">\n            <button className=\"page-btn prev\" onClick={() => changePage(-1)} disabled={currentPage === 1}>\n              上一页\n            </button>\n            <span className=\"page-info\">\n              第 {currentPage} 页 / 共 {totalPages} 页\n            </span>\n            <button className=\"page-btn next\" onClick={() => changePage(1)} disabled={currentPage === totalPages}>\n              下一页\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}