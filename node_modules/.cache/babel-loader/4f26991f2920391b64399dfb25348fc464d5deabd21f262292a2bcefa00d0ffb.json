{"ast":null,"code":"var _jsxFileName = \"D:\\\\adhd-read-helper\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\nimport { initializeReader } from './utils/readerUtils';\n\n// 设置 PDF.js worker\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 模拟NLP词性标注功能（实际应用中建议使用专业NLP库如nlp.js或调用API）\nconst tagPartsOfSpeech = text => {\n  // 使用简单的规则来标记常见名词\n  const commonNouns = ['书', '文章', '段落' /* 其他常见名词 */];\n  let highlightedText = text;\n  commonNouns.forEach(noun => {\n    const regex = new RegExp(noun, 'g');\n    highlightedText = highlightedText.replace(regex, `<span class=\"highlight\">${noun}</span>`);\n  });\n  return highlightedText;\n};\nconst App = () => {\n  _s();\n  // 状态定义\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null); // 添加文件引用\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [highlightColor, setHighlightColor] = useState('#ffeb3b'); // 默认高亮颜色\n  const [highlightPOS, setHighlightPOS] = useState(['noun']); // 默认高亮词性\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const autoReadGuideRef = useRef(null);\n  const autoReadIntervalRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  const [pdf, setPdf] = useState(null);\n  const [scale, setScale] = useState(1.0);\n  const [isRestMode, setIsRestMode] = useState(false);\n  const [error, setError] = useState(null);\n  const fileInputRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n    // 设置高亮颜色\n    document.documentElement.style.setProperty('--highlight-color', highlightColor);\n    return () => {\n      // 清理自动阅读定时器\n      if (autoReadIntervalRef.current) {\n        clearInterval(autoReadIntervalRef.current);\n      }\n    };\n  }, [highlightColor]);\n\n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'auto-guide') {\n      startAutoReadGuide();\n    } else if (autoReadIntervalRef.current) {\n      clearInterval(autoReadIntervalRef.current);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async file => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n\n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n\n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n\n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({\n        scale: 1.0\n      });\n\n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(textContent);\n      }\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async textContent => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n\n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n\n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n\n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    const lines = [...lineMap.values()];\n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    return hasTocKeywords || hasPageNumberPatterns || shortLineRatio > 0.7 && numberLineRatio > 0.3;\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n\n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n\n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n\n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n\n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 处理正文页面 - 以句号为标准划分段落\n  const processContentPage = async textContent => {\n    const textItems = textContent.items;\n\n    // 将文本项按视觉顺序排列（从上到下，从左到右）\n    const sortedItems = [...textItems].sort((a, b) => {\n      // 如果Y坐标差别不大，按X坐标排序\n      if (Math.abs(b.transform[5] - a.transform[5]) < 5) {\n        return a.transform[4] - b.transform[4];\n      }\n      // 否则按Y坐标排序（从上到下）\n      return b.transform[5] - a.transform[5];\n    });\n\n    // 构建完整文本\n    let fullText = sortedItems.map(item => item.str).join('');\n\n    // 使用正则表达式按句号（和其他句尾标点）分割文本成段落\n    // 中文句号：。！？\n    // 英文句号：.!?\n    const sentenceRegex = /([^。！？.!?]+[。！？.!?])/g;\n    const sentences = fullText.match(sentenceRegex) || [fullText];\n\n    // 生成HTML内容\n    let htmlContent = '<div class=\"pdf-content\">';\n    sentences.forEach(sentence => {\n      // 应用ADHD友好的字间距\n      const spacedText = sentence.split('').join('\\u200A');\n\n      // 添加段落，设置首行缩进\n      htmlContent += `<p class=\"pdf-paragraph\">${spacedText}</p>`;\n    });\n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async file => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain') {\n      handleTxtFile(file);\n    } else {\n      alert('请上传PDF或TXT文件');\n    }\n  };\n\n  // 翻页函数\n  const changePage = async delta => {\n    const newPage = currentPage + delta;\n    if (newPage >= 1 && newPage <= totalPages && pdfDocument) {\n      setCurrentPage(newPage);\n      await extractAndProcessPage(pdfDocument, newPage);\n    }\n  };\n\n  // 设置鼠标跟随高亮\n  const setupMouseFollowHighlight = () => {\n    const pageContent = document.querySelector('.pdf-content');\n    if (!pageContent) return;\n    pageContent.addEventListener('mousemove', e => {\n      if (readingMode !== 'follow-mouse') return;\n\n      // 清除之前的高亮\n      const prevHighlighted = pageContent.querySelectorAll('.reading-line');\n      prevHighlighted.forEach(el => el.classList.remove('reading-line'));\n\n      // 获取鼠标所在的行\n      const lines = pageContent.querySelectorAll('.text-line');\n      lines.forEach(line => {\n        const rect = line.getBoundingClientRect();\n        if (e.clientY >= rect.top && e.clientY <= rect.bottom) {\n          line.classList.add('reading-line');\n        }\n      });\n    });\n  };\n\n  // 自动阅读引导\n  const startAutoReadGuide = () => {\n    if (autoReadIntervalRef.current) {\n      clearInterval(autoReadIntervalRef.current);\n    }\n\n    // 创建阅读指示点\n    if (!autoReadGuideRef.current) {\n      const guide = document.createElement('div');\n      guide.className = 'auto-read-guide';\n      document.querySelector('.page-content').appendChild(guide);\n      autoReadGuideRef.current = guide;\n    }\n\n    // 获取页面内所有段落\n    const paragraphs = document.querySelectorAll('.page-content p');\n    if (!paragraphs.length) return;\n    let currentParagraphIndex = 0;\n    let currentCharIndex = 0;\n    autoReadIntervalRef.current = setInterval(() => {\n      if (currentParagraphIndex >= paragraphs.length) {\n        clearInterval(autoReadIntervalRef.current);\n        return;\n      }\n      const paragraph = paragraphs[currentParagraphIndex];\n      const text = paragraph.textContent;\n      if (currentCharIndex >= text.length) {\n        currentParagraphIndex++;\n        currentCharIndex = 0;\n        return;\n      }\n\n      // 计算当前字符位置\n      const range = document.createRange();\n      const textNode = paragraph.firstChild;\n      if (textNode && textNode.nodeType === Node.TEXT_NODE) {\n        range.setStart(textNode, Math.min(currentCharIndex, textNode.length));\n        range.setStart(textNode, Math.min(currentCharIndex, textNode.length));\n        const rect = range.getBoundingClientRect();\n\n        // 更新指示点位置\n        if (autoReadGuideRef.current) {\n          const guide = autoReadGuideRef.current;\n          guide.style.left = `${rect.left}px`;\n          guide.style.top = `${rect.bottom + 5}px`;\n\n          // 闪烁效果\n          guide.style.opacity = 1;\n          setTimeout(() => {\n            guide.style.opacity = 0.5;\n          }, 100);\n        }\n      }\n      currentCharIndex += 1;\n    }, 200); // 每秒5个字符的速度\n  };\n\n  // 处理阅读模式切换\n  const handleReadingModeChange = mode => {\n    setReadingMode(mode);\n    if (mode === 'follow-mouse') {\n      setTimeout(setupMouseFollowHighlight, 100);\n    }\n  };\n  useEffect(() => {\n    // 当阅读模式为follow-mouse时，设置鼠标跟随高亮\n    if (readingMode === 'follow-mouse' && content) {\n      setTimeout(setupMouseFollowHighlight, 100);\n    }\n  }, [readingMode, content]);\n\n  // 监听阅读模式变化\n  useEffect(() => {\n    if (content) {\n      const contentElement = document.querySelector('.page-content');\n      if (contentElement) {\n        if (readingMode === 'adhd') {\n          contentElement.classList.add('adhd-default-mode');\n        } else {\n          contentElement.classList.remove('adhd-default-mode');\n        }\n      }\n    }\n  }, [readingMode, content]);\n\n  // 初始化阅读器\n  useEffect(() => {\n    // 只在PDF加载后初始化\n    if (pdf) {\n      initializeReader();\n    }\n  }, [pdf]);\n\n  // 处理文件选择\n  const handleFileSelect = async event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    setLoading(true);\n    setError(null);\n    try {\n      const arrayBuffer = await file.arrayBuffer();\n      const pdf = await pdfjsLib.getDocument(arrayBuffer).promise;\n      setPdf(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n      await renderPage(1);\n    } catch (err) {\n      setError('PDF加载失败：' + err.message);\n      console.error('PDF加载错误：', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 渲染PDF页面\n  const renderPage = async pageNumber => {\n    if (!pdf) return;\n    try {\n      const page = await pdf.getPage(pageNumber);\n      const viewport = page.getViewport({\n        scale\n      });\n      const canvas = canvasRef.current;\n      const context = canvas.getContext('2d');\n      canvas.height = viewport.height;\n      canvas.width = viewport.width;\n      const renderContext = {\n        canvasContext: context,\n        viewport: viewport\n      };\n      await page.render(renderContext).promise;\n\n      // 获取文本内容\n      const textContent = await page.getTextContent();\n\n      // 清除旧的文本层\n      const oldTextLayer = document.querySelector('.text-layer');\n      if (oldTextLayer) {\n        oldTextLayer.remove();\n      }\n\n      // 创建新的文本层容器\n      const textLayerDiv = document.createElement('div');\n      textLayerDiv.className = 'text-layer';\n      textLayerDiv.style.cssText = `\n        position: absolute;\n        left: 0;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        overflow: hidden;\n        opacity: 1;\n        line-height: 1.0;\n        user-select: text;\n        pointer-events: auto;\n      `;\n\n      // 为每个文本项创建span元素\n      textContent.items.forEach((item, index) => {\n        const tx = pdfjsLib.Util.transform(viewport.transform, item.transform);\n        const span = document.createElement('span');\n        span.textContent = item.str;\n\n        // 设置span的样式和位置\n        span.style.cssText = `\n          position: absolute;\n          left: ${tx[4]}px;\n          top: ${tx[5]}px;\n          font-size: ${Math.sqrt(tx[0] * tx[0] + tx[1] * tx[1])}px;\n          transform-origin: 0% 0%;\n          transform: scaleX(${tx[0]});\n          white-space: pre;\n          cursor: text;\n          color: transparent;\n        `;\n        textLayerDiv.appendChild(span);\n      });\n\n      // 添加文本层到容器\n      const container = document.querySelector('.pdf-container');\n      if (container) {\n        container.style.position = 'relative';\n        container.appendChild(textLayerDiv);\n\n        // 添加文本选择事件监听器\n        textLayerDiv.addEventListener('mouseup', () => {\n          const selection = window.getSelection();\n          if (selection.toString().length > 0) {\n            const range = selection.getRangeAt(0);\n            const span = document.createElement('span');\n            span.className = 'highlight';\n            span.style.backgroundColor = document.documentElement.style.getPropertyValue('--highlight-color') || '#ff0000';\n            try {\n              range.surroundContents(span);\n              saveHighlights();\n            } catch (err) {\n              console.error('创建高亮失败:', err);\n            }\n          }\n        });\n      }\n    } catch (err) {\n      setError('页面渲染失败：' + err.message);\n      console.error('页面渲染错误：', err);\n    }\n  };\n\n  // 创建高亮\n  const createHighlight = color => {\n    const selection = window.getSelection();\n    if (selection.toString().length > 0) {\n      const range = selection.getRangeAt(0);\n      const span = document.createElement('span');\n      span.className = 'highlight';\n      span.style.backgroundColor = color;\n      range.surroundContents(span);\n      saveHighlights();\n    }\n  };\n\n  // 保存高亮\n  const saveHighlights = () => {\n    const highlights = Array.from(document.querySelectorAll('.highlight')).map(h => ({\n      text: h.textContent,\n      color: h.style.backgroundColor,\n      position: getElementPosition(h)\n    }));\n    localStorage.setItem('highlights', JSON.stringify(highlights));\n  };\n\n  // 获取元素位置\n  const getElementPosition = element => {\n    const rect = element.getBoundingClientRect();\n    return {\n      top: rect.top,\n      left: rect.left,\n      width: rect.width,\n      height: rect.height\n    };\n  };\n\n  // 加载保存的高亮\n  const loadHighlights = () => {\n    const highlights = JSON.parse(localStorage.getItem('highlights') || '[]');\n    highlights.forEach(h => {\n      const span = document.createElement('span');\n      span.className = 'highlight';\n      span.style.backgroundColor = h.color;\n      span.textContent = h.text;\n      // 根据position插入到正确位置\n      insertAtPosition(span, h.position);\n    });\n  };\n\n  // 在指定位置插入元素\n  const insertAtPosition = (element, position) => {\n    // 实现插入逻辑\n  };\n\n  // 缩放控制\n  const handleZoom = async delta => {\n    const newScale = scale + delta;\n    if (newScale >= 0.5 && newScale <= 2.0) {\n      setScale(newScale);\n      await renderPage(currentPage);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"ADHD \\u9605\\u8BFB\\u52A9\\u624B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".pdf\",\n          onChange: handleFileSelect,\n          style: {\n            display: 'none'\n          },\n          ref: fileInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 600,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            var _fileInputRef$current;\n            return (_fileInputRef$current = fileInputRef.current) === null || _fileInputRef$current === void 0 ? void 0 : _fileInputRef$current.click();\n          },\n          children: \"\\u9009\\u62E9PDF\\u6587\\u4EF6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 607,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"color\",\n          value: highlightColor,\n          onChange: e => {\n            setHighlightColor(e.target.value);\n            document.documentElement.style.setProperty('--highlight-color', e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 610,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 599,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 597,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pdf-container\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canvasRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 623,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 626,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleZoom(-0.1),\n          disabled: scale <= 0.5,\n          children: \"\\u7F29\\u5C0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 629,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [Math.round(scale * 100), \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 635,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleZoom(0.1),\n          disabled: scale >= 2.0,\n          children: \"\\u653E\\u5927\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 636,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => changePage(-1),\n          disabled: currentPage <= 1,\n          children: \"\\u4E0A\\u4E00\\u9875\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 642,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"\\u7B2C \", currentPage, \" / \", totalPages, \" \\u9875\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 648,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => changePage(1),\n          disabled: currentPage >= totalPages,\n          children: \"\\u4E0B\\u4E00\\u9875\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 649,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 621,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 596,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"i1j+pF86fYo6AxGHKQFzeAItw0g=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","pdfjsLib","pdfjsViewer","marked","pdfjs","initializeReader","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","tagPartsOfSpeech","text","commonNouns","highlightedText","forEach","noun","regex","RegExp","replace","App","_s","isDarkMode","setIsDarkMode","pages","setPages","currentPage","setCurrentPage","totalPages","setTotalPages","fileName","setFileName","loading","setLoading","fileRef","file","setFile","pdfInstance","setPdfInstance","extractedTextPages","setExtractedTextPages","readingMode","setReadingMode","highlightColor","setHighlightColor","highlightPOS","setHighlightPOS","markdownContent","setMarkdownContent","readerContainerRef","autoReadGuideRef","autoReadIntervalRef","content","setContent","pdfDocument","setPdfDocument","pdf","setPdf","scale","setScale","isRestMode","setIsRestMode","error","setError","fileInputRef","canvasRef","document","documentElement","style","setProperty","current","clearInterval","startAutoReadGuide","handlePdfFile","fileURL","URL","createObjectURL","loadingTask","getDocument","promise","numPages","extractAndProcessPage","console","log","alert","pageNum","page","getPage","textContent","getTextContent","viewport","getViewport","isTableOfContents","detectIfTocPage","processTocPage","processContentPage","textItems","items","fullText","map","item","str","join","hasTocKeywords","test","hasPageNumberPatterns","shortLinesCount","linesWithNumbersCount","lineMap","Map","yKey","Math","round","transform","has","set","get","push","lines","values","line","lineText","length","shortLineRatio","numberLineRatio","htmlContent","x","y","height","fontSize","sqrt","fontWeight","fontName","toLowerCase","includes","spacedText","split","sortedItems","sort","a","b","abs","sentenceRegex","sentences","match","sentence","handleTxtFile","pageTexts","paragraph","fontFamily","handleFileUpload","e","target","files","type","changePage","delta","newPage","setupMouseFollowHighlight","pageContent","querySelector","addEventListener","prevHighlighted","querySelectorAll","el","classList","remove","rect","getBoundingClientRect","clientY","top","bottom","add","guide","createElement","className","appendChild","paragraphs","currentParagraphIndex","currentCharIndex","setInterval","range","createRange","textNode","firstChild","nodeType","Node","TEXT_NODE","setStart","min","left","opacity","setTimeout","handleReadingModeChange","mode","contentElement","handleFileSelect","event","arrayBuffer","renderPage","err","message","pageNumber","canvas","context","getContext","width","renderContext","canvasContext","render","oldTextLayer","textLayerDiv","cssText","index","tx","Util","span","container","position","selection","window","getSelection","toString","getRangeAt","backgroundColor","getPropertyValue","surroundContents","saveHighlights","createHighlight","color","highlights","Array","from","h","getElementPosition","localStorage","setItem","JSON","stringify","element","loadHighlights","parse","getItem","insertAtPosition","handleZoom","newScale","children","_jsxFileName","lineNumber","columnNumber","accept","onChange","display","ref","onClick","_fileInputRef$current","click","value","disabled","_c","$RefreshReg$"],"sources":["D:/adhd-read-helper/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\nimport { initializeReader } from './utils/readerUtils';\n\n// 设置 PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 模拟NLP词性标注功能（实际应用中建议使用专业NLP库如nlp.js或调用API）\nconst tagPartsOfSpeech = (text) => {\n  // 使用简单的规则来标记常见名词\n  const commonNouns = ['书', '文章', '段落', /* 其他常见名词 */];\n  let highlightedText = text;\n  \n  commonNouns.forEach(noun => {\n    const regex = new RegExp(noun, 'g');\n    highlightedText = highlightedText.replace(regex, `<span class=\"highlight\">${noun}</span>`);\n  });\n  \n  return highlightedText;\n};\n\nconst App = () => {\n  // 状态定义\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null); // 添加文件引用\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [highlightColor, setHighlightColor] = useState('#ffeb3b'); // 默认高亮颜色\n  const [highlightPOS, setHighlightPOS] = useState(['noun']); // 默认高亮词性\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const autoReadGuideRef = useRef(null);\n  const autoReadIntervalRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  const [pdf, setPdf] = useState(null);\n  const [scale, setScale] = useState(1.0);\n  const [isRestMode, setIsRestMode] = useState(false);\n  const [error, setError] = useState(null);\n  const fileInputRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n    \n    // 设置高亮颜色\n    document.documentElement.style.setProperty('--highlight-color', highlightColor);\n    \n    return () => {\n      // 清理自动阅读定时器\n      if (autoReadIntervalRef.current) {\n        clearInterval(autoReadIntervalRef.current);\n      }\n    };\n  }, [highlightColor]);\n  \n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'auto-guide') {\n      startAutoReadGuide();\n    } else if (autoReadIntervalRef.current) {\n      clearInterval(autoReadIntervalRef.current);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async (file) => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      \n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n      \n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n      \n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n  \n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({ scale: 1.0 });\n      \n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      \n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(textContent);\n      }\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async (textContent) => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n    \n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n    \n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n    \n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    \n    const lines = [...lineMap.values()];\n    \n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    \n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    \n    return hasTocKeywords || hasPageNumberPatterns || (shortLineRatio > 0.7 && numberLineRatio > 0.3);\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n    \n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    \n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n      \n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n      \n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n      \n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    \n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 处理正文页面 - 以句号为标准划分段落\n  const processContentPage = async (textContent) => {\n    const textItems = textContent.items;\n    \n    // 将文本项按视觉顺序排列（从上到下，从左到右）\n    const sortedItems = [...textItems].sort((a, b) => {\n      // 如果Y坐标差别不大，按X坐标排序\n      if (Math.abs(b.transform[5] - a.transform[5]) < 5) {\n        return a.transform[4] - b.transform[4];\n      }\n      // 否则按Y坐标排序（从上到下）\n      return b.transform[5] - a.transform[5];\n    });\n    \n    // 构建完整文本\n    let fullText = sortedItems.map(item => item.str).join('');\n    \n    // 使用正则表达式按句号（和其他句尾标点）分割文本成段落\n    // 中文句号：。！？\n    // 英文句号：.!?\n    const sentenceRegex = /([^。！？.!?]+[。！？.!?])/g;\n    const sentences = fullText.match(sentenceRegex) || [fullText];\n    \n    // 生成HTML内容\n    let htmlContent = '<div class=\"pdf-content\">';\n    \n    sentences.forEach(sentence => {\n      // 应用ADHD友好的字间距\n      const spacedText = sentence.split('').join('\\u200A');\n      \n      // 添加段落，设置首行缩进\n      htmlContent += `<p class=\"pdf-paragraph\">${spacedText}</p>`;\n    });\n    \n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async (file) => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n    \n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain') {\n      handleTxtFile(file);\n    } else {\n      alert('请上传PDF或TXT文件');\n    }\n  };\n\n  // 翻页函数\n  const changePage = async (delta) => {\n    const newPage = currentPage + delta;\n    if (newPage >= 1 && newPage <= totalPages && pdfDocument) {\n      setCurrentPage(newPage);\n      await extractAndProcessPage(pdfDocument, newPage);\n    }\n  };\n\n  // 设置鼠标跟随高亮\n  const setupMouseFollowHighlight = () => {\n    const pageContent = document.querySelector('.pdf-content');\n    if (!pageContent) return;\n    \n    pageContent.addEventListener('mousemove', (e) => {\n      if (readingMode !== 'follow-mouse') return;\n      \n      // 清除之前的高亮\n      const prevHighlighted = pageContent.querySelectorAll('.reading-line');\n      prevHighlighted.forEach(el => el.classList.remove('reading-line'));\n      \n      // 获取鼠标所在的行\n      const lines = pageContent.querySelectorAll('.text-line');\n      lines.forEach(line => {\n        const rect = line.getBoundingClientRect();\n        if (e.clientY >= rect.top && e.clientY <= rect.bottom) {\n          line.classList.add('reading-line');\n        }\n      });\n    });\n  };\n  \n  // 自动阅读引导\n  const startAutoReadGuide = () => {\n    if (autoReadIntervalRef.current) {\n      clearInterval(autoReadIntervalRef.current);\n    }\n    \n    // 创建阅读指示点\n    if (!autoReadGuideRef.current) {\n      const guide = document.createElement('div');\n      guide.className = 'auto-read-guide';\n      document.querySelector('.page-content').appendChild(guide);\n      autoReadGuideRef.current = guide;\n    }\n    \n    // 获取页面内所有段落\n    const paragraphs = document.querySelectorAll('.page-content p');\n    if (!paragraphs.length) return;\n    \n    let currentParagraphIndex = 0;\n    let currentCharIndex = 0;\n    \n    autoReadIntervalRef.current = setInterval(() => {\n      if (currentParagraphIndex >= paragraphs.length) {\n        clearInterval(autoReadIntervalRef.current);\n        return;\n      }\n      \n      const paragraph = paragraphs[currentParagraphIndex];\n      const text = paragraph.textContent;\n      \n      if (currentCharIndex >= text.length) {\n        currentParagraphIndex++;\n        currentCharIndex = 0;\n        return;\n      }\n      \n      // 计算当前字符位置\n      const range = document.createRange();\n      const textNode = paragraph.firstChild;\n      \n      if (textNode && textNode.nodeType === Node.TEXT_NODE) {\n        range.setStart(textNode, Math.min(currentCharIndex, textNode.length));\n        range.setStart(textNode, Math.min(currentCharIndex, textNode.length));\n        \n        const rect = range.getBoundingClientRect();\n        \n        // 更新指示点位置\n        if (autoReadGuideRef.current) {\n          const guide = autoReadGuideRef.current;\n          guide.style.left = `${rect.left}px`;\n          guide.style.top = `${rect.bottom + 5}px`;\n          \n          // 闪烁效果\n          guide.style.opacity = 1;\n          setTimeout(() => {\n            guide.style.opacity = 0.5;\n          }, 100);\n        }\n      }\n      \n      currentCharIndex += 1;\n    }, 200); // 每秒5个字符的速度\n  };\n  \n  // 处理阅读模式切换\n  const handleReadingModeChange = (mode) => {\n    setReadingMode(mode);\n    if (mode === 'follow-mouse') {\n      setTimeout(setupMouseFollowHighlight, 100);\n    }\n  };\n\n  useEffect(() => {\n    // 当阅读模式为follow-mouse时，设置鼠标跟随高亮\n    if (readingMode === 'follow-mouse' && content) {\n      setTimeout(setupMouseFollowHighlight, 100);\n    }\n  }, [readingMode, content]);\n\n  // 监听阅读模式变化\n  useEffect(() => {\n    if (content) {\n      const contentElement = document.querySelector('.page-content');\n      if (contentElement) {\n        if (readingMode === 'adhd') {\n          contentElement.classList.add('adhd-default-mode');\n        } else {\n          contentElement.classList.remove('adhd-default-mode');\n        }\n      }\n    }\n  }, [readingMode, content]);\n\n  // 初始化阅读器\n  useEffect(() => {\n    // 只在PDF加载后初始化\n    if (pdf) {\n      initializeReader();\n    }\n  }, [pdf]);\n\n  // 处理文件选择\n  const handleFileSelect = async (event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const arrayBuffer = await file.arrayBuffer();\n      const pdf = await pdfjsLib.getDocument(arrayBuffer).promise;\n      setPdf(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n      await renderPage(1);\n    } catch (err) {\n      setError('PDF加载失败：' + err.message);\n      console.error('PDF加载错误：', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 渲染PDF页面\n  const renderPage = async (pageNumber) => {\n    if (!pdf) return;\n\n    try {\n      const page = await pdf.getPage(pageNumber);\n      const viewport = page.getViewport({ scale });\n      const canvas = canvasRef.current;\n      const context = canvas.getContext('2d');\n\n      canvas.height = viewport.height;\n      canvas.width = viewport.width;\n\n      const renderContext = {\n        canvasContext: context,\n        viewport: viewport,\n      };\n\n      await page.render(renderContext).promise;\n\n      // 获取文本内容\n      const textContent = await page.getTextContent();\n      \n      // 清除旧的文本层\n      const oldTextLayer = document.querySelector('.text-layer');\n      if (oldTextLayer) {\n        oldTextLayer.remove();\n      }\n\n      // 创建新的文本层容器\n      const textLayerDiv = document.createElement('div');\n      textLayerDiv.className = 'text-layer';\n      textLayerDiv.style.cssText = `\n        position: absolute;\n        left: 0;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        overflow: hidden;\n        opacity: 1;\n        line-height: 1.0;\n        user-select: text;\n        pointer-events: auto;\n      `;\n      \n      // 为每个文本项创建span元素\n      textContent.items.forEach((item, index) => {\n        const tx = pdfjsLib.Util.transform(\n          viewport.transform,\n          item.transform\n        );\n\n        const span = document.createElement('span');\n        span.textContent = item.str;\n        \n        // 设置span的样式和位置\n        span.style.cssText = `\n          position: absolute;\n          left: ${tx[4]}px;\n          top: ${tx[5]}px;\n          font-size: ${Math.sqrt(tx[0] * tx[0] + tx[1] * tx[1])}px;\n          transform-origin: 0% 0%;\n          transform: scaleX(${tx[0]});\n          white-space: pre;\n          cursor: text;\n          color: transparent;\n        `;\n\n        textLayerDiv.appendChild(span);\n      });\n\n      // 添加文本层到容器\n      const container = document.querySelector('.pdf-container');\n      if (container) {\n        container.style.position = 'relative';\n        container.appendChild(textLayerDiv);\n\n        // 添加文本选择事件监听器\n        textLayerDiv.addEventListener('mouseup', () => {\n          const selection = window.getSelection();\n          if (selection.toString().length > 0) {\n            const range = selection.getRangeAt(0);\n            const span = document.createElement('span');\n            span.className = 'highlight';\n            span.style.backgroundColor = document.documentElement.style.getPropertyValue('--highlight-color') || '#ff0000';\n            \n            try {\n              range.surroundContents(span);\n              saveHighlights();\n            } catch (err) {\n              console.error('创建高亮失败:', err);\n            }\n          }\n        });\n      }\n\n    } catch (err) {\n      setError('页面渲染失败：' + err.message);\n      console.error('页面渲染错误：', err);\n    }\n  };\n\n  // 创建高亮\n  const createHighlight = (color) => {\n    const selection = window.getSelection();\n    if (selection.toString().length > 0) {\n      const range = selection.getRangeAt(0);\n      const span = document.createElement('span');\n      span.className = 'highlight';\n      span.style.backgroundColor = color;\n      range.surroundContents(span);\n      saveHighlights();\n    }\n  };\n\n  // 保存高亮\n  const saveHighlights = () => {\n    const highlights = Array.from(document.querySelectorAll('.highlight')).map(h => ({\n      text: h.textContent,\n      color: h.style.backgroundColor,\n      position: getElementPosition(h)\n    }));\n    localStorage.setItem('highlights', JSON.stringify(highlights));\n  };\n\n  // 获取元素位置\n  const getElementPosition = (element) => {\n    const rect = element.getBoundingClientRect();\n    return {\n      top: rect.top,\n      left: rect.left,\n      width: rect.width,\n      height: rect.height\n    };\n  };\n\n  // 加载保存的高亮\n  const loadHighlights = () => {\n    const highlights = JSON.parse(localStorage.getItem('highlights') || '[]');\n    highlights.forEach(h => {\n      const span = document.createElement('span');\n      span.className = 'highlight';\n      span.style.backgroundColor = h.color;\n      span.textContent = h.text;\n      // 根据position插入到正确位置\n      insertAtPosition(span, h.position);\n    });\n  };\n\n  // 在指定位置插入元素\n  const insertAtPosition = (element, position) => {\n    // 实现插入逻辑\n  };\n\n  // 缩放控制\n  const handleZoom = async (delta) => {\n    const newScale = scale + delta;\n    if (newScale >= 0.5 && newScale <= 2.0) {\n      setScale(newScale);\n      await renderPage(currentPage);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <h1>ADHD 阅读助手</h1>\n        <div className=\"controls\">\n          <input\n            type=\"file\"\n            accept=\".pdf\"\n            onChange={handleFileSelect}\n            style={{ display: 'none' }}\n            ref={fileInputRef}\n          />\n          <button onClick={() => fileInputRef.current?.click()}>\n            选择PDF文件\n          </button>\n          <input\n            type=\"color\"\n            value={highlightColor}\n            onChange={(e) => {\n              setHighlightColor(e.target.value);\n              document.documentElement.style.setProperty('--highlight-color', e.target.value);\n            }}\n          />\n        </div>\n      </header>\n\n      <main className=\"main-content\">\n        <div className=\"pdf-container\">\n          <canvas ref={canvasRef}></canvas>\n        </div>\n        \n        {error && <div className=\"error\">{error}</div>}\n        \n        <div className=\"page-controls\">\n          <button \n            onClick={() => handleZoom(-0.1)}\n            disabled={scale <= 0.5}\n          >\n            缩小\n          </button>\n          <span>{Math.round(scale * 100)}%</span>\n          <button \n            onClick={() => handleZoom(0.1)}\n            disabled={scale >= 2.0}\n          >\n            放大\n          </button>\n          <button\n            onClick={() => changePage(-1)}\n            disabled={currentPage <= 1}\n          >\n            上一页\n          </button>\n          <span>第 {currentPage} / {totalPages} 页</span>\n          <button\n            onClick={() => changePage(1)}\n            disabled={currentPage >= totalPages}\n          >\n            下一页\n          </button>\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}