{"ast":null,"code":"var _jsxFileName = \"D:\\\\adhd-read-helper\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\nconst App = () => {\n  _s();\n  // 状态定义\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null); // 添加文件引用\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n\n  // 处理PDF文件\n  const handlePdfFile = async file => {\n    try {\n      const fileReader = new FileReader();\n      fileReader.onload = async function () {\n        const typedarray = new Uint8Array(this.result);\n        const pdf = await pdfjsLib.getDocument(typedarray).promise;\n        setPdfInstance(pdf);\n\n        // 提取所有页面的文本\n        const numPages = pdf.numPages;\n        setTotalPages(numPages);\n        const textPages = [];\n\n        // 提取每一页的纯文本\n        for (let i = 1; i <= numPages; i++) {\n          const page = await pdf.getPage(i);\n          const textContent = await page.getTextContent();\n\n          // 将文本项合并为整页文本，保留段落结构\n          let lastY = -1;\n          let pageText = '';\n\n          // 按照Y坐标排序文本项，从上到下处理\n          const sortedItems = textContent.items.sort((a, b) => b.transform[5] - a.transform[5]);\n\n          // 提取纯文本并保留段落\n          sortedItems.forEach(item => {\n            if (lastY !== -1 && Math.abs(item.transform[5] - lastY) > 10) {\n              // 新段落\n              pageText += '\\n\\n';\n            } else if (lastY !== -1 && item.transform[5] !== lastY) {\n              // 同一段落的新行\n              pageText += '\\n';\n            }\n            pageText += item.str;\n            lastY = item.transform[5];\n          });\n          textPages.push(pageText);\n        }\n        setExtractedTextPages(textPages);\n        setCurrentPage(1);\n        renderTextPage(textPages, 0);\n      };\n      fileReader.readAsArrayBuffer(file);\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  // 渲染纯文本页面\n  const renderTextPage = (pages, pageIndex) => {\n    const pageContainer = document.querySelector('.page-content');\n    if (!pageContainer || !pages[pageIndex]) return;\n    pageContainer.innerHTML = '';\n    const textDiv = document.createElement('div');\n    textDiv.className = 'text-content';\n\n    // 将文本分割为段落\n    const paragraphs = pages[pageIndex].split('\\n\\n');\n    paragraphs.forEach(para => {\n      if (para.trim()) {\n        const p = document.createElement('p');\n        p.textContent = para.trim();\n        textDiv.appendChild(p);\n      }\n    });\n    pageContainer.appendChild(textDiv);\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async file => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    if (file.size > 100 * 1024 * 1024) {\n      alert('文件大小不能超过100MB');\n      return;\n    }\n    setFileName(file.name);\n    setPages([]); // 清空现有页面\n\n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain' || file.name.endsWith('.txt')) {\n      await handleTxtFile(file);\n    }\n  };\n\n  // 翻页函数\n  const changePage = delta => {\n    const newPage = currentPage + delta;\n    if (newPage >= 1 && newPage <= totalPages) {\n      setCurrentPage(newPage);\n      renderTextPage(extractedTextPages, newPage - 1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `App ${isDarkMode ? 'dark' : 'light'}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"ADHD \\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"upload-btn\",\n            onClick: () => document.getElementById('fileInput').click(),\n            children: \"\\u9009\\u62E9\\u6587\\u4EF6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"fileInput\",\n            type: \"file\",\n            accept: \".pdf,.txt\",\n            style: {\n              display: 'none'\n            },\n            onChange: e => {\n              const file = e.target.files[0];\n              if (file) {\n                setFile(file);\n                handlePdfFile(file);\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"mode-btn\",\n            children: \"\\u5207\\u6362\\u660E\\u4EAE\\u6A21\\u5F0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reader-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"page-btn prev\",\n          onClick: () => changePage(-1),\n          disabled: currentPage <= 1,\n          children: \"\\u2190\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"page-content\",\n          children: !file && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"upload-hint\",\n            children: [\"\\u8BF7\\u4E0A\\u4F20\\u6587\\u4EF6\\u5F00\\u59CB\\u9605\\u8BFB\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 17\n            }, this), \"\\u652F\\u6301\\u7684\\u683C\\u5F0F: PDF, TXT (\\u6700\\u5927100MB)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"page-btn next\",\n          onClick: () => changePage(1),\n          disabled: currentPage >= totalPages,\n          children: \"\\u2192\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), file && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-info\",\n        children: [\"\\u7B2C \", currentPage, \" \\u9875 / \\u5171 \", totalPages, \" \\u9875\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"RP7bTMX4kdI+awxugoEnHFndmEw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","pdfjsLib","pdfjsViewer","pdfjs","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","App","_s","isDarkMode","setIsDarkMode","pages","setPages","currentPage","setCurrentPage","totalPages","setTotalPages","fileName","setFileName","loading","setLoading","fileRef","file","setFile","pdfInstance","setPdfInstance","extractedTextPages","setExtractedTextPages","handlePdfFile","fileReader","FileReader","onload","typedarray","Uint8Array","result","pdf","getDocument","promise","numPages","textPages","i","page","getPage","textContent","getTextContent","lastY","pageText","sortedItems","items","sort","a","b","transform","forEach","item","Math","abs","str","push","renderTextPage","readAsArrayBuffer","error","console","pageIndex","pageContainer","document","querySelector","innerHTML","textDiv","createElement","className","paragraphs","split","para","trim","p","appendChild","handleTxtFile","text","pageTexts","map","paragraph","x","y","fontSize","fontFamily","length","alert","handleFileUpload","event","target","files","size","name","type","endsWith","changePage","delta","newPage","children","_jsxFileName","lineNumber","columnNumber","onClick","getElementById","click","id","accept","style","display","onChange","e","disabled","_c","$RefreshReg$"],"sources":["D:/adhd-read-helper/src/App.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\nconst App = () => {\n  // 状态定义\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null); // 添加文件引用\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n\n  // 处理PDF文件\n  const handlePdfFile = async (file) => {\n    try {\n      const fileReader = new FileReader();\n      fileReader.onload = async function() {\n        const typedarray = new Uint8Array(this.result);\n        const pdf = await pdfjsLib.getDocument(typedarray).promise;\n        setPdfInstance(pdf);\n        \n        // 提取所有页面的文本\n        const numPages = pdf.numPages;\n        setTotalPages(numPages);\n        \n        const textPages = [];\n        \n        // 提取每一页的纯文本\n        for (let i = 1; i <= numPages; i++) {\n          const page = await pdf.getPage(i);\n          const textContent = await page.getTextContent();\n          \n          // 将文本项合并为整页文本，保留段落结构\n          let lastY = -1;\n          let pageText = '';\n          \n          // 按照Y坐标排序文本项，从上到下处理\n          const sortedItems = textContent.items.sort((a, b) => \n            b.transform[5] - a.transform[5]\n          );\n          \n          // 提取纯文本并保留段落\n          sortedItems.forEach(item => {\n            if (lastY !== -1 && Math.abs(item.transform[5] - lastY) > 10) {\n              // 新段落\n              pageText += '\\n\\n';\n            } else if (lastY !== -1 && item.transform[5] !== lastY) {\n              // 同一段落的新行\n              pageText += '\\n';\n            }\n            \n            pageText += item.str;\n            lastY = item.transform[5];\n          });\n          \n          textPages.push(pageText);\n        }\n        \n        setExtractedTextPages(textPages);\n        setCurrentPage(1);\n        renderTextPage(textPages, 0);\n      };\n      fileReader.readAsArrayBuffer(file);\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  \n  // 渲染纯文本页面\n  const renderTextPage = (pages, pageIndex) => {\n    const pageContainer = document.querySelector('.page-content');\n    if (!pageContainer || !pages[pageIndex]) return;\n    \n    pageContainer.innerHTML = '';\n    \n    const textDiv = document.createElement('div');\n    textDiv.className = 'text-content';\n    \n    // 将文本分割为段落\n    const paragraphs = pages[pageIndex].split('\\n\\n');\n    \n    paragraphs.forEach(para => {\n      if (para.trim()) {\n        const p = document.createElement('p');\n        p.textContent = para.trim();\n        textDiv.appendChild(p);\n      }\n    });\n    \n    pageContainer.appendChild(textDiv);\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async (file) => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async (event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    if (file.size > 100 * 1024 * 1024) {\n      alert('文件大小不能超过100MB');\n      return;\n    }\n\n    setFileName(file.name);\n    setPages([]); // 清空现有页面\n\n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain' || file.name.endsWith('.txt')) {\n      await handleTxtFile(file);\n    }\n  };\n\n  // 翻页函数\n  const changePage = (delta) => {\n    const newPage = currentPage + delta;\n    if (newPage >= 1 && newPage <= totalPages) {\n      setCurrentPage(newPage);\n      renderTextPage(extractedTextPages, newPage - 1);\n    }\n  };\n\n  return (\n    <div className={`App ${isDarkMode ? 'dark' : 'light'}`}>\n      <div className=\"app-container\">\n        <header className=\"header\">\n          <h1>ADHD 阅读助手</h1>\n          <div className=\"controls\">\n            <button \n              className=\"upload-btn\"\n              onClick={() => document.getElementById('fileInput').click()}\n            >\n              选择文件\n            </button>\n            <input\n              id=\"fileInput\"\n              type=\"file\"\n              accept=\".pdf,.txt\"\n              style={{ display: 'none' }}\n              onChange={(e) => {\n                const file = e.target.files[0];\n                if (file) {\n                  setFile(file);\n                  handlePdfFile(file);\n                }\n              }}\n            />\n            <button className=\"mode-btn\">\n              切换明亮模式\n            </button>\n          </div>\n        </header>\n        \n        <div className=\"reader-container\">\n          <button \n            className=\"page-btn prev\"\n            onClick={() => changePage(-1)}\n            disabled={currentPage <= 1}\n          >\n            ←\n          </button>\n\n          <div className=\"page-content\">\n            {!file && (\n              <div className=\"upload-hint\">\n                请上传文件开始阅读\n                <br />\n                支持的格式: PDF, TXT (最大100MB)\n              </div>\n            )}\n          </div>\n\n          <button \n            className=\"page-btn next\"\n            onClick={() => changePage(1)}\n            disabled={currentPage >= totalPages}\n          >\n            →\n          </button>\n        </div>\n\n        {file && (\n          <div className=\"page-info\">\n            第 {currentPage} 页 / 共 {totalPages} 页\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}