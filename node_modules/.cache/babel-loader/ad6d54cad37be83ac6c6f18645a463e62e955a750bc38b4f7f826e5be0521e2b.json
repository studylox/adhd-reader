{"ast":null,"code":"var _jsxFileName = \"D:\\\\adhd-read-helper\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 自动阅读器全局对象\nwindow.autoReader = {\n  charPositions: [],\n  intervalId: null,\n  currentIndex: 0,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false,\n  cleanup: null\n};\n\n// 添加新的节奏阅读模式代码\n// 全局变量，确保在页面切换后仍然保持状态\nwindow.rhythmReaderGlobal = window.rhythmReaderGlobal || {\n  active: false,\n  speed: 300\n};\n\n// 节奏阅读模式\nfunction setupRhythmReading() {\n  // 状态变量\n  let active = false;\n  let intervalId = null;\n  let speed = window.rhythmReaderGlobal.speed || 300;\n  let currentIndex = 0;\n  let readIndices = new Set();\n  let charElements = [];\n\n  // 滚动控制变量\n  let lastScrolledY = -1;\n  let scrollSafeZone = 40; // 默认值，会在初始化时调整\n  let lineHeight = 20; // 默认估计值，会在初始化时计算\n\n  // 添加速度滑块到页面上方\n  function addSpeedSlider() {\n    let slider = document.getElementById('rhythm-speed-slider');\n    if (slider) slider.remove();\n    const container = document.createElement('div');\n    container.id = 'rhythm-speed-slider';\n    container.style.position = 'fixed';\n    container.style.top = '70px';\n    container.style.right = '20px';\n    container.style.backgroundColor = 'white';\n    container.style.padding = '10px';\n    container.style.borderRadius = '5px';\n    container.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';\n    container.style.zIndex = '10000';\n    container.style.display = 'flex';\n    container.style.alignItems = 'center';\n    container.style.maxWidth = '300px';\n    const label = document.createElement('label');\n    label.textContent = '速度: ';\n    label.style.marginRight = '8px';\n    container.appendChild(label);\n    const input = document.createElement('input');\n    input.type = 'range';\n    input.min = '50';\n    input.max = '1000';\n    input.step = '50';\n    input.value = speed;\n    input.style.width = '120px';\n    const valueDisplay = document.createElement('span');\n    valueDisplay.textContent = `${speed}ms`;\n    valueDisplay.style.marginLeft = '8px';\n    valueDisplay.style.minWidth = '60px';\n    input.addEventListener('input', function () {\n      const newSpeed = parseInt(this.value);\n      speed = newSpeed;\n      window.rhythmReaderGlobal.speed = newSpeed;\n      valueDisplay.textContent = `${newSpeed}ms`;\n      if (intervalId) {\n        clearInterval(intervalId);\n        intervalId = setInterval(moveToNextChar, newSpeed);\n      }\n    });\n    container.appendChild(input);\n    container.appendChild(valueDisplay);\n    document.body.appendChild(container);\n  }\n\n  // 初始化文本节点（将文本分解为单独的字符span）\n  function initializeTextNodes() {\n    // 重置字符元素数组\n    charElements = [];\n\n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content') || document.body;\n\n    // 查找所有文本节点并处理\n    const textNodes = [];\n    findTextNodes(contentContainer, textNodes);\n    if (textNodes.length === 0) {\n      console.error(\"未找到文本节点\");\n      return false;\n    }\n    console.log(`找到 ${textNodes.length} 个文本节点`);\n\n    // 为每个文本节点创建字符span\n    textNodes.forEach(node => {\n      const text = node.nodeValue;\n      if (!text || text.trim() === '') return;\n\n      // 创建文档片段来存放字符span\n      const fragment = document.createDocumentFragment();\n\n      // 为每个字符创建span\n      for (let i = 0; i < text.length; i++) {\n        const char = text[i];\n        const span = document.createElement('span');\n        span.textContent = char;\n        span.className = 'rhythm-char';\n        span.dataset.rhythmIndex = charElements.length;\n\n        // 如果是空白字符，添加一个标志\n        if (char.trim() === '') {\n          span.dataset.whitespace = 'true';\n        }\n\n        // 保持原始样式，重要：不设置任何背景\n        span.style.display = 'inline';\n        span.style.margin = '0';\n        span.style.padding = '0';\n        span.style.border = 'none';\n        span.style.backgroundColor = 'transparent';\n        fragment.appendChild(span);\n        charElements.push(span);\n      }\n\n      // 替换原始节点\n      if (node.parentNode) {\n        node.parentNode.replaceChild(fragment, node);\n      }\n    });\n    console.log(`总共创建了 ${charElements.length} 个字符span`);\n\n    // 估计行高\n    if (charElements.length > 1) {\n      for (let i = 1; i < charElements.length; i++) {\n        const span1 = charElements[i - 1];\n        const span2 = charElements[i];\n        if (span1 && span2) {\n          const rect1 = span1.getBoundingClientRect();\n          const rect2 = span2.getBoundingClientRect();\n          const yDiff = Math.abs(rect2.top - rect1.top);\n          if (yDiff > 5) {\n            // 认为有垂直距离差的是不同行\n            lineHeight = yDiff;\n            scrollSafeZone = lineHeight * 2.5;\n            console.log(`估计行高为 ${lineHeight}px`);\n            break;\n          }\n        }\n      }\n    }\n    return charElements.length > 0;\n  }\n\n  // 递归查找所有文本节点\n  function findTextNodes(element, textNodes) {\n    // 处理子节点\n    for (let i = 0; i < element.childNodes.length; i++) {\n      const node = element.childNodes[i];\n\n      // 如果是文本节点且有内容\n      if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() !== '') {\n        textNodes.push(node);\n      }\n      // 如果是元素节点，递归处理\n      else if (node.nodeType === Node.ELEMENT_NODE) {\n        // 跳过读者UI元素\n        if (node.id === 'rhythm-speed-slider' || node.className === 'rhythm-char') {\n          continue;\n        }\n        findTextNodes(node, textNodes);\n      }\n    }\n  }\n\n  // 更新文本颜色\n  function updateTextColors() {\n    // 更新所有字符的颜色\n    charElements.forEach((span, index) => {\n      // 确定颜色\n      let color;\n      let fontWeight = 'inherit';\n      if (index === currentIndex) {\n        color = '#00aa00'; // 当前阅读的字 - 绿色\n        fontWeight = 'bold';\n      } else if (index === currentIndex + 1 || index === currentIndex + 2) {\n        color = '#aaaaaa'; // 接下来两个字 - 淡灰色\n      } else if (readIndices.has(index)) {\n        color = '#ffffff'; // 已读字符 - 白色（表示已读）\n      } else {\n        color = 'rgba(160, 160, 160, 0.25)'; // 未读字符 - 非常淡的灰色（可见但不明显）\n      }\n      span.style.color = color;\n      span.style.fontWeight = fontWeight;\n\n      // 确保没有背景\n      span.style.backgroundColor = 'transparent';\n      span.style.background = 'none';\n    });\n  }\n\n  // 移动到下一个字符\n  function moveToNextChar() {\n    // 将当前字符标记为已读\n    readIndices.add(currentIndex);\n\n    // 移动到下一个非空白字符\n    do {\n      currentIndex++;\n\n      // ===== 完全复制自动阅读模式的翻页逻辑 =====\n      if (currentIndex >= charElements.length) {\n        if (window.currentPage < window.totalPages) {\n          console.log(\"节奏阅读：到达页末，自动翻页\");\n          // 清除当前定时器\n          clearInterval(intervalId);\n          intervalId = null;\n\n          // 恢复原始文本\n          restoreOriginalText();\n\n          // 保存状态以便在DOM事件中检测\n          document.body.dataset.rhythmReading = \"true\";\n\n          // 执行翻页\n          window.changePage(1);\n\n          // 在页面加载后恢复\n          setupPageLoadListener();\n          return;\n        } else {\n          console.log(\"节奏阅读：已到达最后一页\");\n          stopReading();\n          return;\n        }\n      }\n    } while (currentIndex < charElements.length && charElements[currentIndex] && charElements[currentIndex].dataset.whitespace === 'true');\n\n    // 更新颜色\n    updateTextColors();\n\n    // 滚动到当前字符\n    scrollToCurrentChar();\n  }\n\n  // 滚动到当前字符\n  function scrollToCurrentChar() {\n    const span = charElements[currentIndex];\n    if (!span) return;\n    const rect = span.getBoundingClientRect();\n    const contentContainer = document.querySelector('.page-content');\n\n    // 确定滚动容器\n    const isContainerScrollable = contentContainer && contentContainer.scrollHeight > contentContainer.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n    if (isContainerScrollable) {\n      // 容器滚动\n      const containerRect = contentContainer.getBoundingClientRect();\n      const relativeTop = rect.top - containerRect.top + contentContainer.scrollTop;\n      const visibleTop = contentContainer.scrollTop;\n      const visibleBottom = visibleTop + contentContainer.clientHeight;\n      if (relativeTop < visibleTop + lineHeight || relativeTop > visibleBottom - lineHeight) {\n        contentContainer.scrollBy({\n          top: lineHeight * 2 * (relativeTop > visibleBottom - lineHeight ? 1 : -1),\n          behavior: 'smooth'\n        });\n      }\n    } else {\n      // 窗口滚动\n      const viewportTop = window.scrollY;\n      const viewportBottom = viewportTop + window.innerHeight;\n      const absoluteTop = rect.top + window.scrollY;\n      if (absoluteTop < viewportTop + lineHeight || absoluteTop > viewportBottom - lineHeight) {\n        window.scrollBy({\n          top: lineHeight * 2 * (absoluteTop > viewportBottom - lineHeight ? 1 : -1),\n          behavior: 'smooth'\n        });\n      }\n    }\n  }\n\n  // 恢复原始文本\n  function restoreOriginalText() {\n    // 获取所有已创建的字符span\n    const charSpans = document.querySelectorAll('.rhythm-char');\n\n    // 按父节点分组\n    const parentNodeMap = new Map();\n    charSpans.forEach(span => {\n      const parent = span.parentNode;\n      if (!parent) return;\n      if (!parentNodeMap.has(parent)) {\n        parentNodeMap.set(parent, []);\n      }\n      parentNodeMap.get(parent).push(span);\n    });\n\n    // 对每个父节点，将连续的字符span合并回文本节点\n    parentNodeMap.forEach((spans, parent) => {\n      if (spans.length === 0) return;\n\n      // 排序spans确保顺序正确\n      spans.sort((a, b) => {\n        const indexA = parseInt(a.dataset.rhythmIndex || '0');\n        const indexB = parseInt(b.dataset.rhythmIndex || '0');\n        return indexA - indexB;\n      });\n\n      // 根据连续性分组\n      const groups = [];\n      let currentGroup = [spans[0]];\n      for (let i = 1; i < spans.length; i++) {\n        const prevIndex = parseInt(spans[i - 1].dataset.rhythmIndex || '0');\n        const currentIndex = parseInt(spans[i].dataset.rhythmIndex || '0');\n        if (currentIndex === prevIndex + 1 && spans[i].previousSibling === spans[i - 1]) {\n          currentGroup.push(spans[i]);\n        } else {\n          groups.push(currentGroup);\n          currentGroup = [spans[i]];\n        }\n      }\n      groups.push(currentGroup);\n\n      // 对每个连续组替换为文本节点\n      groups.forEach(group => {\n        if (group.length === 0) return;\n        try {\n          const text = group.map(span => span.textContent).join('');\n          const textNode = document.createTextNode(text);\n\n          // 替换第一个span，然后移除其余的\n          if (group[0].parentNode === parent) {\n            parent.replaceChild(textNode, group[0]);\n            for (let i = 1; i < group.length; i++) {\n              if (group[i].parentNode === parent) {\n                parent.removeChild(group[i]);\n              }\n            }\n          }\n        } catch (e) {\n          console.error(\"恢复文本时出错:\", e);\n        }\n      });\n    });\n\n    // 清除字符元素数组\n    charElements = [];\n  }\n\n  // 为新页面加载设置监听器\n  function setupPageLoadListener() {\n    console.log(\"设置页面加载监听器\");\n\n    // 观察DOM变化\n    const observer = new MutationObserver(mutations => {\n      if (document.body.dataset.rhythmReading === \"true\") {\n        for (const mutation of mutations) {\n          if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {\n            console.log(\"检测到页面变化，准备重启节奏阅读\");\n\n            // 延迟一下，等待页面完全加载\n            setTimeout(() => {\n              console.log(\"重新启动节奏阅读\");\n              document.body.dataset.rhythmReading = \"false\";\n              startReading();\n            }, 800);\n\n            // 只执行一次\n            observer.disconnect();\n            break;\n          }\n        }\n      }\n    });\n\n    // 观察整个body的变化\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n\n    // 额外的安全措施：如果2秒后观察器没有触发，也重启阅读\n    setTimeout(() => {\n      if (document.body.dataset.rhythmReading === \"true\") {\n        console.log(\"超时后重新启动节奏阅读\");\n        document.body.dataset.rhythmReading = \"false\";\n        startReading();\n      }\n    }, 2000);\n  }\n\n  // 停止节奏阅读\n  function stopReading() {\n    if (intervalId) {\n      clearInterval(intervalId);\n      intervalId = null;\n    }\n    active = false;\n\n    // 清除状态标记\n    document.body.dataset.rhythmReading = \"false\";\n\n    // 恢复原始文本\n    restoreOriginalText();\n\n    // 移除速度滑块\n    const slider = document.getElementById('rhythm-speed-slider');\n    if (slider) slider.remove();\n  }\n\n  // 启动节奏阅读\n  function startReading() {\n    console.log(\"启动节奏阅读模式\");\n\n    // 先停止已有的\n    stopReading();\n\n    // 设置为活动状态\n    active = true;\n\n    // 初始化文本\n    if (!initializeTextNodes()) {\n      console.error(\"无法初始化文本节点\");\n      return;\n    }\n\n    // 重置阅读位置\n    currentIndex = 0;\n    readIndices.clear();\n\n    // 添加速度滑块 - 放在页面上方\n    addSpeedSlider();\n\n    // 更新颜色\n    updateTextColors();\n\n    // 滚动到开始位置\n    scrollToCurrentChar();\n\n    // 设置阅读间隔\n    intervalId = setInterval(moveToNextChar, speed);\n  }\n\n  // 立即启动节奏阅读\n  startReading();\n\n  // 首次设置页面加载监听器\n  setupPageLoadListener();\n\n  // 对外暴露的方法\n  return {\n    start: startReading,\n    stop: function () {\n      stopReading();\n    }\n  };\n}\n\n// 创建节奏阅读实例并保存到全局\nwindow.rhythmReader = setupRhythmReading();\n\n// 替换或添加readingModeChanged函数\nconst originalReadingModeChanged = window.readingModeChanged;\nwindow.readingModeChanged = function (mode) {\n  // 如果有原始函数，先调用它\n  if (typeof originalReadingModeChanged === 'function') {\n    originalReadingModeChanged(mode);\n  }\n  console.log(\"阅读模式变更为:\", mode);\n\n  // 处理节奏阅读模式\n  if (mode === 'rhythm' || mode === 'rhythmReading') {\n    // 启动节奏阅读\n    window.rhythmReader.start();\n  } else {\n    // 如果正在进行节奏阅读，停止它\n    if (window.rhythmReaderGlobal.active) {\n      window.rhythmReader.stop();\n    }\n  }\n};\n\n// 如果全局状态为活动状态，自动启动\nif (window.rhythmReaderGlobal.active) {\n  window.rhythmReader.start();\n}\n\n// 模拟NLP词性标注功能（实际应用中建议使用专业NLP库如nlp.js或调用API）\nconst tagPartsOfSpeech = text => {\n  // 定义所有标点符号\n  const punctuationMarks = ['，', '。', '！', '？', '；', '：', '（', '）', '【', '】', '《', '》', '〈', '〉', '…', '—', '～', '·', ',', '.', '!', '?', ';', ':', '(', ')', '[', ']', '{', '}', '-', '...', '..'];\n\n  // 将文本按标点符号分割，保留标点符号\n  const segments = text.split(new RegExp(`([${punctuationMarks.map(mark => '\\\\' + mark).join('')}])`));\n  let result = '';\n  let colorIndex = 0; // 0: 红色, 1: 蓝色, 2: 黑色\n  let currentText = '';\n  segments.forEach((segment, index) => {\n    // 跳过空字符串和纯空格\n    if (!segment || /^\\s+$/.test(segment)) {\n      result += segment;\n      return;\n    }\n\n    // 检查是否是标点符号\n    const isPunctuation = punctuationMarks.includes(segment);\n\n    // 根据索引选择颜色\n    let color;\n    switch (colorIndex) {\n      case 0:\n        color = 'red';\n        break;\n      case 1:\n        color = 'blue';\n        break;\n      case 2:\n        color = 'black';\n        break;\n      default:\n        color = 'black';\n    }\n\n    // 将当前文本和标点符号放在同一个颜色块中\n    if (isPunctuation) {\n      // 如果有累积的文本，先添加文本\n      if (currentText) {\n        result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n        currentText = '';\n      }\n      // 添加标点符号\n      result += `<span class=\"highlight-word ${color}\">${segment}</span>`;\n      // 切换颜色\n      colorIndex = (colorIndex + 1) % 3;\n    } else {\n      // 累积文本\n      currentText += segment;\n    }\n  });\n\n  // 处理最后可能剩余的文本\n  if (currentText) {\n    const color = colorIndex === 0 ? 'red' : colorIndex === 1 ? 'blue' : 'black';\n    result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n  }\n  return result;\n};\nconst App = () => {\n  _s();\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const autoReadGuideRef = useRef(null);\n  const autoReadIntervalRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n\n  // 新增自动阅读器状态\n  const [autoReaderState, setAutoReaderState] = useState({\n    currentIndex: 0,\n    charPositions: [],\n    intervalId: null,\n    speed: 300,\n    pageContainer: null,\n    isUserScrolling: false,\n    scrollTimeout: null,\n    contentLoaded: false\n  });\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n    return () => {\n      // 清理自动阅读定时器\n      if (autoReadIntervalRef.current) {\n        clearInterval(autoReadIntervalRef.current);\n      }\n    };\n  }, []);\n\n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async file => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n\n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n\n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n\n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({\n        scale: 1.0\n      });\n\n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async textContent => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n\n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n\n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n\n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    const lines = [...lineMap.values()];\n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    return hasTocKeywords || hasPageNumberPatterns || shortLineRatio > 0.7 && numberLineRatio > 0.3;\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n\n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n\n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n\n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n\n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = text => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    return result;\n  };\n\n  // 修改processContentPage函数\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n\n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch (mode) {\n        case 'normal':\n          // 普通模式 - 简单分段显示\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'static':\n          // 静态高亮模式 - 应用词性标注和颜色高亮\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'follow-mouse':\n          // 鼠标跟随高亮模式 - 分段落但不预先高亮，由鼠标事件触发高亮\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      setContent(processedContent);\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async file => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain') {\n      handleTxtFile(file);\n    } else {\n      alert('请上传PDF或TXT文件');\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = container => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n\n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n\n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n\n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width / 2,\n            // 水平中心\n            y: rect.bottom,\n            // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n\n    // 过滤无效位置并排序\n    return positions.filter(p => p.char.trim() !== '').sort((a, b) => {\n      // 先按行排序，同行按列排序\n      const yDiff = a.y - b.y;\n      if (Math.abs(yDiff) > 5) {\n        // 5px阈值判断是否同一行\n        return yDiff;\n      }\n      return a.x - b.x;\n    });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n\n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - containerVisibleHeight / 2;\n\n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - window.innerHeight / 2;\n\n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop),\n        // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n\n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n\n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length ||\n      // 已到末尾\n      positions[nextIndex].char.trim() === '' ||\n      // 下一个是空白\n      positions[nextIndex].y > charPosition.y + 5) {\n        // 下一个在新行\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n\n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n\n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || current.y > prev.y + 5) {\n        // 有明显换行\n        break;\n      }\n      start--;\n    }\n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n\n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n\n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (window.autoReader.charPositions.length === 0) {\n      if (window.currentPage < window.totalPages) {\n        window.changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 重置索引到开头\n    window.autoReader.currentIndex = 0;\n\n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n\n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n\n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none';\n      highlight.style.zIndex = '998';\n      contentContainer.appendChild(highlight);\n    }\n\n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight && ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n\n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20;\n\n    // 尝试获取实际行高\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(window.autoReader.charPositions[i].y - window.autoReader.charPositions[i - 1].y);\n        if (yDiff > 5) {\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n\n    // 记录上次滚动的位置\n    let lastScrolledY = -1;\n    const scrollSafeZone = lineHeight * 2.5;\n\n    // 设置字符大小的估计值\n    let charWidth = 20;\n    let charHeight = lineHeight * 0.8;\n\n    // 尝试估计字符宽度\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        if (window.autoReader.charPositions[i].x !== window.autoReader.charPositions[i - 1].x) {\n          const xDiff = Math.abs(window.autoReader.charPositions[i].x - window.autoReader.charPositions[i - 1].x);\n          if (xDiff > 0 && xDiff < 50) {\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    window.autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (window.autoReader.currentIndex < window.autoReader.charPositions.length && ((_window$autoReader$ch = window.autoReader.charPositions[window.autoReader.currentIndex]) === null || _window$autoReader$ch === void 0 ? void 0 : _window$autoReader$ch.char.trim()) === '') {\n        var _window$autoReader$ch;\n        window.autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (window.autoReader.currentIndex >= window.autoReader.charPositions.length) {\n        if (window.currentPage < window.totalPages) {\n          window.changePage(1);\n          clearInterval(window.autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n      const pos = window.autoReader.charPositions[window.autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      if (cursor && highlight) {\n        const contentRect = contentContainer.getBoundingClientRect();\n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        highlight.style.left = `${relativeX - charWidth / 2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n\n        // 滚动处理\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          if (isContainerScrollable) {\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = relativeY;\n            }\n          } else {\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      window.autoReader.currentIndex++;\n    }, window.autoReader.speed);\n\n    // 在停止自动阅读时清除所有高亮\n    window.autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n\n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n\n      // 调用清理函数\n      if (window.autoReader.cleanup) {\n        window.autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n\n    // 重置翻页状态\n    window.autoReader.isPageChanging = false;\n\n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n\n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n\n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n\n    // 收集字符位置\n    window.autoReader.charPositions = getAllCharacterPositions(content);\n\n    // 如果当前页没有内容，尝试翻页\n    if (window.autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !window.autoReader.isPageChanging) {\n        window.autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n\n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async e => {\n    const newMode = e.target.value;\n\n    // 停止当前可能正在运行的自动阅读和节奏阅读\n    stopAutoReader();\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n\n    // 清理旧模式\n    cleanupDOM();\n\n    // 更新状态\n    setReadingMode(newMode);\n\n    // 应用新模式\n    if (pdfDocument && currentPage > 0) {\n      try {\n        const page = await pdfDocument.getPage(currentPage);\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        let processedContent = '';\n\n        // 应用对应模式的文本处理\n        switch (newMode) {\n          case 'follow-mouse':\n            processedContent = formatTextForMouseFollow(extractedText);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlight(extractedText);\n            break;\n          case 'auto-reader':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          case 'rhythm':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          default:\n            processedContent = formatTextToHtml(extractedText);\n        }\n        const contentArea = document.querySelector('.page-content');\n        if (contentArea) {\n          contentArea.textContent = '';\n          contentArea.innerHTML = processedContent;\n\n          // 滚动到页面顶部\n          window.scrollTo(0, 0);\n          if (contentArea.scrollTo) {\n            contentArea.scrollTo(0, 0);\n          }\n\n          // 立即初始化对应模式\n          if (newMode === 'auto-reader') {\n            setTimeout(initializeAutoReader, 50);\n          } else if (newMode === 'follow-mouse') {\n            setTimeout(initializeMouseFollow, 50);\n          } else if (newMode === 'rhythm') {\n            setTimeout(() => {\n              if (window.rhythmReader) {\n                window.rhythmReader.start();\n              }\n            }, 50);\n          }\n        }\n      } catch (error) {\n        console.error('应用新阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 1. 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll('.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line, .rhythm-char');\n    highlights.forEach(el => el.remove());\n\n    // 2. 移除事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 克隆内容区域以彻底移除所有事件监听器\n      const cleanContent = contentArea.cloneNode(false);\n      cleanContent.innerHTML = contentArea.innerHTML;\n      contentArea.parentNode.replaceChild(cleanContent, contentArea);\n    }\n\n    // 3. 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 创建新段落并保留基本结构\n      const newParagraph = document.createElement('p');\n      newParagraph.className = 'pdf-paragraph';\n      newParagraph.innerHTML = paragraph.innerHTML.replace(/<span class=\"text-line\">/g, '').replace(/<\\/span>/g, '').replace(/<span class=\"rhythm-char\">/g, '').replace(/<\\/span>/g, '');\n\n      // 移除特殊属性\n      newParagraph.removeAttribute('data-follow');\n      newParagraph.removeAttribute('style');\n      if (paragraph.parentNode) {\n        paragraph.parentNode.replaceChild(newParagraph, paragraph);\n      }\n    });\n\n    // 4. 清理自动阅读器\n    stopAutoReader();\n\n    // 5. 移除节奏阅读速度滑块\n    const slider = document.getElementById('rhythm-speed-slider');\n    if (slider) slider.remove();\n  };\n  const handleAutoScroll = () => {\n    window.autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = e => {\n    if (readingMode !== 'follow-mouse') return;\n\n    // 清除所有现有高亮\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n    const mouseTarget = document.elementFromPoint(e.clientX, e.clientY);\n    if (mouseTarget && (mouseTarget.classList.contains('pdf-paragraph') || mouseTarget.tagName === 'P' || mouseTarget.tagName === 'SPAN')) {\n      const targetParagraph = mouseTarget.closest('.pdf-paragraph');\n      if (!targetParagraph) return;\n\n      // 获取段落文本节点\n      const textNode = getTextNodeAtPosition(targetParagraph, e.clientX, e.clientY);\n      if (!textNode) return;\n\n      // 获取精确的行位置和尺寸\n      const range = document.createRange();\n      range.selectNodeContents(textNode);\n      const rects = range.getClientRects();\n\n      // 找到鼠标所在的具体行\n      let targetRect = null;\n      for (let i = 0; i < rects.length; i++) {\n        const rect = rects[i];\n        if (e.clientY >= rect.top && e.clientY <= rect.bottom) {\n          targetRect = rect;\n          break;\n        }\n      }\n      if (targetRect) {\n        // 创建高亮元素\n        const lineHighlight = document.createElement('div');\n        lineHighlight.className = 'line-highlight mouse-highlight';\n\n        // 计算相对于段落的位置\n        const paragraphRect = targetParagraph.getBoundingClientRect();\n        const top = targetRect.top - paragraphRect.top;\n        const left = targetRect.left - paragraphRect.left;\n\n        // 设置高亮样式\n        lineHighlight.style.position = 'absolute';\n        lineHighlight.style.left = `${left}px`;\n        lineHighlight.style.top = `${top}px`;\n        lineHighlight.style.width = `${targetRect.width}px`;\n        lineHighlight.style.height = `${targetRect.height}px`;\n        lineHighlight.style.pointerEvents = 'none';\n        lineHighlight.style.backgroundColor = 'rgba(255, 165, 0, 0.3)';\n        lineHighlight.style.borderRadius = '4px';\n        lineHighlight.style.boxShadow = '0 0 8px rgba(255, 165, 0, 0.5)';\n        lineHighlight.style.zIndex = '5';\n        lineHighlight.style.transition = 'all 0.1s ease';\n\n        // 确保段落有相对定位\n        targetParagraph.style.position = 'relative';\n        targetParagraph.appendChild(lineHighlight);\n      }\n    }\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 新增延迟补偿\n    setTimeout(() => {\n      addMouseFollowListeners();\n\n      // 强制触发重排\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        void contentArea.offsetHeight;\n\n        // 模拟鼠标移动事件\n        const fakeEvent = new MouseEvent('mousemove', {\n          clientX: window.innerWidth / 2,\n          clientY: window.innerHeight / 2,\n          bubbles: true\n        });\n        contentArea.dispatchEvent(fakeEvent);\n      }\n    }, 50);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = delta => {\n    window.autoReader.speed = Math.max(100, window.autoReader.speed + delta);\n    setAutoReaderState(prev => ({\n      ...prev,\n      speed: window.autoReader.speed\n    }));\n    if (window.autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async delta => {\n    const newPage = currentPage + delta;\n    if (newPage < 1 || newPage > totalPages) return;\n    const wasAutoReading = readingMode === 'auto-reader' && window.autoReader.intervalId;\n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n\n    // 如果正在自动阅读或节奏阅读，先停止\n    if (wasAutoReading) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n    }\n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n\n    // 更新页码\n    setCurrentPage(newPage);\n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 按当前阅读模式处理内容\n      let processedContent = '';\n      switch (readingMode) {\n        case 'follow-mouse':\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'auto-reader':\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'rhythm':\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n\n      // 更新页面内容\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        contentArea.textContent = '';\n        contentArea.innerHTML = processedContent;\n\n        // 滚动到页面顶部\n        window.scrollTo(0, 0);\n        if (contentArea.scrollTo) {\n          contentArea.scrollTo(0, 0);\n        }\n\n        // 重新启动对应的阅读模式\n        if (wasAutoReading) {\n          setTimeout(initializeAutoReader, 50);\n        } else if (wasRhythmReading && window.rhythmReader) {\n          setTimeout(() => {\n            window.rhythmReader.start();\n          }, 50);\n        }\n      }\n    } catch (error) {\n      console.error('翻页失败:', error);\n    }\n  };\n\n  // 修改后的监听器设置函数\n  const addMouseFollowListeners = () => {\n    if (readingMode !== 'follow-mouse') return;\n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n\n    // 清理旧的监听器\n    contentArea.removeEventListener('mousemove', handleMouseMove);\n    contentArea.removeEventListener('mouseleave', clearAllHighlights);\n\n    // 添加新的监听器\n    contentArea.addEventListener('mousemove', handleMouseMove);\n    contentArea.addEventListener('mouseleave', clearAllHighlights);\n\n    // 确保所有段落都有正确的样式\n    document.querySelectorAll('.pdf-paragraph').forEach(p => {\n      p.style.position = 'relative';\n      p.style.lineHeight = '1.5';\n    });\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = text => {\n    // 分段\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n\n    // 创建HTML内容\n    let htmlContent = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      htmlContent += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 应用静态高亮\n  const applyStaticHighlight = text => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    let htmlContent = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      // 新增强制清理逻辑\n      const cleanParagraph = paragraph.replace(/<span class=\"text-line\">/g, '').replace(/<\\/span>/g, '');\n      const highlightedText = processTextWithHighlight(cleanParagraph);\n      htmlContent += `<p class=\"pdf-paragraph\">${highlightedText}</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 格式化文本用于鼠标跟随高亮模式\n  const formatTextForMouseFollow = text => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    let htmlContent = '<div class=\"pdf-content mouse-follow-content\">';\n    paragraphs.forEach(paragraph => {\n      // 将段落分割成行\n      const lines = paragraph.split('\\n').filter(line => line.trim());\n      htmlContent += `<p class=\"pdf-paragraph\" data-follow=\"true\" style=\"position: relative; line-height: 1.5;\">`;\n      lines.forEach((line, i) => {\n        // 每行用span包裹\n        htmlContent += `<span class=\"text-line\" style=\"display: block;\">${line}</span>`;\n      });\n      htmlContent += `</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 强制初始化字符位置（这是关键步骤！）\n  function forceInitReader() {\n    console.log(\"强制初始化阅读器...\");\n\n    // 1. 如果autoReader或charPositions不存在，创建它们\n    if (typeof window.autoReader === 'undefined') {\n      window.autoReader = {\n        charPositions: [],\n        intervalId: null,\n        currentIndex: 0,\n        speed: 30\n      };\n    }\n\n    // 2. 如果没有字符位置数据，尝试触发它的创建\n    if (!window.autoReader.charPositions || window.autoReader.charPositions.length === 0) {\n      console.log(\"未找到字符位置数据，尝试强制创建...\");\n\n      // 直接使用scanTextPositionsSimple函数\n      scanTextPositionsSimple();\n    }\n    return window.autoReader.charPositions && window.autoReader.charPositions.length > 0;\n  }\n\n  // 简单的文本位置扫描函数\n  function scanTextPositionsSimple() {\n    console.log(\"使用简单文本扫描...\");\n    window.autoReader.charPositions = [];\n    const contentElement = document.querySelector('.page-content');\n    if (!contentElement) {\n      console.error(\"找不到内容容器\");\n      return;\n    }\n\n    // 递归处理文本节点\n    function processTextNodes(element) {\n      if (element.nodeType === Node.TEXT_NODE) {\n        const text = element.textContent;\n        if (!text || text.trim() === '') return;\n\n        // 获取元素的位置信息\n        const range = document.createRange();\n\n        // 为每个字符创建一个独立的范围\n        for (let i = 0; i < text.length; i++) {\n          try {\n            range.setStart(element, i);\n            range.setEnd(element, i + 1);\n            const rect = range.getBoundingClientRect();\n            if (rect.width > 0 && rect.height > 0) {\n              window.autoReader.charPositions.push({\n                char: text[i],\n                x: rect.left + rect.width / 2,\n                y: rect.top + rect.height / 2,\n                element: element.parentElement\n              });\n            }\n          } catch (e) {\n            console.warn(\"无法处理字符\", e);\n          }\n        }\n      } else if (element.nodeType === Node.ELEMENT_NODE) {\n        // 递归处理子元素\n        for (const child of element.childNodes) {\n          processTextNodes(child);\n        }\n      }\n    }\n    processTextNodes(contentElement);\n    console.log(\"扫描完成，找到字符数量:\", window.autoReader.charPositions.length);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1854,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1853,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"upload-btn\",\n        children: [\"\\u9009\\u62E9\\u6587\\u4EF6\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".pdf,.txt\",\n          onChange: handleFileUpload,\n          style: {\n            display: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1858,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1856,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1852,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1868,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mode-selector\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: readingMode,\n              onChange: handleReadingModeChange,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"normal\",\n                children: \"\\u666E\\u901A\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1872,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"static\",\n                children: \"\\u9759\\u6001\\u9AD8\\u4EAE\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1873,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"follow-mouse\",\n                children: \"\\u9F20\\u6807\\u8DDF\\u968F\\u9AD8\\u4EAE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1874,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"auto-reader\",\n                children: \"\\u81EA\\u52A8\\u9605\\u8BFB\\u5668\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1875,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"rhythm\",\n                children: \"\\u8282\\u594F\\u9605\\u8BFB\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1876,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1871,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1870,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mode-selector\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: posMode,\n              onChange: e => setPosMode(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"none\",\n                children: \"\\u65E0\\u8BCD\\u6027\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1881,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"noun\",\n                children: \"\\u540D\\u8BCD\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1882,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"all\",\n                children: \"\\u5168\\u8BCD\\u6027\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1883,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1880,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1879,\n            columnNumber: 13\n          }, this), readingMode === 'auto-reader' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"speed-control\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => adjustSpeed(-100),\n              children: \"-\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1888,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [autoReaderState.speed, \"ms\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1889,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => adjustSpeed(100),\n              children: \"+\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1890,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1887,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1869,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1867,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-content\",\n        children: content ? /*#__PURE__*/_jsxDEV(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: content\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1897,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-state\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u8BF7\\u4E0A\\u4F20PDF\\u6216TXT\\u6587\\u4EF6\\u5F00\\u59CB\\u9605\\u8BFB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1900,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1899,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1895,\n        columnNumber: 9\n      }, this), content && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"page-btn prev\",\n          onClick: () => changePage(-1),\n          disabled: currentPage === 1,\n          children: \"\\u4E0A\\u4E00\\u9875\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1906,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"page-info\",\n          children: [\"\\u7B2C \", currentPage, \" \\u9875 / \\u5171 \", totalPages, \" \\u9875\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1909,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"page-btn next\",\n          onClick: () => changePage(1),\n          disabled: currentPage === totalPages,\n          children: \"\\u4E0B\\u4E00\\u9875\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1912,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1905,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1866,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1851,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"FdIIE1mY5AAmB921foSmrxDLqNQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","pdfjsLib","pdfjsViewer","marked","pdfjs","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","window","currentPage","totalPages","changePage","autoReader","charPositions","intervalId","currentIndex","speed","pageContainer","isScrolling","isPageChanging","cleanup","rhythmReaderGlobal","active","setupRhythmReading","readIndices","Set","charElements","lastScrolledY","scrollSafeZone","lineHeight","addSpeedSlider","slider","document","getElementById","remove","container","createElement","id","style","position","top","right","backgroundColor","padding","borderRadius","boxShadow","zIndex","display","alignItems","maxWidth","label","textContent","marginRight","appendChild","input","type","min","max","step","value","width","valueDisplay","marginLeft","minWidth","addEventListener","newSpeed","parseInt","clearInterval","setInterval","moveToNextChar","body","initializeTextNodes","contentContainer","querySelector","textNodes","findTextNodes","length","console","error","log","forEach","node","text","nodeValue","trim","fragment","createDocumentFragment","i","char","span","className","dataset","rhythmIndex","whitespace","margin","border","push","parentNode","replaceChild","span1","span2","rect1","getBoundingClientRect","rect2","yDiff","Math","abs","element","childNodes","nodeType","Node","TEXT_NODE","ELEMENT_NODE","updateTextColors","index","color","fontWeight","has","background","add","restoreOriginalText","rhythmReading","setupPageLoadListener","stopReading","scrollToCurrentChar","rect","isContainerScrollable","scrollHeight","clientHeight","includes","getComputedStyle","overflowY","containerRect","relativeTop","scrollTop","visibleTop","visibleBottom","scrollBy","behavior","viewportTop","scrollY","viewportBottom","innerHeight","absoluteTop","charSpans","querySelectorAll","parentNodeMap","Map","parent","set","get","spans","sort","a","b","indexA","indexB","groups","currentGroup","prevIndex","previousSibling","group","map","join","textNode","createTextNode","removeChild","e","observer","MutationObserver","mutations","mutation","addedNodes","setTimeout","startReading","disconnect","observe","childList","subtree","clear","start","stop","rhythmReader","originalReadingModeChanged","readingModeChanged","mode","tagPartsOfSpeech","punctuationMarks","segments","split","RegExp","mark","result","colorIndex","currentText","segment","test","isPunctuation","App","_s","pages","setPages","setCurrentPage","setTotalPages","fileName","setFileName","loading","setLoading","fileRef","file","setFile","pdfInstance","setPdfInstance","extractedTextPages","setExtractedTextPages","readingMode","setReadingMode","posMode","setPosMode","markdownContent","setMarkdownContent","readerContainerRef","autoReadGuideRef","autoReadIntervalRef","content","setContent","pdfDocument","setPdfDocument","autoReaderState","setAutoReaderState","isUserScrolling","scrollTimeout","contentLoaded","current","initializeMouseFollow","handlePdfFile","fileURL","URL","createObjectURL","loadingTask","getDocument","pdf","promise","numPages","extractAndProcessPage","alert","pageNum","page","getPage","getTextContent","viewport","getViewport","scale","isTableOfContents","detectIfTocPage","processTocPage","processContentPage","addMouseFollowListeners","textItems","items","fullText","item","str","hasTocKeywords","hasPageNumberPatterns","shortLinesCount","linesWithNumbersCount","lineMap","yKey","round","transform","lines","values","line","lineText","shortLineRatio","numberLineRatio","htmlContent","x","y","height","fontSize","sqrt","fontName","toLowerCase","spacedText","getTextNodeAtPosition","nodes","range","createRange","selectNodeContents","rects","getClientRects","j","bottom","left","found","processTextWithHighlight","words","lastColor","word","random","extractedText","replace","processedContent","formatTextToHtml","applyStaticHighlight","formatTextForMouseFollow","handleTxtFile","pageTexts","paragraph","fontFamily","handleFileUpload","target","files","getAllCharacterPositions","walker","createTreeWalker","NodeFilter","SHOW_TEXT","positions","nextNode","currentNode","setStart","setEnd","warn","filter","p","scrollElementToCenter","elementY","targetScrollTop","containerVisibleHeight","scrollTo","absoluteElementY","createReaderCursor","cursor","cssText","head","isSentenceEnd","charPosition","sentenceEndMarks","nextIndex","findSentenceStart","prev","isInVisibleArea","threshold","topThreshold","bottomThreshold","startAutoReader","highlight","pointerEvents","charWidth","charHeight","xDiff","_window$autoReader$ch","stopAutoReader","pos","contentRect","relativeX","relativeY","isInRecentlyScrolledArea","needsScroll","scrollAmount","absoluteY","initializeAutoReader","handleReadingModeChange","newMode","cleanupDOM","contentArea","innerHTML","highlights","el","cleanContent","cloneNode","paragraphs","newParagraph","removeAttribute","handleAutoScroll","updateCursorPosition","force","handleMouseMove","mouseTarget","elementFromPoint","clientX","clientY","classList","contains","tagName","targetParagraph","closest","targetRect","lineHighlight","paragraphRect","transition","clearAllHighlights","addAutoReaderStyles","offsetHeight","fakeEvent","MouseEvent","innerWidth","bubbles","dispatchEvent","adjustSpeed","delta","newPage","wasAutoReading","wasRhythmReading","removeEventListener","cleanParagraph","highlightedText","forceInitReader","scanTextPositionsSimple","contentElement","processTextNodes","parentElement","child","children","_jsxFileName","lineNumber","columnNumber","accept","onChange","onClick","dangerouslySetInnerHTML","__html","disabled","_c","$RefreshReg$"],"sources":["D:/adhd-read-helper/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 全局变量定义\nwindow.currentPage = 1;\nwindow.totalPages = 0;\nwindow.changePage = null;\n\n// 自动阅读器全局对象\nwindow.autoReader = {\n  charPositions: [],\n  intervalId: null,\n  currentIndex: 0,\n  speed: 300,\n  pageContainer: null,\n  isScrolling: false,\n  currentPage: 1,\n  isPageChanging: false,\n  cleanup: null\n};\n\n// 添加新的节奏阅读模式代码\n// 全局变量，确保在页面切换后仍然保持状态\nwindow.rhythmReaderGlobal = window.rhythmReaderGlobal || {\n  active: false,\n  speed: 300\n};\n\n// 节奏阅读模式\nfunction setupRhythmReading() {\n  // 状态变量\n  let active = false;\n  let intervalId = null;\n  let speed = window.rhythmReaderGlobal.speed || 300;\n  let currentIndex = 0;\n  let readIndices = new Set();\n  let charElements = [];\n  \n  // 滚动控制变量\n  let lastScrolledY = -1;\n  let scrollSafeZone = 40; // 默认值，会在初始化时调整\n  let lineHeight = 20; // 默认估计值，会在初始化时计算\n  \n  // 添加速度滑块到页面上方\n  function addSpeedSlider() {\n    let slider = document.getElementById('rhythm-speed-slider');\n    if (slider) slider.remove();\n    \n    const container = document.createElement('div');\n    container.id = 'rhythm-speed-slider';\n    container.style.position = 'fixed';\n    container.style.top = '70px';\n    container.style.right = '20px';\n    container.style.backgroundColor = 'white';\n    container.style.padding = '10px';\n    container.style.borderRadius = '5px';\n    container.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';\n    container.style.zIndex = '10000';\n    container.style.display = 'flex';\n    container.style.alignItems = 'center';\n    container.style.maxWidth = '300px';\n    \n    const label = document.createElement('label');\n    label.textContent = '速度: ';\n    label.style.marginRight = '8px';\n    container.appendChild(label);\n    \n    const input = document.createElement('input');\n    input.type = 'range';\n    input.min = '50';\n    input.max = '1000';\n    input.step = '50';\n    input.value = speed;\n    input.style.width = '120px';\n    \n    const valueDisplay = document.createElement('span');\n    valueDisplay.textContent = `${speed}ms`;\n    valueDisplay.style.marginLeft = '8px';\n    valueDisplay.style.minWidth = '60px';\n    \n    input.addEventListener('input', function() {\n      const newSpeed = parseInt(this.value);\n      speed = newSpeed;\n      window.rhythmReaderGlobal.speed = newSpeed;\n      valueDisplay.textContent = `${newSpeed}ms`;\n      \n      if (intervalId) {\n        clearInterval(intervalId);\n        intervalId = setInterval(moveToNextChar, newSpeed);\n      }\n    });\n    \n    container.appendChild(input);\n    container.appendChild(valueDisplay);\n    document.body.appendChild(container);\n  }\n  \n  // 初始化文本节点（将文本分解为单独的字符span）\n  function initializeTextNodes() {\n    // 重置字符元素数组\n    charElements = [];\n    \n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content') || document.body;\n    \n    // 查找所有文本节点并处理\n    const textNodes = [];\n    findTextNodes(contentContainer, textNodes);\n    \n    if (textNodes.length === 0) {\n      console.error(\"未找到文本节点\");\n      return false;\n    }\n    \n    console.log(`找到 ${textNodes.length} 个文本节点`);\n    \n    // 为每个文本节点创建字符span\n    textNodes.forEach(node => {\n      const text = node.nodeValue;\n      if (!text || text.trim() === '') return;\n      \n      // 创建文档片段来存放字符span\n      const fragment = document.createDocumentFragment();\n      \n      // 为每个字符创建span\n      for (let i = 0; i < text.length; i++) {\n        const char = text[i];\n        const span = document.createElement('span');\n        span.textContent = char;\n        span.className = 'rhythm-char';\n        span.dataset.rhythmIndex = charElements.length;\n        \n        // 如果是空白字符，添加一个标志\n        if (char.trim() === '') {\n          span.dataset.whitespace = 'true';\n        }\n        \n        // 保持原始样式，重要：不设置任何背景\n        span.style.display = 'inline';\n        span.style.margin = '0';\n        span.style.padding = '0';\n        span.style.border = 'none';\n        span.style.backgroundColor = 'transparent';\n        \n        fragment.appendChild(span);\n        charElements.push(span);\n      }\n      \n      // 替换原始节点\n      if (node.parentNode) {\n        node.parentNode.replaceChild(fragment, node);\n      }\n    });\n    \n    console.log(`总共创建了 ${charElements.length} 个字符span`);\n    \n    // 估计行高\n    if (charElements.length > 1) {\n      for (let i = 1; i < charElements.length; i++) {\n        const span1 = charElements[i-1];\n        const span2 = charElements[i];\n        if (span1 && span2) {\n          const rect1 = span1.getBoundingClientRect();\n          const rect2 = span2.getBoundingClientRect();\n          const yDiff = Math.abs(rect2.top - rect1.top);\n          if (yDiff > 5) { // 认为有垂直距离差的是不同行\n            lineHeight = yDiff;\n            scrollSafeZone = lineHeight * 2.5;\n            console.log(`估计行高为 ${lineHeight}px`);\n            break;\n          }\n        }\n      }\n    }\n    \n    return charElements.length > 0;\n  }\n  \n  // 递归查找所有文本节点\n  function findTextNodes(element, textNodes) {\n    // 处理子节点\n    for (let i = 0; i < element.childNodes.length; i++) {\n      const node = element.childNodes[i];\n      \n      // 如果是文本节点且有内容\n      if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() !== '') {\n        textNodes.push(node);\n      } \n      // 如果是元素节点，递归处理\n      else if (node.nodeType === Node.ELEMENT_NODE) {\n        // 跳过读者UI元素\n        if (node.id === 'rhythm-speed-slider' || \n            node.className === 'rhythm-char') {\n          continue;\n        }\n        findTextNodes(node, textNodes);\n      }\n    }\n  }\n  \n  // 更新文本颜色\n  function updateTextColors() {\n    // 更新所有字符的颜色\n    charElements.forEach((span, index) => {\n      // 确定颜色\n      let color;\n      let fontWeight = 'inherit';\n      \n      if (index === currentIndex) {\n        color = '#00aa00'; // 当前阅读的字 - 绿色\n        fontWeight = 'bold';\n      } else if (index === currentIndex + 1 || index === currentIndex + 2) {\n        color = '#aaaaaa'; // 接下来两个字 - 淡灰色\n      } else if (readIndices.has(index)) {\n        color = '#ffffff'; // 已读字符 - 白色（表示已读）\n      } else {\n        color = 'rgba(160, 160, 160, 0.25)'; // 未读字符 - 非常淡的灰色（可见但不明显）\n      }\n      \n      span.style.color = color;\n      span.style.fontWeight = fontWeight;\n      \n      // 确保没有背景\n      span.style.backgroundColor = 'transparent';\n      span.style.background = 'none';\n    });\n  }\n  \n  // 移动到下一个字符\n  function moveToNextChar() {\n    // 将当前字符标记为已读\n    readIndices.add(currentIndex);\n    \n    // 移动到下一个非空白字符\n    do {\n      currentIndex++;\n      \n      // ===== 完全复制自动阅读模式的翻页逻辑 =====\n      if (currentIndex >= charElements.length) {\n        if (window.currentPage < window.totalPages) {\n          console.log(\"节奏阅读：到达页末，自动翻页\");\n          // 清除当前定时器\n          clearInterval(intervalId);\n          intervalId = null;\n          \n          // 恢复原始文本\n          restoreOriginalText();\n          \n          // 保存状态以便在DOM事件中检测\n          document.body.dataset.rhythmReading = \"true\";\n          \n          // 执行翻页\n          window.changePage(1);\n          \n          // 在页面加载后恢复\n          setupPageLoadListener();\n          return;\n        } else {\n          console.log(\"节奏阅读：已到达最后一页\");\n          stopReading();\n          return;\n        }\n      }\n    } while (\n      currentIndex < charElements.length && \n      charElements[currentIndex] && \n      charElements[currentIndex].dataset.whitespace === 'true'\n    );\n    \n    // 更新颜色\n    updateTextColors();\n    \n    // 滚动到当前字符\n    scrollToCurrentChar();\n  }\n  \n  // 滚动到当前字符\n  function scrollToCurrentChar() {\n    const span = charElements[currentIndex];\n    if (!span) return;\n    \n    const rect = span.getBoundingClientRect();\n    const contentContainer = document.querySelector('.page-content');\n    \n    // 确定滚动容器\n    const isContainerScrollable = contentContainer && \n      contentContainer.scrollHeight > contentContainer.clientHeight &&\n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n    \n    if (isContainerScrollable) {\n      // 容器滚动\n      const containerRect = contentContainer.getBoundingClientRect();\n      const relativeTop = rect.top - containerRect.top + contentContainer.scrollTop;\n      \n      const visibleTop = contentContainer.scrollTop;\n      const visibleBottom = visibleTop + contentContainer.clientHeight;\n      \n      if (relativeTop < visibleTop + lineHeight || relativeTop > visibleBottom - lineHeight) {\n        contentContainer.scrollBy({\n          top: lineHeight * 2 * (relativeTop > visibleBottom - lineHeight ? 1 : -1),\n          behavior: 'smooth'\n        });\n      }\n    } else {\n      // 窗口滚动\n      const viewportTop = window.scrollY;\n      const viewportBottom = viewportTop + window.innerHeight;\n      const absoluteTop = rect.top + window.scrollY;\n      \n      if (absoluteTop < viewportTop + lineHeight || absoluteTop > viewportBottom - lineHeight) {\n        window.scrollBy({\n          top: lineHeight * 2 * (absoluteTop > viewportBottom - lineHeight ? 1 : -1),\n          behavior: 'smooth'\n        });\n      }\n    }\n  }\n  \n  // 恢复原始文本\n  function restoreOriginalText() {\n    // 获取所有已创建的字符span\n    const charSpans = document.querySelectorAll('.rhythm-char');\n    \n    // 按父节点分组\n    const parentNodeMap = new Map();\n    \n    charSpans.forEach(span => {\n      const parent = span.parentNode;\n      if (!parent) return;\n      \n      if (!parentNodeMap.has(parent)) {\n        parentNodeMap.set(parent, []);\n      }\n      parentNodeMap.get(parent).push(span);\n    });\n    \n    // 对每个父节点，将连续的字符span合并回文本节点\n    parentNodeMap.forEach((spans, parent) => {\n      if (spans.length === 0) return;\n      \n      // 排序spans确保顺序正确\n      spans.sort((a, b) => {\n        const indexA = parseInt(a.dataset.rhythmIndex || '0');\n        const indexB = parseInt(b.dataset.rhythmIndex || '0');\n        return indexA - indexB;\n      });\n      \n      // 根据连续性分组\n      const groups = [];\n      let currentGroup = [spans[0]];\n      \n      for (let i = 1; i < spans.length; i++) {\n        const prevIndex = parseInt(spans[i-1].dataset.rhythmIndex || '0');\n        const currentIndex = parseInt(spans[i].dataset.rhythmIndex || '0');\n        \n        if (currentIndex === prevIndex + 1 && spans[i].previousSibling === spans[i-1]) {\n          currentGroup.push(spans[i]);\n        } else {\n          groups.push(currentGroup);\n          currentGroup = [spans[i]];\n        }\n      }\n      \n      groups.push(currentGroup);\n      \n      // 对每个连续组替换为文本节点\n      groups.forEach(group => {\n        if (group.length === 0) return;\n        \n        try {\n          const text = group.map(span => span.textContent).join('');\n          const textNode = document.createTextNode(text);\n          \n          // 替换第一个span，然后移除其余的\n          if (group[0].parentNode === parent) {\n            parent.replaceChild(textNode, group[0]);\n            for (let i = 1; i < group.length; i++) {\n              if (group[i].parentNode === parent) {\n                parent.removeChild(group[i]);\n              }\n            }\n          }\n        } catch (e) {\n          console.error(\"恢复文本时出错:\", e);\n        }\n      });\n    });\n    \n    // 清除字符元素数组\n    charElements = [];\n  }\n  \n  // 为新页面加载设置监听器\n  function setupPageLoadListener() {\n    console.log(\"设置页面加载监听器\");\n    \n    // 观察DOM变化\n    const observer = new MutationObserver((mutations) => {\n      if (document.body.dataset.rhythmReading === \"true\") {\n        for (const mutation of mutations) {\n          if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {\n            console.log(\"检测到页面变化，准备重启节奏阅读\");\n            \n            // 延迟一下，等待页面完全加载\n            setTimeout(() => {\n              console.log(\"重新启动节奏阅读\");\n              document.body.dataset.rhythmReading = \"false\";\n              startReading();\n            }, 800);\n            \n            // 只执行一次\n            observer.disconnect();\n            break;\n          }\n        }\n      }\n    });\n    \n    // 观察整个body的变化\n    observer.observe(document.body, { \n      childList: true,\n      subtree: true\n    });\n    \n    // 额外的安全措施：如果2秒后观察器没有触发，也重启阅读\n    setTimeout(() => {\n      if (document.body.dataset.rhythmReading === \"true\") {\n        console.log(\"超时后重新启动节奏阅读\");\n        document.body.dataset.rhythmReading = \"false\";\n        startReading();\n      }\n    }, 2000);\n  }\n\n  // 停止节奏阅读\n  function stopReading() {\n    if (intervalId) {\n      clearInterval(intervalId);\n      intervalId = null;\n    }\n    \n    active = false;\n    \n    // 清除状态标记\n    document.body.dataset.rhythmReading = \"false\";\n    \n    // 恢复原始文本\n    restoreOriginalText();\n    \n    // 移除速度滑块\n    const slider = document.getElementById('rhythm-speed-slider');\n    if (slider) slider.remove();\n  }\n\n  // 启动节奏阅读\n  function startReading() {\n    console.log(\"启动节奏阅读模式\");\n    \n    // 先停止已有的\n    stopReading();\n    \n    // 设置为活动状态\n    active = true;\n    \n    // 初始化文本\n    if (!initializeTextNodes()) {\n      console.error(\"无法初始化文本节点\");\n      return;\n    }\n    \n    // 重置阅读位置\n    currentIndex = 0;\n    readIndices.clear();\n    \n    // 添加速度滑块 - 放在页面上方\n    addSpeedSlider();\n    \n    // 更新颜色\n    updateTextColors();\n    \n    // 滚动到开始位置\n    scrollToCurrentChar();\n    \n    // 设置阅读间隔\n    intervalId = setInterval(moveToNextChar, speed);\n  }\n\n  // 立即启动节奏阅读\n  startReading();\n\n  // 首次设置页面加载监听器\n  setupPageLoadListener();\n\n  // 对外暴露的方法\n  return {\n    start: startReading,\n    stop: function() { stopReading(); }\n  };\n}\n\n// 创建节奏阅读实例并保存到全局\nwindow.rhythmReader = setupRhythmReading();\n\n// 替换或添加readingModeChanged函数\nconst originalReadingModeChanged = window.readingModeChanged;\n\nwindow.readingModeChanged = function(mode) {\n  // 如果有原始函数，先调用它\n  if (typeof originalReadingModeChanged === 'function') {\n    originalReadingModeChanged(mode);\n  }\n  \n  console.log(\"阅读模式变更为:\", mode);\n  \n  // 处理节奏阅读模式\n  if (mode === 'rhythm' || mode === 'rhythmReading') {\n    // 启动节奏阅读\n    window.rhythmReader.start();\n  } else {\n    // 如果正在进行节奏阅读，停止它\n    if (window.rhythmReaderGlobal.active) {\n      window.rhythmReader.stop();\n    }\n  }\n};\n\n// 如果全局状态为活动状态，自动启动\nif (window.rhythmReaderGlobal.active) {\n  window.rhythmReader.start();\n}\n\n// 模拟NLP词性标注功能（实际应用中建议使用专业NLP库如nlp.js或调用API）\nconst tagPartsOfSpeech = (text) => {\n  // 定义所有标点符号\n  const punctuationMarks = [\n    '，', '。', '！', '？', '；', '：', '（', '）', '【', '】', '《', '》', '〈', '〉', '…', '—', '～', '·',\n    ',', '.', '!', '?', ';', ':', '(', ')', '[', ']', '{', '}', '-', '...', '..'\n  ];\n  \n  // 将文本按标点符号分割，保留标点符号\n  const segments = text.split(new RegExp(`([${punctuationMarks.map(mark => '\\\\' + mark).join('')}])`));\n  let result = '';\n  let colorIndex = 0; // 0: 红色, 1: 蓝色, 2: 黑色\n  let currentText = '';\n  \n  segments.forEach((segment, index) => {\n    // 跳过空字符串和纯空格\n    if (!segment || /^\\s+$/.test(segment)) {\n      result += segment;\n      return;\n    }\n    \n    // 检查是否是标点符号\n    const isPunctuation = punctuationMarks.includes(segment);\n    \n    // 根据索引选择颜色\n    let color;\n    switch (colorIndex) {\n      case 0:\n        color = 'red';\n        break;\n      case 1:\n        color = 'blue';\n        break;\n      case 2:\n        color = 'black';\n        break;\n      default:\n        color = 'black';\n    }\n    \n    // 将当前文本和标点符号放在同一个颜色块中\n    if (isPunctuation) {\n      // 如果有累积的文本，先添加文本\n      if (currentText) {\n        result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n        currentText = '';\n      }\n      // 添加标点符号\n      result += `<span class=\"highlight-word ${color}\">${segment}</span>`;\n      // 切换颜色\n      colorIndex = (colorIndex + 1) % 3;\n    } else {\n      // 累积文本\n      currentText += segment;\n    }\n  });\n  \n  // 处理最后可能剩余的文本\n  if (currentText) {\n    const color = colorIndex === 0 ? 'red' : colorIndex === 1 ? 'blue' : 'black';\n    result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n  }\n  \n  return result;\n};\n\nconst App = () => {\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const autoReadGuideRef = useRef(null);\n  const autoReadIntervalRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n  \n  // 新增自动阅读器状态\n  const [autoReaderState, setAutoReaderState] = useState({\n    currentIndex: 0,\n    charPositions: [],\n    intervalId: null,\n    speed: 300,\n    pageContainer: null,\n    isUserScrolling: false,\n    scrollTimeout: null,\n    contentLoaded: false\n  });\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n    \n    return () => {\n      // 清理自动阅读定时器\n      if (autoReadIntervalRef.current) {\n        clearInterval(autoReadIntervalRef.current);\n      }\n    };\n  }, []);\n  \n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'follow-mouse') {\n      // 确保DOM更新完成后初始化鼠标跟随功能\n      setTimeout(() => {\n        initializeMouseFollow();\n      }, 50);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async (file) => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      \n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n      \n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n      \n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n  \n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({ scale: 1.0 });\n      \n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      \n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      \n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async (textContent) => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n    \n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n    \n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n    \n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    \n    const lines = [...lineMap.values()];\n    \n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    \n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    \n    return hasTocKeywords || hasPageNumberPatterns || (shortLineRatio > 0.7 && numberLineRatio > 0.3);\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n    \n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    \n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n      \n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n      \n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n      \n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    \n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 获取鼠标位置下的文本节点\n  const getTextNodeAtPosition = (element, x, y) => {\n    const nodes = element.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (node.nodeType === Node.TEXT_NODE) {\n        const range = document.createRange();\n        range.selectNodeContents(node);\n        const rects = range.getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n          const rect = rects[j];\n          if (y >= rect.top && y <= rect.bottom && \n              x >= rect.left && x <= rect.right) {\n            return node;\n          }\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        const found = getTextNodeAtPosition(node, x, y);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // 处理文本高亮\n  const processTextWithHighlight = (text) => {\n    // 将文本按空格和标点符号分割成词\n    const words = text.split(/([\\s.,!?，。！？]+)/);\n    let result = '';\n    let lastColor = null;\n    \n    words.forEach(word => {\n      if (!word || /^\\s+$/.test(word)) {\n        result += word;\n        return;\n      }\n      \n      if (Math.random() < 0.8) {\n        let color;\n        if (lastColor === 'red') {\n          color = 'blue';\n        } else if (lastColor === 'blue') {\n          color = 'red';\n        } else {\n          color = Math.random() < 0.5 ? 'red' : 'blue';\n        }\n        lastColor = color;\n        \n        result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n      } else {\n        result += word;\n      }\n    });\n    \n    return result;\n  };\n\n  // 修改processContentPage函数\n  const processContentPage = async (page, mode) => {\n    try {\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      \n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch(mode) {\n        case 'normal':\n          // 普通模式 - 简单分段显示\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'static':\n          // 静态高亮模式 - 应用词性标注和颜色高亮\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'follow-mouse':\n          // 鼠标跟随高亮模式 - 分段落但不预先高亮，由鼠标事件触发高亮\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      \n      setContent(processedContent);\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async (file) => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n    \n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain') {\n      handleTxtFile(file);\n    } else {\n      alert('请上传PDF或TXT文件');\n    }\n  };\n\n  // 获取所有字符位置（优化版 - 记录字符底部位置）\n  const getAllCharacterPositions = (container) => {\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT);\n    const positions = [];\n    \n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n      const text = node.textContent;\n      \n      // 跳过完全空白的文本节点\n      if (!text.trim()) continue;\n      \n      // 逐字符处理\n      for (let i = 0; i < text.length; i++) {\n        try {\n          const range = document.createRange();\n          range.setStart(node, i);\n          range.setEnd(node, i + 1);\n          \n          const rect = range.getBoundingClientRect();\n          if (rect.width === 0 && rect.height === 0) continue;\n          \n          // 记录字符底部中心位置，而不是中心位置\n          positions.push({\n            x: rect.left + rect.width/2,  // 水平中心\n            y: rect.bottom,               // 字符底部\n            char: text[i]\n          });\n        } catch (error) {\n          console.warn('获取字符位置时出错:', error);\n          continue;\n        }\n      }\n    }\n    \n    // 过滤无效位置并排序\n    return positions\n      .filter(p => p.char.trim() !== '')\n      .sort((a, b) => {\n        // 先按行排序，同行按列排序\n        const yDiff = a.y - b.y;\n        if (Math.abs(yDiff) > 5) { // 5px阈值判断是否同一行\n          return yDiff;\n        }\n        return a.x - b.x;\n      });\n  };\n\n  // 确保元素在容器中居中的专用函数\n  const scrollElementToCenter = (elementY, container) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    // 计算需要滚动的目标位置\n    let targetScrollTop;\n    \n    if (isContainerScrollable) {\n      // 容器滚动：计算将元素放在容器中心所需的滚动量\n      const containerVisibleHeight = container.clientHeight;\n      targetScrollTop = elementY - (containerVisibleHeight / 2);\n      \n      // 执行滚动\n      container.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    } else {\n      // 窗口滚动：计算将元素放在窗口中心所需的滚动量\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      targetScrollTop = absoluteElementY - (window.innerHeight / 2);\n      \n      // 执行滚动\n      window.scrollTo({\n        top: Math.max(0, targetScrollTop), // 防止滚动到负值\n        behavior: 'smooth'\n      });\n    }\n    \n    return targetScrollTop;\n  };\n\n  // 创建字符底部显示的阅读光标（确保与滚动兼容）\n  const createReaderCursor = () => {\n    const cursor = document.createElement('div');\n    cursor.id = 'auto-reader-cursor';\n    cursor.style.cssText = `\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      background: #00ff00;\n      border-radius: 50%;\n      pointer-events: none;\n      transform: translateX(-50%);\n      box-shadow: 0 0 8px #00ff00;\n      animation: pulse-bottom 1s infinite;\n      z-index: 9999;\n      margin-top: -2px;\n    `;\n    \n    // 添加动画样式\n    if (!document.getElementById('reader-cursor-animation')) {\n      const style = document.createElement('style');\n      style.id = 'reader-cursor-animation';\n      style.textContent = `\n        @keyframes pulse-bottom {\n          0% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n          50% { transform: translateX(-50%) scale(1.2); opacity: 1; }\n          100% { transform: translateX(-50%) scale(1); opacity: 0.8; }\n        }\n      `;\n      document.head.appendChild(style);\n    }\n    \n    return cursor;\n  };\n\n  // 检测当前位置是否为句子结束\n  const isSentenceEnd = (charPosition, positions, index) => {\n    // 标点符号列表，用于判断句子结束\n    const sentenceEndMarks = ['.', '。', '!', '！', '?', '？', ';', '；'];\n    \n    // 检查当前字符是否为句子结束标记\n    if (sentenceEndMarks.includes(charPosition.char)) {\n      // 句子结束后通常有空格或是段落末尾\n      const nextIndex = index + 1;\n      if (nextIndex >= positions.length || // 已到末尾\n          positions[nextIndex].char.trim() === '' || // 下一个是空白\n          positions[nextIndex].y > charPosition.y + 5) { // 下一个在新行\n        return true;\n      }\n    }\n    \n    return false;\n  };\n\n  // 查找句子开始位置\n  const findSentenceStart = (positions, currentIndex) => {\n    let start = currentIndex;\n    \n    // 向前查找句子开始\n    while (start > 0) {\n      const prev = positions[start - 1];\n      const current = positions[start];\n      \n      // 如果前一个是句子结束标记，或者有明显的换行，认为是新句子开始\n      if (isSentenceEnd(prev, positions, start - 1) || \n          current.y > prev.y + 5) { // 有明显换行\n        break;\n      }\n      \n      start--;\n    }\n    \n    return start;\n  };\n\n  // 判断元素是否在可见区域内\n  const isInVisibleArea = (elementY, container, threshold = 0.2) => {\n    // 判断是容器滚动还是窗口滚动\n    const isContainerScrollable = container.scrollHeight > container.clientHeight && \n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(container).overflowY);\n    \n    if (isContainerScrollable) {\n      // 容器情况\n      const visibleTop = container.scrollTop;\n      const visibleBottom = visibleTop + container.clientHeight;\n      \n      // 元素是否在可见区域的安全范围内（加入阈值缓冲）\n      const topThreshold = visibleTop + container.clientHeight * threshold;\n      const bottomThreshold = visibleBottom - container.clientHeight * threshold;\n      \n      return elementY >= topThreshold && elementY <= bottomThreshold;\n    } else {\n      // 窗口情况\n      const absoluteElementY = elementY + container.getBoundingClientRect().top;\n      const visibleTop = window.scrollY;\n      const visibleBottom = visibleTop + window.innerHeight;\n      \n      // 元素是否在可见区域的安全范围内\n      const topThreshold = visibleTop + window.innerHeight * threshold;\n      const bottomThreshold = visibleBottom - window.innerHeight * threshold;\n      \n      return absoluteElementY >= topThreshold && absoluteElementY <= bottomThreshold;\n    }\n  };\n\n  // 启动自动阅读（保持一致的轻微滚动行为）\n  const startAutoReader = () => {\n    if (window.autoReader.charPositions.length === 0) {\n      if (window.currentPage < window.totalPages) {\n        window.changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 重置索引到开头\n    window.autoReader.currentIndex = 0;\n    \n    // 获取内容容器\n    const contentContainer = document.querySelector('.page-content');\n    if (!contentContainer) return;\n    \n    if (window.getComputedStyle(contentContainer).position === 'static') {\n      contentContainer.style.position = 'relative';\n    }\n    \n    // 创建或获取光标\n    let cursor = document.getElementById('auto-reader-cursor');\n    if (!cursor) {\n      cursor = createReaderCursor();\n      contentContainer.appendChild(cursor);\n    }\n    \n    // 创建或获取高亮元素\n    let highlight = document.getElementById('auto-reader-highlight');\n    if (!highlight) {\n      highlight = document.createElement('div');\n      highlight.id = 'auto-reader-highlight';\n      highlight.style.position = 'absolute';\n      highlight.style.backgroundColor = 'rgba(0, 255, 0, 0.3)';\n      highlight.style.borderRadius = '2px';\n      highlight.style.pointerEvents = 'none';\n      highlight.style.zIndex = '998';\n      contentContainer.appendChild(highlight);\n    }\n    \n    // 确定是哪个元素需要滚动（容器或窗口）\n    const isContainerScrollable = contentContainer.scrollHeight > contentContainer.clientHeight &&\n      ['auto', 'scroll', 'overlay'].includes(window.getComputedStyle(contentContainer).overflowY);\n    \n    // 估计的行高（用于计算滚动量）\n    let lineHeight = 20;\n    \n    // 尝试获取实际行高\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        const yDiff = Math.abs(window.autoReader.charPositions[i].y - window.autoReader.charPositions[i-1].y);\n        if (yDiff > 5) {\n          lineHeight = yDiff;\n          break;\n        }\n      }\n    }\n    \n    // 记录上次滚动的位置\n    let lastScrolledY = -1;\n    const scrollSafeZone = lineHeight * 2.5;\n    \n    // 设置字符大小的估计值\n    let charWidth = 20;\n    let charHeight = lineHeight * 0.8;\n    \n    // 尝试估计字符宽度\n    if (window.autoReader.charPositions.length > 1) {\n      for (let i = 1; i < window.autoReader.charPositions.length; i++) {\n        if (window.autoReader.charPositions[i].x !== window.autoReader.charPositions[i-1].x) {\n          const xDiff = Math.abs(window.autoReader.charPositions[i].x - window.autoReader.charPositions[i-1].x);\n          if (xDiff > 0 && xDiff < 50) {\n            charWidth = xDiff;\n            break;\n          }\n        }\n      }\n    }\n    \n    window.autoReader.intervalId = setInterval(() => {\n      // 跳过空白字符\n      while (window.autoReader.currentIndex < window.autoReader.charPositions.length && \n             window.autoReader.charPositions[window.autoReader.currentIndex]?.char.trim() === '') {\n        window.autoReader.currentIndex++;\n      }\n\n      // 当前页结束处理\n      if (window.autoReader.currentIndex >= window.autoReader.charPositions.length) {\n        if (window.currentPage < window.totalPages) {\n          window.changePage(1);\n          clearInterval(window.autoReader.intervalId);\n        } else {\n          stopAutoReader();\n        }\n        return;\n      }\n\n      const pos = window.autoReader.charPositions[window.autoReader.currentIndex];\n      cursor = document.getElementById('auto-reader-cursor');\n      highlight = document.getElementById('auto-reader-highlight');\n      \n      if (cursor && highlight) {\n        const contentRect = contentContainer.getBoundingClientRect();\n        \n        const relativeX = pos.x - contentRect.left;\n        const relativeY = pos.y - contentRect.top + contentContainer.scrollTop;\n        \n        cursor.style.left = `${relativeX}px`;\n        cursor.style.top = `${relativeY - contentContainer.scrollTop}px`;\n        \n        highlight.style.left = `${relativeX - charWidth/2}px`;\n        highlight.style.top = `${relativeY - contentContainer.scrollTop - charHeight}px`;\n        highlight.style.width = `${charWidth}px`;\n        highlight.style.height = `${charHeight}px`;\n        \n        // 滚动处理\n        const isInRecentlyScrolledArea = Math.abs(relativeY - lastScrolledY) < scrollSafeZone;\n        \n        if (!isInRecentlyScrolledArea) {\n          let needsScroll = false;\n          let scrollAmount = 0;\n          \n          if (isContainerScrollable) {\n            const visibleTop = contentContainer.scrollTop;\n            const visibleBottom = visibleTop + contentContainer.clientHeight;\n            \n            if (relativeY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (relativeY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            \n            if (needsScroll) {\n              contentContainer.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = relativeY;\n            }\n          } else {\n            const absoluteY = pos.y;\n            const visibleTop = window.scrollY;\n            const visibleBottom = visibleTop + window.innerHeight;\n            \n            if (absoluteY > visibleBottom - lineHeight) {\n              needsScroll = true;\n              scrollAmount = lineHeight * 2;\n            } else if (absoluteY < visibleTop + lineHeight) {\n              needsScroll = true;\n              scrollAmount = -lineHeight * 2;\n            }\n            \n            if (needsScroll) {\n              window.scrollBy({\n                top: scrollAmount,\n                behavior: 'smooth'\n              });\n              lastScrolledY = absoluteY;\n            }\n          }\n        }\n      }\n      \n      window.autoReader.currentIndex++;\n      \n    }, window.autoReader.speed);\n    \n    // 在停止自动阅读时清除所有高亮\n    window.autoReader.cleanup = () => {\n      // 移除高亮\n      const highlight = document.getElementById('auto-reader-highlight');\n      if (highlight) {\n        highlight.remove();\n      }\n      \n      // 移除光标\n      const cursor = document.getElementById('auto-reader-cursor');\n      if (cursor) {\n        cursor.remove();\n      }\n    };\n  };\n\n  // 修改stopAutoReader函数以包含清理高亮\n  const stopAutoReader = () => {\n    if (window.autoReader.intervalId) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n      \n      // 调用清理函数\n      if (window.autoReader.cleanup) {\n        window.autoReader.cleanup();\n      }\n    }\n  };\n\n  // 初始化自动阅读模式\n  const initializeAutoReader = () => {\n    // 清理可能存在的旧数据\n    stopAutoReader();\n    \n    // 重置翻页状态\n    window.autoReader.isPageChanging = false;\n    \n    // 收集所有字符位置\n    const content = document.querySelector('.page-content');\n    if (!content) return;\n    \n    // 确保内容滚动到顶部\n    if (content.scrollTo) {\n      content.scrollTo(0, 0);\n    }\n    \n    // 确保容器有正确的定位\n    if (window.getComputedStyle(content).position === 'static') {\n      content.style.position = 'relative';\n    }\n    \n    // 收集字符位置\n    window.autoReader.charPositions = getAllCharacterPositions(content);\n    \n    // 如果当前页没有内容，尝试翻页\n    if (window.autoReader.charPositions.length === 0) {\n      if (currentPage < totalPages && !window.autoReader.isPageChanging) {\n        window.autoReader.isPageChanging = true;\n        changePage(1);\n        return;\n      }\n      return;\n    }\n    \n    // 立即开始移动\n    startAutoReader();\n  };\n\n  // 修改阅读模式切换函数\n  const handleReadingModeChange = async (e) => {\n    const newMode = e.target.value;\n    \n    // 停止当前可能正在运行的自动阅读和节奏阅读\n    stopAutoReader();\n    if (window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    \n    // 清理旧模式\n    cleanupDOM();\n    \n    // 更新状态\n    setReadingMode(newMode);\n    \n    // 应用新模式\n    if (pdfDocument && currentPage > 0) {\n      try {\n        const page = await pdfDocument.getPage(currentPage);\n        const textContent = await page.getTextContent();\n        const textItems = textContent.items;\n        let extractedText = textItems.map(item => item.str).join(' ');\n        extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n        \n        let processedContent = '';\n        \n        // 应用对应模式的文本处理\n        switch(newMode) {\n          case 'follow-mouse':\n            processedContent = formatTextForMouseFollow(extractedText);\n            break;\n          case 'static':\n            processedContent = applyStaticHighlight(extractedText);\n            break;\n          case 'auto-reader':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          case 'rhythm':\n            processedContent = formatTextToHtml(extractedText);\n            break;\n          default:\n            processedContent = formatTextToHtml(extractedText);\n        }\n        \n        const contentArea = document.querySelector('.page-content');\n        if (contentArea) {\n          contentArea.textContent = '';\n          contentArea.innerHTML = processedContent;\n          \n          // 滚动到页面顶部\n          window.scrollTo(0, 0);\n          if (contentArea.scrollTo) {\n            contentArea.scrollTo(0, 0);\n          }\n          \n          // 立即初始化对应模式\n          if (newMode === 'auto-reader') {\n            setTimeout(initializeAutoReader, 50);\n          } else if (newMode === 'follow-mouse') {\n            setTimeout(initializeMouseFollow, 50);\n          } else if (newMode === 'rhythm') {\n            setTimeout(() => {\n              if (window.rhythmReader) {\n                window.rhythmReader.start();\n              }\n            }, 50);\n          }\n        }\n      } catch (error) {\n        console.error('应用新阅读模式失败:', error);\n      }\n    }\n  };\n\n  // 清理DOM元素和效果\n  const cleanupDOM = () => {\n    // 1. 移除所有可能的高亮元素\n    const highlights = document.querySelectorAll(\n      '.mouse-highlight, .line-highlight, .highlight-word, .reading-line, .text-line, .rhythm-char'\n    );\n    highlights.forEach(el => el.remove());\n    \n    // 2. 移除事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      // 克隆内容区域以彻底移除所有事件监听器\n      const cleanContent = contentArea.cloneNode(false);\n      cleanContent.innerHTML = contentArea.innerHTML;\n      contentArea.parentNode.replaceChild(cleanContent, contentArea);\n    }\n    \n    // 3. 重置段落结构\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 创建新段落并保留基本结构\n      const newParagraph = document.createElement('p');\n      newParagraph.className = 'pdf-paragraph';\n      newParagraph.innerHTML = paragraph.innerHTML\n        .replace(/<span class=\"text-line\">/g, '')\n        .replace(/<\\/span>/g, '')\n        .replace(/<span class=\"rhythm-char\">/g, '')\n        .replace(/<\\/span>/g, '');\n      \n      // 移除特殊属性\n      newParagraph.removeAttribute('data-follow');\n      newParagraph.removeAttribute('style');\n      \n      if (paragraph.parentNode) {\n        paragraph.parentNode.replaceChild(newParagraph, paragraph);\n      }\n    });\n    \n    // 4. 清理自动阅读器\n    stopAutoReader();\n    \n    // 5. 移除节奏阅读速度滑块\n    const slider = document.getElementById('rhythm-speed-slider');\n    if (slider) slider.remove();\n  };\n\n  const handleAutoScroll = () => {\n    window.autoReader.isScrolling = true;\n    // ... 防抖动逻辑\n  };\n\n  const updateCursorPosition = (force = false) => {\n    // ... 优化的位置更新和滚动逻辑\n  };\n\n  // 处理鼠标移动事件\n  const handleMouseMove = (e) => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    // 清除所有现有高亮\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n    \n    const mouseTarget = document.elementFromPoint(e.clientX, e.clientY);\n    \n    if (mouseTarget && \n       (mouseTarget.classList.contains('pdf-paragraph') || \n        mouseTarget.tagName === 'P' || \n        mouseTarget.tagName === 'SPAN')) {\n      \n      const targetParagraph = mouseTarget.closest('.pdf-paragraph');\n      if (!targetParagraph) return;\n      \n      // 获取段落文本节点\n      const textNode = getTextNodeAtPosition(targetParagraph, e.clientX, e.clientY);\n      if (!textNode) return;\n      \n      // 获取精确的行位置和尺寸\n      const range = document.createRange();\n      range.selectNodeContents(textNode);\n      const rects = range.getClientRects();\n      \n      // 找到鼠标所在的具体行\n      let targetRect = null;\n      for (let i = 0; i < rects.length; i++) {\n        const rect = rects[i];\n        if (e.clientY >= rect.top && e.clientY <= rect.bottom) {\n          targetRect = rect;\n          break;\n        }\n      }\n      \n      if (targetRect) {\n        // 创建高亮元素\n        const lineHighlight = document.createElement('div');\n        lineHighlight.className = 'line-highlight mouse-highlight';\n        \n        // 计算相对于段落的位置\n        const paragraphRect = targetParagraph.getBoundingClientRect();\n        const top = targetRect.top - paragraphRect.top;\n        const left = targetRect.left - paragraphRect.left;\n        \n        // 设置高亮样式\n        lineHighlight.style.position = 'absolute';\n        lineHighlight.style.left = `${left}px`;\n        lineHighlight.style.top = `${top}px`;\n        lineHighlight.style.width = `${targetRect.width}px`;\n        lineHighlight.style.height = `${targetRect.height}px`;\n        lineHighlight.style.pointerEvents = 'none';\n        lineHighlight.style.backgroundColor = 'rgba(255, 165, 0, 0.3)';\n        lineHighlight.style.borderRadius = '4px';\n        lineHighlight.style.boxShadow = '0 0 8px rgba(255, 165, 0, 0.5)';\n        lineHighlight.style.zIndex = '5';\n        lineHighlight.style.transition = 'all 0.1s ease';\n        \n        // 确保段落有相对定位\n          targetParagraph.style.position = 'relative';\n        targetParagraph.appendChild(lineHighlight);\n      }\n    }\n  };\n\n  // 清理所有高亮\n  const clearAllHighlights = () => {\n    document.querySelectorAll('.line-highlight').forEach(el => el.remove());\n  };\n\n  // 添加自动阅读器样式\n  const addAutoReaderStyles = () => {\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes pulse {\n        0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n        50% { transform: translate(-50%, -50%) scale(1.2); opacity: 1; }\n        100% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.8; }\n      }\n      .speed-control {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: rgba(0,0,0,0.7);\n        padding: 10px;\n        border-radius: 8px;\n        color: white;\n        z-index: 10000;\n      }\n      .speed-control button {\n        margin: 0 5px;\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n  };\n\n  // 在组件挂载时添加样式\n  useEffect(() => {\n    addAutoReaderStyles();\n  }, []);\n\n  // 初始化鼠标跟随模式\n  const initializeMouseFollow = () => {\n    // 新增延迟补偿\n    setTimeout(() => {\n      addMouseFollowListeners();\n      \n      // 强制触发重排\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        void contentArea.offsetHeight;\n        \n        // 模拟鼠标移动事件\n        const fakeEvent = new MouseEvent('mousemove', {\n          clientX: window.innerWidth / 2,\n          clientY: window.innerHeight / 2,\n          bubbles: true\n        });\n        contentArea.dispatchEvent(fakeEvent);\n      }\n    }, 50);\n  };\n\n  // 调整阅读速度\n  const adjustSpeed = (delta) => {\n    window.autoReader.speed = Math.max(100, window.autoReader.speed + delta);\n    setAutoReaderState(prev => ({ ...prev, speed: window.autoReader.speed }));\n    \n    if (window.autoReader.intervalId) {\n      stopAutoReader();\n      startAutoReader();\n    }\n  };\n\n  // 修改翻页函数\n  const changePage = async (delta) => {\n    const newPage = currentPage + delta;\n    \n    if (newPage < 1 || newPage > totalPages) return;\n    \n    const wasAutoReading = readingMode === 'auto-reader' && window.autoReader.intervalId;\n    const wasRhythmReading = readingMode === 'rhythm' && window.rhythmReaderGlobal.active;\n    \n    // 如果正在自动阅读或节奏阅读，先停止\n    if (wasAutoReading) {\n      clearInterval(window.autoReader.intervalId);\n      window.autoReader.intervalId = null;\n    }\n    \n    if (wasRhythmReading && window.rhythmReader) {\n      window.rhythmReader.stop();\n    }\n    \n    // 更新页码\n    setCurrentPage(newPage);\n    \n    try {\n      // 加载新页面\n      const page = await pdfDocument.getPage(newPage);\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n      // 按当前阅读模式处理内容\n      let processedContent = '';\n      switch(readingMode) {\n        case 'follow-mouse':\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'auto-reader':\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'rhythm':\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      \n      // 更新页面内容\n      const contentArea = document.querySelector('.page-content');\n      if (contentArea) {\n        contentArea.textContent = '';\n        contentArea.innerHTML = processedContent;\n        \n        // 滚动到页面顶部\n        window.scrollTo(0, 0);\n        if (contentArea.scrollTo) {\n          contentArea.scrollTo(0, 0);\n        }\n        \n        // 重新启动对应的阅读模式\n        if (wasAutoReading) {\n          setTimeout(initializeAutoReader, 50);\n        } else if (wasRhythmReading && window.rhythmReader) {\n          setTimeout(() => {\n            window.rhythmReader.start();\n          }, 50);\n        }\n      }\n    } catch (error) {\n      console.error('翻页失败:', error);\n    }\n  };\n\n  // 修改后的监听器设置函数\n  const addMouseFollowListeners = () => {\n    if (readingMode !== 'follow-mouse') return;\n    \n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) return;\n    \n    // 清理旧的监听器\n    contentArea.removeEventListener('mousemove', handleMouseMove);\n    contentArea.removeEventListener('mouseleave', clearAllHighlights);\n    \n    // 添加新的监听器\n    contentArea.addEventListener('mousemove', handleMouseMove);\n    contentArea.addEventListener('mouseleave', clearAllHighlights);\n    \n    // 确保所有段落都有正确的样式\n    document.querySelectorAll('.pdf-paragraph').forEach(p => {\n      p.style.position = 'relative';\n      p.style.lineHeight = '1.5';\n    });\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = (text) => {\n    // 分段\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    // 创建HTML内容\n    let htmlContent = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      htmlContent += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 应用静态高亮\n  const applyStaticHighlight = (text) => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    let htmlContent = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      // 新增强制清理逻辑\n      const cleanParagraph = paragraph\n        .replace(/<span class=\"text-line\">/g, '')\n        .replace(/<\\/span>/g, '');\n      \n      const highlightedText = processTextWithHighlight(cleanParagraph);\n      htmlContent += `<p class=\"pdf-paragraph\">${highlightedText}</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 格式化文本用于鼠标跟随高亮模式\n  const formatTextForMouseFollow = (text) => {\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    let htmlContent = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      // 将段落分割成行\n      const lines = paragraph.split('\\n').filter(line => line.trim());\n      htmlContent += `<p class=\"pdf-paragraph\" data-follow=\"true\" style=\"position: relative; line-height: 1.5;\">`;\n      \n      lines.forEach((line, i) => {\n        // 每行用span包裹\n        htmlContent += `<span class=\"text-line\" style=\"display: block;\">${line}</span>`;\n      });\n      \n      htmlContent += `</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 强制初始化字符位置（这是关键步骤！）\n  function forceInitReader() {\n    console.log(\"强制初始化阅读器...\");\n    \n    // 1. 如果autoReader或charPositions不存在，创建它们\n    if (typeof window.autoReader === 'undefined') {\n      window.autoReader = {\n        charPositions: [],\n        intervalId: null,\n        currentIndex: 0,\n        speed: 30\n      };\n    }\n    \n    // 2. 如果没有字符位置数据，尝试触发它的创建\n    if (!window.autoReader.charPositions || window.autoReader.charPositions.length === 0) {\n      console.log(\"未找到字符位置数据，尝试强制创建...\");\n      \n      // 直接使用scanTextPositionsSimple函数\n      scanTextPositionsSimple();\n    }\n    \n    return window.autoReader.charPositions && window.autoReader.charPositions.length > 0;\n  }\n\n  // 简单的文本位置扫描函数\n  function scanTextPositionsSimple() {\n    console.log(\"使用简单文本扫描...\");\n    \n    window.autoReader.charPositions = [];\n    const contentElement = document.querySelector('.page-content');\n    if (!contentElement) {\n      console.error(\"找不到内容容器\");\n      return;\n    }\n    \n    // 递归处理文本节点\n    function processTextNodes(element) {\n      if (element.nodeType === Node.TEXT_NODE) {\n        const text = element.textContent;\n        if (!text || text.trim() === '') return;\n        \n        // 获取元素的位置信息\n        const range = document.createRange();\n        \n        // 为每个字符创建一个独立的范围\n        for (let i = 0; i < text.length; i++) {\n          try {\n            range.setStart(element, i);\n            range.setEnd(element, i + 1);\n            \n            const rect = range.getBoundingClientRect();\n            if (rect.width > 0 && rect.height > 0) {\n              window.autoReader.charPositions.push({\n                char: text[i],\n                x: rect.left + rect.width/2,\n                y: rect.top + rect.height/2,\n                element: element.parentElement\n              });\n            }\n          } catch (e) {\n            console.warn(\"无法处理字符\", e);\n          }\n        }\n      } else if (element.nodeType === Node.ELEMENT_NODE) {\n        // 递归处理子元素\n        for (const child of element.childNodes) {\n          processTextNodes(child);\n        }\n      }\n    }\n    \n    processTextNodes(contentElement);\n    console.log(\"扫描完成，找到字符数量:\", window.autoReader.charPositions.length);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        <div className=\"logo\">\n          <h2>ADHD阅读助手</h2>\n        </div>\n        <label className=\"upload-btn\">\n          选择文件\n          <input\n            type=\"file\"\n            accept=\".pdf,.txt\"\n            onChange={handleFileUpload}\n            style={{ display: 'none' }}\n          />\n        </label>\n      </div>\n      <div className=\"main-content\">\n        <div className=\"header\">\n          <h1>ADHD阅读助手</h1>\n          <div className=\"controls\">\n            <div className=\"mode-selector\">\n              <select value={readingMode} onChange={handleReadingModeChange}>\n                <option value=\"normal\">普通模式</option>\n                <option value=\"static\">静态高亮模式</option>\n                <option value=\"follow-mouse\">鼠标跟随高亮</option>\n                <option value=\"auto-reader\">自动阅读器</option>\n                <option value=\"rhythm\">节奏阅读模式</option>\n              </select>\n            </div>\n            <div className=\"mode-selector\">\n              <select value={posMode} onChange={(e) => setPosMode(e.target.value)}>\n                <option value=\"none\">无词性标注</option>\n                <option value=\"noun\">名词标注</option>\n                <option value=\"all\">全词性标注</option>\n              </select>\n            </div>\n            {readingMode === 'auto-reader' && (\n              <div className=\"speed-control\">\n                <button onClick={() => adjustSpeed(-100)}>-</button>\n                <span>{autoReaderState.speed}ms</span>\n                <button onClick={() => adjustSpeed(100)}>+</button>\n              </div>\n            )}\n          </div>\n        </div>\n        <div className=\"page-content\">\n          {content ? (\n            <div dangerouslySetInnerHTML={{ __html: content }} />\n          ) : (\n            <div className=\"empty-state\">\n              <p>请上传PDF或TXT文件开始阅读</p>\n            </div>\n          )}\n        </div>\n        {content && (\n          <div className=\"nav-buttons\">\n            <button className=\"page-btn prev\" onClick={() => changePage(-1)} disabled={currentPage === 1}>\n              上一页\n            </button>\n            <span className=\"page-info\">\n              第 {currentPage} 页 / 共 {totalPages} 页\n            </span>\n            <button className=\"page-btn next\" onClick={() => changePage(1)} disabled={currentPage === totalPages}>\n              下一页\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAO,KAAKC,QAAQ,MAAM,YAAY;AACtC,OAAO,KAAKC,WAAW,MAAM,2BAA2B;AACxD,SAASC,MAAM,QAAQ,QAAQ,CAAC,CAAC;AACjC,OAAO,qBAAqB;AAC5B,SAASC,KAAK,QAAQ,YAAY;;AAElC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAL,QAAQ,CAACM,mBAAmB,CAACC,SAAS,GAAG,2CAA2CP,QAAQ,CAACQ,OAAO,oBAAoB;;AAExH;AACAC,MAAM,CAACC,WAAW,GAAG,CAAC;AACtBD,MAAM,CAACE,UAAU,GAAG,CAAC;AACrBF,MAAM,CAACG,UAAU,GAAG,IAAI;;AAExB;AACAH,MAAM,CAACI,UAAU,GAAG;EAClBC,aAAa,EAAE,EAAE;EACjBC,UAAU,EAAE,IAAI;EAChBC,YAAY,EAAE,CAAC;EACfC,KAAK,EAAE,GAAG;EACVC,aAAa,EAAE,IAAI;EACnBC,WAAW,EAAE,KAAK;EAClBT,WAAW,EAAE,CAAC;EACdU,cAAc,EAAE,KAAK;EACrBC,OAAO,EAAE;AACX,CAAC;;AAED;AACA;AACAZ,MAAM,CAACa,kBAAkB,GAAGb,MAAM,CAACa,kBAAkB,IAAI;EACvDC,MAAM,EAAE,KAAK;EACbN,KAAK,EAAE;AACT,CAAC;;AAED;AACA,SAASO,kBAAkBA,CAAA,EAAG;EAC5B;EACA,IAAID,MAAM,GAAG,KAAK;EAClB,IAAIR,UAAU,GAAG,IAAI;EACrB,IAAIE,KAAK,GAAGR,MAAM,CAACa,kBAAkB,CAACL,KAAK,IAAI,GAAG;EAClD,IAAID,YAAY,GAAG,CAAC;EACpB,IAAIS,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC3B,IAAIC,YAAY,GAAG,EAAE;;EAErB;EACA,IAAIC,aAAa,GAAG,CAAC,CAAC;EACtB,IAAIC,cAAc,GAAG,EAAE,CAAC,CAAC;EACzB,IAAIC,UAAU,GAAG,EAAE,CAAC,CAAC;;EAErB;EACA,SAASC,cAAcA,CAAA,EAAG;IACxB,IAAIC,MAAM,GAAGC,QAAQ,CAACC,cAAc,CAAC,qBAAqB,CAAC;IAC3D,IAAIF,MAAM,EAAEA,MAAM,CAACG,MAAM,CAAC,CAAC;IAE3B,MAAMC,SAAS,GAAGH,QAAQ,CAACI,aAAa,CAAC,KAAK,CAAC;IAC/CD,SAAS,CAACE,EAAE,GAAG,qBAAqB;IACpCF,SAAS,CAACG,KAAK,CAACC,QAAQ,GAAG,OAAO;IAClCJ,SAAS,CAACG,KAAK,CAACE,GAAG,GAAG,MAAM;IAC5BL,SAAS,CAACG,KAAK,CAACG,KAAK,GAAG,MAAM;IAC9BN,SAAS,CAACG,KAAK,CAACI,eAAe,GAAG,OAAO;IACzCP,SAAS,CAACG,KAAK,CAACK,OAAO,GAAG,MAAM;IAChCR,SAAS,CAACG,KAAK,CAACM,YAAY,GAAG,KAAK;IACpCT,SAAS,CAACG,KAAK,CAACO,SAAS,GAAG,2BAA2B;IACvDV,SAAS,CAACG,KAAK,CAACQ,MAAM,GAAG,OAAO;IAChCX,SAAS,CAACG,KAAK,CAACS,OAAO,GAAG,MAAM;IAChCZ,SAAS,CAACG,KAAK,CAACU,UAAU,GAAG,QAAQ;IACrCb,SAAS,CAACG,KAAK,CAACW,QAAQ,GAAG,OAAO;IAElC,MAAMC,KAAK,GAAGlB,QAAQ,CAACI,aAAa,CAAC,OAAO,CAAC;IAC7Cc,KAAK,CAACC,WAAW,GAAG,MAAM;IAC1BD,KAAK,CAACZ,KAAK,CAACc,WAAW,GAAG,KAAK;IAC/BjB,SAAS,CAACkB,WAAW,CAACH,KAAK,CAAC;IAE5B,MAAMI,KAAK,GAAGtB,QAAQ,CAACI,aAAa,CAAC,OAAO,CAAC;IAC7CkB,KAAK,CAACC,IAAI,GAAG,OAAO;IACpBD,KAAK,CAACE,GAAG,GAAG,IAAI;IAChBF,KAAK,CAACG,GAAG,GAAG,MAAM;IAClBH,KAAK,CAACI,IAAI,GAAG,IAAI;IACjBJ,KAAK,CAACK,KAAK,GAAG3C,KAAK;IACnBsC,KAAK,CAAChB,KAAK,CAACsB,KAAK,GAAG,OAAO;IAE3B,MAAMC,YAAY,GAAG7B,QAAQ,CAACI,aAAa,CAAC,MAAM,CAAC;IACnDyB,YAAY,CAACV,WAAW,GAAG,GAAGnC,KAAK,IAAI;IACvC6C,YAAY,CAACvB,KAAK,CAACwB,UAAU,GAAG,KAAK;IACrCD,YAAY,CAACvB,KAAK,CAACyB,QAAQ,GAAG,MAAM;IAEpCT,KAAK,CAACU,gBAAgB,CAAC,OAAO,EAAE,YAAW;MACzC,MAAMC,QAAQ,GAAGC,QAAQ,CAAC,IAAI,CAACP,KAAK,CAAC;MACrC3C,KAAK,GAAGiD,QAAQ;MAChBzD,MAAM,CAACa,kBAAkB,CAACL,KAAK,GAAGiD,QAAQ;MAC1CJ,YAAY,CAACV,WAAW,GAAG,GAAGc,QAAQ,IAAI;MAE1C,IAAInD,UAAU,EAAE;QACdqD,aAAa,CAACrD,UAAU,CAAC;QACzBA,UAAU,GAAGsD,WAAW,CAACC,cAAc,EAAEJ,QAAQ,CAAC;MACpD;IACF,CAAC,CAAC;IAEF9B,SAAS,CAACkB,WAAW,CAACC,KAAK,CAAC;IAC5BnB,SAAS,CAACkB,WAAW,CAACQ,YAAY,CAAC;IACnC7B,QAAQ,CAACsC,IAAI,CAACjB,WAAW,CAAClB,SAAS,CAAC;EACtC;;EAEA;EACA,SAASoC,mBAAmBA,CAAA,EAAG;IAC7B;IACA7C,YAAY,GAAG,EAAE;;IAEjB;IACA,MAAM8C,gBAAgB,GAAGxC,QAAQ,CAACyC,aAAa,CAAC,eAAe,CAAC,IAAIzC,QAAQ,CAACsC,IAAI;;IAEjF;IACA,MAAMI,SAAS,GAAG,EAAE;IACpBC,aAAa,CAACH,gBAAgB,EAAEE,SAAS,CAAC;IAE1C,IAAIA,SAAS,CAACE,MAAM,KAAK,CAAC,EAAE;MAC1BC,OAAO,CAACC,KAAK,CAAC,SAAS,CAAC;MACxB,OAAO,KAAK;IACd;IAEAD,OAAO,CAACE,GAAG,CAAC,MAAML,SAAS,CAACE,MAAM,QAAQ,CAAC;;IAE3C;IACAF,SAAS,CAACM,OAAO,CAACC,IAAI,IAAI;MACxB,MAAMC,IAAI,GAAGD,IAAI,CAACE,SAAS;MAC3B,IAAI,CAACD,IAAI,IAAIA,IAAI,CAACE,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;;MAEjC;MACA,MAAMC,QAAQ,GAAGrD,QAAQ,CAACsD,sBAAsB,CAAC,CAAC;;MAElD;MACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,IAAI,CAACN,MAAM,EAAEW,CAAC,EAAE,EAAE;QACpC,MAAMC,IAAI,GAAGN,IAAI,CAACK,CAAC,CAAC;QACpB,MAAME,IAAI,GAAGzD,QAAQ,CAACI,aAAa,CAAC,MAAM,CAAC;QAC3CqD,IAAI,CAACtC,WAAW,GAAGqC,IAAI;QACvBC,IAAI,CAACC,SAAS,GAAG,aAAa;QAC9BD,IAAI,CAACE,OAAO,CAACC,WAAW,GAAGlE,YAAY,CAACkD,MAAM;;QAE9C;QACA,IAAIY,IAAI,CAACJ,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;UACtBK,IAAI,CAACE,OAAO,CAACE,UAAU,GAAG,MAAM;QAClC;;QAEA;QACAJ,IAAI,CAACnD,KAAK,CAACS,OAAO,GAAG,QAAQ;QAC7B0C,IAAI,CAACnD,KAAK,CAACwD,MAAM,GAAG,GAAG;QACvBL,IAAI,CAACnD,KAAK,CAACK,OAAO,GAAG,GAAG;QACxB8C,IAAI,CAACnD,KAAK,CAACyD,MAAM,GAAG,MAAM;QAC1BN,IAAI,CAACnD,KAAK,CAACI,eAAe,GAAG,aAAa;QAE1C2C,QAAQ,CAAChC,WAAW,CAACoC,IAAI,CAAC;QAC1B/D,YAAY,CAACsE,IAAI,CAACP,IAAI,CAAC;MACzB;;MAEA;MACA,IAAIR,IAAI,CAACgB,UAAU,EAAE;QACnBhB,IAAI,CAACgB,UAAU,CAACC,YAAY,CAACb,QAAQ,EAAEJ,IAAI,CAAC;MAC9C;IACF,CAAC,CAAC;IAEFJ,OAAO,CAACE,GAAG,CAAC,SAASrD,YAAY,CAACkD,MAAM,UAAU,CAAC;;IAEnD;IACA,IAAIlD,YAAY,CAACkD,MAAM,GAAG,CAAC,EAAE;MAC3B,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG7D,YAAY,CAACkD,MAAM,EAAEW,CAAC,EAAE,EAAE;QAC5C,MAAMY,KAAK,GAAGzE,YAAY,CAAC6D,CAAC,GAAC,CAAC,CAAC;QAC/B,MAAMa,KAAK,GAAG1E,YAAY,CAAC6D,CAAC,CAAC;QAC7B,IAAIY,KAAK,IAAIC,KAAK,EAAE;UAClB,MAAMC,KAAK,GAAGF,KAAK,CAACG,qBAAqB,CAAC,CAAC;UAC3C,MAAMC,KAAK,GAAGH,KAAK,CAACE,qBAAqB,CAAC,CAAC;UAC3C,MAAME,KAAK,GAAGC,IAAI,CAACC,GAAG,CAACH,KAAK,CAAC/D,GAAG,GAAG6D,KAAK,CAAC7D,GAAG,CAAC;UAC7C,IAAIgE,KAAK,GAAG,CAAC,EAAE;YAAE;YACf3E,UAAU,GAAG2E,KAAK;YAClB5E,cAAc,GAAGC,UAAU,GAAG,GAAG;YACjCgD,OAAO,CAACE,GAAG,CAAC,SAASlD,UAAU,IAAI,CAAC;YACpC;UACF;QACF;MACF;IACF;IAEA,OAAOH,YAAY,CAACkD,MAAM,GAAG,CAAC;EAChC;;EAEA;EACA,SAASD,aAAaA,CAACgC,OAAO,EAAEjC,SAAS,EAAE;IACzC;IACA,KAAK,IAAIa,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoB,OAAO,CAACC,UAAU,CAAChC,MAAM,EAAEW,CAAC,EAAE,EAAE;MAClD,MAAMN,IAAI,GAAG0B,OAAO,CAACC,UAAU,CAACrB,CAAC,CAAC;;MAElC;MACA,IAAIN,IAAI,CAAC4B,QAAQ,KAAKC,IAAI,CAACC,SAAS,IAAI9B,IAAI,CAACE,SAAS,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QACpEV,SAAS,CAACsB,IAAI,CAACf,IAAI,CAAC;MACtB;MACA;MAAA,KACK,IAAIA,IAAI,CAAC4B,QAAQ,KAAKC,IAAI,CAACE,YAAY,EAAE;QAC5C;QACA,IAAI/B,IAAI,CAAC5C,EAAE,KAAK,qBAAqB,IACjC4C,IAAI,CAACS,SAAS,KAAK,aAAa,EAAE;UACpC;QACF;QACAf,aAAa,CAACM,IAAI,EAAEP,SAAS,CAAC;MAChC;IACF;EACF;;EAEA;EACA,SAASuC,gBAAgBA,CAAA,EAAG;IAC1B;IACAvF,YAAY,CAACsD,OAAO,CAAC,CAACS,IAAI,EAAEyB,KAAK,KAAK;MACpC;MACA,IAAIC,KAAK;MACT,IAAIC,UAAU,GAAG,SAAS;MAE1B,IAAIF,KAAK,KAAKnG,YAAY,EAAE;QAC1BoG,KAAK,GAAG,SAAS,CAAC,CAAC;QACnBC,UAAU,GAAG,MAAM;MACrB,CAAC,MAAM,IAAIF,KAAK,KAAKnG,YAAY,GAAG,CAAC,IAAImG,KAAK,KAAKnG,YAAY,GAAG,CAAC,EAAE;QACnEoG,KAAK,GAAG,SAAS,CAAC,CAAC;MACrB,CAAC,MAAM,IAAI3F,WAAW,CAAC6F,GAAG,CAACH,KAAK,CAAC,EAAE;QACjCC,KAAK,GAAG,SAAS,CAAC,CAAC;MACrB,CAAC,MAAM;QACLA,KAAK,GAAG,2BAA2B,CAAC,CAAC;MACvC;MAEA1B,IAAI,CAACnD,KAAK,CAAC6E,KAAK,GAAGA,KAAK;MACxB1B,IAAI,CAACnD,KAAK,CAAC8E,UAAU,GAAGA,UAAU;;MAElC;MACA3B,IAAI,CAACnD,KAAK,CAACI,eAAe,GAAG,aAAa;MAC1C+C,IAAI,CAACnD,KAAK,CAACgF,UAAU,GAAG,MAAM;IAChC,CAAC,CAAC;EACJ;;EAEA;EACA,SAASjD,cAAcA,CAAA,EAAG;IACxB;IACA7C,WAAW,CAAC+F,GAAG,CAACxG,YAAY,CAAC;;IAE7B;IACA,GAAG;MACDA,YAAY,EAAE;;MAEd;MACA,IAAIA,YAAY,IAAIW,YAAY,CAACkD,MAAM,EAAE;QACvC,IAAIpE,MAAM,CAACC,WAAW,GAAGD,MAAM,CAACE,UAAU,EAAE;UAC1CmE,OAAO,CAACE,GAAG,CAAC,gBAAgB,CAAC;UAC7B;UACAZ,aAAa,CAACrD,UAAU,CAAC;UACzBA,UAAU,GAAG,IAAI;;UAEjB;UACA0G,mBAAmB,CAAC,CAAC;;UAErB;UACAxF,QAAQ,CAACsC,IAAI,CAACqB,OAAO,CAAC8B,aAAa,GAAG,MAAM;;UAE5C;UACAjH,MAAM,CAACG,UAAU,CAAC,CAAC,CAAC;;UAEpB;UACA+G,qBAAqB,CAAC,CAAC;UACvB;QACF,CAAC,MAAM;UACL7C,OAAO,CAACE,GAAG,CAAC,cAAc,CAAC;UAC3B4C,WAAW,CAAC,CAAC;UACb;QACF;MACF;IACF,CAAC,QACC5G,YAAY,GAAGW,YAAY,CAACkD,MAAM,IAClClD,YAAY,CAACX,YAAY,CAAC,IAC1BW,YAAY,CAACX,YAAY,CAAC,CAAC4E,OAAO,CAACE,UAAU,KAAK,MAAM;;IAG1D;IACAoB,gBAAgB,CAAC,CAAC;;IAElB;IACAW,mBAAmB,CAAC,CAAC;EACvB;;EAEA;EACA,SAASA,mBAAmBA,CAAA,EAAG;IAC7B,MAAMnC,IAAI,GAAG/D,YAAY,CAACX,YAAY,CAAC;IACvC,IAAI,CAAC0E,IAAI,EAAE;IAEX,MAAMoC,IAAI,GAAGpC,IAAI,CAACa,qBAAqB,CAAC,CAAC;IACzC,MAAM9B,gBAAgB,GAAGxC,QAAQ,CAACyC,aAAa,CAAC,eAAe,CAAC;;IAEhE;IACA,MAAMqD,qBAAqB,GAAGtD,gBAAgB,IAC5CA,gBAAgB,CAACuD,YAAY,GAAGvD,gBAAgB,CAACwD,YAAY,IAC7D,CAAC,MAAM,EAAE,QAAQ,EAAE,SAAS,CAAC,CAACC,QAAQ,CAACzH,MAAM,CAAC0H,gBAAgB,CAAC1D,gBAAgB,CAAC,CAAC2D,SAAS,CAAC;IAE7F,IAAIL,qBAAqB,EAAE;MACzB;MACA,MAAMM,aAAa,GAAG5D,gBAAgB,CAAC8B,qBAAqB,CAAC,CAAC;MAC9D,MAAM+B,WAAW,GAAGR,IAAI,CAACrF,GAAG,GAAG4F,aAAa,CAAC5F,GAAG,GAAGgC,gBAAgB,CAAC8D,SAAS;MAE7E,MAAMC,UAAU,GAAG/D,gBAAgB,CAAC8D,SAAS;MAC7C,MAAME,aAAa,GAAGD,UAAU,GAAG/D,gBAAgB,CAACwD,YAAY;MAEhE,IAAIK,WAAW,GAAGE,UAAU,GAAG1G,UAAU,IAAIwG,WAAW,GAAGG,aAAa,GAAG3G,UAAU,EAAE;QACrF2C,gBAAgB,CAACiE,QAAQ,CAAC;UACxBjG,GAAG,EAAEX,UAAU,GAAG,CAAC,IAAIwG,WAAW,GAAGG,aAAa,GAAG3G,UAAU,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;UACzE6G,QAAQ,EAAE;QACZ,CAAC,CAAC;MACJ;IACF,CAAC,MAAM;MACL;MACA,MAAMC,WAAW,GAAGnI,MAAM,CAACoI,OAAO;MAClC,MAAMC,cAAc,GAAGF,WAAW,GAAGnI,MAAM,CAACsI,WAAW;MACvD,MAAMC,WAAW,GAAGlB,IAAI,CAACrF,GAAG,GAAGhC,MAAM,CAACoI,OAAO;MAE7C,IAAIG,WAAW,GAAGJ,WAAW,GAAG9G,UAAU,IAAIkH,WAAW,GAAGF,cAAc,GAAGhH,UAAU,EAAE;QACvFrB,MAAM,CAACiI,QAAQ,CAAC;UACdjG,GAAG,EAAEX,UAAU,GAAG,CAAC,IAAIkH,WAAW,GAAGF,cAAc,GAAGhH,UAAU,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;UAC1E6G,QAAQ,EAAE;QACZ,CAAC,CAAC;MACJ;IACF;EACF;;EAEA;EACA,SAASlB,mBAAmBA,CAAA,EAAG;IAC7B;IACA,MAAMwB,SAAS,GAAGhH,QAAQ,CAACiH,gBAAgB,CAAC,cAAc,CAAC;;IAE3D;IACA,MAAMC,aAAa,GAAG,IAAIC,GAAG,CAAC,CAAC;IAE/BH,SAAS,CAAChE,OAAO,CAACS,IAAI,IAAI;MACxB,MAAM2D,MAAM,GAAG3D,IAAI,CAACQ,UAAU;MAC9B,IAAI,CAACmD,MAAM,EAAE;MAEb,IAAI,CAACF,aAAa,CAAC7B,GAAG,CAAC+B,MAAM,CAAC,EAAE;QAC9BF,aAAa,CAACG,GAAG,CAACD,MAAM,EAAE,EAAE,CAAC;MAC/B;MACAF,aAAa,CAACI,GAAG,CAACF,MAAM,CAAC,CAACpD,IAAI,CAACP,IAAI,CAAC;IACtC,CAAC,CAAC;;IAEF;IACAyD,aAAa,CAAClE,OAAO,CAAC,CAACuE,KAAK,EAAEH,MAAM,KAAK;MACvC,IAAIG,KAAK,CAAC3E,MAAM,KAAK,CAAC,EAAE;;MAExB;MACA2E,KAAK,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QACnB,MAAMC,MAAM,GAAGzF,QAAQ,CAACuF,CAAC,CAAC9D,OAAO,CAACC,WAAW,IAAI,GAAG,CAAC;QACrD,MAAMgE,MAAM,GAAG1F,QAAQ,CAACwF,CAAC,CAAC/D,OAAO,CAACC,WAAW,IAAI,GAAG,CAAC;QACrD,OAAO+D,MAAM,GAAGC,MAAM;MACxB,CAAC,CAAC;;MAEF;MACA,MAAMC,MAAM,GAAG,EAAE;MACjB,IAAIC,YAAY,GAAG,CAACP,KAAK,CAAC,CAAC,CAAC,CAAC;MAE7B,KAAK,IAAIhE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgE,KAAK,CAAC3E,MAAM,EAAEW,CAAC,EAAE,EAAE;QACrC,MAAMwE,SAAS,GAAG7F,QAAQ,CAACqF,KAAK,CAAChE,CAAC,GAAC,CAAC,CAAC,CAACI,OAAO,CAACC,WAAW,IAAI,GAAG,CAAC;QACjE,MAAM7E,YAAY,GAAGmD,QAAQ,CAACqF,KAAK,CAAChE,CAAC,CAAC,CAACI,OAAO,CAACC,WAAW,IAAI,GAAG,CAAC;QAElE,IAAI7E,YAAY,KAAKgJ,SAAS,GAAG,CAAC,IAAIR,KAAK,CAAChE,CAAC,CAAC,CAACyE,eAAe,KAAKT,KAAK,CAAChE,CAAC,GAAC,CAAC,CAAC,EAAE;UAC7EuE,YAAY,CAAC9D,IAAI,CAACuD,KAAK,CAAChE,CAAC,CAAC,CAAC;QAC7B,CAAC,MAAM;UACLsE,MAAM,CAAC7D,IAAI,CAAC8D,YAAY,CAAC;UACzBA,YAAY,GAAG,CAACP,KAAK,CAAChE,CAAC,CAAC,CAAC;QAC3B;MACF;MAEAsE,MAAM,CAAC7D,IAAI,CAAC8D,YAAY,CAAC;;MAEzB;MACAD,MAAM,CAAC7E,OAAO,CAACiF,KAAK,IAAI;QACtB,IAAIA,KAAK,CAACrF,MAAM,KAAK,CAAC,EAAE;QAExB,IAAI;UACF,MAAMM,IAAI,GAAG+E,KAAK,CAACC,GAAG,CAACzE,IAAI,IAAIA,IAAI,CAACtC,WAAW,CAAC,CAACgH,IAAI,CAAC,EAAE,CAAC;UACzD,MAAMC,QAAQ,GAAGpI,QAAQ,CAACqI,cAAc,CAACnF,IAAI,CAAC;;UAE9C;UACA,IAAI+E,KAAK,CAAC,CAAC,CAAC,CAAChE,UAAU,KAAKmD,MAAM,EAAE;YAClCA,MAAM,CAAClD,YAAY,CAACkE,QAAQ,EAAEH,KAAK,CAAC,CAAC,CAAC,CAAC;YACvC,KAAK,IAAI1E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0E,KAAK,CAACrF,MAAM,EAAEW,CAAC,EAAE,EAAE;cACrC,IAAI0E,KAAK,CAAC1E,CAAC,CAAC,CAACU,UAAU,KAAKmD,MAAM,EAAE;gBAClCA,MAAM,CAACkB,WAAW,CAACL,KAAK,CAAC1E,CAAC,CAAC,CAAC;cAC9B;YACF;UACF;QACF,CAAC,CAAC,OAAOgF,CAAC,EAAE;UACV1F,OAAO,CAACC,KAAK,CAAC,UAAU,EAAEyF,CAAC,CAAC;QAC9B;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACA7I,YAAY,GAAG,EAAE;EACnB;;EAEA;EACA,SAASgG,qBAAqBA,CAAA,EAAG;IAC/B7C,OAAO,CAACE,GAAG,CAAC,WAAW,CAAC;;IAExB;IACA,MAAMyF,QAAQ,GAAG,IAAIC,gBAAgB,CAAEC,SAAS,IAAK;MACnD,IAAI1I,QAAQ,CAACsC,IAAI,CAACqB,OAAO,CAAC8B,aAAa,KAAK,MAAM,EAAE;QAClD,KAAK,MAAMkD,QAAQ,IAAID,SAAS,EAAE;UAChC,IAAIC,QAAQ,CAACpH,IAAI,KAAK,WAAW,IAAIoH,QAAQ,CAACC,UAAU,CAAChG,MAAM,GAAG,CAAC,EAAE;YACnEC,OAAO,CAACE,GAAG,CAAC,kBAAkB,CAAC;;YAE/B;YACA8F,UAAU,CAAC,MAAM;cACfhG,OAAO,CAACE,GAAG,CAAC,UAAU,CAAC;cACvB/C,QAAQ,CAACsC,IAAI,CAACqB,OAAO,CAAC8B,aAAa,GAAG,OAAO;cAC7CqD,YAAY,CAAC,CAAC;YAChB,CAAC,EAAE,GAAG,CAAC;;YAEP;YACAN,QAAQ,CAACO,UAAU,CAAC,CAAC;YACrB;UACF;QACF;MACF;IACF,CAAC,CAAC;;IAEF;IACAP,QAAQ,CAACQ,OAAO,CAAChJ,QAAQ,CAACsC,IAAI,EAAE;MAC9B2G,SAAS,EAAE,IAAI;MACfC,OAAO,EAAE;IACX,CAAC,CAAC;;IAEF;IACAL,UAAU,CAAC,MAAM;MACf,IAAI7I,QAAQ,CAACsC,IAAI,CAACqB,OAAO,CAAC8B,aAAa,KAAK,MAAM,EAAE;QAClD5C,OAAO,CAACE,GAAG,CAAC,aAAa,CAAC;QAC1B/C,QAAQ,CAACsC,IAAI,CAACqB,OAAO,CAAC8B,aAAa,GAAG,OAAO;QAC7CqD,YAAY,CAAC,CAAC;MAChB;IACF,CAAC,EAAE,IAAI,CAAC;EACV;;EAEA;EACA,SAASnD,WAAWA,CAAA,EAAG;IACrB,IAAI7G,UAAU,EAAE;MACdqD,aAAa,CAACrD,UAAU,CAAC;MACzBA,UAAU,GAAG,IAAI;IACnB;IAEAQ,MAAM,GAAG,KAAK;;IAEd;IACAU,QAAQ,CAACsC,IAAI,CAACqB,OAAO,CAAC8B,aAAa,GAAG,OAAO;;IAE7C;IACAD,mBAAmB,CAAC,CAAC;;IAErB;IACA,MAAMzF,MAAM,GAAGC,QAAQ,CAACC,cAAc,CAAC,qBAAqB,CAAC;IAC7D,IAAIF,MAAM,EAAEA,MAAM,CAACG,MAAM,CAAC,CAAC;EAC7B;;EAEA;EACA,SAAS4I,YAAYA,CAAA,EAAG;IACtBjG,OAAO,CAACE,GAAG,CAAC,UAAU,CAAC;;IAEvB;IACA4C,WAAW,CAAC,CAAC;;IAEb;IACArG,MAAM,GAAG,IAAI;;IAEb;IACA,IAAI,CAACiD,mBAAmB,CAAC,CAAC,EAAE;MAC1BM,OAAO,CAACC,KAAK,CAAC,WAAW,CAAC;MAC1B;IACF;;IAEA;IACA/D,YAAY,GAAG,CAAC;IAChBS,WAAW,CAAC2J,KAAK,CAAC,CAAC;;IAEnB;IACArJ,cAAc,CAAC,CAAC;;IAEhB;IACAmF,gBAAgB,CAAC,CAAC;;IAElB;IACAW,mBAAmB,CAAC,CAAC;;IAErB;IACA9G,UAAU,GAAGsD,WAAW,CAACC,cAAc,EAAErD,KAAK,CAAC;EACjD;;EAEA;EACA8J,YAAY,CAAC,CAAC;;EAEd;EACApD,qBAAqB,CAAC,CAAC;;EAEvB;EACA,OAAO;IACL0D,KAAK,EAAEN,YAAY;IACnBO,IAAI,EAAE,SAAAA,CAAA,EAAW;MAAE1D,WAAW,CAAC,CAAC;IAAE;EACpC,CAAC;AACH;;AAEA;AACAnH,MAAM,CAAC8K,YAAY,GAAG/J,kBAAkB,CAAC,CAAC;;AAE1C;AACA,MAAMgK,0BAA0B,GAAG/K,MAAM,CAACgL,kBAAkB;AAE5DhL,MAAM,CAACgL,kBAAkB,GAAG,UAASC,IAAI,EAAE;EACzC;EACA,IAAI,OAAOF,0BAA0B,KAAK,UAAU,EAAE;IACpDA,0BAA0B,CAACE,IAAI,CAAC;EAClC;EAEA5G,OAAO,CAACE,GAAG,CAAC,UAAU,EAAE0G,IAAI,CAAC;;EAE7B;EACA,IAAIA,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,eAAe,EAAE;IACjD;IACAjL,MAAM,CAAC8K,YAAY,CAACF,KAAK,CAAC,CAAC;EAC7B,CAAC,MAAM;IACL;IACA,IAAI5K,MAAM,CAACa,kBAAkB,CAACC,MAAM,EAAE;MACpCd,MAAM,CAAC8K,YAAY,CAACD,IAAI,CAAC,CAAC;IAC5B;EACF;AACF,CAAC;;AAED;AACA,IAAI7K,MAAM,CAACa,kBAAkB,CAACC,MAAM,EAAE;EACpCd,MAAM,CAAC8K,YAAY,CAACF,KAAK,CAAC,CAAC;AAC7B;;AAEA;AACA,MAAMM,gBAAgB,GAAIxG,IAAI,IAAK;EACjC;EACA,MAAMyG,gBAAgB,GAAG,CACvB,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EACxF,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,CAC7E;;EAED;EACA,MAAMC,QAAQ,GAAG1G,IAAI,CAAC2G,KAAK,CAAC,IAAIC,MAAM,CAAC,KAAKH,gBAAgB,CAACzB,GAAG,CAAC6B,IAAI,IAAI,IAAI,GAAGA,IAAI,CAAC,CAAC5B,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;EACpG,IAAI6B,MAAM,GAAG,EAAE;EACf,IAAIC,UAAU,GAAG,CAAC,CAAC,CAAC;EACpB,IAAIC,WAAW,GAAG,EAAE;EAEpBN,QAAQ,CAAC5G,OAAO,CAAC,CAACmH,OAAO,EAAEjF,KAAK,KAAK;IACnC;IACA,IAAI,CAACiF,OAAO,IAAI,OAAO,CAACC,IAAI,CAACD,OAAO,CAAC,EAAE;MACrCH,MAAM,IAAIG,OAAO;MACjB;IACF;;IAEA;IACA,MAAME,aAAa,GAAGV,gBAAgB,CAAC1D,QAAQ,CAACkE,OAAO,CAAC;;IAExD;IACA,IAAIhF,KAAK;IACT,QAAQ8E,UAAU;MAChB,KAAK,CAAC;QACJ9E,KAAK,GAAG,KAAK;QACb;MACF,KAAK,CAAC;QACJA,KAAK,GAAG,MAAM;QACd;MACF,KAAK,CAAC;QACJA,KAAK,GAAG,OAAO;QACf;MACF;QACEA,KAAK,GAAG,OAAO;IACnB;;IAEA;IACA,IAAIkF,aAAa,EAAE;MACjB;MACA,IAAIH,WAAW,EAAE;QACfF,MAAM,IAAI,+BAA+B7E,KAAK,KAAK+E,WAAW,SAAS;QACvEA,WAAW,GAAG,EAAE;MAClB;MACA;MACAF,MAAM,IAAI,+BAA+B7E,KAAK,KAAKgF,OAAO,SAAS;MACnE;MACAF,UAAU,GAAG,CAACA,UAAU,GAAG,CAAC,IAAI,CAAC;IACnC,CAAC,MAAM;MACL;MACAC,WAAW,IAAIC,OAAO;IACxB;EACF,CAAC,CAAC;;EAEF;EACA,IAAID,WAAW,EAAE;IACf,MAAM/E,KAAK,GAAG8E,UAAU,KAAK,CAAC,GAAG,KAAK,GAAGA,UAAU,KAAK,CAAC,GAAG,MAAM,GAAG,OAAO;IAC5ED,MAAM,IAAI,+BAA+B7E,KAAK,KAAK+E,WAAW,SAAS;EACzE;EAEA,OAAOF,MAAM;AACf,CAAC;AAED,MAAMM,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAG7M,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACa,WAAW,EAAEiM,cAAc,CAAC,GAAG9M,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACc,UAAU,EAAEiM,aAAa,CAAC,GAAG/M,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACgN,QAAQ,EAAEC,WAAW,CAAC,GAAGjN,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACkN,OAAO,EAAEC,UAAU,CAAC,GAAGnN,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAMoN,OAAO,GAAGnN,MAAM,CAAC,IAAI,CAAC;EAC5B,MAAM,CAACoN,IAAI,EAAEC,OAAO,CAAC,GAAGtN,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACuN,WAAW,EAAEC,cAAc,CAAC,GAAGxN,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACyN,kBAAkB,EAAEC,qBAAqB,CAAC,GAAG1N,QAAQ,CAAC,EAAE,CAAC;EAChE,MAAM,CAAC2N,WAAW,EAAEC,cAAc,CAAC,GAAG5N,QAAQ,CAAC,QAAQ,CAAC;EACxD,MAAM,CAAC6N,OAAO,EAAEC,UAAU,CAAC,GAAG9N,QAAQ,CAAC,MAAM,CAAC;EAC9C,MAAM,CAAC+N,eAAe,EAAEC,kBAAkB,CAAC,GAAGhO,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAMiO,kBAAkB,GAAGhO,MAAM,CAAC,IAAI,CAAC;EACvC,MAAMiO,gBAAgB,GAAGjO,MAAM,CAAC,IAAI,CAAC;EACrC,MAAMkO,mBAAmB,GAAGlO,MAAM,CAAC,IAAI,CAAC;EACxC,MAAM,CAACmO,OAAO,EAAEC,UAAU,CAAC,GAAGrO,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACsO,WAAW,EAAEC,cAAc,CAAC,GAAGvO,QAAQ,CAAC,IAAI,CAAC;;EAEpD;EACA,MAAM,CAACwO,eAAe,EAAEC,kBAAkB,CAAC,GAAGzO,QAAQ,CAAC;IACrDmB,YAAY,EAAE,CAAC;IACfF,aAAa,EAAE,EAAE;IACjBC,UAAU,EAAE,IAAI;IAChBE,KAAK,EAAE,GAAG;IACVC,aAAa,EAAE,IAAI;IACnBqN,eAAe,EAAE,KAAK;IACtBC,aAAa,EAAE,IAAI;IACnBC,aAAa,EAAE;EACjB,CAAC,CAAC;;EAEF;EACA1O,SAAS,CAAC,MAAM;IACdC,QAAQ,CAACM,mBAAmB,CAACC,SAAS,GAAG,iDAAiDP,QAAQ,CAACQ,OAAO,oBAAoB;IAE9H,OAAO,MAAM;MACX;MACA,IAAIwN,mBAAmB,CAACU,OAAO,EAAE;QAC/BtK,aAAa,CAAC4J,mBAAmB,CAACU,OAAO,CAAC;MAC5C;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA3O,SAAS,CAAC,MAAM;IACd,IAAIyN,WAAW,KAAK,cAAc,EAAE;MAClC;MACA1C,UAAU,CAAC,MAAM;QACf6D,qBAAqB,CAAC,CAAC;MACzB,CAAC,EAAE,EAAE,CAAC;IACR;EACF,CAAC,EAAE,CAACnB,WAAW,EAAEI,eAAe,CAAC,CAAC;;EAElC;EACA,MAAMgB,aAAa,GAAG,MAAO1B,IAAI,IAAK;IACpC,IAAI;MACF,MAAM2B,OAAO,GAAGC,GAAG,CAACC,eAAe,CAAC7B,IAAI,CAAC;MACzC,MAAM8B,WAAW,GAAGhP,QAAQ,CAACiP,WAAW,CAACJ,OAAO,CAAC;MACjD,MAAMK,GAAG,GAAG,MAAMF,WAAW,CAACG,OAAO;MAErCf,cAAc,CAACc,GAAG,CAAC;MACnBtC,aAAa,CAACsC,GAAG,CAACE,QAAQ,CAAC;MAC3BzC,cAAc,CAAC,CAAC,CAAC;;MAEjB;MACA,MAAM0C,qBAAqB,CAACH,GAAG,EAAE,CAAC,CAAC;;MAEnC;MACApK,OAAO,CAACE,GAAG,CAAC,aAAa,EAAEkK,GAAG,CAACE,QAAQ,CAAC;IAC1C,CAAC,CAAC,OAAOrK,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;MACjCuK,KAAK,CAAC,iBAAiB,CAAC;IAC1B;EACF,CAAC;;EAED;EACA,MAAMD,qBAAqB,GAAG,MAAAA,CAAOH,GAAG,EAAEK,OAAO,KAAK;IACpD,IAAI;MACF,MAAMC,IAAI,GAAG,MAAMN,GAAG,CAACO,OAAO,CAACF,OAAO,CAAC;MACvC,MAAMnM,WAAW,GAAG,MAAMoM,IAAI,CAACE,cAAc,CAAC,CAAC;MAC/C,MAAMC,QAAQ,GAAGH,IAAI,CAACI,WAAW,CAAC;QAAEC,KAAK,EAAE;MAAI,CAAC,CAAC;;MAEjD;MACA,MAAMC,iBAAiB,GAAG,MAAMC,eAAe,CAAC3M,WAAW,CAAC;MAE5D,IAAI0M,iBAAiB,EAAE;QACrB;QACA,MAAME,cAAc,CAAC5M,WAAW,EAAEuM,QAAQ,CAAC;MAC7C,CAAC,MAAM;QACL;QACA,MAAMM,kBAAkB,CAACT,IAAI,EAAEhC,WAAW,CAAC;MAC7C;;MAEA;MACA,IAAIA,WAAW,KAAK,cAAc,EAAE;QAClC1C,UAAU,CAAC,MAAM;UACfoF,uBAAuB,CAAC,CAAC;QAC3B,CAAC,EAAE,EAAE,CAAC;MACR;MAEA,OAAO,IAAI,CAAC,CAAC;IACf,CAAC,CAAC,OAAOnL,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;MACnCmJ,UAAU,CAAC,sBAAsB,CAAC;MAClC,OAAO,KAAK;IACd;EACF,CAAC;;EAED;EACA,MAAM6B,eAAe,GAAG,MAAO3M,WAAW,IAAK;IAC7C,MAAM+M,SAAS,GAAG/M,WAAW,CAACgN,KAAK;IACnC,IAAIC,QAAQ,GAAGF,SAAS,CAAChG,GAAG,CAACmG,IAAI,IAAIA,IAAI,CAACC,GAAG,CAAC,CAACnG,IAAI,CAAC,EAAE,CAAC;;IAEvD;IACA;IACA;IACA;IACA,MAAMoG,cAAc,GAAG,uBAAuB,CAACnE,IAAI,CAACgE,QAAQ,CAAC;IAC7D,MAAMI,qBAAqB,GAAG,oBAAoB,CAACpE,IAAI,CAACgE,QAAQ,CAAC;;IAEjE;IACA,IAAIK,eAAe,GAAG,CAAC;IACvB,IAAIC,qBAAqB,GAAG,CAAC;;IAE7B;IACA,MAAMC,OAAO,GAAG,IAAIxH,GAAG,CAAC,CAAC;IACzB+G,SAAS,CAAClL,OAAO,CAACqL,IAAI,IAAI;MACxB,MAAMO,IAAI,GAAGnK,IAAI,CAACoK,KAAK,CAACR,IAAI,CAACS,SAAS,CAAC,CAAC,CAAC,CAAC;MAC1C,IAAI,CAACH,OAAO,CAACtJ,GAAG,CAACuJ,IAAI,CAAC,EAAE;QACtBD,OAAO,CAACtH,GAAG,CAACuH,IAAI,EAAE,EAAE,CAAC;MACvB;MACAD,OAAO,CAACrH,GAAG,CAACsH,IAAI,CAAC,CAAC5K,IAAI,CAACqK,IAAI,CAAC;IAC9B,CAAC,CAAC;IAEF,MAAMU,KAAK,GAAG,CAAC,GAAGJ,OAAO,CAACK,MAAM,CAAC,CAAC,CAAC;IAEnCD,KAAK,CAAC/L,OAAO,CAACiM,IAAI,IAAI;MACpB,MAAMC,QAAQ,GAAGD,IAAI,CAAC/G,GAAG,CAACmG,IAAI,IAAIA,IAAI,CAACC,GAAG,CAAC,CAACnG,IAAI,CAAC,EAAE,CAAC;MACpD,IAAI+G,QAAQ,CAACtM,MAAM,GAAG,EAAE,EAAE6L,eAAe,EAAE;MAC3C,IAAI,MAAM,CAACrE,IAAI,CAAC8E,QAAQ,CAAC,EAAER,qBAAqB,EAAE;IACpD,CAAC,CAAC;IAEF,MAAMS,cAAc,GAAGV,eAAe,GAAGM,KAAK,CAACnM,MAAM;IACrD,MAAMwM,eAAe,GAAGV,qBAAqB,GAAGK,KAAK,CAACnM,MAAM;IAE5D,OAAO2L,cAAc,IAAIC,qBAAqB,IAAKW,cAAc,GAAG,GAAG,IAAIC,eAAe,GAAG,GAAI;EACnG,CAAC;;EAED;EACA,MAAMrB,cAAc,GAAG,MAAAA,CAAO5M,WAAW,EAAEuM,QAAQ,KAAK;IACtD,MAAMQ,SAAS,GAAG/M,WAAW,CAACgN,KAAK;;IAEnC;IACA,IAAIkB,WAAW,GAAG,4BAA4B;IAE9CnB,SAAS,CAAClL,OAAO,CAACqL,IAAI,IAAI;MACxB;MACA,MAAMiB,CAAC,GAAGjB,IAAI,CAACS,SAAS,CAAC,CAAC,CAAC;MAC3B,MAAMS,CAAC,GAAG7B,QAAQ,CAAC8B,MAAM,GAAGnB,IAAI,CAACS,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;;MAE/C;MACA,MAAMW,QAAQ,GAAGhL,IAAI,CAACiL,IAAI,CAACrB,IAAI,CAACS,SAAS,CAAC,CAAC,CAAC,GAAGT,IAAI,CAACS,SAAS,CAAC,CAAC,CAAC,GAAGT,IAAI,CAACS,SAAS,CAAC,CAAC,CAAC,GAAGT,IAAI,CAACS,SAAS,CAAC,CAAC,CAAC,CAAC;MACzG,MAAM1J,UAAU,GAAGiJ,IAAI,CAACsB,QAAQ,IAAItB,IAAI,CAACsB,QAAQ,CAACC,WAAW,CAAC,CAAC,CAAC3J,QAAQ,CAAC,MAAM,CAAC,GAAG,MAAM,GAAG,QAAQ;;MAEpG;MACA,MAAM4J,UAAU,GAAGxB,IAAI,CAACC,GAAG,CAACzE,KAAK,CAAC,EAAE,CAAC,CAAC1B,IAAI,CAAC,QAAQ,CAAC;;MAEpD;MACAkH,WAAW,IAAI;AACrB;AACA,gBAAgBC,CAAC;AACjB,eAAeC,CAAC;AAChB,qBAAqBE,QAAQ;AAC7B,uBAAuBrK,UAAU;AACjC;AACA;AACA;AACA;AACA,UAAUyK,UAAU,SAAS;IACzB,CAAC,CAAC;IAEFR,WAAW,IAAI,QAAQ;IACvBpD,UAAU,CAACoD,WAAW,CAAC;EACzB,CAAC;;EAED;EACA,MAAMS,qBAAqB,GAAGA,CAACnL,OAAO,EAAE2K,CAAC,EAAEC,CAAC,KAAK;IAC/C,MAAMQ,KAAK,GAAGpL,OAAO,CAACC,UAAU;IAChC,KAAK,IAAIrB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwM,KAAK,CAACnN,MAAM,EAAEW,CAAC,EAAE,EAAE;MACrC,MAAMN,IAAI,GAAG8M,KAAK,CAACxM,CAAC,CAAC;MACrB,IAAIN,IAAI,CAAC4B,QAAQ,KAAKC,IAAI,CAACC,SAAS,EAAE;QACpC,MAAMiL,KAAK,GAAGhQ,QAAQ,CAACiQ,WAAW,CAAC,CAAC;QACpCD,KAAK,CAACE,kBAAkB,CAACjN,IAAI,CAAC;QAC9B,MAAMkN,KAAK,GAAGH,KAAK,CAACI,cAAc,CAAC,CAAC;QACpC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACvN,MAAM,EAAEyN,CAAC,EAAE,EAAE;UACrC,MAAMxK,IAAI,GAAGsK,KAAK,CAACE,CAAC,CAAC;UACrB,IAAId,CAAC,IAAI1J,IAAI,CAACrF,GAAG,IAAI+O,CAAC,IAAI1J,IAAI,CAACyK,MAAM,IACjChB,CAAC,IAAIzJ,IAAI,CAAC0K,IAAI,IAAIjB,CAAC,IAAIzJ,IAAI,CAACpF,KAAK,EAAE;YACrC,OAAOwC,IAAI;UACb;QACF;MACF,CAAC,MAAM,IAAIA,IAAI,CAAC4B,QAAQ,KAAKC,IAAI,CAACE,YAAY,EAAE;QAC9C,MAAMwL,KAAK,GAAGV,qBAAqB,CAAC7M,IAAI,EAAEqM,CAAC,EAAEC,CAAC,CAAC;QAC/C,IAAIiB,KAAK,EAAE,OAAOA,KAAK;MACzB;IACF;IACA,OAAO,IAAI;EACb,CAAC;;EAED;EACA,MAAMC,wBAAwB,GAAIvN,IAAI,IAAK;IACzC;IACA,MAAMwN,KAAK,GAAGxN,IAAI,CAAC2G,KAAK,CAAC,iBAAiB,CAAC;IAC3C,IAAIG,MAAM,GAAG,EAAE;IACf,IAAI2G,SAAS,GAAG,IAAI;IAEpBD,KAAK,CAAC1N,OAAO,CAAC4N,IAAI,IAAI;MACpB,IAAI,CAACA,IAAI,IAAI,OAAO,CAACxG,IAAI,CAACwG,IAAI,CAAC,EAAE;QAC/B5G,MAAM,IAAI4G,IAAI;QACd;MACF;MAEA,IAAInM,IAAI,CAACoM,MAAM,CAAC,CAAC,GAAG,GAAG,EAAE;QACvB,IAAI1L,KAAK;QACT,IAAIwL,SAAS,KAAK,KAAK,EAAE;UACvBxL,KAAK,GAAG,MAAM;QAChB,CAAC,MAAM,IAAIwL,SAAS,KAAK,MAAM,EAAE;UAC/BxL,KAAK,GAAG,KAAK;QACf,CAAC,MAAM;UACLA,KAAK,GAAGV,IAAI,CAACoM,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,MAAM;QAC9C;QACAF,SAAS,GAAGxL,KAAK;QAEjB6E,MAAM,IAAI,+BAA+B7E,KAAK,KAAKyL,IAAI,SAAS;MAClE,CAAC,MAAM;QACL5G,MAAM,IAAI4G,IAAI;MAChB;IACF,CAAC,CAAC;IAEF,OAAO5G,MAAM;EACf,CAAC;;EAED;EACA,MAAMgE,kBAAkB,GAAG,MAAAA,CAAOT,IAAI,EAAE9D,IAAI,KAAK;IAC/C,IAAI;MACF,MAAMtI,WAAW,GAAG,MAAMoM,IAAI,CAACE,cAAc,CAAC,CAAC;MAC/C,MAAMS,SAAS,GAAG/M,WAAW,CAACgN,KAAK;MACnC,IAAI2C,aAAa,GAAG5C,SAAS,CAAChG,GAAG,CAACmG,IAAI,IAAIA,IAAI,CAACC,GAAG,CAAC,CAACnG,IAAI,CAAC,GAAG,CAAC;;MAE7D;MACA2I,aAAa,GAAGA,aAAa,CAACC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC3N,IAAI,CAAC,CAAC;;MAEzD;MACA,IAAI4N,gBAAgB,GAAG,EAAE;MACzB,QAAOvH,IAAI;QACT,KAAK,QAAQ;UACX;UACAuH,gBAAgB,GAAGC,gBAAgB,CAACH,aAAa,CAAC;UAClD;QACF,KAAK,QAAQ;UACX;UACAE,gBAAgB,GAAGE,oBAAoB,CAACJ,aAAa,CAAC;UACtD;QACF,KAAK,cAAc;UACjB;UACAE,gBAAgB,GAAGG,wBAAwB,CAACL,aAAa,CAAC;UAC1D;QACF;UACEE,gBAAgB,GAAGC,gBAAgB,CAACH,aAAa,CAAC;MACtD;MAEA7E,UAAU,CAAC+E,gBAAgB,CAAC;IAC9B,CAAC,CAAC,OAAOlO,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;MAClCmJ,UAAU,CAAC,sBAAsB,CAAC;IACpC;EACF,CAAC;;EAED;EACA,MAAMmF,aAAa,GAAG,MAAOnG,IAAI,IAAK;IACpC,IAAI;MACFF,UAAU,CAAC,IAAI,CAAC;MAChB,MAAM7H,IAAI,GAAG,MAAM+H,IAAI,CAAC/H,IAAI,CAAC,CAAC;MAC9B;MACA,MAAMmO,SAAS,GAAGnO,IAAI,CAAC2G,KAAK,CAAC,MAAM,CAAC,CAAC3B,GAAG,CAACoJ,SAAS,IAAI,CAAC;QACrDpO,IAAI,EAAEoO,SAAS;QACfhC,CAAC,EAAE,EAAE;QACLC,CAAC,EAAE,EAAE;QACLE,QAAQ,EAAE,EAAE;QACZ8B,UAAU,EAAE;MACd,CAAC,CAAC,CAAC;MACH9G,QAAQ,CAAC4G,SAAS,CAAC;MACnB1G,aAAa,CAAC0G,SAAS,CAACzO,MAAM,CAAC;MAC/B8H,cAAc,CAAC,CAAC,CAAC;MACjBK,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC,OAAOjI,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;MAChCiI,UAAU,CAAC,KAAK,CAAC;MACjBsC,KAAK,CAAC,eAAe,CAAC;IACxB;EACF,CAAC;;EAED;EACA,MAAMmE,gBAAgB,GAAG,MAAOjJ,CAAC,IAAK;IACpC,MAAM0C,IAAI,GAAG1C,CAAC,CAACkJ,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC9B,IAAI,CAACzG,IAAI,EAAE;IAEX,IAAIA,IAAI,CAAC1J,IAAI,KAAK,iBAAiB,EAAE;MACnC,MAAMoL,aAAa,CAAC1B,IAAI,CAAC;IAC3B,CAAC,MAAM,IAAIA,IAAI,CAAC1J,IAAI,KAAK,YAAY,EAAE;MACrC6P,aAAa,CAACnG,IAAI,CAAC;IACrB,CAAC,MAAM;MACLoC,KAAK,CAAC,cAAc,CAAC;IACvB;EACF,CAAC;;EAED;EACA,MAAMsE,wBAAwB,GAAIxR,SAAS,IAAK;IAC9C,MAAMyR,MAAM,GAAG5R,QAAQ,CAAC6R,gBAAgB,CAAC1R,SAAS,EAAE2R,UAAU,CAACC,SAAS,CAAC;IACzE,MAAMC,SAAS,GAAG,EAAE;IAEpB,OAAOJ,MAAM,CAACK,QAAQ,CAAC,CAAC,EAAE;MACxB,MAAMhP,IAAI,GAAG2O,MAAM,CAACM,WAAW;MAC/B,MAAMhP,IAAI,GAAGD,IAAI,CAAC9B,WAAW;;MAE7B;MACA,IAAI,CAAC+B,IAAI,CAACE,IAAI,CAAC,CAAC,EAAE;;MAElB;MACA,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,IAAI,CAACN,MAAM,EAAEW,CAAC,EAAE,EAAE;QACpC,IAAI;UACF,MAAMyM,KAAK,GAAGhQ,QAAQ,CAACiQ,WAAW,CAAC,CAAC;UACpCD,KAAK,CAACmC,QAAQ,CAAClP,IAAI,EAAEM,CAAC,CAAC;UACvByM,KAAK,CAACoC,MAAM,CAACnP,IAAI,EAAEM,CAAC,GAAG,CAAC,CAAC;UAEzB,MAAMsC,IAAI,GAAGmK,KAAK,CAAC1L,qBAAqB,CAAC,CAAC;UAC1C,IAAIuB,IAAI,CAACjE,KAAK,KAAK,CAAC,IAAIiE,IAAI,CAAC2J,MAAM,KAAK,CAAC,EAAE;;UAE3C;UACAwC,SAAS,CAAChO,IAAI,CAAC;YACbsL,CAAC,EAAEzJ,IAAI,CAAC0K,IAAI,GAAG1K,IAAI,CAACjE,KAAK,GAAC,CAAC;YAAG;YAC9B2N,CAAC,EAAE1J,IAAI,CAACyK,MAAM;YAAgB;YAC9B9M,IAAI,EAAEN,IAAI,CAACK,CAAC;UACd,CAAC,CAAC;QACJ,CAAC,CAAC,OAAOT,KAAK,EAAE;UACdD,OAAO,CAACwP,IAAI,CAAC,YAAY,EAAEvP,KAAK,CAAC;UACjC;QACF;MACF;IACF;;IAEA;IACA,OAAOkP,SAAS,CACbM,MAAM,CAACC,CAAC,IAAIA,CAAC,CAAC/O,IAAI,CAACJ,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC,CACjCoE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MACd;MACA,MAAMlD,KAAK,GAAGiD,CAAC,CAAC8H,CAAC,GAAG7H,CAAC,CAAC6H,CAAC;MACvB,IAAI9K,IAAI,CAACC,GAAG,CAACF,KAAK,CAAC,GAAG,CAAC,EAAE;QAAE;QACzB,OAAOA,KAAK;MACd;MACA,OAAOiD,CAAC,CAAC6H,CAAC,GAAG5H,CAAC,CAAC4H,CAAC;IAClB,CAAC,CAAC;EACN,CAAC;;EAED;EACA,MAAMkD,qBAAqB,GAAGA,CAACC,QAAQ,EAAEtS,SAAS,KAAK;IACrD;IACA,MAAM2F,qBAAqB,GAAG3F,SAAS,CAAC4F,YAAY,GAAG5F,SAAS,CAAC6F,YAAY,IAC3E,CAAC,MAAM,EAAE,QAAQ,EAAE,SAAS,CAAC,CAACC,QAAQ,CAACzH,MAAM,CAAC0H,gBAAgB,CAAC/F,SAAS,CAAC,CAACgG,SAAS,CAAC;;IAEtF;IACA,IAAIuM,eAAe;IAEnB,IAAI5M,qBAAqB,EAAE;MACzB;MACA,MAAM6M,sBAAsB,GAAGxS,SAAS,CAAC6F,YAAY;MACrD0M,eAAe,GAAGD,QAAQ,GAAIE,sBAAsB,GAAG,CAAE;;MAEzD;MACAxS,SAAS,CAACyS,QAAQ,CAAC;QACjBpS,GAAG,EAAEiE,IAAI,CAAChD,GAAG,CAAC,CAAC,EAAEiR,eAAe,CAAC;QAAE;QACnChM,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ,CAAC,MAAM;MACL;MACA,MAAMmM,gBAAgB,GAAGJ,QAAQ,GAAGtS,SAAS,CAACmE,qBAAqB,CAAC,CAAC,CAAC9D,GAAG;MACzEkS,eAAe,GAAGG,gBAAgB,GAAIrU,MAAM,CAACsI,WAAW,GAAG,CAAE;;MAE7D;MACAtI,MAAM,CAACoU,QAAQ,CAAC;QACdpS,GAAG,EAAEiE,IAAI,CAAChD,GAAG,CAAC,CAAC,EAAEiR,eAAe,CAAC;QAAE;QACnChM,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ;IAEA,OAAOgM,eAAe;EACxB,CAAC;;EAED;EACA,MAAMI,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,MAAMC,MAAM,GAAG/S,QAAQ,CAACI,aAAa,CAAC,KAAK,CAAC;IAC5C2S,MAAM,CAAC1S,EAAE,GAAG,oBAAoB;IAChC0S,MAAM,CAACzS,KAAK,CAAC0S,OAAO,GAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;IAED;IACA,IAAI,CAAChT,QAAQ,CAACC,cAAc,CAAC,yBAAyB,CAAC,EAAE;MACvD,MAAMK,KAAK,GAAGN,QAAQ,CAACI,aAAa,CAAC,OAAO,CAAC;MAC7CE,KAAK,CAACD,EAAE,GAAG,yBAAyB;MACpCC,KAAK,CAACa,WAAW,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA,OAAO;MACDnB,QAAQ,CAACiT,IAAI,CAAC5R,WAAW,CAACf,KAAK,CAAC;IAClC;IAEA,OAAOyS,MAAM;EACf,CAAC;;EAED;EACA,MAAMG,aAAa,GAAGA,CAACC,YAAY,EAAEnB,SAAS,EAAE9M,KAAK,KAAK;IACxD;IACA,MAAMkO,gBAAgB,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;;IAEjE;IACA,IAAIA,gBAAgB,CAACnN,QAAQ,CAACkN,YAAY,CAAC3P,IAAI,CAAC,EAAE;MAChD;MACA,MAAM6P,SAAS,GAAGnO,KAAK,GAAG,CAAC;MAC3B,IAAImO,SAAS,IAAIrB,SAAS,CAACpP,MAAM;MAAI;MACjCoP,SAAS,CAACqB,SAAS,CAAC,CAAC7P,IAAI,CAACJ,IAAI,CAAC,CAAC,KAAK,EAAE;MAAI;MAC3C4O,SAAS,CAACqB,SAAS,CAAC,CAAC9D,CAAC,GAAG4D,YAAY,CAAC5D,CAAC,GAAG,CAAC,EAAE;QAAE;QACjD,OAAO,IAAI;MACb;IACF;IAEA,OAAO,KAAK;EACd,CAAC;;EAED;EACA,MAAM+D,iBAAiB,GAAGA,CAACtB,SAAS,EAAEjT,YAAY,KAAK;IACrD,IAAIqK,KAAK,GAAGrK,YAAY;;IAExB;IACA,OAAOqK,KAAK,GAAG,CAAC,EAAE;MAChB,MAAMmK,IAAI,GAAGvB,SAAS,CAAC5I,KAAK,GAAG,CAAC,CAAC;MACjC,MAAMqD,OAAO,GAAGuF,SAAS,CAAC5I,KAAK,CAAC;;MAEhC;MACA,IAAI8J,aAAa,CAACK,IAAI,EAAEvB,SAAS,EAAE5I,KAAK,GAAG,CAAC,CAAC,IACzCqD,OAAO,CAAC8C,CAAC,GAAGgE,IAAI,CAAChE,CAAC,GAAG,CAAC,EAAE;QAAE;QAC5B;MACF;MAEAnG,KAAK,EAAE;IACT;IAEA,OAAOA,KAAK;EACd,CAAC;;EAED;EACA,MAAMoK,eAAe,GAAGA,CAACf,QAAQ,EAAEtS,SAAS,EAAEsT,SAAS,GAAG,GAAG,KAAK;IAChE;IACA,MAAM3N,qBAAqB,GAAG3F,SAAS,CAAC4F,YAAY,GAAG5F,SAAS,CAAC6F,YAAY,IAC3E,CAAC,MAAM,EAAE,QAAQ,EAAE,SAAS,CAAC,CAACC,QAAQ,CAACzH,MAAM,CAAC0H,gBAAgB,CAAC/F,SAAS,CAAC,CAACgG,SAAS,CAAC;IAEtF,IAAIL,qBAAqB,EAAE;MACzB;MACA,MAAMS,UAAU,GAAGpG,SAAS,CAACmG,SAAS;MACtC,MAAME,aAAa,GAAGD,UAAU,GAAGpG,SAAS,CAAC6F,YAAY;;MAEzD;MACA,MAAM0N,YAAY,GAAGnN,UAAU,GAAGpG,SAAS,CAAC6F,YAAY,GAAGyN,SAAS;MACpE,MAAME,eAAe,GAAGnN,aAAa,GAAGrG,SAAS,CAAC6F,YAAY,GAAGyN,SAAS;MAE1E,OAAOhB,QAAQ,IAAIiB,YAAY,IAAIjB,QAAQ,IAAIkB,eAAe;IAChE,CAAC,MAAM;MACL;MACA,MAAMd,gBAAgB,GAAGJ,QAAQ,GAAGtS,SAAS,CAACmE,qBAAqB,CAAC,CAAC,CAAC9D,GAAG;MACzE,MAAM+F,UAAU,GAAG/H,MAAM,CAACoI,OAAO;MACjC,MAAMJ,aAAa,GAAGD,UAAU,GAAG/H,MAAM,CAACsI,WAAW;;MAErD;MACA,MAAM4M,YAAY,GAAGnN,UAAU,GAAG/H,MAAM,CAACsI,WAAW,GAAG2M,SAAS;MAChE,MAAME,eAAe,GAAGnN,aAAa,GAAGhI,MAAM,CAACsI,WAAW,GAAG2M,SAAS;MAEtE,OAAOZ,gBAAgB,IAAIa,YAAY,IAAIb,gBAAgB,IAAIc,eAAe;IAChF;EACF,CAAC;;EAED;EACA,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAIpV,MAAM,CAACI,UAAU,CAACC,aAAa,CAAC+D,MAAM,KAAK,CAAC,EAAE;MAChD,IAAIpE,MAAM,CAACC,WAAW,GAAGD,MAAM,CAACE,UAAU,EAAE;QAC1CF,MAAM,CAACG,UAAU,CAAC,CAAC,CAAC;QACpB;MACF;MACA;IACF;;IAEA;IACAH,MAAM,CAACI,UAAU,CAACG,YAAY,GAAG,CAAC;;IAElC;IACA,MAAMyD,gBAAgB,GAAGxC,QAAQ,CAACyC,aAAa,CAAC,eAAe,CAAC;IAChE,IAAI,CAACD,gBAAgB,EAAE;IAEvB,IAAIhE,MAAM,CAAC0H,gBAAgB,CAAC1D,gBAAgB,CAAC,CAACjC,QAAQ,KAAK,QAAQ,EAAE;MACnEiC,gBAAgB,CAAClC,KAAK,CAACC,QAAQ,GAAG,UAAU;IAC9C;;IAEA;IACA,IAAIwS,MAAM,GAAG/S,QAAQ,CAACC,cAAc,CAAC,oBAAoB,CAAC;IAC1D,IAAI,CAAC8S,MAAM,EAAE;MACXA,MAAM,GAAGD,kBAAkB,CAAC,CAAC;MAC7BtQ,gBAAgB,CAACnB,WAAW,CAAC0R,MAAM,CAAC;IACtC;;IAEA;IACA,IAAIc,SAAS,GAAG7T,QAAQ,CAACC,cAAc,CAAC,uBAAuB,CAAC;IAChE,IAAI,CAAC4T,SAAS,EAAE;MACdA,SAAS,GAAG7T,QAAQ,CAACI,aAAa,CAAC,KAAK,CAAC;MACzCyT,SAAS,CAACxT,EAAE,GAAG,uBAAuB;MACtCwT,SAAS,CAACvT,KAAK,CAACC,QAAQ,GAAG,UAAU;MACrCsT,SAAS,CAACvT,KAAK,CAACI,eAAe,GAAG,sBAAsB;MACxDmT,SAAS,CAACvT,KAAK,CAACM,YAAY,GAAG,KAAK;MACpCiT,SAAS,CAACvT,KAAK,CAACwT,aAAa,GAAG,MAAM;MACtCD,SAAS,CAACvT,KAAK,CAACQ,MAAM,GAAG,KAAK;MAC9B0B,gBAAgB,CAACnB,WAAW,CAACwS,SAAS,CAAC;IACzC;;IAEA;IACA,MAAM/N,qBAAqB,GAAGtD,gBAAgB,CAACuD,YAAY,GAAGvD,gBAAgB,CAACwD,YAAY,IACzF,CAAC,MAAM,EAAE,QAAQ,EAAE,SAAS,CAAC,CAACC,QAAQ,CAACzH,MAAM,CAAC0H,gBAAgB,CAAC1D,gBAAgB,CAAC,CAAC2D,SAAS,CAAC;;IAE7F;IACA,IAAItG,UAAU,GAAG,EAAE;;IAEnB;IACA,IAAIrB,MAAM,CAACI,UAAU,CAACC,aAAa,CAAC+D,MAAM,GAAG,CAAC,EAAE;MAC9C,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG/E,MAAM,CAACI,UAAU,CAACC,aAAa,CAAC+D,MAAM,EAAEW,CAAC,EAAE,EAAE;QAC/D,MAAMiB,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAClG,MAAM,CAACI,UAAU,CAACC,aAAa,CAAC0E,CAAC,CAAC,CAACgM,CAAC,GAAG/Q,MAAM,CAACI,UAAU,CAACC,aAAa,CAAC0E,CAAC,GAAC,CAAC,CAAC,CAACgM,CAAC,CAAC;QACrG,IAAI/K,KAAK,GAAG,CAAC,EAAE;UACb3E,UAAU,GAAG2E,KAAK;UAClB;QACF;MACF;IACF;;IAEA;IACA,IAAI7E,aAAa,GAAG,CAAC,CAAC;IACtB,MAAMC,cAAc,GAAGC,UAAU,GAAG,GAAG;;IAEvC;IACA,IAAIkU,SAAS,GAAG,EAAE;IAClB,IAAIC,UAAU,GAAGnU,UAAU,GAAG,GAAG;;IAEjC;IACA,IAAIrB,MAAM,CAACI,UAAU,CAACC,aAAa,CAAC+D,MAAM,GAAG,CAAC,EAAE;MAC9C,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG/E,MAAM,CAACI,UAAU,CAACC,aAAa,CAAC+D,MAAM,EAAEW,CAAC,EAAE,EAAE;QAC/D,IAAI/E,MAAM,CAACI,UAAU,CAACC,aAAa,CAAC0E,CAAC,CAAC,CAAC+L,CAAC,KAAK9Q,MAAM,CAACI,UAAU,CAACC,aAAa,CAAC0E,CAAC,GAAC,CAAC,CAAC,CAAC+L,CAAC,EAAE;UACnF,MAAM2E,KAAK,GAAGxP,IAAI,CAACC,GAAG,CAAClG,MAAM,CAACI,UAAU,CAACC,aAAa,CAAC0E,CAAC,CAAC,CAAC+L,CAAC,GAAG9Q,MAAM,CAACI,UAAU,CAACC,aAAa,CAAC0E,CAAC,GAAC,CAAC,CAAC,CAAC+L,CAAC,CAAC;UACrG,IAAI2E,KAAK,GAAG,CAAC,IAAIA,KAAK,GAAG,EAAE,EAAE;YAC3BF,SAAS,GAAGE,KAAK;YACjB;UACF;QACF;MACF;IACF;IAEAzV,MAAM,CAACI,UAAU,CAACE,UAAU,GAAGsD,WAAW,CAAC,MAAM;MAC/C;MACA,OAAO5D,MAAM,CAACI,UAAU,CAACG,YAAY,GAAGP,MAAM,CAACI,UAAU,CAACC,aAAa,CAAC+D,MAAM,IACvE,EAAAsR,qBAAA,GAAA1V,MAAM,CAACI,UAAU,CAACC,aAAa,CAACL,MAAM,CAACI,UAAU,CAACG,YAAY,CAAC,cAAAmV,qBAAA,uBAA/DA,qBAAA,CAAiE1Q,IAAI,CAACJ,IAAI,CAAC,CAAC,MAAK,EAAE,EAAE;QAAA,IAAA8Q,qBAAA;QAC1F1V,MAAM,CAACI,UAAU,CAACG,YAAY,EAAE;MAClC;;MAEA;MACA,IAAIP,MAAM,CAACI,UAAU,CAACG,YAAY,IAAIP,MAAM,CAACI,UAAU,CAACC,aAAa,CAAC+D,MAAM,EAAE;QAC5E,IAAIpE,MAAM,CAACC,WAAW,GAAGD,MAAM,CAACE,UAAU,EAAE;UAC1CF,MAAM,CAACG,UAAU,CAAC,CAAC,CAAC;UACpBwD,aAAa,CAAC3D,MAAM,CAACI,UAAU,CAACE,UAAU,CAAC;QAC7C,CAAC,MAAM;UACLqV,cAAc,CAAC,CAAC;QAClB;QACA;MACF;MAEA,MAAMC,GAAG,GAAG5V,MAAM,CAACI,UAAU,CAACC,aAAa,CAACL,MAAM,CAACI,UAAU,CAACG,YAAY,CAAC;MAC3EgU,MAAM,GAAG/S,QAAQ,CAACC,cAAc,CAAC,oBAAoB,CAAC;MACtD4T,SAAS,GAAG7T,QAAQ,CAACC,cAAc,CAAC,uBAAuB,CAAC;MAE5D,IAAI8S,MAAM,IAAIc,SAAS,EAAE;QACvB,MAAMQ,WAAW,GAAG7R,gBAAgB,CAAC8B,qBAAqB,CAAC,CAAC;QAE5D,MAAMgQ,SAAS,GAAGF,GAAG,CAAC9E,CAAC,GAAG+E,WAAW,CAAC9D,IAAI;QAC1C,MAAMgE,SAAS,GAAGH,GAAG,CAAC7E,CAAC,GAAG8E,WAAW,CAAC7T,GAAG,GAAGgC,gBAAgB,CAAC8D,SAAS;QAEtEyM,MAAM,CAACzS,KAAK,CAACiQ,IAAI,GAAG,GAAG+D,SAAS,IAAI;QACpCvB,MAAM,CAACzS,KAAK,CAACE,GAAG,GAAG,GAAG+T,SAAS,GAAG/R,gBAAgB,CAAC8D,SAAS,IAAI;QAEhEuN,SAAS,CAACvT,KAAK,CAACiQ,IAAI,GAAG,GAAG+D,SAAS,GAAGP,SAAS,GAAC,CAAC,IAAI;QACrDF,SAAS,CAACvT,KAAK,CAACE,GAAG,GAAG,GAAG+T,SAAS,GAAG/R,gBAAgB,CAAC8D,SAAS,GAAG0N,UAAU,IAAI;QAChFH,SAAS,CAACvT,KAAK,CAACsB,KAAK,GAAG,GAAGmS,SAAS,IAAI;QACxCF,SAAS,CAACvT,KAAK,CAACkP,MAAM,GAAG,GAAGwE,UAAU,IAAI;;QAE1C;QACA,MAAMQ,wBAAwB,GAAG/P,IAAI,CAACC,GAAG,CAAC6P,SAAS,GAAG5U,aAAa,CAAC,GAAGC,cAAc;QAErF,IAAI,CAAC4U,wBAAwB,EAAE;UAC7B,IAAIC,WAAW,GAAG,KAAK;UACvB,IAAIC,YAAY,GAAG,CAAC;UAEpB,IAAI5O,qBAAqB,EAAE;YACzB,MAAMS,UAAU,GAAG/D,gBAAgB,CAAC8D,SAAS;YAC7C,MAAME,aAAa,GAAGD,UAAU,GAAG/D,gBAAgB,CAACwD,YAAY;YAEhE,IAAIuO,SAAS,GAAG/N,aAAa,GAAG3G,UAAU,EAAE;cAC1C4U,WAAW,GAAG,IAAI;cAClBC,YAAY,GAAG7U,UAAU,GAAG,CAAC;YAC/B,CAAC,MAAM,IAAI0U,SAAS,GAAGhO,UAAU,GAAG1G,UAAU,EAAE;cAC9C4U,WAAW,GAAG,IAAI;cAClBC,YAAY,GAAG,CAAC7U,UAAU,GAAG,CAAC;YAChC;YAEA,IAAI4U,WAAW,EAAE;cACfjS,gBAAgB,CAACiE,QAAQ,CAAC;gBACxBjG,GAAG,EAAEkU,YAAY;gBACjBhO,QAAQ,EAAE;cACZ,CAAC,CAAC;cACF/G,aAAa,GAAG4U,SAAS;YAC3B;UACF,CAAC,MAAM;YACL,MAAMI,SAAS,GAAGP,GAAG,CAAC7E,CAAC;YACvB,MAAMhJ,UAAU,GAAG/H,MAAM,CAACoI,OAAO;YACjC,MAAMJ,aAAa,GAAGD,UAAU,GAAG/H,MAAM,CAACsI,WAAW;YAErD,IAAI6N,SAAS,GAAGnO,aAAa,GAAG3G,UAAU,EAAE;cAC1C4U,WAAW,GAAG,IAAI;cAClBC,YAAY,GAAG7U,UAAU,GAAG,CAAC;YAC/B,CAAC,MAAM,IAAI8U,SAAS,GAAGpO,UAAU,GAAG1G,UAAU,EAAE;cAC9C4U,WAAW,GAAG,IAAI;cAClBC,YAAY,GAAG,CAAC7U,UAAU,GAAG,CAAC;YAChC;YAEA,IAAI4U,WAAW,EAAE;cACfjW,MAAM,CAACiI,QAAQ,CAAC;gBACdjG,GAAG,EAAEkU,YAAY;gBACjBhO,QAAQ,EAAE;cACZ,CAAC,CAAC;cACF/G,aAAa,GAAGgV,SAAS;YAC3B;UACF;QACF;MACF;MAEAnW,MAAM,CAACI,UAAU,CAACG,YAAY,EAAE;IAElC,CAAC,EAAEP,MAAM,CAACI,UAAU,CAACI,KAAK,CAAC;;IAE3B;IACAR,MAAM,CAACI,UAAU,CAACQ,OAAO,GAAG,MAAM;MAChC;MACA,MAAMyU,SAAS,GAAG7T,QAAQ,CAACC,cAAc,CAAC,uBAAuB,CAAC;MAClE,IAAI4T,SAAS,EAAE;QACbA,SAAS,CAAC3T,MAAM,CAAC,CAAC;MACpB;;MAEA;MACA,MAAM6S,MAAM,GAAG/S,QAAQ,CAACC,cAAc,CAAC,oBAAoB,CAAC;MAC5D,IAAI8S,MAAM,EAAE;QACVA,MAAM,CAAC7S,MAAM,CAAC,CAAC;MACjB;IACF,CAAC;EACH,CAAC;;EAED;EACA,MAAMiU,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAI3V,MAAM,CAACI,UAAU,CAACE,UAAU,EAAE;MAChCqD,aAAa,CAAC3D,MAAM,CAACI,UAAU,CAACE,UAAU,CAAC;MAC3CN,MAAM,CAACI,UAAU,CAACE,UAAU,GAAG,IAAI;;MAEnC;MACA,IAAIN,MAAM,CAACI,UAAU,CAACQ,OAAO,EAAE;QAC7BZ,MAAM,CAACI,UAAU,CAACQ,OAAO,CAAC,CAAC;MAC7B;IACF;EACF,CAAC;;EAED;EACA,MAAMwV,oBAAoB,GAAGA,CAAA,KAAM;IACjC;IACAT,cAAc,CAAC,CAAC;;IAEhB;IACA3V,MAAM,CAACI,UAAU,CAACO,cAAc,GAAG,KAAK;;IAExC;IACA,MAAM6M,OAAO,GAAGhM,QAAQ,CAACyC,aAAa,CAAC,eAAe,CAAC;IACvD,IAAI,CAACuJ,OAAO,EAAE;;IAEd;IACA,IAAIA,OAAO,CAAC4G,QAAQ,EAAE;MACpB5G,OAAO,CAAC4G,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;IACxB;;IAEA;IACA,IAAIpU,MAAM,CAAC0H,gBAAgB,CAAC8F,OAAO,CAAC,CAACzL,QAAQ,KAAK,QAAQ,EAAE;MAC1DyL,OAAO,CAAC1L,KAAK,CAACC,QAAQ,GAAG,UAAU;IACrC;;IAEA;IACA/B,MAAM,CAACI,UAAU,CAACC,aAAa,GAAG8S,wBAAwB,CAAC3F,OAAO,CAAC;;IAEnE;IACA,IAAIxN,MAAM,CAACI,UAAU,CAACC,aAAa,CAAC+D,MAAM,KAAK,CAAC,EAAE;MAChD,IAAInE,WAAW,GAAGC,UAAU,IAAI,CAACF,MAAM,CAACI,UAAU,CAACO,cAAc,EAAE;QACjEX,MAAM,CAACI,UAAU,CAACO,cAAc,GAAG,IAAI;QACvCR,UAAU,CAAC,CAAC,CAAC;QACb;MACF;MACA;IACF;;IAEA;IACAiV,eAAe,CAAC,CAAC;EACnB,CAAC;;EAED;EACA,MAAMiB,uBAAuB,GAAG,MAAOtM,CAAC,IAAK;IAC3C,MAAMuM,OAAO,GAAGvM,CAAC,CAACkJ,MAAM,CAAC9P,KAAK;;IAE9B;IACAwS,cAAc,CAAC,CAAC;IAChB,IAAI3V,MAAM,CAAC8K,YAAY,EAAE;MACvB9K,MAAM,CAAC8K,YAAY,CAACD,IAAI,CAAC,CAAC;IAC5B;;IAEA;IACA0L,UAAU,CAAC,CAAC;;IAEZ;IACAvJ,cAAc,CAACsJ,OAAO,CAAC;;IAEvB;IACA,IAAI5I,WAAW,IAAIzN,WAAW,GAAG,CAAC,EAAE;MAClC,IAAI;QACF,MAAM8O,IAAI,GAAG,MAAMrB,WAAW,CAACsB,OAAO,CAAC/O,WAAW,CAAC;QACnD,MAAM0C,WAAW,GAAG,MAAMoM,IAAI,CAACE,cAAc,CAAC,CAAC;QAC/C,MAAMS,SAAS,GAAG/M,WAAW,CAACgN,KAAK;QACnC,IAAI2C,aAAa,GAAG5C,SAAS,CAAChG,GAAG,CAACmG,IAAI,IAAIA,IAAI,CAACC,GAAG,CAAC,CAACnG,IAAI,CAAC,GAAG,CAAC;QAC7D2I,aAAa,GAAGA,aAAa,CAACC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC3N,IAAI,CAAC,CAAC;QAEzD,IAAI4N,gBAAgB,GAAG,EAAE;;QAEzB;QACA,QAAO8D,OAAO;UACZ,KAAK,cAAc;YACjB9D,gBAAgB,GAAGG,wBAAwB,CAACL,aAAa,CAAC;YAC1D;UACF,KAAK,QAAQ;YACXE,gBAAgB,GAAGE,oBAAoB,CAACJ,aAAa,CAAC;YACtD;UACF,KAAK,aAAa;YAChBE,gBAAgB,GAAGC,gBAAgB,CAACH,aAAa,CAAC;YAClD;UACF,KAAK,QAAQ;YACXE,gBAAgB,GAAGC,gBAAgB,CAACH,aAAa,CAAC;YAClD;UACF;YACEE,gBAAgB,GAAGC,gBAAgB,CAACH,aAAa,CAAC;QACtD;QAEA,MAAMkE,WAAW,GAAGhV,QAAQ,CAACyC,aAAa,CAAC,eAAe,CAAC;QAC3D,IAAIuS,WAAW,EAAE;UACfA,WAAW,CAAC7T,WAAW,GAAG,EAAE;UAC5B6T,WAAW,CAACC,SAAS,GAAGjE,gBAAgB;;UAExC;UACAxS,MAAM,CAACoU,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;UACrB,IAAIoC,WAAW,CAACpC,QAAQ,EAAE;YACxBoC,WAAW,CAACpC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;UAC5B;;UAEA;UACA,IAAIkC,OAAO,KAAK,aAAa,EAAE;YAC7BjM,UAAU,CAAC+L,oBAAoB,EAAE,EAAE,CAAC;UACtC,CAAC,MAAM,IAAIE,OAAO,KAAK,cAAc,EAAE;YACrCjM,UAAU,CAAC6D,qBAAqB,EAAE,EAAE,CAAC;UACvC,CAAC,MAAM,IAAIoI,OAAO,KAAK,QAAQ,EAAE;YAC/BjM,UAAU,CAAC,MAAM;cACf,IAAIrK,MAAM,CAAC8K,YAAY,EAAE;gBACvB9K,MAAM,CAAC8K,YAAY,CAACF,KAAK,CAAC,CAAC;cAC7B;YACF,CAAC,EAAE,EAAE,CAAC;UACR;QACF;MACF,CAAC,CAAC,OAAOtG,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;MACpC;IACF;EACF,CAAC;;EAED;EACA,MAAMiS,UAAU,GAAGA,CAAA,KAAM;IACvB;IACA,MAAMG,UAAU,GAAGlV,QAAQ,CAACiH,gBAAgB,CAC1C,6FACF,CAAC;IACDiO,UAAU,CAAClS,OAAO,CAACmS,EAAE,IAAIA,EAAE,CAACjV,MAAM,CAAC,CAAC,CAAC;;IAErC;IACA,MAAM8U,WAAW,GAAGhV,QAAQ,CAACyC,aAAa,CAAC,eAAe,CAAC;IAC3D,IAAIuS,WAAW,EAAE;MACf;MACA,MAAMI,YAAY,GAAGJ,WAAW,CAACK,SAAS,CAAC,KAAK,CAAC;MACjDD,YAAY,CAACH,SAAS,GAAGD,WAAW,CAACC,SAAS;MAC9CD,WAAW,CAAC/Q,UAAU,CAACC,YAAY,CAACkR,YAAY,EAAEJ,WAAW,CAAC;IAChE;;IAEA;IACA,MAAMM,UAAU,GAAGtV,QAAQ,CAACiH,gBAAgB,CAAC,gBAAgB,CAAC;IAC9DqO,UAAU,CAACtS,OAAO,CAACsO,SAAS,IAAI;MAC9B;MACA,MAAMiE,YAAY,GAAGvV,QAAQ,CAACI,aAAa,CAAC,GAAG,CAAC;MAChDmV,YAAY,CAAC7R,SAAS,GAAG,eAAe;MACxC6R,YAAY,CAACN,SAAS,GAAG3D,SAAS,CAAC2D,SAAS,CACzClE,OAAO,CAAC,2BAA2B,EAAE,EAAE,CAAC,CACxCA,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CACxBA,OAAO,CAAC,6BAA6B,EAAE,EAAE,CAAC,CAC1CA,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;;MAE3B;MACAwE,YAAY,CAACC,eAAe,CAAC,aAAa,CAAC;MAC3CD,YAAY,CAACC,eAAe,CAAC,OAAO,CAAC;MAErC,IAAIlE,SAAS,CAACrN,UAAU,EAAE;QACxBqN,SAAS,CAACrN,UAAU,CAACC,YAAY,CAACqR,YAAY,EAAEjE,SAAS,CAAC;MAC5D;IACF,CAAC,CAAC;;IAEF;IACA6C,cAAc,CAAC,CAAC;;IAEhB;IACA,MAAMpU,MAAM,GAAGC,QAAQ,CAACC,cAAc,CAAC,qBAAqB,CAAC;IAC7D,IAAIF,MAAM,EAAEA,MAAM,CAACG,MAAM,CAAC,CAAC;EAC7B,CAAC;EAED,MAAMuV,gBAAgB,GAAGA,CAAA,KAAM;IAC7BjX,MAAM,CAACI,UAAU,CAACM,WAAW,GAAG,IAAI;IACpC;EACF,CAAC;EAED,MAAMwW,oBAAoB,GAAGA,CAACC,KAAK,GAAG,KAAK,KAAK;IAC9C;EAAA,CACD;;EAED;EACA,MAAMC,eAAe,GAAIrN,CAAC,IAAK;IAC7B,IAAIgD,WAAW,KAAK,cAAc,EAAE;;IAEpC;IACAvL,QAAQ,CAACiH,gBAAgB,CAAC,iBAAiB,CAAC,CAACjE,OAAO,CAACmS,EAAE,IAAIA,EAAE,CAACjV,MAAM,CAAC,CAAC,CAAC;IAEvE,MAAM2V,WAAW,GAAG7V,QAAQ,CAAC8V,gBAAgB,CAACvN,CAAC,CAACwN,OAAO,EAAExN,CAAC,CAACyN,OAAO,CAAC;IAEnE,IAAIH,WAAW,KACXA,WAAW,CAACI,SAAS,CAACC,QAAQ,CAAC,eAAe,CAAC,IAC/CL,WAAW,CAACM,OAAO,KAAK,GAAG,IAC3BN,WAAW,CAACM,OAAO,KAAK,MAAM,CAAC,EAAE;MAEnC,MAAMC,eAAe,GAAGP,WAAW,CAACQ,OAAO,CAAC,gBAAgB,CAAC;MAC7D,IAAI,CAACD,eAAe,EAAE;;MAEtB;MACA,MAAMhO,QAAQ,GAAG0H,qBAAqB,CAACsG,eAAe,EAAE7N,CAAC,CAACwN,OAAO,EAAExN,CAAC,CAACyN,OAAO,CAAC;MAC7E,IAAI,CAAC5N,QAAQ,EAAE;;MAEf;MACA,MAAM4H,KAAK,GAAGhQ,QAAQ,CAACiQ,WAAW,CAAC,CAAC;MACpCD,KAAK,CAACE,kBAAkB,CAAC9H,QAAQ,CAAC;MAClC,MAAM+H,KAAK,GAAGH,KAAK,CAACI,cAAc,CAAC,CAAC;;MAEpC;MACA,IAAIkG,UAAU,GAAG,IAAI;MACrB,KAAK,IAAI/S,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4M,KAAK,CAACvN,MAAM,EAAEW,CAAC,EAAE,EAAE;QACrC,MAAMsC,IAAI,GAAGsK,KAAK,CAAC5M,CAAC,CAAC;QACrB,IAAIgF,CAAC,CAACyN,OAAO,IAAInQ,IAAI,CAACrF,GAAG,IAAI+H,CAAC,CAACyN,OAAO,IAAInQ,IAAI,CAACyK,MAAM,EAAE;UACrDgG,UAAU,GAAGzQ,IAAI;UACjB;QACF;MACF;MAEA,IAAIyQ,UAAU,EAAE;QACd;QACA,MAAMC,aAAa,GAAGvW,QAAQ,CAACI,aAAa,CAAC,KAAK,CAAC;QACnDmW,aAAa,CAAC7S,SAAS,GAAG,gCAAgC;;QAE1D;QACA,MAAM8S,aAAa,GAAGJ,eAAe,CAAC9R,qBAAqB,CAAC,CAAC;QAC7D,MAAM9D,GAAG,GAAG8V,UAAU,CAAC9V,GAAG,GAAGgW,aAAa,CAAChW,GAAG;QAC9C,MAAM+P,IAAI,GAAG+F,UAAU,CAAC/F,IAAI,GAAGiG,aAAa,CAACjG,IAAI;;QAEjD;QACAgG,aAAa,CAACjW,KAAK,CAACC,QAAQ,GAAG,UAAU;QACzCgW,aAAa,CAACjW,KAAK,CAACiQ,IAAI,GAAG,GAAGA,IAAI,IAAI;QACtCgG,aAAa,CAACjW,KAAK,CAACE,GAAG,GAAG,GAAGA,GAAG,IAAI;QACpC+V,aAAa,CAACjW,KAAK,CAACsB,KAAK,GAAG,GAAG0U,UAAU,CAAC1U,KAAK,IAAI;QACnD2U,aAAa,CAACjW,KAAK,CAACkP,MAAM,GAAG,GAAG8G,UAAU,CAAC9G,MAAM,IAAI;QACrD+G,aAAa,CAACjW,KAAK,CAACwT,aAAa,GAAG,MAAM;QAC1CyC,aAAa,CAACjW,KAAK,CAACI,eAAe,GAAG,wBAAwB;QAC9D6V,aAAa,CAACjW,KAAK,CAACM,YAAY,GAAG,KAAK;QACxC2V,aAAa,CAACjW,KAAK,CAACO,SAAS,GAAG,gCAAgC;QAChE0V,aAAa,CAACjW,KAAK,CAACQ,MAAM,GAAG,GAAG;QAChCyV,aAAa,CAACjW,KAAK,CAACmW,UAAU,GAAG,eAAe;;QAEhD;QACEL,eAAe,CAAC9V,KAAK,CAACC,QAAQ,GAAG,UAAU;QAC7C6V,eAAe,CAAC/U,WAAW,CAACkV,aAAa,CAAC;MAC5C;IACF;EACF,CAAC;;EAED;EACA,MAAMG,kBAAkB,GAAGA,CAAA,KAAM;IAC/B1W,QAAQ,CAACiH,gBAAgB,CAAC,iBAAiB,CAAC,CAACjE,OAAO,CAACmS,EAAE,IAAIA,EAAE,CAACjV,MAAM,CAAC,CAAC,CAAC;EACzE,CAAC;;EAED;EACA,MAAMyW,mBAAmB,GAAGA,CAAA,KAAM;IAChC,MAAMrW,KAAK,GAAGN,QAAQ,CAACI,aAAa,CAAC,OAAO,CAAC;IAC7CE,KAAK,CAACa,WAAW,GAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDnB,QAAQ,CAACiT,IAAI,CAAC5R,WAAW,CAACf,KAAK,CAAC;EAClC,CAAC;;EAED;EACAxC,SAAS,CAAC,MAAM;IACd6Y,mBAAmB,CAAC,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMjK,qBAAqB,GAAGA,CAAA,KAAM;IAClC;IACA7D,UAAU,CAAC,MAAM;MACfoF,uBAAuB,CAAC,CAAC;;MAEzB;MACA,MAAM+G,WAAW,GAAGhV,QAAQ,CAACyC,aAAa,CAAC,eAAe,CAAC;MAC3D,IAAIuS,WAAW,EAAE;QACf,KAAKA,WAAW,CAAC4B,YAAY;;QAE7B;QACA,MAAMC,SAAS,GAAG,IAAIC,UAAU,CAAC,WAAW,EAAE;UAC5Cf,OAAO,EAAEvX,MAAM,CAACuY,UAAU,GAAG,CAAC;UAC9Bf,OAAO,EAAExX,MAAM,CAACsI,WAAW,GAAG,CAAC;UAC/BkQ,OAAO,EAAE;QACX,CAAC,CAAC;QACFhC,WAAW,CAACiC,aAAa,CAACJ,SAAS,CAAC;MACtC;IACF,CAAC,EAAE,EAAE,CAAC;EACR,CAAC;;EAED;EACA,MAAMK,WAAW,GAAIC,KAAK,IAAK;IAC7B3Y,MAAM,CAACI,UAAU,CAACI,KAAK,GAAGyF,IAAI,CAAChD,GAAG,CAAC,GAAG,EAAEjD,MAAM,CAACI,UAAU,CAACI,KAAK,GAAGmY,KAAK,CAAC;IACxE9K,kBAAkB,CAACkH,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEvU,KAAK,EAAER,MAAM,CAACI,UAAU,CAACI;IAAM,CAAC,CAAC,CAAC;IAEzE,IAAIR,MAAM,CAACI,UAAU,CAACE,UAAU,EAAE;MAChCqV,cAAc,CAAC,CAAC;MAChBP,eAAe,CAAC,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAMjV,UAAU,GAAG,MAAOwY,KAAK,IAAK;IAClC,MAAMC,OAAO,GAAG3Y,WAAW,GAAG0Y,KAAK;IAEnC,IAAIC,OAAO,GAAG,CAAC,IAAIA,OAAO,GAAG1Y,UAAU,EAAE;IAEzC,MAAM2Y,cAAc,GAAG9L,WAAW,KAAK,aAAa,IAAI/M,MAAM,CAACI,UAAU,CAACE,UAAU;IACpF,MAAMwY,gBAAgB,GAAG/L,WAAW,KAAK,QAAQ,IAAI/M,MAAM,CAACa,kBAAkB,CAACC,MAAM;;IAErF;IACA,IAAI+X,cAAc,EAAE;MAClBlV,aAAa,CAAC3D,MAAM,CAACI,UAAU,CAACE,UAAU,CAAC;MAC3CN,MAAM,CAACI,UAAU,CAACE,UAAU,GAAG,IAAI;IACrC;IAEA,IAAIwY,gBAAgB,IAAI9Y,MAAM,CAAC8K,YAAY,EAAE;MAC3C9K,MAAM,CAAC8K,YAAY,CAACD,IAAI,CAAC,CAAC;IAC5B;;IAEA;IACAqB,cAAc,CAAC0M,OAAO,CAAC;IAEvB,IAAI;MACF;MACA,MAAM7J,IAAI,GAAG,MAAMrB,WAAW,CAACsB,OAAO,CAAC4J,OAAO,CAAC;MAC/C,MAAMjW,WAAW,GAAG,MAAMoM,IAAI,CAACE,cAAc,CAAC,CAAC;MAC/C,MAAMS,SAAS,GAAG/M,WAAW,CAACgN,KAAK;MACnC,IAAI2C,aAAa,GAAG5C,SAAS,CAAChG,GAAG,CAACmG,IAAI,IAAIA,IAAI,CAACC,GAAG,CAAC,CAACnG,IAAI,CAAC,GAAG,CAAC;MAC7D2I,aAAa,GAAGA,aAAa,CAACC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC3N,IAAI,CAAC,CAAC;;MAEzD;MACA,IAAI4N,gBAAgB,GAAG,EAAE;MACzB,QAAOzF,WAAW;QAChB,KAAK,cAAc;UACjByF,gBAAgB,GAAGG,wBAAwB,CAACL,aAAa,CAAC;UAC1D;QACF,KAAK,QAAQ;UACXE,gBAAgB,GAAGE,oBAAoB,CAACJ,aAAa,CAAC;UACtD;QACF,KAAK,aAAa;UAChBE,gBAAgB,GAAGC,gBAAgB,CAACH,aAAa,CAAC;UAClD;QACF,KAAK,QAAQ;UACXE,gBAAgB,GAAGC,gBAAgB,CAACH,aAAa,CAAC;UAClD;QACF;UACEE,gBAAgB,GAAGC,gBAAgB,CAACH,aAAa,CAAC;MACtD;;MAEA;MACA,MAAMkE,WAAW,GAAGhV,QAAQ,CAACyC,aAAa,CAAC,eAAe,CAAC;MAC3D,IAAIuS,WAAW,EAAE;QACfA,WAAW,CAAC7T,WAAW,GAAG,EAAE;QAC5B6T,WAAW,CAACC,SAAS,GAAGjE,gBAAgB;;QAExC;QACAxS,MAAM,CAACoU,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;QACrB,IAAIoC,WAAW,CAACpC,QAAQ,EAAE;UACxBoC,WAAW,CAACpC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;QAC5B;;QAEA;QACA,IAAIyE,cAAc,EAAE;UAClBxO,UAAU,CAAC+L,oBAAoB,EAAE,EAAE,CAAC;QACtC,CAAC,MAAM,IAAI0C,gBAAgB,IAAI9Y,MAAM,CAAC8K,YAAY,EAAE;UAClDT,UAAU,CAAC,MAAM;YACfrK,MAAM,CAAC8K,YAAY,CAACF,KAAK,CAAC,CAAC;UAC7B,CAAC,EAAE,EAAE,CAAC;QACR;MACF;IACF,CAAC,CAAC,OAAOtG,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,OAAO,EAAEA,KAAK,CAAC;IAC/B;EACF,CAAC;;EAED;EACA,MAAMmL,uBAAuB,GAAGA,CAAA,KAAM;IACpC,IAAI1C,WAAW,KAAK,cAAc,EAAE;IAEpC,MAAMyJ,WAAW,GAAGhV,QAAQ,CAACyC,aAAa,CAAC,eAAe,CAAC;IAC3D,IAAI,CAACuS,WAAW,EAAE;;IAElB;IACAA,WAAW,CAACuC,mBAAmB,CAAC,WAAW,EAAE3B,eAAe,CAAC;IAC7DZ,WAAW,CAACuC,mBAAmB,CAAC,YAAY,EAAEb,kBAAkB,CAAC;;IAEjE;IACA1B,WAAW,CAAChT,gBAAgB,CAAC,WAAW,EAAE4T,eAAe,CAAC;IAC1DZ,WAAW,CAAChT,gBAAgB,CAAC,YAAY,EAAE0U,kBAAkB,CAAC;;IAE9D;IACA1W,QAAQ,CAACiH,gBAAgB,CAAC,gBAAgB,CAAC,CAACjE,OAAO,CAACuP,CAAC,IAAI;MACvDA,CAAC,CAACjS,KAAK,CAACC,QAAQ,GAAG,UAAU;MAC7BgS,CAAC,CAACjS,KAAK,CAACT,UAAU,GAAG,KAAK;IAC5B,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMoR,gBAAgB,GAAI/N,IAAI,IAAK;IACjC;IACA,MAAMoS,UAAU,GAAGpS,IAAI,CAAC2G,KAAK,CAAC,wBAAwB,CAAC,CAACyI,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACnP,IAAI,CAAC,CAAC,CAAC;;IAE7E;IACA,IAAIiM,WAAW,GAAG,2BAA2B;IAE7CiG,UAAU,CAACtS,OAAO,CAACsO,SAAS,IAAI;MAC9BjC,WAAW,IAAI,4BAA4BiC,SAAS,MAAM;IAC5D,CAAC,CAAC;IAEFjC,WAAW,IAAI,QAAQ;IACvB,OAAOA,WAAW;EACpB,CAAC;;EAED;EACA,MAAM6B,oBAAoB,GAAIhO,IAAI,IAAK;IACrC,MAAMoS,UAAU,GAAGpS,IAAI,CAAC2G,KAAK,CAAC,wBAAwB,CAAC,CAACyI,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACnP,IAAI,CAAC,CAAC,CAAC;IAE7E,IAAIiM,WAAW,GAAG,2BAA2B;IAE7CiG,UAAU,CAACtS,OAAO,CAACsO,SAAS,IAAI;MAC9B;MACA,MAAMkG,cAAc,GAAGlG,SAAS,CAC7BP,OAAO,CAAC,2BAA2B,EAAE,EAAE,CAAC,CACxCA,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;MAE3B,MAAM0G,eAAe,GAAGhH,wBAAwB,CAAC+G,cAAc,CAAC;MAChEnI,WAAW,IAAI,4BAA4BoI,eAAe,MAAM;IAClE,CAAC,CAAC;IAEFpI,WAAW,IAAI,QAAQ;IACvB,OAAOA,WAAW;EACpB,CAAC;;EAED;EACA,MAAM8B,wBAAwB,GAAIjO,IAAI,IAAK;IACzC,MAAMoS,UAAU,GAAGpS,IAAI,CAAC2G,KAAK,CAAC,wBAAwB,CAAC,CAACyI,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACnP,IAAI,CAAC,CAAC,CAAC;IAE7E,IAAIiM,WAAW,GAAG,gDAAgD;IAElEiG,UAAU,CAACtS,OAAO,CAACsO,SAAS,IAAI;MAC9B;MACA,MAAMvC,KAAK,GAAGuC,SAAS,CAACzH,KAAK,CAAC,IAAI,CAAC,CAACyI,MAAM,CAACrD,IAAI,IAAIA,IAAI,CAAC7L,IAAI,CAAC,CAAC,CAAC;MAC/DiM,WAAW,IAAI,4FAA4F;MAE3GN,KAAK,CAAC/L,OAAO,CAAC,CAACiM,IAAI,EAAE1L,CAAC,KAAK;QACzB;QACA8L,WAAW,IAAI,mDAAmDJ,IAAI,SAAS;MACjF,CAAC,CAAC;MAEFI,WAAW,IAAI,MAAM;IACvB,CAAC,CAAC;IAEFA,WAAW,IAAI,QAAQ;IACvB,OAAOA,WAAW;EACpB,CAAC;;EAED;EACA,SAASqI,eAAeA,CAAA,EAAG;IACzB7U,OAAO,CAACE,GAAG,CAAC,aAAa,CAAC;;IAE1B;IACA,IAAI,OAAOvE,MAAM,CAACI,UAAU,KAAK,WAAW,EAAE;MAC5CJ,MAAM,CAACI,UAAU,GAAG;QAClBC,aAAa,EAAE,EAAE;QACjBC,UAAU,EAAE,IAAI;QAChBC,YAAY,EAAE,CAAC;QACfC,KAAK,EAAE;MACT,CAAC;IACH;;IAEA;IACA,IAAI,CAACR,MAAM,CAACI,UAAU,CAACC,aAAa,IAAIL,MAAM,CAACI,UAAU,CAACC,aAAa,CAAC+D,MAAM,KAAK,CAAC,EAAE;MACpFC,OAAO,CAACE,GAAG,CAAC,qBAAqB,CAAC;;MAElC;MACA4U,uBAAuB,CAAC,CAAC;IAC3B;IAEA,OAAOnZ,MAAM,CAACI,UAAU,CAACC,aAAa,IAAIL,MAAM,CAACI,UAAU,CAACC,aAAa,CAAC+D,MAAM,GAAG,CAAC;EACtF;;EAEA;EACA,SAAS+U,uBAAuBA,CAAA,EAAG;IACjC9U,OAAO,CAACE,GAAG,CAAC,aAAa,CAAC;IAE1BvE,MAAM,CAACI,UAAU,CAACC,aAAa,GAAG,EAAE;IACpC,MAAM+Y,cAAc,GAAG5X,QAAQ,CAACyC,aAAa,CAAC,eAAe,CAAC;IAC9D,IAAI,CAACmV,cAAc,EAAE;MACnB/U,OAAO,CAACC,KAAK,CAAC,SAAS,CAAC;MACxB;IACF;;IAEA;IACA,SAAS+U,gBAAgBA,CAAClT,OAAO,EAAE;MACjC,IAAIA,OAAO,CAACE,QAAQ,KAAKC,IAAI,CAACC,SAAS,EAAE;QACvC,MAAM7B,IAAI,GAAGyB,OAAO,CAACxD,WAAW;QAChC,IAAI,CAAC+B,IAAI,IAAIA,IAAI,CAACE,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;;QAEjC;QACA,MAAM4M,KAAK,GAAGhQ,QAAQ,CAACiQ,WAAW,CAAC,CAAC;;QAEpC;QACA,KAAK,IAAI1M,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,IAAI,CAACN,MAAM,EAAEW,CAAC,EAAE,EAAE;UACpC,IAAI;YACFyM,KAAK,CAACmC,QAAQ,CAACxN,OAAO,EAAEpB,CAAC,CAAC;YAC1ByM,KAAK,CAACoC,MAAM,CAACzN,OAAO,EAAEpB,CAAC,GAAG,CAAC,CAAC;YAE5B,MAAMsC,IAAI,GAAGmK,KAAK,CAAC1L,qBAAqB,CAAC,CAAC;YAC1C,IAAIuB,IAAI,CAACjE,KAAK,GAAG,CAAC,IAAIiE,IAAI,CAAC2J,MAAM,GAAG,CAAC,EAAE;cACrChR,MAAM,CAACI,UAAU,CAACC,aAAa,CAACmF,IAAI,CAAC;gBACnCR,IAAI,EAAEN,IAAI,CAACK,CAAC,CAAC;gBACb+L,CAAC,EAAEzJ,IAAI,CAAC0K,IAAI,GAAG1K,IAAI,CAACjE,KAAK,GAAC,CAAC;gBAC3B2N,CAAC,EAAE1J,IAAI,CAACrF,GAAG,GAAGqF,IAAI,CAAC2J,MAAM,GAAC,CAAC;gBAC3B7K,OAAO,EAAEA,OAAO,CAACmT;cACnB,CAAC,CAAC;YACJ;UACF,CAAC,CAAC,OAAOvP,CAAC,EAAE;YACV1F,OAAO,CAACwP,IAAI,CAAC,QAAQ,EAAE9J,CAAC,CAAC;UAC3B;QACF;MACF,CAAC,MAAM,IAAI5D,OAAO,CAACE,QAAQ,KAAKC,IAAI,CAACE,YAAY,EAAE;QACjD;QACA,KAAK,MAAM+S,KAAK,IAAIpT,OAAO,CAACC,UAAU,EAAE;UACtCiT,gBAAgB,CAACE,KAAK,CAAC;QACzB;MACF;IACF;IAEAF,gBAAgB,CAACD,cAAc,CAAC;IAChC/U,OAAO,CAACE,GAAG,CAAC,cAAc,EAAEvE,MAAM,CAACI,UAAU,CAACC,aAAa,CAAC+D,MAAM,CAAC;EACrE;EAEA,oBACExE,OAAA;IAAKsF,SAAS,EAAC,KAAK;IAAAsU,QAAA,gBAClB5Z,OAAA;MAAKsF,SAAS,EAAC,SAAS;MAAAsU,QAAA,gBACtB5Z,OAAA;QAAKsF,SAAS,EAAC,MAAM;QAAAsU,QAAA,eACnB5Z,OAAA;UAAA4Z,QAAA,EAAI;QAAQ;UAAApN,QAAA,EAAAqN,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAvN,QAAA,EAAAqN,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACd,CAAC,eACN/Z,OAAA;QAAOsF,SAAS,EAAC,YAAY;QAAAsU,QAAA,GAAC,0BAE5B,eAAA5Z,OAAA;UACEmD,IAAI,EAAC,MAAM;UACX6W,MAAM,EAAC,WAAW;UAClBC,QAAQ,EAAE7G,gBAAiB;UAC3BlR,KAAK,EAAE;YAAES,OAAO,EAAE;UAAO;QAAE;UAAA6J,QAAA,EAAAqN,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5B,CAAC;MAAA;QAAAvN,QAAA,EAAAqN,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC;IAAA;MAAAvN,QAAA,EAAAqN,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eACN/Z,OAAA;MAAKsF,SAAS,EAAC,cAAc;MAAAsU,QAAA,gBAC3B5Z,OAAA;QAAKsF,SAAS,EAAC,QAAQ;QAAAsU,QAAA,gBACrB5Z,OAAA;UAAA4Z,QAAA,EAAI;QAAQ;UAAApN,QAAA,EAAAqN,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACjB/Z,OAAA;UAAKsF,SAAS,EAAC,UAAU;UAAAsU,QAAA,gBACvB5Z,OAAA;YAAKsF,SAAS,EAAC,eAAe;YAAAsU,QAAA,eAC5B5Z,OAAA;cAAQuD,KAAK,EAAE4J,WAAY;cAAC8M,QAAQ,EAAExD,uBAAwB;cAAAmD,QAAA,gBAC5D5Z,OAAA;gBAAQuD,KAAK,EAAC,QAAQ;gBAAAqW,QAAA,EAAC;cAAI;gBAAApN,QAAA,EAAAqN,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACpC/Z,OAAA;gBAAQuD,KAAK,EAAC,QAAQ;gBAAAqW,QAAA,EAAC;cAAM;gBAAApN,QAAA,EAAAqN,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACtC/Z,OAAA;gBAAQuD,KAAK,EAAC,cAAc;gBAAAqW,QAAA,EAAC;cAAM;gBAAApN,QAAA,EAAAqN,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eAC5C/Z,OAAA;gBAAQuD,KAAK,EAAC,aAAa;gBAAAqW,QAAA,EAAC;cAAK;gBAAApN,QAAA,EAAAqN,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eAC1C/Z,OAAA;gBAAQuD,KAAK,EAAC,QAAQ;gBAAAqW,QAAA,EAAC;cAAM;gBAAApN,QAAA,EAAAqN,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAvN,QAAA,EAAAqN,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAChC;UAAC;YAAAvN,QAAA,EAAAqN,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC,eACN/Z,OAAA;YAAKsF,SAAS,EAAC,eAAe;YAAAsU,QAAA,eAC5B5Z,OAAA;cAAQuD,KAAK,EAAE8J,OAAQ;cAAC4M,QAAQ,EAAG9P,CAAC,IAAKmD,UAAU,CAACnD,CAAC,CAACkJ,MAAM,CAAC9P,KAAK,CAAE;cAAAqW,QAAA,gBAClE5Z,OAAA;gBAAQuD,KAAK,EAAC,MAAM;gBAAAqW,QAAA,EAAC;cAAK;gBAAApN,QAAA,EAAAqN,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACnC/Z,OAAA;gBAAQuD,KAAK,EAAC,MAAM;gBAAAqW,QAAA,EAAC;cAAI;gBAAApN,QAAA,EAAAqN,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eAClC/Z,OAAA;gBAAQuD,KAAK,EAAC,KAAK;gBAAAqW,QAAA,EAAC;cAAK;gBAAApN,QAAA,EAAAqN,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAvN,QAAA,EAAAqN,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC5B;UAAC;YAAAvN,QAAA,EAAAqN,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC,EACL5M,WAAW,KAAK,aAAa,iBAC5BnN,OAAA;YAAKsF,SAAS,EAAC,eAAe;YAAAsU,QAAA,gBAC5B5Z,OAAA;cAAQka,OAAO,EAAEA,CAAA,KAAMpB,WAAW,CAAC,CAAC,GAAG,CAAE;cAAAc,QAAA,EAAC;YAAC;cAAApN,QAAA,EAAAqN,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACpD/Z,OAAA;cAAA4Z,QAAA,GAAO5L,eAAe,CAACpN,KAAK,EAAC,IAAE;YAAA;cAAA4L,QAAA,EAAAqN,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eACtC/Z,OAAA;cAAQka,OAAO,EAAEA,CAAA,KAAMpB,WAAW,CAAC,GAAG,CAAE;cAAAc,QAAA,EAAC;YAAC;cAAApN,QAAA,EAAAqN,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAvN,QAAA,EAAAqN,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAChD,CACN;QAAA;UAAAvN,QAAA,EAAAqN,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC;MAAA;QAAAvN,QAAA,EAAAqN,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eACN/Z,OAAA;QAAKsF,SAAS,EAAC,cAAc;QAAAsU,QAAA,EAC1BhM,OAAO,gBACN5N,OAAA;UAAKma,uBAAuB,EAAE;YAAEC,MAAM,EAAExM;UAAQ;QAAE;UAAApB,QAAA,EAAAqN,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,gBAErD/Z,OAAA;UAAKsF,SAAS,EAAC,aAAa;UAAAsU,QAAA,eAC1B5Z,OAAA;YAAA4Z,QAAA,EAAG;UAAgB;YAAApN,QAAA,EAAAqN,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG;QAAC;UAAAvN,QAAA,EAAAqN,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpB;MACN;QAAAvN,QAAA,EAAAqN,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,EACLnM,OAAO,iBACN5N,OAAA;QAAKsF,SAAS,EAAC,aAAa;QAAAsU,QAAA,gBAC1B5Z,OAAA;UAAQsF,SAAS,EAAC,eAAe;UAAC4U,OAAO,EAAEA,CAAA,KAAM3Z,UAAU,CAAC,CAAC,CAAC,CAAE;UAAC8Z,QAAQ,EAAEha,WAAW,KAAK,CAAE;UAAAuZ,QAAA,EAAC;QAE9F;UAAApN,QAAA,EAAAqN,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACT/Z,OAAA;UAAMsF,SAAS,EAAC,WAAW;UAAAsU,QAAA,GAAC,SACxB,EAACvZ,WAAW,EAAC,mBAAO,EAACC,UAAU,EAAC,SACpC;QAAA;UAAAkM,QAAA,EAAAqN,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACP/Z,OAAA;UAAQsF,SAAS,EAAC,eAAe;UAAC4U,OAAO,EAAEA,CAAA,KAAM3Z,UAAU,CAAC,CAAC,CAAE;UAAC8Z,QAAQ,EAAEha,WAAW,KAAKC,UAAW;UAAAsZ,QAAA,EAAC;QAEtG;UAAApN,QAAA,EAAAqN,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAvN,QAAA,EAAAqN,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CACN;IAAA;MAAAvN,QAAA,EAAAqN,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAvN,QAAA,EAAAqN,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC5N,EAAA,CAnyCID,GAAG;AAAAoO,EAAA,GAAHpO,GAAG;AAqyCT,eAAeA,GAAG;AAAC,IAAAoO,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}