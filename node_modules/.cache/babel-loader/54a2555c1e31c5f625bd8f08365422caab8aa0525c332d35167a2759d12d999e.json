{"ast":null,"code":"var _jsxFileName = \"D:\\\\adhd-read-helper\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 模拟NLP词性标注功能（实际应用中建议使用专业NLP库如nlp.js或调用API）\nconst tagPartsOfSpeech = text => {\n  // 定义所有标点符号\n  const punctuationMarks = ['，', '。', '！', '？', '；', '：', '（', '）', '【', '】', '《', '》', '〈', '〉', '…', '—', '～', '·', ',', '.', '!', '?', ';', ':', '(', ')', '[', ']', '{', '}', '-', '...', '..'];\n\n  // 将文本按标点符号分割，保留标点符号\n  const segments = text.split(new RegExp(`([${punctuationMarks.map(mark => '\\\\' + mark).join('')}])`));\n  let result = '';\n  let colorIndex = 0; // 0: 红色, 1: 蓝色, 2: 黑色\n  let currentText = '';\n  segments.forEach((segment, index) => {\n    // 跳过空字符串和纯空格\n    if (!segment || /^\\s+$/.test(segment)) {\n      result += segment;\n      return;\n    }\n\n    // 检查是否是标点符号\n    const isPunctuation = punctuationMarks.includes(segment);\n\n    // 根据索引选择颜色\n    let color;\n    switch (colorIndex) {\n      case 0:\n        color = 'red';\n        break;\n      case 1:\n        color = 'blue';\n        break;\n      case 2:\n        color = 'black';\n        break;\n      default:\n        color = 'black';\n    }\n\n    // 将当前文本和标点符号放在同一个颜色块中\n    if (isPunctuation) {\n      // 如果有累积的文本，先添加文本\n      if (currentText) {\n        result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n        currentText = '';\n      }\n      // 添加标点符号\n      result += `<span class=\"highlight-word ${color}\">${segment}</span>`;\n      // 切换颜色\n      colorIndex = (colorIndex + 1) % 3;\n    } else {\n      // 累积文本\n      currentText += segment;\n    }\n  });\n\n  // 处理最后可能剩余的文本\n  if (currentText) {\n    const color = colorIndex === 0 ? 'red' : colorIndex === 1 ? 'blue' : 'black';\n    result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n  }\n  return result;\n};\nconst App = () => {\n  _s();\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const autoReadGuideRef = useRef(null);\n  const autoReadIntervalRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n    return () => {\n      // 清理自动阅读定时器\n      if (autoReadIntervalRef.current) {\n        clearInterval(autoReadIntervalRef.current);\n      }\n    };\n  }, []);\n\n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'auto-guide') {\n      startAutoReadGuide();\n    } else if (autoReadIntervalRef.current) {\n      clearInterval(autoReadIntervalRef.current);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async file => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n\n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n\n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n\n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({\n        scale: 1.0\n      });\n\n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n\n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async textContent => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n\n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n\n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n\n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    const lines = [...lineMap.values()];\n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    return hasTocKeywords || hasPageNumberPatterns || shortLineRatio > 0.7 && numberLineRatio > 0.3;\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n\n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n\n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n\n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n\n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 修改文本处理函数，确保高亮处理不会出错或减少内容\n  const processTextWithHighlight = text => {\n    // 确保有文本要处理\n    if (!text || text.trim() === '') {\n      return '';\n    }\n    try {\n      // 保存原始文本，以防处理失败\n      const originalText = text;\n\n      // 将文本按空格和标点符号分割成词\n      const words = text.split(/([\\s.,!?，。！？.!?]+)/);\n      let result = '';\n      let lastColor = null; // 记录上一个高亮颜色\n\n      // 使用更可靠的循环方式\n      for (let i = 0; i < words.length; i++) {\n        const word = words[i];\n\n        // 跳过空字符串和纯空格\n        if (!word || /^\\s+$/.test(word)) {\n          result += word;\n          continue;\n        }\n\n        // 增加高亮概率，确保大部分文本被高亮\n        if (Math.random() < 0.8) {\n          // 确保相邻高亮词颜色不同\n          let color;\n          if (lastColor === 'red') {\n            color = 'blue';\n          } else if (lastColor === 'blue') {\n            color = 'red';\n          } else {\n            // 第一次高亮时随机选择颜色\n            color = Math.random() < 0.5 ? 'red' : 'blue';\n          }\n          lastColor = color;\n\n          // 用span包装词，添加高亮样式\n          result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n        } else {\n          result += word;\n        }\n      }\n\n      // 检查处理结果是否为空，如果为空则返回原始文本\n      if (!result || result.trim() === '') {\n        console.warn('高亮处理结果为空，返回原始文本');\n        return originalText;\n      }\n      return result;\n    } catch (error) {\n      console.error('处理文本高亮时出错:', error);\n      // 出错时，返回原始文本\n      return text;\n    }\n  };\n\n  // 修改processContentPage函数\n  const processContentPage = async (page, mode) => {\n    try {\n      // 清理旧的内容和事件\n      clearAllHighlights();\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n\n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch (mode) {\n        case 'normal':\n          // 普通模式 - 简单分段显示\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'static':\n          // 静态高亮模式 - 应用词性标注和颜色高亮\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'follow-mouse':\n          // 鼠标跟随高亮模式 - 分段落但不预先高亮，由鼠标事件触发高亮\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      setContent(processedContent);\n\n      // 如果是鼠标跟随模式，添加监听器\n      if (mode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 100);\n      }\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async file => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain') {\n      handleTxtFile(file);\n    } else {\n      alert('请上传PDF或TXT文件');\n    }\n  };\n\n  // 翻页函数 - 防止自动翻页和事件冲突\n  const changePage = async delta => {\n    // 防止快速连续点击\n    if (changePage.isChanging) return;\n    changePage.isChanging = true;\n    const newPage = currentPage + delta;\n    if (newPage >= 1 && newPage <= totalPages && pdfDocument) {\n      try {\n        // 在翻页前彻底清理当前页面\n        clearAllHighlights();\n        clearAllTimersAndEvents();\n\n        // 更新页码\n        setCurrentPage(newPage);\n\n        // 根据当前阅读模式处理新页面\n        await processPdfPageImmediately(newPage, readingMode);\n      } catch (error) {\n        console.error('翻页出错:', error);\n      } finally {\n        // 允许下一次翻页\n        setTimeout(() => {\n          changePage.isChanging = false;\n        }, 200);\n      }\n    } else {\n      changePage.isChanging = false;\n    }\n  };\n\n  // 初始化翻页状态\n  changePage.isChanging = false;\n\n  // 彻底重构阅读模式切换函数，确保即时生效\n  const handleReadingModeChange = e => {\n    try {\n      const oldMode = readingMode;\n      const newMode = e.target.value;\n      console.log(`开始切换阅读模式: ${oldMode} -> ${newMode}`);\n\n      // 防止多次快速切换\n      if (window.modeChangeInProgress) {\n        console.log('切换进行中，忽略请求');\n        return;\n      }\n\n      // 设置标志位\n      window.modeChangeInProgress = true;\n\n      // 立即更新状态\n      setReadingMode(newMode);\n\n      // 同步执行模式切换，不依赖React状态更新\n      (async function executeModeSwitchImmediately() {\n        try {\n          // 1. 清理所有旧效果\n          console.log('立即清理所有旧效果...');\n\n          // 移除所有事件监听器\n          document.removeEventListener('mousemove', handleMouseMove, true);\n          document.removeEventListener('mouseleave', clearAllHighlights, true);\n          const contentArea = document.querySelector('.page-content');\n          if (contentArea) {\n            contentArea.removeEventListener('mousemove', handleMouseMove, true);\n            contentArea.removeEventListener('mouseleave', clearAllHighlights, true);\n          }\n\n          // 清除所有高亮元素\n          const highlights = document.querySelectorAll('.mouse-highlight, .line-highlight, .highlight-word, .reading-line');\n          highlights.forEach(el => {\n            if (el && el.parentNode) {\n              el.parentNode.removeChild(el);\n            }\n          });\n\n          // 清除所有定时器\n          if (window.modeChangeTimeout) {\n            clearTimeout(window.modeChangeTimeout);\n            window.modeChangeTimeout = null;\n          }\n          if (handleMouseMove.frameId) {\n            cancelAnimationFrame(handleMouseMove.frameId);\n            handleMouseMove.frameId = null;\n          }\n\n          // 2. 立即重新处理当前页面\n          if (!pdfDocument || currentPage <= 0) {\n            console.log('无PDF文档或页码无效，模式切换结束');\n            window.modeChangeInProgress = false;\n            return;\n          }\n          console.log('开始处理当前页面内容...');\n\n          // 获取当前页面内容\n          const page = await pdfDocument.getPage(currentPage);\n          const textContent = await page.getTextContent();\n          const textItems = textContent.items;\n\n          // 提取文本\n          let extractedText = textItems.map(item => item.str).join(' ');\n          extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n\n          // 根据新模式处理文本\n          let processedContent = '';\n          switch (newMode) {\n            case 'normal':\n              processedContent = formatTextToHtml(extractedText);\n              break;\n            case 'static':\n              processedContent = applyStaticHighlight(extractedText);\n              break;\n            case 'follow-mouse':\n              processedContent = formatTextForMouseFollow(extractedText);\n              break;\n            default:\n              processedContent = formatTextToHtml(extractedText);\n          }\n\n          // 3. 更新内容\n          console.log('更新页面内容...');\n          setContent(processedContent);\n\n          // 4. 特殊处理鼠标跟随模式\n          if (newMode === 'follow-mouse') {\n            // 直接更新DOM，不等待React重新渲染\n            console.log('直接应用鼠标跟随效果...');\n\n            // 等待一小段时间确保DOM更新\n            await new Promise(resolve => setTimeout(resolve, 50));\n\n            // 找到所有段落并应用样式\n            const pdfContent = document.querySelector('.pdf-content');\n            if (pdfContent) {\n              // 添加特殊类\n              pdfContent.classList.add('mouse-follow-content');\n\n              // 处理段落样式\n              const paragraphs = document.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落，应用鼠标跟随样式`);\n              paragraphs.forEach((paragraph, index) => {\n                // 设置必要的样式属性\n                paragraph.style.position = 'relative';\n                paragraph.style.lineHeight = '2';\n                paragraph.style.color = 'rgb(240, 240, 240)';\n                paragraph.dataset.index = index;\n                paragraph.dataset.follow = 'true';\n              });\n\n              // 添加鼠标事件监听器\n              const contentArea = document.querySelector('.page-content');\n              if (contentArea) {\n                // 添加监听器\n                contentArea.addEventListener('mousemove', handleMouseMove, true);\n                contentArea.addEventListener('mouseleave', clearAllHighlights, true);\n                console.log('已添加鼠标监听器');\n\n                // 立即触发一次鼠标移动事件\n                await new Promise(resolve => setTimeout(resolve, 50));\n                try {\n                  const rect = contentArea.getBoundingClientRect();\n                  const event = new MouseEvent('mousemove', {\n                    view: window,\n                    bubbles: true,\n                    cancelable: true,\n                    clientX: rect.left + rect.width / 2,\n                    clientY: rect.top + rect.height / 3\n                  });\n                  contentArea.dispatchEvent(event);\n                  console.log('成功触发鼠标移动事件');\n                } catch (e) {\n                  console.error('触发鼠标事件失败:', e);\n                }\n\n                // 再次尝试触发鼠标事件（以防第一次失败）\n                await new Promise(resolve => setTimeout(resolve, 100));\n                try {\n                  const rect = contentArea.getBoundingClientRect();\n                  const middleX = rect.left + rect.width / 2;\n                  const middleY = rect.top + rect.height / 2;\n                  contentArea.dispatchEvent(new MouseEvent('mousemove', {\n                    view: window,\n                    bubbles: true,\n                    clientX: middleX,\n                    clientY: middleY\n                  }));\n                  console.log('第二次触发鼠标移动事件');\n                } catch (e) {\n                  console.error('第二次触发鼠标事件失败:', e);\n                }\n              } else {\n                console.error('未找到内容区域，无法添加鼠标事件');\n              }\n            } else {\n              console.error('未找到PDF内容区域，无法应用鼠标跟随效果');\n            }\n          }\n          console.log(`模式切换完成: ${newMode}`);\n        } catch (error) {\n          console.error('执行模式切换过程中出错:', error);\n        } finally {\n          // 无论成功与否，都清除标志位\n          window.modeChangeInProgress = false;\n        }\n      })();\n    } catch (error) {\n      console.error('模式切换主函数出错:', error);\n      window.modeChangeInProgress = false;\n    }\n  };\n\n  // 简化鼠标跟随监听器函数，只保留核心功能\n  const addMouseFollowListeners = () => {\n    console.log('添加鼠标跟随监听器...');\n\n    // 获取内容区域\n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) {\n      console.error('找不到内容区域');\n      return;\n    }\n\n    // 确保监听器只添加一次\n    contentArea.removeEventListener('mousemove', handleMouseMove, true);\n    contentArea.removeEventListener('mouseleave', clearAllHighlights, true);\n\n    // 添加事件监听器\n    contentArea.addEventListener('mousemove', handleMouseMove, true);\n    contentArea.addEventListener('mouseleave', clearAllHighlights, true);\n\n    // 设置段落样式\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach((paragraph, index) => {\n      paragraph.style.position = 'relative';\n      paragraph.style.lineHeight = '2';\n      paragraph.style.color = 'rgb(240, 240, 240)';\n      paragraph.dataset.index = index;\n      paragraph.dataset.follow = 'true';\n    });\n\n    // 添加特殊类名\n    const pdfContent = contentArea.querySelector('.pdf-content');\n    if (pdfContent) {\n      pdfContent.classList.add('mouse-follow-content');\n    }\n    console.log('鼠标跟随监听器设置完成');\n  };\n\n  // 优化鼠标移动处理函数\n  const handleMouseMove = e => {\n    // 添加额外的调试信息\n    const currentMode = readingMode;\n\n    // 检查当前模式\n    if (currentMode !== 'follow-mouse') {\n      console.log(`当前模式 ${currentMode} 非鼠标跟随，忽略鼠标移动`);\n      return;\n    }\n\n    // 使用requestAnimationFrame限制处理频率\n    if (handleMouseMove.frameId) {\n      cancelAnimationFrame(handleMouseMove.frameId);\n    }\n    handleMouseMove.frameId = requestAnimationFrame(() => {\n      try {\n        // 获取鼠标位置元素\n        const mouseTarget = document.elementFromPoint(e.clientX, e.clientY);\n        if (!mouseTarget) {\n          console.log('鼠标下方无元素');\n          return;\n        }\n\n        // 查找包含段落\n        const targetParagraph = mouseTarget.closest('.pdf-paragraph');\n        if (!targetParagraph) {\n          console.log('鼠标下方无段落元素');\n          return;\n        }\n        console.log('找到段落元素，创建高亮');\n\n        // 清除现有高亮\n        const allHighlights = document.querySelectorAll('.line-highlight, .mouse-highlight');\n        if (allHighlights.length > 0) {\n          console.log(`清除 ${allHighlights.length} 个现有高亮`);\n          allHighlights.forEach(h => {\n            if (h && h.parentNode) {\n              h.parentNode.removeChild(h);\n            }\n          });\n        }\n\n        // 获取段落位置信息\n        const paragraphRect = targetParagraph.getBoundingClientRect();\n\n        // 计算相对位置\n        const relativeY = e.clientY - paragraphRect.top;\n\n        // 获取计算样式\n        const style = window.getComputedStyle(targetParagraph);\n\n        // 获取字体大小和行高\n        const fontSize = parseInt(style.fontSize) || 16;\n        let lineHeight = parseInt(style.lineHeight) || fontSize * 2;\n        if (style.lineHeight === 'normal') {\n          lineHeight = fontSize * 2;\n        }\n\n        // 计算行索引\n        const lineIndex = Math.floor(relativeY / lineHeight);\n        if (lineIndex < 0) {\n          console.log('行索引无效');\n          return;\n        }\n\n        // 计算高亮位置\n        const lineTop = lineIndex * lineHeight;\n        const paddingTop = parseInt(style.paddingTop) || 0;\n        const borderTop = parseInt(style.borderTopWidth) || 0;\n        const textStartY = paddingTop + borderTop;\n\n        // 创建高亮元素\n        const highlight = document.createElement('div');\n        highlight.className = 'line-highlight mouse-highlight';\n        highlight.dataset.lineIndex = lineIndex;\n\n        // 设置高亮样式\n        Object.assign(highlight.style, {\n          position: 'absolute',\n          left: '0',\n          top: `${lineTop + textStartY}px`,\n          width: '100%',\n          height: `${lineHeight * 0.85}px`,\n          backgroundColor: 'rgba(255, 140, 0, 0.25)',\n          borderRadius: '3px',\n          border: '1px solid rgba(255, 140, 0, 0.3)',\n          boxShadow: '0 0 6px rgba(255, 140, 0, 0.3)',\n          zIndex: '5',\n          opacity: '1',\n          pointerEvents: 'none'\n        });\n\n        // 确保段落有相对定位\n        if (targetParagraph.style.position !== 'relative') {\n          targetParagraph.style.position = 'relative';\n        }\n\n        // 添加高亮元素\n        targetParagraph.appendChild(highlight);\n        console.log(`已在行 ${lineIndex} 添加高亮`);\n      } catch (error) {\n        console.error('鼠标移动处理错误:', error);\n      } finally {\n        handleMouseMove.frameId = null;\n      }\n    });\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = text => {\n    // 分段\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n\n    // 创建HTML内容\n    let htmlContent = '<div class=\"pdf-content\">';\n    paragraphs.forEach(paragraph => {\n      htmlContent += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 应用静态高亮样式 - 修复文字减少问题\n  const applyStaticHighlight = text => {\n    console.log(`静态高亮模式：处理文本长度 ${text.length}`);\n\n    // 保存原始文本\n    const originalText = text;\n\n    // 分段，使用更简单可靠的方法\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s*/).filter(p => p.trim().length > 0);\n\n    // 创建HTML内容\n    let htmlContent = '<div class=\"pdf-content static-highlight-content\">';\n\n    // 处理段落 - 使用同步处理避免延迟问题\n    if (paragraphs.length === 0) {\n      // 直接使用原始文本\n      console.log('分段失败，使用原始文本');\n      htmlContent += `<p class=\"pdf-paragraph\">${originalText}</p>`;\n    } else {\n      // 同步处理每个段落，确保不丢失文本\n      paragraphs.forEach((paragraph, index) => {\n        if (!paragraph || paragraph.trim().length === 0) {\n          return; // 跳过空段落\n        }\n        let processedText;\n        try {\n          // 使用词性标注函数处理\n          processedText = tagPartsOfSpeech(paragraph.trim());\n\n          // 确保处理结果不为空\n          if (!processedText || processedText.trim().length === 0) {\n            console.warn(`段落 ${index} 处理结果为空，使用原始文本`);\n            processedText = paragraph.trim();\n          }\n        } catch (error) {\n          console.error(`段落 ${index} 处理出错，使用原始文本:`, error);\n          processedText = paragraph.trim();\n        }\n\n        // 添加到HTML内容\n        htmlContent += `<p class=\"pdf-paragraph\" data-index=\"${index}\">${processedText}</p>`;\n      });\n    }\n    htmlContent += '</div>';\n    console.log(`静态高亮模式：处理后HTML长度 ${htmlContent.length}`);\n    return htmlContent;\n  };\n\n  // 格式化文本用于鼠标跟随高亮模式 - 确保一行高亮效果\n  const formatTextForMouseFollow = text => {\n    // 分段，确保保留所有文本\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s*/).filter(p => p.trim().length > 0);\n\n    // 将文本包装在特殊类中\n    let htmlContent = '<div class=\"pdf-content mouse-follow-content\">';\n    if (paragraphs.length === 0) {\n      // 如果分段失败，使用整段\n      htmlContent += `<p class=\"pdf-paragraph\" data-follow=\"true\" style=\"position: relative; line-height: 2;\">${text}</p>`;\n    } else {\n      // 为每个段落添加样式和属性\n      paragraphs.forEach((paragraph, index) => {\n        const paragraphContent = paragraph.trim();\n        if (paragraphContent.length > 0) {\n          htmlContent += `\n            <p class=\"pdf-paragraph\" \n               data-follow=\"true\" \n               data-index=\"${index}\"\n               style=\"position: relative; line-height: 2; padding: 8px 4px;\">${paragraphContent}</p>\n          `;\n        }\n      });\n    }\n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 自动阅读引导\n  const startAutoReadGuide = () => {\n    if (autoReadIntervalRef.current) {\n      clearInterval(autoReadIntervalRef.current);\n    }\n\n    // 创建阅读指示点\n    if (!autoReadGuideRef.current) {\n      const guide = document.createElement('div');\n      guide.className = 'auto-read-guide';\n      document.querySelector('.page-content').appendChild(guide);\n      autoReadGuideRef.current = guide;\n    }\n\n    // 获取页面内所有段落\n    const paragraphs = document.querySelectorAll('.page-content p');\n    if (!paragraphs.length) return;\n    let currentParagraphIndex = 0;\n    let currentCharIndex = 0;\n    autoReadIntervalRef.current = setInterval(() => {\n      if (currentParagraphIndex >= paragraphs.length) {\n        clearInterval(autoReadIntervalRef.current);\n        return;\n      }\n      const paragraph = paragraphs[currentParagraphIndex];\n      const text = paragraph.textContent;\n      if (currentCharIndex >= text.length) {\n        currentParagraphIndex++;\n        currentCharIndex = 0;\n        return;\n      }\n\n      // 计算当前字符位置\n      const range = document.createRange();\n      const textNode = paragraph.firstChild;\n      if (textNode && textNode.nodeType === Node.TEXT_NODE) {\n        range.setStart(textNode, Math.min(currentCharIndex, textNode.length));\n        range.setStart(textNode, Math.min(currentCharIndex, textNode.length));\n        const rect = range.getBoundingClientRect();\n\n        // 更新指示点位置\n        if (autoReadGuideRef.current) {\n          const guide = autoReadGuideRef.current;\n          guide.style.left = `${rect.left}px`;\n          guide.style.top = `${rect.bottom + 5}px`;\n\n          // 闪烁效果\n          guide.style.opacity = 1;\n          setTimeout(() => {\n            guide.style.opacity = 0.5;\n          }, 100);\n        }\n      }\n      currentCharIndex += 1;\n    }, 200); // 每秒5个字符的速度\n  };\n\n  // 清除所有高亮元素\n  const clearAllHighlights = () => {\n    try {\n      console.log('清除所有高亮元素...');\n\n      // 清理所有类型的高亮元素\n      const highlights = document.querySelectorAll('.mouse-highlight, .line-highlight, .highlight-word, .reading-line');\n      console.log(`找到 ${highlights.length} 个高亮元素需要清理`);\n\n      // 删除每个高亮元素\n      highlights.forEach(el => {\n        if (el && el.parentNode) {\n          try {\n            el.parentNode.removeChild(el);\n          } catch (err) {\n            console.error('删除高亮元素失败:', err);\n          }\n        }\n      });\n\n      // 取消所有动画帧\n      if (handleMouseMove.frameId) {\n        cancelAnimationFrame(handleMouseMove.frameId);\n        handleMouseMove.frameId = null;\n      }\n      console.log('高亮元素清理完成');\n    } catch (error) {\n      console.error('清理高亮元素错误:', error);\n    }\n  };\n\n  // 清理所有计时器和事件监听器\n  const clearAllTimersAndEvents = () => {\n    console.log('清理所有计时器和事件...');\n\n    // 清理所有计时器\n    if (window.modeChangeTimeout) {\n      clearTimeout(window.modeChangeTimeout);\n      window.modeChangeTimeout = null;\n    }\n    if (window.contentUpdateTimer) {\n      clearTimeout(window.contentUpdateTimer);\n      window.contentUpdateTimer = null;\n    }\n    if (handleMouseMove.frameId) {\n      cancelAnimationFrame(handleMouseMove.frameId);\n      handleMouseMove.frameId = null;\n    }\n\n    // 移除全局事件监听器\n    document.removeEventListener('mousemove', handleMouseMove, true);\n\n    // 移除内容区域事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.removeEventListener('mousemove', handleMouseMove, true);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights, true);\n    }\n\n    // 移除所有段落的事件监听器和样式\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 清除样式\n      paragraph.style.position = '';\n      paragraph.style.lineHeight = '';\n      paragraph.style.color = '';\n      delete paragraph.dataset.follow;\n      delete paragraph.dataset.highlight;\n\n      // 删除所有高亮元素\n      const highlights = paragraph.querySelectorAll('.line-highlight, .mouse-highlight, .highlight-word');\n      highlights.forEach(el => el.remove());\n    });\n\n    // 移除特殊类\n    const pdfContent = document.querySelector('.pdf-content');\n    if (pdfContent) {\n      pdfContent.classList.remove('mouse-follow-content');\n      pdfContent.classList.remove('static-highlight-content');\n    }\n    console.log('清理完成');\n  };\n\n  // 同步立即处理PDF页面函数 - 确保模式立即生效\n  const processPdfPageImmediately = async (pageNum, mode) => {\n    try {\n      // 彻底清理当前页面的所有效果\n      clearAllHighlights();\n      clearAllTimersAndEvents();\n      console.log(`立即处理第${pageNum}页，模式:${mode}`);\n\n      // 获取页面\n      const page = await pdfDocument.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n\n      // 提取文本\n      let extractedText = textItems.map(item => item.str).join(' ');\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      console.log(`提取文本长度: ${extractedText.length}`);\n\n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch (mode) {\n        case 'normal':\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'follow-mouse':\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n\n      // 立即更新内容\n      setContent(processedContent);\n\n      // 如果是鼠标跟随模式，立即添加监听器\n      if (mode === 'follow-mouse') {\n        // 等待DOM更新\n        setTimeout(() => {\n          console.log('当前页应用鼠标跟随效果');\n          addMouseFollowListeners();\n        }, 50);\n      }\n      return true;\n    } catch (error) {\n      console.error('处理PDF页面错误:', error);\n      return false;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1072,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1071,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"upload-btn\",\n        children: [\"\\u9009\\u62E9\\u6587\\u4EF6\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".pdf,.txt\",\n          onChange: handleFileUpload,\n          style: {\n            display: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1076,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1074,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1070,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"ADHD\\u9605\\u8BFB\\u52A9\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1086,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mode-selector\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: readingMode,\n              onChange: handleReadingModeChange,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"normal\",\n                children: \"\\u666E\\u901A\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1090,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"static\",\n                children: \"\\u9759\\u6001\\u9AD8\\u4EAE\\u6A21\\u5F0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1091,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"follow-mouse\",\n                children: \"\\u9F20\\u6807\\u8DDF\\u968F\\u9AD8\\u4EAE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1092,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1089,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1088,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mode-selector\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: posMode,\n              onChange: e => setPosMode(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"none\",\n                children: \"\\u65E0\\u8BCD\\u6027\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1097,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"noun\",\n                children: \"\\u540D\\u8BCD\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1098,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"all\",\n                children: \"\\u5168\\u8BCD\\u6027\\u6807\\u6CE8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1099,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1096,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1095,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1087,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1085,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-content\",\n        children: content ? /*#__PURE__*/_jsxDEV(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: content\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1106,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-state\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u8BF7\\u4E0A\\u4F20PDF\\u6216TXT\\u6587\\u4EF6\\u5F00\\u59CB\\u9605\\u8BFB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1109,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1108,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1104,\n        columnNumber: 9\n      }, this), content && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"page-btn prev\",\n          onClick: () => changePage(-1),\n          disabled: currentPage === 1,\n          children: \"\\u4E0A\\u4E00\\u9875\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1115,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"page-info\",\n          children: [\"\\u7B2C \", currentPage, \" \\u9875 / \\u5171 \", totalPages, \" \\u9875\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1118,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"page-btn next\",\n          onClick: () => changePage(1),\n          disabled: currentPage === totalPages,\n          children: \"\\u4E0B\\u4E00\\u9875\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1121,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1114,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1084,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1069,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"0gCBbqau4eGI9wGR61xU/wLjJfA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","pdfjsLib","pdfjsViewer","marked","pdfjs","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","tagPartsOfSpeech","text","punctuationMarks","segments","split","RegExp","map","mark","join","result","colorIndex","currentText","forEach","segment","index","test","isPunctuation","includes","color","App","_s","pages","setPages","currentPage","setCurrentPage","totalPages","setTotalPages","fileName","setFileName","loading","setLoading","fileRef","file","setFile","pdfInstance","setPdfInstance","extractedTextPages","setExtractedTextPages","readingMode","setReadingMode","posMode","setPosMode","markdownContent","setMarkdownContent","readerContainerRef","autoReadGuideRef","autoReadIntervalRef","content","setContent","pdfDocument","setPdfDocument","current","clearInterval","startAutoReadGuide","handlePdfFile","fileURL","URL","createObjectURL","loadingTask","getDocument","pdf","promise","numPages","extractAndProcessPage","console","log","error","alert","pageNum","page","getPage","textContent","getTextContent","viewport","getViewport","scale","isTableOfContents","detectIfTocPage","processTocPage","processContentPage","setTimeout","addMouseFollowListeners","textItems","items","fullText","item","str","hasTocKeywords","hasPageNumberPatterns","shortLinesCount","linesWithNumbersCount","lineMap","Map","yKey","Math","round","transform","has","set","get","push","lines","values","line","lineText","length","shortLineRatio","numberLineRatio","htmlContent","x","y","height","fontSize","sqrt","fontWeight","fontName","toLowerCase","spacedText","processTextWithHighlight","trim","originalText","words","lastColor","i","word","random","warn","mode","clearAllHighlights","extractedText","replace","processedContent","formatTextToHtml","applyStaticHighlight","formatTextForMouseFollow","handleTxtFile","pageTexts","paragraph","fontFamily","handleFileUpload","e","target","files","type","changePage","delta","isChanging","newPage","clearAllTimersAndEvents","processPdfPageImmediately","handleReadingModeChange","oldMode","newMode","value","window","modeChangeInProgress","executeModeSwitchImmediately","document","removeEventListener","handleMouseMove","contentArea","querySelector","highlights","querySelectorAll","el","parentNode","removeChild","modeChangeTimeout","clearTimeout","frameId","cancelAnimationFrame","Promise","resolve","pdfContent","classList","add","paragraphs","style","position","lineHeight","dataset","follow","addEventListener","rect","getBoundingClientRect","event","MouseEvent","view","bubbles","cancelable","clientX","left","width","clientY","top","dispatchEvent","middleX","middleY","currentMode","requestAnimationFrame","mouseTarget","elementFromPoint","targetParagraph","closest","allHighlights","h","paragraphRect","relativeY","getComputedStyle","parseInt","lineIndex","floor","lineTop","paddingTop","borderTop","borderTopWidth","textStartY","highlight","createElement","className","Object","assign","backgroundColor","borderRadius","border","boxShadow","zIndex","opacity","pointerEvents","appendChild","filter","p","processedText","paragraphContent","guide","currentParagraphIndex","currentCharIndex","setInterval","range","createRange","textNode","firstChild","nodeType","Node","TEXT_NODE","setStart","min","bottom","err","contentUpdateTimer","remove","children","_jsxFileName","lineNumber","columnNumber","accept","onChange","display","dangerouslySetInnerHTML","__html","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/adhd-read-helper/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport * as pdfjsViewer from 'pdfjs-dist/web/pdf_viewer';\nimport { marked } from 'marked'; // 需要安装: npm install marked\nimport './styles/Reader.css';\nimport { pdfjs } from 'pdfjs-dist';\n\n// 设置 PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\n// 模拟NLP词性标注功能（实际应用中建议使用专业NLP库如nlp.js或调用API）\nconst tagPartsOfSpeech = (text) => {\n  // 定义所有标点符号\n  const punctuationMarks = [\n    '，', '。', '！', '？', '；', '：', '（', '）', '【', '】', '《', '》', '〈', '〉', '…', '—', '～', '·',\n    ',', '.', '!', '?', ';', ':', '(', ')', '[', ']', '{', '}', '-', '...', '..'\n  ];\n  \n  // 将文本按标点符号分割，保留标点符号\n  const segments = text.split(new RegExp(`([${punctuationMarks.map(mark => '\\\\' + mark).join('')}])`));\n  let result = '';\n  let colorIndex = 0; // 0: 红色, 1: 蓝色, 2: 黑色\n  let currentText = '';\n  \n  segments.forEach((segment, index) => {\n    // 跳过空字符串和纯空格\n    if (!segment || /^\\s+$/.test(segment)) {\n      result += segment;\n      return;\n    }\n    \n    // 检查是否是标点符号\n    const isPunctuation = punctuationMarks.includes(segment);\n    \n    // 根据索引选择颜色\n    let color;\n    switch (colorIndex) {\n      case 0:\n        color = 'red';\n        break;\n      case 1:\n        color = 'blue';\n        break;\n      case 2:\n        color = 'black';\n        break;\n      default:\n        color = 'black';\n    }\n    \n    // 将当前文本和标点符号放在同一个颜色块中\n    if (isPunctuation) {\n      // 如果有累积的文本，先添加文本\n      if (currentText) {\n        result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n        currentText = '';\n      }\n      // 添加标点符号\n      result += `<span class=\"highlight-word ${color}\">${segment}</span>`;\n      // 切换颜色\n      colorIndex = (colorIndex + 1) % 3;\n    } else {\n      // 累积文本\n      currentText += segment;\n    }\n  });\n  \n  // 处理最后可能剩余的文本\n  if (currentText) {\n    const color = colorIndex === 0 ? 'red' : colorIndex === 1 ? 'blue' : 'black';\n    result += `<span class=\"highlight-word ${color}\">${currentText}</span>`;\n  }\n  \n  return result;\n};\n\nconst App = () => {\n  // 状态定义\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n  const [file, setFile] = useState(null);\n  const [pdfInstance, setPdfInstance] = useState(null);\n  const [extractedTextPages, setExtractedTextPages] = useState([]);\n  const [readingMode, setReadingMode] = useState('normal');\n  const [posMode, setPosMode] = useState('none');\n  const [markdownContent, setMarkdownContent] = useState('');\n  const readerContainerRef = useRef(null);\n  const autoReadGuideRef = useRef(null);\n  const autoReadIntervalRef = useRef(null);\n  const [content, setContent] = useState('');\n  const [pdfDocument, setPdfDocument] = useState(null);\n\n  // 初始化PDF.js\n  useEffect(() => {\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n    \n    return () => {\n      // 清理自动阅读定时器\n      if (autoReadIntervalRef.current) {\n        clearInterval(autoReadIntervalRef.current);\n      }\n    };\n  }, []);\n  \n  // 当阅读模式改变时应用效果\n  useEffect(() => {\n    if (readingMode === 'auto-guide') {\n      startAutoReadGuide();\n    } else if (autoReadIntervalRef.current) {\n      clearInterval(autoReadIntervalRef.current);\n    }\n  }, [readingMode, markdownContent]);\n\n  // 修改PDF处理函数，确保内容正确提取和显示\n  const handlePdfFile = async (file) => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      const loadingTask = pdfjsLib.getDocument(fileURL);\n      const pdf = await loadingTask.promise;\n      \n      setPdfDocument(pdf);\n      setTotalPages(pdf.numPages);\n      setCurrentPage(1);\n      \n      // 加载第一页\n      await extractAndProcessPage(pdf, 1);\n      \n      // 添加调试信息\n      console.log('PDF加载成功，页数:', pdf.numPages);\n    } catch (error) {\n      console.error('加载PDF时出错:', error);\n      alert('PDF加载失败，请尝试其他文件');\n    }\n  };\n  \n  // 提取和处理PDF页面内容的函数 - 区分目录和正文页面\n  const extractAndProcessPage = async (pdf, pageNum) => {\n    try {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const viewport = page.getViewport({ scale: 1.0 });\n      \n      // 判断当前页面是否为目录页\n      const isTableOfContents = await detectIfTocPage(textContent);\n      \n      if (isTableOfContents) {\n        // 处理目录页面 - 保持原布局，仅调整字间距\n        await processTocPage(textContent, viewport);\n      } else {\n        // 处理正文页面 - 以句号为标准划分段落\n        await processContentPage(page, readingMode);\n      }\n      \n      // 在内容处理完成后，如果是鼠标跟随模式，添加监听器\n      if (readingMode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 50);\n      }\n      \n      return true; // 返回成功标志\n    } catch (error) {\n      console.error('处理PDF页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n      return false;\n    }\n  };\n\n  // 检测是否为目录页\n  const detectIfTocPage = async (textContent) => {\n    const textItems = textContent.items;\n    let fullText = textItems.map(item => item.str).join('');\n    \n    // 检查特征: \n    // 1. 页面上包含\"目录\"字样\n    // 2. 行尾通常有页码和前导符（...）\n    // 3. 短行居多，且多有规律的缩进\n    const hasTocKeywords = /目\\s*录|contents|index/i.test(fullText);\n    const hasPageNumberPatterns = /\\.{2,}|…{1,}\\s*\\d+/.test(fullText);\n    \n    // 检查行的特征\n    let shortLinesCount = 0;\n    let linesWithNumbersCount = 0;\n    \n    // 按Y坐标分组\n    const lineMap = new Map();\n    textItems.forEach(item => {\n      const yKey = Math.round(item.transform[5]);\n      if (!lineMap.has(yKey)) {\n        lineMap.set(yKey, []);\n      }\n      lineMap.get(yKey).push(item);\n    });\n    \n    const lines = [...lineMap.values()];\n    \n    lines.forEach(line => {\n      const lineText = line.map(item => item.str).join('');\n      if (lineText.length < 50) shortLinesCount++;\n      if (/\\d+$/.test(lineText)) linesWithNumbersCount++;\n    });\n    \n    const shortLineRatio = shortLinesCount / lines.length;\n    const numberLineRatio = linesWithNumbersCount / lines.length;\n    \n    return hasTocKeywords || hasPageNumberPatterns || (shortLineRatio > 0.7 && numberLineRatio > 0.3);\n  };\n\n  // 处理目录页面 - 严格保持原始布局\n  const processTocPage = async (textContent, viewport) => {\n    const textItems = textContent.items;\n    \n    // 生成HTML，严格保持原始位置和格式\n    let htmlContent = '<div class=\"pdf-toc-page\">';\n    \n    textItems.forEach(item => {\n      // 获取原始位置信息\n      const x = item.transform[4];\n      const y = viewport.height - item.transform[5]; // 转换Y坐标\n      \n      // 获取原始字体信息\n      const fontSize = Math.sqrt(item.transform[0] * item.transform[0] + item.transform[1] * item.transform[1]);\n      const fontWeight = item.fontName && item.fontName.toLowerCase().includes('bold') ? 'bold' : 'normal';\n      \n      // 仅应用字间距，其他完全保持原样\n      const spacedText = item.str.split('').join('\\u200A');\n      \n      // 使用绝对定位和原始样式属性\n      htmlContent += `<span style=\"\n        position: absolute; \n        left: ${x}px; \n        top: ${y}px; \n        font-size: ${fontSize}px; \n        font-weight: ${fontWeight};\n        letter-spacing: 0.3em;\n        white-space: nowrap;\n        font-family: inherit;\n        color: inherit;\n      \">${spacedText}</span>`;\n    });\n    \n    htmlContent += '</div>';\n    setContent(htmlContent);\n  };\n\n  // 修改文本处理函数，确保高亮处理不会出错或减少内容\n  const processTextWithHighlight = (text) => {\n    // 确保有文本要处理\n    if (!text || text.trim() === '') {\n      return '';\n    }\n    \n    try {\n      // 保存原始文本，以防处理失败\n      const originalText = text;\n      \n      // 将文本按空格和标点符号分割成词\n      const words = text.split(/([\\s.,!?，。！？.!?]+)/);\n      let result = '';\n      let lastColor = null; // 记录上一个高亮颜色\n      \n      // 使用更可靠的循环方式\n      for (let i = 0; i < words.length; i++) {\n        const word = words[i];\n        \n        // 跳过空字符串和纯空格\n        if (!word || /^\\s+$/.test(word)) {\n          result += word;\n          continue;\n        }\n        \n        // 增加高亮概率，确保大部分文本被高亮\n        if (Math.random() < 0.8) {\n          // 确保相邻高亮词颜色不同\n          let color;\n          if (lastColor === 'red') {\n            color = 'blue';\n          } else if (lastColor === 'blue') {\n            color = 'red';\n          } else {\n            // 第一次高亮时随机选择颜色\n            color = Math.random() < 0.5 ? 'red' : 'blue';\n          }\n          lastColor = color;\n          \n          // 用span包装词，添加高亮样式\n          result += `<span class=\"highlight-word ${color}\">${word}</span>`;\n        } else {\n          result += word;\n        }\n      }\n      \n      // 检查处理结果是否为空，如果为空则返回原始文本\n      if (!result || result.trim() === '') {\n        console.warn('高亮处理结果为空，返回原始文本');\n        return originalText;\n      }\n      \n      return result;\n    } catch (error) {\n      console.error('处理文本高亮时出错:', error);\n      // 出错时，返回原始文本\n      return text;\n    }\n  };\n\n  // 修改processContentPage函数\n  const processContentPage = async (page, mode) => {\n    try {\n      // 清理旧的内容和事件\n      clearAllHighlights();\n      \n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      let extractedText = textItems.map(item => item.str).join(' ');\n      \n      // 移除多余的空格\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch(mode) {\n        case 'normal':\n          // 普通模式 - 简单分段显示\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'static':\n          // 静态高亮模式 - 应用词性标注和颜色高亮\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'follow-mouse':\n          // 鼠标跟随高亮模式 - 分段落但不预先高亮，由鼠标事件触发高亮\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      \n      setContent(processedContent);\n      \n      // 如果是鼠标跟随模式，添加监听器\n      if (mode === 'follow-mouse') {\n        setTimeout(() => {\n          addMouseFollowListeners();\n        }, 100);\n      }\n    } catch (error) {\n      console.error('处理内容页面时出错:', error);\n      setContent('<div>无法处理PDF内容</div>');\n    }\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async (file) => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n      // 将文本分页处理\n      const pageTexts = text.split('\\n\\n').map(paragraph => [{\n        text: paragraph,\n        x: 40,\n        y: 40,\n        fontSize: 16,\n        fontFamily: 'serif'\n      }]);\n      setPages(pageTexts);\n      setTotalPages(pageTexts.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert('TXT文件处理失败，请重试');\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n    \n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain') {\n      handleTxtFile(file);\n    } else {\n      alert('请上传PDF或TXT文件');\n    }\n  };\n\n  // 翻页函数 - 防止自动翻页和事件冲突\n  const changePage = async (delta) => {\n    // 防止快速连续点击\n    if (changePage.isChanging) return;\n    changePage.isChanging = true;\n    \n    const newPage = currentPage + delta;\n    if (newPage >= 1 && newPage <= totalPages && pdfDocument) {\n      try {\n        // 在翻页前彻底清理当前页面\n        clearAllHighlights();\n        clearAllTimersAndEvents();\n        \n        // 更新页码\n        setCurrentPage(newPage);\n        \n        // 根据当前阅读模式处理新页面\n        await processPdfPageImmediately(newPage, readingMode);\n      } catch (error) {\n        console.error('翻页出错:', error);\n      } finally {\n        // 允许下一次翻页\n        setTimeout(() => {\n          changePage.isChanging = false;\n        }, 200);\n      }\n    } else {\n      changePage.isChanging = false;\n    }\n  };\n\n  // 初始化翻页状态\n  changePage.isChanging = false;\n\n  // 彻底重构阅读模式切换函数，确保即时生效\n  const handleReadingModeChange = (e) => {\n    try {\n      const oldMode = readingMode;\n      const newMode = e.target.value;\n      \n      console.log(`开始切换阅读模式: ${oldMode} -> ${newMode}`);\n      \n      // 防止多次快速切换\n      if (window.modeChangeInProgress) {\n        console.log('切换进行中，忽略请求');\n        return;\n      }\n      \n      // 设置标志位\n      window.modeChangeInProgress = true;\n      \n      // 立即更新状态\n      setReadingMode(newMode);\n      \n      // 同步执行模式切换，不依赖React状态更新\n      (async function executeModeSwitchImmediately() {\n        try {\n          // 1. 清理所有旧效果\n          console.log('立即清理所有旧效果...');\n          \n          // 移除所有事件监听器\n          document.removeEventListener('mousemove', handleMouseMove, true);\n          document.removeEventListener('mouseleave', clearAllHighlights, true);\n          \n          const contentArea = document.querySelector('.page-content');\n          if (contentArea) {\n            contentArea.removeEventListener('mousemove', handleMouseMove, true);\n            contentArea.removeEventListener('mouseleave', clearAllHighlights, true);\n          }\n          \n          // 清除所有高亮元素\n          const highlights = document.querySelectorAll('.mouse-highlight, .line-highlight, .highlight-word, .reading-line');\n          highlights.forEach(el => {\n            if (el && el.parentNode) {\n              el.parentNode.removeChild(el);\n            }\n          });\n          \n          // 清除所有定时器\n          if (window.modeChangeTimeout) {\n            clearTimeout(window.modeChangeTimeout);\n            window.modeChangeTimeout = null;\n          }\n          \n          if (handleMouseMove.frameId) {\n            cancelAnimationFrame(handleMouseMove.frameId);\n            handleMouseMove.frameId = null;\n          }\n          \n          // 2. 立即重新处理当前页面\n          if (!pdfDocument || currentPage <= 0) {\n            console.log('无PDF文档或页码无效，模式切换结束');\n            window.modeChangeInProgress = false;\n            return;\n          }\n          \n          console.log('开始处理当前页面内容...');\n          \n          // 获取当前页面内容\n          const page = await pdfDocument.getPage(currentPage);\n          const textContent = await page.getTextContent();\n          const textItems = textContent.items;\n          \n          // 提取文本\n          let extractedText = textItems.map(item => item.str).join(' ');\n          extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n          \n          // 根据新模式处理文本\n          let processedContent = '';\n          switch(newMode) {\n            case 'normal':\n              processedContent = formatTextToHtml(extractedText);\n              break;\n            case 'static':\n              processedContent = applyStaticHighlight(extractedText);\n              break;\n            case 'follow-mouse':\n              processedContent = formatTextForMouseFollow(extractedText);\n              break;\n            default:\n              processedContent = formatTextToHtml(extractedText);\n          }\n          \n          // 3. 更新内容\n          console.log('更新页面内容...');\n          setContent(processedContent);\n          \n          // 4. 特殊处理鼠标跟随模式\n          if (newMode === 'follow-mouse') {\n            // 直接更新DOM，不等待React重新渲染\n            console.log('直接应用鼠标跟随效果...');\n            \n            // 等待一小段时间确保DOM更新\n            await new Promise(resolve => setTimeout(resolve, 50));\n            \n            // 找到所有段落并应用样式\n            const pdfContent = document.querySelector('.pdf-content');\n            if (pdfContent) {\n              // 添加特殊类\n              pdfContent.classList.add('mouse-follow-content');\n              \n              // 处理段落样式\n              const paragraphs = document.querySelectorAll('.pdf-paragraph');\n              console.log(`找到 ${paragraphs.length} 个段落，应用鼠标跟随样式`);\n              \n              paragraphs.forEach((paragraph, index) => {\n                // 设置必要的样式属性\n                paragraph.style.position = 'relative';\n                paragraph.style.lineHeight = '2';\n                paragraph.style.color = 'rgb(240, 240, 240)';\n                paragraph.dataset.index = index;\n                paragraph.dataset.follow = 'true';\n              });\n              \n              // 添加鼠标事件监听器\n              const contentArea = document.querySelector('.page-content');\n              if (contentArea) {\n                // 添加监听器\n                contentArea.addEventListener('mousemove', handleMouseMove, true);\n                contentArea.addEventListener('mouseleave', clearAllHighlights, true);\n                \n                console.log('已添加鼠标监听器');\n                \n                // 立即触发一次鼠标移动事件\n                await new Promise(resolve => setTimeout(resolve, 50));\n                \n                try {\n                  const rect = contentArea.getBoundingClientRect();\n                  const event = new MouseEvent('mousemove', {\n                    view: window,\n                    bubbles: true,\n                    cancelable: true,\n                    clientX: rect.left + rect.width / 2,\n                    clientY: rect.top + rect.height / 3\n                  });\n                  contentArea.dispatchEvent(event);\n                  console.log('成功触发鼠标移动事件');\n                } catch (e) {\n                  console.error('触发鼠标事件失败:', e);\n                }\n                \n                // 再次尝试触发鼠标事件（以防第一次失败）\n                await new Promise(resolve => setTimeout(resolve, 100));\n                try {\n                  const rect = contentArea.getBoundingClientRect();\n                  const middleX = rect.left + rect.width / 2;\n                  const middleY = rect.top + rect.height / 2;\n                  \n                  contentArea.dispatchEvent(new MouseEvent('mousemove', {\n                    view: window,\n                    bubbles: true,\n                    clientX: middleX,\n                    clientY: middleY\n                  }));\n                  console.log('第二次触发鼠标移动事件');\n                } catch (e) {\n                  console.error('第二次触发鼠标事件失败:', e);\n                }\n              } else {\n                console.error('未找到内容区域，无法添加鼠标事件');\n              }\n            } else {\n              console.error('未找到PDF内容区域，无法应用鼠标跟随效果');\n            }\n          }\n          \n          console.log(`模式切换完成: ${newMode}`);\n        } catch (error) {\n          console.error('执行模式切换过程中出错:', error);\n        } finally {\n          // 无论成功与否，都清除标志位\n          window.modeChangeInProgress = false;\n        }\n      })();\n    } catch (error) {\n      console.error('模式切换主函数出错:', error);\n      window.modeChangeInProgress = false;\n    }\n  };\n\n  // 简化鼠标跟随监听器函数，只保留核心功能\n  const addMouseFollowListeners = () => {\n    console.log('添加鼠标跟随监听器...');\n    \n    // 获取内容区域\n    const contentArea = document.querySelector('.page-content');\n    if (!contentArea) {\n      console.error('找不到内容区域');\n      return;\n    }\n    \n    // 确保监听器只添加一次\n    contentArea.removeEventListener('mousemove', handleMouseMove, true);\n    contentArea.removeEventListener('mouseleave', clearAllHighlights, true);\n    \n    // 添加事件监听器\n    contentArea.addEventListener('mousemove', handleMouseMove, true);\n    contentArea.addEventListener('mouseleave', clearAllHighlights, true);\n    \n    // 设置段落样式\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach((paragraph, index) => {\n      paragraph.style.position = 'relative';\n      paragraph.style.lineHeight = '2';\n      paragraph.style.color = 'rgb(240, 240, 240)';\n      paragraph.dataset.index = index;\n      paragraph.dataset.follow = 'true';\n    });\n    \n    // 添加特殊类名\n    const pdfContent = contentArea.querySelector('.pdf-content');\n    if (pdfContent) {\n      pdfContent.classList.add('mouse-follow-content');\n    }\n    \n    console.log('鼠标跟随监听器设置完成');\n  };\n\n  // 优化鼠标移动处理函数\n  const handleMouseMove = (e) => {\n    // 添加额外的调试信息\n    const currentMode = readingMode;\n    \n    // 检查当前模式\n    if (currentMode !== 'follow-mouse') {\n      console.log(`当前模式 ${currentMode} 非鼠标跟随，忽略鼠标移动`);\n      return;\n    }\n    \n    // 使用requestAnimationFrame限制处理频率\n    if (handleMouseMove.frameId) {\n      cancelAnimationFrame(handleMouseMove.frameId);\n    }\n    \n    handleMouseMove.frameId = requestAnimationFrame(() => {\n      try {\n        // 获取鼠标位置元素\n        const mouseTarget = document.elementFromPoint(e.clientX, e.clientY);\n        if (!mouseTarget) {\n          console.log('鼠标下方无元素');\n          return;\n        }\n        \n        // 查找包含段落\n        const targetParagraph = mouseTarget.closest('.pdf-paragraph');\n        if (!targetParagraph) {\n          console.log('鼠标下方无段落元素');\n          return;\n        }\n        \n        console.log('找到段落元素，创建高亮');\n        \n        // 清除现有高亮\n        const allHighlights = document.querySelectorAll('.line-highlight, .mouse-highlight');\n        if (allHighlights.length > 0) {\n          console.log(`清除 ${allHighlights.length} 个现有高亮`);\n          allHighlights.forEach(h => {\n            if (h && h.parentNode) {\n              h.parentNode.removeChild(h);\n            }\n          });\n        }\n        \n        // 获取段落位置信息\n        const paragraphRect = targetParagraph.getBoundingClientRect();\n        \n        // 计算相对位置\n        const relativeY = e.clientY - paragraphRect.top;\n        \n        // 获取计算样式\n        const style = window.getComputedStyle(targetParagraph);\n        \n        // 获取字体大小和行高\n        const fontSize = parseInt(style.fontSize) || 16;\n        let lineHeight = parseInt(style.lineHeight) || fontSize * 2;\n        if (style.lineHeight === 'normal') {\n          lineHeight = fontSize * 2;\n        }\n        \n        // 计算行索引\n        const lineIndex = Math.floor(relativeY / lineHeight);\n        if (lineIndex < 0) {\n          console.log('行索引无效');\n          return;\n        }\n        \n        // 计算高亮位置\n        const lineTop = lineIndex * lineHeight;\n        const paddingTop = parseInt(style.paddingTop) || 0;\n        const borderTop = parseInt(style.borderTopWidth) || 0;\n        const textStartY = paddingTop + borderTop;\n        \n        // 创建高亮元素\n        const highlight = document.createElement('div');\n        highlight.className = 'line-highlight mouse-highlight';\n        highlight.dataset.lineIndex = lineIndex;\n        \n        // 设置高亮样式\n        Object.assign(highlight.style, {\n          position: 'absolute',\n          left: '0',\n          top: `${lineTop + textStartY}px`,\n          width: '100%',\n          height: `${lineHeight * 0.85}px`,\n          backgroundColor: 'rgba(255, 140, 0, 0.25)',\n          borderRadius: '3px',\n          border: '1px solid rgba(255, 140, 0, 0.3)',\n          boxShadow: '0 0 6px rgba(255, 140, 0, 0.3)',\n          zIndex: '5',\n          opacity: '1',\n          pointerEvents: 'none'\n        });\n        \n        // 确保段落有相对定位\n        if (targetParagraph.style.position !== 'relative') {\n          targetParagraph.style.position = 'relative';\n        }\n        \n        // 添加高亮元素\n        targetParagraph.appendChild(highlight);\n        console.log(`已在行 ${lineIndex} 添加高亮`);\n      } catch (error) {\n        console.error('鼠标移动处理错误:', error);\n      } finally {\n        handleMouseMove.frameId = null;\n      }\n    });\n  };\n\n  // 格式化文本为HTML\n  const formatTextToHtml = (text) => {\n    // 分段\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s+/).filter(p => p.trim());\n    \n    // 创建HTML内容\n    let htmlContent = '<div class=\"pdf-content\">';\n    \n    paragraphs.forEach(paragraph => {\n      htmlContent += `<p class=\"pdf-paragraph\">${paragraph}</p>`;\n    });\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 应用静态高亮样式 - 修复文字减少问题\n  const applyStaticHighlight = (text) => {\n    console.log(`静态高亮模式：处理文本长度 ${text.length}`);\n    \n    // 保存原始文本\n    const originalText = text;\n    \n    // 分段，使用更简单可靠的方法\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s*/).filter(p => p.trim().length > 0);\n    \n    // 创建HTML内容\n    let htmlContent = '<div class=\"pdf-content static-highlight-content\">';\n    \n    // 处理段落 - 使用同步处理避免延迟问题\n    if (paragraphs.length === 0) {\n      // 直接使用原始文本\n      console.log('分段失败，使用原始文本');\n      htmlContent += `<p class=\"pdf-paragraph\">${originalText}</p>`;\n    } else {\n      // 同步处理每个段落，确保不丢失文本\n      paragraphs.forEach((paragraph, index) => {\n        if (!paragraph || paragraph.trim().length === 0) {\n          return; // 跳过空段落\n        }\n        \n        let processedText;\n        try {\n          // 使用词性标注函数处理\n          processedText = tagPartsOfSpeech(paragraph.trim());\n          \n          // 确保处理结果不为空\n          if (!processedText || processedText.trim().length === 0) {\n            console.warn(`段落 ${index} 处理结果为空，使用原始文本`);\n            processedText = paragraph.trim();\n          }\n        } catch (error) {\n          console.error(`段落 ${index} 处理出错，使用原始文本:`, error);\n          processedText = paragraph.trim();\n        }\n        \n        // 添加到HTML内容\n        htmlContent += `<p class=\"pdf-paragraph\" data-index=\"${index}\">${processedText}</p>`;\n      });\n    }\n    \n    htmlContent += '</div>';\n    \n    console.log(`静态高亮模式：处理后HTML长度 ${htmlContent.length}`);\n    \n    return htmlContent;\n  };\n\n  // 格式化文本用于鼠标跟随高亮模式 - 确保一行高亮效果\n  const formatTextForMouseFollow = (text) => {\n    // 分段，确保保留所有文本\n    const paragraphs = text.split(/(?<=。|！|？|\\.|\\!|\\?)\\s*/).filter(p => p.trim().length > 0);\n    \n    // 将文本包装在特殊类中\n    let htmlContent = '<div class=\"pdf-content mouse-follow-content\">';\n    \n    if (paragraphs.length === 0) {\n      // 如果分段失败，使用整段\n      htmlContent += `<p class=\"pdf-paragraph\" data-follow=\"true\" style=\"position: relative; line-height: 2;\">${text}</p>`;\n    } else {\n      // 为每个段落添加样式和属性\n      paragraphs.forEach((paragraph, index) => {\n        const paragraphContent = paragraph.trim();\n        if (paragraphContent.length > 0) {\n          htmlContent += `\n            <p class=\"pdf-paragraph\" \n               data-follow=\"true\" \n               data-index=\"${index}\"\n               style=\"position: relative; line-height: 2; padding: 8px 4px;\">${paragraphContent}</p>\n          `;\n        }\n      });\n    }\n    \n    htmlContent += '</div>';\n    return htmlContent;\n  };\n\n  // 自动阅读引导\n  const startAutoReadGuide = () => {\n    if (autoReadIntervalRef.current) {\n      clearInterval(autoReadIntervalRef.current);\n    }\n    \n    // 创建阅读指示点\n    if (!autoReadGuideRef.current) {\n      const guide = document.createElement('div');\n      guide.className = 'auto-read-guide';\n      document.querySelector('.page-content').appendChild(guide);\n      autoReadGuideRef.current = guide;\n    }\n    \n    // 获取页面内所有段落\n    const paragraphs = document.querySelectorAll('.page-content p');\n    if (!paragraphs.length) return;\n    \n    let currentParagraphIndex = 0;\n    let currentCharIndex = 0;\n    \n    autoReadIntervalRef.current = setInterval(() => {\n      if (currentParagraphIndex >= paragraphs.length) {\n        clearInterval(autoReadIntervalRef.current);\n        return;\n      }\n      \n      const paragraph = paragraphs[currentParagraphIndex];\n      const text = paragraph.textContent;\n      \n      if (currentCharIndex >= text.length) {\n        currentParagraphIndex++;\n        currentCharIndex = 0;\n        return;\n      }\n      \n      // 计算当前字符位置\n      const range = document.createRange();\n      const textNode = paragraph.firstChild;\n      \n      if (textNode && textNode.nodeType === Node.TEXT_NODE) {\n        range.setStart(textNode, Math.min(currentCharIndex, textNode.length));\n        range.setStart(textNode, Math.min(currentCharIndex, textNode.length));\n        \n        const rect = range.getBoundingClientRect();\n        \n        // 更新指示点位置\n        if (autoReadGuideRef.current) {\n          const guide = autoReadGuideRef.current;\n          guide.style.left = `${rect.left}px`;\n          guide.style.top = `${rect.bottom + 5}px`;\n          \n          // 闪烁效果\n          guide.style.opacity = 1;\n          setTimeout(() => {\n            guide.style.opacity = 0.5;\n          }, 100);\n        }\n      }\n      \n      currentCharIndex += 1;\n    }, 200); // 每秒5个字符的速度\n  };\n\n  // 清除所有高亮元素\n  const clearAllHighlights = () => {\n    try {\n      console.log('清除所有高亮元素...');\n      \n      // 清理所有类型的高亮元素\n      const highlights = document.querySelectorAll('.mouse-highlight, .line-highlight, .highlight-word, .reading-line');\n      console.log(`找到 ${highlights.length} 个高亮元素需要清理`);\n      \n      // 删除每个高亮元素\n      highlights.forEach(el => {\n        if (el && el.parentNode) {\n          try {\n            el.parentNode.removeChild(el);\n          } catch (err) {\n            console.error('删除高亮元素失败:', err);\n          }\n        }\n      });\n      \n      // 取消所有动画帧\n      if (handleMouseMove.frameId) {\n        cancelAnimationFrame(handleMouseMove.frameId);\n        handleMouseMove.frameId = null;\n      }\n      \n      console.log('高亮元素清理完成');\n    } catch (error) {\n      console.error('清理高亮元素错误:', error);\n    }\n  };\n\n  // 清理所有计时器和事件监听器\n  const clearAllTimersAndEvents = () => {\n    console.log('清理所有计时器和事件...');\n    \n    // 清理所有计时器\n    if (window.modeChangeTimeout) {\n      clearTimeout(window.modeChangeTimeout);\n      window.modeChangeTimeout = null;\n    }\n    \n    if (window.contentUpdateTimer) {\n      clearTimeout(window.contentUpdateTimer);\n      window.contentUpdateTimer = null;\n    }\n    \n    if (handleMouseMove.frameId) {\n      cancelAnimationFrame(handleMouseMove.frameId);\n      handleMouseMove.frameId = null;\n    }\n    \n    // 移除全局事件监听器\n    document.removeEventListener('mousemove', handleMouseMove, true);\n    \n    // 移除内容区域事件监听器\n    const contentArea = document.querySelector('.page-content');\n    if (contentArea) {\n      contentArea.removeEventListener('mousemove', handleMouseMove, true);\n      contentArea.removeEventListener('mouseleave', clearAllHighlights, true);\n    }\n    \n    // 移除所有段落的事件监听器和样式\n    const paragraphs = document.querySelectorAll('.pdf-paragraph');\n    paragraphs.forEach(paragraph => {\n      // 清除样式\n      paragraph.style.position = '';\n      paragraph.style.lineHeight = '';\n      paragraph.style.color = '';\n      delete paragraph.dataset.follow;\n      delete paragraph.dataset.highlight;\n      \n      // 删除所有高亮元素\n      const highlights = paragraph.querySelectorAll('.line-highlight, .mouse-highlight, .highlight-word');\n      highlights.forEach(el => el.remove());\n    });\n    \n    // 移除特殊类\n    const pdfContent = document.querySelector('.pdf-content');\n    if (pdfContent) {\n      pdfContent.classList.remove('mouse-follow-content');\n      pdfContent.classList.remove('static-highlight-content');\n    }\n    \n    console.log('清理完成');\n  };\n\n  // 同步立即处理PDF页面函数 - 确保模式立即生效\n  const processPdfPageImmediately = async (pageNum, mode) => {\n    try {\n      // 彻底清理当前页面的所有效果\n      clearAllHighlights();\n      clearAllTimersAndEvents();\n      \n      console.log(`立即处理第${pageNum}页，模式:${mode}`);\n      \n      // 获取页面\n      const page = await pdfDocument.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items;\n      \n      // 提取文本\n      let extractedText = textItems.map(item => item.str).join(' ');\n      extractedText = extractedText.replace(/\\s+/g, ' ').trim();\n      \n      console.log(`提取文本长度: ${extractedText.length}`);\n      \n      // 根据阅读模式处理文本\n      let processedContent = '';\n      switch(mode) {\n        case 'normal':\n          processedContent = formatTextToHtml(extractedText);\n          break;\n        case 'static':\n          processedContent = applyStaticHighlight(extractedText);\n          break;\n        case 'follow-mouse':\n          processedContent = formatTextForMouseFollow(extractedText);\n          break;\n        default:\n          processedContent = formatTextToHtml(extractedText);\n      }\n      \n      // 立即更新内容\n      setContent(processedContent);\n      \n      // 如果是鼠标跟随模式，立即添加监听器\n      if (mode === 'follow-mouse') {\n        // 等待DOM更新\n        setTimeout(() => {\n          console.log('当前页应用鼠标跟随效果');\n          addMouseFollowListeners();\n        }, 50);\n      }\n      \n      return true;\n    } catch (error) {\n      console.error('处理PDF页面错误:', error);\n      return false;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        <div className=\"logo\">\n          <h2>ADHD阅读助手</h2>\n        </div>\n        <label className=\"upload-btn\">\n          选择文件\n          <input\n            type=\"file\"\n            accept=\".pdf,.txt\"\n            onChange={handleFileUpload}\n            style={{ display: 'none' }}\n          />\n        </label>\n      </div>\n      <div className=\"main-content\">\n        <div className=\"header\">\n          <h1>ADHD阅读助手</h1>\n          <div className=\"controls\">\n            <div className=\"mode-selector\">\n              <select value={readingMode} onChange={handleReadingModeChange}>\n                <option value=\"normal\">普通模式</option>\n                <option value=\"static\">静态高亮模式</option>\n                <option value=\"follow-mouse\">鼠标跟随高亮</option>\n              </select>\n            </div>\n            <div className=\"mode-selector\">\n              <select value={posMode} onChange={(e) => setPosMode(e.target.value)}>\n                <option value=\"none\">无词性标注</option>\n                <option value=\"noun\">名词标注</option>\n                <option value=\"all\">全词性标注</option>\n              </select>\n            </div>\n          </div>\n        </div>\n        <div className=\"page-content\">\n          {content ? (\n            <div dangerouslySetInnerHTML={{ __html: content }} />\n          ) : (\n            <div className=\"empty-state\">\n              <p>请上传PDF或TXT文件开始阅读</p>\n            </div>\n          )}\n        </div>\n        {content && (\n          <div className=\"nav-buttons\">\n            <button className=\"page-btn prev\" onClick={() => changePage(-1)} disabled={currentPage === 1}>\n              上一页\n            </button>\n            <span className=\"page-info\">\n              第 {currentPage} 页 / 共 {totalPages} 页\n            </span>\n            <button className=\"page-btn next\" onClick={() => changePage(1)} disabled={currentPage === totalPages}>\n              下一页\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}