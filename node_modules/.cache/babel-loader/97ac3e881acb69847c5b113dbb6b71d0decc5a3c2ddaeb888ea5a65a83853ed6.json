{"ast":null,"code":"var _jsxFileName = \"D:\\\\adhd-read-helper\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport './styles/Reader.css';\n\n// 确保使用正确的 worker 版本\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst workerSrc = require('pdfjs-dist/build/pdf.worker.entry');\npdfjsLib.GlobalWorkerOptions.workerSrc = workerSrc;\nfunction App() {\n  _s();\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [fileName, setFileName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileRef = useRef(null);\n\n  // 提取PDF页面中的文本和样式\n  const extractPageContent = async page => {\n    const textContent = await page.getTextContent();\n    const viewport = page.getViewport({\n      scale: 1.0\n    });\n\n    // 将文本内容转换为带格式的HTML\n    const content = textContent.items.map(item => {\n      const transform = item.transform;\n      const x = transform[4];\n      const y = viewport.height - transform[5];\n\n      // 计算字体大小和样式\n      const fontSize = Math.sqrt(transform[0] * transform[0] + transform[1] * transform[1]);\n      const fontFamily = item.fontName || 'Arial';\n      return {\n        text: item.str,\n        style: {\n          position: 'absolute',\n          left: `${x}px`,\n          top: `${y}px`,\n          fontSize: `${fontSize}px`,\n          fontFamily: fontFamily,\n          whiteSpace: 'pre'\n        }\n      };\n    });\n    return content;\n  };\n\n  // 处理PDF文件\n  const handlePdfFile = async file => {\n    try {\n      setLoading(true);\n      console.log('开始处理PDF文件:', file.name);\n      const fileArrayBuffer = await file.arrayBuffer();\n      const loadingTask = pdfjsLib.getDocument({\n        data: fileArrayBuffer,\n        cMapUrl: 'https://cdn.jsdelivr.net/npm/pdfjs-dist@3.11.174/cmaps/',\n        cMapPacked: true\n      });\n      const pdf = await loadingTask.promise;\n      console.log('PDF加载成功，总页数:', pdf.numPages);\n      setTotalPages(pdf.numPages);\n      fileRef.current = file;\n\n      // 加载第一页内容\n      const page = await pdf.getPage(1);\n      const content = await extractPageContent(page);\n      setPages([content]);\n      setLoading(false);\n    } catch (error) {\n      console.error('PDF处理错误:', error);\n      setLoading(false);\n      alert(`PDF处理失败: ${error.message}`);\n    }\n  };\n\n  // 加载指定页面\n  const loadPage = async pageNumber => {\n    if (!fileRef.current) return;\n    try {\n      setLoading(true);\n      const fileArrayBuffer = await fileRef.current.arrayBuffer();\n      const pdf = await pdfjsLib.getDocument({\n        data: fileArrayBuffer,\n        cMapUrl: 'https://cdn.jsdelivr.net/npm/pdfjs-dist@3.11.174/cmaps/',\n        cMapPacked: true\n      }).promise;\n      const page = await pdf.getPage(pageNumber);\n      const content = await extractPageContent(page);\n      setPages(prevPages => {\n        const newPages = [...prevPages];\n        newPages[pageNumber - 1] = content;\n        return newPages;\n      });\n      setLoading(false);\n    } catch (error) {\n      console.error('页面加载错误:', error);\n      setLoading(false);\n    }\n  };\n\n  // 处理TXT文件\n  const handleTxtFile = async file => {\n    try {\n      setLoading(true);\n      const text = await file.text();\n\n      // 将文本按段落分割，每页大约2000字\n      const charactersPerPage = 2000;\n      const paragraphs = text.split(/\\n\\s*\\n/);\n      const formattedPages = [];\n      let currentPage = [];\n      let currentLength = 0;\n      paragraphs.forEach(paragraph => {\n        if (currentLength + paragraph.length > charactersPerPage && currentPage.length > 0) {\n          formattedPages.push(currentPage);\n          currentPage = [];\n          currentLength = 0;\n        }\n        currentPage.push(paragraph);\n        currentLength += paragraph.length;\n      });\n      if (currentPage.length > 0) {\n        formattedPages.push(currentPage);\n      }\n\n      // 将段落转换为带格式的内容\n      const formattedContent = formattedPages.map(page => page.map(paragraph => ({\n        text: paragraph,\n        style: {\n          marginBottom: '1em',\n          lineHeight: '1.8',\n          textIndent: '2em',\n          textAlign: 'justify'\n        }\n      })));\n      setPages(formattedContent);\n      setTotalPages(formattedContent.length);\n      setCurrentPage(1);\n      setLoading(false);\n    } catch (error) {\n      console.error('TXT处理错误:', error);\n      setLoading(false);\n      alert(`TXT文件处理失败: ${error.message}`);\n    }\n  };\n\n  // 文件上传处理\n  const handleFileUpload = async event => {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    // 检查文件大小\n    if (file.size > 100 * 1024 * 1024) {\n      alert('文件大小不能超过100MB');\n      return;\n    }\n    setFileName(file.name);\n    setPages([]);\n    setCurrentPage(1);\n\n    // 根据文件类型处理\n    if (file.type === 'application/pdf') {\n      await handlePdfFile(file);\n    } else if (file.type === 'text/plain' || file.name.endsWith('.txt')) {\n      await handleTxtFile(file);\n    } else {\n      alert('不支持的文件格式');\n    }\n  };\n\n  // 翻页处理\n  const handlePageChange = direction => {\n    const newPage = direction === 'next' ? Math.min(currentPage + 1, totalPages) : Math.max(currentPage - 1, 1);\n    setCurrentPage(newPage);\n    if (!pages[newPage - 1]) {\n      loadPage(newPage);\n    }\n  };\n\n  // 渲染页面内容\n  const renderPageContent = pageContent => {\n    var _pageContent$, _pageContent$$style;\n    // 如果是PDF内容（数组中包含position样式）\n    if ((pageContent === null || pageContent === void 0 ? void 0 : (_pageContent$ = pageContent[0]) === null || _pageContent$ === void 0 ? void 0 : (_pageContent$$style = _pageContent$.style) === null || _pageContent$$style === void 0 ? void 0 : _pageContent$$style.position) === 'absolute') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pdf-page\",\n        children: pageContent.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: item.style,\n          children: item.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this);\n    }\n    // 如果是TXT内容\n    else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"txt-page\",\n        children: pageContent === null || pageContent === void 0 ? void 0 : pageContent.map((item, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n          style: item.style,\n          children: item.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App dark\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"app-title\",\n        children: \"ADHD \\u9605\\u8BFB\\u52A9\\u624B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".txt,.md,.pdf\",\n          onChange: handleFileUpload,\n          id: \"file-upload\",\n          className: \"file-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"file-upload\",\n          className: \"control-btn\",\n          children: \"\\u9009\\u62E9\\u6587\\u4EF6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this), fileName && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"file-info\",\n          children: [\"\\u5F53\\u524D\\u6587\\u4EF6: \", fileName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"control-btn\",\n          onClick: () => setIsDarkMode(!isDarkMode),\n          children: \"\\u5207\\u6362\\u9605\\u8BFB\\u6A21\\u5F0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reader-container\",\n        children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"loading-spinner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"\\u6B63\\u5728\\u52A0\\u8F7D\\u5185\\u5BB9\\uFF0C\\u8BF7\\u7A0D\\u5019...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 13\n        }, this) : pages.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content-area\",\n          children: renderPageContent(pages[currentPage - 1])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload-prompt\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u8BF7\\u4E0A\\u4F20\\u6587\\u4EF6\\u5F00\\u59CB\\u9605\\u8BFB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"supported-formats\",\n            children: \"\\u652F\\u6301\\u7684\\u683C\\u5F0F: PDF, TXT (\\u6700\\u5927100MB)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"33W9fwd8fBofazOqC/ExBA5ozao=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","pdfjsLib","jsxDEV","_jsxDEV","workerSrc","require","GlobalWorkerOptions","App","_s","isDarkMode","setIsDarkMode","pages","setPages","currentPage","setCurrentPage","totalPages","setTotalPages","fileName","setFileName","loading","setLoading","fileRef","extractPageContent","page","textContent","getTextContent","viewport","getViewport","scale","content","items","map","item","transform","x","y","height","fontSize","Math","sqrt","fontFamily","fontName","text","str","style","position","left","top","whiteSpace","handlePdfFile","file","console","log","name","fileArrayBuffer","arrayBuffer","loadingTask","getDocument","data","cMapUrl","cMapPacked","pdf","promise","numPages","current","getPage","error","alert","message","loadPage","pageNumber","prevPages","newPages","handleTxtFile","charactersPerPage","paragraphs","split","formattedPages","currentLength","forEach","paragraph","length","push","formattedContent","marginBottom","lineHeight","textIndent","textAlign","handleFileUpload","event","target","files","size","type","endsWith","handlePageChange","direction","newPage","min","max","renderPageContent","pageContent","_pageContent$","_pageContent$$style","className","children","index","_jsxFileName","lineNumber","columnNumber","accept","onChange","id","htmlFor","onClick","_c","$RefreshReg$"],"sources":["D:/adhd-read-helper/src/App.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport * as pdfjsLib from 'pdfjs-dist';\r\nimport './styles/Reader.css';\r\n\r\n// 确保使用正确的 worker 版本\r\nconst workerSrc = require('pdfjs-dist/build/pdf.worker.entry');\r\npdfjsLib.GlobalWorkerOptions.workerSrc = workerSrc;\r\n\r\nfunction App() {\r\n  const [isDarkMode, setIsDarkMode] = useState(true);\r\n  const [pages, setPages] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [totalPages, setTotalPages] = useState(0);\r\n  const [fileName, setFileName] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const fileRef = useRef(null);\r\n\r\n  // 提取PDF页面中的文本和样式\r\n  const extractPageContent = async (page) => {\r\n    const textContent = await page.getTextContent();\r\n    const viewport = page.getViewport({ scale: 1.0 });\r\n    \r\n    // 将文本内容转换为带格式的HTML\r\n    const content = textContent.items.map(item => {\r\n      const transform = item.transform;\r\n      const x = transform[4];\r\n      const y = viewport.height - transform[5];\r\n      \r\n      // 计算字体大小和样式\r\n      const fontSize = Math.sqrt((transform[0] * transform[0]) + (transform[1] * transform[1]));\r\n      const fontFamily = item.fontName || 'Arial';\r\n      \r\n      return {\r\n        text: item.str,\r\n        style: {\r\n          position: 'absolute',\r\n          left: `${x}px`,\r\n          top: `${y}px`,\r\n          fontSize: `${fontSize}px`,\r\n          fontFamily: fontFamily,\r\n          whiteSpace: 'pre'\r\n        }\r\n      };\r\n    });\r\n\r\n    return content;\r\n  };\r\n\r\n  // 处理PDF文件\r\n  const handlePdfFile = async (file) => {\r\n    try {\r\n      setLoading(true);\r\n      console.log('开始处理PDF文件:', file.name);\r\n\r\n      const fileArrayBuffer = await file.arrayBuffer();\r\n      const loadingTask = pdfjsLib.getDocument({\r\n        data: fileArrayBuffer,\r\n        cMapUrl: 'https://cdn.jsdelivr.net/npm/pdfjs-dist@3.11.174/cmaps/',\r\n        cMapPacked: true,\r\n      });\r\n\r\n      const pdf = await loadingTask.promise;\r\n      console.log('PDF加载成功，总页数:', pdf.numPages);\r\n      \r\n      setTotalPages(pdf.numPages);\r\n      fileRef.current = file;\r\n\r\n      // 加载第一页内容\r\n      const page = await pdf.getPage(1);\r\n      const content = await extractPageContent(page);\r\n      setPages([content]);\r\n      \r\n      setLoading(false);\r\n\r\n    } catch (error) {\r\n      console.error('PDF处理错误:', error);\r\n      setLoading(false);\r\n      alert(`PDF处理失败: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  // 加载指定页面\r\n  const loadPage = async (pageNumber) => {\r\n    if (!fileRef.current) return;\r\n\r\n    try {\r\n      setLoading(true);\r\n      const fileArrayBuffer = await fileRef.current.arrayBuffer();\r\n      const pdf = await pdfjsLib.getDocument({\r\n        data: fileArrayBuffer,\r\n        cMapUrl: 'https://cdn.jsdelivr.net/npm/pdfjs-dist@3.11.174/cmaps/',\r\n        cMapPacked: true,\r\n      }).promise;\r\n\r\n      const page = await pdf.getPage(pageNumber);\r\n      const content = await extractPageContent(page);\r\n      \r\n      setPages(prevPages => {\r\n        const newPages = [...prevPages];\r\n        newPages[pageNumber - 1] = content;\r\n        return newPages;\r\n      });\r\n\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error('页面加载错误:', error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // 处理TXT文件\r\n  const handleTxtFile = async (file) => {\r\n    try {\r\n      setLoading(true);\r\n      const text = await file.text();\r\n      \r\n      // 将文本按段落分割，每页大约2000字\r\n      const charactersPerPage = 2000;\r\n      const paragraphs = text.split(/\\n\\s*\\n/);\r\n      const formattedPages = [];\r\n      let currentPage = [];\r\n      let currentLength = 0;\r\n\r\n      paragraphs.forEach(paragraph => {\r\n        if (currentLength + paragraph.length > charactersPerPage && currentPage.length > 0) {\r\n          formattedPages.push(currentPage);\r\n          currentPage = [];\r\n          currentLength = 0;\r\n        }\r\n        currentPage.push(paragraph);\r\n        currentLength += paragraph.length;\r\n      });\r\n\r\n      if (currentPage.length > 0) {\r\n        formattedPages.push(currentPage);\r\n      }\r\n\r\n      // 将段落转换为带格式的内容\r\n      const formattedContent = formattedPages.map(page => \r\n        page.map(paragraph => ({\r\n          text: paragraph,\r\n          style: {\r\n            marginBottom: '1em',\r\n            lineHeight: '1.8',\r\n            textIndent: '2em',\r\n            textAlign: 'justify'\r\n          }\r\n        }))\r\n      );\r\n\r\n      setPages(formattedContent);\r\n      setTotalPages(formattedContent.length);\r\n      setCurrentPage(1);\r\n      setLoading(false);\r\n\r\n    } catch (error) {\r\n      console.error('TXT处理错误:', error);\r\n      setLoading(false);\r\n      alert(`TXT文件处理失败: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  // 文件上传处理\r\n  const handleFileUpload = async (event) => {\r\n    const file = event.target.files[0];\r\n    if (!file) return;\r\n\r\n    // 检查文件大小\r\n    if (file.size > 100 * 1024 * 1024) {\r\n      alert('文件大小不能超过100MB');\r\n      return;\r\n    }\r\n\r\n    setFileName(file.name);\r\n    setPages([]);\r\n    setCurrentPage(1);\r\n\r\n    // 根据文件类型处理\r\n    if (file.type === 'application/pdf') {\r\n      await handlePdfFile(file);\r\n    } else if (file.type === 'text/plain' || file.name.endsWith('.txt')) {\r\n      await handleTxtFile(file);\r\n    } else {\r\n      alert('不支持的文件格式');\r\n    }\r\n  };\r\n\r\n  // 翻页处理\r\n  const handlePageChange = (direction) => {\r\n    const newPage = direction === 'next' \r\n      ? Math.min(currentPage + 1, totalPages)\r\n      : Math.max(currentPage - 1, 1);\r\n    \r\n    setCurrentPage(newPage);\r\n    if (!pages[newPage - 1]) {\r\n      loadPage(newPage);\r\n    }\r\n  };\r\n\r\n  // 渲染页面内容\r\n  const renderPageContent = (pageContent) => {\r\n    // 如果是PDF内容（数组中包含position样式）\r\n    if (pageContent?.[0]?.style?.position === 'absolute') {\r\n      return (\r\n        <div className=\"pdf-page\">\r\n          {pageContent.map((item, index) => (\r\n            <div key={index} style={item.style}>\r\n              {item.text}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      );\r\n    }\r\n    // 如果是TXT内容\r\n    else {\r\n      return (\r\n        <div className=\"txt-page\">\r\n          {pageContent?.map((item, index) => (\r\n            <p key={index} style={item.style}>\r\n              {item.text}\r\n            </p>\r\n          ))}\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App dark\">\r\n      <div className=\"app-container\">\r\n        <h1 className=\"app-title\">ADHD 阅读助手</h1>\r\n        \r\n        <div className=\"control-panel\">\r\n          <input\r\n            type=\"file\"\r\n            accept=\".txt,.md,.pdf\"\r\n            onChange={handleFileUpload}\r\n            id=\"file-upload\"\r\n            className=\"file-input\"\r\n          />\r\n          <label htmlFor=\"file-upload\" className=\"control-btn\">\r\n            选择文件\r\n          </label>\r\n          \r\n          {fileName && (\r\n            <span className=\"file-info\">\r\n              当前文件: {fileName}\r\n            </span>\r\n          )}\r\n          \r\n          <button \r\n            className=\"control-btn\"\r\n            onClick={() => setIsDarkMode(!isDarkMode)}\r\n          >\r\n            切换阅读模式\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"reader-container\">\r\n          {loading ? (\r\n            <div className=\"loading\">\r\n              <div className=\"loading-spinner\"></div>\r\n              <div>正在加载内容，请稍候...</div>\r\n            </div>\r\n          ) : pages.length > 0 ? (\r\n            <div className=\"content-area\">\r\n              {renderPageContent(pages[currentPage - 1])}\r\n            </div>\r\n          ) : (\r\n            <div className=\"upload-prompt\">\r\n              <p>请上传文件开始阅读</p>\r\n              <p className=\"supported-formats\">支持的格式: PDF, TXT (最大100MB)</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}